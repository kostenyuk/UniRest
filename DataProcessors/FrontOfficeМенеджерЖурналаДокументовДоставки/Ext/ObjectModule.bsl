
#Если Клиент Тогда
	
Перем мРежимПоиска, мДанныеПоиска; // Переменные обслуживающие механизм поиска данных.
	
Перем мФорматнаяСтрока; // Форматная строка представления суммы документа.

	
// Процедура инициализация модуля рабочего места.
//
Процедура Инициализация() Экспорт
	
	// Проверка режима.
	Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Создание формы.
	Если (Форма = Неопределено) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
		
КонецПроцедуры // Инициализация()

// Процедура открытия формы рабочего места.
//
Процедура Открыть() Экспорт
	
	// Открытие формы.
	ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		
КонецПроцедуры // Открыть()


// Процедура заполнения табличного поля открытых документов.
//
// Параметры:
//	ТабличноеПоле - TouchТабличноеПоле. Табличное поле;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов;
//	СписокИсключаемых - СписокЗначений. Список исключаемых документов;
//	Реализация - Булево. Сигнализирует о необходимости включения в вборку документов реализаций и нарядов;
//	Списание - Булево. Сигнализирует о необходимости включения в вборку документов списаний;
//	Открытые - Булево. Сигнализирует о необходимости формирования списка открытых или закрытых и удаленных документов.
//
Процедура ТаблицаОткрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаОткрытых", СписокИсключаемых = Неопределено, Реализация = Истина, Списание = Истина, Открытые = Истина, ИерархическийПросмотр = Ложь) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ДеревоЗначений;
		Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.СписаниеТоваров"));
		Данные.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"), "Документ");
		Данные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		Данные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
		Данные.Колонки.Добавить("СотрудникПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Экспедитор/сотрудник';uk='Експедитор/працівник'") );
		Данные.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число"), НСтр("ru='Сумма';uk='Сума'") );
		Данные.Колонки.Добавить("Оплачивать", Новый ОписаниеТипов("Булево"), НСтр("ru='Оплачивать';uk='Оплачувати'") );
		Данные.Колонки.Добавить("Оплата", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
		Данные.Колонки.Добавить("ОплатаПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Вид оплаты';uk='Вид оплати'") );
		Данные.Колонки.Добавить("СуммаОплачиваемая", Новый ОписаниеТипов("Число"));
		Данные.Колонки.Добавить("КонтрагентПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Клиент и адрес';uk='Клієнт та адреса'") );
		Данные.Колонки.Добавить("АдресДоставкиПредставление", Новый ОписаниеТипов("Строка"));
		Данные.Колонки.Добавить("ТелефонПредставление", Новый ОписаниеТипов("Строка"), "Телефон");
		Данные.Колонки.Добавить("ТелефонДополнительныйПредставление", Новый ОписаниеТипов("Строка"));
		Данные.Колонки.Добавить("АдресДоставкиПоиск", Новый ОписаниеТипов("Строка"));
		Данные.Колонки.Добавить("ТелефонПоиск", Новый ОписаниеТипов("Строка"));
		Данные.Колонки.Добавить("ТелефонДополнительныйПоиск", Новый ОписаниеТипов("Строка"));
		Данные.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументов"));
		Данные.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
		
		ТабличноеПоле.Данные(Данные);
		Если Открытые Тогда
			ТабличноеПоле.СоздатьКолонки("Картинка,Номер,СотрудникПредставление,СуммаДокумента,Оплачивать,ОплатаПредставление");
		Иначе
			ТабличноеПоле.СоздатьКолонки("Картинка,Номер,СотрудникПредставление,СуммаДокумента,ОплатаПредставление");
		КонецЕсли;
		ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		Если Открытые Тогда
			ТабличноеПоле.Колонки.Получить("Оплачивать").Ширина = 400 * 0.10;
			ТабличноеПоле.Колонки.Получить("Оплачивать").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
			ТабличноеПоле.Колонки.Получить("Оплачивать").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			ТабличноеПоле.Колонки.Получить("ОплатаПредставление").Ширина = 400 * 0.25;
		Иначе
			ТабличноеПоле.Колонки.Получить("ОплатаПредставление").Ширина = 400 * 0.35;
		КонецЕсли;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
	Иначе
		// -- Текущая позиция (I).
		Если (Не ТабличноеПоле.ТекущийРодитель() = Неопределено) Тогда
			ТекущийРодитель = ТабличноеПоле.ТекущийРодитель().Сотрудник;
		КонецЕсли;
		Если (Не ТабличноеПоле.ТекущаяСтрока() = Неопределено) Тогда
			ТекущийДокумент = ТабличноеПоле.ТекущиеДанные().Ссылка;
		КонецЕсли;
		
		// -- Текущие данные не изменяемые при обновлении.
		Если Открытые Тогда
			ТекущиеДанные = ОбщегоНазначения.ДеревоЗначенийВТаблицуЗначений(Данные, ТабличноеПоле.ТекущийРодитель(), Ложь, "Ссылка,Оплачивать,Оплата,ОплатаПредставление");
		КонецЕсли;
		
		Данные.Строки.Очистить();
	КонецЕсли;

	
	// Выборка данных.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущийСотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
	
	// -- Документы.
	ДоступностьЗаказов = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.РеализацияТоваровУслуг"), ТребуемыеПолномочия);
	ДоступностьСписаний = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.СписаниеТоваров"), ТребуемыеПолномочия);
	Если Реализация Тогда
		Если (ДоступностьЗаказов = Перечисления.ПраваДоступаПользователей.Привилегированные) Тогда
			ЗапросГдеЗаказы = "СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг"
		ИначеЕсли (ДоступностьЗаказов = Перечисления.ПраваДоступаПользователей.Разрешить) Тогда
			ЗапросГдеЗаказы = "СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг И СостояниеДокументов.Сотрудник = &Сотрудник"
		КонецЕсли;
	КонецЕсли;
	Если Списание Тогда
		Если (ДоступностьСписаний = Перечисления.ПраваДоступаПользователей.Привилегированные) Тогда
			ЗапросГдеСписания = "СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров"
		ИначеЕсли (ДоступностьСписаний = Перечисления.ПраваДоступаПользователей.Разрешить) Тогда
			ЗапросГдеСписания = "СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров И СостояниеДокументов.Сотрудник = &Сотрудник"
		КонецЕсли;
	КонецЕсли;
	
	// -- 100% пустая выборка.
	Если (ЗапросГдеЗаказы = Неопределено) И (ЗапросГдеСписания = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	Если (Не ЗапросГдеЗаказы = Неопределено) Тогда
		ЗапросГде = "(" + ЗапросГдеЗаказы + ")";
	КонецЕсли;
	Если (Не ЗапросГдеСписания = Неопределено) Тогда
		Если ПустаяСтрока(ЗапросГде) Тогда
			ЗапросГде = "(" + ЗапросГдеСписания + ")";
		Иначе
			ЗапросГде = ЗапросГде + " ИЛИ " + "(" + ЗапросГдеСписания + ")";
		КонецЕсли;
	КонецЕсли;
	Если (ТипЗнч(СписокИсключаемых) = Тип("СписокЗначений")) Тогда
		ЗапросГде = "(" + ЗапросГде + ") И (НЕ СостояниеДокументов.Документ В &СписокИсключаемых)";
	ИначеЕсли (Не СписокИсключаемых = Неопределено) Тогда
		ЗапросГде = "(" + ЗапросГде + ") И (НЕ СостояниеДокументов.Документ = &СписокИсключаемых)";
	КонецЕсли;
	
	// -- Запрос.
	Если Открытые Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ТекущиеДанные.Ссылка,
		                      |	ТекущиеДанные.Оплачивать,
		                      |	ТекущиеДанные.Оплата,
		                      |	ТекущиеДанные.ОплатаПредставление
		                      |ПОМЕСТИТЬ ВременнаяТекущиеДанные
		                      |ИЗ
		                      |	&ТекущиеДанные КАК ТекущиеДанные
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	СостояниеДокументов.Документ КАК Ссылка,
		                      |	СостояниеДокументов.Номер КАК Номер,
		                      |	СостояниеДокументов.Дата КАК Дата,
		                      |	ВЫБОР
		                      |		КОГДА СостояниеДокументовОснованийНакладныхНаДоставку.Сотрудник ЕСТЬ NULL 
		                      |			ТОГДА СостояниеДокументов.Сотрудник
		                      |		ИНАЧЕ СостояниеДокументовОснованийНакладныхНаДоставку.Сотрудник
		                      |	КОНЕЦ КАК Сотрудник,
		                      |	ВЫБОР
		                      |		КОГДА СостояниеДокументовОснованийНакладныхНаДоставку.Сотрудник ЕСТЬ NULL 
		                      |			ТОГДА СостояниеДокументов.Сотрудник.Представление
		                      |		ИНАЧЕ СостояниеДокументовОснованийНакладныхНаДоставку.Сотрудник.Представление
		                      |	КОНЕЦ КАК СотрудникПредставление,
		                      |	ВременнаяТекущиеДанные.Оплата КАК Оплата,
		                      |	ВременнаяТекущиеДанные.ОплатаПредставление КАК ОплатаПредставление,
		                      |	СостояниеДокументов.СуммаДокумента КАК СуммаДокумента,
		                      |	СостояниеДокументов.Контрагент.Представление КАК КонтрагентПредставление,
		                      |	СостояниеДокументов.АдресДоставкиПоиск КАК АдресДоставкиПоиск,
		                      |	СостояниеДокументов.ТелефонПоиск КАК ТелефонПоиск,
		                      |	СостояниеДокументов.ТелефонДополнительныйПоиск КАК ТелефонДополнительныйПоиск,
		                      |	СостояниеДокументов.АдресДоставкиПредставление КАК АдресДоставкиПредставление,
		                      |	СостояниеДокументов.ТелефонПредставление КАК ТелефонПредставление,
		                      |	СостояниеДокументов.ТелефонДополнительныйПредставление КАК ТелефонДополнительныйПредставление,
		                      |	СостояниеДокументов.Состояние КАК Состояние,
		                      |	ВЫБОР
		                      |		КОГДА ВременнаяТекущиеДанные.Оплачивать ЕСТЬ NULL 
		                      |			ТОГДА ЛОЖЬ
		                      |		ИНАЧЕ ВременнаяТекущиеДанные.Оплачивать
		                      |	КОНЕЦ КАК Оплачивать,
		                      |	ВЫБОР
		                      |		КОГДА ВременнаяТекущиеДанные.Оплачивать = ИСТИНА
		                      |			ТОГДА СостояниеДокументов.СуммаДокумента
		                      |		ИНАЧЕ NULL
		                      |	КОНЕЦ КАК СуммаОплачиваемая
		                      |ИЗ
		                      |	РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовОснованийНакладныхНаДоставку КАК СостояниеДокументовОснованийНакладныхНаДоставку
		                      |		ПО СостояниеДокументов.Документ = СостояниеДокументовОснованийНакладныхНаДоставку.ДокументОснование
		                      |			И СостояниеДокументов.Ресторан = СостояниеДокументовОснованийНакладныхНаДоставку.Ресторан
		                      |			И (СостояниеДокументовОснованийНакладныхНаДоставку.Документ В
		                      |				(ВЫБРАТЬ ПЕРВЫЕ 1
		                      |					СостояниеДокументовОснованийНакладныхНаДоставку.Документ
		                      |				ИЗ
		                      |					РегистрСведений.СостояниеДокументовОснованийНакладныхНаДоставку КАК СостояниеДокументовОснованийНакладныхНаДоставку
		                      |				ГДЕ
		                      |					СостояниеДокументовОснованийНакладныхНаДоставку.ДокументОснование = СостояниеДокументов.Документ
		                      |					И СостояниеДокументовОснованийНакладныхНаДоставку.Ресторан = СостояниеДокументов.Ресторан
		                      |				УПОРЯДОЧИТЬ ПО
		                      |					СостояниеДокументовОснованийНакладныхНаДоставку.Документ УБЫВ))
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТекущиеДанные КАК ВременнаяТекущиеДанные
		                      |		ПО СостояниеДокументов.Документ = ВременнаяТекущиеДанные.Ссылка
		                      |ГДЕ
		                      |	СостояниеДокументов.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка)
		                      |	И СостояниеДокументов.Ресторан = &Ресторан
		                      |	И (СостояниеДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Распечатанные)
		                      |			ИЛИ СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров)
		                      |	И СостояниеДокументов.Документ = СостояниеДокументов.Документ
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	СостояниеДокументов.ДатаНачалаПериода,
		                      //|	Номер");
							  //Костенюк Александр-Старт 23.10.2012
							  |	Номер
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |УНИЧТОЖИТЬ ВременнаяТекущиеДанные");
							  //Костенюк Александр-Финиш 23.10.2012
		Запрос.УстановитьПараметр("ТекущиеДанные", ТекущиеДанные);
	Иначе
		ЗакрытыеСостояния = УправлениеЗаказами.СостоянияЗакрытыхДокументов(Истина);
		
		СписокТипов = Новый СписокЗначений; СписокТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес); СписокТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		СписокВидов = Новый СписокЗначений; СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиРеализацииТоваровУслуг); СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРеализацииТоваровУслуг); СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДополнительныйРеализацииТоваровУслуг);
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	СостояниеДокументов.Ссылка,
		                      |	СостояниеДокументов.Номер,
		                      |	СостояниеДокументов.Дата,
		                      |	СостояниеДокументов.Сотрудник,
		                      |	СостояниеДокументов.СотрудникПредставление,
		                      |	СостояниеДокументов.КонтрагентПредставление,
		                      |	СостояниеДокументов.Оплата,
		                      |	СостояниеДокументов.ОплатаПредставление,
		                      |	СостояниеДокументов.СуммаДокумента,
		                      |	СостояниеДокументов.Состояние КАК Состояние,
		                      |	СостояниеДокументов.ДатаНачалаПериода,
		                      |	СостояниеДокументов.ДатаОкончанияПериода,
		                      |	СостояниеДокументов.Документ
		                      |ПОМЕСТИТЬ ВременнаяВыборкаДокументов
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		                      |		РеализацияТоваровУслуг.Номер КАК Номер,
		                      |		РеализацияТоваровУслуг.Дата КАК Дата,
		                      |		ВЫБОР
		                      |			КОГДА НакладнаяНаДоставкуДокументыОснования.Ссылка.Сотрудник ЕСТЬ NULL 
		                      |				ТОГДА РеализацияТоваровУслуг.Сотрудник
		                      |			ИНАЧЕ НакладнаяНаДоставкуДокументыОснования.Ссылка.Сотрудник
		                      |		КОНЕЦ КАК Сотрудник,
		                      |		ВЫБОР
		                      |			КОГДА НакладнаяНаДоставкуДокументыОснования.Ссылка.Сотрудник ЕСТЬ NULL 
		                      |				ТОГДА РеализацияТоваровУслуг.Сотрудник.Представление
		                      |			ИНАЧЕ НакладнаяНаДоставкуДокументыОснования.Ссылка.Сотрудник.Представление
		                      |		КОНЕЦ КАК СотрудникПредставление,
		                      |		РеализацияТоваровУслуг.Контрагент.Представление КАК КонтрагентПредставление,
		                      |		РеализацияТоваровУслуг.Оплата КАК Оплата,
		                      |		РеализацияТоваровУслуг.Оплата.Представление КАК ОплатаПредставление,
		                      |		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		                      |		РеализацияТоваровУслуг.Состояние КАК Состояние,
		                      |		РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
		                      |		РеализацияТоваровУслуг.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		                      |		РеализацияТоваровУслуг.Ссылка КАК Документ
		                      |	ИЗ
		                      |		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		                      |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
		                      |			ПО (НакладнаяНаДоставкуДокументыОснования.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
		                      |				И (НакладнаяНаДоставкуДокументыОснования.Ссылка.Ресторан = РеализацияТоваровУслуг.Ресторан)
		                      |				И (НАЧАЛОПЕРИОДА(НакладнаяНаДоставкуДокументыОснования.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ))
		                      |				И ((НЕ НакладнаяНаДоставкуДокументыОснования.Ссылка.Ссылка.ПометкаУдаления))
		                      |				И (НакладнаяНаДоставкуДокументыОснования.Ссылка В
		                      |					(ВЫБРАТЬ ПЕРВЫЕ 1
		                      |						НакладнаяНаДоставкуДокументыОснования.Ссылка
		                      |					ИЗ
		                      |						Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
		                      |					ГДЕ
		                      |						НакладнаяНаДоставкуДокументыОснования.ДокументОснование = РеализацияТоваровУслуг.Ссылка
		                      |						И НакладнаяНаДоставкуДокументыОснования.Ссылка.Ресторан = РеализацияТоваровУслуг.Ресторан
		                      |						И НАЧАЛОПЕРИОДА(НакладнаяНаДоставкуДокументыОснования.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		                      |						И (НЕ НакладнаяНаДоставкуДокументыОснования.Ссылка.ПометкаУдаления)
		                      |					УПОРЯДОЧИТЬ ПО
		                      |						НакладнаяНаДоставкуДокументыОснования.Ссылка УБЫВ))
		                      |	ГДЕ
		                      |		РеализацияТоваровУслуг.Ресторан = &Ресторан
		                      |		И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		                      |		И РеализацияТоваровУслуг.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка)
		                      |		И РеализацияТоваровУслуг.Состояние В(&ЗакрытыеСостояния)
		                      |	
		                      |	ОБЪЕДИНИТЬ ВСЕ
		                      |	
		                      |	ВЫБРАТЬ
		                      |		СписаниеТоваров.Ссылка,
		                      |		СписаниеТоваров.Номер,
		                      |		СписаниеТоваров.Дата,
		                      |		СписаниеТоваров.Сотрудник,
		                      |		СписаниеТоваров.Сотрудник.Представление,
		                      |		NULL,
		                      |		СписаниеТоваров.Оплата,
		                      |		СписаниеТоваров.Оплата.Представление,
		                      |		СписаниеТоваров.СуммаДокумента,
		                      |		СписаниеТоваров.Состояние,
		                      |		СписаниеТоваров.ДатаНачалаПериода,
		                      |		СписаниеТоваров.ДатаОкончанияПериода,
		                      |		СписаниеТоваров.Ссылка
		                      |	ИЗ
		                      |		Документ.СписаниеТоваров КАК СписаниеТоваров
		                      |	ГДЕ
		                      |		СписаниеТоваров.Ресторан = &Ресторан
		                      |		И НАЧАЛОПЕРИОДА(СписаниеТоваров.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		                      |		И СписаниеТоваров.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка)
		                      |		И СписаниеТоваров.Состояние В(&ЗакрытыеСостояния)) КАК СостояниеДокументов
		                      |ГДЕ
		                      |	СостояниеДокументов.Документ = СостояниеДокументов.Документ
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	СостояниеДокументов.Ссылка КАК Ссылка,
		                      |	КИРТУ.Тип КАК Тип,
		                      |	КИРТУ.Вид КАК Вид,
		                      |	КИРТУ.Поле6 КАК Поле6,
		                      |	КИРТУ.Поле7 КАК Поле7,
		                      |	КИРТУ.Представление КАК Представление,
		                      |	КИРТУ.Поиск КАК Поиск
		                      |ПОМЕСТИТЬ ВременнаяКИРТУ
		                      |ИЗ
		                      |	ВременнаяВыборкаДокументов КАК СостояниеДокументов
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КИРТУ
		                      |		ПО СостояниеДокументов.Ссылка = КИРТУ.Документ
		                      |ГДЕ
		                      |	КИРТУ.Тип В(&СписокТипов)
		                      |	И КИРТУ.Вид В(&СписокВидов)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	СостояниеДокументов.Ссылка,
		                      |	СостояниеДокументов.Номер КАК Номер,
		                      |	СостояниеДокументов.Дата КАК Дата,
		                      |	СостояниеДокументов.Сотрудник,
		                      |	СостояниеДокументов.СотрудникПредставление,
		                      |	СостояниеДокументов.КонтрагентПредставление,
		                      |	СостояниеДокументов.Оплата,
		                      |	СостояниеДокументов.ОплатаПредставление,
		                      |	СостояниеДокументов.СуммаДокумента,
		                      |	СостояниеДокументов.Состояние КАК Состояние,
		                      |	ЛОЖЬ КАК Оплачивать,
		                      |	NULL КАК СуммаОплачиваемая,
		                      |	КИРТУАдресДоставки.Представление КАК АдресДоставкиПредставление,
		                      |	КИРТУАдресДоставки.Поиск КАК АдресДоставкиПоиск,
		                      |	КИРТУТелефон.Представление КАК ТелефонПредставление,
		                      |	КИРТУТелефон.Поиск КАК ТелефонПоиск,
		                      |	КИРТУТелефонДополнительный.Представление КАК ТелефонДополнительныйПредставление,
		                      |	КИРТУТелефонДополнительный.Поиск КАК ТелефонДополнительныйПоиск
		                      |ИЗ
		                      |	ВременнаяВыборкаДокументов КАК СостояниеДокументов
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяКИРТУ КАК КИРТУАдресДоставки
		                      |		ПО СостояниеДокументов.Ссылка = КИРТУАдресДоставки.Ссылка
		                      |			И (КИРТУАдресДоставки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		                      |			И (КИРТУАдресДоставки.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиРеализацииТоваровУслуг))
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяКИРТУ КАК КИРТУТелефон
		                      |		ПО СостояниеДокументов.Ссылка = КИРТУТелефон.Ссылка
		                      |			И (КИРТУТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		                      |			И (КИРТУТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРеализацииТоваровУслуг))
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяКИРТУ КАК КИРТУТелефонДополнительный
		                      |		ПО СостояниеДокументов.Ссылка = КИРТУТелефонДополнительный.Ссылка
		                      |			И (КИРТУТелефонДополнительный.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		                      |			И (КИРТУТелефонДополнительный.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонДополнительныйРеализацииТоваровУслуг))
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	СостояниеДокументов.ДатаОкончанияПериода,
		                      //|	Номер");
							  //Костенюк Александр-Старт 23.10.2012
							  |	Номер
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |УНИЧТОЖИТЬ ВременнаяВыборкаДокументов
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |УНИЧТОЖИТЬ ВременнаяКИРТУ");
							  //Костенюк Александр-Финиш 23.10.2012
		Запрос.УстановитьПараметр("Дата", ПолучитьСерверFrontOffice().ТекущаяКассоваяДата());
		Запрос.УстановитьПараметр("ЗакрытыеСостояния", ЗакрытыеСостояния);
		Запрос.УстановитьПараметр("СписокТипов", СписокТипов);
		Запрос.УстановитьПараметр("СписокВидов", СписокВидов);
	КонецЕсли;
	Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
	Запрос.УстановитьПараметр("СписокИсключаемых", СписокИсключаемых);
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Если ТекущийРесторан.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам) Тогда
		Если Открытые Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеДокументов.Ресторан = &Ресторан", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг.Ресторан = &Ресторан", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписаниеТоваров.Ресторан = &Ресторан", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеДокументов.Документ = СостояниеДокументов.Документ", ЗапросГде);
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Перенос данных в табличное поле.
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// -- Добавление в дерево родителей.
		СтрокаГруппы = Данные;
		Если ИерархическийПросмотр Тогда
			СтрокаЭлемент = Данные.Строки.Найти(Выборка.Сотрудник, "Сотрудник");
			
			Если (СтрокаЭлемент = Неопределено) Тогда
				СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
				СтрокаЭлемент.Сотрудник = Выборка.Сотрудник;
				СтрокаЭлемент.СотрудникПредставление = Выборка.СотрудникПредставление;
				СтрокаЭлемент.ЭтоГруппа = Истина;
			КонецЕсли;
			
			СтрокаГруппы = СтрокаЭлемент;
		КонецЕсли;
		
		// -- Добавление в дерево элемента.
		СтрокаДанных = СтрокаГруппы.Строки.Добавить();
		
		СтрокаДанных.Ссылка = Выборка.Ссылка;
		СтрокаДанных.Номер = Выборка.Номер;
		СтрокаДанных.Дата = Выборка.Дата;
		СтрокаДанных.Сотрудник = Выборка.Сотрудник;
		СтрокаДанных.СотрудникПредставление = Выборка.СотрудникПредставление;
		СтрокаДанных.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДанных.Оплачивать = Выборка.Оплачивать;
		СтрокаДанных.Оплата = Выборка.Оплата;
		СтрокаДанных.ОплатаПредставление = Выборка.ОплатаПредставление;
		СтрокаДанных.СуммаОплачиваемая = Выборка.СуммаОплачиваемая;
		СтрокаДанных.КонтрагентПредставление = Выборка.КонтрагентПредставление;
		СтрокаДанных.АдресДоставкиПредставление = Выборка.АдресДоставкиПредставление;
		СтрокаДанных.ТелефонПредставление = Выборка.ТелефонПредставление;
		СтрокаДанных.ТелефонДополнительныйПредставление = Выборка.ТелефонДополнительныйПредставление;
		СтрокаДанных.АдресДоставкиПоиск = Выборка.АдресДоставкиПоиск;
		СтрокаДанных.ТелефонПоиск = Выборка.ТелефонПоиск;
		СтрокаДанных.ТелефонДополнительныйПоиск = Выборка.ТелефонДополнительныйПоиск;
		СтрокаДанных.Состояние = Выборка.Состояние;
		
		// -- Обновление родителя.
		Если ИерархическийПросмотр Тогда
			СтрокаГруппы.СуммаДокумента = СтрокаГруппы.СуммаДокумента + СтрокаДанных.СуммаДокумента;	
		КонецЕсли;
		
		// -- Текущая позиция (II).
		Если (Не СтрокаДанных.Родитель = Неопределено) И (СтрокаДанных.Сотрудник = ТекущийРодитель) Тогда
			ТекущаяСтрокаРодитель = СтрокаДанных.Родитель;
		КонецЕсли;
		Если (СтрокаДанных.Ссылка = ТекущийДокумент) Тогда
			ТекущаяСтрока = СтрокаДанных;
		КонецЕсли;
	КонецЦикла;
	
	// -- Сортировка.
	Если ИерархическийПросмотр Тогда
		Данные.Строки.Сортировать("СотрудникПредставление");
	КонецЕсли;
	
	
	// -- Текущая позиция (III).
	Если (Не ТекущаяСтрокаРодитель = Неопределено) Или (Не ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ТекущаяПозиция(ТекущаяСтрока, ,, ТекущаяСтрокаРодитель);
	КонецЕсли;
	
	// Обновление.
	Если (ТекущаяСтрокаРодитель = Неопределено) И (ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;

КонецПроцедуры // ТаблицаОткрытыхДокументовПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля открытых документов.
//
Процедура ТаблицаОткрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Открытые = Истина) Экспорт

	// Оформление строки.
	ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("Номер").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("СотрудникПредставление").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("СуммаДокумента").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	Если Открытые Тогда
		ОформлениеСтроки.Ячейки("Оплачивать").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	КонецЕсли;
	ОформлениеСтроки.Ячейки("ОплатаПредставление").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	
	СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
	
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Картинка"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Номер"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СотрудникПредставление"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
	Если Открытые Тогда
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Оплачивать"), СтруктураСтиля);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ОплатаПредставление"), СтруктураСтиля);
	
	
	// Номер.
	ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
	
	// Оплачивать.
	Если Открытые Тогда
		Если ДанныеСтроки.ЭтоГруппа Тогда
			ОформлениеСтроки.Ячейки("Оплачивать").ОтображатьФлажок = Ложь;
			Если (Не Элемент.ТекущийРодитель() = Неопределено) Тогда
				ОформлениеСтроки.Ячейки("Оплачивать").Выравнивание = ГоризонтальноеПоложение.Право;
				ОформлениеСтроки.Ячейки("Оплачивать").УстановитьТекст(Формат(Элемент.ТекущийРодитель().Строки.Итог("СуммаОплачиваемая"), мФорматнаяСтрока));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОткрытыхДокументовВывестиСтроку()

// Процедура осуществляет поиск данных табличного поля открытых документов.
//
Функция ТаблицаОткрытыхДокументовНайти(ТабличноеПоле) Экспорт
	
	Перем Значение;
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПоиска");
	
	// Выбор.
	ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
	Если (Не ТипЗнч(ПараметрЗакрытия) = Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Режим и данные поиска.
	мРежимПоиска = ПараметрЗакрытия; мДанныеПоиска = ТабличноеПоле.Данные(); 
	
	// Данные.
	Данные = Новый ТаблицаЗначений;
	Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
		Данные.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
	
	// Поиск.
	Если (мРежимПоиска = "Телефон") Тогда
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите телефон';uk='Введіть телефон'") , 12, ,,, "ЧЦ=12; ЧДЦ=0; ЧГ=", Данные, "Номер,ТелефонПредставление", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Адрес") Тогда
		Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите адрес';uk='Введіть адресу'") , ,,, Данные, "Номер,КонтрагентПредставление", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите сумму';uk='Введіть суму'") , Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ,,, Данные, "Номер,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите сотрудника';uk='Введіть працівника'") , ,,, Данные, "Номер,СотрудникПредставление,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	Иначе
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите номер документа';uk='Введіть номер документу'") , Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера, ,,, "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера + "; ЧДЦ=0; ЧГ=", Данные, "Номер", , ЭтотОбъект, "ПоискДокумента");
	КонецЕсли;
	
	// Позиционирование.
	Если Результат Тогда
		ТабличноеПоле.ТекущаяСтрока(ТабличноеПоле.Данные().Строки.Найти(Значение.Ссылка, "Ссылка", Истина));
	КонецЕсли;
	
	// Результат.
	Возврат Результат;
	
КонецФункции // ТаблицаОткрытыхДокументовНайти()


// Процедура заполнения табличного поля закрытых документов.
//
// Описания:
//	См. процедуру "ТаблицаОткрытыхДокументовПрочитать".
//
Процедура ТаблицаЗакрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаЗакрытых", СписокИсключаемых = Неопределено, Реализация = Истина, Списание = Истина, ИерархическийПросмотр = Ложь) Экспорт
	
	ТаблицаОткрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия, СписокИсключаемых, Реализация, Списание, Ложь, ИерархическийПросмотр);
	
КонецПроцедуры // ТаблицаЗакрытыхДокументовПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля закрырых документов.
//
Процедура ТаблицаЗакрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	ТаблицаОткрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Ложь);

КонецПроцедуры // ТаблицаЗакрытыхДокументовВывестиСтроку()

// Процедура осуществляет поиск данных табличного поля закрытых документов.
//
// Описания:
//	См. процедуру "ТаблицаОткрытыхДокументовПрочитать".
//
Функция ТаблицаЗакрытыхДокументовНайти(ТабличноеПоле) Экспорт
	
	Возврат ТаблицаОткрытыхДокументовНайти(ТабличноеПоле);
	
КонецФункции // ТаблицаЗакрытыхДокументовНайти()


// Обработчик события ПоискДокумента.ПриИзмененииДанных элемента.
//
Процедура ПоискДокументаПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	
	ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.20;
	ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	Если (мРежимПоиска = "Телефон") Тогда
		ТабличноеПоле.Колонки.Получить("ТелефонПредставление").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("ТелефонПредставление").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	ИначеЕсли (мРежимПоиска = "Адрес") Тогда
		ТабличноеПоле.Колонки.Получить("КонтрагентПредставление").Ширина = 400 * 0.70;
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	КонецЕсли;
	
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ПоискДокументаПриИзмененииДанных()

// Обработчик события ПоискДокумента.ПриПоискеЗначения элемента.
//
Процедура ПоискДокументаПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	// Даныне.
	Данные = Элемент.Данные(); Данные.Очистить();
	
	// Значение для поиска.
	Если (мРежимПоиска = "Телефон") Тогда
		ЗначениеДляПоиска = Формат(Значение, "ЧГ=");
	ИначеЕсли (мРежимПоиска = "Адрес") Тогда
		ЗначениеДляПоиска = Нрег(СокрЛ(Значение));
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		ЗначениеДляПоиска = Формат(Значение, "ЧРД=,; ЧГ=");
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		ЗначениеДляПоиска = Нрег(СокрЛ(Значение));
	Иначе
		ЗначениеДляПоиска = Формат(Значение, "ЧГ=");
	КонецЕсли;
	Если ПустаяСтрока(ЗначениеДляПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	// Нисходящий обход дерева.
	СписокПодчиненных = Новый СписокЗначений();
	СписокПодчиненных.Добавить(мДанныеПоиска);

	Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
		СтрокаВладелец = СтрокаВладелец.Значение;	// Наепка - друг чекиста ;)
		
		Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
			Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
				СписокПодчиненных.Добавить(СтрокаВладельца);
			КонецЕсли;
			
			СтрокаТаблицыДанных = СтрокаВладельца;
			
			// Поиск.
			Если СтрокаТаблицыДанных.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Если (мРежимПоиска = "Телефон") Тогда
				Валидная = Булево(Найти(СтрокаТаблицыДанных.ТелефонПоиск, ЗначениеДляПоиска)) Или Булево(Найти(СтрокаТаблицыДанных.ТелефонДополнительныйПоиск, ЗначениеДляПоиска));
			ИначеЕсли (мРежимПоиска = "Адрес") Тогда
				Валидная = Булево(Найти(НРег(СтрокаТаблицыДанных.АдресДоставкиПоиск), ЗначениеДляПоиска));
			ИначеЕсли (мРежимПоиска = "Сумма") Тогда
				Валидная = Булево(Найти(Формат(СтрокаТаблицыДанных.СуммаДокумента), ЗначениеДляПоиска));
			ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
				Валидная = Булево(Найти(НРег(СтрокаТаблицыДанных.СотрудникПредставление), ЗначениеДляПоиска));
			Иначе
				Валидная = Булево(Найти(FrontOffice.ПредставлениеНомера(СтрокаТаблицыДанных.Номер), ЗначениеДляПоиска));
			КонецЕсли;
			Если Не Валидная Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = Данные.Добавить();
			Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
				СтрокаТаблицы[Колонка.Имя] = СтрокаТаблицыДанных[Колонка.Имя];
			КонецЦикла;
			
			// TODO: Поиск значения.
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры // ПоискКлиентаПриПоискеЗначения()

// Обработчик события ПоискДокумента.ПриВыводеСтроки элемента.
//
Процедура ПоискДокументаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
	
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Номер"), СтруктураСтиля);
	Если (мРежимПоиска = "Телефон") Тогда
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ТелефонПредставление"), СтруктураСтиля);
	ИначеЕсли (мРежимПоиска = "Адрес") Тогда
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("КонтрагентПредставление"), СтруктураСтиля);
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
	КонецЕсли;
	
	// Номер.
	ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
	
	// ТелефонПредставление.
	Если (мРежимПоиска = "Телефон") Тогда
		ОформлениеСтроки.Ячейки("ТелефонПредставление").Текст = ДанныеСтроки.ТелефонПредставление + УправлениеКонтактнойИнформацией.ПроверкаПустойСтроки(ДанныеСтроки.ТелефонДополнительныйПредставление, Символы.ПС) + ДанныеСтроки.ТелефонДополнительныйПредставление;
	КонецЕсли;
	
	// КонтрагентПредставление.
	Если (мРежимПоиска = "Адрес") Тогда
		ОформлениеСтроки.Ячейки("КонтрагентПредставление").Текст = ДанныеСтроки.КонтрагентПредставление + Символы.ПС + ДанныеСтроки.АдресДоставкиПредставление;
	КонецЕсли;
	
КонецПроцедуры // ПоискКлиентаПриВыводеСтроки()


// Функция применения оплаты к документам по данным из табличного поля открытых документов.
//
Функция ОплатаПрименить(ТабличноеПоле) Экспорт
	
	// Данные.
	ТекщийРодитель = ТабличноеПоле.ТекущийРодитель();
	Если (ТекщийРодитель = Неопределено) Тогда
		Строки = ТабличноеПоле.Данные().Строки;	
	Иначе
		Строки = ТекщийРодитель.Строки;	
	КонецЕсли;
	
	// Действие.
	Для Каждого СтрокаДереваЗначений Из Строки Цикл
		Если (Не СтрокаДереваЗначений.Оплачивать) Или (Не ЗначениеЗаполнено(СтрокаДереваЗначений.Оплата)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Изменение документа.
		ДокументОбъект = СтрокаДереваЗначений.Ссылка;
		
		Если Не РаботаСДиалогами.ДокументПровести(ДокументОбъект, Неопределено, ,СтрокаДереваЗначений.Оплата) Тогда Возврат Ложь; КонецЕсли;
		
		//СД перенос на новый движок
		//Если ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект) И
		//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОбъект, "Оплата", СтрокаДереваЗначений.Оплата) И
		//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОбъект, "ОтражатьВУправленческомУчете", СтрокаДереваЗначений.Оплата.ОтражатьВУправленческомУчете) И
		//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОбъект, "ОтражатьВНалоговомУчете", СтрокаДереваЗначений.Оплата.ОтражатьВНалоговомУчете) И
		//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОбъект, "ОтражатьВБухгалтерскомУчете", СтрокаДереваЗначений.Оплата.ОтражатьВБухгалтерскомУчете) И
		//	 
		//	 
		//	 ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.Проведение) И
		//	 ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект) Тогда
		//Иначе
		//	ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект);
		//	Возврат Ложь;
		//КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОплатаПрименить()

// Процедура установки вида оплаты документов в табличном поле открытых документов.
//
Процедура ОплатаУстановить(ТабличноеПоле, Документ, Оплата) Экспорт
	
	// Документ.
	СтрокаДанных = ТабличноеПоле.Данные().Строки.Найти(Документ, "Ссылка", Истина);
	Если (СтрокаДанных = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Действие.
	Если (Не Оплата = Неопределено) Тогда
		СтрокаДанных.Оплачивать = Истина;
		СтрокаДанных.Оплата = Оплата;
		СтрокаДанных.ОплатаПредставление = СтрокаДанных.Оплата;
		СтрокаДанных.СуммаОплачиваемая = СтрокаДанных.СуммаДокумента;
	Иначе
		СтрокаДанных.Оплачивать = Ложь;
		СтрокаДанных.Оплата = Неопределено;
		СтрокаДанных.ОплатаПредставление = Неопределено;
		СтрокаДанных.СуммаОплачиваемая = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОплатаУстановить()

// Процедура очистки вида оплаты документов в табличном поле открытых документов.
//
Процедура ОплатаУдалить(ТабличноеПоле, Исключая = Неопределено) Экспорт
	
	// Нисходящий обход дерева.
	СписокПодчиненных = Новый СписокЗначений();
	СписокПодчиненных.Добавить(ТабличноеПоле.Данные());

	Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
		СтрокаВладелец = СтрокаВладелец.Значение;	// Наепка - друг чекиста ;)
		
		Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
			Если (Не СтрокаВладельца.Родитель = Исключая) Тогда
				СтрокаВладельца.Оплачивать = Ложь;
				СтрокаВладельца.Оплата = Неопределено;
				СтрокаВладельца.ОплатаПредставление = Неопределено;
				СтрокаВладельца.СуммаОплачиваемая = Неопределено;
			КонецЕсли;
					
			Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
				СписокПодчиненных.Добавить(СтрокаВладельца);
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры // ОплатаСбросить()


// Инициализация переменных.
мФорматнаяСтрока = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";

#КонецЕсли
