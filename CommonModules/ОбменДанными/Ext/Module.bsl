Функция ВыложитьТекстовыйДокумент(ИмяФайла, Знач Расширение=".ini", ТекстовыйДокумент, Перезаписывать=Ложь)
	
	Имя = СокрЛП(ИмяФайла);
	Если ПустаяСтрока(Имя)
		ИЛИ ТипЗнч(ТекстовыйДокумент)<>Тип("ТекстовыйДокумент") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КаталогИсходящих	= Константы.КаталогОбмена.Получить();
	ПолноеИмяФайла		= КаталогИсходящих + "\" + Имя + Расширение;
	
	Если НЕ Перезаписывать Тогда
		Счетчик	= 0;
		Пока Счетчик<1000 Цикл
			Если Счетчик<>0 Тогда
				ПолноеИмяФайла = КаталогИсходящих + "\" + Имя
					+ "_" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd_hhmmss")
					+ "_" + Формат(Счетчик,"ЧДЦ=0; ЧГ=")
					+ Расширение;
			КонецЕсли;
			Файл = Новый Файл(ПолноеИмяФайла);
			Если НЕ Файл.Существует() Тогда
				Прервать;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		ТекстовыйДокумент.Записать(ПолноеИмяФайла,"windows-1251");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьНастройки()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Секция",Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("Параметр",Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("Значение",Новый ОписаниеТипов("Строка"));
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура УстановитьЗначение(Настройки, Секция, Параметр, Значение)
	
	Если ТипЗнч(Настройки)<>Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Структуа	= Новый Структура("Секция,Параметр",Секция,Параметр);
	МассивСтрок = Настройки.НайтиСтроки(Структуа);
	Если МассивСтрок.Количество()>0 Тогда
		//НоваяСтрока = МассивСтрок[0];
		//Костенюк Александр-Старт 03.05.2012
		НоваяСтрока = МассивСтрок[МассивСтрок.Количество()-1];
		//Костенюк Александр-Финиш 03.05.2012
	Иначе
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.Секция	= Секция;
		НоваяСтрока.Параметр = Параметр;
	КонецЕсли; 
	
	НоваяСтрока.Значение = Значение;
	
КонецПроцедуры

Процедура ПрисоеденитьОсновнуюСекцию(Настройки, Результат="PASS")
	
	Секция = "General";
    УстановитьЗначение(Настройки,Секция,"Result",Результат);
	
КонецПроцедуры

Функция СоздатьТекстовыйДокументИзНастроек(Настройки)
	
	Если ТипЗнч(Настройки)<>Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки.Сортировать("Секция,Параметр");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Секция = "";
	
	Для каждого Строка Из Настройки Цикл
		Если Секция<>Строка.Секция Тогда
			Секция = Строка.Секция;
			ТекстовыйДокумент.ДобавитьСтроку("["+Строка.Секция+"]");
		КонецЕсли;
		ТекстовыйДокумент.ДобавитьСтроку(Строка.Параметр+"="+Строка(Строка.Значение));
	КонецЦикла; 
	
	Возврат ТекстовыйДокумент;
	
КонецФункции

Функция АдаптированнаяСтрока(Знач Значение)

	Возврат СтрЗаменить(Значение,"'","_");	
	
КонецФункции

Функция АдаптированнаяДата(Значение)

	Возврат Формат(Значение,"ДФ=yyyy-MM-dd");
	
КонецФункции

Функция АдаптированнаяДатаВремя(Значение)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "2000-01-01 00:00:00";
	Иначе
		Возврат Формат(Значение,"ДФ='yyyy-MM-dd HH:mm:ss'");
	КонецЕсли; 

КонецФункции

Функция АдаптированныйКод(Значение)

	Возврат АдаптированнаяСтрока(СтрЗаменить(Строка(Значение),"/","."));

КонецФункции

Функция АдаптированноеБулево(Значение)

	Возврат ?(Значение=Истина,1,0);

КонецФункции

Функция АдаптированноеЧисло(Значение)

	Возврат СтрЗаменить(Формат(Значение,"ЧГ=0"),",",".");

КонецФункции

Функция НайтиПоСсылкеКодОбмена(Ссылка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СинонимыОбъектов.КодОбмена
	|ИЗ
	|	РегистрСведений.СинонимыОбъектов КАК СинонимыОбъектов
	|ГДЕ
	|	СинонимыОбъектов.Объект = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КодОбмена;
	КонецЕсли;

	Возврат "";

КонецФункции

Функция ПолучитьКоличествоФайлов(Знач Каталог,Маска,ДобавитьСтандартныйПуть=Истина)

	Если ДобавитьСтандартныйПуть Тогда
		Каталог = Константы.КаталогОбмена.Получить() + "\" + Каталог;
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(Каталог,Маска,Ложь);
	
	Возврат МассивФайлов.Количество();

КонецФункции

// Игорь 29.09.2011 13:01:22
Функция ПолучитьВремяПоследнейЗагрузкиДисконтныхКарт() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокФайловПриОбменеСрезПоследних.Период 
	|ИЗ
	|	РегистрСведений.СписокФайловПриОбмене.СрезПоследних(
	|			,
	|			КоличествоПопыток > 0
	|				И ВидыОбъектовОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ДисконтныеКарты)) КАК СписокФайловПриОбменеСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат	 ОбщегоНазначенияСервер.ПолучитьПустуюДату();
	Иначе
		Возврат	РезультатЗапроса.Выгрузить()[0].Период;
	КонецЕсли;	
КонецФункции

Функция ПолучитьВремяПоследнейЗагрузкиВидовСертификатов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокФайловПриОбменеСрезПоследних.Период 
	|ИЗ
	|	РегистрСведений.СписокФайловПриОбмене.СрезПоследних(
	|			,
	|			КоличествоПопыток > 0
	|				И ВидыОбъектовОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ВидыСертификатов)) КАК СписокФайловПриОбменеСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда                                             
		Возврат	 ОбщегоНазначенияСервер.ПолучитьПустуюДату();
	Иначе
		Возврат	РезультатЗапроса.Выгрузить()[0].Период;        
	КонецЕсли;	
КонецФункции

Функция ПолучитьВремяПоследнейЗагрузкиСертификатов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокФайловПриОбменеСрезПоследних.Период 
	|ИЗ
	|	РегистрСведений.СписокФайловПриОбмене.СрезПоследних(
	|			,
	|			КоличествоПопыток > 0
	|				И ВидыОбъектовОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.Сертификаты)) КАК СписокФайловПриОбменеСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат	 ОбщегоНазначенияСервер.ПолучитьПустуюДату();
	Иначе
		Возврат	РезультатЗапроса.Выгрузить()[0].Период;
	КонецЕсли;	
КонецФункции

//Процедура ВыполнитьОбработкуАвтообменПрограммно(Дата) Экспорт
//Костенюк Александр-Старт 18.03.2012
//Не передаем никаких параметров, т.к. возникнет следующая ошибка:
//"Количество фактических параметров фонового задания не совпадает с количеством параметров метода фонового задания. "
//это означает, что в метод ВыполнитьОбработку() вообще не нужно передавать параметров,
//следовательно и фактических параметров фонового задания ВыполнитьОбработкуАвтообменПрограммно() не должно быть 
Процедура ВыполнитьОбработкуАвтообменПрограммно() Экспорт
//Костенюк Александр-Финиш 18.03.2012
	
	Обработка = Обработки.Автообмен.Создать();
	//Обработка.ВыполнитьОбработку(Дата);
	
	//Костенюк Александр-Старт 18.03.2012
	Обработка.ВыполнитьОбработку();
	//Костенюк Александр-Финиш 18.03.2012
	
КонецПроцедуры

Функция ПолучитьКоличествоДисконтныхКарт()

	//.. Начало изменения Dim)on  10 октября 2013 г. 16:29:05
	//
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(Карты.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(ИнформационныеКарты.Ссылка) КАК Количество
	|	ИЗ
	|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|	ГДЕ
	|		НЕ ИнформационныеКарты.ЭтоГруппа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РегистрационныеКарты.Ссылка)
	|	ИЗ
	|		Справочник.РегистрационныеКарты КАК РегистрационныеКарты
	|	ГДЕ
	|		НЕ РегистрационныеКарты.ЭтоГруппа) КАК Карты"
	);
	//
	//.. Конец изменения Dim)on  10 октября 2013 г. 16:29:05
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество<>NULL Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли; 

КонецФункции

Функция СоздатьЗаголовок(Настройка, ИдентификаторТипа, ДобавитьКодРесторана,ДобавитьВерсиюКонфигурации,ДобавитьДатуКонфигурации)

	КодРесторанаНативный		= Константы.КодРесторана.Получить();
	КодРесторана				= "" + Формат(КодРесторанаНативный,"ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");
	ИдентификаторКонфигурации	= Метаданные.Версия;
	ИдентификаторПинга			= "" + КодРесторана + "." + ИдентификаторКонфигурации;
	
	УстановитьЗначение(Настройка,"Values","MainID", Строка(ИдентификаторПинга));
	
 	Если ИдентификаторТипа<>-1 Тогда
	    УстановитьЗначение(Настройка,"Values","Type_ID", АдаптированноеЧисло(ИдентификаторТипа));
	КонецЕсли; 
	
	Если ДобавитьКодРесторана Тогда
	    УстановитьЗначение(Настройка,"Values","Rest_ID", КодРесторана);
	КонецЕсли;
	
	Если ДобавитьВерсиюКонфигурации Тогда
		УстановитьЗначение(Настройка,"Values","Version", Строка(Метаданные.Версия));
	КонецЕсли; 
	
	Если ДобавитьДатуКонфигурации Тогда
		Комментарий			= Метаданные.Комментарий;
		ДатаКонфигурации	= Сред(Комментарий,Найти(Комментарий," от ")+4);
		УстановитьЗначение(Настройка,"Values","VersionDate", ДатаКонфигурации);
	КонецЕсли; 
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ

Функция ПередатьЛогПинг() Экспорт
	
	СекцияЗначений				= "Values";
	КодРесторанаНативный		= Константы.КодРесторана.Получить();
	КодРесторана				= "" + Формат(КодРесторанаНативный,"ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");
	ИдентификаторКонфигурации	= Метаданные.Версия;
	ИдентификаторОбъекта		= "" + КодРесторана + "." + ИдентификаторКонфигурации;
	
	// версия конфигурации
	Комментарий					= СтрЗаменить(СокрЛП(Метаданные.Комментарий), " от ", "_");
	Позиция						= Найти(Комментарий, "_"); 
	ВерсияКонфигурации			= Лев(Комментарий, Макс(Позиция-1, 0));
	ДатаКонфигурации			= Сред(Комментарий, Позиция+1);
	Идентификатор				= "";
	
	// создаем новый INI
	Настрока					= СоздатьНастройки();
	ИдентификаторПинга			= СоздатьЗаголовок(Настрока,1,Истина,Истина,Истина);
	
	УстановитьЗначение(Настрока,СекцияЗначений,"Password", СокрЛП(Константы.ПарольДляОбменаДисконтнымиКартамиПоПротоколуHTTP.Получить()));
	
	ПоследняяДатаЗагрузки = ПолучитьВремяПоследнейЗагрузкиДисконтныхКарт();
	Если ЗначениеЗаполнено(ПоследняяДатаЗагрузки) Тогда
	    УстановитьЗначение(Настрока,СекцияЗначений,"LastDate", АдаптированнаяДатаВремя(ПоследняяДатаЗагрузки));
	КонецЕсли; 
	
	Если Константы.ИспользоватьОбменДисконтнымиКартамиПоПротоколуНТТР.Получить() Тогда
		УстановитьЗначение(Настрока,СекцияЗначений,"DiscountsFilesCount",АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\sdc_out","sdc_out_*.txt")));
	КонецЕсли;
	
	Если Константы.ИспользоватьОбменСертификатамиПоПротоколуНТТР.Получить() Тогда
		УстановитьЗначение(Настрока,СекцияЗначений,"CertifTypesFilesCount",АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\certificates","certif_types_*.txt")));
		УстановитьЗначение(Настрока,СекцияЗначений,"CertificatesFilesCount",АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\certificates","certificates_*.txt")));
	КонецЕсли;
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторОбъекта);
	УстановитьЗначение(Настрока,"General","NoDelete","1");
	
	Возврат ВыложитьТекстовыйДокумент("out\log\ping",,СоздатьТекстовыйДокументИзНастроек(Настрока),Истина);
	
КонецФункции

Функция ПередатьПинг() Экспорт
	 
	// статистика по сертификатам
	КоличествоСертификатов	= 0;
	Если Константы.ИспользоватьОбменСертификатамиПоПротоколуНТТР.Получить() Тогда
		КоличествоСертификатов	= ПолучитьКоличествоФайлов("certificates\","cancellation_*.ini");
	КонецЕсли;
	
	Идентификатор				= "";
	
	Настрока					= СоздатьНастройки();
	ИдентификаторПинга			= СоздатьЗаголовок(Настрока,1,Истина,Истина,Ложь);
	
    УстановитьЗначение(Настрока,"Values","Password", СокрЛП(Константы.ПарольДляОбменаДисконтнымиКартамиПоПротоколуHTTP.Получить()));
    УстановитьЗначение(Настрока,"Values","CertificatesCancellations", АдаптированноеЧисло(КоличествоСертификатов));
	
	Если Константы.ИспользоватьОбменДисконтнымиКартамиПоПротоколуНТТР.Получить() Тогда
		УстановитьЗначение(Настрока,"Values","DiscountsFilesCount",АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\sdc_out","sdc_out_*.txt")));
	КонецЕсли;
	
	Если Константы.ИспользоватьОбменСертификатамиПоПротоколуНТТР.Получить() Тогда
		УстановитьЗначение(Настрока,"Values","CertifTypesFilesCount",АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\certificates","certif_types_*.txt")));
		УстановитьЗначение(Настрока,"Values","CertificatesFilesCount",АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\certificates","certificates_*.txt")));
	КонецЕсли;
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторПинга);
	УстановитьЗначение(Настрока,"General","NoDelete","1");
	                
	ПередатьЛогПинг();
	
	Возврат ВыложитьТекстовыйДокумент("out\ping",,СоздатьТекстовыйДокументИзНастроек(Настрока),Истина);
	
КонецФункции

Функция ПередатьЗагрузкаОбновленийВидовСертификатов() Экспорт
	
	Если НЕ Константы.ИспользоватьОбменСертификатамиПоПротоколуНТТР.Получить() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Настрока					= СоздатьНастройки();
	ИдентификаторПинга			= СоздатьЗаголовок(Настрока,1,Истина,Ложь,Ложь);
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторПинга);
	УстановитьЗначение(Настрока,"General","NoDelete","1");
	
	Возврат ВыложитьТекстовыйДокумент("out\certificates\request_type",,СоздатьТекстовыйДокументИзНастроек(Настрока),Истина);
	
КонецФункции

Функция ПередатьЗагрузкаОбновленийСертификатов() Экспорт
	
	Если НЕ Константы.ИспользоватьОбменСертификатамиПоПротоколуНТТР.Получить() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Настрока					= СоздатьНастройки();
	ИдентификаторПинга			= СоздатьЗаголовок(Настрока,2,Истина,Ложь,Ложь);
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторПинга);
	УстановитьЗначение(Настрока,"General","NoDelete","1");
	
	Возврат ВыложитьТекстовыйДокумент("out\certificates\request",,СоздатьТекстовыйДокументИзНастроек(Настрока),Истина);
	
КонецФункции

Процедура ПередатьПогашениеСертификатов(Источник, Отказ, РежимПроведения) Экспорт
	
	Если НЕ Константы.ИспользоватьОбменСертификатамиПоПротоколуНТТР.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления
		ИЛИ НЕ Источник.Проведен
		ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Сертификат)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.Сертификат.ВидСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	Настрока					= СоздатьНастройки();
	ИдентификаторПинга			= СоздатьЗаголовок(Настрока,3,Истина,Ложь,Ложь);
	
    УстановитьЗначение(Настрока,"Values","Сertificate", СокрЛП(Источник.Сертификат.КодСертификата));
    УстановитьЗначение(Настрока,"Values","СertificateType", СокрЛП(Источник.Сертификат.ВидСертификата.Код));
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторПинга);
	
	Если ВыложитьТекстовыйДокумент("out\certificates\cancellation",,СоздатьТекстовыйДокументИзНастроек(Настрока)) Тогда
		ПередатьПинг();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыгрузитьРеализацию(Источник, Отказ, РежимПроведения) Экспорт
	
	Возврат;
	
	Если Источник.ПометкаУдаления
		ИЛИ НЕ Источник.Проведен
		ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьЗаказПоHTTP(Источник); //Костенюк Александр 28.08.2014
	
КонецПроцедуры

Функция ПередатьПроверкаДисконтныхКарт() Экспорт
	
	Если НЕ Константы.ИспользоватьОбменДисконтнымиКартамиПоПротоколуНТТР.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Настрока					= СоздатьНастройки();
	ИдентификаторПинга			= СоздатьЗаголовок(Настрока,8,Истина,Ложь,Ложь);
	
	УстановитьЗначение(Настрока,"Values","Password", СокрЛП(Константы.ПарольДляОбменаДисконтнымиКартамиПоПротоколуHTTP.Получить()));
    УстановитьЗначение(Настрока,"Values","LastDate", АдаптированнаяДатаВремя(ПолучитьВремяПоследнейЗагрузкиДисконтныхКарт()));
	УстановитьЗначение(Настрока,"Values","RecordsCount", АдаптированноеЧисло(ПолучитьКоличествоДисконтныхКарт()));
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторПинга);
	
	Возврат ВыложитьТекстовыйДокумент("out\discountcount",,СоздатьТекстовыйДокументИзНастроек(Настрока));
	
КонецФункции

Функция ПередатьЗагрузкаОбновленийДисконтныхКарт() Экспорт
	
	Если НЕ Константы.ИспользоватьОбменДисконтнымиКартамиПоПротоколуНТТР.Получить() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Настрока				= СоздатьНастройки();
	ИдентификаторПинга		= СоздатьЗаголовок(Настрока,-1,Истина,Истина,Истина);

	УстановитьЗначение(Настрока,"Values","Password", СокрЛП(Константы.ПарольДляОбменаДисконтнымиКартамиПоПротоколуHTTP.Получить()));

	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторПинга);
	УстановитьЗначение(Настрока,"Values","NoDelete","1");
	
	Возврат ВыложитьТекстовыйДокумент("out\sdc_out\request",,СоздатьТекстовыйДокументИзНастроек(Настрока),Истина);
	
КонецФункции

Функция ПередатьСостоянияФайлаОбновленияДисконтныхКарт(ID, Статус=0) Экспорт
	
	Если НЕ Константы.ИспользоватьОбменДисконтнымиКартамиПоПротоколуНТТР.Получить() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СекцияЗначений				= "Values";
	КодРесторана				= "" + Формат(Константы.КодРесторана.Получить(),"ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");
	ИдентификаторКонфигурации	= Метаданные.Версия;
	ИдентификаторОбъекта		= "" + КодРесторана + "." + ИдентификаторКонфигурации;
	
	Настрока					= СоздатьНастройки();
    УстановитьЗначение(Настрока,СекцияЗначений,"MainID",Строка(ID));
    УстановитьЗначение(Настрока,СекцияЗначений,"Password", СокрЛП(Константы.ПарольДляОбменаДисконтнымиКартамиПоПротоколуHTTP.Получить()));
    УстановитьЗначение(Настрока,СекцияЗначений,"Rest_ID", КодРесторана);
    УстановитьЗначение(Настрока,СекцияЗначений,"File_ID", Строка(ID));
    УстановитьЗначение(Настрока,СекцияЗначений,"Status", Строка(Статус));
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторОбъекта);
	
	Возврат ВыложитьТекстовыйДокумент("out\sdc_out\status",,СоздатьТекстовыйДокументИзНастроек(Настрока));
	
КонецФункции

Функция ПередатьСостоянияОбновленийДисконтныхКарт() Экспорт
	
	Если НЕ Константы.ИспользоватьОбменДисконтнымиКартамиПоПротоколуНТТР.Получить() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Настрока					= СоздатьНастройки();
	ИдентификаторПинга			= СоздатьЗаголовок(Настрока,-1,Истина,Истина,Ложь);
    УстановитьЗначение(Настрока,"Values","Password", СокрЛП(Константы.ПарольДляОбменаДисконтнымиКартамиПоПротоколуHTTP.Получить()));
    УстановитьЗначение(Настрока,"Values","LastDate", АдаптированнаяДатаВремя(ПолучитьВремяПоследнейЗагрузкиДисконтныхКарт()));
	УстановитьЗначение(Настрока,"Values","DiscountsFilesCount", АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\sdc_out","sdc_out_*.txt")));
	УстановитьЗначение(Настрока,"Values","CertifTypesFilesCount", АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\certificates","certif_types_*.txt")));
	УстановитьЗначение(Настрока,"Values","CertificatesFilesCount", АдаптированноеЧисло(ПолучитьКоличествоФайлов("in\certificates","certificates_*.txt")));
	
	//.. Начало изменения Dim)on  10 октября 2013 г. 16:31:06
	//
	УстановитьЗначение(Настрока,"Values","RecordsCount", АдаптированноеЧисло(ПолучитьКоличествоДисконтныхКарт()));
	//
	//.. Конец изменения Dim)on  10 октября 2013 г. 16:31:06
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторПинга);
	УстановитьЗначение(Настрока,"General","NoDelete","1");
	
	Возврат ВыложитьТекстовыйДокумент("out\sdc_out\base",,СоздатьТекстовыйДокументИзНастроек(Настрока),Истина);
	
КонецФункции

Функция ПередатьСлужебноеСообщение(НомерКарты, Пользователь, Администратор) Экспорт
	
	Если НЕ Константы.ИспользоватьОбменДисконтнымиКартамиПоПротоколуНТТР.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Настрока					= СоздатьНастройки();
	ИдентификаторПинга			= СоздатьЗаголовок(Настрока,2,Истина,Ложь,Ложь);
	
	УстановитьЗначение(Настрока,"Values","Password", СокрЛП(Константы.ПарольДляОбменаДисконтнымиКартамиПоПротоколуHTTP.Получить()));
    УстановитьЗначение(Настрока,"Values","CardCode", НомерКарты);
    УстановитьЗначение(Настрока,"Values","Author", Строка(Пользователь));
    УстановитьЗначение(Настрока,"Values","Admin", Администратор);
    УстановитьЗначение(Настрока,"Values","Date", АдаптированнаяДатаВремя(ТекущаяДата()));
	
	ПрисоеденитьОсновнуюСекцию(Настрока,ИдентификаторПинга);
	
	Возврат ВыложитьТекстовыйДокумент("log\msg",,СоздатьТекстовыйДокументИзНастроек(Настрока));
	
КонецФункции

Функция ПередатьСомнительнуюСитуацию(Знач СомнительнаяСитуация) Экспорт
	
	КодРесторана	= "" + Формат(Константы.КодРесторана.Получить(),"ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");
    QSituation_ID	= "" + КодРесторана + "." + СомнительнаяСитуация.Идентификатор;
	//QSituation_ID = Формат(глHTTP_КодРесторана,"Ч(0)4.0")+"."+Формат(глHTTP_ВерсияБазы,"Ч(0)2.0")+"."+глINI_БинарнаяСтрока(ЗначениеВСтрокуВнутр(СомнительнаяСитуация));
	
	Если ЗначениеЗаполнено(СомнительнаяСитуация.Заказ) Тогда
		Check_ID = "" + КодРесторана + "." + СомнительнаяСитуация.Заказ.УникальныйИдентификатор();
	КонецЕсли;
	
	Настрока = СоздатьНастройки();
    УстановитьЗначение(Настрока,"Values","Rest_ID", Строка(КодРесторана));
    УстановитьЗначение(Настрока,"Values","Type_ID", Строка(10));
    УстановитьЗначение(Настрока,"Values","QSituation_ID", Строка(QSituation_ID));
    УстановитьЗначение(Настрока,"Values","Type", Строка(СомнительнаяСитуация.СомнительнаяСитуация.Код));
    УстановитьЗначение(Настрока,"Values","Name", Строка(СомнительнаяСитуация.СомнительнаяСитуация));
    УстановитьЗначение(Настрока,"Values","User", Строка(СомнительнаяСитуация.Пользователь));
    УстановитьЗначение(Настрока,"Values","Date", АдаптированнаяДатаВремя(СомнительнаяСитуация.Дата));
    УстановитьЗначение(Настрока,"Values","Approved", АдаптированноеБулево(СомнительнаяСитуация.Подтвержена));
    УстановитьЗначение(Настрока,"Values","Comment", Строка(СомнительнаяСитуация.Значение));
	Если ЗначениеЗаполнено(СомнительнаяСитуация.Заказ) Тогда
	    УстановитьЗначение(Настрока,"Values","Check_ID", Строка(Check_ID));
		УстановитьЗначение(Настрока,"Values","Author", Строка(СомнительнаяСитуация.Пользователь));
	    УстановитьЗначение(Настрока,"Values","Full_Sum", АдаптированноеЧисло(СомнительнаяСитуация.Заказ.СуммаДокументаБезСкидок));
	    УстановитьЗначение(Настрока,"Values","Full_Discount", АдаптированноеЧисло(СомнительнаяСитуация.Заказ.СуммаДокументаБезСкидок-СомнительнаяСитуация.Заказ.СуммаДокумента));
	    УстановитьЗначение(Настрока,"Values","Full_Total", АдаптированноеЧисло(СомнительнаяСитуация.Заказ.СуммаДокумента));
	КонецЕсли;
	
	ПрисоеденитьОсновнуюСекцию(Настрока,QSituation_ID);
	
	//Возврат ВыложитьТекстовыйДокумент("out\qsituation",,СоздатьТекстовыйДокументИзНастроек(Настрока));
	
	//Костенюк Александр-Старт 17.03.12
	ВыгружатьСомнительныеСитуации = Константы.ВыгружатьСомнительныеСитуации.Получить();
	Если ВыгружатьСомнительныеСитуации Тогда
		Возврат ВыложитьТекстовыйДокумент("out\qsituation",,СоздатьТекстовыйДокументИзНастроек(Настрока));
	Иначе
		Возврат Ложь;
	КонецЕсли;
	//Костенюк Александр-Финиш 17.03.12
	
КонецФункции

Процедура Инициализация() Экспорт
	
	Если НЕ Константы.ИспользоватьОбменПоПротолколуНТТР.Получить() Тогда
		Возврат;
	КонецЕсли;
	             
	ПередатьПинг();
	ПередатьПроверкаДисконтныхКарт();
	ПередатьЗагрузкаОбновленийДисконтныхКарт();
	ПередатьЗагрузкаОбновленийВидовСертификатов();
	ПередатьЗагрузкаОбновленийСертификатов();
	
КонецПроцедуры

//Костенюк Александр-Старт 03.05.2012
Функция ПолчитьДействия(Источник) Экспорт
	
	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Заказ");
	ТаблицаДействий.Колонки.Добавить("Дата");  
	ТаблицаДействий.Колонки.Добавить("Пользователь");
	ТаблицаДействий.Колонки.Добавить("Действие");  
	ТаблицаДействий.Колонки.Добавить("Изменение");
	ТаблицаДействий.Колонки.Добавить("Компьютер");
	ТаблицаДействий.Колонки.Добавить("Количество"); 
	ТаблицаДействий.Колонки.Добавить("Коментарий"); 
	ТаблицаДействий.Колонки.Добавить("СязанныйДокумент"); 
	ТаблицаДействий.Колонки.Добавить("ДисконтнаяКарта"); 
	
	Запрос = Новый Запрос;
	ТекстЗапроса =  "ВЫБРАТЬ
	                |	АнализДействий.Заказ,
	                |	АнализДействий.Дата,
	                |	АнализДействий.Пользователь,
	                |	АнализДействий.Действие,
	                |	АнализДействий.Изменение,
	                |	АнализДействий.Компьютер,
	                |	АнализДействий.Количество,
	                |	АнализДействий.Коментарий,
	                |	АнализДействий.СязанныйДокумент,
	                |	АнализДействий.Ключ,
	                |	АнализДействий.ДисконтнаяКарта
	                |ИЗ
	                |	РегистрСведений.АнализДействий КАК АнализДействий
	                |ГДЕ
	                |	АнализДействий.Заказ = &Заказ";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Заказ", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл   
		НоваяСтрока = ТаблицаДействий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Заказ = Источник.Ссылка;
	КонецЦикла;
	
	ТаблицаДействий.Сортировать("Дата Возр");   
	
	Возврат ТаблицаДействий;	
	
КонецФункции
//Костенюк Александр-Финиш 03.05.2012

//Костенюк Александр-Старт 11.06.2012
Процедура ПередатьЗаказПоHTTP(Документ, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		
		СекцияЗначений				= "Values";
		ИдентификаторКонфигурации	= Метаданные.Версия;
		ИдентификаторЧекИнтерсвязь	= 7;
		ИдентификаторЧек			= 1;
		Пароль						= "";
		КодРесторана				= "" + Формат(Константы.КодРесторана.Получить(),"ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");
		СекторнаяВерсия				= Константы.СекторнаяВерсияБухгалтерии.Получить();
		Скидка						= 0;
		
	Иначе
		
		СекцияЗначений				= Параметры.СекцияЗначений;
		ИдентификаторКонфигурации	= Параметры.ИдентификаторКонфигурации;
		ИдентификаторЧекИнтерсвязь	= Параметры.ИдентификаторЧекИнтерсвязь;
		ИдентификаторЧек			= Параметры.ИдентификаторЧек;
		Пароль						= Параметры.Пароль;
		КодРесторана				= Параметры.КодРесторана;
		СекторнаяВерсия				= Параметры.СекторнаяВерсия;
		Скидка						= Параметры.Скидка;
		
	КонецЕсли;
	
	ИдентификаторОбъекта = "" + КодРесторана + "." + Документ.Ссылка.УникальныйИдентификатор();
	
	Настройки = СоздатьНастройки();
	
    УстановитьЗначение(Настройки,СекцияЗначений,"MainID", ИдентификаторКонфигурации);
    УстановитьЗначение(Настройки,СекцияЗначений,"Password", Строка(Пароль));
	Если СекторнаяВерсия Тогда
	    УстановитьЗначение(Настройки,СекцияЗначений,"Type_ID", АдаптированноеЧисло(ИдентификаторЧекИнтерсвязь));
	Иначе
	    УстановитьЗначение(Настройки,СекцияЗначений,"Type_ID", АдаптированноеЧисло(ИдентификаторЧек));
	КонецЕсли;
	КодОплаты = НайтиПоСсылкеКодОбмена(Документ.Оплата);
    УстановитьЗначение(Настройки,СекцияЗначений,"Rest_ID", Строка(КодРесторана));
    УстановитьЗначение(Настройки,СекцияЗначений,"Check_ID", ИдентификаторОбъекта);
	Позиция = Найти(СокрЛП(Строка(Документ.Номер)), "-"); 
	Если Позиция > 0 Тогда
		Номер = Сред(СокрЛП(Строка(Документ.Номер)), Позиция + 1);
	Иначе
		Номер = СокрЛП(Строка(Документ.Номер));
	КонецЕсли;
	УстановитьЗначение(Настройки,СекцияЗначений,"Check_Num", Номер);
    УстановитьЗначение(Настройки,СекцияЗначений,"Check_Date", АдаптированнаяДата(Документ.Дата));
    УстановитьЗначение(Настройки,СекцияЗначений,"Check_OpenDate", АдаптированнаяДатаВремя(Документ.ДатаНачалаПериода));
    УстановитьЗначение(Настройки,СекцияЗначений,"Check_CloseDate", АдаптированнаяДатаВремя(Документ.ДатаОкончанияПериода));
	УстановитьЗначение(Настройки,СекцияЗначений,"Payment_Type", АдаптированныйКод(КодОплаты));
    УстановитьЗначение(Настройки,СекцияЗначений,"Card_Number", СокрЛП(Строка(Документ.ДисконтнаяКарта.КодКарты)));
	УстановитьЗначение(Настройки,СекцияЗначений,"GuestCount", АдаптированноеЧисло(Документ.КоличествоКлиентов));
	УстановитьЗначение(Настройки,СекцияЗначений,"Author", Строка(Документ.Ответственный));
	УстановитьЗначение(Настройки,СекцияЗначений,"Full_Sum", АдаптированноеЧисло(Документ.Товары.Итог("СуммаБезСкидок")));
	УстановитьЗначение(Настройки,СекцияЗначений,"Full_Discount", АдаптированноеЧисло(Документ.Товары.Итог("СуммаСкидки")));
	УстановитьЗначение(Настройки,СекцияЗначений,"Full_Total", АдаптированноеЧисло(Документ.Товары.Итог("Сумма")));
	Если ЗначениеЗаполнено(Документ.Сертификат) Тогда
	    УстановитьЗначение(Настройки,СекцияЗначений,"Certificate", СокрП(Документ.Сертификат.КодСертификата));
		Если ЗначениеЗаполнено(Документ.Сертификат) Тогда
		    УстановитьЗначение(Настройки,СекцияЗначений,"CertificateType", Строка(Документ.Сертификат.ВидСертификата.Код));
		КонецЕсли;
	КонецЕсли;
	
	Сумма			= 0;
	СуммаСкидки		= 0;
	СуммаКОплате	= 0;
	Поз				= 0;
	
	Для Каждого Строка Из Документ.Товары Цикл
		
		Поз			= Поз + 1;
		Постфикс	= "[" + Поз + "]";
		КодНоменклатуры = НайтиПоСсылкеКодОбмена(Строка.Номенклатура);
	    УстановитьЗначение(Настройки,СекцияЗначений,"Cod"+Постфикс,АдаптированныйКод(КодНоменклатуры));
	    УстановитьЗначение(Настройки,СекцияЗначений,"LocalCod"+Постфикс,Строка(Строка.Номенклатура.Код));
	    УстановитьЗначение(Настройки,СекцияЗначений,"Name"+Постфикс,АдаптированнаяСтрока(СокрЛП(Строка(Строка.Номенклатура.Наименование))));
	    УстановитьЗначение(Настройки,СекцияЗначений,"Quantity"+Постфикс, АдаптированноеЧисло(Строка.Количество));
	    УстановитьЗначение(Настройки,СекцияЗначений,"Price"+Постфикс, АдаптированноеЧисло(Строка.Цена));
	    УстановитьЗначение(Настройки,СекцияЗначений,"Sum"+Постфикс, АдаптированноеЧисло(Строка.СуммаБезСкидок));
	    УстановитьЗначение(Настройки,СекцияЗначений,"Discount"+Постфикс, АдаптированноеЧисло(Строка.СуммаСкидки));
	    УстановитьЗначение(Настройки,СекцияЗначений,"Total"+Постфикс, АдаптированноеЧисло(Строка.Сумма));
		Если (Строка.СуммаСкидки = 0) Тогда
		    УстановитьЗначение(Настройки,СекцияЗначений,"Discount_Percent"+Постфикс,Строка(0));
		Иначе
		    УстановитьЗначение(Настройки,СекцияЗначений,"Discount_Percent"+Постфикс,СтрЗаменить(Формат(Строка.СуммаСкидки/Строка.СуммаБезСкидок*100,"ЧДЦ=2; ЧГ="),",","."));
		КонецЕсли;
		Если Строка.ПенсионныйФонд Тогда
		    УстановитьЗначение(Настройки,СекцияЗначений,"PF"+Постфикс,Строка(1));
			Сумма			= Сумма			+ Строка.Сумма;
			СуммаСкидки		= СуммаСкидки	+ Строка.СуммаСкидки;
			СуммаКОплате	= СуммаКОплате	+ Строка.СуммаКОплате;
		Иначе
		    УстановитьЗначение(Настройки,СекцияЗначений,"PF"+Постфикс,Строка(0));
		КонецЕсли;
	КонецЦикла;
	
	// Шапка
    УстановитьЗначение(Настройки,СекцияЗначений,"Positions",АдаптированноеЧисло(Поз));
    УстановитьЗначение(Настройки,СекцияЗначений,"PF_Sum",АдаптированноеЧисло(Сумма));
    УстановитьЗначение(Настройки,СекцияЗначений,"PF_Discount",АдаптированноеЧисло(СуммаСкидки));
    УстановитьЗначение(Настройки,СекцияЗначений,"PF_Total", АдаптированноеЧисло(СуммаКОплате));
	
	// История изменений
	ТаблицаДействий = ПолчитьДействия(Документ);
	Поз = 0;
	Для Каждого Действие ИЗ ТаблицаДействий Цикл
		Поз = Поз + 1; 
		Постфикс = "[" + Строка(Поз) + "]";
		УстановитьЗначение(Настройки, СекцияЗначений, "HUser"+Постфикс, Строка(Действие.Пользователь));
		УстановитьЗначение(Настройки, СекцияЗначений, "HAction"+Постфикс, Строка(Действие.Действие));
		УстановитьЗначение(Настройки, СекцияЗначений, "HDate"+Постфикс, Строка(Действие.Дата));
		УстановитьЗначение(Настройки, СекцияЗначений, "HComment"+Постфикс, Действие.Коментарий);
		УстановитьЗначение(Настройки, СекцияЗначений, "HComputer"+Постфикс, Строка(Действие.Компьютер));
		Если (ТипЗнч(Действие.Изменение) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(Действие.Изменение)) Тогда
			УстановитьЗначение(Настройки, СекцияЗначений, "HGDSLocalCod"+Постфикс, СокрЛП(Строка(Действие.Изменение.Код)));
			УстановитьЗначение(Настройки, СекцияЗначений, "HGDSName"+Постфикс, СокрЛП(Строка(Действие.Изменение.Наименование)));
			УстановитьЗначение(Настройки, СекцияЗначений, "HGDSQuantity"+Постфикс, Строка(Действие.Количество));
		Иначе
			УстановитьЗначение(Настройки, СекцияЗначений, "HGDSCode"+Постфикс, "");
			УстановитьЗначение(Настройки, СекцияЗначений, "HGDSLocalCod"+Постфикс, "");
			УстановитьЗначение(Настройки, СекцияЗначений, "HGDSName"+Постфикс, "");
			УстановитьЗначение(Настройки, СекцияЗначений, "HGDSQuantity"+Постфикс, "");
		КонецЕсли;
	КонецЦикла;
	
    УстановитьЗначение(Настройки,СекцияЗначений,"HCount","0");
	
	ПрисоеденитьОсновнуюСекцию(Настройки,ИдентификаторОбъекта);
	
	ВыложитьТекстовыйДокумент("out\check",,СоздатьТекстовыйДокументИзНастроек(Настройки));

КонецПроцедуры
//Костенюк Александр-Финиш 11.06.2012

//Костенюк Александр-Старт 05.11.2013
// Процедура выполняет запуск загрузки Козырных Карт
Процедура ЗагрузкаКозырныхКарт() Экспорт
	ОбработкаОбъект = Обработки.ЗагрузкаКозырныхКарт.Создать();
	ОбработкаОбъект.ВыполнитьОбработку();
КонецПроцедуры
//Костенюк Александр-Финиш 05.11.2013

//Костенюк Александр-Старт 01.08.2014
Процедура ВыгрузкаЧеков() Экспорт
	ОбработкаОбъект = Обработки.ВыгрузкаЧеков.Создать();
	ОбработкаОбъект.ВыполнитьОбработку();
КонецПроцедуры
//Костенюк Александр-Финиш 01.08.2014

//Костенюк Александр-Старт 22.09.2014
Процедура ПроведениеДокументовБезДвижений() Экспорт
	ОбработкаОбъект = Обработки.ПроведениеДокументовБезДвижений.Создать();
	ОбработкаОбъект.ВыполнитьОбработку();
КонецПроцедуры
//Костенюк Александр-Финиш 22.09.2014

//Костенюк Александр-Старт 03.11.2014
Процедура ВыгрузкаЧековБухгалтерия77() Экспорт
	ОбработкаОбъект = Обработки.ОбменДанными2КБухгалтерия77.Создать();
	ОбработкаОбъект.ВыполнитьВыгрузку();
КонецПроцедуры
//Костенюк Александр-Финиш 03.11.2014

//Костенюк Александр-Старт 25.11.2015
Процедура ОбменДаннымиСБухгалтериейВыгрузка() Экспорт
	
	НайденныеФайлы = НайтиФайлы(РаботаСФайлами.НормализоватьКаталог(СокрЛП(Константы.КаталогОбмена.Получить())), "*.xml");
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если НРег(Файл.Имя) <> "crs_cac.xml" Тогда
			Продолжить;
		КонецЕсли;
		ИмяФайлаПравилОбмена = Файл.ПолноеИмя;
	КонецЦикла;
	
	ОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбъект.ЗагрузитьПравилаОбмена(ИмяФайлаПравилОбмена);
	ОбработкаОбъект.ИмяФайлаПравилОбмена 	= ИмяФайлаПравилОбмена;
	ОбработкаОбъект.РежимОбмена 			= "Выгрузка";
	ОбработкаОбъект.ДатаНачала 				= НачалоДня(ТекущаяДата() - 86400);
	ОбработкаОбъект.ДатаОкончания 			= КонецДня(ТекущаяДата() - 86400);
	ОбработкаОбъект.ИмяФайлаОбмена 			= РаботаСФайлами.НормализоватьКаталог(СокрЛП(Константы.КаталогОбмена.Получить())) + "out\" + "Table.xml";
	ОбработкаОбъект.ВыполнитьВыгрузку();
	
	ВыгрузитьНаFTP(ПолучитьАдрес(), ПолучитьПользователя(), ПолучитьПароль(), ПолучитьКаталог() + "out\", Истина);
	
КонецПроцедуры
//Костенюк Александр-Финиш 25.11.2015

//Костенюк Александр-Старт 27.11.2015
Процедура ОбменДаннымиСБухгалтериейЗагрузка() Экспорт
	
	// Получение параметров для подключения к ftp серверу 
	Адрес 			= СокрЛП(Константы.АдресСервераОбменаЧеками.Получить());
	Пользователь 	= СокрЛП(Константы.ПользовательСервераОбменаЧеками.Получить());
	Пароль 			= СокрЛП(Константы.ПарольСервераОбменаЧеками.Получить());
	Каталог 		= РаботаСФайлами.НормализоватьКаталог(СокрЛП(Константы.КаталогОбмена.Получить())) + "in\";
	УдалятьФайлы 	= Истина;
	
	// Загрузка с ftp сервера
	Ошибка = ЗагрузитьСFTP(Адрес, Пользователь, Пароль, Каталог, УдалятьФайлы, "Sebest.xml");
	
	// Загрузка данных из файла
	Если НЕ Ошибка Тогда
		
		НайденныеФайлы = НайтиФайлы(Каталог, "*.xml");
		
		Для Каждого Файл Из НайденныеФайлы Цикл
			
			Если НРег(Файл.Имя) <> "sebest.xml" Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
			ОбработкаОбъект.ИмяФайлаОбмена 											= Файл.ПолноеИмя;
			ОбработкаОбъект.РежимОбмена 											= "Загрузка";
			ОбработкаОбъект.ЗагружатьДанныеВРежимеОбмена 							= Истина;
			ОбработкаОбъект.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты 	= Истина;
			ОбработкаОбъект.ОптимизированнаяЗаписьОбъектов 							= Истина;
			ОбработкаОбъект.ЗаписыватьРегистрыНаборамиЗаписей 						= Истина;
			ОбработкаОбъект.ОбрезатьСтрокиСправа 									= Истина;
			ОбработкаОбъект.ВыполнитьЗагрузку();
			
		КонецЦикла;
		
		// Очистка каталога с файлом
		ОчиститьКаталог(Каталог, УдалятьФайлы, "Sebest.xml");
		
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 27.11.2015

//Костенюк Александр-Старт 30.06.2016
Функция ПолучитьАдрес() Экспорт
	Возврат СокрЛП(Константы.АдресСервераОбменаЧеками.Получить());	
КонецФункции
//Костенюк Александр-Финиш 30.06.2016

//Костенюк Александр-Старт 30.06.2016
Функция ПолучитьПользователя() Экспорт
	Возврат СокрЛП(Константы.ПользовательСервераОбменаЧеками.Получить());
КонецФункции
//Костенюк Александр-Финиш 30.06.2016

//Костенюк Александр-Старт 30.06.2016
Функция ПолучитьПароль() Экспорт
	Возврат СокрЛП(Константы.ПарольСервераОбменаЧеками.Получить());
КонецФункции
//Костенюк Александр-Финиш 30.06.2016

//Костенюк Александр-Старт 30.06.2016
Функция ПолучитьКаталог() Экспорт
	Возврат РаботаСФайлами.НормализоватьКаталог(СокрЛП(Константы.КаталогОбмена.Получить()));
КонецФункции
//Костенюк Александр-Финиш 30.06.2016

//Костенюк Александр-Старт 11.01.2016
Функция ЗагрузитьСFTP(Адрес, Пользователь, Пароль, Каталог, УдалятьФайлы, ИмяФайла = "") Экспорт
	
	Сервер 			= "";
	КаталогСервера 	= "";
	
	РазложитьСсылку(Адрес, Сервер, КаталогСервера);
	
	Попытка
		FTPСоединение = Новый FTPСоединение(Сервер, 21, Пользователь, Пароль, , Истина);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	НайденныеФайлы = FTPСоединение.НайтиФайлы(КаталогСервера, "*.xml");
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если (ИмяФайла <> "") И (НРег(Файл.Имя) <> НРег(ИмяФайла)) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			FTPСоединение.Получить(Файл.ПолноеИмя, Каталог + Файл.Имя);
			Если УдалятьФайлы Тогда
				FTPСоединение.Удалить(Файл.ПолноеИмя);
			КонецЕсли;
		Исключение
			Прервать;
			Возврат Истина;
		КонецПопытки; 
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
//Костенюк Александр-Финиш 11.01.2016

//Костенюк Александр-Старт 30.06.2016
Процедура ВыгрузитьНаFTP(Адрес, Пользователь, Пароль, Каталог, УдалятьФайлы) Экспорт
	
	Сервер 			= "";
	КаталогСервера 	= "";
	
	РазложитьСсылку(Адрес, Сервер, КаталогСервера);
	
	Попытка
		FTPСоединение = Новый FTPСоединение(Сервер, 21, Пользователь, Пароль, , Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	FTPСоединение.УстановитьТекущийКаталог(КаталогСервера);
	
	Массивфайлов = НайтиФайлы(Каталог, "*.xml");
	
	Для Каждого Файл Из Массивфайлов Цикл
		Попытка
			FTPСоединение.Записать(Файл.ПолноеИмя, Файл.Имя);
			Если УдалятьФайлы Тогда
				УдалитьФайлы(Файл.ПолноеИмя);
			КонецЕсли;
		Исключение
		КонецПопытки; 
	КонецЦикла; 
	
КонецПроцедуры
//Костенюк Александр-Финиш 30.06.2016

//Костенюк Александр-Старт 11.01.2016
Процедура РазложитьСсылку(Знач Link, Server, Directory)
	
	Если Лев(Link, 6) = "ftp://" Тогда
		Link = Сред(Link, 7);
	КонецЕсли;
	
	Позиция	= Найти(Link, "/");
	Если Позиция = 0 Тогда
		Server = Link;
	Иначе
		Server = Лев(Link, Позиция - 1);
		Directory = Сред(Link, Позиция + 1);
	КонецЕсли;
	
	Если Прав(Directory, 1) = "/" Тогда
		Directory = Сред(Directory, 1, СтрДлина(Directory) - 1);
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 11.01.2016

//Костенюк Александр-Старт 11.01.2016
Процедура ОчиститьКаталог(Каталог, УдалятьФайлы = Истина, ИмяФайла = "") Экспорт
	
	Если УдалятьФайлы Тогда
		Попытка
			//УдалитьФайлы(Каталог, "*.xml");
			УдалитьФайлы(Каталог + ИмяФайла);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 11.01.2016