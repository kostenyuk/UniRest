
Перем мВалютаРегламентированногоУчета Экспорт; // Валюта.

Перем мИспользоватьВкачествеКодаТовараДляФРАртикул; // Использовать вкачестве кода товара для ФР артикул или код товара.

Перем мЗаголовок; // Заголовок служебных сообщений.


#Если Клиент Тогда
	
// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура. Каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();

	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
// Процедура осуществляет печать документа. Можно направить печать на экран или принтер, 
// а также распечатать необходмое количество копий.
//
// Параметры:
//  НазваниеМакета - Строка. Название макета.
//
// Вовращаемое значение:
//  Булево. Истина в случае успешного выполнения операции.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь, FrontOfficeРежим = Ложь) Экспорт

	// Получить экземпляр документа на печать.
	Возврат Ложь;
	ТабДокумент = Неопределено;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

	Возврат Истина;
	
КонецФункции // Печать()


// Функция осуществляет проведение документа и печать чека на ФР.
//
// Возвращаемое значение:
//  Булево. Истина в случае успешного выполнения операции;
//  Ответ - Строка. Описание произошедшей ошибки;
//  Отказ - Булево. Признак отказа от выполнения операции.
//
Функция ПровестиИРаспечататьЧек(Ответ, Отказ, ФормаДокумента = Неопределено, НоменклатураПоРегистру = Ложь) Экспорт
	
	Результат = Истина;
	Ответ     = "";
	
	// Определение ФР.
	Если Не ЧекПробитНаККМ Тогда
		МассивФР = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор, КассаККМ);

		КоличествоФР = МассивФР.Количество();
		Если      (КоличествоФР = 0) Тогда
			Ответ     = "Не найден ни один фискальный регистратор работающий с требуемой кассой ККМ!";
			Отказ     = Истина;
			Результат = Истина;
			Возврат Результат;
		ИначеЕсли (КоличествоФР = 1) Тогда
			ФР        = МассивФР[0];
		Иначе
			Ответ     = "Нельзя одновременно использовать несколько фискальных регистраторов с одной кассой ККМ!";
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка документа.
	Если Не Булево(Товары.Количество()) Тогда
		Ответ     = "Пустой чек не может быть пробит на фискальном регистраторе!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	// Проведение.
	Попытка		
		Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ответ     = "Не удалось выполнить предварительное проведение документа!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	КонецПопытки;

	// Чек уже пробит на ККМ.
	Если ЧекПробитНаККМ Тогда
		Возврат Результат;
	КонецЕсли;

	// Выборка доплнительных данных по номенклатуре.
	Если (НоменклатураПоРегистру = Истина) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.Ресторан, //Костенюк Александр 25.05.12
		|	ВЫБОР
		|		КОГДА НоменклатураМеню.НаименованиеСокращенное ЕСТЬ NULL 
		|			ТОГДА ЧекККМТовары.Номенклатура.НаименованиеСокращенное
		|		ИНАЧЕ НоменклатураМеню.НаименованиеСокращенное
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА НоменклатураМеню.Код ЕСТЬ NULL 
		|			ТОГДА ЧекККМТовары.Номенклатура.Код
		|		ИНАЧЕ НоменклатураМеню.Код
		|	КОНЕЦ КАК Код,
		|	ЧекККМТовары.Артикул,
		|	ЧекККМТовары.Номенклатура КАК Ссылка,
		|	ЧекККМТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ЧекККМТовары.Цена КАК Цена,
		|	ЧекККМТовары.Количество КАК Количество,
		//|	ЧекККМТовары.СуммаСкидки - ЧекККМТовары.СуммаНаценки КАК СуммаСкидкиНаценки,
		|	ЧекККМТовары.СуммаСкидки + ЧекККМТовары.СуммаСертификата - ЧекККМТовары.СуммаНаценки КАК СуммаСкидкиНаценки, //Костенюк Александр 13.01.15
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМТовары.ПенсионныйФонд КАК ПенсионныйФонд,
		|	ВЫБОР
		|		КОГДА НастройкиНалоговыхГрупп.НалоговаяГруппа ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НалоговыеГруппы.А)
		|		ИНАЧЕ НастройкиНалоговыхГрупп.НалоговаяГруппа
		|	КОНЕЦ КАК НалоговаяГруппа
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		|		ПО ЧекККМТовары.Номенклатура = НоменклатураМеню.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНалоговыхГрупп КАК НастройкиНалоговыхГрупп
		|		ПО ЧекККМТовары.СтавкаНДС = НастройкиНалоговыхГрупп.СтавкаНДС
		|			И ЧекККМТовары.ПенсионныйФонд = НастройкиНалоговыхГрупп.ПенсионныйФонд
		|ГДЕ
		|	ЧекККМТовары.Ссылка = &Ссылка
		|	И ЧекККМТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
		|	И ЧекККМТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)");
		Если ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.НоменклатураМеню", "ВременнаяНоменклатураМеню");					  
		КонецЕсли;						 
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.Ресторан, //Костенюк Александр 25.05.12
		|	ЧекККМТовары.Номенклатура.НаименованиеСокращенное КАК Номенклатура,
		|	ЧекККМТовары.Номенклатура.Код КАК Код,
		|	ЧекККМТовары.Артикул КАК Артикул,
		|	ЧекККМТовары.Номенклатура КАК Ссылка,
		|	ЧекККМТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ЧекККМТовары.Цена КАК Цена,
		|	ЧекККМТовары.Количество КАК Количество,
		//|	ЧекККМТовары.СуммаСкидки - ЧекККМТовары.СуммаНаценки КАК СуммаСкидкиНаценки,
		|	ЧекККМТовары.СуммаСкидки + ЧекККМТовары.СуммаСертификата - ЧекККМТовары.СуммаНаценки КАК СуммаСкидкиНаценки, //Костенюк Александр 13.01.15
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМТовары.ПенсионныйФонд КАК ПенсионныйФонд,
		|	ВЫБОР
		|		КОГДА НастройкиНалоговыхГрупп.НалоговаяГруппа ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НалоговыеГруппы.А)
		|		ИНАЧЕ НастройкиНалоговыхГрупп.НалоговаяГруппа
		|	КОНЕЦ КАК НалоговаяГруппа
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиНалоговыхГрупп КАК НастройкиНалоговыхГрупп
		|		ПО ЧекККМТовары.СтавкаНДС = НастройкиНалоговыхГрупп.СтавкаНДС
		|			И ЧекККМТовары.ПенсионныйФонд = НастройкиНалоговыхГрупп.ПенсионныйФонд
		|ГДЕ
		|	ЧекККМТовары.Ссылка = &Ссылка
		|	И ЧекККМТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
		|	И ЧекККМТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)");
	КонецЕсли;						  
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("Ресторан"); //Костенюк Александр 25.05.2012
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Код");
	ТаблицаТоваров.Колонки.Добавить("НомерСекции");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Скидка");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяГруппа");
	ТаблицаТоваров.Колонки.Добавить("Ссылка");
	
	Пока Выборка.Следующий() Цикл
		Товар = ТаблицаТоваров.Добавить();
		Товар.Организация 	= Выборка.Организация;
		Товар.Ресторан 		= Выборка.Ресторан; //Костенюк Александр-Старт 25.05.2012
		Товар.Наименование = СокрЛ(Выборка.Номенклатура);
		Если Не ПустаяСтрока(Выборка.ЕдиницаИзмерения) Тогда
			Товар.Наименование = Товар.Наименование + "(" + СокрЛ(Выборка.ЕдиницаИзмерения) + ")";
		КонецЕсли;
		
		Если мИспользоватьВкачествеКодаТовараДляФРАртикул Тогда
			Товар.Код	      = Выборка.Артикул;	
		Иначе
			Товар.Код	      = Выборка.Код;	
		КонецЕсли;
		
		Товар.НомерСекции     = Неопределено;
		Товар.Цена            = Выборка.Цена;
		Товар.Количество      = Выборка.Количество;
		Товар.Скидка          = Выборка.СуммаСкидкиНаценки;
		Товар.СтавкаНДС       = Ценообразование.ПолучитьСтавкуНДС(Выборка.СтавкаНДС);
		Товар.НалоговаяГруппа = Выборка.НалоговаяГруппа;
		Товар.Ссылка       	  = Выборка.Ссылка;
		
	КонецЦикла;

	// Печать на ФР.
	ОшибкаТО = ПолучитьСерверТО().ПечатьЧека(ФР, ПолучитьСерверТО().ПолучитьПарольКассираККМ(), НомерЧекаККМ, НомерСменыККМ,
											 ТаблицаТоваров, ПолучитьСуммуНаличнойОплаты(),
											 ПолучитьСуммуБезналичнойОплаты(),
											 //ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, Оплата);
											 ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, Оплата, Организация, Сотрудник, ЭтотОбъект); //Костенюк Александр 29.10.2012

	// Запись.
	Если Не ЗначениеЗаполнено(ОшибкаТО) Тогда
		ЧекПробитНаККМ = Истина;
		Попытка
			Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Ответ     = "Не удалось записать документ с установленными параметрами пробитого чека!";
			Отказ     = Истина;
			Результат = Ложь;
		КонецПопытки;
	Иначе
		ЧекПробитНаККМ = Ложь;
		Ответ         = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(ОшибкаТО);
		Отказ         = Истина;
		Результат     = Ложь;		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ПровестиИРаспечататьЧек()

#КонецЕсли


// Функция возвращает сумму документа.
//
Функция ПолучитьСуммуСНДС() Экспорт

	Возврат Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");

КонецФункции // ПолучитьСуммуСНДС()

// Функция возвращает сумму НДС документа.
//
Функция ПолучитьСуммуНДС() Экспорт

	Возврат Ценообразование.ПолучитьНДСДокумента(ЭтотОбъект, "Товары");

КонецФункции // ПолучитьСуммуНДС()
		
// Функция возвращает сумму наценки документа.
//
Функция ПолучитьСуммуНаценки() Экспорт

	Возврат Ценообразование.ПолучитьСуммуНаценкиДокумента(ЭтотОбъект, "Товары");

КонецФункции // ПолучитьСуммуНаценки()

// Функция возвращает сумму скидки документа.
//
Функция ПолучитьСуммуСкидки() Экспорт

	Возврат Ценообразование.ПолучитьСуммуСкидкиДокумента(ЭтотОбъект, "Товары");

КонецФункции // ПолучитьСуммуСкидки()

// Функция возвращает сумму документа.
//
Функция ПолучитьСуммуБезСкидки() Экспорт

	Возврат Ценообразование.ПолучитьСуммуДокументаБезСкидки(ЭтотОбъект, "Товары");

КонецФункции // ПолучитьСуммуСНДС()

// Функция считает сумму, оплаченную наличными.
//
// Возвращаемое значение:
//  Число. Сумма, оплаченная наличными.
//
Функция ПолучитьСуммуНаличнойОплаты() Экспорт

	СуммаНаличнойОплаты = 0;
	
	Если (Не ЗначениеЗаполнено(Оплата.ТипОплаты)) Или (Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные) Тогда
		СуммаНаличнойОплаты = СуммаНаличнойОплаты + СуммаДокумента;
	КонецЕсли;

	Возврат СуммаНаличнойОплаты;

КонецФункции // ПолучитьСуммуНаличнойОплаты()

// Функция считает сумму, оплаченную безналичными.
//
// Возвращаемое значение:
//  Число. Сумма, оплаченная безналом.
//
Функция ПолучитьСуммуБезналичнойОплаты() Экспорт

	СуммаБезналичнойОплаты = 0;
	
	Если ЗначениеЗаполнено(Оплата.ТипОплаты) И (Не Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные) Тогда
		СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + СуммаДокумента;
	КонецЕсли;

	Возврат СуммаБезналичнойОплаты;

КонецФункции // ПолучитьСуммуБезналичнойОплаты()

//Костенюк Александр-Старт 13.01.2015
// Функция получает сумму по колонке табличной части документа
//
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.ЧекККМ. Документ, для которого необходимо получить сумму.
// ИмяТабличнойЧасти - Тип: Строка. Имя табличной части документа, по которой будет расчитан итог по колонке.
// ИмяКолонки - Тип: Строка. Имя колонки, по которой будет расчитан итог.
// 
Функция ПолучитьСуммуДокумента(ДокументОбъект, ИмяТабличнойЧасти = "Товары", ИмяКолонки = "Сумма") Экспорт
	
	Возврат Ценообразование.ПолучитьПроизвольнуюСуммуДокумента(ДокументОбъект, ИмяТабличнойЧасти, ИмяКолонки);
	
КонецФункции
//Костенюк Александр-Финиш 13.01.2015

// Подготавливает (автоматически заполнениет) шапку документа.
//
Процедура ПодготовитьШапку(РежимЗаписи, РежимПроведения) Экспорт
	
	// Модуль.
	Модуль = Сделка.Модуль;
	
	// Ресторан.
	Ресторан = Сделка.Ресторан;
	
	// Организация.
	Организация = КассаККМ.Владелец;
	
	// ЧекККМ.
	Если (Не ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат) Тогда
		ЧекККМ = Неопределено;
	КонецЕсли;
	
	// Распечатан.
	Распечатан = (РежимЗаписи = РежимЗаписиДокумента.Проведение) И (Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);

	//// СуммаДокументаБезСкидок, СуммаНаценкиДокумента, СуммаСкидкиДокумента и СуммаДокумента.
	//СуммаДокументаБезСкидок = ПолучитьСуммуБезСкидки();
	//СуммаНаценкиДокумента = ПолучитьСуммуНаценки();
	//СуммаСкидкиДокумента = ПолучитьСуммуСкидки();
	//СуммаДокумента = ПолучитьСуммуСНДС();
	
	//Костенюк Александр-Старт 13.01.2015
	// Получение сумм по документу
	СуммаДокументаБезСкидок 			= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаБезСкидок");
	СуммаНаценкиДокумента 				= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаНаценки");
	СуммаСкидкиДокумента 				= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаСкидки");
	СуммаСертификатаДокумента 			= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаСертификата"); //Костенюк Александр 13.01.2015
	СуммаДокумента 						= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "Сумма");
	//Костенюк Александр-Финиш 13.01.2015
	
КонецПроцедуры // ПодготовитьШапку()

// Подготавливает (автоматически заполнениет) строки табличной части товары.
//
Процедура ПодготовитьТабличнуюЧастьТовары(РежимЗаписи, РежимПроведения) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		// Идентификатор.
		Если ПустаяСтрока(СтрокаТабличнойЧасти.Идентификатор) Тогда
			СтрокаТабличнойЧасти.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТабличнуюЧастьДокументыОснования()


// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, Заголовок)

	// Обязательные.
	Если (СтруктураОбязательныхПолей = Неопределено) Тогда
		СтруктураОбязательныхПолей = Новый Структура;
	КонецЕсли;
	СтруктураОбязательныхПолей.Вставить("Модуль");
	СтруктураОбязательныхПолей.Вставить("Ответственный");
	СтруктураОбязательныхПолей.Вставить("ВидОперации");
	СтруктураОбязательныхПолей.Вставить("Сделка");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части товары.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураОбязательныхПолей, Отказ, Заголовок)

	Перем ОписаниеОшибки;
	
	// Обязательные.
	Если (СтруктураОбязательныхПолей = Неопределено) Тогда
		СтруктураОбязательныхПолей = Новый Структура;
	КонецЕсли;
	СтруктураОбязательныхПолей.Вставить("Номенклатура");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка уникальности документов и кореляции значений.
	Если Не Отказ Тогда
		Если Не УправлениеЗаказами.ПроверитьКорелляциюЗначений(ЭтотОбъект, "Товары", "Номенклатура", "Артикул,Цена,СтавкаНДС,ПенсионныйФонд", ОписаниеОшибки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ «" + Метаданные().Синоним + "» не может содержать одинаковые номенклатурные позиции с различными значениями артикулов, цен, ставок НДС и пенсионного фонда:" + Символы.ПС + ОписаниеОшибки, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДокументыОснования()


// Выполняет движения документа по регистрам учета.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
	
	// Рассчет.
	Если Не Отказ Тогда
		
		Если (ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат) Тогда
			ВидРозничнойВыручки = Перечисления.ВидыРозничнойВыручки.Возврат; 
			СуммаРозничнойВыручки = -СуммаДокумента;
		Иначе
			ВидРозничнойВыручки = Перечисления.ВидыРозничнойВыручки.Продажа;
			СуммаРозничнойВыручки = +СуммаДокумента;
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете Тогда
			ТипОплаты = Оплата.ТипОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	// РозничнаяВыручка.
	Если Не Отказ Тогда
		Движения.РозничнаяВыручка.Очистить();
		
		Движение = Движения.РозничнаяВыручка.Добавить();
		Движение.Период = Дата;
		Движение.РозничнаяТочка = КассаККМ;
		Движение.ВидРозничнойВыручки = ВидРозничнойВыручки;
		Движение.Ресторан = Ресторан;
		Движение.Организация = Организация;
		Движение.Оплата = Оплата;
		Движение.Сотрудник = Сотрудник;
		Движение.Сумма = СуммаРозничнойВыручки;
		Движение.НалоговыйУчет = ОтражатьВНалоговомУчете;
		Движение.ТипОплаты = ТипОплаты;
		
		Попытка
			Движения.РозничнаяВыручка.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.РозничнаяВыручка, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Выполняет удаление движения документа по регистрам учета.
//
Процедура УдалениеДвиженияПоРегистрам(Отказ, Заголовок)
	
КонецПроцедуры // УдалениеДвиженияПоРегистрам()


// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Удаляем значения некопируемых реквизитов шапки.
	ЧекПробитНаККМ = Ложь;
	НомерЧекаККМ = Неопределено;
	НомерСменыККМ = Неопределено;

КонецПроцедуры // ПриКопировании()

// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(Основание) Экспорт
	
	// Структура.
	Если (ТипЗнч(Основание) = Тип("Структура")) Тогда
		
		КассаККМ = Основание.КассаККМ;
		НоменклатураПоРегистру = Основание.Свойство("НоменклатураПоРегистру") И Основание.НоменклатураПоРегистру;
		
		Основание = Основание.Основание;
		
	КонецЕсли;
	
	// Реализация товаров и услуг. Реализация.
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда

		// Тип основания.
		МетаданныеОснования = Основание.Метаданные();
		
		// Вид операции.
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;

		// Шапка.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Сделка = Основание;
		Модуль = Сделка.Модуль;
		Ресторан = Сделка.Ресторан;

		// Табличная часть.
		Товары.Очистить();
		
		ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить("Товары"); //Костенюк Александр-Закомментировано 18.05.2013 ТабличныеЧасти.Добавить("Услуги");
		Организация = КассаККМ.Владелец;
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			ТаблицаПараметровНоменклатуры = Неопределено;
			
			Для Каждого СтрокаТабличнойЧасти Из Основание[ТабличнаяЧасть] Цикл
				
				Если (Не СтрокаТабличнойЧасти.Организация = Организация) Тогда
					Продолжить;
				КонецЕсли;
				
				//Если (Не Булево(СтрокаТабличнойЧасти.Цена)) Или (Не Булево(СтрокаТабличнойЧасти.Сумма)) Тогда
				//	Продолжить;
				//КонецЕсли;
				
				//Костенюк Александр-Старт 19.12.2014
				// Форма №1(фискальный/товарный чек)
				Если ОтражатьВНалоговомУчете Тогда
					Если (Не Булево(СтрокаТабличнойЧасти.Цена)) Или (Не Булево(СтрокаТабличнойЧасти.Сумма)) Тогда
						Продолжить;
					КонецЕсли;
				// Форма №2
				// При полном погашении суммы счета сертификатом сумма к оплате будет равной "0"
				Иначе
					Если (Не Булево(СтрокаТабличнойЧасти.Цена)) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				//Костенюк Александр-Финиш 19.12.2014
								
				// -- Параметры номенклатуры.
				Если (ТаблицаПараметровНоменклатуры = Неопределено) Тогда
					ТаблицаПараметровНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьПараметрыНоменклатуры(Основание[ТабличнаяЧасть].ВыгрузитьКолонку("Номенклатура"), ЭтотОбъект, НоменклатураПоРегистру);
				КонецЕсли;
				
				СтрокаПарамНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьПараметрыНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ЭтотОбъект, НоменклатураПоРегистру, ТаблицаПараметровНоменклатуры);
				// -- Перенос.
				СтрокаТабличнойТовары = Товары.Добавить();
				
				СтрокаТабличнойТовары.Артикул = СтрокаПарамНоменклатуры.Артикул; 
				Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ТабличнаяЧасть, "ЕдиницаИзмерения", МетаданныеОснования) Тогда
					СтрокаТабличнойТовары.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
				Иначе
					СтрокаТабличнойТовары.ЕдиницаИзмерения = СтрокаПарамНоменклатуры.БазоваяЕдиницаИзмерения;
				КонецЕсли;
				
				СтрокаТабличнойТовары.Идентификатор	= СтрокаТабличнойЧасти.Идентификатор;
				СтрокаТабличнойТовары.Количество	= СтрокаТабличнойЧасти.Количество;
				СтрокаТабличнойТовары.Номенклатура	= СтрокаТабличнойЧасти.Номенклатура;
				СтрокаТабличнойТовары.СтавкаНДС		= СтрокаТабличнойЧасти.СтавкаНДС;
				СтрокаТабличнойТовары.ПенсионныйФонд = СтрокаТабличнойЧасти.ПенсионныйФонд;
				СтрокаТабличнойТовары.Сумма			= СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойТовары.СуммаБезСкидок = СтрокаТабличнойЧасти.СуммаБезСкидок;
				СтрокаТабличнойТовары.СуммаНаценки	= СтрокаТабличнойЧасти.СуммаНаценки;
				СтрокаТабличнойТовары.СуммаНДС		= СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойТовары.СуммаСкидки	= СтрокаТабличнойЧасти.СуммаСкидки;
				СтрокаТабличнойТовары.Цена			= СтрокаТабличнойЧасти.Цена;
				СтрокаТабличнойТовары.СуммаСертификата = СтрокаТабличнойЧасти.СуммаСертификата; //Костенюк Александр 13.01.2015
				СтрокаТабличнойТовары.СуммаАкцизногоНалога = СтрокаТабличнойЧасти.СуммаАкцизногоНалога; //Костенюк Александр 04.02.2015
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Чек ККМ. Возврат.
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ")) Тогда

		// Вид операции.
		Если Не ЗначениеЗаполнено(ВидОперации) Тогда
			Если (Основание.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа) Тогда
				ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
			КонецЕсли;
		КонецЕсли;

		// Шапка.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Сделка = Основание.Сделка;
		Модуль = Сделка.Модуль;
		Ресторан = Сделка.Ресторан;
		КассаККМ = Основание.КассаККМ;
		Если (ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа) Тогда
			ЧекККМ = Неопределено;
		Иначе
			ЧекККМ = Основание;
		КонецЕсли;

		// Табличная часть.
		Товары.Загрузить(Основание.Товары.Выгрузить());
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Нормализация.
	ПодготовитьШапку(РежимЗаписи, РежимПроведения);
	ПодготовитьТабличнуюЧастьТовары(РежимЗаписи, РежимПроведения);
	
	Состояние = УправлениеЗаказами.ПолучитьСостояниеДокумента(ЭтотОбъект, РежимЗаписи);
	
	// Проверка заполнения реквизитов.
	мЗаголовок = Строка(РежимЗаписи) + " документа «" + СокрЛП(ЭтотОбъект) + "»: ";
	
	// Проверка заполнения реквизитов шапки.
	СтруктураОбязательныхПолей = Новый Структура;
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		СтруктураОбязательныхПолей.Вставить("КассаККМ");
		СтруктураОбязательныхПолей.Вставить("Оплата");
		СтруктураОбязательныхПолей.Вставить("Организация");
		СтруктураОбязательныхПолей.Вставить("Ресторан");
		СтруктураОбязательныхПолей.Вставить("Организация");
		Если (ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат) Тогда
			СтруктураОбязательныхПолей.Вставить("ЧекККМ");
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, мЗаголовок);

	// Проверка заполнения реквизитов табличных частей.
	
	// -- Товары.
	СтруктураОбязательныхПолей = Новый Структура;
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		СтруктураОбязательныхПолей.Вставить("ЕдиницаИзмерения");
		СтруктураОбязательныхПолей.Вставить("Количество");
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("Цена");
		//СтруктураОбязательныхПолей.Вставить("Сумма");
		//Костенюк Александр-Старт 19.12.2014
		// Форма №1. (фискальный/товарный чек)
		// Форма №2. При полном погашении суммы счета сертификатом сумма к оплате будет равной "0"
		Если ОтражатьВНалоговомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("Сумма");
		КонецЕсли;
		//Костенюк Александр-Финиш 19.12.2014
	КонецЕсли;
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

// Обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Движения документа.
	ДвиженияПоРегистрам(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Удаление движений документа.
	УдалениеДвиженияПоРегистрам(Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()


// Инициализация переменных.
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мИспользоватьВкачествеКодаТовараДляФРАртикул = Истина;