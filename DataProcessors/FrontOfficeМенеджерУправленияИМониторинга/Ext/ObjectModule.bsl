
#Если Клиент Тогда
	
Перем мФормаВыбораЭкспедитора;	
Перем мЗаголовокФормы;	
Перем мОписаниеТповДокументов;
Перем мТипДокументаРеализацияТоваровУслуг, мТипДокументаНакладнаяНаДоставку;

Перем мПроизводственныеГруппыПустые, мПроизводственныеГруппыПустыеПредставление;

Перем мАвтоматическоеУправлениеПоследнееВыполнение, мАвтоматическоеУправлениеПериодВыполнения;


// Процедура инициализация модуля рабочего места.
//
Процедура Инициализация() Экспорт
	
	// Проверка режима.
	Если Не ПолучитьСерверFrontOffice().РежимBackOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Создание формы.
	Если (Форма = Неопределено) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
		
КонецПроцедуры // Инициализация()

// Процедура открытия формы рабочего места.
//
Процедура Открыть() Экспорт
	
	// Открытие формы.
	ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		
КонецПроцедуры // Открыть()

 

Функция ПолучитьСтрокуГруппировки(Обязательные = Неопределено, Группировка = Неопределено, Представление = Ложь, ТабПоле = Неопределено)
	
	Перем Результат;
	
	// Структура группировки.
	Если (Не Группировка = Неопределено) Тогда
		Для Каждого Значение Из Группировка Цикл
			Если Значение.Пометка Тогда
				Если ПустаяСтрока(Результат) Тогда
					//Ковтун А. 12/05/2010
					Если Представление Тогда
						Результат = ТабПоле.Колонки.Найти(Значение.Значение).ТекстШапки;
					Иначе	
						Результат = Значение.Значение;
					КонецЕсли;
				Иначе
					Если Представление Тогда
						Результат = Результат + "," + ТабПоле.Колонки.Найти(Значение.Значение).ТекстШапки;
					Иначе	
						Результат = Результат + "," + Значение.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Результат.
	Если ПустаяСтрока(Результат) Тогда
		Возврат Обязательные;
	КонецЕсли;
	Если ПустаяСтрока(Обязательные) Тогда
		Возврат Строка(Результат);
	КонецЕсли;
	Возврат Обязательные + "," + Строка(Результат);

КонецФункции // ПолучитьСтрокуГруппировки()
        
Процедура ОбойтиДеревоИЗапомнитьРазвернутость(СтрокаДерева,ИндексВерхнегоРодителя,Уровень=0,РазвернутыеСтроки,ТабличноеПоле,Колонка)
	Для Каждого стр Из СтрокаДерева.Строки Цикл		
		СтрокаТЧ = РазвернутыеСтроки.Добавить();
		СтрокаТЧ.Значение = стр[Колонка];
		СтрокаТЧ.Уровень = Уровень;						
		СтрокаТЧ.Родитель = ?(стр.Родитель=Неопределено,Неопределено,стр.Родитель[Колонка]);			
		//При запоминании проверяем если у элемента нет подчиненных, то ставим ему состояние развернутости
		//по дефолту какое стоит у данного табличного поля
		Если стр.Строки.Количество()=0 Тогда
			Если ТабличноеПоле.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать Тогда
				СтрокаТЧ.ВеткаРазвернута = Ложь;
			ИначеЕсли (ТабличноеПоле.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень)и(Уровень=0) Тогда
				СтрокаТЧ.ВеткаРазвернута = Истина;
			ИначеЕсли ТабличноеПоле.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни Тогда
				СтрокаТЧ.ВеткаРазвернута = Истина;
			КонецЕсли; 			
		Иначе
			СтрокаТЧ.ВеткаРазвернута = ТабличноеПоле.Развернут(стр);	
		КонецЕсли;
		Если стр.Родитель=Неопределено Тогда
			ИндексВерхнегоРодителя = СтрокаДерева.Строки.Индекс(стр);
		КонецЕсли;				
		СтрокаТЧ.ИндексВерхнегоРодителя=ИндексВерхнегоРодителя;
		ОбойтиДеревоИЗапомнитьРазвернутость(стр,ИндексВерхнегоРодителя,Уровень+1,РазвернутыеСтроки,ТабличноеПоле,Колонка);				
	КонецЦикла;
КонецПроцедуры   
 
Функция ПолучитьСостояниеДерева(ЭлементФормыДЗ, ДеревоЗн, Колонка = "Ссылка")

	РазвернутыеСтроки = Новый ТаблицаЗначений;
	РазвернутыеСтроки.Колонки.Добавить("Значение");
	РазвернутыеСтроки.Колонки.Добавить("Уровень");
	РазвернутыеСтроки.Колонки.Добавить("Родитель");
	РазвернутыеСтроки.Колонки.Добавить("ИндексВерхнегоРодителя");
	РазвернутыеСтроки.Колонки.Добавить("ВеткаРазвернута", Новый ОписаниеТипов("Булево"));

	ОчиститьСообщения() ;
	Если ДеревоЗн.Строки.Количество() = 0 Тогда
		Возврат РазвернутыеСтроки;
	КонецЕсли;	
	
	ОбойтиДеревоИЗапомнитьРазвернутость(ЭлементФормыДЗ.Значение,,,РазвернутыеСтроки,ЭлементФормыДЗ,Колонка);		
	
	Возврат РазвернутыеСтроки;                                                                              
	
КонецФункции

Процедура ОбойтиДеревоИРазвернуть(СтрокаДерева,ИндексВерхнегоРодителя,Уровень=0,РазвернутыеСтроки,ТабличноеПоле,Колонка)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		
		Если стр.Родитель=Неопределено Тогда
			ИндексВерхнегоРодителя = СтрокаДерева.Строки.Индекс(стр);			
		КонецЕсли;				
		
		СостояниеНайдено=ложь;
		Для Каждого СтрокаТаблицы Из РазвернутыеСтроки Цикл			
			Если (стр[Колонка]=СтрокаТаблицы.Значение)и(Уровень=СтрокаТаблицы.Уровень)и
				(?(стр.Родитель=Неопределено,Неопределено,стр.Родитель[Колонка]) = СтрокаТаблицы.Родитель)и
				(СтрокаТаблицы.ВеткаРазвернута=ТабличноеПоле.Развернут(стр)) Тогда
					
				//(СтрокаТаблицы.ИндексВерхнегоРодителя=ИндексВерхнегоРодителя) Тогда				
				
				Если СтрокаТаблицы.ВеткаРазвернута Тогда
					ТабличноеПоле.Развернуть(стр);
					ОбойтиДеревоИРазвернуть(стр,ИндексВерхнегоРодителя,Уровень+1,РазвернутыеСтроки,ТабличноеПоле,Колонка);					
				КонецЕсли;        				
				СостояниеНайдено=Истина;
			КонецЕсли; 
		КонецЦикла;		
		
		Если НЕ(СостояниеНайдено) Тогда
			Если ТабличноеПоле.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать Тогда
				//ничего не делаем
			ИначеЕсли (ТабличноеПоле.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень)и(Уровень=0) Тогда
				ТабличноеПоле.Развернуть(стр);
			ИначеЕсли ТабличноеПоле.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни Тогда
				ТабличноеПоле.Развернуть(стр);
				ОбойтиДеревоИРазвернуть(стр,ИндексВерхнегоРодителя,Уровень+1,РазвернутыеСтроки,ТабличноеПоле,Колонка);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла;
КонецПроцедуры  

Процедура ВосстановитьСостояниеДерева(ЭлементФормыДЗ, Данные, Колонка = "Ссылка", Состояние)
	
	Если ТипЗнч(Состояние) = Тип("ТаблицаЗначений") Тогда
		ОбойтиДеревоИРазвернуть(ЭлементФормыДЗ.Значение,,,Состояние,ЭлементФормыДЗ,Колонка);
	КонецЕсли; 

КонецПроцедуры
         
Функция ВыбратьЭкспедитора(Элемент = Неопределено) Экспорт
	
	// Закрытие формы.
	Если (Элемент = Ложь) Тогда
		Если (Не мФормаВыбораЭкспедитора = Неопределено) И мФормаВыбораЭкспедитора.Открыта() Тогда
			мФормаВыбораЭкспедитора.Закрыть();
		КонецЕсли;
		мФормаВыбораЭкспедитора = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	// Открываем форму.
	Если (Элемент = Неопределено) Тогда
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаЭкспедиторы", Форма, Форма);
	Иначе
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаЭкспедиторы", Элемент, Элемент);
	КонецЕсли;
	ФормаВыбора.РежимВыбора = (Не Элемент = Неопределено); 
	Если ФормаВыбора.РежимВыбора И (Не ФормаВыбора.Открыта()) Тогда
		ФормаВыбора.СостояниеОкна = ВариантСостоянияОкна.Обычное;
		ФормаВыбора.ИзменятьСпособОтображенияОкна = ИзменениеСпособаОтображенияОкна.Запретить;
		мФормаВыбораЭкспедитора = ФормаВыбора; 
	КонецЕсли;
	
	// Открытие формы.
	ФормаВыбора.Открыть();
	
	// Запоминаем формц.
	Если ФормаВыбора.РежимВыбора Тогда
		мФормаВыбораЭкспедитора = ФормаВыбора; 
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВыбратьЭкспедитора()


Функция НастройкиПроизводстваПрочитать(ПродолжительностьВыполнения = Неопределено, ПродолжительностьПроизводства = Неопределено, ПродолжительностьДоставки = Неопределено, Ресторан = Неопределено) Экспорт
	
	// Пустые.
	ПродолжительностьВыполнения = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ПродолжительностьДоставки = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	ПродолжительностьПроизводства = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			
	// Ресторан.
	Если (Ресторан = Неопределено) Тогда
		ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
		Если ТекущийРесторан.Пустая() Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ТекущийРесторан = Ресторан.Ссылка;
	КонецЕсли;
	
	// Выборка данных.
	НаборЗаписей = РегистрыСведений.НастройкиПроизводства.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ресторан.Использование = Истина;
	НаборЗаписей.Отбор.Ресторан.Значение = ТекущийРесторан;
	НаборЗаписей.Прочитать();
	
	// Перенос данных.
	Для Каждого Запись Из НаборЗаписей Цикл
		ПродолжительностьВыполнения = Макс(ПродолжительностьВыполнения, Запись.ПродолжительностьВыполнения, '00010101001000');
		ПродолжительностьПроизводства = Макс(ПродолжительностьПроизводства, Запись.ПродолжительностьПроизводства, '00010101000500');
		ПродолжительностьДоставки = Макс(ПродолжительностьДоставки, Запись.ПродолжительностьДоставки, '00010101000500');
	КонецЦикла;
	
	Возврат Истина;
		
КонецФункции // НастройкиПроизводстваПрочитать()

Функция НастройкиПроизводстваЗаписать(ПродолжительностьВыполнения = Неопределено, ПродолжительностьПроизводства = Неопределено, ПродолжительностьДоставки = Неопределено, Ресторан = Неопределено) Экспорт
	
	Перем Отказ;
	
	// Ресторан.
	Если (Ресторан = Неопределено) Тогда
		ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
		Если ТекущийРесторан.Пустая() Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ТекущийРесторан = Ресторан.Ссылка;
	КонецЕсли;
	
	// Выборка данных.
	НаборЗаписей = РегистрыСведений.НастройкиПроизводства.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ресторан.Использование = Истина;
	НаборЗаписей.Отбор.Ресторан.Значение = ТекущийРесторан;
	НаборЗаписей.Прочитать();
	
	// Поиск максимальных значений.
	МаксПродолжительностьВыполнения = '00010101001000'; ПропорцияПродолжительностьВыполнения = 1.0;
	МаксПродолжительностьПроизводства = '00010101000500'; ПропорцияПродолжительностьПроизводства = 1.0;
	МаксПродолжительностьДоставки = '00010101000500'; ПропорцияПродолжительностьДоставки = 1.0;
	Для Каждого Запись Из НаборЗаписей Цикл
		МаксПродолжительностьВыполнения = Макс(МаксПродолжительностьВыполнения, Запись.ПродолжительностьВыполнения);
		МаксПродолжительностьПроизводства = Макс(МаксПродолжительностьПроизводства, Запись.ПродолжительностьПроизводства);
		МаксПродолжительностьДоставки = Макс(МаксПродолжительностьДоставки, Запись.ПродолжительностьДоставки);
	КонецЦикла;
	Если (Не ПродолжительностьВыполнения = Неопределено) Тогда
		ПропорцияПродолжительностьВыполнения = ОбщегоНазначения.ПолучитьЧисло(Макс(ПродолжительностьВыполнения, '00010101001000')) / ОбщегоНазначения.ПолучитьЧисло(МаксПродолжительностьВыполнения);
	КонецЕсли;
	Если (Не ПродолжительностьПроизводства = Неопределено) Тогда
		ПропорцияПродолжительностьПроизводства = ОбщегоНазначения.ПолучитьЧисло(Макс(ПродолжительностьПроизводства, '00010101000500')) / ОбщегоНазначения.ПолучитьЧисло(МаксПродолжительностьПроизводства);
	КонецЕсли;
	Если (Не ПродолжительностьДоставки = Неопределено) Тогда
		ПропорцияПродолжительностьДоставки = ОбщегоНазначения.ПолучитьЧисло(Макс(ПродолжительностьДоставки, '00010101000500')) / ОбщегоНазначения.ПолучитьЧисло(МаксПродолжительностьДоставки);
	КонецЕсли;
	
	// Изменение данных (пропорциональное).
	Для Каждого Запись Из НаборЗаписей Цикл
		Если (Не ПродолжительностьВыполнения = Неопределено) Тогда
			Если (Запись.ПродолжительностьВыполнения = МаксПродолжительностьВыполнения) Тогда
				Запись.ПродолжительностьВыполнения = ПродолжительностьВыполнения;
			Иначе
				Запись.ПродолжительностьВыполнения = '00010101000000' + Цел(ОбщегоНазначения.ПолучитьЧисло(Запись.ПродолжительностьВыполнения) * ПропорцияПродолжительностьВыполнения);
			КонецЕсли;
		КонецЕсли;
		Если (Не ПродолжительностьПроизводства = Неопределено) Тогда
			Если (Запись.ПродолжительностьПроизводства = МаксПродолжительностьПроизводства) Тогда
				Запись.ПродолжительностьПроизводства = ПродолжительностьПроизводства;
			Иначе
				Запись.ПродолжительностьПроизводства = '00010101000000' + Цел(ОбщегоНазначения.ПолучитьЧисло(Запись.ПродолжительностьПроизводства) * ПропорцияПродолжительностьПроизводства);
			КонецЕсли;
		КонецЕсли;
		Если (Не ПродолжительностьДоставки = Неопределено) Тогда
			Если (Запись.ПродолжительностьДоставки = МаксПродолжительностьДоставки) Тогда
				Запись.ПродолжительностьДоставки = ПродолжительностьДоставки;
			Иначе
				Запись.ПродолжительностьДоставки = '00010101000000' + Цел(ОбщегоНазначения.ПолучитьЧисло(Запись.ПродолжительностьДоставки) * ПропорцияПродолжительностьДоставки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Запись набора записей.
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, ,, НаборЗаписей, ТекущийРесторан);
	КонецПопытки;
	
	Возврат (Не Отказ = Ложь);
	
КонецФункции // НастройкиРесторановПрочитать()


Функция НастройкиРесторановПрочитать(ДатаНачалаПериода = Неопределено, ДатаОкончанияПериода = Неопределено, ПродолжительностьПроизводства = Неопределено, ПродолжительностьДоставки = Неопределено, Ресторан = Неопределено) Экспорт
	
	// Ресторан.
	Если (Ресторан = Неопределено) Тогда
		ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
		Если ТекущийРесторан.Пустая() Тогда
			ДатаНачалаПериода = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			ДатаОкончанияПериода = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			ПродолжительностьДоставки = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			ПродолжительностьПроизводства = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ТекущийРесторан = Ресторан.Ссылка;
	КонецЕсли;
	
	// Выборка данных.
	Настройки = РегистрыСведений.НастройкиРесторанов.Получить(Новый Структура("Ресторан", ТекущийРесторан));
	
	ДатаНачалаПериода = Макс(Настройки.ДатаНачалаПериода, '00010101000000');
	ДатаОкончанияПериода = Макс(Настройки.ДатаОкончанияПериода, '00010101000000');
	ПродолжительностьПроизводства = Макс(Настройки.ПродолжительностьПроизводства, '00010101000500');
	ПродолжительностьДоставки = Макс(Настройки.ПродолжительностьДоставки, '00010101000500');
	
	Возврат Истина;
		
КонецФункции // НастройкиРесторановПрочитать()

Функция НастройкиРесторановЗаписать(ДатаНачалаПериода = Неопределено, ДатаОкончанияПериода = Неопределено, ПродолжительностьПроизводства = Неопределено, ПродолжительностьДоставки = Неопределено, Ресторан = Неопределено) Экспорт
	
	// Ресторан.
	Если (Ресторан = Неопределено) Тогда
		ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
		Если ТекущийРесторан.Пустая() Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ТекущийРесторан = Ресторан.Ссылка;
	КонецЕсли;
	
	// Запись данных.
	Запись = РегистрыСведений.НастройкиРесторанов.СоздатьМенеджерЗаписи();
	Запись.Ресторан = ТекущийРесторан;
	Запись.Прочитать();
	
	Если (Не ДатаНачалаПериода = Неопределено) Тогда
		Запись.ДатаНачалаПериода = Макс(ДатаНачалаПериода, '00010101000000');
	КонецЕсли;
	Если (Не ДатаОкончанияПериода = Неопределено) Тогда
		Запись.ДатаОкончанияПериода = Макс(ДатаОкончанияПериода, '00010101000000');
	КонецЕсли;
	Если (Не ПродолжительностьПроизводства = Неопределено) Тогда
		Запись.ПродолжительностьПроизводства = Макс(ПродолжительностьПроизводства, '00010101000500');
	КонецЕсли;
	Если (Не ПродолжительностьДоставки = Неопределено) Тогда
		Запись.ПродолжительностьДоставки = Макс(ПродолжительностьДоставки, '00010101000500');
	КонецЕсли;
	
	Попытка
		Запись.Записать();	
	Исключение
		FrontOffice.СообщитьОбОшибке("Невозможно выполнить операцию." + ОписаниеОшибки() + ".");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // НастройкиРесторановПрочитать()


// Процедура заполнения табличного поля заказов доставки.
//
Процедура ТаблицаЗаказовДоставкиПрочитать(ТабличноеПоле, Данные, ТребуемыеПолномочия = Неопределено, СписокИсключаемых = Неопределено, Реализация = Истина, Списание = Ложь, Группировка = Неопределено, Отбор = Неопределено, Сортировка = Неопределено, Очередь = Неопределено, Позиционировать = Неопределено) Экспорт
	
	// Текущее состояние (I).
	СостояниеДерева = ПолучитьСостояниеДерева(ТабличноеПоле, Данные);
	
	// Текущая позиция (I).
	Если (Не ТабличноеПоле.ТекущаяСтрока = Неопределено) Тогда
		ТекущаяСсылка = ТабличноеПоле.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	Данные.Строки.Очистить();
	
	// Выборка данных.
	ОткрытыеСостояния = УправлениеЗаказами.СостоянияОткрытыхДокументов();
	ЗакрытыеСостояния = УправлениеЗаказами.СостоянияЗакрытыхДокументов(Истина);
	ИсключаемыеСостояния = Новый Массив;
	Если (Отбор = Неопределено) Тогда
		Открытые = Истина;
		Распределенные = Истина;
		Закрытые = Истина;
	Иначе
		Открытые = Истина;
		Распределенные = Истина;
		Закрытые = Истина;
		
		//Открытые = (Отбор[Перечисления.СостоянияДокументов.Открытые] = Истина) Или (Отбор[Перечисления.СостоянияДокументов.Открытые] = Неопределено);		
		Распределенные = (Отбор[Перечисления.СостоянияДокументов.Распределенные] = Истина) Или (Отбор[Перечисления.СостоянияДокументов.Распределенные] = Неопределено);
		//Закрытые = (Отбор[Перечисления.СостоянияДокументов.Закрытые] = Истина) Или (Отбор[Перечисления.СостоянияДокументов.Закрытые] = Неопределено);
			
		КвоОткрытых=0;
		КвоЗакрытых=0;
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Если (ЭлементОтбора.Значение = Ложь) Тогда
				ИсключаемыеСостояния.Добавить(ЭлементОтбора.Ключ);
			Иначе
				Если УправлениеЗаказами.ПроверитьСостояниеДокумента(ЭлементОтбора.Ключ,ОткрытыеСостояния) Тогда
					КвоОткрытых = КвоОткрытых+1;
				ИначеЕсли УправлениеЗаказами.ПроверитьСостояниеДокумента(ЭлементОтбора.Ключ,ЗакрытыеСостояния) Тогда	
					КвоЗакрытых = КвоЗакрытых+1;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		Открытые = НЕ (КвоОткрытых = 0);
		Закрытые = НЕ (КвоЗакрытых = 0);
		
	КонецЕсли;
	
	// -- 100% пустая выборка.
	Если (Не Открытые) И (Не Закрытые) Тогда
		Возврат;
	КонецЕсли;
	
	// -- 100% пустая выборка.
	Если (Не Реализация) И (Не Списание) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СписокИсключаемых = Неопределено) Тогда
		СписокИсключаемых = Новый Массив;
	КонецЕсли;
	
	Если (Очередь = Неопределено) Тогда
		Очередь = ПолучитьТаблицуОчереди();
	КонецЕсли;
	
	// Запрос.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущаяКассоваяДата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ПроизводственнаяОчередь.Очередь,
	                      |	ПроизводственнаяОчередь.КраткийСоставПроизводства
	                      |ПОМЕСТИТЬ ВременнаяПроизводственнаяОчередь
	                      |ИЗ
	                      |	&Очередь КАК ПроизводственнаяОчередь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СостояниеДокументов.Ссылка,
	                      |	СостояниеДокументов.Номер,
	                      |	СостояниеДокументов.Дата,
	                      |	СостояниеДокументов.ПометкаУдаления,
	                      |	СостояниеДокументов.Проведен,
	                      |	СостояниеДокументов.Состояние,
	                      |	СостояниеДокументов.СостояниеПорядок,
	                      |	СостояниеДокументов.Распечатан,
	                      |	СостояниеДокументов.Сотрудник,
	                      |	СостояниеДокументов.Ресторан,
	                      |	СостояниеДокументов.ТребуемаяДатаНачалаПериода,
	                      |	СостояниеДокументов.ТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.ТребуемаяДатаРазделенияПериода,
	                      |	СостояниеДокументов.ДатаНачалаПериода,
	                      |	СостояниеДокументов.ДатаОкончанияПериода,
	                      |	СостояниеДокументов.ФактическаяДатаНачалаПериода,
	                      |	СостояниеДокументов.ФактическаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.КраткийСоставПроизводства,
	                      |	СостояниеДокументов.Контрагент,
	                      |	СостояниеДокументов.Оплата,
	                      |	СостояниеДокументов.СуммаДокументаБезСкидок,
	                      |	СостояниеДокументов.СуммаСкидкиДокумента,
	                      |	СостояниеДокументов.СуммаНаценкиДокумента,
	                      |	СостояниеДокументов.СуммаДокумента,
	                      |	СостояниеДокументов.СортировкаДата,
	                      |	СостояниеДокументов.СортировкаТребуемаяДатаНачалаПериода,
	                      |	СостояниеДокументов.СортировкаТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.СортировкаТребуемаяДатаРазделенияПериода,
	                      |	СостояниеДокументов.МаршрутДоставки,
	                      |	СостояниеДокументов.КраткийСоставДокумента,
	                      |	СостояниеДокументов.АдресДоставкиПредставление,
	                      |	СостояниеДокументов.АдресДоставкиУлица,
	                      |	СостояниеДокументов.АдресДоставкиДом,
	                      |	СостояниеДокументов.АдресДоставкиКомментарий,
	                      |	СостояниеДокументов.ТелефонПредставление,
	                      |	СостояниеДокументов.ТелефонДополнительныйПредставление,
	                      |	СостояниеДокументов.Наряд,
	                      |	СостояниеДокументов.Экспедитор,
	                      |	СостояниеДокументов.Документ,
	                      |	СостояниеДокументов.Компьютер,
	                      |	СостояниеДокументов.Интернет
	                      |ПОМЕСТИТЬ ВременнаяВыборкаДокументов
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ВложенныйЗапрос.Ссылка КАК Ссылка,
	                      |		ВложенныйЗапрос.Номер КАК Номер,
	                      |		ВложенныйЗапрос.Дата КАК Дата,
	                      |		ВложенныйЗапрос.ПометкаУдаления КАК ПометкаУдаления,
	                      |		ВложенныйЗапрос.Проведен КАК Проведен,
	                      |		ВложенныйЗапрос.Состояние КАК Состояние,
	                      |		ВложенныйЗапрос.СостояниеПорядок КАК СостояниеПорядок,
	                      |		ВложенныйЗапрос.Распечатан КАК Распечатан,
	                      |		ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	                      |		ВложенныйЗапрос.Ресторан КАК Ресторан,
	                      |		ВложенныйЗапрос.ТребуемаяДатаНачалаПериода КАК ТребуемаяДатаНачалаПериода,
	                      |		ВложенныйЗапрос.ТребуемаяДатаОкончанияПериода КАК ТребуемаяДатаОкончанияПериода,
	                      |		ВложенныйЗапрос.ТребуемаяДатаРазделенияПериода КАК ТребуемаяДатаРазделенияПериода,
	                      |		ВложенныйЗапрос.ДатаНачалаПериода КАК ДатаНачалаПериода,
	                      |		ВложенныйЗапрос.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	                      |		ВложенныйЗапрос.ФактическаяДатаНачалаПериода КАК ФактическаяДатаНачалаПериода,
	                      |		ВложенныйЗапрос.ФактическаяДатаОкончанияПериода КАК ФактическаяДатаОкончанияПериода,
	                      |		ВложенныйЗапрос.ФиксированнаяТребуемаяДатаОкончанияПериода КАК ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |		ВложенныйЗапрос.КраткийСоставПроизводства КАК КраткийСоставПроизводства,
	                      |		ВложенныйЗапрос.Контрагент КАК Контрагент,
	                      |		ВложенныйЗапрос.Оплата КАК Оплата,
	                      |		ВложенныйЗапрос.СуммаДокументаБезСкидок КАК СуммаДокументаБезСкидок,
	                      |		ВложенныйЗапрос.СуммаСкидкиДокумента КАК СуммаСкидкиДокумента,
	                      |		ВложенныйЗапрос.СуммаНаценкиДокумента КАК СуммаНаценкиДокумента,
	                      |		ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
	                      |		ВложенныйЗапрос.СортировкаДата КАК СортировкаДата,
	                      |		ВложенныйЗапрос.СортировкаТребуемаяДатаНачалаПериода КАК СортировкаТребуемаяДатаНачалаПериода,
	                      |		ВложенныйЗапрос.СортировкаТребуемаяДатаОкончанияПериода КАК СортировкаТребуемаяДатаОкончанияПериода,
	                      |		ВложенныйЗапрос.СортировкаТребуемаяДатаРазделенияПериода КАК СортировкаТребуемаяДатаРазделенияПериода,
	                      |		ВложенныйЗапрос.МаршрутДоставки КАК МаршрутДоставки,
	                      |		ВложенныйЗапрос.КраткийСоставДокумента КАК КраткийСоставДокумента,
	                      |		ВложенныйЗапрос.АдресДоставкиПредставление КАК АдресДоставкиПредставление,
	                      |		ВложенныйЗапрос.АдресДоставкиУлица КАК АдресДоставкиУлица,
	                      |		ВложенныйЗапрос.АдресДоставкиДом КАК АдресДоставкиДом,
	                      |		ВложенныйЗапрос.АдресДоставкиКомментарий КАК АдресДоставкиКомментарий,
	                      |		ВложенныйЗапрос.ТелефонПредставление КАК ТелефонПредставление,
	                      |		ВложенныйЗапрос.ТелефонДополнительныйПредставление КАК ТелефонДополнительныйПредставление,
	                      |		ВложенныйЗапрос.Наряд КАК Наряд,
	                      |		ВложенныйЗапрос.Экспедитор КАК Экспедитор,
	                      |		ВложенныйЗапрос.Документ КАК Документ,
	                      |		ВложенныйЗапрос.Компьютер КАК Компьютер,
	                      |		ВложенныйЗапрос.Интернет КАК Интернет
	                      |	ИЗ
	                      |		(ВЫБРАТЬ
	                      |			СостояниеДокументов.Документ КАК Ссылка,
	                      |			СостояниеДокументов.Номер КАК Номер,
	                      |			СостояниеДокументов.Дата КАК Дата,
	                      |			ЛОЖЬ КАК ПометкаУдаления,
	                      |			ЛОЖЬ КАК Проведен,
	                      |			СостояниеДокументов.Состояние КАК Состояние,
	                      |			СостояниеДокументов.Состояние.Порядок КАК СостояниеПорядок,
	                      |			СостояниеДокументов.Распечатан КАК Распечатан,
	                      |			СостояниеДокументов.Сотрудник КАК Сотрудник,
	                      |			СостояниеДокументов.Ресторан КАК Ресторан,
	                      |			СостояниеДокументов.ТребуемаяДатаНачалаПериода КАК ТребуемаяДатаНачалаПериода,
	                      |			СостояниеДокументов.ТребуемаяДатаОкончанияПериода КАК ТребуемаяДатаОкончанияПериода,
	                      |			СостояниеДокументов.ТребуемаяДатаРазделенияПериода КАК ТребуемаяДатаРазделенияПериода,
	                      |			СостояниеДокументов.ДатаНачалаПериода КАК ДатаНачалаПериода,
	                      |			СостояниеДокументов.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	                      |			СостояниеДокументов.ФиксированнаяТребуемаяДатаОкончанияПериода КАК ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |			СостояниеДокументов.ФактическаяДатаНачалаПериода КАК ФактическаяДатаНачалаПериода,
	                      |			СостояниеДокументов.ФактическаяДатаОкончанияПериода КАК ФактическаяДатаОкончанияПериода,
	                      |			СостояниеДокументов.КраткийСоставПроизводства КАК КраткийСоставПроизводства,
	                      |			СостояниеДокументов.Контрагент КАК Контрагент,
	                      |			NULL КАК Оплата,
	                      |			СостояниеДокументов.СуммаДокументаБезСкидок КАК СуммаДокументаБезСкидок,
	                      |			СостояниеДокументов.СуммаСкидкиДокумента КАК СуммаСкидкиДокумента,
	                      |			СостояниеДокументов.СуммаНаценкиДокумента КАК СуммаНаценкиДокумента,
	                      |			СостояниеДокументов.СуммаДокумента КАК СуммаДокумента,
	                      |			ВЫБОР
	                      |				КОГДА СостояниеСортировкиДокументов.СортировкаДата ЕСТЬ NULL 
	                      |					ТОГДА (РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СостояниеДокументов.ДатаНачалаПериода, МИНУТА) * 60 + СЕКУНДА(СостояниеДокументов.ДатаНачалаПериода)) * &СтепеньСортировки
	                      |				ИНАЧЕ СостояниеСортировкиДокументов.СортировкаДата
	                      |			КОНЕЦ КАК СортировкаДата,
	                      |			ВЫБОР
	                      |				КОГДА СостояниеСортировкиДокументов.СортировкаТребуемаяДатаНачалаПериода ЕСТЬ NULL 
	                      |					ТОГДА (РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СостояниеДокументов.ТребуемаяДатаНачалаПериода, МИНУТА) * 60 + СЕКУНДА(СостояниеДокументов.ТребуемаяДатаНачалаПериода)) * &СтепеньСортировки
	                      |				ИНАЧЕ СостояниеСортировкиДокументов.СортировкаТребуемаяДатаНачалаПериода
	                      |			КОНЕЦ КАК СортировкаТребуемаяДатаНачалаПериода,
	                      |			ВЫБОР
	                      |				КОГДА СостояниеСортировкиДокументов.СортировкаТребуемаяДатаОкончанияПериода ЕСТЬ NULL 
	                      |					ТОГДА (РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СостояниеДокументов.ТребуемаяДатаОкончанияПериода, МИНУТА) * 60 + СЕКУНДА(СостояниеДокументов.ТребуемаяДатаОкончанияПериода)) * &СтепеньСортировки
	                      |				ИНАЧЕ СостояниеСортировкиДокументов.СортировкаТребуемаяДатаОкончанияПериода
	                      |			КОНЕЦ КАК СортировкаТребуемаяДатаОкончанияПериода,
	                      |			ВЫБОР
	                      |				КОГДА СостояниеСортировкиДокументов.СортировкаТребуемаяДатаРазделенияПериода ЕСТЬ NULL 
	                      |					ТОГДА (РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СостояниеДокументов.ТребуемаяДатаРазделенияПериода, МИНУТА) * 60 + СЕКУНДА(СостояниеДокументов.ТребуемаяДатаРазделенияПериода)) * &СтепеньСортировки
	                      |				ИНАЧЕ СостояниеСортировкиДокументов.СортировкаТребуемаяДатаРазделенияПериода
	                      |			КОНЕЦ КАК СортировкаТребуемаяДатаРазделенияПериода,
	                      |			СостояниеДокументов.МаршрутДоставки КАК МаршрутДоставки,
	                      |			СостояниеДокументов.КраткийСоставДокумента КАК КраткийСоставДокумента,
	                      |			СостояниеДокументов.АдресДоставкиПредставление КАК АдресДоставкиПредставление,
	                      |			СостояниеДокументов.АдресДоставкиУлица КАК АдресДоставкиУлица,
	                      |			СостояниеДокументов.АдресДоставкиДом КАК АдресДоставкиДом,
	                      |			СостояниеДокументов.АдресДоставкиКомментарий КАК АдресДоставкиКомментарий,
	                      |			СостояниеДокументов.ТелефонПредставление КАК ТелефонПредставление,
	                      |			СостояниеДокументов.ТелефонДополнительныйПредставление КАК ТелефонДополнительныйПредставление,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ КАК Наряд,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Сотрудник КАК Экспедитор,
	                      |			СостояниеДокументов.Документ КАК Документ,
	                      |			СостояниеДокументов.Компьютер КАК Компьютер,
	                      |			СостояниеДокументов.Интернет КАК Интернет
	                      |		ИЗ
	                      |			РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСортировкиДокументов КАК СостояниеСортировкиДокументов
	                      |				ПО СостояниеДокументов.Документ = СостояниеСортировкиДокументов.Документ
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовОснованийНакладныхНаДоставку КАК СостояниеДокументовОснованийНакладныхНаДоставку
	                      |				ПО СостояниеДокументов.Документ = СостояниеДокументовОснованийНакладныхНаДоставку.ДокументОснование
	                      |		ГДЕ
	                      |			&Открытые
	                      |			И (&Реализация
	                      |						И СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	                      |					ИЛИ &Списание
	                      |						И СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров)
	                      |			И (&НеПроверятьРесторан
	                      |					ИЛИ СостояниеДокументов.Ресторан = &Ресторан)
	                      |			И СостояниеДокументов.Состояние В(&ОткрытыеСостояния)
	                      |			И (НЕ СостояниеДокументов.Состояние В (&ИсключаемыеСостояния))
	                      |			И СостояниеДокументов.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка)
	                      |		
	                      |		ОБЪЕДИНИТЬ ВСЕ
	                      |		
	                      |		ВЫБРАТЬ
	                      |			РеализацияТоваровУслуг.Ссылка,
	                      |			РеализацияТоваровУслуг.Номер,
	                      |			РеализацияТоваровУслуг.Дата,
	                      |			РеализацияТоваровУслуг.ПометкаУдаления,
	                      |			РеализацияТоваровУслуг.Проведен,
	                      |			РеализацияТоваровУслуг.Состояние,
	                      |			РеализацияТоваровУслуг.Состояние.Порядок,
	                      |			РеализацияТоваровУслуг.Распечатан,
	                      |			РеализацияТоваровУслуг.Сотрудник,
	                      |			РеализацияТоваровУслуг.Ресторан,
	                      |			РеализацияТоваровУслуг.ТребуемаяДатаНачалаПериода,
	                      |			РеализацияТоваровУслуг.ТребуемаяДатаОкончанияПериода,
	                      |			РеализацияТоваровУслуг.ТребуемаяДатаРазделенияПериода,
	                      |			РеализацияТоваровУслуг.ДатаНачалаПериода,
	                      |			РеализацияТоваровУслуг.ДатаОкончанияПериода,
	                      |			РеализацияТоваровУслуг.ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |			РеализацияТоваровУслуг.ФактическаяДатаНачалаПериода,
	                      |			РеализацияТоваровУслуг.ФактическаяДатаОкончанияПериода,
	                      |			РеализацияТоваровУслуг.КраткийСоставПроизводства,
	                      |			РеализацияТоваровУслуг.Контрагент,
	                      |			РеализацияТоваровУслуг.Оплата,
	                      |			РеализацияТоваровУслуг.СуммаДокументаБезСкидок,
	                      |			РеализацияТоваровУслуг.СуммаСкидкиДокумента,
	                      |			РеализацияТоваровУслуг.СуммаНаценкиДокумента,
	                      |			РеализацияТоваровУслуг.СуммаДокумента,
	                      |			(РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), РеализацияТоваровУслуг.ДатаНачалаПериода, МИНУТА) * 60 + СЕКУНДА(РеализацияТоваровУслуг.ДатаНачалаПериода)) * &СтепеньСортировки,
	                      |			(РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), РеализацияТоваровУслуг.ТребуемаяДатаНачалаПериода, МИНУТА) * 60 + СЕКУНДА(РеализацияТоваровУслуг.ТребуемаяДатаНачалаПериода)) * &СтепеньСортировки,
	                      |			(РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), РеализацияТоваровУслуг.ТребуемаяДатаОкончанияПериода, МИНУТА) * 60 + СЕКУНДА(РеализацияТоваровУслуг.ТребуемаяДатаОкончанияПериода)) * &СтепеньСортировки,
	                      |			(РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), РеализацияТоваровУслуг.ТребуемаяДатаРазделенияПериода, МИНУТА) * 60 + СЕКУНДА(РеализацияТоваровУслуг.ТребуемаяДатаРазделенияПериода)) * &СтепеньСортировки,
	                      |			NULL,
	                      |			РеализацияТоваровУслуг.КраткийСоставДокумента,
	                      |			РеализацияТоваровУслуг.АдресДоставкиПредставление,
	                      |			РеализацияТоваровУслуг.АдресДоставкиУлица,
	                      |			РеализацияТоваровУслуг.АдресДоставкиДом,
	                      |			РеализацияТоваровУслуг.АдресДоставкиКомментарий,
	                      |			РеализацияТоваровУслуг.ТелефонПредставление,
	                      |			РеализацияТоваровУслуг.ТелефонДополнительныйПредставление,
	                      |			НакладнаяНаДоставкуДокументыОснования.Ссылка,
	                      |			НакладнаяНаДоставкуДокументыОснования.Сотрудник,
	                      |			РеализацияТоваровУслуг.Ссылка,
	                      |			NULL,
	                      |			РеализацияТоваровУслуг.Интернет
	                      |		ИЗ
	                      |			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
	                      |				ПО (НакладнаяНаДоставкуДокументыОснования.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
	                      |		ГДЕ
	                      |			&Закрытые
	                      |			И &Реализация
	                      |			И (&НеПроверятьРесторан
	                      |					ИЛИ РеализацияТоваровУслуг.Ресторан = &Ресторан)
	                      |			И РеализацияТоваровУслуг.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка)
	                      |			И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	                      |			И РеализацияТоваровУслуг.Состояние В(&ЗакрытыеСостояния)
	                      |			И (НЕ РеализацияТоваровУслуг.Состояние В (&ИсключаемыеСостояния))) КАК ВложенныйЗапрос) КАК СостояниеДокументов
	                      |ГДЕ
	                      |	(&Распределенные
	                      |			ИЛИ СостояниеДокументов.Наряд ЕСТЬ NULL )
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СостояниеДокументов.Ссылка,
	                      |	СостояниеДокументов.Номер КАК Номер,
	                      |	СостояниеДокументов.Дата КАК Дата,
	                      |	СостояниеДокументов.ПометкаУдаления,
	                      |	СостояниеДокументов.Проведен,
	                      |	ВЫБОР
	                      |		КОГДА СостояниеДокументов.Наряд ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК Распределен,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ СостояниеДокументов.Распечатан)
	                      |				ИЛИ СостояниеДокументов.Наряд ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК РаспределенИРаспечатан,
	                      |	СостояниеДокументов.Состояние,
	                      |	СостояниеДокументов.СостояниеПорядок КАК СостояниеПорядок,
	                      |	СостояниеДокументов.Распечатан,
	                      |	СостояниеДокументов.Сотрудник,
	                      |	СостояниеДокументов.Ресторан,
	                      |	СостояниеДокументов.ТребуемаяДатаНачалаПериода,
	                      |	СостояниеДокументов.ТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.ТребуемаяДатаРазделенияПериода,
	                      |	СостояниеДокументов.ДатаНачалаПериода,
	                      |	СостояниеДокументов.ДатаОкончанияПериода,
	                      |	СостояниеДокументов.ФактическаяДатаНачалаПериода,
	                      |	СостояниеДокументов.ФактическаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ СостояниеДокументов.КраткийСоставДокумента = """")
	                      |			ТОГДА СостояниеДокументов.КраткийСоставДокумента
	                      |		ИНАЧЕ &ПроизводственныеГруппыПустые
	                      |	КОНЕЦ КАК КраткийСоставДокумента,
	                      |	СостояниеДокументов.Контрагент,
	                      |	СостояниеДокументов.Оплата,
	                      |	СостояниеДокументов.СуммаДокументаБезСкидок,
	                      |	СостояниеДокументов.СуммаСкидкиДокумента,
	                      |	СостояниеДокументов.СуммаНаценкиДокумента,
	                      |	СостояниеДокументов.СуммаДокумента,
	                      |	СостояниеДокументов.СортировкаДата КАК СортировкаДата,
	                      |	СостояниеДокументов.СортировкаТребуемаяДатаНачалаПериода,
	                      |	СостояниеДокументов.СортировкаТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.СортировкаТребуемаяДатаРазделенияПериода,
	                      |	СостояниеДокументов.МаршрутДоставки,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ СостояниеДокументов.КраткийСоставПроизводства = """")
	                      |			ТОГДА СостояниеДокументов.КраткийСоставПроизводства
	                      |		ИНАЧЕ &ПроизводственныеГруппыПустые
	                      |	КОНЕЦ КАК КраткийСоставПроизводства,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ ЕСТЬNULL(ПроизводственнаяОчередь.Очередь, СостояниеДокументов.КраткийСоставПроизводства) = """")
	                      |			ТОГДА ЕСТЬNULL(ПроизводственнаяОчередь.Очередь, СостояниеДокументов.КраткийСоставПроизводства)
	                      |		ИНАЧЕ &ПроизводственныеГруппыПустые
	                      |	КОНЕЦ КАК ПроизводственныеОчереди,
	                      |	СостояниеДокументов.АдресДоставкиПредставление,
	                      |	СостояниеДокументов.АдресДоставкиУлица,
	                      |	СостояниеДокументов.АдресДоставкиДом,
	                      |	СостояниеДокументов.АдресДоставкиКомментарий,
	                      |	СостояниеДокументов.ТелефонПредставление,
	                      |	СостояниеДокументов.ТелефонДополнительныйПредставление,
	                      |	СостояниеДокументов.Наряд,
	                      |	СостояниеДокументов.Экспедитор,
	                      |	СостояниеДокументов.Документ КАК Документ,
	                      |	СостояниеДокументов.Компьютер,
	                      |	СостояниеДокументов.Интернет
	                      |ИЗ
	                      |	ВременнаяВыборкаДокументов КАК СостояниеДокументов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПроизводственнаяОчередь КАК ПроизводственнаяОчередь
	                      |		ПО СостояниеДокументов.КраткийСоставПроизводства = ПроизводственнаяОчередь.КраткийСоставПроизводства
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      //|	СостояниеПорядок");
						  //Костенюк Александр-Старт 23.10.2012
						  |	СостояниеПорядок
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ВременнаяПроизводственнаяОчередь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ВременнаяВыборкаДокументов");
						  //Костенюк Александр-Финиш 23.10.2012
	Запрос.УстановитьПараметр("Реализация", Реализация);
	Запрос.УстановитьПараметр("Списание", Списание);
	Запрос.УстановитьПараметр("Открытые", Открытые);
	Запрос.УстановитьПараметр("Распределенные", Распределенные);
	Запрос.УстановитьПараметр("Закрытые", Закрытые);
	Запрос.УстановитьПараметр("ОткрытыеСостояния", ОткрытыеСостояния);
	Запрос.УстановитьПараметр("ЗакрытыеСостояния", ЗакрытыеСостояния);
	Запрос.УстановитьПараметр("ИсключаемыеСостояния", ИсключаемыеСостояния);
	Запрос.УстановитьПараметр("СписокИсключаемых", СписокИсключаемых);
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Запрос.УстановитьПараметр("НеПроверятьРесторан", ТекущийРесторан.Пустая());
	Запрос.УстановитьПараметр("Дата", ТекущаяКассоваяДата);
	Запрос.УстановитьПараметр("СтепеньСортировки", УправлениеЗаказами.ПолучитьЗначениеСтепениСортировки());
	Запрос.УстановитьПараметр("ПроизводственныеГруппыПустые", мПроизводственныеГруппыПустые);
	Запрос.УстановитьПараметр("Очередь", Очередь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Перенос данных в табличное поле.
	Если ТекущийРесторан.Пустая() Тогда
		Обязательные = "Ресторан";
	КонецЕсли;
	
	СписГруппировок = ПолучитьСтрокуГруппировки(Строка(Обязательные), Группировка, Истина, ТабличноеПоле);
	Если СписГруппировок<>"" Тогда 
		лТекстШапки = НРег(СтрЗаменить(СписГруппировок,",","\"))+"\"+"документ";
	Иначе
		лТекстШапки = "Документ";
	КонецЕсли;
	ТабличноеПоле.Колонки.Ссылка.ТекстШапки = ВРег(Лев(лТекстШапки,1))+Прав(лТекстШапки,СтрДлина(лТекстШапки)-1);
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

    ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначенийСГруппировкой(РезультатЗапроса.Выгрузить(), ПолучитьСтрокуГруппировки(Строка(Обязательные), Группировка), "Ссылка", Данные, "Состояние");
	
	// Сортировка.
	Если (Не Сортировка = Неопределено) Тогда
		Для Каждого ЭлементСписка Из Сортировка Цикл
			Если ЭлементСписка.Пометка Тогда
				СтрокаСортировки = Строка(СтрокаСортировки) + ЭлементСписка.Значение + ",";
			КонецЕсли;
		КонецЦикла;
		СтрокаСортировки = СтрЗаменить(СтрокаСортировки, "Состояние", "СостояниеПорядок");
	КонецЕсли;
	Данные.Строки.Сортировать(Строка(СтрокаСортировки) + "СортировкаДата,Дата,Номер", Истина);
	
	// Текущее состояние (II).
	ВосстановитьСостояниеДерева(ТабличноеПоле, Данные, , СостояниеДерева);
	
	// Текущая позиция (II).
	Если (Не ТекущаяСсылка = Неопределено) Тогда
		ТекущаяСтрока = Данные.Строки.Найти(ТекущаяСсылка, "Ссылка", Истина);
	КонецЕсли;
	Если (Не ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;	
	
КонецПроцедуры // ТаблицаЗаказовДоставкиПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля заказов доставки.
//
Процедура ТаблицаЗаказовДоставкиВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, СписокГруппировок) Экспорт
	
	ТаблицаНарядовДоставкиВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, СписокГруппировок);
	
КонецПроцедуры // ТаблицаЗаказовДоставкиВывестиСтроку()
	
// Функция получения текущей строку (Реализации товаров и услуг или Списания товаров) в табличном поле нарядов доставки.
//
Функция ТаблицаЗаказовДоставкиПолучитьСтроку(ТабличноеПоле, Данные, Знач ТекущиеДанные = Null) Экспорт
	
	// Текущие данные.
	Если (ТекущиеДанные = Null) Тогда
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	КонецЕсли;
	
	// Поиск позиции.
	Строка = ТекущиеДанные;
	Пока (Не Строка = Неопределено) И (Не ТипЗнч(Строка.Ссылка) = мТипДокументаРеализацияТоваровУслуг) Цикл
		Строка = Строка.Родитель;
	КонецЦикла;
	
	// Результат.
	Если (Не Строка = Неопределено) Тогда
		Возврат Строка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ТаблицаЗаказовДоставкиПолучитьСтроку()

// Функция добавления строки в табличное поле заказов доставки.
//
Функция ТаблицаЗаказовДоставкиДобавитьПозицию(ТабличноеПоле, Данные, Докумет = Неопределено) Экспорт
	
	// Создание объекта.
	Если (Докумет = Неопределено) Тогда
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
		ДокументОбъект.Модуль = Перечисления.МодулиИПодсистемы.Доставка;
		ДокументОбъект.Ресторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
		ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
	Иначе
		ДокументОбъект = Докумет.Скопировать();
	КонецЕсли;
	
	// Открытие объекта.
	ДокументОбъект.ПолучитьФорму(, Форма).Открыть();
	
	// Результат.
	Возврат Истина;
	
КонецФункции // ТаблицаЗаказовДоставкиДобавитьПозицию()

// Функция поиска позицию смещения позиции в табличном поле заказов доставки.
//
Функция ТаблицаЗаказовДоставкиНайтиПозициюСмещения(ТабличноеПоле, Данные, Строка = Неопределено, Смещение) Экспорт
	
	// Позиция.
	Если (Строка = Неопределено) Тогда
		Строка = ТаблицаЗаказовДоставкиПолучитьСтроку(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Строка = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Действие.
	Возврат ТаблицаНарядовДоставкиНайтиПозициюСмещения(ТабличноеПоле, Данные, Строка, Смещение);
	
КонецФункции // ТаблицаЗаказовДоставкиНайтиПозициюСмещения()

// Функция смещения позиции в табличном поле заказов доставки.
//
Функция ТаблицаЗаказовДоставкиСместитьПозицию(ТабличноеПоле, Данные, Строка = Неопределено, Смещение) Экспорт
	
	// Позиция.
	Если (Строка = Неопределено) Тогда
		Строка = ТаблицаЗаказовДоставкиПолучитьСтроку(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Строка = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Действие.
	Возврат ТаблицаНарядовДоставкиСместитьПозицию(ТабличноеПоле, Данные, Строка, Смещение);
	
КонецФункции // ТаблицаЗаказовДоставкиСместитьПозицию()

// Функция удаления строки в табличном поле заказов доставки.
//
Функция ТаблицаЗаказовДоставкиУдалитьПозицию(ТабличноеПоле, Данные, Строка = Неопределено) Экспорт
	
	// Позиция.
	Если (Строка = Неопределено) Тогда
		Строка = ТаблицаЗаказовДоставкиПолучитьСтроку(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Строка = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	
	Возврат РаботаСДиалогами.ДокументУстановитьПометкуУдаления(Строка, Неопределено);
	
	
	// Формат Эксперт - SD  31.08.2011 - перенос ядра 	
	// Получение и блокирование объекта.
	//ДокументОбъект = Строка;
	//Если Не ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	// Запись объекта.    
	//Если ПолучитьСерверFrontOffice().ДокументУдалить(ДокументОбъект, Не ДокументОбъект.ПометкаУдаления) И
	//	 ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект) Тогда
	//	Возврат Истина;
	//КонецЕсли;
	
	//ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект);
	
	//Возврат Ложь;
	
КонецФункции // ТаблицаЗаказовДоставкиУдалитьПозицию()

// Функция переводит требуемый документ в производство.
//
Функция ТаблицаЗаказовДоставкиНачатьПроизводство(ТабличноеПоле, Данные, Строка = Неопределено) Экспорт
	
	// Позиция.
	Если (Строка = Неопределено) Тогда
		Строка = ТаблицаЗаказовДоставкиПолучитьСтроку(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Строка = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
Возврат УправлениеРеализациямиТоваровУслуг.ПроизводствоНачать(Строка, Неопределено, , Истина);
	
	// Действие.
	Возврат ПолучитьСерверFrontOffice().МенеджерПроизводства.ДокументНачатьПроизводство(Строка);
	
КонецФункции // ТаблицаЗаказовДоставкиНачатьПроизводство()

// Функция возвращает требуемый документ из производства.
//
Функция ТаблицаЗаказовДоставкиЗавершитьПроизводство(ТабличноеПоле, Данные, Строка = Неопределено, Отказ = Ложь) Экспорт
	
	// Позиция.
	Если (Строка = Неопределено) Тогда
		Строка = ТаблицаЗаказовДоставкиПолучитьСтроку(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Строка = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
Возврат УправлениеРеализациямиТоваровУслуг.ПроизводствоОтменить(Строка, Неопределено, , Истина);

	// Действие.
	Возврат ПолучитьСерверFrontOffice().МенеджерПроизводства.ДокументЗавершитьПроизводство(Строка, Отказ);
	
КонецФункции // ТаблицаЗаказовДоставкиЗавершитьПроизводство()

// Процедура заполнения табличного поля нарядов доставки.
//
Процедура ТаблицаНарядовДоставкиПрочитать(ТабличноеПоле, Данные, СписокИсключаемых = Неопределено, Группировка = Неопределено, Отбор = Неопределено, Сортировка = Неопределено, Очередь = Неопределено, Позиционировать = Неопределено, ПозиционироватьСтроки = Неопределено) Экспорт
	
	Перем ОсновнаяТаблица, ДополнительнаяТаблица;
	
	// Текущее состояние (I).
	СостояниеДерева = ПолучитьСостояниеДерева(ТабличноеПоле, Данные);
	
	// Текущая позиция (I).
	Если (Не ТабличноеПоле.ТекущаяСтрока = Неопределено) Тогда
		ТекущаяПозиция = ТаблицаНарядовДоставкиПолучитьПозицию(ТабличноеПоле, Данные);
		ТекущаяСсылка = ТабличноеПоле.ТекущиеДанные.Ссылка;
	КонецЕсли;
	Если (Не Позиционировать = Неопределено) Тогда
		ТекущаяПозиция = Позиционировать;
	КонецЕсли;
	Если (Не ПозиционироватьСтроки = Неопределено) Тогда
		Если ТипЗнч(ПозиционироватьСтроки) = Тип("Массив") Тогда
			Если Булево(ПозиционироватьСтроки.Количество()) Тогда
				ТекущаяСсылка = ПозиционироватьСтроки[0];
			КонецЕсли;
		Иначе
			ТекущаяСсылка = ПозиционироватьСтроки;
		КонецЕсли;
	КонецЕсли;
	
	Данные.Строки.Очистить();
	
	// Выборка данных.
	ОткрытыеСостояния = УправлениеЗаказами.СостоянияОткрытыхДокументов();
	ЗакрытыеСостояния = УправлениеЗаказами.СостоянияЗакрытыхДокументов(Истина);
	ИсключаемыеСостояния = Новый Массив;
	Если (Отбор = Неопределено) Тогда
		Открытые = Истина;
		Закрытые = Истина;
	Иначе
		
		Открытые = Истина;
		Закрытые = Истина;		
		
		//Открытые = (Отбор[Перечисления.СостоянияДокументов.Открытые] = Истина) Или (Отбор[Перечисления.СостоянияДокументов.Открытые] = Неопределено);
		//Закрытые = (Отбор[Перечисления.СостоянияДокументов.Закрытые] = Истина) Или (Отбор[Перечисления.СостоянияДокументов.Закрытые] = Неопределено);
		КвоОткрытых=0;
		КвоЗакрытых=0;
		
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Если (ЭлементОтбора.Значение = Ложь) Тогда
				ИсключаемыеСостояния.Добавить(ЭлементОтбора.Ключ);
			Иначе
				Если УправлениеЗаказами.ПроверитьСостояниеДокумента(ЭлементОтбора.Ключ,ОткрытыеСостояния) Тогда
					КвоОткрытых = КвоОткрытых+1;
				ИначеЕсли УправлениеЗаказами.ПроверитьСостояниеДокумента(ЭлементОтбора.Ключ,ЗакрытыеСостояния) Тогда	
					КвоЗакрытых = КвоЗакрытых+1;
				КонецЕсли;	
			КонецЕсли;							
		КонецЦикла;
		
		Открытые = НЕ (КвоОткрытых = 0);
		Закрытые = НЕ (КвоЗакрытых = 0);
		
	КонецЕсли;
	
	// -- 100% пустая выборка.
	Если (Не Открытые) И (Не Закрытые) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СписокИсключаемых = Неопределено) Тогда
		СписокИсключаемых = Новый Массив;
	КонецЕсли;
	
	Если (Очередь = Неопределено) Тогда
		Очередь = ПолучитьТаблицуОчереди();
	КонецЕсли;
	
	// Запрос.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущаяКассоваяДата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ПроизводственнаяОчередь.Очередь,
	                      |	ПроизводственнаяОчередь.КраткийСоставПроизводства
	                      |ПОМЕСТИТЬ ВременнаяПроизводственнаяОчередь
	                      |ИЗ
	                      |	&Очередь КАК ПроизводственнаяОчередь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СостояниеДокументов.Закрытый,
	                      |	СостояниеДокументов.Наряд,
	                      |	СостояниеДокументов.Экспедитор,
	                      |	СостояниеДокументов.Ссылка,
	                      |	СостояниеДокументов.Номер,
	                      |	СостояниеДокументов.Дата,
	                      |	СостояниеДокументов.ПометкаУдаления,
	                      |	СостояниеДокументов.Проведен,
	                      |	СостояниеДокументов.Состояние,
	                      |	СостояниеДокументов.СостояниеПорядок,
	                      |	СостояниеДокументов.Распечатан,
	                      |	СостояниеДокументов.Сотрудник,
	                      |	СостояниеДокументов.Ресторан,
	                      |	СостояниеДокументов.ТребуемаяДатаНачалаПериода,
	                      |	СостояниеДокументов.ТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.ТребуемаяДатаРазделенияПериода,
	                      |	СостояниеДокументов.ДатаНачалаПериода,
	                      |	СостояниеДокументов.ДатаОкончанияПериода,
	                      |	СостояниеДокументов.ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.КраткийСоставПроизводства,
	                      |	СостояниеДокументов.Контрагент,
	                      |	СостояниеДокументов.Оплата,
	                      |	СостояниеДокументов.СуммаДокументаБезСкидок,
	                      |	СостояниеДокументов.СуммаСкидкиДокумента,
	                      |	СостояниеДокументов.СуммаНаценкиДокумента,
	                      |	СостояниеДокументов.СуммаДокумента,
	                      |	СостояниеДокументов.СортировкаДата,
	                      |	СостояниеДокументов.Документ,
	                      |	СостояниеДокументов.Компьютер
	                      |ПОМЕСТИТЬ ВременнаяВыборкаНарядов
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		СостояниеДокументов.Закрытый КАК Закрытый,
	                      |		СостояниеДокументов.Документ КАК Наряд,
	                      |		СостояниеДокументов.Экспедитор КАК Экспедитор,
	                      |		NULL КАК Ссылка,
	                      |		СостояниеДокументов.Номер КАК Номер,
	                      |		СостояниеДокументов.Дата КАК Дата,
	                      |		ЛОЖЬ КАК ПометкаУдаления,
	                      |		ЛОЖЬ КАК Проведен,
	                      |		СостояниеДокументов.Состояние КАК Состояние,
	                      |		СостояниеДокументов.СостояниеПорядок КАК СостояниеПорядок,
	                      |		СостояниеДокументов.Распечатан КАК Распечатан,
	                      |		NULL КАК Сотрудник,
	                      |		СостояниеДокументов.Ресторан КАК Ресторан,
	                      |		NULL КАК ТребуемаяДатаНачалаПериода,
	                      |		NULL КАК ТребуемаяДатаОкончанияПериода,
	                      |		NULL КАК ТребуемаяДатаРазделенияПериода,
	                      |		NULL КАК ДатаНачалаПериода,
	                      |		NULL КАК ДатаОкончанияПериода,
	                      |		NULL КАК ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |		NULL КАК КраткийСоставПроизводства,
	                      |		NULL КАК Контрагент,
	                      |		NULL КАК Оплата,
	                      |		NULL КАК СуммаДокументаБезСкидок,
	                      |		NULL КАК СуммаСкидкиДокумента,
	                      |		NULL КАК СуммаНаценкиДокумента,
	                      |		NULL КАК СуммаДокумента,
	                      |		ВЫБОР
	                      |			КОГДА СостояниеСортировкиДокументов.СортировкаДата ЕСТЬ NULL 
	                      |				ТОГДА (РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СостояниеДокументов.ДатаНачалаПериода, МИНУТА) * 60 + СЕКУНДА(СостояниеДокументов.ДатаНачалаПериода)) * &СтепеньСортировки
	                      |			ИНАЧЕ СостояниеСортировкиДокументов.СортировкаДата
	                      |		КОНЕЦ КАК СортировкаДата,
	                      |		СостояниеДокументов.Документ КАК Документ,
	                      |		СостояниеДокументов.Компьютер КАК Компьютер
	                      |	ИЗ
	                      |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |			ЛОЖЬ КАК Закрытый,
	                      |			СостояниеДокументов.Документ КАК Наряд,
	                      |			СостояниеДокументов.Сотрудник КАК Экспедитор,
	                      |			NULL КАК Ссылка,
	                      |			СостояниеДокументов.Номер КАК Номер,
	                      |			СостояниеДокументов.Дата КАК Дата,
	                      |			ЛОЖЬ КАК ПометкаУдаления,
	                      |			ЛОЖЬ КАК Проведен,
	                      |			СостояниеДокументов.Состояние КАК Состояние,
	                      |			СостояниеДокументов.Состояние.Порядок КАК СостояниеПорядок,
	                      |			СостояниеДокументов.Распечатан КАК Распечатан,
	                      |			NULL КАК Сотрудник,
	                      |			СостояниеДокументов.Ресторан КАК Ресторан,
	                      |			NULL КАК ТребуемаяДатаНачалаПериода,
	                      |			NULL КАК ТребуемаяДатаОкончанияПериода,
	                      |			NULL КАК ТребуемаяДатаРазделенияПериода,
	                      |			СостояниеДокументов.ДатаНачалаПериода КАК ДатаНачалаПериода,
	                      |			СостояниеДокументов.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	                      |			NULL КАК ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |			NULL КАК КраткийСоставПроизводства,
	                      |			NULL КАК Контрагент,
	                      |			NULL КАК Оплата,
	                      |			NULL КАК СуммаДокументаБезСкидок,
	                      |			NULL КАК СуммаСкидкиДокумента,
	                      |			NULL КАК СуммаНаценкиДокумента,
	                      |			NULL КАК СуммаДокумента,
	                      |			СостояниеДокументов.Документ КАК Документ,
	                      |			СостояниеДокументов.Компьютер КАК Компьютер
	                      |		ИЗ
	                      |			РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
	                      |		ГДЕ
	                      |			&Открытые
	                      |			И (&НеПроверятьРесторан
	                      |					ИЛИ СостояниеДокументов.Ресторан = &Ресторан)
	                      |			И СостояниеДокументов.Состояние В(&ОткрытыеСостояния)
	                      |			И (НЕ СостояниеДокументов.Состояние В (&ИсключаемыеСостояния))
	                      |			И СостояниеДокументов.Документ ССЫЛКА Документ.НакладнаяНаДоставку
	                      |		
	                      |		ОБЪЕДИНИТЬ ВСЕ
	                      |		
	                      |		ВЫБРАТЬ
	                      |			ИСТИНА,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Ссылка,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Сотрудник,
	                      |			NULL,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Номер,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Дата,
	                      |			ЛОЖЬ,
	                      |			ЛОЖЬ,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Состояние,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Состояние.Порядок,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Распечатан,
	                      |			NULL,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Ресторан,
	                      |			NULL,
	                      |			NULL,
	                      |			NULL,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.ДатаНачалаПериода,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.ДатаОкончанияПериода,
	                      |			NULL,
	                      |			NULL,
	                      |			NULL,
	                      |			NULL,
	                      |			NULL,
	                      |			NULL,
	                      |			NULL,
	                      |			NULL,
	                      |			СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Ссылка,
	                      |			NULL
	                      |		ИЗ
	                      |			РегистрСведений.СостояниеДокументовОснованийНакладныхНаДоставку КАК СостояниеДокументовОснованийНакладныхНаДоставку
	                      |		ГДЕ
	                      |			&Открытые
	                      |			И (&НеПроверятьРесторан
	                      |					ИЛИ СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Ресторан = &Ресторан)
	                      |			И СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Состояние В(&ЗакрытыеСостояния)) КАК СостояниеДокументов
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСортировкиДокументов КАК СостояниеСортировкиДокументов
	                      |			ПО СостояниеДокументов.Документ = СостояниеСортировкиДокументов.Документ
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		ИСТИНА,
	                      |		НакладнаяНаДоставку.Ссылка,
	                      |		НакладнаяНаДоставку.Сотрудник,
	                      |		NULL,
	                      |		НакладнаяНаДоставку.Номер,
	                      |		НакладнаяНаДоставку.Дата,
	                      |		НакладнаяНаДоставку.ПометкаУдаления,
	                      |		НакладнаяНаДоставку.Проведен,
	                      |		НакладнаяНаДоставку.Состояние,
	                      |		НакладнаяНаДоставку.Состояние.Порядок,
	                      |		НакладнаяНаДоставку.Распечатан,
	                      |		NULL,
	                      |		НакладнаяНаДоставку.Ресторан,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		NULL,
	                      |		(РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), НакладнаяНаДоставку.ДатаНачалаПериода, МИНУТА) * 60 + СЕКУНДА(НакладнаяНаДоставку.ДатаНачалаПериода)) * &СтепеньСортировки,
	                      |		НакладнаяНаДоставку.Ссылка,
	                      |		NULL
	                      |	ИЗ
	                      |		Документ.НакладнаяНаДоставку КАК НакладнаяНаДоставку
	                      |	ГДЕ
	                      |		&Закрытые
	                      |		И (&НеПроверятьРесторан
	                      |				ИЛИ НакладнаяНаДоставку.Ресторан = &Ресторан)
	                      |		И НАЧАЛОПЕРИОДА(НакладнаяНаДоставку.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	                      |		И НакладнаяНаДоставку.Состояние В(&ЗакрытыеСостояния)
	                      |		И (НЕ НакладнаяНаДоставку.Состояние В (&ИсключаемыеСостояния))) КАК СостояниеДокументов
	                      |ГДЕ
	                      |	(НЕ СостояниеДокументов.Документ В (&СписокИсключаемых))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка КАК Наряд,
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка.Сотрудник КАК Экспедитор,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Ссылка КАК Ссылка,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Номер КАК Номер,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Дата КАК Дата,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ПометкаУдаления КАК ПометкаУдаления,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Проведен КАК Проведен,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Состояние КАК Состояние,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Распечатан КАК Распечатан,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Сотрудник КАК Сотрудник,
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка.Ресторан КАК Ресторан,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ТребуемаяДатаНачалаПериода КАК ТребуемаяДатаНачалаПериода,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Проведен)
	                      |			ТОГДА НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ТребуемаяДатаОкончанияПериода
	                      |		ИНАЧЕ НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ФактическаяДатаОкончанияПериода
	                      |	КОНЕЦ КАК ТребуемаяДатаОкончанияПериода,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Распечатан)
	                      |			ТОГДА НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ТребуемаяДатаРазделенияПериода
	                      |		ИНАЧЕ НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ФактическаяДатаНачалаПериода
	                      |	КОНЕЦ КАК ТребуемаяДатаРазделенияПериода,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ДатаНачалаПериода КАК ДатаНачалаПериода,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ФактическаяДатаНачалаПериода КАК ФактическаяДатаНачалаПериода,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ФактическаяДатаОкончанияПериода КАК ФактическаяДатаОкончанияПериода,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ СостояниеДокументов.КраткийСоставДокумента = """")
	                      |			ТОГДА СостояниеДокументов.КраткийСоставДокумента
	                      |		ИНАЧЕ &ПроизводственныеГруппыПустые
	                      |	КОНЕЦ КАК КраткийСоставДокумента,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ФиксированнаяТребуемаяДатаОкончанияПериода КАК ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Контрагент КАК Контрагент,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Оплата КАК Оплата,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.СуммаДокументаБезСкидок КАК СуммаДокументаБезСкидок,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.СуммаСкидкиДокумента КАК СуммаСкидкиДокумента,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.СуммаНаценкиДокумента КАК СуммаНаценкиДокумента,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.СуммаДокумента КАК СуммаДокумента,
	                      |	NULL КАК СортировкаДата,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ СостояниеДокументов.КраткийСоставПроизводства = """")
	                      |			ТОГДА СостояниеДокументов.КраткийСоставПроизводства
	                      |		ИНАЧЕ &ПроизводственныеГруппыПустые
	                      |	КОНЕЦ КАК КраткийСоставПроизводства,
	                      |	ВЫБОР
	                      |		КОГДА (НЕ ЕСТЬNULL(ПроизводственнаяОчередь.Очередь, СостояниеДокументов.КраткийСоставПроизводства) = """")
	                      |			ТОГДА ЕСТЬNULL(ПроизводственнаяОчередь.Очередь, СостояниеДокументов.КраткийСоставПроизводства)
	                      |		ИНАЧЕ &ПроизводственныеГруппыПустые
	                      |	КОНЕЦ КАК ПроизводственныеОчереди,
	                      |	СостояниеДокументов.МаршрутДоставки,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.АдресДоставкиПредставление КАК АдресДоставкиПредставление,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.АдресДоставкиУлица КАК АдресДоставкиУлица,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.АдресДоставкиДом КАК АдресДоставкиДом,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.АдресДоставкиКомментарий КАК АдресДоставкиКомментарий,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ТелефонПредставление КАК ТелефонПредставление,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ТелефонДополнительныйПредставление КАК ТелефонДополнительныйПредставление,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Ссылка КАК Документ,
	                      |	СостояниеДокументов.Компьютер,
	                      |	СостояниеДокументов.Интернет
	                      |ПОМЕСТИТЬ ВременнаяВыборкаДокументов
	                      |ИЗ
	                      |	Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
	                      |		ПО НакладнаяНаДоставкуДокументыОснования.ДокументОснование = СостояниеДокументов.Документ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПроизводственнаяОчередь КАК ПроизводственнаяОчередь
	                      |		ПО НакладнаяНаДоставкуДокументыОснования.ДокументОснование.КраткийСоставПроизводства = ПроизводственнаяОчередь.КраткийСоставПроизводства
	                      |ГДЕ
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВременнаяВыборкаНарядов.Наряд
	                      |			ИЗ
	                      |				ВременнаяВыборкаНарядов)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВременнаяВыборкаНарядов.Закрытый КАК Закрытый,
	                      |	ЛОЖЬ КАК ПодчиненныйДокумент,
	                      |	ВременнаяВыборкаНарядов.Наряд КАК Наряд,
	                      |	ВременнаяВыборкаНарядов.Экспедитор КАК Экспедитор,
	                      |	ВременнаяВыборкаНарядов.Ссылка КАК Ссылка,
	                      |	ВременнаяВыборкаНарядов.Номер КАК Номер,
	                      |	ВременнаяВыборкаНарядов.Дата КАК Дата,
	                      |	ВременнаяВыборкаНарядов.ПометкаУдаления,
	                      |	ВременнаяВыборкаНарядов.Проведен КАК Проведен,
	                      |	ВременнаяВыборкаНарядов.Состояние КАК Состояние,
	                      |	ВременнаяВыборкаНарядов.СостояниеПорядок КАК СостояниеПорядок,
	                      |	ВременнаяВыборкаНарядов.Распечатан,
	                      |	ВременнаяВыборкаНарядов.Сотрудник,
	                      |	ВременнаяВыборкаНарядов.Ресторан,
	                      |	ВременнаяВыборкаНарядов.ТребуемаяДатаНачалаПериода,
	                      |	ВременнаяВыборкаНарядов.ТребуемаяДатаОкончанияПериода,
	                      |	ВременнаяВыборкаНарядов.ТребуемаяДатаРазделенияПериода,
	                      |	ВременнаяВыборкаНарядов.ДатаНачалаПериода,
	                      |	ВременнаяВыборкаНарядов.ДатаОкончанияПериода,
	                      |	NULL КАК ФактическаяДатаНачалаПериода,
	                      |	NULL КАК ФактическаяДатаОкончанияПериода,
	                      |	ВременнаяВыборкаНарядов.ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |	ВременнаяВыборкаНарядов.КраткийСоставПроизводства,
	                      |	NULL КАК ПроизводственныеОчереди,
	                      |	ВременнаяВыборкаНарядов.Контрагент,
	                      |	ВременнаяВыборкаНарядов.Оплата,
	                      |	ВременнаяВыборкаНарядов.СуммаДокументаБезСкидок,
	                      |	ВременнаяВыборкаНарядов.СуммаСкидкиДокумента,
	                      |	ВременнаяВыборкаНарядов.СуммаНаценкиДокумента,
	                      |	ВременнаяВыборкаНарядов.СуммаДокумента,
	                      |	ВременнаяВыборкаНарядов.СортировкаДата КАК СортировкаДата,
	                      |	NULL КАК КраткийСоставДокумента,
	                      |	NULL КАК МаршрутДоставки,
	                      |	NULL КАК АдресДоставкиПредставление,
	                      |	NULL КАК АдресДоставкиУлица,
	                      |	NULL КАК АдресДоставкиДом,
	                      |	NULL КАК АдресДоставкиКомментарий,
	                      |	NULL КАК ТелефонПредставление,
	                      |	NULL КАК ТелефонДополнительныйПредставление,
	                      |	ВременнаяВыборкаНарядов.Компьютер,
	                      |	NULL КАК Интернет
	                      |ИЗ
	                      |	ВременнаяВыборкаНарядов КАК ВременнаяВыборкаНарядов
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	NULL,
	                      |	ИСТИНА,
	                      |	СостояниеДокументов.Наряд,
	                      |	NULL,
	                      |	СостояниеДокументов.Ссылка,
	                      |	СостояниеДокументов.Номер,
	                      |	СостояниеДокументов.Дата,
	                      |	СостояниеДокументов.ПометкаУдаления,
	                      |	СостояниеДокументов.Проведен,
	                      |	СостояниеДокументов.Состояние,
	                      |	NULL,
	                      |	СостояниеДокументов.Распечатан,
	                      |	СостояниеДокументов.Сотрудник,
	                      |	СостояниеДокументов.Ресторан,
	                      |	СостояниеДокументов.ТребуемаяДатаНачалаПериода,
	                      |	СостояниеДокументов.ТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.ТребуемаяДатаРазделенияПериода,
	                      |	СостояниеДокументов.ДатаНачалаПериода,
	                      |	СостояниеДокументов.ДатаОкончанияПериода,
	                      |	СостояниеДокументов.ФактическаяДатаНачалаПериода,
	                      |	СостояниеДокументов.ФактическаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.ФиксированнаяТребуемаяДатаОкончанияПериода,
	                      |	СостояниеДокументов.КраткийСоставПроизводства,
	                      |	СостояниеДокументов.ПроизводственныеОчереди,
	                      |	СостояниеДокументов.Контрагент,
	                      |	СостояниеДокументов.Оплата,
	                      |	СостояниеДокументов.СуммаДокументаБезСкидок,
	                      |	СостояниеДокументов.СуммаСкидкиДокумента,
	                      |	СостояниеДокументов.СуммаНаценкиДокумента,
	                      |	СостояниеДокументов.СуммаДокумента,
	                      |	СостояниеДокументов.СортировкаДата,
	                      |	СостояниеДокументов.КраткийСоставДокумента,
	                      |	СостояниеДокументов.МаршрутДоставки,
	                      |	СостояниеДокументов.АдресДоставкиПредставление,
	                      |	СостояниеДокументов.АдресДоставкиУлица,
	                      |	СостояниеДокументов.АдресДоставкиДом,
	                      |	СостояниеДокументов.АдресДоставкиКомментарий,
	                      |	СостояниеДокументов.ТелефонПредставление,
	                      |	СостояниеДокументов.ТелефонДополнительныйПредставление,
	                      |	СостояниеДокументов.Компьютер,
	                      |	СостояниеДокументов.Интернет
	                      |ИЗ
	                      |	ВременнаяВыборкаДокументов КАК СостояниеДокументов
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПодчиненныйДокумент,
	                      |	Закрытый,
	                      |	СостояниеПорядок,
	                      //|	СортировкаДата");
						  //Костенюк Александр-Старт 23.10.2012
						  |	СортировкаДата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ВременнаяПроизводственнаяОчередь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ВременнаяВыборкаНарядов
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ВременнаяВыборкаДокументов");
						  //Костенюк Александр-Финиш 23.10.2012
	Запрос.УстановитьПараметр("Открытые", Открытые);
	Запрос.УстановитьПараметр("Закрытые", Закрытые);
	Запрос.УстановитьПараметр("ОткрытыеСостояния", ОткрытыеСостояния);
	Запрос.УстановитьПараметр("ЗакрытыеСостояния", ЗакрытыеСостояния);
	Запрос.УстановитьПараметр("ИсключаемыеСостояния", ИсключаемыеСостояния);
	Запрос.УстановитьПараметр("СписокИсключаемых", СписокИсключаемых);
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Запрос.УстановитьПараметр("НеПроверятьРесторан", ТекущийРесторан.Пустая());
	Запрос.УстановитьПараметр("Дата", ТекущаяКассоваяДата);
	Запрос.УстановитьПараметр("СтепеньСортировки", УправлениеЗаказами.ПолучитьЗначениеСтепениСортировки());
	Запрос.УстановитьПараметр("ПроизводственныеГруппыПустые", мПроизводственныеГруппыПустые);
	Запрос.УстановитьПараметр("Очередь", Очередь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ТекущийРесторан.Пустая() Тогда
		Обязательные = "Ресторан,Наряд";
	Иначе
		Обязательные = "Наряд"
	КонецЕсли;
	
	СписГруппировок = ПолучитьСтрокуГруппировки(Строка(Обязательные), Группировка, Истина, ТабличноеПоле);
	Если СписГруппировок<>"" Тогда 
		лТекстШапки = НРег(СтрЗаменить(СписГруппировок,",","\"))+"\"+"документ";
	Иначе
		лТекстШапки = "Документ";
	КонецЕсли;
	ТабличноеПоле.Колонки.Ссылка.ТекстШапки = ВРег(Лев(лТекстШапки,1))+Прав(лТекстШапки,СтрДлина(лТекстШапки)-1);	
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Перенос данных в табличное поле.
	ОбщегоНазначения.ТаблицуЗначенийРазделитьПоОтбору(РезультатЗапроса.Выгрузить(), Новый Структура("Ссылка", Null), ДополнительнаяТаблица, ОсновнаяТаблица);
	
    ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначенийСГруппировкой(ОсновнаяТаблица, ПолучитьСтрокуГруппировки(Строка(Обязательные), Группировка), "Ссылка", Данные, "Наряд,Состояние");
	
	Для Каждого СтрокаТаблицы Из ДополнительнаяТаблица Цикл
		
		СтрокаДереваЗначений = Данные.Строки.Найти(СтрокаТаблицы.Наряд, "Наряд", Истина);
		
		Если (СтрокаДереваЗначений = Неопределено) Тогда
			
			Если ТекущийРесторан.Пустая() Тогда
				СтрокаДереваЗначений = Данные.Строки.Найти(СтрокаТаблицы.Ресторан, "Ресторан", Истина);
				Если (СтрокаДереваЗначений = Неопределено) Тогда
					СтрокаДереваЗначений = Данные.Строки.Добавить();
					СтрокаДереваЗначений.Ресторан = СтрокаТаблицы.Ресторан;
					СтрокаДереваЗначений.Ссылка = СтрокаДереваЗначений.Ресторан;
				КонецЕсли;
				СтрокаДереваЗначений = СтрокаДереваЗначений.Строки.Добавить();
			Иначе
				СтрокаДереваЗначений = Данные.Строки.Добавить();		
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого Колонка Из ДополнительнаяТаблица.Колонки Цикл
			СтрокаДереваЗначений[Колонка.Имя] = СтрокаТаблицы[Колонка.Имя]
		КонецЦикла;
		СтрокаДереваЗначений.Ссылка = СтрокаДереваЗначений.Наряд;
		
	КонецЦикла;
	
	// Сортировка.
	Если (Не Сортировка = Неопределено) Тогда
		Для Каждого ЭлементСписка Из Сортировка Цикл
			Если ЭлементСписка.Пометка Тогда
				СтрокаСортировки = Строка(СтрокаСортировки) + ЭлементСписка.Значение + ",";
			КонецЕсли;
		КонецЦикла;
		СтрокаСортировки = СтрЗаменить(СтрокаСортировки, "Состояние", "СостояниеПорядок");
	КонецЕсли;
	Данные.Строки.Сортировать("Закрытый," + Строка(СтрокаСортировки) + "СортировкаДата,Дата,Номер", Истина);
	
	// Текущее состояние (II).
	ВосстановитьСостояниеДерева(ТабличноеПоле, Данные, , СостояниеДерева);
	
	// Текущая позиция (II).
	Если (Не ТекущаяПозиция = Неопределено) Тогда
		ТекущаяСтрока = Данные.Строки.Найти(ТекущаяПозиция, "Ссылка", Истина);
	КонецЕсли;
	Если (Не ТекущаяСтрока = Неопределено) И (Не ТекущаяСсылка = Неопределено) Тогда
		ТекущаяСтрокаСсылки = ТекущаяСтрока.Строки.Найти(ТекущаяСсылка, "Ссылка", Истина);
		Если (Не ТекущаяСтрокаСсылки = Неопределено) Тогда
			ТекущаяСтрока = ТекущаяСтрокаСсылки;
		КонецЕсли;
	КонецЕсли;
	Если (Не ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли; 	
	
КонецПроцедуры // ТаблицаНарядовДоставкиПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля нарядов доставки.
//
Процедура ТаблицаНарядовДоставкиВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, СписокГруппировок) Экспорт

	Перем Картинка;
	
	ТипСсылки = ТипЗнч(ДанныеСтроки.Ссылка);
	
	//Для Каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
	//	Ячейка.ТолькоПросмотр = Истина;
	//КонецЦикла;
	
	// Оформление строки.
	Если мОписаниеТповДокументов.СодержитТип(ТипСсылки) Тогда
		FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ОформлениеСтроки.Шрифт, ОформлениеСтроки.ЦветТекста, ОформлениеСтроки.ЦветФона, Картинка);
	КонецЕсли;
	
	// Ссылка.
	Если Элемент.Колонки.Ссылка.Видимость Тогда
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДанныеСтроки.Ссылка) Тогда
			ОформлениеСтроки.Ячейки.Ссылка.Текст = "Не указанно";
			ОформлениеСтроки.Ячейки.Ссылка.УстановитьКартинку(БиблиотекаКартинок.ГруппаСправочника);
		Иначе
			Если мОписаниеТповДокументов.СодержитТип(ТипСсылки) Тогда
				ОформлениеСтроки.Ячейки.Ссылка.Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Ссылка.Номер);
				Если (ТипСсылки = мТипДокументаНакладнаяНаДоставку) Тогда
					ОформлениеСтроки.Ячейки.Ссылка.УстановитьКартинку(БиблиотекаКартинок.ЗначокЖурнал16);
				Иначе
					ОформлениеСтроки.Ячейки.Ссылка.УстановитьКартинку(Картинка);
				КонецЕсли;
			Иначе
				Если (ДанныеСтроки.Ссылка = мПроизводственныеГруппыПустые) Тогда
					ОформлениеСтроки.Ячейки.Ссылка.Текст = мПроизводственныеГруппыПустыеПредставление;
				КонецЕсли;
				ОформлениеСтроки.Ячейки.Ссылка.УстановитьКартинку(БиблиотекаКартинок.ГруппаСправочника);
			КонецЕсли;
		КонецЕсли;		
		//Ковтун А. 12/05/2010 сделано по дыбильному, но времени нет 
		Если Элемент.Данные="ТабличноеПолеНарядовДоставки" Тогда			
			Если ПолучитьСерверFrontOffice().ТекущийРесторан().Пустая() Тогда
				КорневыхЭлементовТабПоля = 2;//Обязательные = "Ресторан,Наряд";
			Иначе
				КорневыхЭлементовТабПоля = 1;//Обязательные = "Наряд"
			КонецЕсли;			
		Иначе
			Если ПолучитьСерверFrontOffice().ТекущийРесторан().Пустая() Тогда
				КорневыхЭлементовТабПоля = 1;//Обязательные = "Ресторан";
			Иначе
				КорневыхЭлементовТабПоля = 0;
			КонецЕсли;							
		КонецЕсли;
		Если ТипСсылки=Тип("Булево") Тогда			
			СписокПоУровню = Новый СписокЗначений;
			Для каждого ЭлСпис ИЗ СписокГруппировок Цикл
				Если ЭлСпис.Пометка Тогда
				 СписокПоУровню.Добавить(ЭлСпис.Значение, ЭлСпис.Представление, ЭлСпис.Пометка, ЭлСпис.Картинка); 
				КонецЕсли; 
			КонецЦикла;
			
			Если НЕ(ДанныеСтроки.Распечатан = Неопределено) Тогда
				Если ДанныеСтроки.Уровень()-КорневыхЭлементовТабПоля=СписокПоУровню.Индекс(СписокПоУровню.НайтиПоЗначению("Распечатан")) Тогда
					ОформлениеСтроки.Ячейки.Ссылка.Текст = ?(ДанныеСтроки.Распечатан,"Распечатан","Не распечатан");		
				КонецЕсли;
			КонецЕсли;
			Если НЕ(Элемент.Колонки.Найти("Распределен")=Неопределено) Тогда								
				Если НЕ(ДанныеСтроки.Распределен = Неопределено) Тогда	
					Если ДанныеСтроки.Уровень()-КорневыхЭлементовТабПоля=СписокПоУровню.Индекс(СписокПоУровню.НайтиПоЗначению("Распределен")) Тогда 
						ОформлениеСтроки.Ячейки.Ссылка.Текст = ?(ДанныеСтроки.Распределен,"Распределен","Не распределен");
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			Если НЕ(Элемент.Колонки.Найти("РаспределенИРаспечатан")=Неопределено) Тогда
				Если НЕ(ДанныеСтроки.РаспределенИРаспечатан = Неопределено) Тогда
					Если ДанныеСтроки.Уровень()-КорневыхЭлементовТабПоля=СписокПоУровню.Индекс(СписокПоУровню.НайтиПоЗначению("РаспределенИРаспечатан")) Тогда 
						ОформлениеСтроки.Ячейки.Ссылка.Текст = ?(ДанныеСтроки.РаспределенИРаспечатан,"Распределен и распечатан","Не распределен и не распечатан");
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			Если НЕ(Элемент.Колонки.Найти("ФиксированнаяТребуемаяДатаОкончанияПериода")=Неопределено) Тогда
				Если НЕ(ДанныеСтроки.ФиксированнаяТребуемаяДатаОкончанияПериода = Неопределено) Тогда
					Если ДанныеСтроки.Уровень()-КорневыхЭлементовТабПоля=СписокПоУровню.Индекс(СписокПоУровню.НайтиПоЗначению("ФиксированнаяТребуемаяДатаОкончанияПериода")) Тогда 
						ОформлениеСтроки.Ячейки.Ссылка.Текст = ?(ДанныеСтроки.ФиксированнаяТребуемаяДатаОкончанияПериода,"На указанное время","На ближайшее время");
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;				
		КонецЕсли;	
		
	КонецЕсли;
	       
	// Номер. 
	Если Элемент.Колонки.Номер.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Номер) Тогда
			ОформлениеСтроки.Ячейки.Номер.Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер);
		КонецЕсли;
	КонецЕсли;
	
	// Дата. 
	Если Элемент.Колонки.ТребуемаяДатаНачалаПериода.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Дата) Тогда
			ОформлениеСтроки.Ячейки.Дата.Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
		КонецЕсли;
	КонецЕсли;
	
	// Наряд. 
	Если (Не Элемент.Колонки.Найти("Наряд") = Неопределено) И Элемент.Колонки.Наряд.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Наряд) Тогда
			ОформлениеСтроки.Ячейки.Наряд.Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Наряд.Номер);
		КонецЕсли;
	КонецЕсли;
	
	// Экспедитор. 
	Если (Не Элемент.Колонки.Найти("Экспедитор") = Неопределено) И Элемент.Колонки.Экспедитор.Видимость Тогда
		ОформлениеСтроки.Ячейки.Экспедитор.ТолькоПросмотр = Элемент.Колонки.Экспедитор.ТолькоПросмотр Или (Не ТипСсылки = мТипДокументаНакладнаяНаДоставку);
	КонецЕсли;
	
	// ДатаНачалаПериода. 
	Если Элемент.Колонки.ДатаНачалаПериода.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ДатаНачалаПериода) Тогда
			ОформлениеСтроки.Ячейки.ДатаНачалаПериода.Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ДатаНачалаПериода);
		КонецЕсли;
	КонецЕсли;
	
	// ДатаОкончанияПериода. 
	Если Элемент.Колонки.ДатаОкончанияПериода.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончанияПериода) Тогда
			ОформлениеСтроки.Ячейки.ДатаОкончанияПериода.Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ДатаОкончанияПериода);
		КонецЕсли;
	КонецЕсли;
	
	// Интернет.
	Если Элемент.Колонки.Интернет.Видимость Тогда
		ОформлениеСтроки.Ячейки.Интернет.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.Интернет.ОтображатьФлажок = Ложь;
		Если ДанныеСтроки.Интернет = Истина Тогда
			ОформлениеСтроки.Ячейки.Интернет.УстановитьКартинку(БиблиотекаКартинок.ЗначокИнтернет16);
		КонецЕсли;
	КонецЕсли;
	
	// ФактическаяДатаНачалаПериода. 
	Если Элемент.Колонки.ФактическаяДатаНачалаПериода.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ФактическаяДатаНачалаПериода) Тогда
			ОформлениеСтроки.Ячейки.ФактическаяДатаНачалаПериода.Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ФактическаяДатаНачалаПериода);
		КонецЕсли;
	КонецЕсли;
	
	// ТребуемаяДатаНачалаПериода. 
	Если Элемент.Колонки.ТребуемаяДатаНачалаПериода.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ТребуемаяДатаНачалаПериода) Тогда
			ОформлениеСтроки.Ячейки.ТребуемаяДатаНачалаПериода.Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ТребуемаяДатаНачалаПериода);
		КонецЕсли;
	КонецЕсли;
	
	// ТребуемаяДатаРазделенияПериода. 
	Если Элемент.Колонки.ТребуемаяДатаРазделенияПериода.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ТребуемаяДатаРазделенияПериода) Тогда
			ОформлениеСтроки.Ячейки.ТребуемаяДатаРазделенияПериода.Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ТребуемаяДатаРазделенияПериода);
		КонецЕсли;
	КонецЕсли;
	
	// ТребуемаяДатаОкончанияПериода. 
	Если Элемент.Колонки.ТребуемаяДатаОкончанияПериода.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ТребуемаяДатаОкончанияПериода) Тогда
			ОформлениеСтроки.Ячейки.ТребуемаяДатаОкончанияПериода.Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ТребуемаяДатаОкончанияПериода);
		КонецЕсли;
	КонецЕсли;
	
	// КраткийСоставДокумента. 
	Если Элемент.Колонки.КраткийСоставДокумента.Видимость Тогда
		Если (ДанныеСтроки.КраткийСоставДокумента = мПроизводственныеГруппыПустые) Тогда
			ОформлениеСтроки.Ячейки.КраткийСоставДокумента.Текст = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// КраткийСоставПроизводства. 
	Если Элемент.Колонки.КраткийСоставПроизводства.Видимость Тогда
		Если (ДанныеСтроки.КраткийСоставПроизводства = мПроизводственныеГруппыПустые) Тогда
			ОформлениеСтроки.Ячейки.КраткийСоставПроизводства.Текст = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// ПроизводственныеОчереди. 
	Если Элемент.Колонки.ПроизводственныеОчереди.Видимость Тогда
		Если (ДанныеСтроки.ПроизводственныеОчереди = мПроизводственныеГруппыПустые) Тогда
			ОформлениеСтроки.Ячейки.ПроизводственныеОчереди.Текст = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНарядовДоставкиВывестиСтроку()

// Функция получения текущей позиции (Наряда на доставку) в табличном поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиПолучитьПозицию(ТабличноеПоле, Данные, Знач ТекущиеДанные = Null) Экспорт
	
	// Текущие данные.
	Если (ТекущиеДанные = Null) Тогда
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	КонецЕсли;
	
	// Поиск позиции.
	Позиция = ТекущиеДанные;
	Пока (Не Позиция = Неопределено) И (Не ТипЗнч(Позиция.Ссылка) = мТипДокументаНакладнаяНаДоставку) Цикл
		Позиция = Позиция.Родитель;
	КонецЦикла;
	
	// Результат.
	Если (Не Позиция = Неопределено) Тогда
		Возврат Позиция.Наряд;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ТаблицаНарядовДоставкиПолучитьПозицию()

// Функция получения текущих строк (Документов оснований текущей позиции) в табличном поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиПолучитьСтроки(ТабличноеПоле, Данные, Знач ТекущиеДанные = Null, ТолькоДопустимые = Ложь, ИсключаяУдаленные = Ложь) Экспорт
	                                                                                                                   
	// Текущие данные.
	Если (ТекущиеДанные = Null) Тогда
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	КонецЕсли;
	
	// Поиск строк.
	Если (Не ТекущиеДанные = Неопределено) Тогда
		МассивСтрок = Новый Массив;	 
		
		Если (ТипЗнч(ТекущиеДанные.Ссылка) = мТипДокументаРеализацияТоваровУслуг) Тогда
			// -- Добавление данных в список строк.
			Если ((Не ИсключаяУдаленные) Или (Не ТекущиеДанные.ПометкаУдаления)) И ((Не ТолькоДопустимые) Или (Не (ТекущиеДанные.Распечатан Или ТекущиеДанные.Проведен))) Тогда
				МассивСтрок.Добавить(ТекущиеДанные.Ссылка);
			КонецЕсли;
		Иначе
			// -- Нисходящий обход дерева.
			СписокПодчиненных = Новый СписокЗначений();
			СписокПодчиненных.Добавить(ТекущиеДанные);

			Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
				СтрокаВладелец = СтрокаВладелец.Значение;	// Наепка - друг чекиста ;)
				
				Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
					// ---- Добавление данных в список строк.
					Если (ТипЗнч(СтрокаВладельца.Ссылка) = мТипДокументаРеализацияТоваровУслуг) Тогда
						Если ((Не ИсключаяУдаленные) Или (Не СтрокаВладельца.ПометкаУдаления)) И ((Не ТолькоДопустимые) Или (Не (СтрокаВладельца.Распечатан Или СтрокаВладельца.Проведен))) Тогда
							МассивСтрок.Добавить(СтрокаВладельца.Ссылка);
						КонецЕсли;
					КонецЕсли;
							
					Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
						СписокПодчиненных.Добавить(СтрокаВладельца);
					КонецЕсли;
				КонецЦикла;
			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Результат.
	Возврат МассивСтрок;
	
КонецФункции // ТаблицаНарядовДоставкиПолучитьСтроки()

// Функция получения состояния текущей позиции в табличном поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиПолучитьСостояние(ТабличноеПоле, Данные, Знач ТекущиеДанные = Null) Экспорт
	
	// Текущие данные.
	Если (ТекущиеДанные = Null) Тогда
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	Иначе
		Если мОписаниеТповДокументов.СодержитТип(ТипЗнч(ТекущиеДанные)) Тогда
			ТекущиеДанные = Данные.Строки.Найти(ТекущиеДанные, "Ссылка", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Результат.
	Если (ТекущиеДанные = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекущиеДанные.Состояние;
	
КонецФункции // ТаблицаНарядовДоставкиПолучитьСостояние()

// Функция добавления новой позиции или строк в табличное поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиДобавитьПозицию(ТабличноеПоле, Данные, Позиция = Неопределено, Строки = Неопределено, Сотрудник = Неопределено, Автоматический = Ложь) Экспорт
	
	// Дополнительно обрабатываемые документы.
	Если (Строки = Неопределено) Тогда
		МассивДополнительныхДокументов = Новый Массив;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	СостояниеДокументовОснованийНакладныхНаДоставку.Документ КАК Документ
		                      |ИЗ
		                      |	РегистрСведений.СостояниеДокументовОснованийНакладныхНаДоставку КАК СостояниеДокументовОснованийНакладныхНаДоставку
		                      |ГДЕ
		                      |	(НЕ СостояниеДокументовОснованийНакладныхНаДоставку.Документ = &Документ)
		                      |	И СостояниеДокументовОснованийНакладныхНаДоставку.ДокументОснование В(&ДокументыОснования)
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	СостояниеДокументовОснованийНакладныхНаДоставку.Документ");
		Если (Позиция = Неопределено) Тогда
			Запрос.УстановитьПараметр("Документ", Неопределено);							  
		Иначе
			Запрос.УстановитьПараметр("Документ", Позиция);							  
		КонецЕсли;
		Запрос.УстановитьПараметр("ДокументыОснования", Строки);							  
		МассивДополнительныхДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	КонецЕсли;
	
	Попытка
		Если Не ПолучитьСерверFrontOffice().НачатьТранзакциюЗаписи() Тогда // НачатьТранзакцию()
			Возврат Ложь;
		КонецЕсли;
		
		// Получение документов объектов дополнительно обрабатываемых документов.
		// Формат Эксперт - SD  31.08.2011 - перенос ядра 
		//ПолучитьСерверFrontOffice().ДокументОткрыть(МассивДополнительныхДокументов);
	    РаботаСДиалогами.ДокументОткрыть(МассивДополнительныхДокументов, Неопределено);
		
		// Получение и блокирование объекта.
		Если (Позиция = Неопределено) Тогда
			ДокументОбъект = Документы.НакладнаяНаДоставку.ПустаяСсылка(); Позиционировать = Истина;
		Иначе
			ДокументОбъект = Позиция; Позиционировать = Ложь;
		КонецЕсли;
		
		// Формат Эксперт - SD  31.08.2011 - перенос ядра 
		//ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект);
		РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, Неопределено);
		
		// Создание объекта.
		Если (Позиция = Неопределено) Тогда
			ДокументОбъект.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
			ДокументОбъект.Ресторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
			ДокументОбъект.Сотрудник = Сотрудник;
			ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"), Новый Структура("Сотрудник"));
		КонецЕсли;
		
		// Строки.
		Если (Не Строки = Неопределено) Тогда
			Для Каждого ДокументОснование Из Строки Цикл
				СтрокаТабличнойЧасти = ДокументОбъект.ДокументыОснования.Найти(ДокументОснование, "ДокументОснование");
				Если (Не СтрокаТабличнойЧасти = Неопределено) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТабличнойЧасти = ДокументОбъект.ДокументыОснования.Добавить();
				СтрокаТабличнойЧасти.ДокументОснование = ДокументОснование;
			КонецЦикла;
		КонецЕсли;
		
		// Дополнительно обрабатываемые документы.
		Для Каждого ДополнительныйДокументовОбъект Из МассивДополнительныхДокументов Цикл
			Для Каждого ДокументОснование Из Строки Цикл
				СтрокаТабличнойЧасти = ДополнительныйДокументовОбъект.ДокументыОснования.Найти(ДокументОснование, "ДокументОснование");
				Если (СтрокаТабличнойЧасти = Неопределено) Тогда
					Продолжить;
				КонецЕсли;
				ДополнительныйДокументовОбъект.ДокументыОснования.Удалить(СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЦикла;

		// Запись.
		МассивДополнительныхДокументов.Добавить(ДокументОбъект); ДокументОбъект.ДополнительныеСвойства.Вставить("Автоматический", Автоматический);
		//Формат Эксперт - SD 16.08.2011 20:23:31 - перенос ядра
		//ПолучитьСерверFrontOffice().ДокументЗаписать(МассивДополнительныхДокументов);
		РаботаСДиалогами.ДокументЗаписать(МассивДополнительныхДокументов, Неопределено);
		
		ПолучитьСерверFrontOffice().ЗафиксироватьТранзакциюЗаписи(); // ЗафиксироватьТранзакцию()
		
		//Формат Эксперт - SD 16.08.2011 20:23:31 - перенос ядра
		//ПолучитьСерверFrontOffice().ДокументЗакрыть(МассивДополнительныхДокументов);
		РаботаСДиалогами.ДокументЗакрыть(МассивДополнительныхДокументов, Неопределено);
		
		Если Позиционировать Тогда
			Позиция = ДокументОбъект.Ссылка;	
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		ПолучитьСерверFrontOffice().ОтменитьТранзакциюЗаписи(); // ОтменитьТранзакцию()
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	 
	// Предупреждение.
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОписаниеОшибки = " Причина неопределенна";
	КонецЕсли;
	FrontOffice.СообщитьОбОшибке("Невозможно выполнить операциию." + ОписаниеОшибки + ".");
	
	Возврат Ложь;
	
КонецФункции // ТаблицаНарядовДоставкиДобавитьПозицию()

// Функция изменения позиции в табличном поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиИзменитьПозицию(ТабличноеПоле, Данные, Позиция = Неопределено, Сотрудник) Экспорт
	
	// Позиция.
	Если (Позиция = Неопределено) Тогда
		Позиция = ТаблицаНарядовДоставкиПолучитьПозицию(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Позиция = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Получение и блокирование объекта.
	ДокументОбъект = Позиция;
	//Формат Эксперт - SD 16.08.2011 21:29:27 - перенос ядра
	//Если Не ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект) Тогда
	Если Не РаботаСДиалогами.ДокументОткрыть(ДокументОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Изменение.
	ДокументОбъект.Сотрудник = Сотрудник;
	
	// Запись объекта.
	//Формат Эксперт - SD 16.08.2011 21:27:57 - перенос ядра
	//Возврат ПолучитьСерверFrontOffice().ДокументЗаписать(ДокументОбъект) И 
	//		ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект);
	Возврат (РаботаСДиалогами.ДокументЗаписать(ДокументОбъект, Неопределено) И 
			РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено));
	
КонецФункции // ТаблицаНарядовДоставкиДобавитьПозицию()

// Функция поиска позицию смещения позиции в табличном поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиНайтиПозициюСмещения(ТабличноеПоле, Данные, Позиция = Неопределено, Смещение) Экспорт
	
	// Позиция.
	Если (Позиция = Неопределено) Тогда
		Позиция = ТаблицаНарядовДоставкиПолучитьПозицию(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Позиция = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Соседнии позиции.
	СтрокаПозиции = Данные.Строки.Найти(Позиция, "Ссылка", Истина);
	Если (СтрокаПозиции = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	Если (СтрокаПозиции.Родитель = Неопределено) Тогда
		СтрокиДанных = Данные.Строки;
	Иначе
		СтрокиДанных = СтрокаПозиции.Родитель.Строки;
	КонецЕсли;
	
	// -- Текущая.
	Индекс = СтрокиДанных.Индекс(СтрокаПозиции); ИндексПозиции = Индекс; ИндексПредидущей = Индекс;
	СотоянияОткрытыхДокументов = УправлениеЗаказами.СостоянияОткрытыхДокументов();
	
	// -- Предидущая.
	Индекс = Индекс + Смещение; Если (Смещение < 0) Тогда Смещение = -1; Иначе Смещение = +1 КонецЕсли;
	Пока (Индекс >= 0) И (Индекс <= СтрокиДанных.Количество() - 1) Цикл
		Если УправлениеЗаказами.ПроверитьСостояниеДокумента(СтрокиДанных[Индекс].Состояние, СотоянияОткрытыхДокументов) Тогда
			ИндексПредидущей = Индекс;
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Смещение;
	КонецЦикла;
		
	Возврат (Не ИндексПозиции = ИндексПредидущей);
	
КонецФункции // ТаблицаНарядовДоставкиНайтиПозициюСмещения()

// Функция смещения позиции в табличном поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиСместитьПозицию(ТабличноеПоле, Данные, Позиция = Неопределено, Смещение) Экспорт
	
	// Позиция.
	Если (Позиция = Неопределено) Тогда
		Позиция = ТаблицаНарядовДоставкиПолучитьПозицию(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Позиция = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(Позиция);
	
	// Соседнии позиции.
	СтрокаПозиции = Данные.Строки.Найти(Позиция, "Ссылка", Истина);
	Если (СтрокаПозиции = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	Если (СтрокаПозиции.Родитель = Неопределено) Тогда
		СтрокиДанных = Данные.Строки;
	Иначе
		СтрокиДанных = СтрокаПозиции.Родитель.Строки;
	КонецЕсли;
	
	// -- Текущая.
	Индекс = СтрокиДанных.Индекс(СтрокаПозиции); ИндексПозиции = Индекс; ИндексПредидущей = Индекс; ИндексСледующей = Индекс;
	СотоянияОткрытыхДокументов = УправлениеЗаказами.СостоянияОткрытыхДокументов();
	
	// -- Предидущая.
	Индекс = Индекс + Смещение; Если (Смещение < 0) Тогда Смещение = -1; Иначе Смещение = +1 КонецЕсли;
	Пока (Индекс >= 0) И (Индекс <= СтрокиДанных.Количество() - 1) Цикл
		Если УправлениеЗаказами.ПроверитьСостояниеДокумента(СтрокиДанных[Индекс].Состояние, СотоянияОткрытыхДокументов) Тогда
			ИндексПредидущей = Индекс; ИндексСледующей = Индекс;
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Смещение;
	КонецЦикла;
	Если (ИндексПозиции = ИндексПредидущей) Тогда
	    Возврат Ложь;
	КонецЕсли;
		
	// -- Следующая.
	Индекс = Индекс + Смещение;
	Пока (Индекс >= 0) И (Индекс <= СтрокиДанных.Количество() - 1) Цикл
		Если УправлениеЗаказами.ПроверитьСостояниеДокумента(СтрокиДанных[Индекс].Состояние, СотоянияОткрытыхДокументов) Тогда
			ИндексСледующей = Индекс;
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Смещение;
	КонецЦикла;
	
	// -- Правильный порядок.
	Если (ИндексПредидущей > ИндексСледующей) Тогда
		Индекс = ИндексПредидущей; ИндексПредидущей = ИндексСледующей; ИндексСледующей = Индекс;
	КонецЕсли;
	
	// Новый порядок сортировки.
	Если (ИндексПредидущей = ИндексСледующей) Тогда
		Если (Смещение < 0) Тогда
			СортировкаДата = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(Неопределено, СтрокиДанных[ИндексСледующей].СортировкаДата);
			Если (ТипСсылки = мТипДокументаРеализацияТоваровУслуг) Тогда
				СортировкаТребуемаяДатаНачалаПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(Неопределено, СтрокиДанных[ИндексСледующей].СортировкаТребуемаяДатаНачалаПериода);
				СортировкаТребуемаяДатаОкончанияПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(Неопределено, СтрокиДанных[ИндексСледующей].СортировкаТребуемаяДатаОкончанияПериода);
				СортировкаТребуемаяДатаРазделенияПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(Неопределено, СтрокиДанных[ИндексСледующей].СортировкаТребуемаяДатаРазделенияПериода);
			КонецЕсли;
		Иначе
			СортировкаДата = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(СтрокиДанных[ИндексПредидущей].СортировкаДата, Неопределено);
			Если (ТипСсылки = мТипДокументаРеализацияТоваровУслуг) Тогда
				СортировкаТребуемаяДатаНачалаПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(СтрокиДанных[ИндексПредидущей].СортировкаТребуемаяДатаНачалаПериода, Неопределено);
				СортировкаТребуемаяДатаОкончанияПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(СтрокиДанных[ИндексПредидущей].СортировкаТребуемаяДатаОкончанияПериода, Неопределено);
				СортировкаТребуемаяДатаРазделенияПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(СтрокиДанных[ИндексПредидущей].СортировкаТребуемаяДатаРазделенияПериода, Неопределено);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СортировкаДата = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(СтрокиДанных[ИндексПредидущей].СортировкаДата, СтрокиДанных[ИндексСледующей].СортировкаДата, Смещение);
		Если (ТипСсылки = мТипДокументаРеализацияТоваровУслуг) Тогда
			СортировкаТребуемаяДатаНачалаПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(СтрокиДанных[ИндексПредидущей].СортировкаТребуемаяДатаНачалаПериода, СтрокиДанных[ИндексСледующей].СортировкаТребуемаяДатаНачалаПериода);
			СортировкаТребуемаяДатаОкончанияПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(СтрокиДанных[ИндексПредидущей].СортировкаТребуемаяДатаОкончанияПериода, СтрокиДанных[ИндексСледующей].СортировкаТребуемаяДатаОкончанияПериода);
			СортировкаТребуемаяДатаРазделенияПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоСортировкам(СтрокиДанных[ИндексПредидущей].СортировкаТребуемаяДатаРазделенияПериода, СтрокиДанных[ИндексСледующей].СортировкаТребуемаяДатаРазделенияПериода);
		КонецЕсли;
	КонецЕсли;
	
	
	// Изменение порядка сортировки.
	Ссылка = Позиция;
	
	Если Ссылка.Проведен Или Ссылка.ПометкаУдаления Тогда
	    Возврат Истина;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СостояниеСортировкиДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	
	НаборЗаписей.Прочитать();
	Если Булево(НаборЗаписей.Количество()) Тогда
		Запись = НаборЗаписей[0];
	Иначе
		Запись = НаборЗаписей.Добавить();
		
		Запись.Документ = Ссылка;
		//Запись.Модуль = Перечисления.МодулиИПодсистемы.Доставка;
		Запись.Ресторан = Ссылка.Ресторан;
	КонецЕсли;
		
	Запись.СортировкаДата = СортировкаДата;
	Если (ТипСсылки = мТипДокументаРеализацияТоваровУслуг) Тогда
		Запись.СортировкаТребуемаяДатаНачалаПериода = СортировкаТребуемаяДатаНачалаПериода;
		Запись.СортировкаТребуемаяДатаОкончанияПериода = СортировкаТребуемаяДатаОкончанияПериода;
		Запись.СортировкаТребуемаяДатаРазделенияПериода = СортировкаТребуемаяДатаРазделенияПериода;
	КонецЕсли;
	
	// Запись порядка сортировки.
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), ,,, НаборЗаписей, Ссылка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ТаблицаНарядовДоставкиСместитьПозицию()

// Функция удаления позиции или строк в табличном поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиУдалитьПозицию(ТабличноеПоле, Данные, Позиция = Неопределено, Строки = Неопределено) Экспорт
	
	// Позиция.
	Если (Позиция = Неопределено) Тогда
		Позиция = ТаблицаНарядовДоставкиПолучитьПозицию(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Позиция = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	
	Если (Позиция = ТабличноеПоле.ТекущиеДанные.Ссылка) И (Строки = Неопределено) Тогда
		Возврат РаботаСДиалогами.ДокументУстановитьПометкуУдаления(Позиция, Неопределено);
	КонецЕсли;
	
	
	// Строки.
	Если (Строки = Неопределено) И (Не Позиция = ТабличноеПоле.ТекущиеДанные.Ссылка) Тогда
		Строки = ТаблицаНарядовДоставкиПолучитьСтроки(ТабличноеПоле, Данные);	 
	КонецЕсли;
	
	// Получение и блокирование объекта.
	ДокументОбъект = Позиция;
	// Формат Эксперт - SD  31.08.2011 - перенос ядра 
	//Если Не ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект) Тогда
	Если Не РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Действие.
	
	// Запись объекта.
	Если (Строки = Неопределено) Тогда
		Если ДокументОбъект.ПометкаУдаления Тогда
			// Формат Эксперт - SD  31.08.2011 - перенос ядра 
			Если РаботаСДиалогами.ДокументУстановитьПометкуУдаления(ДокументОбъект, Не ДокументОбъект.ПометкаУдаления) Тогда
			//Если ПолучитьСерверFrontOffice().ДокументУдалить(ДокументОбъект, Не ДокументОбъект.ПометкаУдаления) И
			//	 ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			ДокументОбъект.ДокументыОснования.Очистить();
			// Формат Эксперт - SD  31.08.2011 - перенос ядра 
			Если РаботаСДиалогами.ДокументЗаписать(ДокументОбъект, Неопределено) И
				РаботаСДиалогами.ДокументУстановитьПометкуУдаления(ДокументОбъект, Не ДокументОбъект.ПометкаУдаления) Тогда
				Возврат Истина;
			КонецЕсли;
			//Если ПолучитьСерверFrontOffice().ДокументЗаписать(ДокументОбъект) И
			//	 ПолучитьСерверFrontOffice().ДокументУдалить(ДокументОбъект, Не ДокументОбъект.ПометкаУдаления) И
			//	 ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект) Тогда
			//	Возврат Истина;
			//КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не Булево(Строки.Количество()) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого ДокументОснование Из Строки Цикл
			СтрокаТабличнойЧасти = ДокументОбъект.ДокументыОснования.Найти(ДокументОснование, "ДокументОснование");
			Если (СтрокаТабличнойЧасти = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			ДокументОбъект.ДокументыОснования.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		// Формат Эксперт - SD  31.08.2011 - перенос ядра 
		Если РаботаСДиалогами.ДокументЗаписать(ДокументОбъект, Неопределено) И
			РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено) Тогда
		//Если ПолучитьСерверFrontOffice().ДокументЗаписать(ДокументОбъект) И
		//	 ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Формат Эксперт - SD  31.08.2011 - перенос ядра 
	//ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект);
	РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено);
	
	Возврат Ложь;
	
КонецФункции // ТаблицаНарядовДоставкиУдалитьПозицию()

// Функция удаления позиции или строк в табличном поле нарядов доставки.
//
Функция ТаблицаНарядовДоставкиПечататьПозицию(ТабличноеПоле, Данные, Позиция = Неопределено, ОтменаПечати = Неопределено) Экспорт
	
	// Позиция.
	Если (Позиция = Неопределено) Тогда
		Позиция = ТаблицаНарядовДоставкиПолучитьПозицию(ТабличноеПоле, Данные);
	КонецЕсли;
	Если (Позиция = Неопределено) Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	// Получение и блокирование объекта.
	ДокументОбъект = Позиция;
	
	// Формат Эксперт - SD  31.08.2011 - перенос ядра 
	//Если Не ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект, Ложь, Истина) Тогда // Блокирующая.
	Если Не РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, Неопределено,  Истина) Тогда // Блокирующая.
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка.
	Если Не ДокументОбъект.Проведен Тогда
		Если ДокументОбъект.ПометкаУдаления Тогда
			____Предупреждение("Помеченный на удаление документ не может быть проведен.");
			Возврат Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументОбъект.Сотрудник) Тогда
			ОбщегоНазначения.СообщитьОбНезаполненомРеквизитеДокумента(ДокументОбъект, "Экспедитор", ,,, Истина);
			Возврат Ложь;
		КонецЕсли;
		Если Не Булево(ДокументОбъект.ДокументыОснования.Количество()) Тогда
			ОбщегоНазначения.СообщитьОбНезаполненойТабличнойЧастиДокумента(ДокументОбъект, "ДокументыОснования", ,,, Истина);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Действие.
	Если ДокументОбъект.Проведен Тогда
		
		ОтменаПечати = Истина;
		// Формат Эксперт - SD  31.08.2011 - перенос ядра 
		//Если ПолучитьСерверFrontOffice().ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.ОтменаПроведения) И
		//	 ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект) Тогда
		Если РаботаСДиалогами.ДокументЗаписать(ДокументОбъект, Неопределено, РежимЗаписиДокумента.ОтменаПроведения) И
			 РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено) Тогда			 
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		ОтменаПечати = Ложь;
		
		// -- Запись документов оснований.
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.ДокументыОснования Цикл
			ДокументОснование = СтрокаТабличнойЧасти.ДокументОснование;
			Если ДокументОснование.Распечатан Или ДокументОснование.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОснованиеОбъект = ДокументОснование;
			// Формат Эксперт - SD  31.08.2011 - перенос ядра 
			//Если ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОснованиеОбъект) И
			//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОснованиеОбъект, "Распечатан", Истина) И
			//	 ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументЗаписать(ДокументОснованиеОбъект) И
			//	 ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОснованиеОбъект) Тогда
			//Иначе
			//	ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОснованиеОбъект);
			//	ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект);
			//	Возврат Истина;
			//КонецЕсли;
			Если РаботаСДиалогами.ДокументОткрыть(ДокументОснованиеОбъект, Неопределено) И
				 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОснованиеОбъект, "Распечатан", Истина) И
				 ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументЗаписать(ДокументОснованиеОбъект) И
				 РаботаСДиалогами.ДокументЗакрыть(ДокументОснованиеОбъект, Неопределено) Тогда
			Иначе
				РаботаСДиалогами.ДокументЗакрыть(ДокументОснованиеОбъект, Неопределено);
				РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено);
				Возврат Истина;
			КонецЕсли;
			
			
		КонецЦикла;
		
		// Формат Эксперт - SD  31.08.2011 - перенос ядра 
		//Если ПолучитьСерверFrontOffice().ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.Проведение) И
		Если РаботаСДиалогами.ДокументЗаписать(ДокументОбъект, Неопределено, РежимЗаписиДокумента.Проведение) И			
			 ДокументОбъект.Печать("РасходныеНакладные", ,,, Истина) И // Front-office режим.
			 РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено) Тогда
			 //ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект) Тогда			 
			 
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Формат Эксперт - SD  31.08.2011 - перенос ядра 
	//ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект);
	РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено);
	
	Возврат Ложь;
	
КонецФункции // ТаблицаНарядовДоставкиУдалитьПозицию()


// Процедура заполнения табличного поля настроек производства.
//
Процедура ТаблицаНастроекПроизводстваПрочитать(ТабличноеПоле, Данные) Экспорт
	
	// Текущая позиция (I).
	Если (Не ТабличноеПоле = Неопределено) Тогда
		Если (Не ТабличноеПоле.ТекущаяСтрока = Неопределено) Тогда
			ТекущаяПроизводственнаяГруппа = ТабличноеПоле.ТекущиеДанные.ПроизводственнаяГруппа;
		КонецЕсли;
	КонецЕсли;
	
	// Ресторан.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	Если ТекущийРесторан.Пустая() Тогда
		Данные.Очистить();
		Возврат;
	КонецЕсли;
	
	// Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	НастройкиПроизводства.Ресторан,
	                      |	НастройкиПроизводства.ПроизводственнаяГруппа,
	                      |	НастройкиПроизводства.ПродолжительностьВыполнения,
	                      |	НастройкиПроизводства.ПродолжительностьЗадержки,
	                      |	НастройкиПроизводства.ПродолжительностьДоставки,
	                      |	НастройкиПроизводства.ПродолжительностьПроизводства
	                      |ИЗ
	                      |	РегистрСведений.НастройкиПроизводства КАК НастройкиПроизводства
	                      |ГДЕ
	                      |	НастройкиПроизводства.Ресторан = &Ресторан
	                      |	И НастройкиПроизводства.ПроизводственнаяГруппа.Актуальность
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НастройкиПроизводства.ПроизводственнаяГруппа.Представление");
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	
	// Перенос данных.
	Данные.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Текущая позиция (II).
	Если (Не ТабличноеПоле = Неопределено) И (Не ТекущаяПроизводственнаяГруппа = Неопределено) Тогда
		Для Каждого Запись Из Данные Цикл
			Если (Запись.ПроизводственнаяГруппа = ТекущаяПроизводственнаяГруппа) Тогда
				ТабличноеПоле.ТекущаяСтрока = Запись;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПроизводстваПрочитать()

// Процедура актуализации табличного поля настроек производства.
//
Процедура ТаблицаНастроекПроизводстваЗаписать(ТабличноеПоле, Данные, Отказ = Ложь) Экспорт
	
	// Запись уже была прервана, продолжение не имеет смысла.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Ресторан.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	Если ТекущийРесторан.Пустая() Тогда
		Данные.Очистить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если (Не Данные.Количество() = 0) Тогда
			
		// Запись набора записей.
		НаборЗаписей = Данные;
		НаборЗаписей.Отбор.Ресторан.Использование = Истина;
		НаборЗаписей.Отбор.Ресторан.Значение = ТекущийРесторан;
		
		// Нормализация.
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Ресторан = НаборЗаписей.Отбор.Ресторан.Значение;
		КонецЦикла;
		
		// Запись набора записей.
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, ,, НаборЗаписей, ТекущийРесторан);
		КонецПопытки;
	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПроизводстваЗаписать()


// Процедура заполнения списка сотрудников доставки.
//
Процедура СписокСотрудниковДоставки(Данные) Экспорт
	
	Перем ТаблицаСотрудников;
	
	// Данные.
	Если (Данные = Неопределено) Тогда
		Данные = Новый СписокЗначений;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	// Выборка данных.
	ТаблицаСотрудниковДоставки(Неопределено, ТаблицаСотрудников);
	
	// Перенос данных
	Для Каждого СтрокаТаблицы Из ТаблицаСотрудников Цикл
		Если (Не СтрокаТаблицы.Недоступен = Истина) Тогда
			Представление = Строка(СтрокаТаблицы.Сотрудник);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Дата) Тогда
				Представление = Представление + " — " + FrontOffice.ПредставлениеДаты(СтрокаТаблицы.Дата);
			КонецЕсли;
			Данные.Добавить(СтрокаТаблицы.Сотрудник, Представление, , БиблиотекаКартинок.ЭлементСправочника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СписокСотрудниковДоставки()

// Процедура заполнения табличного поля сотрудников доставки.
//
Процедура ТаблицаСотрудниковДоставки(ТабличноеПоле, Данные) Экспорт
	
	// Текущая позиция (I).
	Если (Не ТабличноеПоле = Неопределено) Тогда
		Если (Не ТабличноеПоле.ТекущаяСтрока = Неопределено) Тогда
			ТекущийСотрудник = ТабличноеПоле.ТекущиеДанные.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
	// Данные.
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	Если (Данные.Колонки.Найти("Сотрудник") = Неопределено) Тогда
		Данные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	КонецЕсли;
	Если (Данные.Колонки.Найти("Дата") = Неопределено) Тогда
		Данные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	Если (Данные.Колонки.Найти("Недоступен") = Неопределено) Тогда
		Данные.Колонки.Добавить("Недоступен", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	// Ресторан.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	Если ТекущийРесторан.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Выборка данных.
	
	// TODO: Добавить фильтр по сотрудникам на смене.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СотрудникиРесторанов.Сотрудник
	                      |ПОМЕСТИТЬ ВременнаяСотрудникиРесторанов
	                      |ИЗ
	                      |	РегистрСведений.СотрудникиРесторанов КАК СотрудникиРесторанов
	                      |ГДЕ
	                      |	СотрудникиРесторанов.Ресторан = &Ресторан
	                      |	И СотрудникиРесторанов.Экспедитор
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СотрудникиРесторанов.Сотрудник КАК Сотрудник,
	                      |	ЕСТЬNULL(СостояниеСотрудников.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Дата,
	                      |	ЕСТЬNULL(СостояниеСотрудников.Недоступен, ЛОЖЬ) КАК Недоступен
	                      |ИЗ
	                      |	ВременнаяСотрудникиРесторанов КАК СотрудникиРесторанов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1024
	                      |			НакладнаяНаДоставку.Сотрудник КАК Сотрудник,
	                      |			ВЫБОР
	                      |				КОГДА НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Проведен
	                      |					ТОГДА НакладнаяНаДоставкуДокументыОснования.ДокументОснование.ДатаОкончанияПериода
	                      |				ИНАЧЕ НакладнаяНаДоставку.ДатаОкончанияПериода
	                      |			КОНЕЦ КАК Дата,
	                      |			(НЕ НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Проведен) КАК Недоступен
	                      |		ИЗ
	                      |			Документ.НакладнаяНаДоставку КАК НакладнаяНаДоставку
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
	                      |				ПО (НакладнаяНаДоставкуДокументыОснования.Ссылка = НакладнаяНаДоставку.Ссылка)
	                      |		ГДЕ
	                      |			НакладнаяНаДоставку.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ЧАС, -1200) И ДОБАВИТЬКДАТЕ(&Дата, ЧАС, 1200)
	                      |			И НакладнаяНаДоставку.Сотрудник В
	                      |					(ВЫБРАТЬ
	                      |						СотрудникиРесторанов.Сотрудник
	                      |					ИЗ
	                      |						ВременнаяСотрудникиРесторанов КАК СотрудникиРесторанов)
	                      |			И НакладнаяНаДоставку.Проведен
	                      |			И НакладнаяНаДоставку.Ресторан = &Ресторан
	                      |		
	                      |		УПОРЯДОЧИТЬ ПО
	                      |			Дата УБЫВ) КАК СостояниеСотрудников
	                      |		ПО СотрудникиРесторанов.Сотрудник = СостояниеСотрудников.Сотрудник
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      //|	Сотрудник");
						  //Костенюк Александр-Старт 23.10.2012
	                      |	Сотрудник
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ВременнаяСотрудникиРесторанов");
						  //Костенюк Александр-Финиш 23.10.2012
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	// Перенос данных.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (Данные.Найти(Выборка.Сотрудник, "Сотрудник") = Неопределено) Тогда
			СтрокаТаблицы = Данные.Добавить();
			СтрокаТаблицы.Сотрудник = Выборка.Сотрудник;
		КонецЕсли;
		Если (СтрокаТаблицы.Дата < Выборка.Дата) Тогда
			СтрокаТаблицы.Дата = Выборка.Дата;
			СтрокаТаблицы.Недоступен = Выборка.Недоступен;
		КонецЕсли;
	КонецЦикла;
	
	// Сортировка.
	Данные.Сортировать("Недоступен,Дата");
	
	// Текущая позиция (II).
	Если (Не ТабличноеПоле = Неопределено) И (Не ТекущийСотрудник = Неопределено) Тогда
		ТекущаяСтрока = Данные.Найти(ТекущийСотрудник, "Сотрудник");
		Если (Не ТекущаяСтрока = Неопределено) Тогда
			ТабличноеПоле.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСотрудниковДоставки()

// Процедура обработчик события ПриВыводеСтроки табличного поля сотрудников доставки.
//
Процедура ТаблицаСотрудниковВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	// Оформление строки.
	Если ДанныеСтроки.Недоступен Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;	
	КонецЕсли;
	
	// Картинка.
	Если (Не Элемент.Колонки.Найти("Картинка") = Неопределено) И Элемент.Колонки.Картинка.Видимость Тогда
		ОформлениеСтроки.Ячейки.Картинка.УстановитьКартинку(БиблиотекаКартинок.ЭлементСправочника);
	КонецЕсли;
	
	// ДатаОкончанияПериода. 
	Если Элемент.Колонки.Дата.Видимость Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Дата) Тогда
			ОформлениеСтроки.Ячейки.Дата.Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСотрудниковВывестиСтроку()


// Функция формирует список группировок табличного поля.
//
Функция ПолучитьСписокГруппировок(Полный, СохраненноеЗначение = Неопределено) Экспорт
	
	Результат = Новый СписокЗначений;
	Если Полный Тогда
		Результат.Добавить("КраткийСоставДокумента");
		Результат.Добавить("КраткийСоставПроизводства");
		Результат.Добавить("ПроизводственныеОчереди");
		Результат.Добавить("ФиксированнаяТребуемаяДатаОкончанияПериода");
	КонецЕсли;
	Результат.Добавить("МаршрутДоставки");
	Результат.Добавить("АдресДоставкиУлица");
	Результат.Добавить("АдресДоставкиДом");
	Если Полный Тогда
		Результат.Добавить("Распределен");
		Результат.Добавить("Наряд");
		Результат.Добавить("Экспедитор");
	КонецЕсли;
	Результат.Добавить("Контрагент");
	Результат.Добавить("Оплата");
	Если Полный Тогда
		Результат.Добавить("Сотрудник");
	КонецЕсли;
	Результат.Добавить("Состояние");      	
	
	// Востановление нстройки.
	Если (Не СохраненноеЗначение = Неопределено) Тогда
		Для Каждого ЭлементСохраненногоСписка Из СохраненноеЗначение Цикл

			ЭлементСписка = Результат.НайтиПоЗначению(ЭлементСохраненногоСписка.Значение);
			Если (ЭлементСписка = Неопределено) Тогда
				 Продолжить;
			КонецЕсли;
			 
			ЭлементСписка.Пометка = ЭлементСохраненногоСписка.Пометка;
			Попытка
				Результат.Сдвинуть(ЭлементСписка, СохраненноеЗначение.Индекс(ЭлементСохраненногоСписка) - Результат.Индекс(ЭлементСписка));
			Исключение КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ПолучитьСписокГруппировок()

// Функция соответсвие отбора табличного поля.
//
Функция ПолучитьСоответсвиеОтбора(СостоянияДокументов, СохраненноеЗначение = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого Состоянияе Из СостоянияДокументов Цикл
		
		Если (Не СохраненноеЗначение = Неопределено) Тогда
			Значение = (СохраненноеЗначение[Состоянияе] = Истина) Или (СохраненноеЗначение[Состоянияе] = Неопределено);
		Иначе
			Значение = Истина;
		КонецЕсли;
		
		Результат[Состоянияе] = Значение;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСоответсвиеОтбора()

// Функция формирует список сортировок табличного поля.
//
Функция ПолучитьСписокСортировок(Полный, СохраненноеЗначение = Неопределено) Экспорт
	
	Результат = Новый СписокЗначений;
	Если Полный Тогда
		Результат.Добавить("КраткийСоставДокумента");
		Результат.Добавить("КраткийСоставПроизводства");
		Результат.Добавить("ПроизводственныеОчереди");
		Результат.Добавить("ФиксированнаяТребуемаяДатаОкончанияПериода");
	Иначе
		Результат.Добавить("Экспедитор");
	КонецЕсли;
	Результат.Добавить("МаршрутДоставки");
	Результат.Добавить("АдресДоставкиУлица");
	Результат.Добавить("АдресДоставкиДом");
	Если Полный Тогда
		Результат.Добавить("Распределен");
		Результат.Добавить("Наряд");
		Результат.Добавить("Экспедитор");
	КонецЕсли;
	Результат.Добавить("Контрагент");
	Результат.Добавить("Оплата");
	Если Полный Тогда
		Результат.Добавить("Сотрудник");
	КонецЕсли;
	Результат.Добавить("Состояние");      	
	
	// Востановление нстройки.
	Если (Не СохраненноеЗначение = Неопределено) Тогда
		Для Каждого ЭлементСохраненногоСписка Из СохраненноеЗначение Цикл

			ЭлементСписка = Результат.НайтиПоЗначению(ЭлементСохраненногоСписка.Значение);
			Если (ЭлементСписка = Неопределено) Тогда
				 Продолжить;
			КонецЕсли;
			 
			ЭлементСписка.Пометка = ЭлементСохраненногоСписка.Пометка;
			Попытка
				Результат.Сдвинуть(ЭлементСписка, СохраненноеЗначение.Индекс(ЭлементСохраненногоСписка) - Результат.Индекс(ЭлементСписка));
			Исключение КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ПолучитьСписокСортировок()

// Функция формирует таблицу очереди табличного поля.
//
Функция ПолучитьТаблицуОчереди(СохраненноеЗначение = Неопределено) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Очередь", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.КраткийСоставПроизводства.Тип.КвалификаторыСтроки.Длина));
	Результат.Колонки.Добавить("ПроизводственныеГруппы", Новый ОписаниеТипов("СписокЗначений"));
	Результат.Колонки.Добавить("КраткийСоставПроизводства", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.КраткийСоставПроизводства.Тип.КвалификаторыСтроки.Длина));
	
	Если (Не СохраненноеЗначение = Неопределено) Тогда
		Для Каждого СтрокаТаблицыСохраненногоСписка Из СохраненноеЗначение Цикл
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.Очередь = СтрокаТаблицыСохраненногоСписка.Очередь;
			СтрокаТаблицы.ПроизводственныеГруппы = СтрокаТаблицыСохраненногоСписка.ПроизводственныеГруппы; СтрокаТаблицы.ПроизводственныеГруппы.СортироватьПоЗначению();
			СтрокаТаблицы.КраткийСоставПроизводства = СтрЗаменить(Строка(СтрокаТаблицы.ПроизводственныеГруппы), ";", ",");
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуОчереди()


Процедура ЗаполнениеКолонок(ТекущееТаблПоле,ПолеСпискаКолонок) 
	
	ПолеСпискаКолонок.Очистить();
	Для каждого Колонка из ТекущееТаблПоле.Колонки Цикл		
		Если (Колонка.ИзменятьВидимость)или(Колонка.Видимость) Тогда

		СтрокаСписка = ПолеСпискаКолонок.Добавить();			
		СтрокаСписка.Колонка = Колонка.ТекстШапки;
		
		СтрокаСписка.ИмяКолонки = Колонка.Имя;
		СтрокаСписка.ВысотаЯчейки = Колонка.ВысотаЯчейки;
		СтрокаСписка.Ширина = Колонка.Ширина;
		СтрокаСписка.Положение = Колонка.Положение;
		СтрокаСписка.ИзменениеРазмера = Колонка.ИзменениеРазмера;
		СтрокаСписка.АвтоВысотаЯчейки = Колонка.АвтоВысотаЯчейки;			
		СтрокаСписка.ИзменятьВидимость = Колонка.ИзменятьВидимость;
		СтрокаСписка.Пометка = Колонка.Видимость;		
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками,ЭтаФорма) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	//СтруктураСНастройками.Вставить("РежимРаботы", ЭтаФорма.РежимРаботы);
	СтруктураСНастройками.Вставить("ТабличноеПолеЗаказовДоставкиГруппировки", ЭтаФорма.ТабличноеПолеЗаказовДоставкиГруппировки);
	СтруктураСНастройками.Вставить("ТабличноеПолеНарядовДоставкиГруппировки", ЭтаФорма.ТабличноеПолеНарядовДоставкиГруппировки);
	
	СтруктураСНастройками.Вставить("ТабличноеПолеЗаказовДоставкиСортировка", ЭтаФорма.ТабличноеПолеЗаказовДоставкиСортировка);
	СтруктураСНастройками.Вставить("ТабличноеПолеНарядовДоставкиСортировка", ЭтаФорма.ТабличноеПолеНарядовДоставкиСортировка);
	
	СтруктураСНастройками.Вставить("ТабличноеПолеЗаказовИНарядовДоставкиОчередь", ЭтаФорма.ТабличноеПолеЗаказовИНарядовДоставкиОчередь);
	
	// Данные.		
	ПолеСпискаКолонокЗаказы = Новый ТаблицаЗначений;
	ПолеСпискаКолонокНаряды = Новый ТаблицаЗначений;
	
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("Колонка", Новый ОписаниеТипов("Строка"));
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("Положение", Новый ОписаниеТипов("ПоложениеКолонки"));
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("ИзменениеРазмера", Новый ОписаниеТипов("ИзменениеРазмераКолонки"));				
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("Ширина", Новый ОписаниеТипов("Число"));
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("ВысотаЯчейки", Новый ОписаниеТипов("Число"));
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("АвтоВысотаЯчейки", Новый ОписаниеТипов("Булево"));		
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("ИзменятьВидимость", Новый ОписаниеТипов("Булево"));				
	ПолеСпискаКолонокЗаказы.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));					
	
	ПолеСпискаКолонокНаряды = ПолеСпискаКолонокЗаказы.Скопировать();
	
	ЗаполнениеКолонок(ЭтаФорма.ЭлементыФормы.ТабличноеПолеЗаказовДоставки,ПолеСпискаКолонокЗаказы);
	ЗаполнениеКолонок(ЭтаФорма.ЭлементыФормы.ТабличноеПолеНарядовДоставки,ПолеСпискаКолонокНаряды);
	
	СтруктураСНастройками.Вставить("СписокКолонокЗаказы", ПолеСпискаКолонокЗаказы);
	СтруктураСНастройками.Вставить("СписокКолонокНаряды", ПолеСпискаКолонокНаряды);
	
	СтруктураСНастройками.Вставить("ТабличноеПолеЗаказовДоставкиОтбор", ЭтаФорма.ТабличноеПолеЗаказовДоставкиОтбор); 
	СтруктураСНастройками.Вставить("ТабличноеПолеНарядовДоставкиОтбор", ЭтаФорма.ТабличноеПолеНарядовДоставкиОтбор); 
	
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

Процедура ВосстановитьНастройкиКолонок(ЭтаФорма,ЭлементФормыТабПоле,ПолеСпискаКолонок)
	//Колонки
	Для каждого СтрокаСписка из ПолеСпискаКолонок Цикл				
		КолонкаТабПоля = ЭлементФормыТабПоле.Колонки.Найти(СтрокаСписка.ИмяКолонки);			
		Если (КолонкаТабПоля = Неопределено) Тогда
			Продолжить;
		КонецЕсли;

		КолонкаТабПоля.ВысотаЯчейки = СтрокаСписка.ВысотаЯчейки;
		КолонкаТабПоля.Ширина = СтрокаСписка.Ширина;
		КолонкаТабПоля.Положение = СтрокаСписка.Положение;
		КолонкаТабПоля.ИзменениеРазмера = СтрокаСписка.ИзменениеРазмера;
		КолонкаТабПоля.АвтоВысотаЯчейки = СтрокаСписка.АвтоВысотаЯчейки;			
		КолонкаТабПоля.Видимость = СтрокаСписка.Пометка;		
		                            
		ИндКолТабПоля = ЭлементФормыТабПоле.Колонки.Индекс(КолонкаТабПоля);
		ЭлементФормыТабПоле.Колонки.Сдвинуть(КолонкаТабПоля, ПолеСпискаКолонок.Индекс(СтрокаСписка) - ИндКолТабПоля);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВосстановитьНастройкиИзСтруктуры(ЭтаФорма, СтруктураСНастройками, НаименованиеНастройки = Неопределено) Экспорт
	
	Перем ДеревоПоказатели, ТаблицаИнтервалы, СохраненнаяНастройкаПериода;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	//РежимРаботы = СтруктураСНастройками.РежимРаботы; 
	ЭтаФорма.ТабличноеПолеЗаказовДоставкиГруппировки = ПолучитьСписокГруппировок(Истина, СтруктураСНастройками.ТабличноеПолеЗаказовДоставкиГруппировки);
	ЭтаФорма.ТабличноеПолеНарядовДоставкиГруппировки = ПолучитьСписокГруппировок(Ложь, СтруктураСНастройками.ТабличноеПолеНарядовДоставкиГруппировки);
	
	ЭтаФорма.ТабличноеПолеЗаказовДоставкиОтбор = ПолучитьСоответсвиеОтбора(УправлениеЗаказами.СостоянияЗакрытыхДокументов(Истина, УправлениеЗаказами.СостоянияОткрытыхДокументов(Истина)),СтруктураСНастройками.ТабличноеПолеЗаказовДоставкиОтбор);	
	ЭтаФорма.ТабличноеПолеНарядовДоставкиОтбор = ПолучитьСоответсвиеОтбора(УправлениеЗаказами.СостоянияЗакрытыхДокументов(Истина, УправлениеЗаказами.СостоянияОткрытыхДокументов(Ложь)),СтруктураСНастройками.ТабличноеПолеНарядовДоставкиОтбор);
	
	ЭтаФорма.ТабличноеПолеЗаказовДоставкиСортировка = ПолучитьСписокСортировок(Истина, УниверсальныеМеханизмы.ПолучитьЗначениеНастройки(СтруктураСНастройками, "ТабличноеПолеЗаказовДоставкиСортировка"));
	ЭтаФорма.ТабличноеПолеНарядовДоставкиСортировка = ПолучитьСписокСортировок(Ложь, УниверсальныеМеханизмы.ПолучитьЗначениеНастройки(СтруктураСНастройками, "ТабличноеПолеНарядовДоставкиСортировка"));
	
	ЭтаФорма.ТабличноеПолеЗаказовИНарядовДоставкиОчередь = ПолучитьТаблицуОчереди(УниверсальныеМеханизмы.ПолучитьЗначениеНастройки(СтруктураСНастройками, "ТабличноеПолеЗаказовИНарядовДоставкиОчередь"));
	
	ВосстановитьНастройкиКолонок(ЭтаФорма,ЭтаФорма.ЭлементыФормы.ТабличноеПолеЗаказовДоставки,СтруктураСНастройками.СписокКолонокЗаказы);
	ВосстановитьНастройкиКолонок(ЭтаФорма,ЭтаФорма.ЭлементыФормы.ТабличноеПолеНарядовДоставки,СтруктураСНастройками.СписокКолонокНаряды);
	
	ЭтаФорма.КоманднаяПанельФормыДействиеОбновить(Неопределено);
	//ТаблицаЗаказовДоставкиПрочитать(ЭтаФорма.ЭлементыФормы.ТабличноеПолеЗаказовДоставки, ЭтаФорма.ТабличноеПолеЗаказовДоставки, ,,,, ЭтаФорма.ТабличноеПолеЗаказовДоставкиГруппировки, ЭтаФорма.ТабличноеПолеЗаказовДоставкиОтбор);
	//ТаблицаНарядовДоставкиПрочитать(ЭтаФорма.ЭлементыФормы.ТабличноеПолеНарядовДоставки, ЭтаФорма.ТабличноеПолеНарядовДоставки, , ЭтаФорма.ТабличноеПолеНарядовДоставкиГруппировки, ЭтаФорма.ТабличноеПолеНарядовДоставкиОтбор);			

	Если мЗаголовокФормы="" Тогда
		мЗаголовокФормы = ЭтаФорма.Заголовок;
	КонецЕсли;	
	Если НЕ(НаименованиеНастройки=Неопределено) Тогда
		ЭтаФорма.Заголовок = мЗаголовокФормы+". Настройка: "+НаименованиеНастройки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()



Процедура АвтоматическоеУправлениеРеализацияТоваровУслуг()
	
	// Запрос.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СостояниеНоменклатурыРеализацийТоваровУслуг.Документ,
	                      |	СостояниеНоменклатурыРеализацийТоваровУслуг.Идентификатор
	                      |ИЗ
	                      |	РегистрСведений.СостояниеНоменклатурыРеализацийТоваровУслуг КАК СостояниеНоменклатурыРеализацийТоваровУслуг
	                      |ГДЕ
	                      |	СостояниеНоменклатурыРеализацийТоваровУслуг.Ресторан = &Ресторан
	                      |	И СостояниеНоменклатурыРеализацийТоваровУслуг.ТребуемаяДатаРазделенияПериода <= &Дата
	                      |	И (НЕ СостояниеНоменклатурыРеализацийТоваровУслуг.Распечатан)
	                      |	И (НЕ СостояниеНоменклатурыРеализацийТоваровУслуг.Выполненн)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СостояниеНоменклатурыРеализацийТоваровУслуг.Документ,
	                      |	СостояниеНоменклатурыРеализацийТоваровУслуг.Идентификатор");
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Выборка данных.
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		// -- Идентификаторы.
		МассивИдентификаторов = Новый Массив;
		
		ВыборкаПоИдентификатором = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоИдентификатором.Следующий() Цикл
			МассивИдентификаторов.Добавить(ВыборкаПоИдентификатором.Идентификатор);
		КонецЦикла;
		
		// -- Запись документа.
		Если Булево(МассивИдентификаторов.Количество()) Тогда
			ПолучитьСерверFrontOffice().МенеджерПроизводства.ДокументОбработать(ВыборкаПоДокументам.Документ, ,, МассивИдентификаторов);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // АвтоматическоеУправлениеРеализацияТоваровУслуг()

Процедура АвтоматическоеУправлениеНакладнаяНаДоставку()
	
	// Поиск реализаций и услуг.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	СостояниеДокументов.Документ
	                      |ИЗ
	                      |	РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовОснованийНакладныхНаДоставку КАК СостояниеДокументовОснованийНакладныхНаДоставку
	                      |		ПО СостояниеДокументов.Документ = СостояниеДокументовОснованийНакладныхНаДоставку.ДокументОснование
	                      |ГДЕ
	                      |	СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	                      |	И СостояниеДокументов.Ресторан = &Ресторан
	                      |	И СостояниеДокументов.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка)
	                      |	И СостояниеДокументов.ТребуемаяДатаРазделенияПериода <= &Дата
	                      |	И (НЕ СостояниеДокументов.Распечатан)
	                      |	И СостояниеДокументовОснованийНакладныхНаДоставку.Документ ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата);
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументовОснований = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
	
	// Поиск накладной на доставку (системной).
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СостояниеДокументов.Документ
	                      |ИЗ
	                      |	РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
	                      |ГДЕ
	                      |	СостояниеДокументов.Документ ССЫЛКА Документ.НакладнаяНаДоставку
	                      |	И СостояниеДокументов.Ресторан = &Ресторан
	                      |	И (НЕ СостояниеДокументов.Распечатан)
	                      |	И СостояниеДокументов.Автоматический");
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НакладнаяНаДоставку = Неопределено;
	Иначе
		НакладнаяНаДоставку = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ").Получить(0);
	КонецЕсли;
	
	// Запись документа.
	ТаблицаНарядовДоставкиДобавитьПозицию(Неопределено, Неопределено, НакладнаяНаДоставку, МассивДокументовОснований, , Истина);
	
КонецПроцедуры // АвтоматическоеУправлениеНакладнаяНаДоставку()

Процедура АвтоматическоеУправление(УправлениеПроизводством, УправлениеНакладнымиНаДоставку) Экспорт
	
	// Проверка периода выполнения.
	Если (Не мАвтоматическоеУправлениеПоследнееВыполнение = Неопределено) И (мАвтоматическоеУправлениеПоследнееВыполнение - 60 < ТекущаяДата()) И (ТекущаяДата() < мАвтоматическоеУправлениеПоследнееВыполнение + 60) Тогда
		Возврат;
	КонецЕсли;
	
	// Автоматическое управление.
	Если УправлениеПроизводством Тогда
		АвтоматическоеУправлениеРеализацияТоваровУслуг();
	КонецЕсли;
	Если УправлениеНакладнымиНаДоставку Тогда
		АвтоматическоеУправлениеНакладнаяНаДоставку();
	КонецЕсли;
	
	// Последнее выполнение.
	мАвтоматическоеУправлениеПоследнееВыполнение = ТекущаяДата();
	
КонецПроцедуры // АвтоматическоеУправление()


// Инициализация переменных.
мОписаниеТповДокументов = Новый ОписаниеТипов("ДокументСсылка.НакладнаяНаДоставку,ДокументСсылка.РеализацияТоваровУслуг");
мТипДокументаРеализацияТоваровУслуг = Тип("ДокументСсылка.РеализацияТоваровУслуг");
//мТипДокументаСписаниеТоваров = Тип("ДокументСсылка.СписаниеТоваров");
мТипДокументаНакладнаяНаДоставку = Тип("ДокументСсылка.НакладнаяНаДоставку");
мЗаголовокФормы = "";

мПроизводственныеГруппыПустые = Символ(65276) + Символ(65276) + Символ(65276) + Символ(65276); мПроизводственныеГруппыПустыеПредставление = "Готово";

мАвтоматическоеУправлениеПериодВыполнения = 60;

#КонецЕсли
