
//	1С:Touch. Touch-ориентированные элементы управления и диалоговые формы, 
//	построенные с использованием только стандартных элементов управления платформы.
//	Copyright (C) 2008-2010 Переверзев Александр Владимирович.
//
//	Это программа является свободным программным обеспечением. Вы можете 
//	распространять и/или модифицировать её согласно условиям Стандартной 
//	Общественной Лицензии GNU, опубликованной Фондом Свободного Программного 
//	Обеспечения, версии 3 или, по Вашему желанию, любой более поздней версии. 
//
//	Эта программа распространяется в надежде, что она будет полезной, но БЕЗ 
//	ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО СОСТОЯНИЯ ПРИ 
//	ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите Стандартную 
//	Общественную Лицензию GNU для получения дополнительной информации. 
//
//	Вы должны были получить копию Стандартной Общественной Лицензии GNU вместе 
//	с программой. В случае её отсутствия, посмотрите <http://www.gnu.org/licenses/>.


#Если Клиент Тогда

Перем мКолонка;	

Перем мЗначение;

Перем мЯчейки;

Перем мСлужебнаяКартинка;

Перем мТипЧисла, мТипФормата, мТипФлажка, мТипСтруктуры, мТипСпискаЗначений;

	
Функция Значение(Значение = Неопределено) Экспорт
	
	// Состояние связь с данным.
	СвязьСДанными = (мКолонка = Неопределено) Или ПустаяСтрока(мКолонка.Данные);
	
	// Установка значения.
	Если (Не Значение = Неопределено) И (Не СвязьСДанными) Тогда
		мЗначение = Значение;
		// -- Текст.
		Если (Не ПустаяСтрока(мКолонка.Формат)) И мТипФормата.СодержитТип(ТипЗнч(мЗначение)) Тогда
			Текст = Формат(мЗначение, мКолонка.Формат);
		Иначе
			Текст = Строка(мЗначение);
		КонецЕсли;
		// -- Выравнивание.
		Если (Выравнивание = ГоризонтальноеПоложение.Авто) И (ТипЗнч(мЗначение) = мТипЧисла) Тогда
			Выравнивание = ГоризонтальноеПоложение.Право;
		КонецЕсли;
	КонецЕсли;
	
	// Возврат значения.
	Возврат мЗначение;
	
КонецФункции

Функция ЗначениеФлажка(Флажок = Неопределено) Экспорт
	
	// Состояние связь с данным.
	СвязьСДанными = (мКолонка = Неопределено) Или ПустаяСтрока(мКолонка.ДанныеФлажка);
	
	// Установка значения флажка.
	Если (Не Флажок = Неопределено) И (Не СвязьСДанными) Тогда
		ЭтотОбъект.Флажок = Флажок;
	КонецЕсли;
	
	// Возврат значения флажка.
	Возврат ЭтотОбъект.Флажок;
	
КонецФункции

Функция ЗначениеКартинки(Картинка = Неопределено) Экспорт
	
	// Состояние связь с данным.
	СвязьСДанными = (мКолонка = Неопределено) Или ПустаяСтрока(мКолонка.ДанныеКартинки);
	
	// Установка значения флажка.
	Если (Не Картинка = Неопределено) И (Не СвязьСДанными) Тогда
		ЭтотОбъект.Картинка = Картинка;
	КонецЕсли;
	
	// Возврат значения картинки.
	Возврат ЭтотОбъект.Картинка;
	
КонецФункции


Функция Имя() Экспорт
	
	// Получение имени колонки.
	Если (мКолонка = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат мКолонка.Имя;
	
КонецФункции


Процедура УстановитьКартинку(Картинка) Экспорт
	
	// Нормализация.
	Если (Не ТипЗнч(Картинка) = Тип("Картинка")) Тогда
		Возврат;
	КонецЕсли;
	
	// Установка картинки.
	ЭтотОбъект.Картинка = Картинка;
	ОтображатьКартинку = Истина;
	
КонецПроцедуры

Процедура УстановитьТекст(Текст) Экспорт
	
	// Нормализация.
	Если (Не ТипЗнч(Текст) = Тип("Строка")) Тогда
		Возврат;
	КонецЕсли;
	
	// Установка картинки.
	ЭтотОбъект.Текст = Текст;
	ОтображатьТекст = Истина;
	
КонецПроцедуры

Процедура УстановитьФлажок(Флажок) Экспорт
	
	// Нормализация.
	Если Не мТипФлажка.СодержитТип(ТипЗнч(Флажок)) Тогда
		Возврат;
	КонецЕсли;
	
	// Установка картинки.
	ЭтотОбъект.Флажок = Флажок;
	ОтображатьФлажок = Истина;
	
КонецПроцедуры


Функция Количество() Экспорт
	
	// Получение количества динамических ячеек.
	Если (мЯчейки = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат мЯчейки.Количетсво();
	
КонецФункции

Функция Ячейки(Индекс) Экспорт
	
	// Инициализация оформления яейки.
	Если (ТипЗнч(Индекс) = мТипСтруктуры) Тогда
		мКолонка = Индекс.Колонка;
		мЗначение = Индекс.Значение;
		
		// -- Инициализация значений по умолчанию на основе владельца.
		Видимость = Истина;
		Выравнивание = мКолонка.ГоризонтальноеПоложениеВКолонке;
		Если (Выравнивание = ГоризонтальноеПоложение.Авто) И (ТипЗнч(мЗначение) = мТипЧисла) Тогда
			Выравнивание = ГоризонтальноеПоложение.Право;
		КонецЕсли;
		ГиперСсылка = Ложь;
		Картинка = Индекс.Картинка;
		ОтображатьКартинку = Не ПустаяСтрока(мКолонка.ДанныеКартинки);
		ОтображатьТекст = Не ПустаяСтрока(мКолонка.Данные);
		ОтображатьФлажок = Не ПустаяСтрока(мКолонка.ДанныеФлажка);
		Текст = Индекс.Текст;
		ТолькоПросмотр = Индекс.Колонка.ТолькоПросмотр;
		Флажок = Индекс.Флажок;
		ЦветТекста = мКолонка.ЦветТекстаПоля;
		ЦветФона = мКолонка.ЦветФонаПоля;
		Шрифт = мКолонка.ШрифтТекста;
		

		// -- Ячейка динамических данных.
		Если (Не мЯчейки = Неопределено) Тогда
			Для Каждого Элемент Из мЯчейки Цикл
				Элемент.Значение.Высвободить();
			КонецЦикла;
		КонецЕсли;
		Если Индекс.Динамическая Тогда
			мЯчейки = Новый СписокЗначений;
			Индекс.Вставить("Динамическая", Ложь);
			
			РаботаСоСпискомЗначений = (ТипЗнч(мЗначение) = мТипСпискаЗначений);
			Для Каждого ДинамическоеЗначение Из мЗначение Цикл
			
				Если РаботаСоСпискомЗначений Тогда
					// ---- Значение.
					ЯчейкаЗначение = ДинамическоеЗначение.Значение;
					// ---- Текст.
					ЯчейкаТекст = ДинамическоеЗначение.Представление;
					Если ПустаяСтрока(ЯчейкаТекст) Тогда
						Если (Не ПустаяСтрока(мКолонка.Формат)) И мТипФормата.СодержитТип(ТипЗнч(ЯчейкаЗначение)) Тогда
							ЯчейкаТекст = Формат(ЯчейкаЗначение, мКолонка.Формат);
						Иначе
							ЯчейкаТекст = Строка(ЯчейкаЗначение);
						КонецЕсли;
					КонецЕсли;
					// ---- Флажок.
					ЯчейкаФлажок = ДинамическоеЗначение.Пометка;
					// ---- Картинка.
					ЯчейкаКартинка = ДинамическоеЗначение.Картинка;
				Иначе
					// ---- Значение.
					ЯчейкаЗначение = ДинамическоеЗначение;
					// ---- Текст.
					Если (Не ПустаяСтрока(мКолонка.Формат)) И мТипФормата.СодержитТип(ТипЗнч(ЯчейкаЗначение)) Тогда
						ЯчейкаТекст = Формат(ЯчейкаЗначение, мКолонка.Формат);
					Иначе
						ЯчейкаТекст = Строка(ЯчейкаЗначение);
					КонецЕсли;
					// ---- Флажок.
					ЯчейкаФлажок = Ложь;
					// ---- Картинка.
					ЯчейкаКартинка = мСлужебнаяКартинка;
				КонецЕсли;
				
				Индекс.Вставить("Значение", ДинамическоеЗначение);
				Индекс.Вставить("Текст", ЯчейкаТекст);
				Индекс.Вставить("Флажок", ЯчейкаФлажок);
				Индекс.Вставить("Картинка", ЯчейкаКартинка);
			
				мЯчейки.Добавить(Обработки.TouchОформлениеЯчейки.Создать().Ячейки(Индекс));
			КонецЦикла;
		Иначе
			мЯчейки = Неопределено;
		КонецЕсли;
		
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	
	Если (Индекс = Неопределено) И (Не мЯчейки = Неопределено) Тогда
		Возврат мЯчейки.Количество();
	КонецЕсли;		
	
	// Получение оформления ячейки динамических ячеек.
	Если (Индекс = Неопределено) Или (мЯчейки = Неопределено) Или (Индекс >= мЯчейки.Количество()) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат мЯчейки[Индекс].Значение;
	
КонецФункции


Процедура Высвободить() Экспорт
	
	// Высвобождение ссылок.
	Если (Не мЯчейки = Неопределено) Тогда
		Для Каждого Элемент Из мЯчейки Цикл
			Элемент.Значение.Высвободить();
		КонецЦикла;
	КонецЕсли;
	
	мЯчейки = Неопределено;
	мКолонка = Неопределено;
	мЗначение = Неопределено;
	
КонецПроцедуры // Высвободить()


// Инициализация переменных.
мСлужебнаяКартинка = Новый Картинка;

мТипЧисла = Тип("Число");
мТипФормата = Новый ОписаниеТипов("Число,Дата,Булево");
мТипФлажка = Новый ОписаниеТипов("Булево,Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
мТипСтруктуры = Тип("Структура");
мТипСпискаЗначений = Тип("СписокЗначений");

// Инициализация значений по умолчанию.
Видимость = Истина;
Выравнивание = ГоризонтальноеПоложение.Авто;
Картинка = Новый Картинка;
ОтображатьТекст = Истина;
ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
ЦветФона = ЦветаСтиля.ЦветФонаПоля;
Шрифт = ШрифтыСтиля.ШрифтТекста;

#КонецЕсли
