
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Локальные переменные
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
	
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (Параметры.Свойство("КлючВарианта") И Параметры.КлючВарианта <> Неопределено);
	КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	НаименованиеОтчета = СокрЛП(ОтчетМетаданные.Представление());
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	НастройкиОтчета = ОтчетОбъект.ПолучитьНастройкиОтчета();
	
	// Параметры печати печати и сохранения положения окна.
	УстановитьКлючиФормы();

	// Параметры формы
	ЭтаФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, ОтчетСсылка");
	ЗаполнитьЗначенияСвойств(ЭтаФормаПараметры, Параметры);
	Если НЕ ЗначениеЗаполнено(ЭтаФормаПараметры.ОтчетСсылка) Тогда
		ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(КлючОбъекта);
		Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
			ЭтаФормаПараметры.ОтчетСсылка = ОтчетИнформация.Отчет;
		Иначе
			ЭтаФормаПараметры.ОтчетСсылка = КлючОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФормаПараметры = Новый ФиксированнаяСтруктура(ЭтаФормаПараметры);
	
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ЭтаФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	// Регистрация элементов, команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПостоянныеРеквизиты.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// Заполнение списка вариантов отчета
	ЗаполнитьСписокВыбораВариантовОтчетаНаСервере();
	// Заполнение списка выбора интервала
	ЗаполнитьСписокВыбораИнтервалаНаСервере();
	// Заполнение периода	
	ЗаполнитьНачальноеЗначениеПериодов();
	// Установка видимости элементов
	УставновитьВидимостьНаСервере();
	// Установка доступности элементов дополнительной аналитики
	ПриИзмененииПереключателяНаСервере();
	
	АналитикаСумма = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Параметры печати печати и сохранения положения окна.
	УстановитьКлючиФормы();
	
	// Заполнение панели настроек
	РежимВариантаОтчета = Истина;
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ЭтаФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	НастройкиЗагрузитьСхему(Настройки, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	// Заголовок
	УставновитьВидимостьНаСервере("ВариантОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр.Имя = "Рестораны" Тогда
		ЭтаФорма.ОтборРесторан = Параметр.Значение;
	ИначеЕсли Параметр.Имя = "ВидыОплатЧекаККМ" Тогда
		ЭтаФорма.ОтборОплата = Параметр.Значение;
	ИначеЕсли Параметр.Имя = "СотрудникиОрганизаций" Тогда
		ЭтаФорма.ОтборСотрудник = Параметр.Значение;
	КонецЕсли;
	
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВариантОтчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КлючТекущегоВарианта = ВыбранноеЗначение;
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "Месяц" Тогда
		ИнтервалПредставление = "Месяц";
	ИначеЕсли ВыбранноеЗначение = "День недели" Тогда
		ИнтервалПредставление = "ДеньНедели";
	ИначеЕсли ВыбранноеЗначение = "День" Тогда
		ИнтервалПредставление = "ПериодДень";
	ИначеЕсли ВыбранноеЗначение = "Час" Тогда
		ИнтервалПредставление = "Час";
	КонецЕсли;
	
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРесторанНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора(Элемент, "Рестораны");
КонецПроцедуры

&НаКлиенте
Процедура ОтборОплатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора(Элемент, "ВидыОплатЧекаККМ");
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорияКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора(Элемент, "КатегорииКонтрагентов");
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора(Элемент, "Организации");
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомпьютерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора(Элемент, "Компьютеры");
КонецПроцедуры

&НаКлиенте
Процедура ОтборСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора(Элемент, "СотрудникиОрганизаций");
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтолНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора(Элемент, "Столы");
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаВидыОплатПриИзменении(Элемент)
	ДопРасшифровкаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаКатегорииГостейПриИзменении(Элемент)
	ДопРасшифровкаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПользователиПриИзменении(Элемент)
	ДопРасшифровкаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСтолыПриИзменении(Элемент)
	ДопРасшифровкаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаОрганизацииПриИзменении(Элемент)
	ДопРасшифровкаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьФлажкиНаКлиенте(Элементы.ГруппаФлаговАналитика.ПодчиненныеЭлементы);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	СнятьФлажкиНаКлиенте(Элементы.ГруппаФлаговАналитика.ПодчиненныеЭлементы);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	СформироватьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоПриИзменении(Элемент)
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗавершениеПриИзменении(Элемент)
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегулированиеЛево(Команда)
	ПериодРегулирование(-1);
	ОбновитьПредставлениеПериода();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегулированиеПраво(Команда)
	ПериодРегулирование(1);
	ОбновитьПредставлениеПериода();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегулирование(Направление = 1)
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ГодДатаНачала	 = НачалоГода(ДобавитьМесяц(ГодДатаНачала,    12*Направление));
		ГодДатаОкончания = КонецГода (ДобавитьМесяц(ГодДатаОкончания, 12*Направление));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		КварталДатаНачала    = НачалоКвартала(ДобавитьМесяц(КварталДатаНачала, 	  3*Направление));
		КварталДатаОкончания = КонецКвартала (ДобавитьМесяц(КварталДатаОкончания, 3*Направление));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		МесяцДатаНачала 	= НачалоМесяца(ДобавитьМесяц(МесяцДатаНачала,	 1*Направление));
		МесяцДатаОкончания  = КонецМесяца (ДобавитьМесяц(МесяцДатаОкончания, 1*Направление));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		ДеньДатаНачала = ДеньДатаНачала + 86400*Направление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеПериода()
	
	ОбновитьЗначениеИнтервала();
	//Элементы.ГруппаВыборПериода.Заголовок = "Установлен период: " + ПериодПрописью(ИнтервалДатаНачало, ИнтервалДатаЗавершение);
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеИнтервала()
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда //Год
		
		ИнтервалДатаНачало     	= ГодДатаНачала;
		ИнтервалДатаЗавершение 	= ГодДатаОкончания;		
		ГодПериод 				= ПериодПрописью(ИнтервалДатаНачало, ИнтервалДатаЗавершение);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда //Квартал
		
		ИнтервалДатаНачало	   	= КварталДатаНачала;
		ИнтервалДатаЗавершение 	= КварталДатаОкончания;
		КварталПериод 			= ПериодПрописью(ИнтервалДатаНачало, ИнтервалДатаЗавершение);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда //Месяц
		
		ИнтервалДатаНачало	   	= МесяцДатаНачала;
		ИнтервалДатаЗавершение 	= МесяцДатаОкончания;
		МесяцПериод 			= ПериодПрописью(ИнтервалДатаНачало, ИнтервалДатаЗавершение);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда //День
		
		ИнтервалДатаНачало	   	= ДеньДатаНачала;
		ИнтервалДатаЗавершение 	= КонецДня(ДеньДатаНачала);
		
	КонецЕсли;
	
	Если Периодичность <> ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка") Тогда //все кроме произвольного
		
		ПериодНачало      = ИнтервалДатаНачало;
		ПериодЗавершение  = ИнтервалДатаЗавершение;
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьЗначениеИнтервала()

&НаСервере
Функция ПериодПрописью(ДатаНачала, ДатаОкончания)
	
	Если ДатаНачала > ДатаОкончания Тогда
		Возврат "---";
	КонецЕсли;
	
	Если ДатаОкончания = Дата("00010101") тогда
		Возврат ПредставлениеПериода(НачалоДня(ДатаНачала), ДатаОкончания, "ФП=Истина");
	Иначе
		Возврат ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания), "ФП=Истина");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачальноеЗначениеПериодов()
	
	Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	
	Если ИнтервалДатаНачало = Дата("00010101") Тогда
		ИнтервалДатаНачало = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если ИнтервалДатаЗавершение = Дата("00010101") Тогда
		ИнтервалДатаЗавершение = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ГодДатаНачала		 = НачалоГода(ИнтервалДатаНачало);
	ГодДатаОкончания 	 = КонецГода(ИнтервалДатаНачало);
	
	КварталДатаНачала    = НачалоКвартала(ИнтервалДатаНачало);
	КварталДатаОкончания = КонецКвартала(ИнтервалДатаНачало);
	
	МесяцДатаНачала		 = НачалоМесяца(ИнтервалДатаНачало);
	МесяцДатаОкончания 	 = КонецМесяца(ИнтервалДатаНачало);
	
	//ДеньДатаНачала		 = ИнтервалДатаНачало;
	ДеньДатаНачала		 = ИнтервалДатаЗавершение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	Период = Неопределено;
	ОбновитьПредставлениеПериода();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Периодичность = Неопределено;
	
	ИнтервалДатаНачало 		= Период.ДатаНачала;
	ИнтервалДатаЗавершение 	= Период.ДатаОкончания;
	
	ОбновитьПредставлениеПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьФильтры(Команда)
	ПоказатьСкрытьНастройки("Фильтры");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьАналитику(Команда)
	ПоказатьСкрытьНастройки("Аналитика");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьНастройки(Элемент = "Фильтры")
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(Элемент, НЕ Элементы["Группа"+Элемент+"Низ"].Видимость);
	УставновитьВидимостьНаСервере(Элемент);
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПриИзменении(Элемент)
	ПриИзмененииПереключателяНаСервере();
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДопАналитикаПриИзменении(Элемент)
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДопРасшифровкаПриИзменении(Элемент)
	ПодчиненныеЭлементыГруппаРасшифровка = Элементы.ГруппаФлаговРасшифровка.ПодчиненныеЭлементы;  
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыГруппаРасшифровка Цикл
		Если ПодчиненныйЭлемент.Имя <> Элемент.Имя Тогда
			Если ЭтаФорма[Элемент.Имя] = Истина Тогда
				ЭтаФорма[ПодчиненныйЭлемент.Имя] = НЕ ЭтаФорма[Элемент.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Инверсия(Команда)
	Элементы.Инверсия.Пометка = НЕ Элементы.Инверсия.Пометка;	
	НастройкиЗагрузитьСхему("СброситьНастройки", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиНаКлиенте(ПодчиненныеЭлементы)
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			УстановитьФлажкиНаКлиенте(ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		Иначе
			ЭтаФорма[ПодчиненныйЭлемент.Имя] = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиНаКлиенте(ПодчиненныеЭлементы)
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			СнятьФлажкиНаКлиенте(ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		Иначе
			ЭтаФорма[ПодчиненныйЭлемент.Имя] = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ОткрытьФормуВыбора(Элемент, ИмяСправочника)
	
	// Получим ключ уникальности открываемой формы
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяСправочника"		, ИмяСправочника);
	ПараметрыОткрытия.Вставить("ИмяПараметра"		, "СписокОтмеченных");
	ПараметрыОткрытия.Вставить("ЗначениеПараметра"	, ЭтаФорма[Элемент.Имя]);
	
	ОткрытьФорму("Отчет.ВыручкаПоСчетам.Форма.ФормаВыбораИзДерева", ПараметрыОткрытия, ЭтаФорма, КлючУникальности);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиИдентификаторКИмени(Идентификатор)
	Возврат СтрЗаменить(Строка(Идентификатор), "-", "");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ЗаполнитьСписокВыбораВариантовОтчетаНаСервере()
	
	СписокВыбора = Элементы.ВариантОтчета.СписокВыбора;
	СписокВыбора.Добавить("Рестораны");
	СписокВыбора.Добавить("Официанты");
	
	ВариантОтчета = СписокВыбора.Получить(0);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораИнтервалаНаСервере()
	
	СписокВыбора = Элементы.Интервал.СписокВыбора;
	СписокВыбора.Добавить("Месяц");
	СписокВыбора.Добавить("День недели");
	СписокВыбора.Добавить("День");
	СписокВыбора.Добавить("Час");
	
	Интервал = СписокВыбора.Получить(2);
	ИнтервалПредставление = "ПериодДень";
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПереключателяНаСервере()
	
	Элементы.ГруппаФлаговАналитика.ТолькоПросмотр = ?(Переключатель = 1, Истина, Ложь);
	Элементы.ГруппаФлаговРасшифровка.ТолькоПросмотр = ?(Переключатель = 0, Истина, Ложь);
	
	Если Элементы.ГруппаФлаговАналитика.ТолькоПросмотр Тогда
		//АналитикаСумма = Неопределено;
		АналитикаСреднийЧек = Неопределено;
		АналитикаКоличествоГостей = Неопределено;
		АналитикаСуммаБезСкидки = Неопределено;
		АналитикаСуммаСкидки = Неопределено;
		АналитикаПроцентСкидки = Неопределено;
		АналитикаСебестоимость = Неопределено;
		АналитикаСуммаНаценки = Неопределено;
		АналитикаПроцентНаценки = Неопределено;
	КонецЕсли;
	
	Если Элементы.ГруппаФлаговРасшифровка.ТолькоПросмотр Тогда
		ГруппировкаОплата = Неопределено;
		ГруппировкаКатегорияГостей = Неопределено;
		ГруппировкаПользователь = Неопределено;
		ГруппировкаСтол = Неопределено;
		ГруппировкаОрганизация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УставновитьВидимостьНаСервере(Изменения = "")
	
	// Фильтры
	Если Изменения = "" ИЛИ Изменения = "Фильтры" Тогда
		ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		ВидимостьФильтров = Неопределено;
		ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("Фильтры", ВидимостьФильтров);
		Если ВидимостьФильтров = Неопределено Тогда
			ВидимостьФильтров = Ложь;
		КонецЕсли;
		Элементы.ГруппаФильтрыНиз.Видимость = ВидимостьФильтров;
		Элементы.ПоказатьСкрытьФильтры.Пометка = ВидимостьФильтров;
		Если ВидимостьФильтров Тогда
			Команды.ПоказатьСкрытьФильтры.Картинка = БиблиотекаКартинок.TouchВверх;
			Команды.ПоказатьСкрытьФильтры.Подсказка = НСтр("ru = 'Скрыть фильтры';uk = 'Приховати фільтри'");
		Иначе
			Команды.ПоказатьСкрытьФильтры.Картинка = БиблиотекаКартинок.TouchВниз;
			Команды.ПоказатьСкрытьФильтры.Подсказка = НСтр("ru = 'Показать фильтры';uk = 'Показати фільтри'");
		КонецЕсли;
	КонецЕсли;
	
	// Аналитика
	Если Изменения = "" ИЛИ Изменения = "Аналитика" Тогда
		ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		ВидимостьАналитики = Неопределено;
		ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("Аналитика", ВидимостьАналитики);
		Если ВидимостьАналитики = Неопределено Тогда
			ВидимостьАналитики = Ложь;
		КонецЕсли;
		Элементы.ГруппаАналитикаНиз.Видимость = ВидимостьАналитики;
		Элементы.ПоказатьСкрытьАналитику.Пометка = ВидимостьАналитики;
		Элементы.КнопкаУстановитьФлажки.Видимость = ВидимостьАналитики;
		Элементы.КнопкаСнятьФлажки.Видимость = ВидимостьАналитики;
		Если ВидимостьАналитики Тогда
			Команды.ПоказатьСкрытьАналитику.Картинка = БиблиотекаКартинок.TouchВверх;
			Команды.ПоказатьСкрытьАналитику.Подсказка = НСтр("ru = 'Скрыть аналитику';uk = 'Приховати аналітику'");
		Иначе
			Команды.ПоказатьСкрытьАналитику.Картинка = БиблиотекаКартинок.TouchВниз;
			Команды.ПоказатьСкрытьАналитику.Подсказка = НСтр("ru = 'Показать аналитику';uk = 'Показати аналітику'");
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок
	Возврат;
	Если Изменения = "" ИЛИ Изменения = "ВариантОтчета" Тогда
		ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			Заголовок = ОтчетНаименованиеТекущегоВарианта;
		Иначе
			Заголовок = НаименованиеОтчета;
		Конецесли;
		Если РежимРасшифровки Тогда
			Заголовок = РежимРасшифровкиПредставлениеВладельца + " (" + НРег(Заголовок) + ")";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиЗагрузитьСхему(НовыеНастройки, ИзмененияИзФормыВариантаОтчета)
	
	Если НовыеНастройки <> Неопределено Тогда
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.Текст     = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	КонецЕсли;
	
	Если ТипЗнч(НовыеНастройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		
		ПользовательскиеНастройкиМодифицированы = Истина;
		
		// Включение флажка "ВариантМодифицирован"...
		Если ИзмененияИзФормыВариантаОтчета = Истина Тогда
			// ... если редактировался вариант отчета.
			ВариантМодифицирован = Истина;
		ИначеЕсли ИзмененияИзФормыВариантаОтчета = Ложь И ВариантМодифицирован = Ложь Тогда
			// ... если в результате изменения пользовательских настроек так же изменился их состав.
			ПользовательскиеНастройкиКД = НовыеНастройки.ПользовательскиеНастройки;
			КоличествоНовыхНастроек = 0;
			Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
			Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
				Если ПользовательскаяНастройка.РежимОтображения = Режимы.Недоступный ИЛИ ПользовательскаяНастройка.РежимОтображения = Режимы.Обычный Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторСКД = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
				ИдентификаторЭлемента = ПривестиИдентификаторКИмени(ИдентификаторСКД);
				Если БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента) = Неопределено Тогда
					ВариантМодифицирован = Истина;
					Прервать;
				КонецЕсли;
				КоличествоНовыхНастроек = КоличествоНовыхНастроек + 1;
			КонецЦикла;
			Если БыстрыйПоискПользовательскихНастроек.Количество() <> КоличествоНовыхНастроек Тогда
				ВариантМодифицирован = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройки.Настройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыеНастройки.ПользовательскиеНастройки);
		
	ИначеЕсли ТипЗнч(НовыеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройки);
	ИначеЕсли ТипЗнч(НовыеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыеНастройки);
	ИначеЕсли НовыеНастройки = "СброситьНастройки" Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетМетаданные = ОтчетОбъект.Метаданные();
		
		// Чтение настроек варианта
		КомпоновщикНастроекКД = Отчет.КомпоновщикНастроек;
		ВариантНастройкиКД = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючТекущегоВарианта);
		Если ВариантНастройкиКД = Неопределено Тогда
			// Из хранилища
			Если ОтчетМетаданные.ХранилищеВариантов = Неопределено Тогда
				МенеджерХранилища = ХранилищеВариантовОтчетов;
			Иначе
				МенеджерХранилища = ХранилищаНастроек[ОтчетМетаданные.ХранилищеВариантов.Имя];
			КонецЕсли;
			НастройкиКД = МенеджерХранилища.Загрузить(КлючОбъекта, КлючТекущегоВарианта);
		Иначе
			// Из метаданных СКД
			НастройкиКД = ВариантНастройкиКД.Настройки;
		КонецЕсли;
		Если НастройкиКД = Неопределено Тогда
			// По умолчанию
			НастройкиКД = ОтчетОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		
		АдресСхемыКД = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКД));
		КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкиКД);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	// Удаление реквизитов
	УдаляемыеРеквизиты = Новый Массив;
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		Если ПостоянныеРеквизиты.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикДоработать()
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Инверсия = Элементы.Инверсия.Пометка;
	
	//Формирование структуры отчета
	// Группировки
	Если НЕ Инверсия Тогда
		ГруппировкаКолонокТаблицы = ИнтервалПредставление;
		Если ВариантОтчета = "Рестораны" Тогда
			ГруппировкаСтрокТаблицы = "Ресторан";
		ИначеЕсли ВариантОтчета = "Официанты" Тогда
			ГруппировкаСтрокТаблицы = "Сотрудник";
		КонецЕсли;
	Иначе
		ГруппировкаСтрокТаблицы = ИнтервалПредставление;
		Если ВариантОтчета = "Рестораны" Тогда
			ГруппировкаКолонокТаблицы = "Ресторан";
		ИначеЕсли ВариантОтчета = "Официанты" Тогда
			ГруппировкаКолонокТаблицы = "Сотрудник";
		КонецЕсли;
	КонецЕсли;
	
	// ТаблицаКомпоновкиДанных
	ТаблицаКомпоновкиДанных = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	ТаблицаКомпоновкиДанных.Использование = Истина;
	ТаблицаКомпоновкиДанных.Имя = КлючТекущегоВарианта;
	
	ДеньНедели = Новый СписокЗначений;
	ДеньНедели.Добавить(6);
	ДеньНедели.Добавить(7);
	
	// Строки 
	Строки = ТаблицаКомпоновкиДанных.Строки.Добавить();
	ДобавитьГруппировку(Строки, ГруппировкаСтрокТаблицы, Истина, ТипГруппировкиКомпоновкиДанных.Иерархия);
	
	// Колонки
	Колонки = ТаблицаКомпоновкиДанных.Колонки.Добавить();
	ДобавитьГруппировку(Колонки, ГруппировкаКолонокТаблицы, Ложь, ТипГруппировкиКомпоновкиДанных.Иерархия);
	
	// Группировки
	ПодчиненныеЭлементыГруппаРасшифровка = Элементы.ГруппаФлаговРасшифровка.ПодчиненныеЭлементы;  
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыГруппаРасшифровка Цикл
		Если ЭтаФорма[ПодчиненныйЭлемент.Имя] = Истина Тогда
			ВыбраннаяГруппировка = СтрЗаменить(ПодчиненныйЭлемент.Имя, "Группировка", "");
			ДобавитьГруппировку(КомпоновщикНастроек, ВыбраннаяГруппировка);
		КонецЕсли;
	КонецЦикла;
	
	// Показатели
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	ГруппаВыбранныхПолейКомпоновкиДанных = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаВыбранныхПолейКомпоновкиДанных.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	// Включение/отключение показателей
	ОбходПодчиненныхЭлементов(ТаблицаКомпоновкиДанных, ГруппаВыбранныхПолейКомпоновкиДанных, Элементы.ГруппаФлаговАналитика.ПодчиненныеЭлементы, ДеньНедели);
	
	// Отборы
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	ПодчиненныеЭлементыГруппаФильтрыНизЛево = Элементы.ГруппаФильтрыНизЛево.ПодчиненныеЭлементы;  
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыГруппаФильтрыНизЛево Цикл
		Если ЗначениеЗаполнено(ЭтаФорма[ПодчиненныйЭлемент.Имя]) Тогда
			ИмяОтбора = СтрЗаменить(ПодчиненныйЭлемент.Имя, "Отбор", "");
			ЗначениеОтбора = ЭтаФорма[ПодчиненныйЭлемент.Имя]; 
			ДобавитьОтбор(КомпоновщикНастроек, ИмяОтбора, ЗначениеОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет()
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроек.ПользовательскиеНастройки;
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("Фильтры", Ложь);
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("Аналитика", Ложь);
	
	УставновитьВидимостьНаСервере();
	
	// Компоновщик
	КомпоновщикДоработать();
	
	// Установка параметров
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", ИнтервалДатаНачало);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", ИнтервалДатаЗавершение);
	
	// Формирование отчета
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Формирование отчета.
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	КлючПараметровПечатиДоКомпоновки = ОтчетТабличныйДокумент.КлючПараметровПечати;
	Попытка
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
		ДопСвойства.Удалить("КлючВарианта");
	Исключение
		ДопСвойства.Удалить("КлючВарианта");
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	ОтчетТабличныйДокумент.КлючПараметровПечати = КлючПараметровПечатиДоКомпоновки;
	
	КоличествоУровнейГруппировокСтрок = ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	КоличествоУровнейГруппировокКолонок = ОтчетТабличныйДокумент.КоличествоУровнейГруппировокКолонок();
	
	ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
	ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокКолонок(0);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура УстановитьКлючиФормы()
	Если ПравоВывода Тогда
		ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.ПараметрыПечатиПоУмолчанию);
		
		Уникальность = КлючОбъекта;
		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			Уникальность = Уникальность + "/КлючВарианта." + КлючТекущегоВарианта;
		КонецЕсли;
		
		ОтчетТабличныйДокумент.КлючПараметровПечати = Уникальность;
		КлючСохраненияПоложенияОкна = Уникальность;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	
	ОписаниеОшибки = ФункцииОтчетовКлиентСервер.КраткоеПредставлениеОшибкиФормированияОтчета(ИнформацияОбОшибке);
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ?(ПустаяСтрока(ОписаниеОшибки), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ОписаниеОшибки);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Добавляет отбор в набор отборов компоновщика или группы отборов
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина, ТипГруппировки = Неопределено) Экспорт
	
	ЭлементСтруктуры = Неопределено;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
		Если ЭлементСтруктуры = Неопределено 
			ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
			И Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
		тогда
		Если ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") тогда 
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Строки; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Колонки; 
			КонецЕсли;
		ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Серии; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Точки; 
			КонецЕсли;
		Иначе
			ЭлементСтруктуры = КомпоновщикНастроек; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
		Если ТипГруппировки <> Неопределено Тогда
			ПолеГруппировки.ТипГруппировки = ТипГруппировки;
		КонецЕсли;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

// Возвращает последний элемент структуры - группировку
Функция ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки = Истина) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

// Возвращает группировку - детальные записи компоновщика настроек
Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
	
	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат ПоследнийЭлементСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция удаляет из компоновщика настроек указанную в параметре группировку, если параметр не указан, удаляет все группировки
Функция УдалитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Элемент = КомпоновщикНастроек.Настройки.Структура[0];
	Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Строки.Количество() > 0 Тогда
			Элемент = Элемент.Строки[0];
		ИначеЕсли Не Строки И Элемент.Колонки.Количество() > 0 Тогда
			Элемент = Элемент.Колонки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Серии.Количество() > 0 Тогда
			Элемент = Элемент.Серии[0];
		ИначеЕсли Не Строки И Элемент.Точки.Количество() > 0 Тогда
			Элемент = Элемент.Точки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Поле = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	Пока Истина Цикл
		Если Элемент.ПоляГруппировки.Элементы.Количество() > 0 
			И Элемент.ПоляГруппировки.Элементы[0].Поле = Поле Тогда
			Элемент.Родитель.Структура.Очистить();
			Прервать;
			Возврат Истина;
		ИначеЕсли Элемент.Структура.Количество() > 0 Тогда
			Элемент = Элемент.Структура[0];
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Функция добавляет выбранное поле в набор выбранных полей
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	Возврат ВыбранноеПоле;
	
КонецФункции

// Удаляет указанное выбранное поле из компоновщика настроек, если поле не указано - очищает все поля
Функция УдалитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если Поле = Неопределено Тогда
		ВыбранныеПоля.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ПолеУдалено = Ложь;
	//Элементы = ПолучитьВыбранныеПоля(ВыбранныеПоля);
	//Для каждого Элемент Из Элементы Цикл
	ЭлементыВыбранныеПоля = ПолучитьВыбранныеПоля(ВыбранныеПоля);
	Для каждого Элемент Из ЭлементыВыбранныеПоля Цикл
		Если Элемент.Использование И Элемент.Поле = Поле Тогда
			Элемент.Использование = Ложь;
			ПолеУдалено = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ПолеУдалено;
	
КонецФункции

// Возвращает массив выбранных полей или групп выбранных полей
Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	ДобавитьВыбранныеПоляВМассивДляПоказателей(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьВыбранныеПоляВМассивДляПоказателей(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь)
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			Если Элемент.Использование тогда
				ДобавитьВыбранныеПоляВМассивДляПоказателей(Элемент.Элементы, МассивПолей, ТолькоГруппы);
			КонецЕсли;
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИмяВыбранногоПоля(ВыбранноеПоле, ВариантОтчета)
	
	Если ВариантОтчета = "Официанты" Тогда
		Если ВыбранноеПоле = "КоличествоКлиентов" Тогда
			ВыбранноеПоле = "КоличествоКлиентовСотрудник";
		ИначеЕсли ВыбранноеПоле = "КоличествоКлиентовСреднее" Тогда
			ВыбранноеПоле = "КоличествоКлиентовСреднееСотрудник";
		ИначеЕсли ВыбранноеПоле = "КЦП" Тогда
			ВыбранноеПоле = "КЦПСотрудник";
		ИначеЕсли ВыбранноеПоле = "СреднийЧек" Тогда
			ВыбранноеПоле = "СреднийЧекСотрудник";
		ИначеЕсли ВыбранноеПоле = "СредняяТранзакция" Тогда
			ВыбранноеПоле = "СредняяТранзакцияСотрудник";
		ИначеЕсли ВыбранноеПоле = "КоличествоТранзакций" Тогда
			ВыбранноеПоле = "КоличествоТранзакцийСотрудник";
		КонецЕсли;
	ИначеЕсли ВариантОтчета = "Рестораны" Тогда
		Если ВыбранноеПоле = "КоличествоКлиентов" Тогда
			ВыбранноеПоле = "КоличествоКлиентовРесторан";
		ИначеЕсли ВыбранноеПоле = "КоличествоТранзакций" Тогда
			ВыбранноеПоле = "КоличествоТранзакцийРесторан";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыбранноеПоле;
	
КонецФункции

Процедура ОбходПодчиненныхЭлементов(ТаблицаКомпоновкиДанных, ГруппаВыбранныхПолейКомпоновкиДанных, ПодчиненныеЭлементы, ДеньНедели)
	
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			ОбходПодчиненныхЭлементов(ТаблицаКомпоновкиДанных, ГруппаВыбранныхПолейКомпоновкиДанных, ПодчиненныйЭлемент.ПодчиненныеЭлементы, ДеньНедели);
		Иначе
			Если ЭтаФорма[ПодчиненныйЭлемент.Имя] = Истина Тогда
				ВыбранноеПоле = СтрЗаменить(ПодчиненныйЭлемент.Имя, "Аналитика", "");
				ВыбранноеПоле = ПолучитьИмяВыбранногоПоля(ВыбранноеПоле, ВариантОтчета);
				ДобавитьВыбранноеПоле(ГруппаВыбранныхПолейКомпоновкиДанных, ВыбранноеПоле);
				// УсловноеОформление
				// Шрифт
				Если ВыбранноеПоле = "Сумма" Тогда
					Шрифт = Новый Шрифт("Arial", 8, Истина);
					ЭлементУсловногоОформленияКомпоновкиДанных = ТаблицаКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
					ЭлементУсловногоОформленияКомпоновкиДанных.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
					Поля = ЭлементУсловногоОформленияКомпоновкиДанных.Поля.Элементы.Добавить();
					Поля.Поле = Новый ПолеКомпоновкиДанных(ВыбранноеПоле);
				КонецЕсли;
				// ЦветФона
				ЭлементУсловногоОформленияКомпоновкиДанных = ТаблицаКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
				ЭлементУсловногоОформленияКомпоновкиДанных.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(192,192,192));
				ДобавитьОтбор(ЭлементУсловногоОформленияКомпоновкиДанных.Отбор, "ДеньНедели", ДеньНедели);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
