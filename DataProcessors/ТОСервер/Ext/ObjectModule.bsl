//#Если Клиент Тогда

///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДанныеСервера;
Перем мИмяКомпьютера;
Перем мНетОшибки;
Перем мПрефиксВесовогоТовара;
Перем мДлинаКодаВесовогоТовара;
Перем мПрефиксДокумента;
Перем мПрефиксВстречки;
Перем мКачествоПустаяСсылка;
Перем мКачествоНовый;
Перем мEAN8;
Перем мEAN13;
Перем мCODE39;
Перем мМагнитнаяКарта;
Перем мХарактеристикиПустаяСсылка;
Перем мСерииПустаяСсылка;
Перем мОшибкаНеизвестныйШтрихкод;
Перем мОшибкаНеизвестно;
Перем мОшибкаПодключения;
Перем мОшибкаНеизвестныйТовар;
Перем мОшибкаЗагрузкиОтчета;

Перем мДисплейПокупателя;
Перем мККМOffLine;
Перем мККМOnLine;
Перем мСчитывательМагнитныхКарт;
Перем мСканерШтрихКода;
Перем мТерминалСбораДанных;
Перем мФискальныйРегистратор;
Перем мЭлектронныеВесы;
Перем мЭлектронныеВесыOffline;
Перем мСчитывателиRFIDМеток;

Перем мОшибкаНеизвестнаяКарта;
Перем мПустаяКассаККМ;
Перем мНетПрав;

Перем мОписаниеОшибки;

Перем мСоответствиеГрупп;

Перем мМодельПодключаемогоТО;

Перем мВнешнееСобытиеОбработано;


Перем мКомпьютер;

Перем мFront2k;

Перем мСимволНачалаПервойДорожки;
Перем мСимволНачалаВторойДорожки;
Перем мСимволНачалаТретейДорожки;
Перем мСимволОкончанияДорожки;

Перем мДК_Инициализирована;
Перем мДК_ТаблицаСоответствий;
Перем мДК_ТаблицаШаблоновКодов;
//Перем мДК_ДисконтныеКарты;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ)

Функция ПоключитьВидТО(Клиент,ВидТО)
	Если Клиент.ПоддерживаетсяВидТО(ВидТО) Тогда
		Попытка
			Результат = ПодключитьОборудование(ВидТО, Клиент);
			Если ЗначениеЗаполнено(Результат) Тогда
				Ошибка = ПолучитьТекстОшибкиТО(Результат);
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				
				Возврат мОшибкаНеизвестно;
			КонецЕсли;
		Исключение
			Возврат мОшибкаПодключения;
		КонецПопытки;
	КонецЕсли;	
	
	Возврат мНетОшибки;
КонецФункции

// Функция осуществляет подключение клиента к серверу.
//
// Параметры:
//  Клиент                         – <*>
//                                 - Клиент, планирующий взаимодействие с механизмом.
//                                   В случае, если Клиент = Неопределено,
//                                   считается, что клиентом является модуль
//                                   приложения.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьКлиента(Клиент, ВидТО = Неопределено) Экспорт
	
	Результат = мНетОшибки;
	КонечныйРезультат = мНетОшибки;
	
	Клиенты   = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Если Клиенты[Клиент] <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ВидТО = Неопределено Тогда
		Для Каждого ВидТО Из Перечисления.ВидыТорговогоОборудования Цикл
			КонечныйРезультат = ПоключитьВидТО(Клиент, ВидТО);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВидТО) = Тип("СписокЗначений") Тогда
		Для Каждого ЗначениеТО Из ВидТО Цикл
			КонечныйРезультат = ПоключитьВидТО(Клиент, ЗначениеТО.Значение);
		КонецЦикла;
	Иначе		
		КонечныйРезультат = ПоключитьВидТО(Клиент, ВидТО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонечныйРезультат) Тогда
		мОписаниеОшибки = "Произошла ошибка при подключении оборудования";
		Результат = КонечныйРезультат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПодключитьКлиента()

// Процедура осуществляет отключение клиента от сервера.
//
// Параметры:
//  Клиент                         – <*>
//                                 - Клиент, планирующий взаимодействие с механизмом.
//                                   В случае, если Клиент = Неопределено,
//                                   считается, что клиентом является модуль
//                                   приложения.
//
Процедура ОтключитьКлиента(Клиент) Экспорт
	
	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Если Клиенты[Клиент] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОборудование(Клиент);
	
КонецПроцедуры // ОтключитьКлиента()

// Функция осуществляет обработку внешнего события, информация о котором была
// получена клиентом.
//
// Параметры:
//  Событие                        - <Строка>
//                                 - Строка, идентифицирующая внешнее событие. Передаётся в
//                                   качестве параметра обработчику «ВнешнееСобытие».
//
//  Данные                         - <Строка>
//                                 - Данные, связанные с событием. Также передаётся в
//                                   качестве параметра обработчику «ВнешнееСобытие».
//
//  Клиент                         - <*>
//                                 - Клиент-получатель внешнего события.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьВнешнееСобытие(Событие, Данные, Клиент) Экспорт
	
	// Александр Переверзев 23.04.2012 13:40:00 
	// Проверяем существуют ли модальные формы и выполняем события только в них.
	
	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Для Каждого ПроверяемыйКлиент Из Клиенты Цикл
		Если (Не ПроверяемыйКлиент.Значение = Неопределено) И ПроверяемыйКлиент.Ключ.МодальныйРежим Тогда
			
			Если Клиент.МодальныйРежим Тогда
				Прервать;
			Иначе
				Возврат мНетОшибки;
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла; 
	
	// Александр Переверзев 23.04.2012 13:40:00 
	
	
	Результат = мНетОшибки;
	
	//Костенюк Александр-Старт 16.05.2012
	// Эта проверка неверна, т.к. в поле "Данные" содержится только номер посылаемого сообщения, а не сами данные с устройства
	////Когда СканерШК и Ридер подключены вместе, то события разделяем	
	//Если Событие="BarCodeValue" Тогда
	//	СпецСимвРидера = Новый Массив(4);    
	//	СпецСимвРидера[0] = "%";     
	//	СпецСимвРидера[1] = "?";
	//	СпецСимвРидера[2] = ";";
	//	СпецСимвРидера[3] = "+";
	//	Для я=0 по СпецСимвРидера.Количество()-1 Цикл	
	//		Если Найти(Данные,СпецСимвРидера[я])<>0 Тогда
	//			Событие = "MagneticStripeCardValue";
	//			Прервать;
	//		КонецЕсли;	
	//	КонецЦикла;		
	//КонецЕсли;
	//Костенюк Александр-Финиш 16.05.2012
	
	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	События = Клиенты.Получить(Клиент);
	Если События <> Неопределено Тогда
		
		//Костенюк Александр-Старт 16.05.2012
		// При одновременно подключенных устройствах Сканер и Ридер
		// драйвер при посылке данных не разделят эти события как разные
		// поэтому будем определять вид события по переданным данным с устройства
		Если Событие = "BarCodeValue" ИЛИ Событие = "MagneticStripeCardValue" Тогда
			
			ТекСобытие = События.Найти(Событие, "ИмяСобытия");
			
			Если ТекСобытие <> Неопределено Тогда
				
				Оборудование = ПолучитьПараметрСервераТО("Оборудование",    "ТаблицаЗначений");
				ТО           = Оборудование.Найти(ТекСобытие.Идентификатор, "Идентификатор");
				ВидТО        = ТО.Вид;
				Обработка    = ТО.Обработка;
				Объект       = ТО.Объект;
				
				Попытка
					СтрокаДанных = СокрЛП(Объект.Драйвер.Данные);
				Исключение
					СтрокаДанных = "";
				КонецПопытки;
				
				// Некоторые ридеры после считывания возвращают не строку, а цифровую последовательность
				// Поэтому преобразуем ее в обычную строку
				// ВАЖНО!!! При одновременном подключении сканера и такого ридера возникнет проблема, т.к. неверно распознаются события
				ЦифроваяПоследовательность = Неопределено;
				Объект.Параметры.Свойство("ЦифроваяПоследовательность", ЦифроваяПоследовательность);
				Если НЕ ЦифроваяПоследовательность = Неопределено Тогда
					Если ЦифроваяПоследовательность Тогда
						Индекс = 1; 
						Длина = СтрДлина(СтрокаДанных);
						Пока (Индекс <= Длина) Цикл
							//Код = Сред(СтрокаДанных, Индекс, 2);
							//Костенюк Александр-Старт 31.07.2012
							Если Объект.Параметры.Уникод2 Тогда
								Код = Сред(СтрокаДанных, Индекс, 2);
							ИначеЕсли Объект.Параметры.Уникод3 Тогда
								Код = Сред(СтрокаДанных, Индекс, 3);
							КонецЕсли;
							//Костенюк Александр-Финиш 31.07.2012
							Попытка
								Символ = Символ(Число(Код));
								СтрокаДанных = Лев(СтрокаДанных, Индекс - 1) + Символ + Прав(СтрокаДанных, Длина - Индекс - 1);
								Длина = Длина - 1;
								//Костенюк Александр-Старт 31.07.2012
								Если Объект.Параметры.Уникод2 Тогда
									СтрокаДанных = Лев(СтрокаДанных, Индекс - 1) + Символ + Прав(СтрокаДанных, Длина - Индекс - 1);
									Длина = Длина - 1;
								ИначеЕсли Объект.Параметры.Уникод3 Тогда
									СтрокаДанных = Лев(СтрокаДанных, Индекс - 1) + Символ + Прав(СтрокаДанных, Длина - Индекс - 2);
									Длина = Длина - 2;
								КонецЕсли;
								//Костенюк Александр-Финиш 31.07.2012
							Исключение
								Индекс = Индекс + 1;
							КонецПопытки;
							Индекс = Индекс + 1;
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли;
				
				СпецСимвРидера = Новый Массив(4);    
				СпецСимвРидера[0] = "%";     
				СпецСимвРидера[1] = "?";
				СпецСимвРидера[2] = ";";
				СпецСимвРидера[3] = "+";
				
				Для Инд = 0 По (СпецСимвРидера.Количество()-1) Цикл	
					Если Найти(СтрокаДанных, СпецСимвРидера[Инд]) <> 0 Тогда
						Событие = "MagneticStripeCardValue";
						Прервать;
					Иначе
						Событие = "BarCodeValue";
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЕсли;
		//Костенюк Александр-Финиш 16.05.2012
		
		ТекСобытие = События.Найти(Событие, "ИмяСобытия");
		Если ТекСобытие <> Неопределено Тогда
			Оборудование = ПолучитьПараметрСервераТО("Оборудование",    "ТаблицаЗначений");
			ТО           = Оборудование.Найти(ТекСобытие.Идентификатор, "Идентификатор");
			ВидТО        = ТО.Вид;
			Обработка    = ТО.Обработка;
			Объект       = ТО.Объект;
			Результат = ОбработатьВнешнееСобытиеВнутр(ВидТО, Обработка, Объект,
			Клиент, Событие, Данные,
			ТекСобытие.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет обработку строки штрихкода, введённой вручную.
//
// Параметры:
//  Штрихкод                       - <Строка>
//                                 - Введённый пользователем штрихкод.
//
//  Клиент                         - <*>
//                                 - Клиент.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьВведенныйШтрихкод(Штрихкод, Клиент) Экспорт
	
	Результат = мНетОшибки;
	
	ТипШК     = Неопределено;
	ШК        = Штрихкод;
	СШК       = "00000000-0000-0000-0000-000000000000";
	
	ЭтоITF14 = РаботаСТорговымОборудованием.ТипШтрихкодаITF14ТО(ШК);
	
	Если НЕ ЗначениеЗаполнено(ТипШК) Тогда
		Если      РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(ШК) Тогда
			ТипШК = мEAN8;
		ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
			ТипШК = мEAN13;
		ИначеЕсли Не ЭтоITF14 И РаботаСТорговымОборудованием.ТипШтрихкодаCODE39ТО(ШК) Тогда
			ТипШК = мCODE39;
		КонецЕсли;
	КонецЕсли;
	
	//TODO: Может быть штрих-код документа 
	
	//TODO: Может быть штрих-код встречки (из регистр СостояниеРабочихЦентровРеализацийТоваровУслуг)
	
	
	//Если ЗначениеЗаполнено(мПрефиксВесовогоТовара)
	//	 И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара)
	//	 И ТипШК = мEAN13
	//	 И Лев(ШК, 2) = "2" + мПрефиксВесовогоТовара Тогда
	
	//	КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
	//	КоличествоТовара = Сред(ШК, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);
	//	Запрос           = Новый Запрос(
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|    РегКВТ.Номенклатура                         КАК Номенклатура,
	//	|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	//	|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	//	|    " + КоличествоТовара + " / 1000             КАК Количество,
	//	|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
	//	|    ВЫБОР
	//	|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
	//	|            &КачествоНовый
	//	|        ИНАЧЕ
	//	|            РегКВТ.Качество
	//	|    КОНЕЦ                                       КАК Качество
	//	|ИЗ
	//	|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
	//	|ГДЕ
	//	|    РегКВТ.Код = &Код");
	//	Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
	//	Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
	//	Запрос.УстановитьПараметр("Код",                  Число(КодТовара));
	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		РезультатЗапроса = РезультатЗапроса.Выбрать();
	//		РезультатЗапроса.Следующий();
	
	//		Ответ = Клиент.СШКНоменклатура(РезультатЗапроса.Номенклатура,
	//									   РезультатЗапроса.ХарактеристикаНоменклатуры,
	//									   РезультатЗапроса.СерияНоменклатуры,
	//									   РезультатЗапроса.Качество,
	//									   РезультатЗапроса.ЕдиницаИзмерения,
	//									   РезультатЗапроса.Количество,
	//									   СШК);
	//		Если Ответ Тогда
	//			Возврат Результат;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    РегШК.Владелец                   КАК Владелец,
	|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
	|    РегШК.Качество                   КАК Качество
	|ИЗ
	|    РегистрСведений.Штрихкоды        КАК РегШК
	|ГДЕ
	|    РегШК.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", ШК);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатЗапроса = РезультатЗапроса.Выбрать();
		РезультатЗапроса.Следующий();
		Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.ИнформационныеКарты")
			//.. Начало изменения Dim)on  16 октября 2013 г. 20:26:14
			// +
			Или ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.РегистрационныеКарты") Тогда
			//
			//.. Конец изменения Dim)on  16 октября 2013 г. 20:26:14
			Ответ = Клиент.СШКИнформационнаяКарта(РезультатЗапроса.Владелец, СШК);
			Если Ответ Тогда
				Возврат Результат;
			КонецЕсли;
		Иначе // Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура")
			Ответ = Клиент.СШКНоменклатура(РезультатЗапроса.Владелец,
			//РезультатЗапроса.Штрихкод,
			//РезультатЗапроса.ТипШтрихкода,
			1,
			СШК);
			Если Ответ Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = Клиент.СШКНеизвестныйКод(ШК, ТипШК, СШК);
	Если Ответ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = мОшибкаНеизвестныйШтрихкод;
	Клиент.СШКОшибка(Результат, ШК, ТипШК, СШК);
	
	Возврат Результат;
	
КонецФункции // ОбработатьВведенныйШтрихкод()

// Функция возвращает список идентификаторов подключенных устройств заданного вида.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информацию о котором необходимо получить.
//
//  КассаККМ - <СправочникСсылка.КассыККМ>
//           - Касса ККМ, к которой подключено данное оборудование.
//             В случае, если данный параметр соответствует пустой ссылке,
//             будет возвращено всё торговое оборудование указанного вида.
//
// Возвращаемое значение:
//  <Массив> - Список идентификаторов устройств.
//
Функция ПолучитьСписокУстройств(Вид, КассаККМ = Неопределено) Экспорт
	
	НеЗаданаКассаККМ = НЕ ЗначениеЗаполнено(КассаККМ);
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|    РегТО.Идентификатор КАК Идентификатор
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ"; 
	
	//Принтеры встречек подключаем от всех компьютеров
	Если Вид = Перечисления.ВидыТорговогоОборудования.ПринтерыВстречек Тогда
		Запрос.Текст = Запрос.Текст + "
		|    РегТО.Модель.ОбработкаОбслуживания.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид",                 Вид);					
	Иначе			
		Запрос.Текст = Запрос.Текст + "
		|    РегТО.Модель.ОбработкаОбслуживания.Вид = &Вид
		|    И РегТО.Компьютер = &Компьютер
		|" + ?(НеЗаданаКассаККМ, "", "    И РегТО.КассаККМ = &КассаККМ");	
		Запрос.УстановитьПараметр("Вид", Вид);
		Запрос.УстановитьПараметр("Компьютер"          , ПараметрыСеанса.ТекущийКомпьютер);
		Если Не НеЗаданаКассаККМ Тогда
			Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		КонецЕсли;		
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат Результат;
	
КонецФункции // ПолучитьСписокУстройств()

// Функция возвращает представление экземпляра торгового оборудования, пригодное
// для отображения в интерфейсе пользователя.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор, представление которого запрашивается.
//
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Выходной параметр; после удачного завершения работы данной
//                                   функции данный параметр будет содержать вид торгового
//                                   оборудования, к которому принадлежит устройство, соответствующее
//                                   переданному идентификатору.
//
//  Представление                  - <Строка>
//                                 - Выходной параметр; после удачного завершения работы данной
//                                   функции данный параметр будет содержать представление экземпляра
//                                   торгового оборудования, соответствующее переданному
//                                   идентификатору.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПолучитьПредставлениеУстройства(Идентификатор, Вид, Представление) Экспорт
	
	Результат = мНетОшибки;
	Запрос    = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|    РегТО.Модель.Наименование              КАК Наименование,
	|    РегТО.Модель.ОбработкаОбслуживания.Вид КАК Вид
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|    РегТО.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = мОшибкаНеизвестно;
	Иначе
		РезультатЗапроса = РезультатЗапроса.Выгрузить()[0];
		Вид              = РезультатЗапроса.Вид;
		Представление    = РезультатЗапроса.Наименование;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПредставлениеУстройства()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ДИСПЛЕИ ПОКУПАТЕЛЯ)

// Функция осуществляет вывод строки на дисплей покупателя.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор дисплея покупателя.
//
//  Данные                         - <Строка>
//                                 - Строка, которую необходимо отобразить на
//                                   дисплеях покупателя.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ВывестиСтрокуНаДисплейПокупателя(Идентификатор, Данные) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.Вывод(Объект, Данные);
	КонецЕсли;
	
	мОписаниеОшибки = Объект.ОписаниеОшибки;
	Возврат Результат;
	
КонецФункции // ВывестиСтрокуНаДисплейПокупателя()

// Функция очищает дисплей покупателя.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор дисплея покупателя.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОчиститьДисплейПокупателя(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.Очистить(Объект);
	КонецЕсли;
	
	мОписаниеОшибки = Объект.ОписаниеОшибки;
	Возврат Результат;
	
КонецФункции // ОчиститьДисплейПокупателя()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ЭЛЕКТРОННЫЕ ВЕСЫ)

// Функция задаёт вес тары на электронных весах.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
//  ВесТары                        - <Число>, <Неопределено>
//                                 - В случае, если значение не задано
//                                   («Неопределено»), тогда фиксируется вес тары.
//                                   Иначе – он задаётся равным данному параметру.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ТарированиеЭВ(Идентификатор, ВесТары = Неопределено) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Если ВесТары = Неопределено Тогда
			Вес       = Неопределено;
			Результат = Обработка.Вес(Объект, Вес);
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = Обработка.Тарирование(Объект, Вес);
			КонецЕсли;
		Иначе
			Результат = Обработка.Тарирование(Объект, ВесТары);
		КонецЕсли;
	КонецЕсли;
	
	мОписаниеОшибки = Объект.ОписаниеОшибки;
	Возврат Результат;
	
КонецФункции // ТарированиеЭВ()

// Функция осуществляет получение веса от электронных весов.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
//  Вес                            - <Число>
//                                 - Выходной параметр; вес товара.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьВесЭВ(Идентификатор, Вес) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.Вес(Объект, Вес);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("электронных весов");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВесЭВ()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ВЕСЫ OFF-LINE)

// Функция инициализирует выгрузку в весы, подключенные в режиме Off-Line.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция НачатьВыгрузкуВесыOffline(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.НачатьВыгрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("электронных весов в режиме Off-Line");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НачатьВыгрузкуВесыOffline()

// Функция осуществляет выгрузку позиции в весы, подключенные в режиме Off-Line.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
//  PLU                            - <Число>
//                                 - Номер PLU.
//
//  КодТовара                      - <Число>
//                                 - Код товара.
//
//  Наименование                   - <Строка>
//                                 - Наименование номенклатуры.
//
//  Цена                           - <Число>
//                                 - Цена номенклатуры.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьПозициюВесыOffline(Идентификатор, PLU, КодТовара, Наименование, Цена) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат       = Обработка.Выгрузить(Объект, PLU, КодТовара, Наименование, Цена);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("электронных весов в режиме Off-Line");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВыгрузитьПозициюВесыOffline()

// Функция деинициализирует выгрузку в весы, подключенные в режиме Off-Line.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗавершитьВыгрузкуВесыOffline(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗавершитьВыгрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("электронных весов в режиме Off-Line");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗавершитьВыгрузкуВесыOffline()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ТСД)

// Функция инициализирует выгрузку в терминал сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция НачатьВыгрузкуТСД(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.НачатьВыгрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НачатьВыгрузкуТСД()

// Функция осуществляет выгрузку строки в терминал сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
//  Штрихкод                       - <Строка>
//                                 - Штрихкод товара.
//
//  Номенклатура                   - <СправочникСсылка.Номенклатура>
//                                 - Номенклатура.
//
//  ЕдиницаИзмерения               - <СправочникСсылка.ЕдиницыИзмерения>
//                                 - Единица измерения номенклатуры.
//
//  ХарактеристикаНоменклатуры     - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                 - Характеристика номенклатуры.
//
//  СерияНоменклатуры              - <СправочникСсылка.СерииНоменклатуры>
//                                 - Серия номенклатуры.
//
//  Качество                       - <СправочникСсылка.Качество>
//                                 - Качество.
//
//  Цена                           - <Число>
//                                 - Цена номенклатуры.
//
//  Количество                     - <Число>
//                                 - Количество номенклатуры.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьСтрокуТСД(Идентификатор, Штрихкод, Номенклатура, ЕдиницаИзмерения,
	ХарактеристикаНоменклатуры, СерияНоменклатуры,
	Качество, Цена, Количество) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ВыгрузитьСтроку(Объект, Штрихкод, Номенклатура,
		ЕдиницаИзмерения, ХарактеристикаНоменклатуры,
		СерияНоменклатуры, Качество, Цена, Количество);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВыгрузитьСтрокуТСД()

// Функция деинициализирует выгрузку в терминал сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗавершитьВыгрузкуТСД(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗавершитьВыгрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗавершитьВыгрузкуТСД()

// Функция инициализирует загрузку из терминала сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
//  Количество                     - <Число>
//                                 - Выходной параметр; количество записей
//                                   в терминале.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция НачатьЗагрузкуТСД(Идентификатор, Количество) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.НачатьЗагрузку(Объект, Количество);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НачатьЗагрузкуТСД()

// Функция осуществляет загрузку позиции из терминала сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
//  ДанныеИзТСД                     - Таблица значений, в которую будет добавлена загруженная строка.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ЗагрузитьСтрокуТСД(Идентификатор, ДанныеИзТСД)
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ШК         = Неопределено;
		Количество = Неопределено;
		
		Результат = Обработка.ЗагрузитьСтроку(Объект, ШК, Количество);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			НоваяСтрока = ДанныеИзТСД.Добавить();
			НоваяСтрока.ШК         = ШК;
			НоваяСтрока.Количество = Количество;
		КонецЕсли;
		
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьСтрокуТСД()

// Функция деинициализирует загрузку из терминала сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗавершитьЗагрузкуТСД(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗавершитьЗагрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗавершитьЗагрузкуТСД()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ФР)

// Функция осуществляет печать чека для приходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаПКО(Идентификатор, Пароль, НомерЧека, НомерСмены,
	ОписаниеПлатежа, СуммаНал, СуммаБезнал) Экспорт
	
	Результат = мНетОшибки;
	
	Результат = ПечатьЧекаПКОРКО(Идентификатор, Ложь, Пароль, НомерЧека, НомерСмены,
	ОписаниеПлатежа, СуммаНал, СуммаБезнал);
	
	Возврат Результат;
	
КонецФункции // ПечатьЧекаПКО()

// Функция осуществляет печать чека для расходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаРКО(Идентификатор, Пароль, НомерЧека, НомерСмены,
	ОписаниеПлатежа, СуммаНал, СуммаБезнал) Экспорт
	
	Результат = мНетОшибки;
	
	Результат = ПечатьЧекаПКОРКО(Идентификатор, Истина, Пароль, НомерЧека, НомерСмены,
	ОписаниеПлатежа, СуммаНал, СуммаБезнал);
	
	Возврат Результат;
	
КонецФункции // ПечатьЧекаРКО()



// Функция осуществляет печать чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеЧека                   - <ТаблицаЗначений>
//                                 - Описание чека. Таблица имеет следующие колонки:
//                                     Наименование - <Строка>
//                                                  - Наименование позиции.
//                                     НомерСекции  - <Число>
//                                                  - Номер секции.
//                                     Цена         - <Число>
//                                                  - Цена за единицу.
//                                     Количество   - <Число>
//                                                  - Количество единиц.
//                                     Скидка       - <Число>
//                                                  - Процент скидки (>0) или наценки (<0).
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
//  ПризнакВозврата                - <Булево>
//                                 - Признак необходимости печати чека на возврат.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧека(Идентификатор, Пароль, НомерЧека, НомерСмены,
	//ОписаниеЧека, СуммаНал, СуммаБезнал, ПризнакВозврата, Оплата=Неопределено) Экспорт
	//Костенюк Александр-Старт 29.10.2012
	ОписаниеЧека, СуммаНал, СуммаБезнал, ПризнакВозврата, Оплата=Неопределено, Организация = Неопределено, Ответственный = Неопределено, ДокументОбъект = Неопределено) Экспорт
	//Костенюк Александр-Финиш 29.10.2012
	
	Для каждого Стр Из ОписаниеЧека Цикл
		Если ЗначениеЗаполнено(Стр.Ссылка.Заменяемый) Тогда
			Стр.Код = Стр.Ссылка.Заменяемый.Артикул;
			Стр.Наименование =Стр.Ссылка.Заменяемый.Наименование;
			Стр.Ссылка = Стр.Ссылка.Заменяемый;
		КонецЕсли;
	КонецЦикла;
	
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Попытка	
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			// Проверим использование кода
			фИспользоватьКод = Объект.Параметры.Свойство("ИспользоватьКод");		
			//Результат = Обработка.ОткрытьЧек(Объект, Пароль, ПризнакВозврата, НомерЧека, НомерСмены);
			//Костенюк Александр-Старт 25.05.2012
			// Передаем Ресторан для печати контактной информации в товарном чеке 
			Результат = Обработка.ОткрытьЧек(Объект, Пароль, ПризнакВозврата, НомерЧека, НомерСмены, , ОписаниеЧека[0].Ресторан, Организация, ДокументОбъект);
			//Костенюк Александр-Финиш 25.05.2012
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Позиция = Неопределено;
				Для Каждого Позиция Из ОписаниеЧека Цикл
					Если фИспользоватьКод Тогда
						Результат = Обработка.ПечататьСтроку(Объект,
						Позиция.Наименование,
						Позиция.Количество,
						Позиция.Цена,
						Позиция.Скидка,
						Позиция.НомерСекции,
						Позиция.НалоговаяГруппа, 
						Позиция.СтавкаНДС, 
						Позиция.Ссылка,
						Позиция.Ссылка.Код);
						//Позиция.Код);
						//?(Позиция.Код="",0,Число(Позиция.Код)));
					Иначе
						Результат = Обработка.ПечататьСтроку(Объект,
						Позиция.Наименование,
						Позиция.Количество,
						Позиция.Цена,
						Позиция.Скидка,
						Позиция.НомерСекции,
						Позиция.НалоговаяГруппа, 
						Позиция.СтавкаНДС,
						Позиция.Ссылка);
					КонецЕсли; 
					Если ЗначениеЗаполнено(Результат) Тогда
						Прервать;
					КонецЕсли;				
				КонецЦикла;
				Если НЕ ЗначениеЗаполнено(Результат) Тогда										
					КодВидаОплаты = 3;//по умолчанию
					Если НЕ(Оплата=Неопределено) Тогда
						Если Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
							КодВидаОплаты = 3;
						ИначеЕсли Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
							КодВидаОплаты = 0;
						ИначеЕсли Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
							КодВидаОплаты = 1;		
						ИначеЕсли Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Чек Тогда
							КодВидаОплаты = 2;	
						ИначеЕсли  Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БезналичныйРасчет Тогда
							КодВидаОплаты = 4;
						КонецЕсли;
					КонецЕсли;						
					Сдача=0;				
					//Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал, КодВидаОплаты, Сдача);
					Скидка = ОписаниеЧека.Итог("Скидка");
					Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал, КодВидаОплаты, Сдача, Ответственный, Скидка); //Костенюк Александр 04.10.2013
				КонецЕсли;
			КонецЕсли;
			
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Иначе
			мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		КонецЕсли;
	Исключение		
		Ответ     = "Не удалось напечатать чек с установленными параметрами!";
		Отказ     = Истина;
		Результат = Перечисления.ТООшибкиОбщие.ОшибкаПараметровНастройки;
	КонецПопытки;
	
	//Освободим память и порт
	Обработка.Отключить(Объект);
	Обработка = Неопределено;
	Объект    = Неопределено;
	
	Возврат Результат;
	
КонецФункции // ПечатьЧека()

// Функция осуществляет аннулирование чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция АннулироватьЧек(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Результат = Обработка.АннулироватьЧек(Объект);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // АннулироватьЧек()

// Функция осуществляет внесение суммы в ФР.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  Сумма                          - <Число>
//                                 - Вносимая (>0) или изымаемая (<0) сумма.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВнестиСумму(Идентификатор, Пароль, Сумма) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Результат = Обработка.Сумма(Объект, Пароль, Сумма);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВнестиСумму()

// Функция осуществляет снятие отчёта без гашения.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОтчетБезГашения(Идентификатор, Пароль) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Результат = Обработка.XОтчет(Объект, Пароль, Неопределено, Неопределено);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтчетБезГашения()

// Функция осуществляет снятие отчёта с гашением.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОтчетСГашением(Идентификатор, Пароль) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			НомерЧека  = Неопределено;
			НомерСмены = Неопределено;
			Результат  = Обработка.ZОтчет(Объект, Пароль, НомерЧека, НомерСмены);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтчетСГашением()


Функция ПечатьЧекаНулевого(Идентификатор, Пароль, НомерЧека, НомерСмены) Экспорт
	
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			НомерЧека  = Неопределено;
			НомерСмены = Неопределено;
			Результат  = Обработка.ПечатьНулевогоЧека(Объект, Пароль, НомерЧека, НомерСмены);
			мОписаниеОшибки = "";
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;		 
	
	Возврат Результат;
	
	
КонецФункции // ПечатьЧекаНулевого()

Функция ОтчетПоАртикулам(Идентификатор, Пароль, КодТовараНач="", КодТовараКон="") Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			НомерЧека  = Неопределено;
			НомерСмены = Неопределено;
			Результат  = Обработка.ОтчетПоАртикулам(Объект, Пароль, НомерЧека, НомерСмены, КодТовараНач, КодТовараКон);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;				
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтчетПоАртикулам()

Функция ОтчетПоНомерам(Идентификатор, Пароль, НомерНачала, НомерОкончания) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			НомерЧека  = Неопределено;
			НомерСмены = Неопределено;
			Результат  = Обработка.ОтчетПоНомерамZсчетов(Объект, Пароль, НомерЧека, НомерСмены, НомерНачала, НомерОкончания);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтчетПоНомерам()

Функция ОтчетЗаПериод(Идентификатор, Пароль, ДатаНачала, ДатаОкончания, Краткий = Ложь) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			НомерЧека  = Неопределено;
			НомерСмены = Неопределено;
			Результат  = Обработка.ОтчетЗаПериод(Объект, Пароль, НомерЧека, НомерСмены, ДатаНачала, ДатаОкончания, Краткий);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтчетЗаПериод()

Функция ДатаВремя(Идентификатор, Пароль, Дата = Неопределено, Время = Неопределено) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Если ЗначениеЗаполнено(Дата) Или ЗначениеЗаполнено(Время) Тогда			
				Результат  = Обработка.УстановитьДатуВремя(Объект, Пароль, Дата, Время);
			Иначе
				Результат  = Обработка.ПолучитьДатуВремя(Объект, Пароль, Дата, Время);
			КонецЕсли;
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;
		КонецПопытки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДатаВремя()

// Функция осуществляет проверку работы оборудования
// Ковтун А. 30/11/2009
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
Функция ПроверкаОборудования(Идентификатор) Экспорт
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	//TODO:
	//Написать процедуру "Проверка оборудования". 
	//Список организаций, список касс + проверить что оборудование работает (например, получить время). 
	//Также проверить всем ли ставкам НДС соответствует налоговая группа. 
	ТекВремя=0;
	Результат  = Обработка.ПолучитьДатуВремя(Объект, ТекВремя);
	
	Возврат Результат;
КонецФункции	

//Костенюк Александр-Старт 15.11.2012
Функция РегистрацияКассира(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Результат  = Обработка.РегистрацияКассира(Объект);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;				
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтчетПоАртикулам()
//Костенюк Александр-Финиш 15.11.2012

//Костенюк Александр-Старт 15.11.2012
Функция РазрегистрацияКассира(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Результат  = Обработка.РазрегистрацияКассира(Объект);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;				
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтчетПоАртикулам()
//Костенюк Александр-Финиш 15.11.2012


///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ККМ OFF-LINE)

// Функция осуществляет получение параметров выгрузки данных в ККМ Off-Line.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор ККМ, подключаемой в режиме
//                                   Off-Line.
//
//  НеобходимШтрихкод              - <Булево>
//                                 - Выходной параметр; признак необходимости
//                                   выгружать в ККМ только те товары, для
//                                   которых назначен штрихкод.
//
//  ВесовойТовар                   - <Булево>
//                                 - Выходной параметр; признак возможности
//                                   работы ККМ с весовым товаром.
//
//  ТипыШтрихкодов                 - <Массив>
//                                 - Массив типов штрихкодов, поддерживаемых
//                                   ККМ.
//
//  КассаККМ                       - <СправочникСсылка.КассыККМ>
//                                 - КассаККМ, с которой связано данное
//                                   устройство.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьПараметрыВыгрузкиOffline(Идентификатор, НеобходимШтрихкод,
	ВесовойТовар, ТипыШтрихкодов,
	КассаККМ) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека  = Неопределено;
		НомерСмены = Неопределено;
		Результат  = Обработка.ПолучитьПараметрыВыгрузки(Объект, НеобходимШтрихкод,
		ВесовойТовар, ТипыШтрихкодов);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			КассаККМ = ПолучитьКассуККМ(Идентификатор);
		Иначе
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ККМ Off-Line");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПараметрыВыгрузкиOffline()

// Функция осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Off-Line.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор ККМ, подключаемой в режиме
//                                   Off-Line.
//
//  Товары                         - <ТаблицаЗначений>
//                                 - Таблица товаров, подлежащих загрузке в ККМ.
//                                   Таблица имеет следующие колонки:
//                                     ПЛУ                        - <Число>
//                                                                - Идентификатор товара на кассе.
//                                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                                - Номенклатура.
//                                     ВесовойТовар               - <Булево>
//                                                                - Товар является весовым.
//                                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                                - Единица измерения номенклатуры.
//                                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                                - Характеристика номенклатуры.
//                                     СерияНоменклатуры          - <СправочникСсылка.СерииНоменклатуры>
//                                                                - Серия номенклатуры.
//                                     Цена                       - <Число>
//                                                                - Цена номенклатуры.
//                                     КодТовара                  - <Число>, <Строка>
//                                                                - Код весового товара (для весовых товаров),
//                                                                  или штрихкод (для штучного товара).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьТоварыККМ(Идентификатор, Товары) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека  = Неопределено;
		НомерСмены = Неопределено;
		Результат  = Обработка.ВыгрузитьТовары(Объект, Товары);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ККМ Off-Line");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВыгрузитьТоварыККМ()

// Функция осуществляет загрузку отчета о продажах из ККМ, подключенной в режиме Off-Line.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор ККМ, подключаемой в режиме
//                                   Off-Line.
//
//  Отчет                          - <ТаблицаЗначений>
//                                 - Выходной параметр; таблица с данными о
//                                   продажах за смену. Таблица имеет следующие
//                                   колонки:
//                                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                                - Проданный товар.
//                                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                                - Единица измерения проданного товара.
//                                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                                - Характеристика проданного товара.
//                                     СерияНоменклатуры          - <СправочникСсылка.СерииНоменклатуры>
//                                                                - Серия проданного товара.
//                                     Качество                   - <СправочникСсылка.Качество>
//                                                                - Качество проданного товара.
//                                     Количество                 - <Число>
//                                                                - Количество проданного (>0) или возвращённого (<0) товара.
//                                     Цена                       - <Число>
//                                                                - Цена за единицу товара.
//                                     Сумма                      - <Число>
//                                                                - Сумма позиции. >0 при продаже, <0 при возврате.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗагрузитьОтчетОПродажах(Идентификатор, Отчет) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Отчет      = Новый ТаблицаЗначений();
		
		Отчет.Колонки.Добавить("Номенклатура");
		Отчет.Колонки.Добавить("ЕдиницаИзмерения");
		Отчет.Колонки.Добавить("ХарактеристикаНоменклатуры");
		Отчет.Колонки.Добавить("СерияНоменклатуры");
		Отчет.Колонки.Добавить("Качество");
		Отчет.Колонки.Добавить("Количество");
		Отчет.Колонки.Добавить("Цена");
		Отчет.Колонки.Добавить("Сумма");
		
		НомерЧека       = Неопределено;
		НомерСмены      = Неопределено;
		ВремОтчет       = Неопределено;
		СтрокаОтчета    = Неопределено;
		Результат       = Обработка.ЗагрузитьОтчет(Объект, ВремОтчет);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|    РегТО.КассаККМ
			|ИЗ
			|    РегистрСведений.ТорговоеОборудование КАК РегТО
			|ГДЕ
			|    РегТО.Идентификатор = &Идентификатор");
			Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
			КассаККМ = Запрос.Выполнить().Выгрузить()[0].КассаККМ;
			Позиция = Неопределено;
			Для каждого Позиция Из ВремОтчет Цикл
				ОписаниеПозиции = РаботаСТорговымОборудованием.ПолучитьОписаниеТовараККМ(КассаККМ, Число(Позиция.ПЛУ));
				Если ОписаниеПозиции = Неопределено Тогда
					Отчет.Очистить();
					Результат = мОшибкаЗагрузкиОтчета;
					Прервать;
				КонецЕсли;
				
				СтрокаОтчета = Отчет.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, ОписаниеПозиции);
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, Позиция, "Количество, Цена, Сумма");
			КонецЦикла;
		КонецЕсли;
		
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ККМ Off-Line");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьОтчетОПродажах()

// Функция извещает ККМ, подключенную в режиме Off-Line, об окончании загрузки отчёта.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор ККМ, подключаемой в режиме
//                                   Off-Line.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗавершитьЗагрузкуОтчетаОПродажах(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека  = Неопределено;
		НомерСмены = Неопределено;
		Результат  = Обработка.ОтчетЗагружен(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ККМ Off-Line");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗавершитьЗагрузкуОтчетаОПродажах()

// Функция возвращает ПЛУ товара по штрихкоду для заданного объекта драйвера ККМ Off-Line.
// Используется в обработках обслуживания.
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера оборудования.
//
//  Штрихкод                       - <Строка>
//                                 - Штрихкод товара.
//
//  ПЛУ                            - <Число>
//                                 - Выходной параметр; ПЛУ товара.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьПЛУПоШтрихкоду(Объект, Штрихкод, ПЛУ) Экспорт
	
	Результат = мНетОшибки;
	
	ТО = ПолучитьТО();
	
	СтрокаТО = ТО.Найти(Объект, "Объект");
	Если СтрокаТО = Неопределено Тогда
		Результат = мОшибкаНеизвестно;
	Иначе
		Идентификатор = СтрокаТО.Идентификатор;
		КассаККМ      = ПолучитьКассуККМ(Идентификатор);
		Запрос        = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегТовары.Код КАК ПЛУ
		|ИЗ
		|    РегистрСведений.ТоварыНаККМ КАК РегТовары
		|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегШК
		|        ПО   РегТовары.Номенклатура               = РегШК.Владелец
		|           И РегТовары.ХарактеристикаНоменклатуры = РегШК.ХарактеристикаНоменклатуры
		|           И РегТовары.СерияНоменклатуры          = РегШК.СерияНоменклатуры
		|           И РегТовары.ЕдиницаИзмерения           = РегШК.ЕдиницаИзмерения
		|           И РегТовары.КассаККМ                   = &КассаККМ
		|           И РегШК.Штрихкод                       = &Штрихкод");
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Результат = мОшибкаНеизвестно;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПЛУ = Выборка.ПЛУ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПЛУПоШтрихкоду()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ККМ)

// Функция возвращает пароль кассира, заданный в текущих настройках пользователя.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <Число> - Пароль кассира.
//
Функция ПолучитьПарольКассираККМ() Экспорт
	
	Возврат ПолучитьПарольККМ(Истина);
	
КонецФункции // ПолучитьПарольКассираККМ()

// Функция возвращает пароль администратора, заданный в текущих настройках пользователя.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <Число> - Пароль администратора.
//
Функция ПолучитьПарольАдминистратораККМ() Экспорт
	
	Возврат ПолучитьПарольККМ(Ложь);
	
КонецФункции // ПолучитьПарольАдминистратораККМ()

// Функция осуществляет получение кассы ККМ, с которой связано устройство.
//
// Параметры:
//  Идентификатор               - <Строка>
//                              - Идентификатор ККМ.
//
// Возвращаемое значение:
//  <СправочникСсылка.КассыККМ> - Касса ККМ, с которой связано устройство.
//
Функция ПолучитьКассуККМ(Идентификатор) Экспорт
	
	Результат = мПустаяКассаККМ;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|    РегТО.КассаККМ
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|    РегТО.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.КассаККМ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьКассуККМ()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (Считыватели RFID)

// Производит обнаружение меток в поле считывателя и возвращает в параметре количество обнаруженных меток. 
// Результат – успех выполнения функции.
//
Функция ПолучитьКоличествоМетокRFID(Идентификатор, КоличествоМеток) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ПолучитьКоличествоМетокRFID(Объект, КоличествоМеток);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Считывает все данные из обнаруженных меток и возвращает в параметре структуру, содержащую идентификаторы меток и данные. 
// Результат – успех выполнения функции.
//
Функция ПрочитатьДанныеИзМетокRFID(Идентификатор, КоличествоМеток, ДанныеИзМеток) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат  = Обработка.ПрочитатьДанныеИзМетокRFID(Объект, КоличествоМеток, ДанныеИзМеток);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает переданные данные в метки, находящиеся в поле считывателя.
// Результат – успех выполнения функции.
//
Функция ЗаписатьДанныеВМеткиRFID(Идентификатор, КоличествоМеток, ДанныеДляЗаписи) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат  = Обработка.ЗаписатьДанныеВМеткиRFID(Объект, КоличествоМеток, ДанныеДляЗаписи);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Открывает новую сессию для чтения данных из меток, попадающих в поле считывателя.
// Результат – успех выполнения функции.
//
Функция ОткрытьСессиюRFID(Идентификатор) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ОткрытьСессиюRFID(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Закрывает открытую ранее сессию.
// Результат – успех выполнения функции.
//
Функция ЗакрытьСессиюRFID(Идентификатор, ИгнорироватьМеткиВПоле, КоличествоМеток) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат  = Обработка.ЗакрытьСессиюRFID(Объект, ИгнорироватьМеткиВПоле, КоличествоМеток);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает пришедшее событие от считывателя RFID меток.
// Результат – успех выполнения функции.
//
Функция ОбработатьСобытиеОтRFID(Обработка, Объект, Клиент, Событие, Данные, Идентификатор, ДанныеИзМеток) Экспорт
	
	Если Событие = "ЧтениеМеток" Тогда
		ДанныеИзМеток = Новый ТаблицаЗначений;
		ДанныеИзМеток.Колонки.Добавить("Идентификатор");
		ДанныеИзМеток.Колонки.Добавить("ШК");
		
		Результат = Обработка.ОбработатьСобытиеОтRFID(Объект, Событие, Данные, ДанныеИзМеток);
		
		ДанныеИзМеток.Колонки.Добавить("Количество");
		ДанныеИзМеток.ЗаполнитьЗначения(1, "Количество");
		
		ОбработатьТаблицуШтрихкодов(ДанныеИзМеток, Клиент);
	ИначеЕсли Событие = "МеткаВПоле" Тогда
		// Оповестить, что осуществлен пронос в поле считывателя товара с метками.
	ИначеЕсли Событие = "ОшибкаВДрайвере" Тогда
		// Отобразить сообщение о проблемах с драйвером.
	КонецЕсли;
	
	мОписаниеОшибки = Объект.ОписаниеОшибки;
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ПРИНТЕРЫ)

//Функция получает макет у обработки обслуживания
Функция ПечатьПолучитьМакет(Идентификатор, ИмяМакета = "Макет", МакетПоУмолчанию) Экспорт
	
	Оборудование = ПолучитьТО();
	ТО           = Оборудование.Найти(Идентификатор, "Идентификатор");
	Если  ТО <> Неопределено Тогда
		Обработка   = ТО.Обработка;
		Макет		= Обработка.ПолучитьМакет(ИмяМакета);
	Иначе
		Макет = МакетПоУмолчанию;
	КонецЕсли;
	Возврат Макет;
	
КонецФункции

// Функция осуществляет печать документа на принтер 
// Результат – успех выполнения функции.
//
Функция ПечатьДокумента(Идентификатор, ТабДокумент) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Результат   = Обработка.ПечатьДокумента(Объект, ТабДокумент);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("Принтер");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать документа на принтер 
// Результат – успех выполнения функции.
//
Функция ПечатьВстречки(Идентификатор, ТабДокумент) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Результат   = Обработка.ПечатьДокумента(Объект, ТабДокумент);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("Принтера встречки");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать документа на принтер 
// Результат – успех выполнения функции.
//
Функция ПечатьСообщения(Идентификатор, ТабДокумент) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Попытка
			Результат   = Обработка.ПечатьДокумента(Объект, ТабДокумент);
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		Исключение
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
		КонецПопытки;		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("Принтера встречки");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ                                    

// Функция возвращает пароль кассира или администратора ККМ.
//
// Параметры:
//  ПарольКассира - <Булево>
//                - Возвращать пароль кассира. Если данный параметр имеет
//                  значение Ложь, возвращается пароль администратора ККМ.
//
// Возвращаемое значение:
//  <Число>       - Пароль ККМ.
//
Функция ПолучитьПарольККМ(ПарольКассира)
	
	Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),	?(ПарольКассира, "ПарольКассираФискальногоРегистратора", "ПарольАдминистратораФискальногоРегистратора"));
	
КонецФункции // ПолучитьПарольККМ()

// Функция осуществляет печать чека для приходного и расходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  ЭтоРКО                         - <Булево>
//                                 - Осуществляется печать чека из РКО.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаПКОРКО(Идентификатор, ЭтоРКО, Пароль, НомерЧека, НомерСмены,
	ОписаниеПлатежа, СуммаНал, СуммаБезнал)
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	ВремНомерЧека = 0;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерОтдела = Неопределено;
		Результат   = Обработка.ПолучитьПараметрыНаличнойОплаты(Объект, НомерОтдела);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = Обработка.ОткрытьЧек(Объект, Пароль, ЭтоРКО, ВремНомерЧека, НомерСмены);
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Позиция = Неопределено;
				Для Каждого Позиция Из ОписаниеПлатежа Цикл
					Результат = Обработка.ПечататьСтроку(Объект,
					Позиция.Заголовок,
					1,
					Позиция.Сумма,
					0,
					НомерОтдела,
					Позиция.НДС);
					
					Если ЗначениеЗаполнено(Результат) Тогда
						Обработка.АннулироватьЧек(Объект);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека = ВремНомерЧека
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПечатьЧекаПКО()

// Функция возвращает параметр механизма работы с торговым оборудованием.
//
// Параметры:
//  ИмяПараметра  - <Строка>
//                - Имя необходимого параметра.
//
//  ТипПараметра  - <Строка>
//                - Имя типа необходимого параметра.
//
// Возвращаемое значение:
//  <*>           - Описание возвращаемого значения.
//
Функция ПолучитьПараметрСервераТО(ИмяПараметра, ТипПараметра) Экспорт
	
	Если мДанныеСервера = Неопределено Тогда
		мДанныеСервера = Новый Структура();
	КонецЕсли;
	
	Результат = Неопределено;
	мДанныеСервера.Свойство(ИмяПараметра, Результат);
	Если Результат = Неопределено Тогда
		Результат = Новый(Тип(ТипПараметра));
		мДанныеСервера.Вставить(ИмяПараметра, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПараметрСервераТО()

// Функция, при необходимости, подключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид подключаемого оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьОборудование(Вид, Клиент)
	
	Результат = мНетОшибки;
	
	ТО      = ПолучитьТО();
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");
	
	СтруктураПоиска = Новый Структура("Вид", Вид);
	СтрокиТО        = ТО.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТО.Количество() = 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//Костенюк Александр-Старт 27.08.2012
		|    РегТО.Компьютер       		КАК Компьютер,
		//Костенюк Александр-Финиш 27.08.2012
		|    РегТО.Идентификатор       КАК Идентификатор,
		|    РегТО.Модель.Наименование КАК Наименование,
		|    РегТО.Модель              КАК Модель,
		|    РегТО.Параметры           КАК Параметры,
		|    РегТО.КассаККМ           КАК КассаККМ
		|ИЗ
		|    РегистрСведений.ТорговоеОборудование КАК РегТО
		|ГДЕ";
		
		//Принтеры встречек подключаем от всех компьютеров
		Если Вид = Перечисления.ВидыТорговогоОборудования.ПринтерыВстречек Тогда
			Запрос.Текст = Запрос.Текст + "
			|    РегТО.Модель.ОбработкаОбслуживания.Вид = &Вид";
			Запрос.УстановитьПараметр("Вид",                 Вид);			
		Иначе			
			Запрос.Текст = Запрос.Текст + "
			|    РегТО.Модель.ОбработкаОбслуживания.Вид = &Вид
			|    И РегТО.Компьютер                      = &Компьютер";
			Запрос.УстановитьПараметр("Вид",                 Вид);
			Запрос.УстановитьПараметр("Компьютер",           ПолучитьКомпьютерТО());
		КонецЕсли;
		
		СтрокиТО = Запрос.Выполнить().Выгрузить();
		СтрокаТО = Неопределено;
		
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Идентификатор = СтрокаТО.Идентификатор;
			Наименование  = СтрокаТО.Наименование;
			Обработка     = Неопределено;
			Параметры     = ?(ПустаяСтрока(СтрокаТО.Параметры),
			Новый Структура(),
			ЗначениеИзСтрокиВнутр(СтрокаТО.Параметры));
			Модель        = СтрокаТО.Модель.Модель;
			мМодельПодключаемогоТО = Модель;
			
			//Костенюк Александр-Старт 27.08.2012
			Компьютер = СтрокаТО.Компьютер;
			//Костенюк Александр-Финиш 27.08.2012
			
			Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СтрокаТО.Модель, Обработка);
			Если ЗначениеЗаполнено(Результат) Тогда
				Возврат Результат;
			КонецЕсли;
			
			Объект = Неопределено;
			
			
			Результат = Обработка.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
			Если ЗначениеЗаполнено(Результат) Тогда
				Возврат Результат;
			КонецЕсли;
			
			текКассаККМ = Неопределено;
			Если Не Объект.Параметры.Свойство("КассаККМ",текКассаККМ) Тогда
				текКассаККМ = ПолучитьКассуККМ(СтрокаТО.Идентификатор);
				Объект.Параметры.Вставить("КассаККМ",текКассаККМ);
			КонецЕсли; 			
			
			Попытка
				Результат = Обработка.Подключить(Объект);				
			Исключение
				Возврат мОшибкаПодключения;
			КонецПопытки;			
			
			Если ЗначениеЗаполнено(Результат) Тогда
				Возврат Результат;
			КонецЕсли;
			
			Оборудование                             = ТО.Добавить();
			//Костенюк Александр-Старт 27.08.2012
			Оборудование.Компьютер                   = Компьютер;
			//Костенюк Александр-Финиш 27.08.2012
			Оборудование.Вид                         = Вид;
			Оборудование.Ссылки                      = 1;
			Оборудование.Идентификатор               = Идентификатор;
			Оборудование.Наименование                = Наименование;
			Оборудование.Обработка                   = Обработка;
			Оборудование.Объект                      = Объект;
			Оборудование.ИмяИсточникаВнешнегоСобытия = Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(Объект);
			
			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = Обработка.ПолучитьОписаниеСобытий(Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(Вид,           "Вид");
			
			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Сообщения, Клиенты[Клиент]);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Если СтрокаТО.Ссылки = 0 Тогда
				текКассаККМ = Неопределено;
				Если СтрокаТО.Объект.Параметры.Свойство("КассаККМ",текКассаККМ) Тогда
					текКассаККМ = ПолучитьКассуККМ(СтрокаТО.Идентификатор);
					СтрокаТО.Объект.Параметры.Вставить("КассаККМ",текКассаККМ);
				КонецЕсли; 
				мМодельПодключаемогоТО = СтрокаТО.Объект.Модель;
				Попытка
					Результат = СтрокаТО.Обработка.Подключить(СтрокаТО.Объект);
				Исключение
					Возврат мОшибкаПодключения;
				КонецПопытки;
				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = СтрокаТО.Объект.ОписаниеОшибки;
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = СтрокаТО.Обработка.ПолучитьОписаниеСобытий(СтрокаТО.Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Вид,           "Вид");
			
			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Сообщения, Клиенты[Клиент]);
			КонецЕсли;
			
			СтрокаТО.Ссылки = СтрокаТО.Ссылки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПодключитьОборудование()

// Процедура, при необходимости, отключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
Процедура ОтключитьОборудование(Клиент)
	
	ТО              = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Клиенты         = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");
	ВидТО           = Неопределено;
	СтруктураПоиска = Новый Структура("Вид");
	
	Для Каждого ВидТО Из Перечисления.ВидыТорговогоОборудования Цикл
		Если Клиент.ПоддерживаетсяВидТО(ВидТО) Тогда
			СтруктураПоиска.Вид = ВидТО;
			СтрокиТО            = ТО.НайтиСтроки(СтруктураПоиска);
			СтрокаТО            = Неопределено;
			Для Каждого СтрокаТО Из СтрокиТО Цикл
				Если      СтрокаТО.Ссылки = 1 Тогда
					СтрокаТО.Ссылки = 0;
					СтрокаТО.Обработка.Отключить(СтрокаТО.Объект);
				ИначеЕсли СтрокаТО.Ссылки > 1 Тогда
					СтрокаТО.Ссылки = СтрокаТО.Ссылки - 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Клиенты.Удалить(Клиент);
	
КонецПроцедуры // ОтключитьОборудование()

// Функция осуществляет обработку внешнего события.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид торгового оборудования.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьВнешнееСобытиеВнутр(Вид, Обработка, Объект, Клиент, Событие, Данные, Идентификатор)
	
	Результат = мНетОшибки;
	
	Если Вид = мДисплейПокупателя Тогда
	ИначеЕсли Вид = мККМOffLine Тогда
	ИначеЕсли Вид = мККМOnLine Тогда
		Результат = ОбработатьСобытиеOnline(Обработка, Объект, Клиент, Событие, Данные, Идентификатор);
	ИначеЕсли Вид = мСчитывательМагнитныхКарт Тогда
		Результат = ОбработатьСобытиеСМК(Обработка, Объект, Клиент, Событие, Данные, Идентификатор);
	ИначеЕсли Вид = мСканерШтрихКода Тогда
		Результат = ОбработатьСобытиеСШК(Обработка, Объект, Клиент, Событие, Данные, Идентификатор);
	ИначеЕсли Вид = мТерминалСбораДанных Тогда
	ИначеЕсли Вид = мФискальныйРегистратор Тогда
		
	ИначеЕсли Вид = мЭлектронныеВесы Тогда
	ИначеЕсли Вид = мСчитывателиRFIDМеток Тогда
		ДанныеИзМеток = Неопределено;
		Результат = ОбработатьСобытиеОтRFID(Обработка, Объект, Клиент, Событие, Данные, Идентификатор, ДанныеИзМеток);
	ИначеЕсли Вид = мЭлектронныеВесыOffline Тогда
	КонецЕсли;
	
	мВнешнееСобытиеОбработано = Истина;
	
	Возврат Результат;
	
КонецФункции // ОбработатьВнешнееСобытиеВнутр()

// Функция осуществляет обработку внешнего события от сканеров штрихкода.
//
// Параметры:
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  СШК                            - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьСобытиеСШК(Обработка, Объект, Клиент, Событие, Данные, СШК)
	
	Результат = мНетОшибки;
	
	ШК        = Неопределено;
	ТипШК     = Неопределено;
	Результат = Обработка.ОбработатьСобытиеСШК(Объект,
	Событие,
	Данные,
	ШК,
	ТипШК);
	Если ЗначениеЗаполнено(Результат) Тогда
		Обработка.СобытиеОбработано(Объект);
		Возврат Результат;
	КонецЕсли;
	
	Если ПустаяСтрока(ШК) Тогда
		Обработка.СобытиеОбработано(Объект);
		Возврат Результат;
	КонецЕсли;
	
	//Костенюк Александр-Старт 02.07.2012
	ШК = СокрЛП(ШК);
	//Костенюк Александр-Финиш 02.07.2012
	
	ЭтоITF14 = РаботаСТорговымОборудованием.ТипШтрихкодаITF14ТО(ШК);
	
	Если НЕ ЗначениеЗаполнено(ТипШК) Тогда
		Если      РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(ШК) Тогда
			ТипШК = мEAN8;
		ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
			ТипШК = мEAN13;
		ИначеЕсли Не ЭтоITF14 И РаботаСТорговымОборудованием.ТипШтрихкодаCODE39ТО(ШК) Тогда
			ТипШК = мCODE39;
		КонецЕсли;
	КонецЕсли;
	
	
	// Встречки.
	Если ЗначениеЗаполнено(мПрефиксВстречки)
		И ТипШК = мEAN13
		И Лев(ШК, 1) = мПрефиксВстречки Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РегШК.Документ КАК Документ,
		|	РегШК.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг КАК РегШК
		|ГДЕ
		|	РегШК.Штрихкод = &Штрихкод");
		Запрос.УстановитьПараметр("Штрихкод", ШК);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
			ВыборкаИзЗапроса.Следующий();
			
			Попытка 
				Ответ = Клиент.СШКВстречка(ВыборкаИзЗапроса.Документ,											
				РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Идентификатор"),
				СШК);
			Исключение
				Ответ = Ложь;
			КонецПопытки;
			
			Если Ответ Тогда
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//TODO: Может быть штрих-код документа 
	
	
	//Если ЗначениеЗаполнено(мПрефиксВесовогоТовара)
	//	 И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара)
	//	 И ТипШК = мEAN13
	//	 И Лев(ШК, 2) = "2" + мПрефиксВесовогоТовара Тогда
	
	//	КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
	//	КоличествоТовара = Сред(ШК, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);
	//	Запрос           = Новый Запрос(
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|    РегКВТ.Номенклатура                         КАК Номенклатура,
	//	|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	//	|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	//	|    " + КоличествоТовара + " / 1000             КАК Количество,
	//	|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
	//	|    ВЫБОР
	//	|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
	//	|            &КачествоНовый
	//	|        ИНАЧЕ
	//	|            РегКВТ.Качество
	//	|    КОНЕЦ                                       КАК Качество
	//	|ИЗ
	//	|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
	//	|ГДЕ
	//	|    РегКВТ.Код = &Код");
	//	Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
	//	Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
	//	Запрос.УстановитьПараметр("Код",                  Число(КодТовара));
	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		РезультатЗапроса = РезультатЗапроса.Выбрать();
	//		РезультатЗапроса.Следующий();
	
	//		Ответ = Клиент.СШКНоменклатура(РезультатЗапроса.Номенклатура,
	//									   РезультатЗапроса.ХарактеристикаНоменклатуры,
	//									   РезультатЗапроса.СерияНоменклатуры,
	//									   РезультатЗапроса.Качество,
	//									   РезультатЗапроса.ЕдиницаИзмерения,
	//									   РезультатЗапроса.Количество,
	//									   СШК);
	//		Если Ответ Тогда
	//			Обработка.СобытиеОбработано(Объект);
	//			Возврат Результат;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    РегШК.Владелец                   КАК Владелец,
	|    РегШК.Штрихкод                   КАК Штрихкод,
	|    РегШК.ТипШтрихкода               КАК ТипШтрихкода
	|ИЗ
	|    РегистрСведений.Штрихкоды        КАК РегШК
	|ГДЕ
	|    РегШК.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", ШК);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатЗапроса = РезультатЗапроса.Выбрать();
		РезультатЗапроса.Следующий();
		Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			//Попытка 
			//	Ответ = Клиент.СШКИнформационнаяКарта(РезультатЗапроса.Владелец, СШК);
			//Исключение
			//	Ответ = Ложь;
			//КонецПопытки;
			//Костенюк Александр-Старт 07.12.2012
			Если (РезультатЗапроса.Владелец.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная) И (ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.FrontOfficeМенеджерДокумента")) Тогда
				Ответ = Клиент.ДобавитьСкидкуПоДисконтнойКарте(РезультатЗапроса.Владелец);
			КонецЕсли;
			//Костенюк Александр-Финиш 07.12.2012
			Если Ответ Тогда
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
			//Костенюк Александр-Старт 15.05.2012
			//.. Начало изменения Dim)on  16 октября 2013 г. 20:26:14
			// +
		ИначеЕсли ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.РегистрационныеКарты") Тогда
			Если Ответ Тогда
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
			//
			//.. Конец изменения Dim)on  16 октября 2013 г. 20:26:14
		ИначеЕсли ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Сертификаты") Тогда
			Попытка 
				Ответ = Клиент.ПрименитьСертификат(РезультатЗапроса.Владелец);
			Исключение
				Ответ = Ложь;
			КонецПопытки;
			Если Ответ Тогда
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
			//Костенюк Александр-Финиш 15.05.2012
		Иначе // Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура")
			Попытка 
				Ответ = Клиент.СШКНоменклатура(РезультатЗапроса.Владелец,
				//РезультатЗапроса.Штрихкод,
				//РезультатЗапроса.ТипШтрихкода,
				//1,
				РезультатЗапроса.Штрихкод);
			Исключение
				Ответ = Ложь;
			КонецПопытки;
			
			Если Ответ Тогда
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Если ничего не нашли	
	Попытка 
		Ответ = Клиент.СШКНеизвестныйКод(ШК, ТипШК, СШК);
	Исключение
		Ответ = Ложь;
	КонецПопытки;
	
	Если Ответ Тогда
		Обработка.СобытиеОбработано(Объект);
		Возврат Результат;
	КонецЕсли;
	
	Результат = мОшибкаНеизвестныйШтрихкод;
	Клиент.СШКОшибка(Результат, ШК, ТипШК, СШК);
	Обработка.СобытиеОбработано(Объект);
	
	Возврат Результат;
	
КонецФункции // ОбработатьСобытиеСШК()

// Функция осуществляет обработку внешнего события от устройств для считывания
// магнитных карт.
//
// Параметры:
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  СМК                            - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьСобытиеСМКУдалить(Обработка, Объект, Клиент, Событие, Данные, СМК)
	
	Результат = мНетОшибки;	
	
	КодКарты  = Неопределено;
	Результат = Обработка.ОбработатьСобытиеСМК(Объект, Событие, Данные, КодКарты);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;    
	
	ОбработатьПовторно =Ложь;
	ПродолжитьПроцедуру = Ложь;
	ВидДисконтнойКарты = Неопределено;	
	
	
	//разберем код карты - по шаблонам	
	
	КодКарты = ДК_РасшифроватьКодКарты(КодКарты, ВидДисконтнойКарты);
	
	//.. Начало изменения Dim)on  16 октября 2013 г. 20:35:08
	//
	// Поиск регистрационной карты по регистру "РегистрационныеКарты" 
	ИскомаяКарта = РегистрыСведений.РегистрационныеКарты.НайтиРегистрационнуюКарту(КодКарты);
	
	Если ИскомаяКарта.Пустая() Тогда
	//
	//.. Конец изменения Dim)on  16 октября 2013 г. 20:35:08
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпрКарты.Ссылка КАК Карта
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК СпрКарты
		|ГДЕ
		|	СпрКарты.КодКарты = &КодКарты
		|	И (НЕ СпрКарты.ПометкаУдаления)");
		
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			РезультатЗапроса = РезультатЗапроса.Выгрузить()[0];
			
			// 2011-0211:КВВ Обработка карточки
			Если РезультатЗапроса.Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная ТОгда
				
				//Ответ = Клиент.СМКИнформационнаяКарта(РезультатЗапроса.Карта, СМК);
				
				//Костенюк Александр-Старт 23.04.2012
				Если ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.TouchВводЗначения") Тогда
					
					Клиент.ОбработатьЗначение(РезультатЗапроса.Карта);
					Клиент.ВладелецФормы.КартаЗанята(РезультатЗапроса.Карта);
					Клиент.Закрыть();
					Ответ = Истина;
					
					// 04.12.2012
					// Автоматическое создание заказа при запрете сохранения заказа 
				ИначеЕсли ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.FrontOfficeМенеджерДокумента") Тогда
					Клиент.ПредупреждениеЗапретСохраненияЗаказа(Ответ);
					Если Ответ Тогда
						Ответ = Ложь;
						Ответ = Клиент.СМКИнформационнаяКарта(РезультатЗапроса.Карта, СМК);
						Если Ответ Тогда
							Если УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeАвтоматическоеСозданиеЗаказаПриВходеВСистему) Тогда
								Клиент.АвтоматическоеСозданиеЗаказа();
							Иначе
								Клиент.КнопкаНазадНажатие(Неопределено);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Обработка.СобытиеОбработано(Объект);
						Возврат Результат;
					КонецЕсли;
					// 04.12.2012
				Иначе
					
					Ответ = Клиент.СМКИнформационнаяКарта(РезультатЗапроса.Карта, СМК);
					
				КонецЕсли;
				//Костенюк Александр-Финиш 23.04.2012
				
				Если Ответ Тогда
					//Клиент.ОткрытьИнтерфейсПоУмолчанию();
					Обработка.СобытиеОбработано(Объект);
					Возврат Результат;
				КонецЕсли;
				
			ИначеЕсли (РезультатЗапроса.Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная) И (ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.FrontOfficeМенеджерДокумента")) Тогда
				
				// Игорь 02.09.2011 13:25:22
				ФормаПоискаЧисла = Обработки.TouchПоискЗначения.ПолучитьФорму("ФормаЧисла");
				
				Если ФормаПоискаЧисла.Открыта() Тогда 
					//Оповестить(Событие,РезультатЗапроса.Карта, Обработка);
					//Костенюк Александр-Старт 25.05.2012
					#Если Клиент Тогда
						Оповестить(Событие,РезультатЗапроса.Карта, Обработка);
					#КонецЕсли
					//Костенюк Александр-Финиш 25.05.2012
					Ответ = истина;
				Иначе             
					Ответ = Клиент.ДобавитьСкидкуПоДисконтнойКарте(РезультатЗапроса.Карта);
				КонецЕсли;
				
				Если Ответ Тогда
					Обработка.СобытиеОбработано(Объект);
					Возврат Результат;
				КонецЕсли;
				
				Возврат Результат;
				
				//Костенюк Александр-Старт 09.04.2012
			ИначеЕсли (РезультатЗапроса.Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная) И (ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.FrontOfficeМенеджерЖурналаДокументовРесторана")) Тогда
				
				Ответ = Клиент.ВывестиИнформациюПоДисконтнойКарте(РезультатЗапроса.Карта);
				
				Если Ответ Тогда
					Обработка.СобытиеОбработано(Объект);
					Возврат Результат;
				КонецЕсли;
				
				Возврат Результат;
				//Костенюк Александр-Финиш 09.04.2012
				
			КонецЕсли;                                           
			
		Иначе
			
			Если ЗначениеЗаполнено(ВидДисконтнойКарты) Тогда
				
				//РаботаСТорговымОборудованием.СоэдатьЭлементВСправочникеИнформационныеКарты(КодКарты, ВидДисконтнойКарты , Перечисления.ВидыИнформационныхКарт.Магнитная , Перечисления.ТипыИнформационныхКарт.Дисконтная , ОбработатьПовторно , ПродолжитьПроцедуру );	
				//
				//Если ОбработатьПовторно Тогда
				//	ОбработатьСобытиеСМК(Обработка, Объект, Клиент, Событие, Данные, СМК);
				//КонецЕсли;
				
				//Костенюк Александр-Старт 23.04.2012
				Если ТипЗнч(Клиент.ОбработкаОбъект)= Тип("ОбработкаОбъект.TouchВводЗначения") Тогда
					
					Клиент.ОбработатьЗначение(КодКарты);
					Клиент.ВладелецФормы.НазначитьКарту(КодКарты);
					Клиент.Закрыть();
					Ответ = Истина;
					
					Если Ответ Тогда
						Обработка.СобытиеОбработано(Объект);
						Возврат Результат;
					КонецЕсли;
					
					Возврат Результат;
					
				Иначе
					
					РаботаСТорговымОборудованием.СоэдатьЭлементВСправочникеИнформационныеКарты(КодКарты, ВидДисконтнойКарты , Перечисления.ВидыИнформационныхКарт.Магнитная , Перечисления.ТипыИнформационныхКарт.Дисконтная , ОбработатьПовторно , ПродолжитьПроцедуру );	
					
					Если ОбработатьПовторно Тогда
						ОбработатьСобытиеСМК(Обработка, Объект, Клиент, Событие, Данные, СМК);
					КонецЕсли;
					
				КонецЕсли;
				//Костенюк Александр-Финиш 23.04.2012
				
			КонецЕсли; 
			
		КонецЕсли;
		
	//.. Начало изменения Dim)on  16 октября 2013 г. 20:36:24
	//
	Иначе // это регистрационная карта
		
		Если ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.TouchВводЗначения") Тогда
			
			Клиент.ОбработатьЗначение(ИскомаяКарта);
			Клиент.ВладелецФормы.КартаЗанята(ИскомаяКарта);
			Клиент.Закрыть();
			Ответ = Истина;
			
		// Автоматическое создание заказа при запрете сохранения заказа 
		ИначеЕсли ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.FrontOfficeМенеджерДокумента") Тогда
			Клиент.ПредупреждениеЗапретСохраненияЗаказа(Ответ);
			Если Ответ Тогда
				Ответ = Ложь;
				Ответ = Клиент.СМКИнформационнаяКарта(ИскомаяКарта, СМК);
				Если Ответ Тогда
					Если УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeАвтоматическоеСозданиеЗаказаПриВходеВСистему) Тогда
						Клиент.АвтоматическоеСозданиеЗаказа();
					Иначе
						Клиент.КнопкаНазадНажатие(Неопределено);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
		Иначе
			
			Ответ = Клиент.СМКИнформационнаяКарта(ИскомаяКарта, СМК);
			
		КонецЕсли;
		
		Если Ответ Тогда
			Обработка.СобытиеОбработано(Объект);
			Возврат Результат;
		КонецЕсли;

	КонецЕсли;
	//
	//.. Конец изменения Dim)on  16 октября 2013 г. 20:36:24
	
	Если не ПродолжитьПроцедуру Тогда
		Ответ = Клиент.СМКНеизвестныйКод(КодКарты, СМК);
		Если Ответ Тогда
			Обработка.СобытиеОбработано(Объект);
			Возврат Результат;
		КонецЕсли;
		
		Результат = мОшибкаНеизвестнаяКарта;
		Клиент.СМКОшибка(Результат, КодКарты, СМК);
		Обработка.СобытиеОбработано(Объект);
		
		Возврат Результат;	
	иначе
		Обработка.СобытиеОбработано(Объект);
		Возврат Результат;
	КонецЕсли;	
	
КонецФункции // ОбработатьСобытиеСМК()

// Функция осуществляет обработку внешнего события от ККМ Online.
//
// Параметры:
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  ККМ                            - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьСобытиеOnline(Обработка, Объект, Клиент, Событие, Данные, ККМ)
	
	Результат = мНетОшибки;
	
	Параметры = Неопределено;
	Результат = Обработка.ОбработатьСобытие(Объект, Событие, Данные, Параметры);
	Если ЗначениеЗаполнено(Результат) Тогда
		мОписаниеОшибки = Объект.ОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Если Параметры <> Неопределено Тогда
		Если      Параметры.Операция = "ЗапросИнформации" Тогда
			ОписаниеТовара = ПолучитьОписаниеТовараПоШтрихкоду(Параметры.Штрихкод);
			Если ОписаниеТовара <> Неопределено Тогда
				Цена        = Неопределено;
				НомерСекции = Неопределено;
				Скидка      = Неопределено;
				
				Ответ = Клиент.ОбработатьЗапросККМ(ОписаниеТовара.Номенклатура,
				ОписаниеТовара.ХарактеристикаНоменклатуры,
				ОписаниеТовара.СерияНоменклатуры,
				ОписаниеТовара.Качество,
				ОписаниеТовара.ЕдиницаИзмерения,
				ОписаниеТовара.Количество,
				Цена, Скидка, НомерСекции,
				ККМ);
				Если Ответ Тогда
					ОписаниеТовара.Вставить("Цена",        Цена);
					ОписаниеТовара.Вставить("НомерСекции", НомерСекции);
					ОписаниеТовара.Вставить("Скидка",      Скидка);
				Иначе
					ОписаниеТовара = Неопределено;
				КонецЕсли;
			КонецЕсли;
			Результат = Обработка.ОбработатьРезультатЗапроса(Объект, ОписаниеТовара);
		ИначеЕсли Параметры.Операция = "Чек" Тогда
			Чек = Новый ТаблицаЗначений();
			Чек.Колонки.Добавить("Номенклатура");
			Чек.Колонки.Добавить("ЕдиницаИзмерения");
			Чек.Колонки.Добавить("ХарактеристикаНоменклатуры");
			Чек.Колонки.Добавить("СерияНоменклатуры");
			Чек.Колонки.Добавить("Качество");
			Чек.Колонки.Добавить("Цена");
			Чек.Колонки.Добавить("Количество");
			Чек.Колонки.Добавить("Сумма");
			
			СтрокаЧекаККМ = Неопределено;
			Для каждого СтрокаЧекаККМ Из Параметры.Товары Цикл
				СтрокаЧека = Чек.Добавить();
				Описание   = ПолучитьОписаниеТовараПоШтрихкоду(СтрокаЧекаККМ.Штрихкод);
				ЗаполнитьЗначенияСвойств(СтрокаЧека, СтрокаЧекаККМ, "Количество, Сумма, Цена");
				ЗаполнитьЗначенияСвойств(СтрокаЧека, Описание, , "Количество");
			КонецЦикла;
			Клиент.ЗакрытиеЧекаККМ(Чек,
			Параметры.Возврат,
			Параметры.Наличные,
			Параметры.Безнал,
			Параметры.НомЧека,
			Параметры.НомСмены,
			ККМ);
		Иначе
			Результат = мОшибкаНеизвестно;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОбработатьСобытиеOnline()

// Функция осуществляет поиск товара по штрихкоду
//
// Параметры:
//  Штрихкод       - <Строка>
//                 - Строка, содержащая штрихкод товара.
//
// Возвращаемое значение:
//  <Структура>,
//  <Неопределено> - В случае, если товар не найден, возвращается Неопределено.
//                   В противном случае возвращается структура со следующими полями:
//                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                - Номенклатура, которой соответствует
//                                                  отсканированный штрихкод.
//                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                - Единица измерения номенклатуры.
//                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                - Характеристика  номенклатуры.
//                     СерияНоменклатуры          - <СправочникСсылка.СерииНоменклатуры>
//                                                - Серия  номенклатуры.
//                     Качество                   - <СправочникСсылка.Качество>
//                                                - Качество номенклатуры.
//                     Количество                 - <СправочникСсылка.Количество>
//                                                - Количество номенклатуры.
//
Функция ПолучитьОписаниеТовараПоШтрихкоду(Штрихкод)
	
	Результат = Неопределено;
	ТипШК     = Неопределено;
	ЭтоITF14  = РаботаСТорговымОборудованием.ТипШтрихкодаITF14ТО(Штрихкод);
	ВремРез   = Новый Структура("Номенклатура,
	|ЕдиницаИзмерения,
	|ХарактеристикаНоменклатуры,
	|СерияНоменклатуры,
	|Качество,
	|Количество");
	
	Если      РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(Штрихкод) Тогда
		ТипШК = мEAN8;
	ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(Штрихкод) Тогда
		ТипШК = мEAN13;
	ИначеЕсли Не ЭтоITF14 И РаботаСТорговымОборудованием.ТипШтрихкодаCODE39ТО(Штрихкод) Тогда
		ТипШК = мCODE39;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    СпрСН.Владелец КАК Номенклатура
	|ИЗ
	|    Справочник.СерийныеНомера КАК СпрСН
	|ГДЕ
	|    (ВЫРАЗИТЬ(СпрСН.Код КАК СТРОКА(" + Формат(СтрДлина(Штрихкод), "ЧГ=0") + "))) = &Код");
	Запрос.УстановитьПараметр("Код", Штрихкод);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ВремРез.Номенклатура               = Выборка.Номенклатура;
		ВремРез.ЕдиницаИзмерения           = Выборка.Номенклатура.ЕдиницаХраненияОстатков;
		ВремРез.ХарактеристикаНоменклатуры = мХарактеристикиПустаяСсылка;
		ВремРез.СерияНоменклатуры          = мСерииПустаяСсылка;
		ВремРез.Качество                   = мКачествоНовый;
		ВремРез.Количество                 = 1;
		
		Возврат ВремРез;
	КонецЕсли;
	
	ПрефиксВесовогоТовара = мПрефиксВесовогоТовара;
	ДлинаКодаТовара       = мДлинаКодаВесовогоТовара;
	
	Если ЗначениеЗаполнено(ПрефиксВесовогоТовара)
		И ЗначениеЗаполнено(ДлинаКодаТовара)
		И ТипШК = мEAN13
		И Лев(Штрихкод, 2) = "2" + ПрефиксВесовогоТовара Тогда
		
		КодТовара        = Сред(Штрихкод, 3, ДлинаКодаТовара);
		КоличествоТовара = Сред(Штрихкод, 3 + ДлинаКодаТовара, 10 - ДлинаКодаТовара);
		Запрос           = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегКВТ.Номенклатура                         КАК Номенклатура,
		|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|    " + КоличествоТовара + " / 1000             КАК Количество,
		|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
		|    ВЫБОР
		|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
		|            &КачествоНовый
		|        ИНАЧЕ
		|            РегКВТ.Качество
		|    КОНЕЦ                                       КАК Качество
		|ИЗ
		|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
		|ГДЕ
		|    РегКВТ.Код = &Код");
		Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
		Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
		Запрос.УстановитьПараметр("Код",                  Число(КодТовара));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ЗаполнитьЗначенияСвойств(ВремРез, Выборка);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипШК) И ЭтоITF14 Тогда
		ШКEAN13 = Сред(Штрихкод, 2, 12);
		ШКEAN13 = ШКEAN13 + РаботаСТорговымОборудованием.КонтрольныйСимволEAN13ТО(ШКEAN13);
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегШК.Владелец                   КАК Номенклатура,
		|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
		|    ВЫБОР
		|        КОГДА РегШК.Качество = &КачествоПустаяСсылка ТОГДА
		|            &КачествоНовый
		|        ИНАЧЕ
		|            РегШК.Качество
		|    КОНЕЦ                            КАК Качество,
		|    СпрУпаковки.Коэффициент          КАК Количество
		|ИЗ
		|    РегистрСведений.Штрихкоды        КАК РегШК,
		|    ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|        Справочник.ТранспортныеУпаковки КАК СпрУпаковки
		|        ПО СпрУпаковки.Владелец = РегШК.ЕдиницаИзмерения.Ссылка
		|           И СпрУпаковки.Код    = &КодУпаковки
		|ГДЕ
		|    РегШК.ТипШтрихкода      = &ТипEAN13
		|    И РегШК.Штрихкод        = &Штрихкод");
		Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
		Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
		Запрос.УстановитьПараметр("ТипEAN13",             мEAN13);
		Запрос.УстановитьПараметр("Штрихкод",             ШКEAN13);
		Запрос.УстановитьПараметр("КодУпаковки",          КодСимвола(Штрихкод) - 48);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(ВремРез, Выборка);
			Возврат ВремРез;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    РегШК.Владелец                   КАК Номенклатура,
	|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
	|    ВЫБОР
	|        КОГДА РегШК.Качество = &КачествоПустаяСсылка ТОГДА
	|            &КачествоНовый
	|        ИНАЧЕ
	|            РегШК.Качество
	|    КОНЕЦ                            КАК Качество,
	|    1                                КАК Количество
	|ИЗ
	|    РегистрСведений.Штрихкоды        КАК РегШК
	|ГДЕ
	|    РегШК.Владелец ССЫЛКА Справочник.Номенклатура
	|    И РегШК.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод",             Штрихкод);
	Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
	Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ВремРез, Выборка);
		Результат = ВремРез;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьОписаниеТовараПоШтрихкоду()

// Функция осуществляет получение объекта драйвера торгового оборудования по идентификатору
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания.
//
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
//Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект)
//Костенюк Александр-Старт 18.05.2012
Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект, Компьютер = Неопределено) Экспорт
//Костенюк Александр-Финиш 18.05.2012
	
	Результат = мНетОшибки;
	
	ТО = ПолучитьТО();
	
	//Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
	
	//Костенюк Александр-Старт 27.08.2012
	Если Компьютер = Неопределено Тогда
		Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Идентификатор", Идентификатор);
		ПараметрыОтбора.Вставить("Компьютер", Компьютер);
		НайденныеСтроки = ТО.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Оборудование = Неопределено;
		Иначе
			Оборудование = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	//Костенюк Александр-Финиш 27.08.2012
	
	Если Оборудование = Неопределено Тогда
		Результат = мОшибкаНеизвестно;
	Иначе
		Обработка = Оборудование.Обработка;
		Объект    = Оборудование.Объект;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьОбъектДрайвера()

// Функция возвращает текущую версию API конфигурации для торгового оборудования.
//
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьВерсиюAPIКонфигурацииТО() Экспорт
	
	Результат = 2.00;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВерсиюAPIКонфигурацииТО()

//
Функция ОтключитьОбработкиОбслуживания() Экспорт
	
	Результат = Ложь;
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");
	Если Клиенты.Количество() = 0 Тогда
		мДанныеСервера =Неопределено;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ РАБОТЫ С ОШИБКАМИ ТОРГОВОГО ОБОРУДОВАНИЯ

// Функция возвращает текст ошибки при работе с торговым оборудованием.
//
// Параметры:
//  Ошибка   - <ПеречислениеСсылка.ТООшибки*>
//           - Ошибка, описание которой необходимо получить.
//
// Возвращаемое значение:
//  <Строка> - Описание ошибки.
//
Функция ПолучитьТекстОшибкиТО(Ошибка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ошибка) Тогда
		Результат = "";
	Иначе
		Если Ошибка = мОшибкаНеизвестно Тогда
			Результат = мОписаниеОшибки;
			
			мОписаниеОшибки = "";
		Иначе
			МетаданныеОшибки = Ошибка.Метаданные();
			КомментарийОшибки = МетаданныеОшибки.ЗначенияПеречисления.Получить(Перечисления[МетаданныеОшибки.Имя].Индекс(Ошибка)).Комментарий;
			Если КомментарийОшибки = "" Тогда
				Результат = СокрЛП(Ошибка) + ".";
			Иначе
				Результат = СокрЛП(Ошибка) + "." + Символы.ПС + КомментарийОшибки;
			КонецЕсли;
			
			Если мОписаниеОшибки <> "" Тогда
				Результат = Результат + Символы.ПС + Символы.ПС + мОписаниеОшибки;
			КонецЕсли;
			
			мОписаниеОшибки = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТекстОшибкиТО()

// Функция возвращает текст ошибки при работе со сканером штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК) Экспорт
	
	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	Если Ошибка = Перечисления.ТООшибкиСШК.ОшибкаНеизвестныйШтрихкод Тогда
		Текст = Текст + ?(ПустаяСтрока(Штрихкод),
		"",
		"
		|(штрихкод """
		+ Штрихкод
		+ """"
		+ ?(НЕ ЗначениеЗаполнено(ТипШК),
		"",
		", тип """
		+ СокрЛП(ТипШК)
		+ """")
		+ ")");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиСШКТО()

// Функция возвращает текст ошибки при работе с устройством для считывания
// магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты  - <Строка>
//            - Код считанной карты.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты) Экспорт
	
	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	Если Ошибка = Перечисления.ТООшибкиСМК.ОшибкаНеизвестнаяКарта Тогда
		Текст = Текст + ?(ПустаяСтрока(КодКарты),
		"",
		"
		|(карта с кодом """ + КодКарты + """)");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиСМКТО()

// Функция возвращает текст ошибки при работе с дисплеями покупателя.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиДПТО(Ошибка) Экспорт
	
	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиДПТО()

// Функция возвращает текст ошибки при работе с электронными весами.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиЭВТО(Ошибка) Экспорт
	
	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиЭВТО()

// Функция возвращает текст ошибки при работе с электронными весами OFF-LINE.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиЭВOFFТО(Ошибка) Экспорт
	
	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиЭВOFFТО()

// Функция возвращает текст ошибки при работе с терминалами сбора данных.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиТСДТО(Ошибка) Экспорт
	
	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиТСДТО()

// Функция возвращает текст ошибки при работе с фискальными регистраторами.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиФРТО(Ошибка) Экспорт
	
	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиФРТО()

// Функция возвращает текст ошибки при работе с ККМ, подключаемыми в режиме Off-Line.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиККМOfflineТО(Ошибка) Экспорт
	
	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиККМOfflineТО()

Функция ПолучитьТекстОшибкиПодключенияТО(ТО) Экспорт
	
	Текст = "Драйвер " + ТО + " не загружен";
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстОшибкиККМOfflineТО()

// Процедура выполняет загрузку данных из ТСД в табличную часть документа или обработки.
//
// Параметры:
//  Терминалы - Массив доступных ТСД.
//  СерверТО - объект сервера торгового оборудования.
//  ФормаКлиент - форма, в которой вызвано заполнение из ТСД.
//
Процедура ЗагрузитьИзТерминалаСбораДанных(Терминалы, ФормаКлиент) Экспорт
	
	Если Терминалы.Количество() = 1 Тогда
		Терминал = Терминалы[0];
	Иначе // Если мТерминалы.Количество() > 1
		СписокВыбора = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(Терминалы);
		
		Терминал = СписокВыбора.ВыбратьЭлемент("Выберите терминал сбора данных");
		Если Терминал = Неопределено Тогда
			Возврат;
		Иначе
			Терминал = Терминал.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Количество = Неопределено;
	Результат  = НачатьЗагрузкуТСД(Терминал, Количество);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Если Количество = 0 Тогда
			//Предупреждение("В терминале сбора данных отсутствуют данные для загрузки!");
			//Костенюк Александр-Старт 25.05.2012
			#Если Клиент Тогда
				Предупреждение("В терминале сбора данных отсутствуют данные для загрузки!");
			#КонецЕсли
			//Костенюк Александр-Финиш 25.05.2012
			Возврат;
		Иначе
			Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
			Индикатор.НаименованиеОбработкиДанных = "Загрузка данных из терминала сбора данных";
			Индикатор.КомментарийОбработкиДанных  = "Загружаются данные из ТСД";
			Индикатор.КомментарийЗначения         = "Загружено";
			Индикатор.МаксимальноеЗначение        = Количество;
			Индикатор.Открыть();
			
			ДанныеИзТСД = Новый ТаблицаЗначений;
			ДанныеИзТСД.Колонки.Добавить("ШК");
			ДанныеИзТСД.Колонки.Добавить("Количество");
			
			Для Индекс = 1 По Количество Цикл
				Результат = ЗагрузитьСтрокуТСД(Терминал, ДанныеИзТСД);
				
				Если ЗначениеЗаполнено(Результат) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = ЗавершитьЗагрузкуТСД(Терминал);
			КонецЕсли;
			
			Индикатор.Закрыть();
			
			ДанныеИзТСД.Свернуть("ШК", "Количество");
			
			Для Каждого СтрокаТЧ Из ДанныеИзТСД Цикл
				ОбработатьСтрокуДанныхИзТСД(СтрокаТЧ.ШК, СтрокаТЧ.Количество, ФормаКлиент)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Ошибки = ПолучитьТекстОшибкиТСДТО(Результат);
	//Если ПустаяСтрока(Ошибки) Тогда
	//	Предупреждение("Загрузка завершена успешно." + Символы.ПС +"Загружено " + СокрЛП(Количество) + " строк.");
	//Иначе
	//	Предупреждение("Не удалось загрузить данные:" + Символы.ПС + Ошибки);
	//КонецЕсли;
	
	//Костенюк Александр-Старт 25.05.2012
	#Если Клиент Тогда
		Если ПустаяСтрока(Ошибки) Тогда
			Предупреждение("Загрузка завершена успешно." + Символы.ПС +"Загружено " + СокрЛП(Количество) + " строк.");
		Иначе
			Предупреждение("Не удалось загрузить данные:" + Символы.ПС + Ошибки);
		КонецЕсли;
	#КонецЕсли
	//Костенюк Александр-Финиш 25.05.2012
	
КонецПроцедуры // ЗагрузитьИзТерминалаСбораДанных()

// Процедура обрабатывает строку, загруженную из ТСД.
//
// Параметры:
//  ТаблицаШтрихкодов - таблица значений, содержащая штрихкоды и их количество.
//  ФормаКлиент - форма, из которой вызвана загрузка данных из ТСД.
Процедура ОбработатьТаблицуШтрихкодов(ТаблицаШтрихкодов, ФормаКлиент)
	
	Перем Номенклатура;
	Перем ХарактеристикаНоменклатуры;
	Перем СерияНоменклатуры;
	Перем Качество;
	Перем ЕдиницаИзмерения;
	
	ТаблицаШтрихкодов.Свернуть("ШК", "Количество");
	
	Для Каждого СтрокаТЧ Из ТаблицаШтрихкодов Цикл
		ШК = СтрокаТЧ.ШК;
		Количество = СтрокаТЧ.Количество;
		
		Если РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(ШК) Тогда
			ТипШК = мEAN8;
		ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
			ТипШК = мEAN13;
		Иначе
			ТипШК = мCODE39;
		КонецЕсли;
		
		НоменклатураНайдена = Ложь;
		
		//Если ЗначениеЗаполнено(мПрефиксВесовогоТовара)
		//   И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара)
		//   И ТипШК = мEAN13
		//   И Лев(ШК, 2) = "2" + мПрефиксВесовогоТовара Тогда
		//	КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
		//	КоличествоТовара = Сред(ШК, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);
		
		//	Запрос = Новый Запрос("
		//	|ВЫБРАТЬ ПЕРВЫЕ 1
		//	|    РегКВТ.Номенклатура                         КАК Номенклатура,
		//	|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		//	|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		//	|    " + КоличествоТовара + " / 1000             КАК Количество,
		//	|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
		//	|    ВЫБОР
		//	|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
		//	|            &КачествоНовый
		//	|        ИНАЧЕ
		//	|            РегКВТ.Качество
		//	|    КОНЕЦ                                       КАК Качество
		//	|ИЗ
		//	|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
		//	|ГДЕ
		//	|    РегКВТ.Код = &Код
		//	|");
		
		//	Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
		//	Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
		//	Запрос.УстановитьПараметр("Код",                  Число(КодТовара));
		
		//	РезультатЗапроса = Запрос.Выполнить();
		//	Если Не РезультатЗапроса.Пустой() Тогда
		//		РезультатЗапроса = РезультатЗапроса.Выбрать();
		//		РезультатЗапроса.Следующий();
		
		//		Номенклатура               = РезультатЗапроса.Номенклатура;
		//		//ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
		//		//СерияНоменклатуры          = РезультатЗапроса.СерияНоменклатуры;
		//		//Качество                   = РезультатЗапроса.Качество;
		//		//ЕдиницаИзмерения           = РезультатЗапроса.ЕдиницаИзмерения;
		//		Количество                 = Количество * РезультатЗапроса.Количество;
		
		//		НоменклатураНайдена = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Не НоменклатураНайдена Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|    РегШК.Владелец                   КАК Владелец,
			|    РегШК.Штрихкод          		  КАК Штрихкод,
			|    РегШК.ТипШтрихкода 			  КАК ТипШтрихкода
			|ИЗ
			|    РегистрСведений.Штрихкоды        КАК РегШК
			|ГДЕ
			|    РегШК.Штрихкод = &Штрихкод
			|");
			
			Запрос.УстановитьПараметр("Штрихкод", ШК);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				РезультатЗапроса = РезультатЗапроса.Выбрать();
				РезультатЗапроса.Следующий();
				Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					Номенклатура               = РезультатЗапроса.Владелец;
					ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
					СерияНоменклатуры          = РезультатЗапроса.СерияНоменклатуры;
					Качество                   = РезультатЗапроса.Качество;
					ЕдиницаИзмерения           = РезультатЗапроса.ЕдиницаИзмерения;
					
					НоменклатураНайдена = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НоменклатураНайдена Тогда
			ФормаКлиент.СШКНоменклатура(Номенклатура, Количество, Неопределено);
		Иначе
			Текст = ПолучитьТекстОшибкиСШКТО(мОшибкаНеизвестныйШтрихкод, ШК, ТипШК);
			Сообщить(Текст);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработатьТаблицуШтрихкодов()

// Функция возвращает строку c именем компьютера для нужд торгового оборудования.
//
// Возвращаемое значение:
//  Строка - имя компьютера для торгового оборудования.
//
Функция ПолучитьИмяКомпьютераТО() Экспорт
	
	Если (Не мИмяКомпьютера = Неопределено) Тогда
		Возврат мИмяКомпьютера; 
	КонецЕсли;
	
	// Определение имени компьютера в терминальной сессии.
	
	// -- Front2k.
	Front2k = ПолучитьКомпоненту();
	Если (Не Front2k = Неопределено) Тогда
		
		мИмяКомпьютера = Front2k.ИмяТерминальногоКлиента();
		
	Иначе
		
		// -- MSScriptControl.ScriptControl.
		//Попытка
		
		//	msScript = Новый COMОбъект("MSScriptControl.ScriptControl");
		//	msScript.Language = "vbscript";
		//	msScript.UseSafeSubset = Истина;
		//	msScript.AllowUI = Ложь;
		//	msScript.TimeOut = 1000; // Секунда.
		//	msScript.AddObject("colItems", ПолучитьCOMОбъект("winmgmts:\\.\root\cimv2").ExecQuery("Select * from Win32_ServerSession",,48), Ложь);
		//	msScript.AddCode("
		//					|Function Main()
		//					|	For Each objItem in colItems
		//					|       Main = objItem.ComputerName
		//					|	Next
		//					|End Function");
		//	мИмяКомпьютера = msScript.Run("Main");
		//	
		//Исключение
		
		// -- WScript.Shell.
		Попытка
			
			wsShell = Новый COMОбъект("WScript.Shell");
			мИмяКомпьютера = Врег(wsShell.ExpandEnvironmentStrings("%CLIENTNAME%"));
			Если (мИмяКомпьютера = "%CLIENTNAME%") Или (мИмяКомпьютера = "CONSOLE") Тогда
				мИмяКомпьютера = Неопределено;
			КонецЕсли;
			
		Исключение
			мИмяКомпьютера = Неопределено;
		КонецПопытки;
		
		//КонецПопытки;
		
	КонецЕсли;
	
	// -- Стандартный метод.
	Если ПустаяСтрока(мИмяКомпьютера) Тогда
		мИмяКомпьютера = ВРег(ИмяКомпьютера());
	КонецЕсли;
	
	Возврат мИмяКомпьютера; 
	
КонецФункции // ПолучитьИмяКомпьютераТО()

// Функция возвращает строку c именем сервера терминалов, если программа запущена в терминальной сессии.
//
// Возвращаемое значение:
//  Строка. Имя сервера терминалов.
//
Функция ПолучитьИмяСервераТерминаловТО() Экспорт
	
	ИмяСервераТерминалов = ВРег(ИмяКомпьютера());
	
	Если (ИмяСервераТерминалов = ПолучитьИмяКомпьютераТО()) Тогда
		Возврат Строка(Неопределено);
	КонецЕсли;
	
	Возврат ИмяСервераТерминалов;
	
КонецФункции // ПолучитьИмяСервераТерминаловТО()

// Функция возвращает компьютер для нужд торгового оборудования.
//
// Возвращаемое значение:
//  СправочникСсылка.Компьютеры - компьютер для торгового оборудования.
//
Функция ПолучитьКомпьютерТО(Зарегистрировать = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(мКомпьютер) Тогда
		мКомпьютер = Справочники.Компьютеры.НайтиПоКоду(ПолучитьИмяКомпьютераТО());
		
		// -- Регистрацяи компьютера.
		Если мКомпьютер.Пустая() И Зарегистрировать Тогда
			Попытка
				Компьютер = Справочники.Компьютеры.СоздатьЭлемент();
				Компьютер.Код = СокрЛП(ПолучитьИмяКомпьютераТО());
				Компьютер.Наименование = СокрЛП(Компьютер.Код);
				Компьютер.Актуальность = Истина;
				Компьютер.РежимРаботы = Справочники.РежимыРаботы.Основной;
				Компьютер.Записать();
				мКомпьютер = Компьютер.Ссылка;
			Исключение
				мКомпьютер = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат мКомпьютер;
	
КонецФункции // ПолучитьКомпьютерТО()

// Процедура завершает обработку внешнего события. Вызывается из модуля приложения.
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	Оборудование = ПолучитьТО();
	ТО           = Оборудование.Найти(Источник, "ИмяИсточникаВнешнегоСобытия");
	Если  ТО <> Неопределено Тогда
		Обработка    = ТО.Обработка;
		Объект       = ТО.Объект;
		
		Обработка.СобытиеОбработано(Объект, мВнешнееСобытиеОбработано);
	КонецЕсли;
	мВнешнееСобытиеОбработано = Ложь;
	
КонецПроцедуры // ЗавершитьОбработкуВнешнегоСобытия()

///////////////////////////////////////////////////////////////////////////////
//// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТО()
	
	ТО = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Если ТО.Колонки.Количество() = 0 Тогда
		//Костенюк Александр-Старт 27.08.2012
		ТО.Колонки.Добавить("Компьютер");
		//Костенюк Александр-Финиш 27.08.2012
		ТО.Колонки.Добавить("Вид");
		ТО.Колонки.Добавить("Ссылки");
		ТО.Колонки.Добавить("Идентификатор");
		ТО.Колонки.Добавить("Наименование");
		ТО.Колонки.Добавить("Обработка");
		ТО.Колонки.Добавить("Объект");
		ТО.Колонки.Добавить("ИмяИсточникаВнешнегоСобытия");
	КонецЕсли;
	//инициализация дисконтной системы
	Если НЕ(мДК_Инициализирована) Тогда
		ДК_Инициализация();
	КонецЕсли;
	
	Возврат ТО;
	
КонецФункции

// Процедура обрабатывает строку, загруженную из ТСД.
//
// Параметры:
//  ШК - значение штрихкода, который нужно обработать.
//  Количество - количество данного штрихкода.
//  ФормаКлиент - форма, из которой вызвана загрузка данных из ТСД.
Процедура ОбработатьСтрокуДанныхИзТСД(ШК, Знач Количество, ФормаКлиент)
	
	Перем Номенклатура;
	Перем ХарактеристикаНоменклатуры;
	Перем СерияНоменклатуры;
	Перем Качество;
	Перем ЕдиницаИзмерения;
	
	ТипШК = Неопределено;
	
	Если РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(ШК) Тогда
		ТипШК = мEAN8;
	ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
		ТипШК = мEAN13;
	Иначе
		ТипШК = мCODE39;
	КонецЕсли;
	
	НоменклатураНайдена = Ложь;
	
	Если ЗначениеЗаполнено(мПрефиксВесовогоТовара)
		И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара)
		И ТипШК = мEAN13
		И Лев(ШК, 2) = "2" + мПрефиксВесовогоТовара Тогда
		КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
		КоличествоТовара = Сред(ШК, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегКВТ.Номенклатура                         КАК Номенклатура,
		|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|    " + КоличествоТовара + " / 1000             КАК Количество,
		|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
		|    ВЫБОР
		|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
		|            &КачествоНовый
		|        ИНАЧЕ
		|            РегКВТ.Качество
		|    КОНЕЦ                                       КАК Качество
		|ИЗ
		|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
		|ГДЕ
		|    РегКВТ.Код = &Код
		|");
		
		Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
		Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
		Запрос.УстановитьПараметр("Код",                  Число(КодТовара));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Номенклатура               = РезультатЗапроса.Номенклатура;
			ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
			СерияНоменклатуры          = РезультатЗапроса.СерияНоменклатуры;
			Качество                   = РезультатЗапроса.Качество;
			ЕдиницаИзмерения           = РезультатЗапроса.ЕдиницаИзмерения;
			Количество                 = Количество * РезультатЗапроса.Количество;
			
			НоменклатураНайдена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не НоменклатураНайдена Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегШК.Владелец                   КАК Владелец,
		|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
		|    РегШК.Качество                   КАК Качество
		|ИЗ
		|    РегистрСведений.Штрихкоды        КАК РегШК
		|ГДЕ
		|    РегШК.Штрихкод = &Штрихкод
		|");
		
		Запрос.УстановитьПараметр("Штрихкод", ШК);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = РезультатЗапроса.Выбрать();
			РезультатЗапроса.Следующий();
			Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				Номенклатура               = РезультатЗапроса.Владелец;
				//ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
				//СерияНоменклатуры          = РезультатЗапроса.СерияНоменклатуры;
				//Качество                   = РезультатЗапроса.Качество;
				//ЕдиницаИзмерения           = РезультатЗапроса.ЕдиницаИзмерения;
				
				НоменклатураНайдена = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НоменклатураНайдена Тогда
		ФормаКлиент.СШКНоменклатура(Номенклатура, Количество, Неопределено);
	Иначе
		Текст = ПолучитьТекстОшибкиСШКТО(мОшибкаНеизвестныйТовар, ШК, ТипШК);
		Сообщить(Текст);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСтрокуДанныхИзТСД()


///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ШАБЛОНАМИ ИНФОРМАЦИОННЫХ КАРТ

Функция ДК_Инициализация() Экспорт
	// инициализирована ли система
	Если мДК_Инициализирована Тогда
		Возврат мДК_Инициализирована;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШаблоныИнформационныхКарт.Наименование,
	|	ШаблоныИнформационныхКарт.ШаблонКода,
	|	ШаблоныИнформационныхКарт.ШаблонНомера,
	|	ШаблоныИнформационныхКарт.СчитываемаяДорожка,
	|	ШаблоныИнформационныхКарт.Ограничения,
	|	ШаблоныИнформационныхКарт.ВидДисконтнойКарты
	|ИЗ
	|	Справочник.ШаблоныИнформационныхКарт КАК ШаблоныИнформационныхКарт
	|ГДЕ
	|	(НЕ ШаблоныИнформационныхКарт.ПометкаУдаления)
	|	И (НЕ ШаблоныИнформационныхКарт.ЭтоГруппа)");
	
	мДК_ТаблицаШаблоновКодов = Запрос.Выполнить().Выгрузить();
	
	// критичные параметры
	мДК_Инициализирована = Истина;
	
	// все ок
	Возврат мДК_Инициализирована;
КонецФункции

Функция ДК_ИзвлечьНеобходимуюДорожкуИзКодаКарты(_Код,СчитываемаяДорожка=2)
	// проверка переданных значений
	Код = СокрЛП(_Код);
	Если НЕ(ЗначениеЗаполнено(Код)) ИЛИ (СчитываемаяДорожка < 0) ИЛИ (СчитываемаяДорожка > 3) Тогда
		Возврат "";
	КонецЕсли;
	
	// определение служебных символов                          
	мСимволНачалаПервойДорожки = "%";
	мСимволНачалаВторойДорожки = ";";
	мСимволНачалаТретейДорожки = "_";
	мСимволОкончанияДорожки = "?";
	
	// оставить данные без изменений
	Если (СчитываемаяДорожка = 0) Тогда
		Возврат Код;
	КонецЕсли;
	
	// извлекаем дорожки
	Первая = ""; Вторая = ""; Третья = "";
	// -- первая
	Если (Лев(Код,1) = мСимволНачалаПервойДорожки) Тогда
		Поз = Найти(Код,мСимволОкончанияДорожки); 
		Первая = Сред(Лев(Код,Поз-1),2); 
		Код = Сред(Код,Поз+1);
		Если НЕ(ПустаяСтрока(Первая)) Тогда
			Первая = "%" + Первая + "?";
		КонецЕсли;
	КонецЕсли;
	// -- вторая
	Если (Лев(Код,1) = мСимволНачалаВторойДорожки) Тогда
		Поз = Найти(Код,мСимволОкончанияДорожки); 
		Вторая = Сред(Лев(Код,Поз-1),2); 
		Код = Сред(Код,Поз+1);
		Если НЕ(ПустаяСтрока(Вторая)) Тогда
			Вторая = ";" + Вторая + "?";
		КонецЕсли;
	КонецЕсли;
	// -- третья
	Если (Лев(Код,1) = мСимволНачалаТретейДорожки) Тогда
		Поз = Найти(Код,мСимволОкончанияДорожки); 
		Третья = Сред(Лев(Код,Поз-1),2); 
		Код = Сред(Код,Поз+1);
		Если НЕ(ПустаяСтрока(Третья)) Тогда
			Третья = "_" + Третья + "?";
		КонецЕсли;
	КонецЕсли;
	
	// резульата
	Если      (СчитываемаяДорожка = 1) Тогда
		Возврат Первая;
	ИначеЕсли (СчитываемаяДорожка = 2) Тогда
		Возврат Вторая;
	ИначеЕсли (СчитываемаяДорожка = 3) Тогда
		Возврат Третья;
	КонецЕсли;
	
	// сюда дойти не можем, но если это произошло то вернем пустую строку
	Возврат "";
	
КонецФункции

Функция ДК_ИзвлечьНомерИзКодаКартыПоШаблону(_Код,_ШаблонКода,СчитываемаяДорожка=2) 
	// проверка переданных значений
	Код = СокрЛП(_Код); 
	ШаблонКода = СокрЛП(_ШаблонКода);
	
	// извлечение необходимой дорожки
	Код = ДК_ИзвлечьНеобходимуюДорожкуИзКодаКарты(Код,СчитываемаяДорожка);
	
	// проверка переданных значений
	Если НЕ(ЗначениеЗаполнено(Код)) ИЛИ НЕ(ЗначениеЗаполнено(ШаблонКода)) Тогда
		Возврат "";
	КонецЕсли;
	
	// предустановка значений
	НомерИзШаблона = ""; 
	фНеВерныйКод = Ложь;
	
	// анализируем
	Пока НЕ(фНеВерныйКод) Цикл
		
		// поиск в шаблоне первого служебного символа
		ДлиннаШаблона = СтрДлина(ШаблонКода); 
		Поз = ДлиннаШаблона + 1;
		
		темп = Найти(ШаблонКода,"%"); 
		Если (темп > 0) И (темп < Поз) Тогда 
			Поз = темп; 
		КонецЕсли;
		
		темп = Найти(ШаблонКода,"N"); 
		Если (темп > 0) И (темп < Поз) Тогда 
			Поз = темп; 
		КонецЕсли;
		
		темп = Найти(ШаблонКода,"n"); 
		Если (темп > 0) И (темп < Поз) Тогда 
			Поз = темп;
		КонецЕсли;
		
		// выделение статичной подстроки, начальной позиции поиска, служебного символа и изменение шаблона
		Если  (Поз = ДлиннаШаблона + 1) Тогда
			СлужебныйСимвол        = "";
			СтатичнаяПодСтрока     = ШаблонКода;
			ШаблонКода             = "";
		Иначе 
			СлужебныйСимвол        = Сред(ШаблонКода,Поз,1);
			СтатичнаяПодСтрока     = Лев(ШаблонКода,Поз-1);
			ШаблонКода             = Сред(ШаблонКода,Поз+1);
		КонецЕсли;
		
		// нужно ли нам сперва найти служебную подстроку
		Если НЕ(ПустаяСтрока(СтатичнаяПодСтрока)) Тогда
			ДлиннаПодСтроки = СтрДлина(СтатичнаяПодСтрока);
			Если СтатичнаяПодСтрока = Лев(Код,ДлиннаПодСтроки) Тогда
				// удаляем статическую строку из кода
				Код = Сред(Код,ДлиннаПодСтроки+1);
			Иначе
				// не верный код
				фНеВерныйКод = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// производим служебную операцию
		Если      СлужебныйСимвол="%" Тогда
			
			Если СтрДлина(Код)=0 Тогда
				// не верный код
				фНеВерныйКод = Истина;
			Иначе
				// удаляем один символ из кода
				Код = Сред(Код,2);
			КонецЕсли;
			
		ИначеЕсли СлужебныйСимвол="N" Тогда
			
			СимволЦифра = Лев(Код,1);
			Если Найти("0123456789",СимволЦифра) = 0 Тогда
				// не верный код
				фНеВерныйКод = Истина;
			Иначе
				// удаляем один символ из кода и добавляем символ к номеру из шаблона
				Код = Сред(Код,2);
				НомерИзШаблона = НомерИзШаблона + СимволЦифра;
			КонецЕсли;
			
		ИначеЕсли СлужебныйСимвол="n" Тогда
			
			СимволЦифра = Лев(Код,1);
			// удаляем один символ из кода и добавляем символ к номеру из шаблона если это была цифра
			Код = Сред(Код,2);
			Если Найти("0123456789",СимволЦифра) > 0 Тогда
				НомерИзШаблона = НомерИзШаблона + СимволЦифра;
			КонецЕсли;
			
		КонецЕсли;     		
		
		// -- доп. условия прекращения цикла
		// нормальное завершение
		Если ПустаяСтрока(ШаблонКода) Тогда
			Прервать;
		КонецЕсли;
		// не нормальное завершение
		Если ПустаяСтрока(Код) Тогда
			фНеВерныйКод = Истина;
		КонецЕсли;
		
	КонецЦикла;		
	
	// код не верен
	Если фНеВерныйКод Тогда
		Возврат "";
	КонецЕсли;
	
	// номер извлечен успешно
	Возврат НомерИзШаблона;
КонецФункции

Функция ДК_ПроверитьНомерКартыНаОграничения(_Номер,обШаблКодов)
	// есть ли ограничения
	Если обШаблКодов.Ограничения.Количество()=0 Тогда
		Возврат Истина; // нет ни одного ограничения
	КонецЕсли;
	
	// преобразуем номер в число
	Номер = Число(_Номер);
	
	// проверим все ограничения
	Для Каждого СтрокаТЧ из обШаблКодов.Ограничения Цикл
		//Операция  = СтрокаТЧ.ОперацияЛево + СтрокаТЧ.ОперацияПраво;
		ЗначениеЛ = Число(СтрокаТЧ.ЗначениеЛево);
		ЗначениеП = Число(СтрокаТЧ.ЗначениеПраво);
		
		// проверяем		
		Если   (Номер >= ЗначениеЛ) И (Номер <= ЗначениеП) Тогда
			Возврат Истина; // проверка пройдена
			//ИначеЕсли  (Номер >= ЗначениеЛ) И (Номер <  ЗначениеП) Тогда
			//	Возврат Истина; // проверка пройдена
			//ИначеЕсли (Номер >  ЗначениеЛ) И (Номер <= ЗначениеП) Тогда
			//	Возврат Истина; // проверка пройдена
			//ИначеЕсли (Операция = "()") И (Номер >  ЗначениеЛ) И (Номер <  ЗначениеП) Тогда
			//	Возврат Истина; // проверка пройдена
		КонецЕсли;
	КонецЦикла; 
	
	// ни одну проверку не прошла
	Возврат Ложь;
КонецФункции

Функция ДК_СформироватьНомерПоШаблону(_Номер,_ШаблонНомера)
	// проверка переданных значений
	Номер = СокрЛП(_Номер); 
	ШаблонНомера = СокрЛП(_ШаблонНомера);
	Если НЕ(ЗначениеЗаполнено(Номер)) ИЛИ НЕ(ЗначениеЗаполнено(ШаблонНомера)) Тогда
		Возврат "";
	КонецЕсли;
	
	// результат
	Результат = "";
	
	// формируем номер
	ДлиннаШаблона = СтрДлина(ШаблонНомера);
	Для Поз = 1 По ДлиннаШаблона Цикл
		Символ = Сред(ШаблонНомера,Поз,1);				   
		// выполняем действие
		Если  Символ="N" Тогда
			// добавляем цыфру или в случае ее отсутствия "0"
			Если ПустаяСтрока(Номер)=1 Тогда
				Результат = Результат + "0";
			Иначе
				Результат = Результат + Лев(Номер,1);
				Номер = Сред(Номер,2);
			КонецЕсли;  		
		ИначеЕсли Символ="n" Тогда        			
			// добавляем цифру, а в случае ее отсутствия не добовляем ничего
			Если ПустаяСтрока(Номер)=0 Тогда
				Результат = Результат + Лев(Номер,1);
				Номер = Сред(Номер,2);
			КонецЕсли;       			
		Иначе      										  
			// добавляем символ из шаблона
			Результат = Результат + Символ; 			
		КонецЕсли;   		
	КонецЦикла;
	
	// вернем сформированный номер
	Возврат Результат;
КонецФункции

Функция ДК_РасшифроватьКодКарты(Код, ВидДисконтнойКарты) Экспорт
	// инициализирована ли система
	Если НЕ(мДК_Инициализирована) Тогда
		Возврат "";
	КонецЕсли;
	// расшифровуем код
	РасшифрованныйКод="";
	Для Каждого СтрокаТЗ из мДК_ТаблицаШаблоновКодов Цикл		
		// пытаемся извлечь номер 		
		Номер = ДК_ИзвлечьНомерИзКодаКартыПоШаблону(Код,СтрокаТЗ.ШаблонКода,СтрокаТЗ.СчитываемаяДорожка);
		Если НЕ(ЗначениеЗаполнено(Номер)) Тогда
			Продолжить;
		КонецЕсли;
		
		// проверяем на ограничения номера
		Если НЕ(ДК_ПроверитьНомерКартыНаОграничения(Номер,СтрокаТЗ)) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидДисконтнойКарты = СтрокаТЗ.ВидДисконтнойКарты ;
		// все тесты пройдены
		РасшифрованныйКод = ДК_СформироватьНомерПоШаблону(Номер,СтрокаТЗ.ШаблонНомера);
		Прервать;
		
	КонецЦикла;
	
	// возвращаем результат
	Возврат РасшифрованныйКод;
КонецФункции



Функция ПолучитьКомпоненту()
	
	Если (мFront2k = Неопределено) Тогда
		мFront2k = ОбщегоНазначения.ЗагрузитьКомпоненту("ExtHusp.dll", "Addin.ExtHusp");
	КонецЕсли;
	
	Возврат мFront2k; 
	
КонецФункции // ПолучитьКомпоненту()

Функция ПолучитьПервоеУстройство(Вид, КассаККМ = Неопределено) Экспорт
	
	МассивУстройств = ПолучитьСписокУстройств(Вид, КассаККМ);
	
	Если Булево(МассивУстройств.Количество()) Тогда
		Возврат МассивУстройств[0];
	КонецЕсли;		
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьПервоеУстройство()

//Костенюк Александр-Старт 24.04.2012
// Функция получает параметры печати табличного документа
// 
// Параметры
// Идентификатор - УникальныйИдентификатор, идентификатор устроства
//
// Возвращаемое значение
// Результат
Процедура ПрименитьПараметрыПечати(Идентификатор, ТабДокумент) Экспорт
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Попытка
			
			ТабДокумент.ИмяПринтера = Объект.Параметры.НазваниеПринтера;
			
			//ТабДокумент.РазмерСтраницы = "Custom";
			//
			//ТабДокумент.ВысотаСтраницы = Объект.Параметры.ВысотаСтраницы;
			//ТабДокумент.ШиринаСтраницы = Объект.Параметры.ШиринаСтраницы;
			
			ТабДокумент.ПолеСверху 	= Объект.Параметры.ПолеСверху;
			ТабДокумент.ПолеСнизу 	= Объект.Параметры.ПолеСнизу;
			ТабДокумент.ПолеСлева 	= Объект.Параметры.ПолеСлева;
			ТабДокумент.ПолеСправа 	= Объект.Параметры.ПолеСправа;
			
			ТабДокумент.РазмерКолонтитулаСверху = Объект.Параметры.ПолеСверхуКолонтитул;
			ТабДокумент.РазмерКолонтитулаСнизу 	= Объект.Параметры.ПолеСнизуКолонтитул;
			
			// Получить необходимое количество копий
			ТабДокумент.КоличествоЭкземпляров = Объект.Параметры.КоличествоКопий;
			
			Если НЕ ТабДокумент.АвтоМасштаб
				И НЕ ЗначениеЗаполнено(ТабДокумент.ИмяПринтера) Тогда
				ТабДокумент.АвтоМасштаб = Истина;
			КонецЕсли;
			
			ТабДокумент.Вывод = ИспользованиеВывода.Разрешить;
			
			мОписаниеОшибки = Объект.ОписаниеОшибки;
			
		Исключение
			
			Результат = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
			
		КонецПопытки;
		
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("Принтер");
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 24.04.2012

//Костенюк Александр-Старт 07.07.2012
// Функция осуществляет выключение индикатора на устройстве УУСН 
// Результат – успех выполнения функции.
//
Функция УстановитьСостояниеКанала(Обработка, Объект, Состояние) Экспорт
	
	Результат = мНетОшибки;
	
	Попытка
		Результат   	= Обработка.УстановитьСостояниеКанала(Объект, Состояние);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Исключение
		Результат 		= Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
	КонецПопытки;		

	Возврат Результат;
	
КонецФункции
//Костенюк Александр-Финиш 07.07.2012

//Костенюк Александр-Старт 09.07.2012
// Функция получает состояние канала на устройстве УУСН 
// Результат – успех выполнения функции.
//
Функция ПолучитьСостояниеКанала(Обработка, Объект) Экспорт
	
	Результат = мНетОшибки;
	
	Попытка
		Результат   	= Обработка.ПолучитьСостояниеКанала(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Исключение
		Результат 		= Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается;		
	КонецПопытки;		

	Возврат Результат;
	
КонецФункции
//Костенюк Александр-Финиш 09.07.2012

//Костенюк Александр-Старт 02.08.2012
Функция RAW_ESC(Текст) Экспорт
	Результат = "";
	Если ПустаяСтрока(Текст) Тогда
		Возврат Результат;
	КонецЕсли;
	спТекст = Парсинг(СокрП(Текст), "#");
	Для Индекс = 1 По Размер(спТекст) Цикл
		Значение = Значение(спТекст, Индекс);
		Значение = Значение.Значение;
		Если Значение = "" Тогда
			Продолжить;
		КонецЕсли;
		Если (Значение = Строка(Число(Значение))) Тогда
			Результат = Результат + Символ(Число(Значение));
		Иначе
			Результат = Результат + RAW_ANSI2OEM(Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции
//Костенюк Александр-Финиш 02.08.2012

//Костенюк Александр-Старт 02.08.2012
Функция RAW_ANSI2OEM(Текст) Экспорт
	Попытка
		Возврат мFront2k.ANSI2OEM(Текст);
	Исключение
		Возврат Текст;
	КонецПопытки;
КонецФункции
//Костенюк Александр-Финиш 02.08.2012

//Костенюк Александр-Старт 02.08.2012
//=====================================
// Возвращает:	Вариант  I: Список значений полученый после парсинга строки.
// 					Параметры:	Значение	- строка для синтаксического анализа;
//								Разделитель	- строка/символ разделитель значений;
//								Объект		- конечный список значений, если задан.
//				Вариант II: Строка полученая после депарсинга списка значений.
// 					Параметры:	Значение	- список значений;
//								Разделитель	- строка/символ разделитель значений;
//								Объект		- конечная строка, если задан.
Функция Парсинг(знач Значение, Разделитель=",", Объект=0) Экспорт
	
	Если (ТипЗнч(Значение) = Тип("СписокЗначений")) Тогда
		Объект = ""; 
		Размер = Размер(Значение); 
		Для Поз = 1 По Размер Цикл
			Если НЕ(Поз = 1) Тогда
				Объект = Объект + Разделитель + Строка(Значение(Значение, Поз));
			Иначе
				Объект = Строка(Значение(Значение, Поз));
			КонецЕсли;          
		КонецЦикла;
	Иначе
		Объект = Новый СписокЗначений;
		// парсим
		ДлиннаРазделителя = Размер(Разделитель);
		Пока НЕ ПустаяСтрока(Значение) Цикл
			Поз = Найти(Значение,Разделитель); 
			Если НЕ ЗначениеЗаполнено(Поз) Тогда 
				Поз = Размер(Значение) + 1; 
			КонецЕсли;
			Объект.Добавить(Лев(Значение,Поз-1));
			Значение = Сред(Значение,Поз+ДлиннаРазделителя);
		КонецЦикла;
	КонецЕсли;          
		
	// результат
	Возврат Объект;
	
КонецФункции
//Костенюк Александр-Финиш 02.08.2012

//Костенюк Александр-Старт 02.08.2012
//=====================================
// Возвращает:	Размер/длинну объекта.
// Параметры:	Объект - объект размер которого необходимо определить.
// Примечание:	Вычисление размера объектов:
//					- СписокЗначений	- кол-во элементов списка;
//					- ТаблицаЗначений	- кол-во строк таблицы;
//					- Строка			- длинна строки;
//					- Число				- длинна числа в строковом представлении (включая разделитель).
Функция Размер(Объект) Экспорт
	Если ТипЗнч(Объект) = Тип("СписокЗначений") Тогда
		Возврат Объект.Количество();
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		Возврат Объект.Количество();
	ИначеЕсли ТипЗнч(Объект) = Тип("ТекстовыйДокумент") Тогда
		Возврат Объект.КоличествоСтрок();
	ИначеЕсли ТипЗнч(Объект) = Тип("XBASE") Тогда
		Возврат Объект.КоличествоЗаписей();
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда
		Возврат СтрДлина(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("Число") Тогда
		Возврат СтрДлина(Строка(Объект));
	Иначе
		Возврат 0;
	КонецЕсли;          
КонецФункции
//Костенюк Александр-Финиш 02.08.2012

//Костенюк Александр-Старт 02.08.2012
//=====================================
// Возвращает:	Устанавливаемое значение.
// Параметры:	Объект - объект значение которого необходимо установить:
//					- СписокЗначений:
//						Рекв1 - номер значения, если не указана используется текущее значения (текущая строка);
//						Рекв2 - устанавливаемое значение;
//						Рекв3 - строковое представление значения;
//					- ТаблицаЗначений:
//						Рекв1 - строка, если не указана используется текущая строка;
//						Рекв2 - колонка, если не указана используется текущая колонка;
//						Рекв3 - устанавливаемое значение;
//					- Строка:
//						Объект - имя переменной, атрибута, реквизита формы, функции и прочих конструкция встроенного языка;
//						Рекв1 - устанавливаемое значение.
// Примечание:	В случае если устанавливаемое значение не задано функция возвращает текущее значение объекта.
Функция Значение(Объект, Рекв1=0,Рекв2=0,Рекв3=0) Экспорт
	Если ТипЗнч(Объект) = Тип("СписокЗначений") Тогда
		Если НЕ ЗначениеЗаполнено(Рекв1) Тогда
			Рекв1 = Объект.Получить(0);
		КонецЕсли;
		Если  НЕ ЗначениеЗаполнено(Рекв1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если ТипЗнч(Рекв1) = Тип("Число") Тогда
			Если (НЕ ЗначениеЗаполнено(Рекв2)) И (ТипЗнч(Рекв2) = Тип("Число")) Тогда
				Возврат Объект.Получить(Рекв1 - 1);
			Иначе
				Объект.Вставить(Рекв1 - 1,Рекв2,Рекв3); 
				Возврат Рекв2;
			КонецЕсли;
		Иначе
			Рекв3 = Строка(Рекв1);
			Если (НЕ ЗначениеЗаполнено(Рекв2)) И (ТипЗнч(Рекв2) = Тип("Число")) Тогда
				Возврат Объект.Получить(Рекв3);
			Иначе
				Объект.Вставить(Рекв3,Рекв2); 
				Возврат Рекв2;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		Если НЕ ЗначениеЗаполнено(Рекв1) Тогда
			Рекв1 = Объект.Получить(0);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Рекв2) Тогда
			Рекв2 = Объект.Получить(0);
		КонецЕсли;
		Если (НЕ ЗначениеЗаполнено(Рекв1)) ИЛИ (НЕ ЗначениеЗаполнено(Рекв2)) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если (НЕ ЗначениеЗаполнено(Рекв3)) И (ТипЗнч(Рекв3) = Тип("Число")) Тогда
			Возврат Объект.Получить(Рекв1);
		Иначе
			Объект.Вставить(Рекв1); 
			Возврат Рекв3;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ТекстовыйДокумент") Тогда
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда
		Если (НЕ ЗначениеЗаполнено(Рекв1)) И (ТипЗнч(Рекв1) = "Число") Тогда
			//Шаблон("[__Присвоить(__Шаблонная,"+Объект+")]");
			//Возврат __Шаблонная;
		Иначе
			//Шаблон("[__Присвоить("+Объект+",Рекв1)]");
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;          
КонецФункции
//Костенюк Александр-Финиш 02.08.2012

//Костенюк Александр-Старт 02.08.2012
Процедура RAW_Печать(Принтер, Данные) Экспорт
	Попытка 
		мFront2k.RAWПечать(Принтер, Данные); 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры
//Костенюк Александр-Финиш 02.08.2012

//Костенюк Александр-Старт 21.05.2013
// Функция осуществляет обработку внешнего события от устройств для считывания
// магнитных карт.
//
// Параметры:
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  СМК                            - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьСобытиеСМК(Обработка, Объект, Клиент, Событие, Данные, СМК)
	
	Результат = мНетОшибки;	
	
	КодКарты  = Неопределено;
	Результат = Обработка.ОбработатьСобытиеСМК(Объект, Событие, Данные, КодКарты);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;    
	
	ОбработатьПовторно 	= Ложь;
	ПродолжитьПроцедуру = Ложь;
	ВидДисконтнойКарты 	= Неопределено;
	
	// Разбор кода карты - по шаблонам	
	КодКарты = ДК_РасшифроватьКодКарты(КодКарты, ВидДисконтнойКарты);
	
	// Поиск регистрационной карты по регистру "РегистрационныеКарты" 
	ИскомаяКарта = РегистрыСведений.РегистрационныеКарты.НайтиРегистрационнуюКарту(КодКарты);
	
	// Поиск по справочнику "ИнформационныеКарты"
	Если ИскомаяКарта.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИнформационныеКарты.Ссылка
		               |ИЗ
		               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		               |ГДЕ
		               |	НЕ ИнформационныеКарты.ПометкаУдаления
		               |	И НЕ ИнформационныеКарты.ЭтоГруппа
		               |	И ИнформационныеКарты.КодКарты = &КодКарты";
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ИнформационнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
		Иначе
			ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
			ИнформационнаяКарта = ТаблицаЗапроса[0].Ссылка;
		КонецЕсли;
	Иначе
		ИнформационнаяКарта = ИскомаяКарта;
	КонецЕсли;
	
	// Регистрационная карта
	//.. Начало изменения Dim)on  16 октября 2013 г. 15:58:16
	//
	//Если ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
	Если ТипЗнч(ИнформационнаяКарта) = Тип("СправочникСсылка.РегистрационныеКарты") Или
		(ТипЗнч(ИнформационнаяКарта) = Тип("СправочникСсылка.ИнформационныеКарты") И ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная) Тогда
	//
	//.. Конец изменения Dim)on  16 октября 2013 г. 15:58:16
		Если ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.TouchВводЗначения") Тогда
			Клиент.ОбработатьЗначение(ИнформационнаяКарта);
			Клиент.ВладелецФормы.КартаЗанята(ИнформационнаяКарта);
			Клиент.Закрыть();
			Ответ = Истина;
		// Автоматическое создание заказа при запрете сохранения заказа 
		ИначеЕсли ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.FrontOfficeМенеджерДокумента") Тогда
			Клиент.ПредупреждениеЗапретСохраненияЗаказа(Ответ);
			Если Ответ Тогда
				Ответ = Ложь;
				Ответ = Клиент.СМКИнформационнаяКарта(ИнформационнаяКарта, СМК);
				Если Ответ Тогда
					Если УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeАвтоматическоеСозданиеЗаказаПриВходеВСистему) Тогда
						Клиент.АвтоматическоеСозданиеЗаказа();
					Иначе
						Клиент.КнопкаНазадНажатие(Неопределено);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
		Иначе
			Ответ = Клиент.СМКИнформационнаяКарта(ИнформационнаяКарта, СМК);
		КонецЕсли;
		Если Ответ Тогда
			Обработка.СобытиеОбработано(Объект);
			Возврат Результат;
		КонецЕсли;
	// Дисконтная карта
	//.. Начало изменения Dim)on  16 октября 2013 г. 16:09:43
	//
	//ИначеЕсли ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
	ИначеЕсли ТипЗнч(ИнформационнаяКарта) = Тип("СправочникСсылка.ИнформационныеКарты") И ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
	//
	//.. Конец изменения Dim)on  16 октября 2013 г. 16:09:43
		Если ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.FrontOfficeМенеджерДокумента") Тогда
			ФормаПоискаЧисла = Обработки.TouchПоискЗначения.ПолучитьФорму("ФормаЧисла");
			Если ФормаПоискаЧисла.Открыта() Тогда 
				#Если Клиент Тогда
					Оповестить(Событие,РезультатЗапроса.Карта, Обработка);
				#КонецЕсли
				Ответ = Истина;
			Иначе             
				Ответ = Клиент.ДобавитьСкидкуПоДисконтнойКарте(ИнформационнаяКарта);
			КонецЕсли;
			Если Ответ Тогда
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ТипЗнч(Клиент.ОбработкаОбъект)= Тип ("ОбработкаОбъект.FrontOfficeМенеджерЖурналаДокументовРесторана") Тогда
			Ответ = Клиент.ВывестиИнформациюПоДисконтнойКарте(ИнформационнаяКарта);
			Если Ответ Тогда
				Обработка.СобытиеОбработано(Объект);
				Возврат Результат;
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	// Карта не найдена
	Иначе
		Если ЗначениеЗаполнено(ВидДисконтнойКарты) Тогда
			Если ТипЗнч(Клиент.ОбработкаОбъект) = Тип("ОбработкаОбъект.TouchВводЗначения") Тогда
				Клиент.ОбработатьЗначение(КодКарты);
				Клиент.ВладелецФормы.НазначитьКарту(КодКарты);
				Клиент.Закрыть();
				Ответ = Истина;
				Если Ответ Тогда
					Обработка.СобытиеОбработано(Объект);
					Возврат Результат;
				КонецЕсли;
				Возврат Результат;
			Иначе
				//РаботаСТорговымОборудованием.СоэдатьЭлементВСправочникеИнформационныеКарты(КодКарты, ВидДисконтнойКарты, Перечисления.ВидыИнформационныхКарт.Магнитная, Перечисления.ТипыИнформационныхКарт.Дисконтная, ОбработатьПовторно, ПродолжитьПроцедуру);	
				//Костенюк Александр-Старт 17.06.2014
				Если ВидДисконтнойКарты.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
					РаботаСТорговымОборудованием.СоэдатьЭлементВСправочникеИнформационныеКарты(КодКарты, ВидДисконтнойКарты, Перечисления.ВидыИнформационныхКарт.Магнитная, Перечисления.ТипыИнформационныхКарт.Дисконтная, ОбработатьПовторно, ПродолжитьПроцедуру);
				Иначе
					Справочники.РегистрационныеКарты.СоздатьКарту(КодКарты);
				КонецЕсли;
				//Костенюк Александр-Финиш 17.06.2014
				Если ОбработатьПовторно Тогда
					ОбработатьСобытиеСМК(Обработка, Объект, Клиент, Событие, Данные, СМК);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ПродолжитьПроцедуру Тогда
		Ответ = Клиент.СМКНеизвестныйКод(КодКарты, СМК);
		Если Ответ Тогда
			Обработка.СобытиеОбработано(Объект);
			Возврат Результат;
		КонецЕсли;
		Результат = мОшибкаНеизвестнаяКарта;
		Клиент.СМКОшибка(Результат, КодКарты, СМК);
		Обработка.СобытиеОбработано(Объект);
		Возврат Результат;	
	Иначе
		Обработка.СобытиеОбработано(Объект);
		Возврат Результат;
	КонецЕсли;	
	
КонецФункции // ОбработатьСобытиеСМК()
//Костенюк Александр-Финиш 21.05.2013


///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ВидыТО = Перечисления.ВидыТорговогоОборудования;

мДисплейПокупателя        = ВидыТО.ДисплейПокупателя;
мККМOffLine               = ВидыТО.ККМOffLine;
мККМOnLine                = ВидыТО.ККМOnLine;
мСчитывательМагнитныхКарт = ВидыТО.СчитывательМагнитныхКарт;
мСканерШтрихКода          = ВидыТО.СканерШтрихКода;
мТерминалСбораДанных      = ВидыТО.ТерминалСбораДанных;
мФискальныйРегистратор    = ВидыТО.ФискальныйРегистратор;
мЭлектронныеВесы          = ВидыТО.ЭлектронныеВесы;
мЭлектронныеВесыOffline   = ВидыТО.ЭлектронныеВесыOffline;
мСчитывателиRFIDМеток     = ВидыТО.СчитывательRFIDМеток;

//Костенюк Александр-Старт 09.07.2012
мУУСН     				  = ВидыТО.УправленияСиловымиНагрузками;
//Костенюк Александр-Финиш 09.07.2012

мПрефиксВесовогоТовара      = Константы.ПрефиксВесовогоТовара.Получить();
мДлинаКодаВесовогоТовара    = Константы.ДлинаКодаВесовогоТовара.Получить();
мПрефиксДокумента      = Константы.ПрефиксДокумента.Получить();
мПрефиксВстречки      = Константы.ПрефиксВстречки.Получить();

мПустаяКассаККМ             = Справочники.КассыККМ.ПустаяСсылка();
//мКачествоПустаяСсылка       = Справочники.Качество.ПустаяСсылка();
//мКачествоНовый              = Справочники.Качество.Новый;
//мХарактеристикиПустаяСсылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
//мСерииПустаяСсылка          = Справочники.СерииНоменклатуры.ПустаяСсылка();
мМагнитнаяКарта             = Перечисления.ВидыИнформационныхКарт.Магнитная;

мEAN8                       = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
мEAN13                      = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
мCODE39                     = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39;

мНетОшибки                  = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаНеизвестно           = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно;
мНетПрав                    = Перечисления.ТООшибкиОбщие.ОшибкаНетПрав;
мОшибкаПодключения          = Перечисления.ТООшибкиОбщие.ОшибкаПриПодключении;

мОшибкаНеизвестныйШтрихкод  = Перечисления.ТООшибкиСШК.ОшибкаНеизвестныйШтрихкод;
мОшибкаНеизвестныйТовар     = Перечисления.ТООшибкиТСД.ОшибкаНеизвестныйТовар;
мОшибкаЗагрузкиОтчета       = Перечисления.ТООшибкиККМOffline.ОшибкаЗагрузкиОтчета;
мОшибкаНеизвестнаяКарта     = Перечисления.ТООшибкиСМК.ОшибкаНеизвестнаяКарта;

мМодельПодключаемогоТО = "";

мВнешнееСобытиеОбработано = Ложь;

//Информационные карты
мДК_Инициализирована = Ложь;
мДК_ТаблицаШаблоновКодов = Неопределено;

//#КонецЕсли