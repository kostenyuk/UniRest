// Подсистема "Управление доступом"

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения, Добавления, Изменения: Ссылка
	
	// Доступ по папке файлов.
	Строка = Таблица.Добавить();
	Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПапкиФайлов;
	Строка.ЗначениеДоступа = Ссылка;
	
КонецПроцедуры

// Подсистема "Управление доступом"


Процедура ПередЗаписью(Отказ)
	Если НЕ ОбменДанными.Загрузка Тогда
		
		ПометкаИБ = ПометкаУдаленияВИБ();
		//Если ПометкаУдаления И Не ПометкаИБ Тогда
		//	
		//	// Проверка права "Пометка на удаление".
		//	Если НЕ РаботаСФайламиПереопределяемый.ПометкаУдаленияРазрешена(Ссылка) Тогда
		//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//							 НСтр("ru = 'У вас нет права ""Пометка на удаление"" папки файлов ""%1"".'"),
		//							 Строка(Ссылка));
		//	КонецЕсли;
		//КонецЕсли;
		
		Если ПометкаУдаления <> ПометкаИБ И Не Ссылка.Пустая() Тогда
			// Отбираем файлы и пытаемся поставить им пометку удаления
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Файлы.Ссылка,
				|	Файлы.Редактирует
				|ИЗ
				|	Справочник.Файлы КАК Файлы
				|ГДЕ
				|	Файлы.ВладелецФайла = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.Редактирует.Пустая() Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                     НСтр("ru = 'Папку %1 нельзя удалить, т.к. она содержит файл ""%2"", занятый для редактирования.'"),
					                     Строка(Ссылка),
					                     Строка(Выборка.Ссылка));
				КонецЕсли;

				ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ФайлОбъект.Заблокировать();
				ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ПрошлыйЭтоНовый", ЭтоНовый());
		
		Если НЕ ЭтоНовый() Тогда
			
			Если Наименование <> Ссылка.Наименование Тогда // переименована папка
				//РабочийКаталогЭтойПапки = РаботаСФайламиВызовСервера.ПолучитьРабочийКаталог(Ссылка);
				//РабочийКаталог = РаботаСФайламиВызовСервера.ПолучитьРабочийКаталог(Ссылка.Родитель);
				РабочийКаталогЭтойПапки = РассылкаОтчетовВызовСервера.ПолучитьРабочийКаталог(Ссылка);
				РабочийКаталог = РассылкаОтчетовВызовСервера.ПолучитьРабочийКаталог(Ссылка.Родитель);
				Если РабочийКаталог <> "" Тогда
					
					// Добавляем слэш в конце, если его нет
					//РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог, ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
					РабочийКаталог = __ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог, РассылкаОтчетовПовтИсп.ТипПлатформыСервера());
					
					//РабочийКаталогУнаследованныйПрежний = РабочийКаталог + Ссылка.Наименование + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
					РабочийКаталогУнаследованныйПрежний = РабочийКаталог + Ссылка.Наименование + РассылкаОтчетовКлиентСервер.ПолучитьСлеш(РассылкаОтчетовКлиентСервер.ТипПлатформыСервера());
					Если РабочийКаталогУнаследованныйПрежний = РабочийКаталогЭтойПапки Тогда
						//РабочийКаталог = РабочийКаталог + Наименование + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
						//РаботаСФайламиВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталог);
						РабочийКаталог = РабочийКаталог + Наименование + РассылкаОтчетовКлиентСервер.ПолучитьСлеш(РассылкаОтчетовПовтИсп.ТипПлатформыСервера());
						РассылкаОтчетовВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталог);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Родитель <> Ссылка.Родитель Тогда // перенесли папку в другую папку
				//РабочийКаталогЭтойПапки = РаботаСФайламиВызовСервера.ПолучитьРабочийКаталог(Ссылка);
				//РабочийКаталог = РаботаСФайламиВызовСервера.ПолучитьРабочийКаталог(Ссылка.Родитель);
				//РабочийКаталогНовый = РаботаСФайламиВызовСервера.ПолучитьРабочийКаталог(Родитель);
				РабочийКаталогЭтойПапки = РассылкаОтчетовВызовСервера.ПолучитьРабочийКаталог(Ссылка);
				РабочийКаталог = РассылкаОтчетовВызовСервера.ПолучитьРабочийКаталог(Ссылка.Родитель);
				РабочийКаталогНовый = РассылкаОтчетовВызовСервера.ПолучитьРабочийКаталог(Родитель);
				Если РабочийКаталог <> "" ИЛИ РабочийКаталогНовый <> "" Тогда
					
					РабочийКаталогУнаследованныйПрежний = РабочийКаталог;
					
					Если РабочийКаталог <> "" Тогда
						//РабочийКаталогУнаследованныйПрежний = РабочийКаталогУнаследованныйПрежний + Ссылка.Наименование + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
						РабочийКаталогУнаследованныйПрежний = РабочийКаталогУнаследованныйПрежний + Ссылка.Наименование + РассылкаОтчетовКлиентСервер.ПолучитьСлеш(РассылкаОтчетовПовтИсп.ТипПлатформыСервера());
					КонецЕсли;
					
					Если РабочийКаталогУнаследованныйПрежний = РабочийКаталогЭтойПапки Тогда // рабочий каталог автоформируется от родителя
						
						Если РабочийКаталогНовый <> "" Тогда
							//РабочийКаталогНовый = РабочийКаталогНовый + Наименование + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
							//РаботаСФайламиВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталогНовый);
							РабочийКаталогНовый = РабочийКаталогНовый + Наименование + РассылкаОтчетовКлиентСервер.ПолучитьСлеш(РассылкаОтчетовПовтИсп.ТипПлатформыСервера());
							РассылкаОтчетовВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталогНовый);
						Иначе
							//РаботаСФайламиВызовСервера.ОчиститьРабочийКаталог(Ссылка);
							РассылкаОтчетовВызовСервера.ОчиститьРабочийКаталог(Ссылка);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если НЕ ОбменДанными.Загрузка Тогда
		
		Если ДополнительныеСвойства.ПрошлыйЭтоНовый Тогда
			//РабочийКаталогВладельца = РаботаСФайламиВызовСервера.ПолучитьРабочийКаталог(Родитель);
			РабочийКаталогВладельца = РассылкаОтчетовВызовСервера.ПолучитьРабочийКаталог(Родитель);
			Если РабочийКаталогВладельца <> "" Тогда
				
				//// Добавляем слэш в конце, если его нет
				//РабочийКаталогВладельца = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталогВладельца, ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
				//
				//РабочийКаталогВладельца = РабочийКаталогВладельца + Наименование + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
				//РаботаСФайламиВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталогВладельца);
				
				// Добавляем слэш в конце, если его нет
				РабочийКаталогВладельца = __ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталогВладельца, РассылкаОтчетовПовтИсп.ТипПлатформыСервера());
				
				РабочийКаталогВладельца = РабочийКаталогВладельца + Наименование + РассылкаОтчетовКлиентСервер.ПолучитьСлеш(РассылкаОтчетовПовтИсп.ТипПлатформыСервера());
				РассылкаОтчетовВызовСервера.СохранитьРабочийКаталог(Ссылка, РабочийКаталогВладельца);
				
			КонецЕсли;
		КонецЕсли;		
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ДатаСоздания = ТекущаяДатаСеанса();
	Ответственный = Пользователи.ТекущийПользователь();
КонецПроцедуры

// Возвращает текущее значение пометки удаления в информационной базе
Функция ПометкаУдаленияВИБ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиФайлов.ПометкаУдаления
		|ИЗ
		|	Справочник.ПапкиФайлов КАК ПапкиФайлов
		|ГДЕ
		|	ПапкиФайлов.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПометкаУдаления;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНайденныхНедопустимыхСимволов = __ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(Наименование);
	Если МассивНайденныхНедопустимыхСимволов.Количество() <> 0 Тогда
		Отказ = Истина;
		
		Текст = НСтр("ru = 'Наименование папки содержит запрещенные символы ( \ / : * ? "" < > | .. )'");
		__ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "Наименование");
	КонецЕсли;
	
КонецПроцедуры
