
#Если Клиент Тогда
	
// Процедура инициализация модуля рабочего места.
//
Процедура Инициализация() Экспорт
	
	// Проверка режима.
	Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Создание формы.
	Если (Форма = Неопределено) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
		
КонецПроцедуры // Инициализация()

// Процедура открытия формы рабочего места.
//
Процедура Открыть() Экспорт
	
	// Открытие формы.
	ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		
КонецПроцедуры // Открыть()


// Процедура заполнения табличного поля документов.
//
// Параметры:
//	ТабличноеПоле - TouchТабличноеПоле. Табличное поле;
//	Производство - Булево. Режим производста.
//
Процедура ТаблицаДокументовПрочитать(ТабличноеПоле, Производство = Ложь, ИгнорироватьОчередность = Истина) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;
		
		Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
		Данные.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"), "Документ");
		Данные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		Данные.Колонки.Добавить("Ресторан", Новый ОписаниеТипов("Булево"));
		Данные.Колонки.Добавить("Распределен", Новый ОписаниеТипов("Булево"));
		Данные.Колонки.Добавить("Стол", Новый ОписаниеТипов("СправочникСсылка.Столы"));
		Данные.Колонки.Добавить("Наряд", Новый ОписаниеТипов("ДокументСсылка.НакладнаяНаДоставку"));
		Данные.Колонки.Добавить("ПолныйНомерСтола", Новый ОписаниеТипов("Строка"), НСтр("ru='Стол/наряд';uk='Стіл/наряд'") );
		Данные.Колонки.Добавить("НарядНомер", Новый ОписаниеТипов("Строка"));
		Данные.Колонки.Добавить("НарядДата", Новый ОписаниеТипов("Дата"));
		Данные.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"), НСтр("ru='Кол-во позиций';uk='Кількість поз.'") );
		Данные.Колонки.Добавить("ПродолжительностьПроизводства", Новый ОписаниеТипов("Дата"), НСтр("ru='t произв.';uk='t виробн.'") );
		Данные.Колонки.Добавить("ТребуемаяДатаОкончанияПериода", Новый ОписаниеТипов("Дата"), НСтр("ru='Окончание произв.';uk='Закінчення виробництва'") );
		Данные.Колонки.Добавить("СортировкаДата", Новый ОписаниеТипов("Число"));
		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("ПолныйНомерСтола,Номер,Количество,ПродолжительностьПроизводства,ТребуемаяДатаОкончанияПериода");
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").Ширина = 400 * 0.25;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("Количество").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Количество").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("Количество").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Право;
		ТабличноеПоле.Колонки.Получить("ПродолжительностьПроизводства").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("ПродолжительностьПроизводства").Формат = "ДФ=HH:mm";
		ТабличноеПоле.Колонки.Получить("ПродолжительностьПроизводства").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("ТребуемаяДатаОкончанияПериода").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("ТребуемаяДатаОкончанияПериода").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
	Иначе
		// -- Текущая позиция (I).
		Если (Не ТабличноеПоле.ТекущаяСтрока() = Неопределено) Тогда
			ТекущийДокумент = ТабличноеПоле.ТекущиеДанные().Ссылка;
		КонецЕсли;
		
		Данные.Очистить();
	КонецЕсли;
	
	// Выборка данных.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущийРабочийЦентр = ПолучитьСерверFrontOffice().ТекущийРабочийЦентр();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Документ КАК Ссылка,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Номер,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Дата КАК Дата,
	               |	ВЫБОР
	               |		КОГДА СостояниеНоменклатурыРеализацийТоваровУслуг.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Ресторан,
	               |	ВЫБОР
	               |		КОГДА СостояниеДокументовОснованийНакладныхНаДоставку.Документ ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Распределен,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Стол,
	               |	СостояниеДокументовОснованийНакладныхНаДоставку.Документ КАК Наряд,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.ПолныйНомерСтола,
	               |	СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Номер КАК НарядНомер,
	               |	СостояниеДокументовОснованийНакладныхНаДоставку.Документ.Дата КАК НарядДата,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Количество,
	               |	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СостояниеНоменклатурыРеализацийТоваровУслуг.ПродолжительностьПроизводства, СЕКУНДА) * СостояниеНоменклатурыРеализацийТоваровУслуг.Количество) КАК ПродолжительностьПроизводства,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.ТребуемаяДатаНачалаПериода,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.ТребуемаяДатаОкончанияПериода,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.ТребуемаяДатаРазделенияПериода,
	               |	СостояниеСортировкиДокументов.СортировкаДата КАК СортировкаДата
	               |ИЗ
	               |	РегистрСведений.СостояниеНоменклатурыРеализацийТоваровУслуг КАК СостояниеНоменклатурыРеализацийТоваровУслуг
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовОснованийНакладныхНаДоставку КАК СостояниеДокументовОснованийНакладныхНаДоставку
	               |		ПО СостояниеНоменклатурыРеализацийТоваровУслуг.Документ = СостояниеДокументовОснованийНакладныхНаДоставку.ДокументОснование
	               |			И СостояниеНоменклатурыРеализацийТоваровУслуг.Ресторан = СостояниеДокументовОснованийНакладныхНаДоставку.Ресторан
	               |			И (СостояниеДокументовОснованийНакладныхНаДоставку.Документ В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					СостояниеДокументовОснованийНакладныхНаДоставку.Документ
	               |				ИЗ
	               |					РегистрСведений.СостояниеДокументовОснованийНакладныхНаДоставку КАК СостояниеДокументовОснованийНакладныхНаДоставку
	               |				ГДЕ
	               |					СостояниеДокументовОснованийНакладныхНаДоставку.ДокументОснование = СостояниеНоменклатурыРеализацийТоваровУслуг.Документ
	               |					И СостояниеДокументовОснованийНакладныхНаДоставку.Ресторан = СостояниеНоменклатурыРеализацийТоваровУслуг.Ресторан
	               |				УПОРЯДОЧИТЬ ПО
	               |					СостояниеДокументовОснованийНакладныхНаДоставку.Документ УБЫВ))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСортировкиДокументов КАК СостояниеСортировкиДокументов
	               |		ПО СостояниеНоменклатурыРеализацийТоваровУслуг.Документ = СостояниеСортировкиДокументов.Документ";
	Если Не Производство Тогда
		Запрос.Текст = Запрос.Текст + "
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПравилаИспользования КАК ПравилаИспользованияНоменклатурнойГруппы
	               |		ПО СостояниеНоменклатурыРеализацийТоваровУслуг.НоменклатурнаяГруппа = ПравилаИспользованияНоменклатурнойГруппы.ОбъектИспользования
	               |			И (&РабочийЦентр = ПравилаИспользованияНоменклатурнойГруппы.ВладелецПравилИспользования)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПравилаИспользования КАК ПравилаИспользованияНоменклатуры
	               |		ПО СостояниеНоменклатурыРеализацийТоваровУслуг.Номенклатура = ПравилаИспользованияНоменклатуры.ОбъектИспользования
	               |			И (&РабочийЦентр = ПравилаИспользованияНоменклатуры.ВладелецПравилИспользования)
	               |ГДЕ
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Ресторан = &Ресторан
	               |	И (НЕ СостояниеНоменклатурыРеализацийТоваровУслуг.Ресторан = ЗНАЧЕНИЕ(Справочник.Рестораны.ПустаяСсылка))
	               |	И (ПравилаИспользованияНоменклатурнойГруппы.Актуальность ЕСТЬ NULL 
	               |			ИЛИ ПравилаИспользованияНоменклатурнойГруппы.Актуальность)
	               |	И (ПравилаИспользованияНоменклатуры.Актуальность ЕСТЬ NULL 
	               |			ИЛИ ПравилаИспользованияНоменклатуры.Актуальность)
	               |	И (НЕ СостояниеНоменклатурыРеализацийТоваровУслуг.Распечатан)
	               |	И (НЕ СостояниеНоменклатурыРеализацийТоваровУслуг.Выполненн)
	               |	И ((НЕ СостояниеНоменклатурыРеализацийТоваровУслуг.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка))
	               |			ИЛИ (НЕ СостояниеДокументовОснованийНакладныхНаДоставку.Документ ЕСТЬ NULL)
	               |			ИЛИ СостояниеНоменклатурыРеализацийТоваровУслуг.ТребуемаяДатаНачалаПериода <= &Время)
	               |";
	Иначе
		Запрос.Текст = Запрос.Текст + "
	               |ГДЕ
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Ресторан = &Ресторан
	               |	И СостояниеНоменклатурыРеализацийТоваровУслуг.РабочийЦентр = &РабочийЦентр
	               |";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СостояниеНоменклатурыРеализацийТоваровУслуг", "РегистрСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг");						  
	КонецЕсли;						  
	Запрос.УстановитьПараметр("Время", ТекущаяДата());
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Запрос.УстановитьПараметр("РабочийЦентр", ТекущийРабочийЦентр);
	Если ТекущийРесторан.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеНоменклатурыРеализацийТоваровУслуг.Ресторан = &Ресторан", "ИСТИНА");
		Если Не Производство Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РабочийЦентр = ПравилаИспользованияНоменклатурнойГруппы.ВладелецПравилИспользования", "ЛОЖЬ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РабочийЦентр = ПравилаИспользованияНоменклатуры.ВладелецПравилИспользования", "ЛОЖЬ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеНоменклатурыРеализацийТоваровУслуг.РабочийЦентр = &РабочийЦентр", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	Если ТекущийРабочийЦентр.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРабочимЦентрам) Тогда
		Если Не Производство Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РабочийЦентр = ПравилаИспользованияНоменклатурнойГруппы.ВладелецПравилИспользования", "ЛОЖЬ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РабочийЦентр = ПравилаИспользованияНоменклатуры.ВладелецПравилИспользования", "ЛОЖЬ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеНоменклатурыРеализацийТоваровУслуг.РабочийЦентр = &РабочийЦентр", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Перенос данных в табличное поле.
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДанных = Данные.Найти(Выборка.Ссылка, "Ссылка");
		Если (СтрокаДанных = Неопределено) Тогда
			СтрокаДанных = Данные.Добавить();
			СтрокаДанных.Ссылка = Выборка.Ссылка;
			СтрокаДанных.Номер = Выборка.Номер;
			СтрокаДанных.Дата = Выборка.Дата;
			СтрокаДанных.Ресторан = Выборка.Ресторан;
			СтрокаДанных.Распределен = Выборка.Распределен;
			СтрокаДанных.Стол = Выборка.Стол;
			СтрокаДанных.Наряд = Выборка.Наряд;
			СтрокаДанных.ПолныйНомерСтола = Выборка.ПолныйНомерСтола;
			СтрокаДанных.НарядНомер = Выборка.НарядНомер;
			СтрокаДанных.НарядДата = Выборка.НарядДата;
			СтрокаДанных.ТребуемаяДатаОкончанияПериода = Выборка.ТребуемаяДатаОкончанияПериода;
			СтрокаДанных.СортировкаДата = Выборка.СортировкаДата;
			
			// -- Текущая позиция (II).
			Если (СтрокаДанных.Ссылка = ТекущийДокумент) Тогда
				ТекущаяСтрока = СтрокаДанных;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДанных.Количество = СтрокаДанных.Количество + Выборка.Количество;
		СтрокаДанных.ПродолжительностьПроизводства = Мин(Макс(СтрокаДанных.ПродолжительностьПроизводства, Выборка.ПродолжительностьПроизводства), '00010101235959');
		СтрокаДанных.ТребуемаяДатаОкончанияПериода = Мин(Выборка.ТребуемаяДатаОкончанияПериода, СтрокаДанных.ТребуемаяДатаОкончанияПериода);
		
	КонецЦикла;
	
	Данные.Сортировать("Ресторан Убыв, Распределен Убыв, НарядДата, Наряд, СортировкаДата");
	
	// -- Текущая позиция (II).
	Если (Не ТекущаяСтрока = Неопределено) И (Не ИгнорироватьОчередность) И Булево(Данные.Индекс(ТекущаяСтрока)) Тогда
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	Если (Не ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ТекущаяСтрока(ТекущаяСтрока);
	КонецЕсли;
	
	// Обновление.
	Если (ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;

КонецПроцедуры // ТаблицаДокументовПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля документов.
//
Процедура ТаблицаДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	Если (Не ДанныеСтроки.Ресторан) И (ТекущаяДата() + ОбщегоНазначения.ПолучитьЧисло(ДанныеСтроки.ПродолжительностьПроизводства) >= ДанныеСтроки.ТребуемаяДатаОкончанияПериода) Тогда 
		ОформлениеСтроки.Ячейки("ПолныйНомерСтола").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("Номер").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("Количество").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("ПродолжительностьПроизводства").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("ТребуемаяДатаОкончанияПериода").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	КонецЕсли;
	
	// ПолныйНомерСтола.
	Если (Не ДанныеСтроки.Ресторан) Тогда
		ОформлениеСтроки.Ячейки("ПолныйНомерСтола").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.НарядНомер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.НарядДата);
	КонецЕсли;
	
	// Номер.
	ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
	
	// ТребуемаяДатаОкончанияПериода.
	ОформлениеСтроки.Ячейки("ТребуемаяДатаОкончанияПериода").Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ТребуемаяДатаОкончанияПериода);
	
КонецПроцедуры // ТаблицаДокументовВывестиСтроку()


// Процедура заполнения табличного поля производства.
//
// Параметры:
//	ТабличноеПоле - TouchТабличноеПоле. Табличное поле.
//
Процедура ТаблицаПроизводстваПрочитать(ТабличноеПоле) Экспорт
	
	ТаблицаДокументовПрочитать(ТабличноеПоле, Истина);
	
КонецПроцедуры // ТаблицаПроизводстваПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля производства.
//
Процедура ТаблицаПроизводстваВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ТаблицаДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры // ТаблицаПроизводстваВывестиСтроку()


// Функция обрабатывает документ согласно требуемым критериям.
//
// Параметры:
//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументОбъект.РеализацияТоваровУслуг. Документ который требуется обработать;
//	Завершение - Булево. Сигнализирует том что происходит завершение производства;
//	Отмена - Булево. Сигнализирует в каком режиме необходимо вернуть из производства, с окончанием производства или с его отменой.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументОбработать(Документ, Завершение = Ложь, Отмена = Ложь, Идентификаторы = Неопределено) Экспорт
	
	// Анализ документа.
	ТекущийРабочийЦентр = ПолучитьСерверFrontOffice().ТекущийРабочийЦентр();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	РегистрСведений.СостояниеНоменклатурыРеализацийТоваровУслуг КАК СостояниеНоменклатурыРеализацийТоваровУслуг
	               |";
	Если Завершение Тогда
		Запрос.Текст = Запрос.Текст + "
	               |ГДЕ
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Документ = &Ссылка
	               |	И СостояниеНоменклатурыРеализацийТоваровУслуг.РабочийЦентр = &РабочийЦентр
				   |	И СостояниеНоменклатурыРеализацийТоваровУслуг.Идентификатор В (&Идентификаторы)
				   |
				   |";
	Иначе				  
		Запрос.Текст = Запрос.Текст + "
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПравилаИспользования КАК ПравилаИспользованияНоменклатурнойГруппы
	               |		ПО СостояниеНоменклатурыРеализацийТоваровУслуг.НоменклатурнаяГруппа = ПравилаИспользованияНоменклатурнойГруппы.ОбъектИспользования
	               |			И (&РабочийЦентр = ПравилаИспользованияНоменклатурнойГруппы.ВладелецПравилИспользования)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПравилаИспользования КАК ПравилаИспользованияНоменклатуры
	               |		ПО СостояниеНоменклатурыРеализацийТоваровУслуг.Номенклатура = ПравилаИспользованияНоменклатуры.ОбъектИспользования
	               |			И (&РабочийЦентр = ПравилаИспользованияНоменклатуры.ВладелецПравилИспользования)
	               |ГДЕ
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Документ = &Ссылка
	               |	И (ПравилаИспользованияНоменклатурнойГруппы.Актуальность ЕСТЬ NULL 
	               |			ИЛИ ПравилаИспользованияНоменклатурнойГруппы.Актуальность)
	               |	И (ПравилаИспользованияНоменклатуры.Актуальность ЕСТЬ NULL 
	               |			ИЛИ ПравилаИспользованияНоменклатуры.Актуальность)
	               |	И (НЕ СостояниеНоменклатурыРеализацийТоваровУслуг.Распечатан)
	               |	И (НЕ СостояниеНоменклатурыРеализацийТоваровУслуг.Выполненн)
				   |	И СостояниеНоменклатурыРеализацийТоваровУслуг.Идентификатор В (&Идентификаторы)
	               |
	               |";
	КонецЕсли;						  
	Запрос.УстановитьПараметр("РабочийЦентр", ТекущийРабочийЦентр);
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Если Завершение Тогда
		Если ТекущийРабочийЦентр.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРабочимЦентрам) Или 
			 (Не Идентификаторы = Неопределено) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеНоменклатурыРеализацийТоваровУслуг.РабочийЦентр = &РабочийЦентр", "ИСТИНА");
		КонецЕсли;
	Иначе
		Если ТекущийРабочийЦентр.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРабочимЦентрам) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РабочийЦентр = ПравилаИспользованияНоменклатурнойГруппы.ВладелецПравилИспользования", "ЛОЖЬ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РабочийЦентр = ПравилаИспользованияНоменклатуры.ВладелецПравилИспользования", "ЛОЖЬ");
		КонецЕсли;
	КонецЕсли;						  
	Если (Идентификаторы = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеНоменклатурыРеализацийТоваровУслуг.Идентификатор В (&Идентификаторы)", "ИСТИНА");
	КонецЕсли;
	Если Завершение Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СостояниеНоменклатурыРеализацийТоваровУслуг", "РегистрСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг");
	КонецЕсли;						  
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивИдентификаторов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	
	// Получение документа.
	ДокументОбъект = Документ;
	
	//Если Не ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект, Ложь, Истина) Тогда // Блокирующая.
	//	Возврат Ложь;
	//КонецЕсли;
	
	//СД - заменили на новый модуль
	Если Не РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, Неопределено, Истина) Тогда // Блокирующая.
		Возврат Ложь;
	КонецЕсли;
	
	
	// Изменение документа.
	мТекущаяДата = ТекущаяДата();
	
	ТабличныеЧасти = Новый Массив; 
	ТабличныеЧасти.Добавить(ДокументОбъект.Товары); 
	ТабличныеЧасти.Добавить(ДокументОбъект.Услуги);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если (МассивИдентификаторов.Найти(СтрокаТабличнойЧасти.Идентификатор) = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Завершение Тогда
				
				СтрокаТабличнойЧасти.Распечатан = Истина;
				
			Иначе
				
				//Если Не СтрокаТабличнойЧасти.Выполненн Тогда // Такого не должно быть, но проверку оставим.
					Если Не Отмена Тогда
						
						СтрокаТабличнойЧасти.ДатаОкончанияПериода = мТекущаяДата;
						СтрокаТабличнойЧасти.Распечатан = Истина;
						СтрокаТабличнойЧасти.Выполненн = Истина;
						
					Иначе
						
						СтрокаТабличнойЧасти.ДатаОкончанияПериода = Неопределено;
						СтрокаТабличнойЧасти.Распечатан = Ложь;
						СтрокаТабличнойЧасти.Выполненн = Ложь;
						
					КонецЕсли;						  
				//КонецЕсли;						  
				
			КонецЕсли;						  
			
		КонецЦикла;
	КонецЦикла;
	
	// Запись документа.
	Результат = РаботаСДиалогами.ДокументЗаписать(ДокументОбъект, Неопределено);
	
	// Закрытие документа.
	РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено);
	
	Возврат Результат;
	
КонецФункции // ДокументОбработать()


// Функция переводит требуемый документ в производство.
//
// Параметры:
//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументОбъект.РеализацияТоваровУслуг. Документ который требуется перевести в производство.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументНачатьПроизводство(Документ) Экспорт
	
	Возврат ДокументОбработать(Документ);
	
КонецФункции // ДокументНачатьПроизводство()

// Функция возвращает требуемый документ из производства.
//
// Параметры:
//	Документ - Строка, ДокументСсылка.РеализацияТоваровУслуг, ДокументОбъект.РеализацияТоваровУслуг. Штрихкод встречки или документ который требуется вернуть из производства;
//	Отмена - Булево. Сигнализирует в каком режиме необходимо вернуть из производства, с окончанием производства или с его отменой.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументЗавершитьПроизводство(Документ, Отмена = Ложь, Идентификаторы = Неопределено) Экспорт
	
	Возврат ДокументОбработать(Документ, Истина, Отмена, Идентификаторы);
	
КонецФункции // ДокументЗавершитьПроизводство()

#КонецЕсли
