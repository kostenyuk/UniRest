
Функция НастройкаИмяПользователя(НРег = Истина) Экспорт
	
	// Имя пользователя веб-сервиса.
	Если НРег Тогда
		Возврат "touch";
	КонецЕсли;
	
	Возврат "Touch";

КонецФункции // НастройкаИмяПользователя()


Функция РежимЗапускаПриложенияВебСервис() Экспорт
	
	// Проверка.
	Если (НРег(ИмяПользователя()) = НастройкаИмяПользователя()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // РежимЗапускаПриложенияВебСервис()


Функция ПолучитьДоступностьСервиса() Экспорт
	
	Возврат РегистрыСведений.__НастройкиВебСервиса.ПолучитьДоступностьВебСервиса();
	
КонецФункции // ПолучитьДоступностьСервиса()

Процедура ПроверитьДоступностьСервиса() Экспорт
	
	Если Не ПолучитьДоступностьСервиса() Тогда
		ВызватьИсключение ИсключениеВебСервисНедоступен();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДоступностьСервиса()


Функция НачалоСеанса(Устройство, Пароль, Восстановление) Экспорт
	
	Перем Пользователь, ГруппаПользователей;
	
	// Проверка.
	ПроверитьДоступностьСервиса();
	
	// Компьютер.
	Компьютер = Справочники.Компьютеры.ЗарегестироватьКомпьютер(Устройство, РегистрыСведений.__НастройкиВебСервиса.ПолучитьРежимРаботыВебСервиса(), Истина);	
	Если Не Компьютер.Актуальность Тогда
		ВызватьИсключение ИсключениеКомпьютерНедоступен(Компьютер);
	КонецЕсли;
	
	// Пользователь.
	Если ПустаяСтрока(Пароль) Тогда
		Пользователь = Компьютер.Пользователь;
		ГруппаПользователей = Компьютер.ГруппаПользователей;
	Иначе
		УправлениеПользователями.ОпределитьПользователяПоПаролю(Пароль, Пользователь, ГруппаПользователей);
		Если ЗначениеЗаполнено(Компьютер.Пользователь) И (Не Пользователь = Компьютер.Пользователь) Тогда
			Пользователь = Неопределено;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Компьютер.ГруппаПользователей) И (Не ГруппаПользователей = Компьютер.ГруппаПользователей) Тогда
			ГруппаПользователей = Неопределено;
		КонецЕсли; 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Пользователь) Или 
		 Не ЗначениеЗаполнено(ГруппаПользователей) Тогда
		ВызватьИсключение ИсключениеНеверныйПароль();
	КонецЕсли; 
	
	// Сотрудник.
	Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(Пользователь);
	
	// Ресторан.
	Ресторан = УправлениеПользователями.ОпределитьРесторанПоРежимуРаботы(РегистрыСведений.__НастройкиВебСервиса.ПолучитьРежимРаботыВебСервиса()); //Костенюк Александр 27.04.2015
	
	// Параметры сеанса.
	//Параметры = Новый Структура("ГруппаПользователей,Компьютер,Пользователь,РежимРаботы,Сотрудник",
	Параметры = Новый Структура("ГруппаПользователей,Компьютер,Пользователь,РежимРаботы,Сотрудник,Ресторан", //Костенюк Александр 27.04.2015
		ГруппаПользователей,
		Компьютер,
		Пользователь,
		Компьютер.РежимРаботы,
		//Сотрудник);
		Сотрудник,
		Ресторан); //Костенюк Александр-Финиш 27.04.2015
	
	// Добавление сеанса.
	Возврат РегистрыСведений.__СостояниеСеансовВебСервиса.ДобавитьСеанс(Параметры, Восстановление);
	
КонецФункции // НачалоСеанса()

Процедура ВосстановлениеСеанса(Сеанс) Экспорт
	
	// Проверка.
	ПроверитьДоступностьСервиса();
	
	// Получение и продление сеанса.
	Запись = РегистрыСведений.__СостояниеСеансовВебСервиса.ПолучитьСеанс(Сеанс, Истина);
	
	// Установка параметров сеанса.
	ПолныеПрава.__УстановитьПараметрыСеансаВебСервиса(Запись);
	
КонецПроцедуры // ВосстановлениеСеанса()

Процедура ПродлениеСеанса(Сеанс) Экспорт
	
	// Проверка.
	ПроверитьДоступностьСервиса();
	
	// Продление сеанса.
	РегистрыСведений.__СостояниеСеансовВебСервиса.ПродлитьСеанс(Сеанс);
	
КонецПроцедуры // ПродлениеСеанса()

Процедура ИзменениеСеанса(Сеанс, Параметры) Экспорт
	
	// Изменение сеанса.
	РегистрыСведений.__СостояниеСеансовВебСервиса.ПродлитьСеанс(Сеанс, Параметры);
	
КонецПроцедуры // ИзменениеСеанса()

Процедура ЗавершениеСеанса(Сеанс) Экспорт
	
	// Проверка.
	ПроверитьДоступностьСервиса();
	
	// Удаление сеанса.
	РегистрыСведений.__СостояниеСеансовВебСервиса.УдалитьСеанс(Сеанс);
	
КонецПроцедуры // ЗавершениеСеанса()


Процедура НачалоСеансаДокумента(Сеанс, Документ) Экспорт
	
	// Данные сеанса.
	ЗаписатьДанныеСеанса(Сеанс, "Документ", Документ);
	
КонецПроцедуры // НачалоСеансаДокумента()

Функция ВосстановлениеСеансаДокумента(Сеанс, Блокировка) Экспорт
	
	Перем Результат;
	
	// Проверка.
	ПроверитьДоступностьСервиса();
	
	// Получение и продление сеанса.
	Запись = РегистрыСведений.__СостояниеСеансовВебСервиса.ПолучитьСеанс(Сеанс, Истина);
	
	// Установка параметров сеанса.
	ПолныеПрава.__УстановитьПараметрыСеансаВебСервиса(Запись);
	
	// Данные сеанса.
	Блокировка = Новый БлокировкаДанных;
	Результат = ПолучитьДанныеСеанса(Сеанс, "Документ", Блокировка);
	
	Возврат Результат;
	
КонецФункции // ВосстановлениеСеансаДокумента()

Функция ПродлениеСеансаДокумента(Сеанс, Блокировка) Экспорт
	
	// Проверка.
	ПроверитьДоступностьСервиса();
	
	// Продление сеанса.
	//РегистрыСведений.__СостояниеСеансовВебСервиса.ПродлитьСеанс(Сеанс);
	
	// Совметимость: необходим рефакторинг модулей документов.
	Запись = РегистрыСведений.__СостояниеСеансовВебСервиса.ПолучитьСеанс(Сеанс, Истина);
	ПолныеПрава.__УстановитьПараметрыСеансаВебСервиса(Запись);
	
	// Данные сеанса.
	Блокировка = Новый БлокировкаДанных;
	Результат = ПолучитьДанныеСеанса(Сеанс, "Документ", Блокировка);
	
	Возврат Результат;
	
КонецФункции // ПродлениеСеансаДокумента()

Процедура ИзменениеСеансаДокумента(Сеанс, Документ) Экспорт
	
	// Данные сеанса.
	ЗаписатьДанныеСеанса(Сеанс, "Документ", Документ);
	
КонецПроцедуры // ИзменениеСеансаДокумента()

Процедура ЗавершениеСеансаДокумента(Сеанс) Экспорт
	
	// Данные сеанса.
	ЗаписатьДанныеСеанса(Сеанс, "Документ", Неопределено);
	
КонецПроцедуры // ЗавершениеСеансаДокумента()


Функция ПолучитьДанныеСеанса(Сеанс, Имя, Блокировка = Неопределено) Экспорт
	
	// Получение значения.
	Возврат РегистрыСведений.__ЗначенияСеансовВебСервиса.ПолучитьДанныеСеанса(Сеанс, Имя, Блокировка); 
	
КонецФункции // ПолучитьДанныеСеанса()

Функция ПроверитьДанныеСеанса(Сеанс, Имя) Экспорт
	
	// Получение значения.
	Возврат РегистрыСведений.__ЗначенияСеансовВебСервиса.ПроверитьДанныеСеанса(Сеанс, Имя); 
	
КонецФункции // ПроверитьДанныеСеанса()

Процедура ЗаписатьДанныеСеанса(Сеанс, Имя, Значение) Экспорт
	
	// Сохранение значения.
	РегистрыСведений.__ЗначенияСеансовВебСервиса.ЗаписатьДанныеСеанса(Сеанс, Имя, Значение); 
	
КонецПроцедуры // ЗаписатьДанныеСеанса()


Функция ВосстановитьЗначениеСеанса(Сеанс, Имя) Экспорт
	
	// Продление сеанса.
	ПродлениеСеанса(Сеанс);
	
	// Получение значения.
	Возврат РегистрыСведений.__ЗначенияСеансовВебСервиса.ВосстановитьЗначениеСеанса(Сеанс, Имя); 
	
КонецФункции // ВосстановитьЗначениеСеанса()

Процедура СохранитьЗначениеСеанса(Сеанс, Имя, Значение) Экспорт
	
	// Продление сеанса.
	ПродлениеСеанса(Сеанс);
	
	// Сохранение значения.
	РегистрыСведений.__ЗначенияСеансовВебСервиса.СохранитьЗначениеСеанса(Сеанс, Имя, Значение); 
	
КонецПроцедуры // СохранитьЗначениеСеанса()


Функция ИсключениеВебСервисНедоступен() Экспорт 
	
	Возврат НСтр("ru = 'Web-сервис недоступен.'; uk = 'Web-сервіс недоступний.'");

КонецФункции // ИсключениеВебСервисНедоступен()
	
Функция ИсключениеКомпьютерНедоступен(Компьютер) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'Устройство [Компьютер] не предназначено для работы с системой в данном режиме.'; uk = 'Пристрій [Компьютер] не призначен для роботи з системою в даному режимі.'"),
		Новый Структура("Компьютер", Компьютер));

КонецФункции // ИсключениеКомпьютерНедоступен()

Функция ИсключениеНеверныйПароль() Экспорт 
	
	Возврат НСтр("ru = 'Неверный пароль или недостаточно прав доступа.'; uk = 'Невірний пароль або недостатньо прав доступу.'");

КонецФункции // ИсключениеНеверныйПароль()

Функция ИсключениеНедостаточноПравДоступа() Экспорт 
	
	Возврат НСтр("ru = 'Недостаточно прав доступа.'; uk = 'Недостатньо прав доступу.'");

КонецФункции // ИсключениеНедостаточноПравДоступа()
	