
//	1С:Touch. Touch-ориентированные элементы управления и диалоговые формы, 
//	построенные с использованием только стандартных элементов управления платформы.
//	Copyright (C) 2008-2010 Переверзев Александр Владимирович.
//
//	Это программа является свободным программным обеспечением. Вы можете 
//	распространять и/или модифицировать её согласно условиям Стандартной 
//	Общественной Лицензии GNU, опубликованной Фондом Свободного Программного 
//	Обеспечения, версии 3 или, по Вашему желанию, любой более поздней версии. 
//
//	Эта программа распространяется в надежде, что она будет полезной, но БЕЗ 
//	ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО СОСТОЯНИЯ ПРИ 
//	ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите Стандартную 
//	Общественную Лицензию GNU для получения дополнительной информации. 
//
//	Вы должны были получить копию Стандартной Общественной Лицензии GNU вместе 
//	с программой. В случае её отсутствия, посмотрите <http://www.gnu.org/licenses/>.


// Зависимости:
//	Обработки.TouchКнопкаКоманднойПанели;
//	Обработки.TouchКнопкиКоманднойПанели.

#Если Клиент Тогда

Перем лПричинаНеПоддерживаетсяСвязьСДанными, лПричинаНесоответствиеТипов, лПричинаИндексВыходитЗаГраницы;

Перем мДанные, мТипДанных, мПоддерживаемыеТипыДанных;

Перем мТекущаяСтраница;

Перем мЭтотОбъект, мЯчейки;
Перем мЭлементыФормыПолосыПрокрутки, мЭлементыФормыСетки, мЭлементыФормыКнопок;

Перем мИзмененРазмерФормы, мИзмененыПараметрыДанных;
Перем мРежимПрограммногоОбновления, мРежимИзмененияСтраницы;

Перем мАвтоИзменениеЦветТекстаКнопки, мАвтоИзменениеЦветФонаКнопки, мАвтоИзменениеШрифт;

Перем мСлужебнаяКартинка, мСлужебнаяРамка;
Перем мТипСтроки, мТипЧисла, мТипБулева, мТипОписанияТипов, 
	  мТипФормы, мТипПанель, мТипСтраницы, мТипКнопки, мТипНадписи, мТипРамкиГруппы,
	  мТипДействия, мТипКартинки, мТипРамки, мТипВыравниванияКнопокКоманднойПанели, мТипОтображенияКнопкиКоманднойПанели;


// Функция связывает данные с элементом формы.
//
// Параметры:
//	Данные. Содержит связываемую переменную допустимого типа.
//
// Возвращаемое значение:
//	Значение текущей связанной переменной.
//
Функция Данные(Данные = Неопределено) Экспорт

	// Проверка входных параметров.
	ИсключениеМетод = "Данные";
	// -- Параметр: Данные.
	Если (Не Данные = Неопределено) Тогда
		ИсключениеПричина = лПричинаНеПоддерживаетсяСвязьСДанными; ВызватьИсключение ОписаниеИсключения(ИсключениеМетод, ИсключениеПричина);
	КонецЕсли;
	
	Возврат мДанные;
	
КонецФункции // Данные()

// Функция возвращает объект, описывающий допустимые типы значений для элемента управления.
//
// Возвращаемое значение:
//	ОписаниеТипов. Содержит допустимые типы значений для элемента управления.
//
Функция ТипЗначения(ТипЗначения = Неопределено) Экспорт
	
	// Проверка входных параметров.
	ИсключениеМетод = "ТипЗначения";
	// -- Параметр: ТипЗначения.
	Если (Не ТипЗначения = Неопределено) И (Не ТипЗнч(ТипЗначения) = мТипОписанияТипов) Тогда
		ИсключениеПричина = лПричинаНесоответствиеТипов; ВызватьИсключение ОписаниеИсключения(ИсключениеМетод, ИсключениеПричина);
	КонецЕсли;
	
	Если (мДанные = Неопределено) Тогда
		// Поддерживаемые типы данных.
		Возврат мПоддерживаемыеТипыДанных;
	Иначе
		// Тип свзязаных данных.
		МассивТипов = Новый Массив; МассивТипов.Добавить(мТипДанных);
		Возврат Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецФункции // ТипЗначения()



// Размещает элемент управления на форме.
//
// Параметры:
//	Форма - Форма. Форма на которую необходимо поместить элемент управления;
//	ПоместитьНа - Панель. Определяет, какой панели формы принадлежит создаваемый элемент.
//	Нажатие - Действие, Строка. Содержит действие или имя процедуры модуля котороая будет выполнятся при нажатии на элемент управления;
//  Страница - СтраницаПанели. Определяет, какой странице панели формы принадлежит создаваемый элемент. Если не указана, то добавляемый элемент размещается на текущей странице панели.
//
Процедура Поместить(Знач Форма, Знач ПоместитьНа = Неопределено, Знач Нажатие = Неопределено, Знач Страница = Неопределено) Экспорт
	
	// Нормализация (I).
	Если (Форма = Неопределено) Тогда
		ПоместитьНа = Неопределено;
		Нажатие = Неопределено;
		Страница = Неопределено;
	КонецЕсли;
	Если (ТипЗнч(Нажатие) = мТипСтроки) Тогда
		Попытка
			Нажатие = Новый Действие(Нажатие);
		Исключение
			Нажатие = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	//// Проверка входных параметров.
	//ИсключениеМетод = "Поместить";
	//// -- Параметр: Форма.
	//Если (Не Форма = Неопределено) И (Не ТипЗнч(Форма) = мТипФормы) Тогда
	//	ИсключениеПричина = лПричинаНесоответствиеТипов; ИсключениеПараметр = "Форма"; ВызватьИсключение ОписаниеИсключения(ИсключениеМетод, ИсключениеПричина, ИсключениеПараметр);
	//КонецЕсли;
	//// -- Параметр: ПоместитьНа.
	//Если (Не Форма = Неопределено) И (Не ТипЗнч(ПоместитьНа) = мТипПанель) Тогда
	//	ИсключениеПричина = лПричинаНесоответствиеТипов; ИсключениеПараметр = "ПоместитьНа"; ВызватьИсключение ОписаниеИсключения(ИсключениеМетод, ИсключениеПричина, ИсключениеПараметр);
	//КонецЕсли;
	//// -- Параметр: Нажатие.
	//Если (Не Форма = Неопределено) И (Не ТипЗнч(Форма) = мТипДействия) Тогда
	//	ИсключениеПричина = лПричинаНесоответствиеТипов; ИсключениеПараметр = "Нажатие"; ВызватьИсключение ОписаниеИсключения(ИсключениеМетод, ИсключениеПричина, ИсключениеПараметр);
	//КонецЕсли;
	//// -- Параметр: Страница.
	//Если (Не Форма = Неопределено) И (Не ТипЗнч(Форма) = мТипСтраницы) Тогда
	//	ИсключениеПричина = лПричинаНесоответствиеТипов; ИсключениеПараметр = "Страница"; ВызватьИсключение ОписаниеИсключения(ИсключениеМетод, ИсключениеПричина, ИсключениеПараметр);
	//КонецЕсли;
	
	// Нормализация (II).
	Если (Не Форма = Неопределено) И (Страница = Неопределено) Тогда
		Страница = ПоместитьНа.ТекущаяСтраница; 
	КонецЕсли;
	
	
	// Изменение формы (удаление элемента с формы).
	Если (Не мЭтотОбъект = Неопределено) И (Не мЭтотОбъект.ЭлементФормы = ПоместитьНа) Тогда
		// -- Удаление элементов с формы.
		Видимость = мЭтотОбъект.ЭлементФормы.Видимость; мЭтотОбъект.ЭлементФормы.Видимость = Ложь;
		
		УдалитьЭлементФормы(мЭлементыФормыКнопок);
		УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки);
		УдалитьЭлементФормы(мЭлементыФормыСетки);
		
		мЭтотОбъект.ЭлементФормы.Видимость = Видимость;
		
		
		// -- Обнуление текущего состояния.
		мЭтотОбъект = Неопределено;
		мЯчейки = Неопределено;
		
		// -- Текущая страница.
		мТекущаяСтраница = Неопределено;
		
		// ---- Спецрежимы.
		мРежимПрограммногоОбновления = Ложь;
		мРежимИзмененияСтраницы = Ложь;
	КонецЕсли;
	Если (ПоместитьНа = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	
	// Проверка изменения состояния.
	СравнитьСостояние(ПоместитьНа, Страница);
		
	// Нормализация объекта.
	Нормализация();
	
	// Сохранение текщего состояния.
	ЗапомнитьСостояние(Форма, ПоместитьНа, Нажатие, Страница);
		
	
	// Прячем контейнер.
	Если Не мРежимИзмененияСтраницы Тогда
		Видимость = мЭтотОбъект.ЭлементФормы.Видимость; ТекущаяСтраница = мЭтотОбъект.ЭлементФормы.ТекущаяСтраница; мЭтотОбъект.ЭлементФормы.Видимость = Ложь; Если (Не мЭтотОбъект.ЭлементФормы.ТекущаяСтраница = Страница) Тогда мЭтотОбъект.ЭлементФормы.ТекущаяСтраница = Страница; КонецЕсли;
	КонецЕсли;
	
	// Сетку.
	ОтобразитьСетку();
	
	// Полоса прокрутки.
	ОтобразитьПолосуПрокрутки();
	
	// Кнопки.
	ОтобразитьКнопки();
	
	// Отображаем контейнер.
	Если Не мРежимИзмененияСтраницы Тогда
		Если (Не мЭтотОбъект.ЭлементФормы.ТекущаяСтраница = ТекущаяСтраница) Тогда мЭтотОбъект.ЭлементФормы.ТекущаяСтраница = ТекущаяСтраница; КонецЕсли; мЭтотОбъект.ЭлементФормы.Видимость = Видимость;
	КонецЕсли;

	
	// Обнуление спецрежимов.
	мРежимПрограммногоОбновления = Ложь;
	мРежимИзмененияСтраницы = Ложь;
	
КонецПроцедуры // Поместить()

// Удаляет элемент управления с формы.
//
Процедура Удалить() Экспорт
	
	// Удаление элемента с формы.
	Поместить(Неопределено);
	
КонецПроцедуры // Удалить()


Процедура Высвободить() Экспорт
	
	// Высвобождение ссылок.
	мДанные = Неопределено;
	
	мЭтотОбъект = Неопределено;
	мЯчейки = Неопределено;
	мЭлементыФормыПолосыПрокрутки = Неопределено;
	мЭлементыФормыСетки = Неопределено;
	мЭлементыФормыКнопок = Неопределено;
	
КонецПроцедуры // Высвободить()



// Обновляет данные, и применяет параметры элемента управления вступающие в силу только после обновления.
//
Процедура Обновить() Экспорт
	
	// Обновление формы.
	Если (Не мЭтотОбъект = Неопределено) Тогда
		// -- Обновление.
		Поместить(мЭтотОбъект.Форма, мЭтотОбъект.ЭлементФормы, мЭтотОбъект.Нажатие);
	Иначе
		// -- Обнуление спецрежимов.
		мРежимПрограммногоОбновления = Ложь;
		мРежимИзмененияСтраницы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // Обновить()

Процедура ОбновитьКнопки() Экспорт
	
	// Обновление формы.
	Обновить();

КонецПроцедуры


// Процедура обработчик события ________.Нажатие элемента.
//
// Описание:
//	Процедура является обработчиком события нажатия на элементы управления принадлежащие данному объекту и должна 
//	вызываться пользователем непосредственно из процедуры формы переданной в качетсве параметрп "Нажатие" в процедуру "Поместить".
//	Фактически данная процедура является точкой входа в объект обратной связи формы и объекта.
//
Процедура Нажатие(Элемент) Экспорт
	
	// Проверка доступности и текущей страницы (если она неопределена, то никакого нажатия быть не может).
	Если (мЭтотОбъект = Неопределено) Или (Не Доступность) Или (Не Булево(мЭтотОбъект.КоличествоСтраниц)) Тогда
		Возврат;
	КонецЕсли;
			
	// Полоса прокрутки.
	Для Каждого ЭлементСтруктуры Из мЭлементыФормыПолосыПрокрутки Цикл
		Если (ЭлементСтруктуры.Значение = Элемент) Тогда
			
			// -- Расшифровка.
			Имя = ЭлементСтруктуры.Ключ;
			
			// -- Вычисление новой страницы.
			Если (Имя = "Вверх") Или (Имя = "Разделитель") Тогда
				Страница = Макс(мТекущаяСтраница - 1, 0);
			ИначеЕсли (Имя = "Вниз") Тогда
				Страница = Мин(мТекущаяСтраница + 1, мЭтотОбъект.КоличествоСтраниц - 1);
			Иначе
				Возврат;
			КонецЕсли;
			Если (Страница = мТекущаяСтраница) Тогда
				Возврат;
			КонецЕсли;
			
			// -- Изменение текущей страницы.
			мТекущаяСтраница = Страница;
			
			// ---- Событие.
			мРежимПрограммногоОбновления = Истина;
			Если Не ПустаяСтрока(ПриСменеТекущейСтраницы) Тогда
				Попытка Выполнить("мЭтотОбъект.Форма." + ПриСменеТекущейСтраницы + "(ЭтотОбъект);"); Исключение КонецПопытки;
			КонецЕсли;
			
			// ---- Обновление.
			Если мРежимПрограммногоОбновления Тогда
				мРежимИзмененияСтраницы = Истина;
				Обновить();
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Ячейки.
	Для Каждого ЭлементСтруктуры Из мЭлементыФормыКнопок Цикл
		Если (ЭлементСтруктуры.Значение = Элемент) Тогда
			
			// -- Расшифровка (через ячейку сетки).
			Кнопка = мЯчейки[ЭлементСтруктуры.Ключ];
			Если (Кнопка = Неопределено) Или (Кнопки.Индекс(Кнопка) = -1) Тогда
				Возврат;
			КонецЕсли;
			
			// -- Событие.
			Если Кнопка.Доступность И (Не ПустаяСтрока(Кнопка.Действие)) Тогда
				Если ИзменяетДанные Или Кнопка.ИзменяетДанные Тогда
					мЭтотОбъект.Форма.Модифицированность = Истина;
				КонецЕсли;
				
				Попытка Выполнить("мЭтотОбъект.Форма." + Кнопка.Действие + "(Кнопка);"); Исключение КонецПопытки;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Нажатие()


// Функция возвращает/устанавливает номер текущей страницы данных командной панели.
//
// Параметры:
//	ТекущаяСтраница - Число. Номер страницы данных которую необходимо установить как текущую.
//
// Возвращаемое значение:
//	Число, Неопределено. Содержит номер текущей страницу данных командной панели. Неопределено в случае если объект еще небыл размещен на форме.
//
Функция ТекущаяСтраница(ТекущаяСтраница = Неопределено) Экспорт
	
	// Проверка входных параметров.
	//ИсключениеМетод = "Поместить";
	//// -- Параметр: Форма.
	//Если (Не Форма = Неопределено) И (Не ТипЗнч(Форма) = мТипФормы) Тогда
	//	ИсключениеПричина = лПричинаНесоответствиеТипов; ИсключениеПараметр = "Форма"; ВызватьИсключение ОписаниеИсключения(ИсключениеМетод, ИсключениеПричина, ИсключениеПараметр);
	//КонецЕсли;
	
	// Проверка входных параметров.
	ИсключениеМетод = "ТекущаяСтраница";
	Если (Не ТекущаяСтраница = Неопределено) Тогда
		// -- Параметр: ТекущаяСтраница.
		Если (Не ТипЗнч(ТекущаяСтраница) = мТипЧисла) Тогда
			ИсключениеПричина = лПричинаНесоответствиеТипов; ИсключениеПараметр = "ТекущаяСтраница";
//			ВызватьИсключение Вычислить(лОшибкаВызоваМетодаКонтекста);
		КонецЕсли;
		Если (мЭтотОбъект = Неопределено) Или (ТекущаяСтраница < 0) Или (ТекущаяСтраница >= мЭтотОбъект.КоличествоСтраниц) Тогда
			ИсключениеПричина = лПричинаИндексВыходитЗаГраницы; ИсключениеПараметр = "ТекущаяСтраница";
//			ВызватьИсключение Вычислить(лОшибкаВызоваМетодаКонтекста);
		КонецЕсли;
	КонецЕсли;
	
	// Изменение текущей страницы.
	Если (Не ТекущаяСтраница = Неопределено) И (Не ТекущаяСтраница = мТекущаяСтраница) Тогда
		мТекущаяСтраница = ТекущаяСтраница;
		
		мРежимПрограммногоОбновления = Ложь;
		мРежимИзмененияСтраницы = Истина;
		Обновить();
	КонецЕсли;
	
	Возврат мТекущаяСтраница;	
	
КонецФункции // ТекущаяСтраница()


Функция КоличествоСтраниц() Экспорт
	
	Если (Не мЭтотОбъект = Неопределено) Тогда
		Возврат мЭтотОбъект.КоличествоСтраниц;
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции


Процедура Нормализация()
	
	// Проверка спецрежимов и изменения состояния.
	Если мРежимПрограммногоОбновления И мРежимИзмененияСтраницы Тогда
		Возврат;
	КонецЕсли;
	
	// Этот объект.
	Если (Не ТипЗнч(ВыравниваниеКнопок) = мТипВыравниванияКнопокКоманднойПанели) Или (ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Центр) Тогда
		ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Лево;
	КонецЕсли;
	МинимальнаяВысотаСтроки = Макс(МинимальнаяВысотаСтроки, 20);
	МинимальнаяШиринаКолонки = Макс(МинимальнаяШиринаКолонки, 20);
	МежкнопочныйИнтервал = Мин(МежкнопочныйИнтервал, (МинимальнаяШиринаКолонки - 18) * 2, (МинимальнаяВысотаСтроки - 18) * 2);
	Если (Не ТипЗнч(Рамка) = мТипРамки) Тогда
		Рамка = мСлужебнаяРамка;
	КонецЕсли;
	
	// -- Автоматическоее изменение (I).
	Если (ЦветКнопокПолосыПрокрутки = мАвтоИзменениеЦветФонаКнопки) Тогда
		ЦветКнопокПолосыПрокрутки = ЦветФонаКнопки;
	КонецЕсли;
	
	
	// Конопки.
	КоличествоКнопок = Кнопки.Количество() - 1;
	Для ИндексКнопки = 0 По КоличествоКнопок Цикл
		Кнопка = Кнопки.Получить(ИндексКнопки);
		
		Если (Не ТипЗнч(Кнопка.Картинка) = мТипКартинки) Тогда
			Кнопка.Картинка = мСлужебнаяКартинка;
		КонецЕсли;
		Если (Не ТипЗнч(Кнопка.Отображение) = мТипОтображенияКнопкиКоманднойПанели) Тогда
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Авто;
		КонецЕсли;
		
		// -- Автоматическоее изменение (II).
		Если (Кнопка.ЦветТекстаКнопки = мАвтоИзменениеЦветТекстаКнопки) Тогда
			Кнопка.ЦветТекстаКнопки = ЦветТекстаКнопки;
		КонецЕсли;
		Если (Кнопка.ЦветФонаКнопки = мАвтоИзменениеЦветФонаКнопки) Тогда
			Кнопка.ЦветФонаКнопки = ЦветФонаКнопки;
		КонецЕсли;
		Если (Кнопка.Шрифт = мАвтоИзменениеШрифт) Тогда
			Кнопка.Шрифт = Шрифт;
		КонецЕсли;
	
	КонецЦикла;
	
	// Библиотека картинок.
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.Вверх) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.Вверх = БиблиотекаКартинок.TouchВверх; Исключение ЭтотОбъект.БиблиотекаКартинок.Вверх = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.Влево) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.Влево = БиблиотекаКартинок.TouchВлево; Исключение ЭтотОбъект.БиблиотекаКартинок.Влево = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.Вниз) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.Вниз = БиблиотекаКартинок.TouchВниз; Исключение ЭтотОбъект.БиблиотекаКартинок.Вниз = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.Вправо) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.Вправо = БиблиотекаКартинок.TouchВправо; Исключение ЭтотОбъект.БиблиотекаКартинок.Вправо = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	
	// Автоматическоее изменение (III).
	мАвтоИзменениеЦветТекстаКнопки = ЦветТекстаКнопки;
	мАвтоИзменениеЦветФонаКнопки = ЦветФонаКнопки;
	мАвтоИзменениеШрифт = Шрифт;
	
КонецПроцедуры


Процедура СравнитьСостояние(ПоместитьНа, Страница)
	
	// Проверка спецрежимов и изменения состояния.
	Если мРежимПрограммногоОбновления И мРежимИзмененияСтраницы Тогда
		мИзмененРазмерФормы = Ложь;
		мИзмененыПараметрыДанных = Ложь;
		Возврат;
	КонецЕсли;
	
	// Форма.
	мИзмененРазмерФормы = (мЭтотОбъект = Неопределено) Или
	                      (Не ПоместитьНа = мЭтотОбъект.ЭлементФормы) Или
	                      (Не Страница = мЭтотОбъект.Страница) Или
						  (Не Выравнивание.ОтступСлева = мЭтотОбъект.ВыравниваниеОтступСлева) Или
						  (Не Выравнивание.ОтступСверху = мЭтотОбъект.ВыравниваниеОтступСверху) Или
						  (Не Выравнивание.ОтступСправа = мЭтотОбъект.ВыравниваниеОтступСправа) Или
						  (Не Выравнивание.ОтступСнизу = мЭтотОбъект.ВыравниваниеОтступСнизу) Или
						  (Не МежкнопочныйИнтервал = мЭтотОбъект.МежкнопочныйИнтервал) Или 
						  (Не МинимальнаяВысотаСтроки = мЭтотОбъект.МинимальнаяВысотаСтроки) Или 
						  (Не МинимальнаяШиринаКолонки = мЭтотОбъект.МинимальнаяШиринаКолонки);
	
	// Колонки.
	СравнитьСостояниеКонопок();
						  
	// Кооректировка спец режимов.
	Если мИзмененРазмерФормы Или мИзмененыПараметрыДанных Тогда
		мРежимИзмененияСтраницы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СравнитьСостояниеКонопок()
	
	// Проверка изменениня кнопок.
	мИзмененыПараметрыДанных = мИзмененРазмерФормы Или
							   (Не Кнопки.Количество() = мЭтотОбъект.КоличествоКнопок);

КонецПроцедуры


Процедура ЗапомнитьСостояние(Форма, ПоместитьНа, Нажатие, Страница)

	// Объект.
	ЗапомнитьСостояниеОбъекта();
	
	// Форма.
	Если мИзмененРазмерФормы Тогда
		мЭтотОбъект.Вставить("Форма", Форма);
		мЭтотОбъект.Вставить("ЭлементФормы", ПоместитьНа);
		мЭтотОбъект.Вставить("Страница", Страница);
		мЭтотОбъект.Вставить("ИмяЭлементаФормы", СтрЗаменить(ПоместитьНа.Имя + Страница.Имя, "_", ""));
		мЭтотОбъект.Вставить("ШиринаЭлементаФормы", ПоместитьНа.Ширина);
		мЭтотОбъект.Вставить("ВысотаЭлементаФормы", ПоместитьНа.Высота);
		мЭтотОбъект.Вставить("Нажатие", Нажатие);
		// -- Клиентская область.
		мЭтотОбъект.Вставить("ЛевоКлиентскойОбласти", Выравнивание.ОтступСлева);
		мЭтотОбъект.Вставить("ВерхКлиентскойОбласти", Выравнивание.ОтступСверху);
		мЭтотОбъект.Вставить("ШиринаКлиентскойОбласти", Макс(ПоместитьНа.Ширина - Выравнивание.ОтступСлева - Выравнивание.ОтступСправа, 0));
		мЭтотОбъект.Вставить("ВысотаКлиентскойОбласти", Макс(ПоместитьНа.Высота - Выравнивание.ОтступСверху - Выравнивание.ОтступСнизу, 0));
	КонецЕсли;
	
	// Полоса прокрутки.
	ЗапомнитьСостояниеПолосыПрокрутки();
	
	// Кнопки.
	ЗапомнитьСостояниеКнопок();
	
КонецПроцедуры

Процедура ЗапомнитьСостояниеОбъекта()
	
	// Проверка спецрежимов и изменения состояния.
	Если мРежимИзмененияСтраницы Тогда
		Возврат;
	КонецЕсли;
	
	// Этот объект.
	Если (мЭтотОбъект = Неопределено) Тогда
		мЭтотОбъект = Новый Структура;
	КонецЕсли;
	
	мЭтотОбъект.Вставить("ВыравниваниеКнопок", ВыравниваниеКнопок);
	мЭтотОбъект.Вставить("МежкнопочныйИнтервал", МежкнопочныйИнтервал);
	мЭтотОбъект.Вставить("МинимальнаяВысотаСтроки", МинимальнаяВысотаСтроки);
	мЭтотОбъект.Вставить("МинимальнаяШиринаКолонки", МинимальнаяШиринаКолонки);
	мЭтотОбъект.Вставить("Рамка", Рамка);
	
	// -- Выравнивание.
	мЭтотОбъект.Вставить("ВыравниваниеОтступСлева", Выравнивание.ОтступСлева);
	мЭтотОбъект.Вставить("ВыравниваниеОтступСверху", Выравнивание.ОтступСверху);
	мЭтотОбъект.Вставить("ВыравниваниеОтступСправа", Выравнивание.ОтступСправа);
	мЭтотОбъект.Вставить("ВыравниваниеОтступСнизу", Выравнивание.ОтступСнизу);
	
	// -- Дополнительно.
	мЭтотОбъект.Вставить("ЦветРамки", ЦветРамки);
	мЭтотОбъект.Вставить("ЦветФонаПоУмолчанию", ЦветФонаКнопки);
	мЭтотОбъект.Вставить("ЦветТекстаПоУмолчанию", ЦветТекстаКнопки);
	мЭтотОбъект.Вставить("Шрифт", Шрифт);

КонецПроцедуры

Процедура ЗапомнитьСостояниеПолосыПрокрутки()
	
	// Проверка спецрежимов и изменения состояния.
	Если Не мИзмененРазмерФормы Тогда
		Возврат;
	КонецЕсли;
		
	// Полоса прокрутки.
	мЭтотОбъект.Вставить("ГоризонтальнаяОриентация", мЭтотОбъект.ШиринаКлиентскойОбласти >= мЭтотОбъект.ВысотаКлиентскойОбласти);
	
	
	// Размеры.
	Ширина = мЭтотОбъект.ШиринаКлиентскойОбласти; Высота = мЭтотОбъект.ВысотаКлиентскойОбласти;
	
	// Расчет параметров страницы.
	Строк = Цел((Высота - 1) / (МинимальнаяВысотаСтроки - 1));
	Колонок = Цел((Ширина - 1) / (МинимальнаяШиринаКолонки - 1));
	мЭтотОбъект.Вставить("ВидимостьРеальная", Булево(Колонок) И Булево(Строк));
	
	// -- Проверка достаточности пространства.
	Если Не мЭтотОбъект.ВидимостьРеальная Тогда
		Возврат;
	КонецЕсли;
	
	
	// Расчет параметров сетки.
	мЭтотОбъект.Вставить("СтрокНаСтраницеРеальная", Строк);
	мЭтотОбъект.Вставить("КолонокНаСтраницеРеальная", Колонок);
	
	
	// Расчет распределения кнопок.
	КнопокНаСтраницеБезПолосойПрокрутки = Строк * Колонок;
	Если мЭтотОбъект.ГоризонтальнаяОриентация Тогда
		КнопокНаСтраницеСПолосойПрокрутки = КнопокНаСтраницеБезПолосойПрокрутки - Строк;
	Иначе
		КнопокНаСтраницеСПолосойПрокрутки = КнопокНаСтраницеБезПолосойПрокрутки - Колонок;
	КонецЕсли;
	мЭтотОбъект.Вставить("КнопокНаСтраницеБезПолосойПрокрутки", КнопокНаСтраницеБезПолосойПрокрутки);
	мЭтотОбъект.Вставить("КнопокНаСтраницеСПолосойПрокрутки", КнопокНаСтраницеСПолосойПрокрутки);
	
КонецПроцедуры

Процедура ЗапомнитьСостояниеКнопок()
	
	// Проверка спецрежимов и изменения состояния.
	Если Не мИзмененыПараметрыДанных Тогда
		Возврат;
	КонецЕсли;
	
	// Количество страниц.
	КоличествоКнопок = Кнопки.Количество(); 
	мЭтотОбъект.Вставить("КоличествоКнопок", КоличествоКнопок);
	
	КнопокНаСтраницеБезПолосойПрокрутки = мЭтотОбъект.КнопокНаСтраницеБезПолосойПрокрутки;
	КнопокНаСтраницеСПолосойПрокрутки = мЭтотОбъект.КнопокНаСтраницеСПолосойПрокрутки;
	Если (КоличествоКнопок <= КнопокНаСтраницеБезПолосойПрокрутки) Тогда
		КоличествоСтраниц = Мин(КоличествоКнопок, 1);
	Иначе
		КоличествоСтраниц = Цел(КоличествоКнопок / Макс(КнопокНаСтраницеСПолосойПрокрутки, 1));
		Если (Не КоличествоКнопок % Макс(КнопокНаСтраницеСПолосойПрокрутки, 1) = 0) Тогда
			КоличествоСтраниц = КоличествоСтраниц + 1;
		КонецЕсли;
	КонецЕсли;
	
	мЭтотОбъект.Вставить("КоличествоСтраниц", КоличествоСтраниц);
	Если (КоличествоСтраниц <= 1) Тогда
		мЭтотОбъект.Вставить("КнопокНаСтраницеРеальная", КнопокНаСтраницеБезПолосойПрокрутки);
	Иначе
		мЭтотОбъект.Вставить("КнопокНаСтраницеРеальная", КнопокНаСтраницеСПолосойПрокрутки);
	КонецЕсли;
	
	// -- Текащая страница.
	Если (мТекущаяСтраница = Неопределено) Тогда
		мТекущаяСтраница = 0;
	КонецЕсли;
	мТекущаяСтраница = Макс(Мин(мТекущаяСтраница, КоличествоСтраниц - 1), 0);
	
КонецПроцедуры


Процедура ОтобразитьПолосуПрокрутки()
	
	// Корректировка положения полосы прокрутки.
	Если мИзмененРазмерФормы Тогда
		
		// -- Определение необходимости отображения полосы прокрутки.
		Если (Не мЭтотОбъект.ВидимостьРеальная) Тогда
			Возврат;
		КонецЕсли;
		
		// -- Определение расположения.
		РабочаяОбласть = ПолучитьЭлементФормы(мЭлементыФормыСетки, "РабочаяОбласть");
		ЭталонСтроки = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Строка", мЭтотОбъект.СтрокНаСтраницеРеальная - 1));
		ЭталонКолонки = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Колонка", мЭтотОбъект.КолонокНаСтраницеРеальная - 1));
		
		Если мЭтотОбъект.ГоризонтальнаяОриентация Тогда
			Середина = Цел(ЭталонКолонки.Ширина / 2);
			
			ЛевоВверх = ЭталонКолонки.Лево;
			ВерхВверх = РабочаяОбласть.Верх;
			ШиринаВверх = Середина + 1;
			ВысотаВверх = РабочаяОбласть.Высота;
			КартинкаВверх = ЭтотОбъект.БиблиотекаКартинок.Влево;
			
			ЛевоВниз = ЭталонКолонки.Лево + Середина;
			ВерхВниз = ВерхВверх;
			ШиринаВниз = ЭталонКолонки.Ширина - Середина;
			ВысотаВниз = ВысотаВверх;
			КартинкаВниз = ЭтотОбъект.БиблиотекаКартинок.Вправо;
			
			
			// -- Привязки.
			ВверхПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭталонКолонки, ГраницаЭлементаУправления.Лево);
			ВверхПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭталонКолонки, ГраницаЭлементаУправления.Центр);
			ВверхПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, РабочаяОбласть, ГраницаЭлементаУправления.Верх);
			ВверхПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, РабочаяОбласть, ГраницаЭлементаУправления.Низ);
			
			ВнизПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭталонКолонки, ГраницаЭлементаУправления.Центр);
			ВнизПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭталонКолонки, ГраницаЭлементаУправления.Право);
			ВнизПривязкаВерх = ВверхПривязкаВерх;
			ВнизПривязкаНиз = ВверхПривязкаНиз;
		Иначе
			Середина = Цел(ЭталонСтроки.Высота / 2);
			
			ЛевоВверх = РабочаяОбласть.Лево;
			ВерхВверх = ЭталонСтроки.Верх;
			ШиринаВверх = РабочаяОбласть.Ширина;
			ВысотаВверх = Середина + 1;
			КартинкаВверх = ЭтотОбъект.БиблиотекаКартинок.Вверх;
			
			ЛевоВниз = ЛевоВверх;
			ВерхВниз = ЭталонСтроки.Верх + Середина;
			ШиринаВниз = ШиринаВверх;
			ВысотаВниз = ЭталонСтроки.Высота - Середина;
			КартинкаВниз = ЭтотОбъект.БиблиотекаКартинок.Вниз;

			
			// -- Привязки.
			ВверхПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, РабочаяОбласть, ГраницаЭлементаУправления.Лево);
			ВверхПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, РабочаяОбласть, ГраницаЭлементаУправления.Право);
			ВверхПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭталонСтроки, ГраницаЭлементаУправления.Верх);
			ВверхПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭталонСтроки, ГраницаЭлементаУправления.Центр);
			
			ВнизПривязкаЛево = ВверхПривязкаЛево;
			ВнизПривязкаПраво = ВверхПривязкаПраво;
			ВнизПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭталонСтроки, ГраницаЭлементаУправления.Центр);
			ВнизПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭталонСтроки, ГраницаЭлементаУправления.Низ);
		КонецЕсли;
		
		ЛевоВверх = ЛевоВверх - мЭтотОбъект.ВыравниваниеОтступСлева;
		ВерхВверх = ВерхВверх - мЭтотОбъект.ВыравниваниеОтступСверху;
		
		ЛевоВниз = ЛевоВниз - мЭтотОбъект.ВыравниваниеОтступСлева;
		ВерхВниз = ВерхВниз - мЭтотОбъект.ВыравниваниеОтступСверху;
		
		
		// -- Вверх/Влево.
		ЭлементФормыВверх = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вверх", Истина, ,
												 , ЛевоВверх, ВерхВверх, ШиринаВверх, ВысотаВверх,
												 ВверхПривязкаЛево, ВверхПривязкаПраво, ВверхПривязкаВерх, ВверхПривязкаНиз,
							 					 , ЦветКнопокПолосыПрокрутки, ,,,, 
												 , КартинкаВверх);
		
		// -- Вниз/Вправо.
		ЭлементФормыВниз = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вниз", Истина, ,
												, ЛевоВниз, ВерхВниз, ШиринаВниз, ВысотаВниз,
												ВнизПривязкаЛево, ВнизПривязкаПраво, ВнизПривязкаВерх, ВнизПривязкаНиз,
												, ЦветКнопокПолосыПрокрутки, ,,,, 
												, КартинкаВниз);
							 
		// -- Разделитель.
		ЭлементФормыРазделитель = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Разделитель", Истина, ,
												 , ЛевоВверх, ВерхВверх, ШиринаВверх, ВысотаВверх,
												 ВверхПривязкаЛево, ВверхПривязкаПраво, ВверхПривязкаВерх, ВверхПривязкаНиз,
							 					 , ЦветКнопокПолосыПрокрутки, ,,,, 
												 , КартинкаВверх);
												 
	Иначе
												 
		// -- Определение необходимости отображения полосы прокрутки.
		Если (Не мЭтотОбъект.ВидимостьРеальная) Тогда
			Возврат;
		КонецЕсли;
		
		Если мРежимИзмененияСтраницы Тогда
			
			ЭлементФормыВверх = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вверх");
			ЭлементФормыВниз = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вниз");
			ЭлементФормыРазделитель = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Разделитель");
		
		Иначе
				
			Если мЭтотОбъект.ГоризонтальнаяОриентация Тогда
				КартинкаВверх = ЭтотОбъект.БиблиотекаКартинок.Влево;
				КартинкаВниз = ЭтотОбъект.БиблиотекаКартинок.Вправо;
			Иначе
				КартинкаВверх = ЭтотОбъект.БиблиотекаКартинок.Вверх;
				КартинкаВниз = ЭтотОбъект.БиблиотекаКартинок.Вниз;
			КонецЕсли;
				
			ЭлементФормыВверх = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вверх", ,
								 					 , ЦветКнопокПолосыПрокрутки, ,,,, 
													 , КартинкаВверх);
			
			ЭлементФормыВниз = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вниз", ,
													, ЦветКнопокПолосыПрокрутки, ,,,, 
													, КартинкаВниз);
													
			ЭлементФормыРазделитель = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Разделитель", ,
								 					 , ЦветКнопокПолосыПрокрутки, ,,,, 
													 , КартинкаВверх);
												   
		КонецЕсли;
												 
	КонецЕсли;
	
	// -- Видимость и доступность.
	Видимость = (мЭтотОбъект.КоличествоСтраниц > 1);
	Первая = (мТекущаяСтраница = 0); Последняя = (Не Видимость) Или (мТекущаяСтраница = мЭтотОбъект.КоличествоСтраниц - 1);
	
	ЭлементФормыВверх.Видимость = Видимость И (Не Последняя);
	ЭлементФормыВверх.Доступность = Доступность И (Не Первая);
	
	ЭлементФормыВниз.Видимость = Видимость;
	ЭлементФормыВниз.Доступность = Доступность И (Не Последняя);
	
	ЭлементФормыРазделитель.Видимость = Видимость И Последняя;
	ЭлементФормыРазделитель.Доступность = Доступность И (Не Первая);
	
КонецПроцедуры

Процедура ОтобразитьСетку()
	
	// Корректировка положения ячеек.
	Если Не мИзмененРазмерФормы Тогда
		Возврат;
	КонецЕсли;
		
	// -- Удаление элементов.
	УдалитьЭлементФормы(мЭлементыФормыКнопок);
	УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки);
	УдалитьЭлементФормы(мЭлементыФормыСетки);

	// -- Определение необходимости отображения сетки.
	Если Не мЭтотОбъект.ВидимостьРеальная Тогда
		Возврат;
	КонецЕсли;
		
	// -- Расчет параметров страницы.
	ОсталосьВысоты = мЭтотОбъект.ВысотаКлиентскойОбласти; ПоправкаВысоты = 0; СмещениеВысоты = 0;
	ОсталосьШирины = мЭтотОбъект.ШиринаКлиентскойОбласти; ПоправкаШирины = 0; СмещениеШирины = 0;
	
	
	ВысотаСтрокиСтраницыРеальная = Цел((ОсталосьВысоты - 1) / мЭтотОбъект.СтрокНаСтраницеРеальная) + 1;
	ЗначениеРасширенияВысоты = (ОсталосьВысоты - 1) - (ВысотаСтрокиСтраницыРеальная - 1) * мЭтотОбъект.СтрокНаСтраницеРеальная;
	
	ШиринаКолонкиСтраницыРеальная = Цел((ОсталосьШирины - 1) / мЭтотОбъект.КолонокНаСтраницеРеальная) + 1;
	ЗначениеРасширенияШирины = (ОсталосьШирины - 1) - (ШиринаКолонкиСтраницыРеальная - 1) * мЭтотОбъект.КолонокНаСтраницеРеальная;
	
	
	// -- Рабочая область.
	
	// ---- Привязки рабочей области.
	ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Лево);
	ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Право);
	ПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Верх);
	ПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Низ);
	
	ЭлементРабочейОбласти = ДобавитьЭлементФормы(мЭлементыФормыСетки, "РабочаяОбласть", Ложь, ,
												 Ложь, 0, 0, ОсталосьШирины, ОсталосьВысоты,
												 ПривязкаЛево, ПривязкаПраво, ПривязкаВерх, ПривязкаНиз);
	
	// -- Строки.
	ИнверсияСтрок = (Не мЭтотОбъект.ГоризонтальнаяОриентация) И (мЭтотОбъект.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право);
	
	// ---- Привязки строк (I).
	ЭлементСтрокиСверху = ЭлементРабочейОбласти;
	
	ПривязкаСтрокиЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Лево);
	ПривязкаСтрокиПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ПривязкаСтрокиПраво);
	
	
	ПройденоСтрокСтраницы = 0;
	Пока (ОсталосьВысоты > 0) Цикл
		
		// ---- Определение высоты строки.
		Если (ОсталосьВысоты > ВысотаСтрокиСтраницыРеальная) Тогда
			ВысотаСтроки = ВысотаСтрокиСтраницыРеальная + Мин(ЗначениеРасширенияВысоты, 1);
			ЗначениеРасширенияВысоты = Макс(ЗначениеРасширенияВысоты - 1, 0);
			ПоправкаВысоты = 1;
		Иначе
			ВысотаСтроки = ОсталосьВысоты;
			ПоправкаВысоты = 0;
		КонецЕсли;
		
		// ---- Определение верха строки.
		Если ИнверсияСтрок Тогда
			ВерхСтроки = мЭтотОбъект.ВысотаКлиентскойОбласти - ВысотаСтроки - СмещениеВысоты;
		Иначе
			ВерхСтроки = СмещениеВысоты;
		КонецЕсли;
		
		
		// ---- Привязки строк (II).
		Если ИнверсияСтрок Тогда
			// ...
		Иначе
			Если (ЭлементСтрокиСверху = ЭлементРабочейОбласти) Тогда
				ПривязкаСтрокиВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭлементСтрокиСверху, ГраницаЭлементаУправления.Верх);
				ПривязкаСтрокиНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭлементСтрокиСверху, ГраницаЭлементаУправления.Верх, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Низ);
			Иначе
				ПривязкаСтрокиВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭлементСтрокиСверху, ГраницаЭлементаУправления.Низ);
				ПривязкаСтрокиНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭлементСтрокиСверху, ГраницаЭлементаУправления.Низ, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Низ);
			КонецЕсли;
		КонецЕсли;
		
		ЭлементСтрокиСверху = ДобавитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Строка", ПройденоСтрокСтраницы), Истина, ,
												   Ложь, 0, ВерхСтроки, 8, ВысотаСтроки,
												   ПривязкаСтрокиЛево, ПривязкаСтрокиПраво, ПривязкаСтрокиВерх, ПривязкаСтрокиНиз);
		ЭлементСтрокиСверху.Доступность = Ложь;

		
		ПройденоСтрокСтраницы = ПройденоСтрокСтраницы + 1;
		СмещениеВысоты = СмещениеВысоты + (ВысотаСтроки - 1); ОсталосьВысоты = ОсталосьВысоты - (ВысотаСтроки - ПоправкаВысоты); ПоправкаВысоты = 1;
		
	КонецЦикла;

	
	// -- Колонки.
	ИнверсияКолонок = мЭтотОбъект.ГоризонтальнаяОриентация И (мЭтотОбъект.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право);
	
	// ---- Привязки колонок (I).
	ЭлементКолонкиСлева = ЭлементРабочейОбласти;
	
	ПривязкаКолонкиВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Верх);
	ПривязкаКолонкиНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ПривязкаКолонкиВерх);
	
	
	ПройденоКолонокСтраницы = 0;
	Пока (ОсталосьШирины > 0) Цикл
		
		// ---- Определение высоты строки.
		Если (ОсталосьШирины > ШиринаКолонкиСтраницыРеальная) Тогда
			ШиринаКолонки = ШиринаКолонкиСтраницыРеальная + Мин(ЗначениеРасширенияШирины, 1);
			ЗначениеРасширенияШирины = Макс(ЗначениеРасширенияШирины - 1, 0);
			ПоправкаШирины = 1;
		Иначе
			ШиринаКолонки = ОсталосьШирины;
			ПоправкаШирины = 0;
		КонецЕсли;
		
		// ---- Определение лева колонки.
		Если ИнверсияКолонок Тогда
			ЛевоКолонки = мЭтотОбъект.ШиринаКлиентскойОбласти - ШиринаКолонки - СмещениеШирины;
		Иначе
			ЛевоКолонки = СмещениеШирины;
		КонецЕсли;
		
		
		// ---- Привязки колонок (II).
		Если ИнверсияКолонок Тогда
			// ...
		Иначе
			Если (ЭлементКолонкиСлева = ЭлементРабочейОбласти) Тогда
				ПривязкаКолонкиЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементКолонкиСлева, ГраницаЭлементаУправления.Лево);
				ПривязкаКолонкиПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементКолонкиСлева, ГраницаЭлементаУправления.Лево, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Право);
			Иначе
				ПривязкаКолонкиЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементКолонкиСлева, ГраницаЭлементаУправления.Право);
				ПривязкаКолонкиПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементКолонкиСлева, ГраницаЭлементаУправления.Право, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Право);
			КонецЕсли;
		КонецЕсли;
		
		ЭлементКолонкиСлева = ДобавитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Колонка", ПройденоКолонокСтраницы), Истина, ,
												   Ложь, ЛевоКолонки, 0, ШиринаКолонки, 8,
												   ПривязкаКолонкиЛево, ПривязкаКолонкиПраво, ПривязкаКолонкиВерх, ПривязкаКолонкиНиз);
		ЭлементКолонкиСлева.Доступность = Ложь;

		
		ПройденоКолонокСтраницы = ПройденоКолонокСтраницы + 1;
		СмещениеШирины = СмещениеШирины + (ШиринаКолонки - 1); ОсталосьШирины = ОсталосьШирины - (ШиринаКолонки - ПоправкаШирины); ПоправкаШирины = 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтобразитьКнопки()

	// Корректировка положения кнопок.
	Если мИзмененРазмерФормы Тогда
		
		мЯчейки = Новый Соответствие;

		// -- Определение необходимости отображения ячеек.
		Если Не мЭтотОбъект.ВидимостьРеальная Тогда
			Возврат;
		КонецЕсли;
		
		// -- Ячейки.
		ГоризонтальнаяОриентация = мЭтотОбъект.ГоризонтальнаяОриентация;
		
		// -- Межкнопочный интервал (I).
		МежкнопочныйИнтервалРеальный = мЭтотОбъект.МежкнопочныйИнтервал + Мин(мЭтотОбъект.МежкнопочныйИнтервал, 1);
		ЛевоМежкнопочныйИнтервал = Цел(МежкнопочныйИнтервалРеальный / 2);
		ПравоМежкнопочныйИнтервал = МежкнопочныйИнтервалРеальный - ЛевоМежкнопочныйИнтервал;
		
		СтрокНаСтранице = мЭтотОбъект.СтрокНаСтраницеРеальная;
		КолонокНаСтранице = мЭтотОбъект.КолонокНаСтраницеРеальная;
		
		Для ИндексСтроки = 0 По СтрокНаСтранице - 1 Цикл
			
			// ---- Строка ячейки.
			ЭталонСтроки = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Строка", ИндексСтроки));
			
			ВерхЯчейки = ЭталонСтроки.Верх - мЭтотОбъект.ВыравниваниеОтступСверху;
			ВысотяЯчейки = ЭталонСтроки.Высота; 
			
			// -- Межкнопочный интервал (II).
			Первая = (ИндексСтроки = 0); Последняя = (ИндексСтроки = СтрокНаСтранице - 1);
			Если Первая И (Не Последняя) Тогда
				ВысотяЯчейки = ВысотяЯчейки - ПравоМежкнопочныйИнтервал;
			ИначеЕсли (Последняя) И (Не Первая) Тогда
				ВерхЯчейки = ВерхЯчейки + ЛевоМежкнопочныйИнтервал;
				ВысотяЯчейки = ВысотяЯчейки - ЛевоМежкнопочныйИнтервал;
			ИначеЕсли (Не Первая) И (Не Последняя) Тогда
				ВерхЯчейки = ВерхЯчейки + ЛевоМежкнопочныйИнтервал;
				ВысотяЯчейки = ВысотяЯчейки - ЛевоМежкнопочныйИнтервал - ПравоМежкнопочныйИнтервал;
			КонецЕсли;
			
			
			// ---- Привязка (I).
			ПривязкаЯчейкиВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭталонСтроки, ГраницаЭлементаУправления.Верх);
			ПривязкаЯчейкиНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭталонСтроки, ГраницаЭлементаУправления.Низ);
			
			
			Для ИндексКолонки = 0 По КолонокНаСтранице - 1 Цикл
				
				// ---- Колонка.	
				ЭталонКолонки = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Колонка", ИндексКолонки));
				
				ЛевоЯчейки = ЭталонКолонки.Лево - мЭтотОбъект.ВыравниваниеОтступСлева;
				ШиринаЯчейки = ЭталонКолонки.Ширина;
				
				// -- Межкнопочный интервал (III).
				Первая = (ИндексКолонки = 0); Последняя = (ИндексКолонки = КолонокНаСтранице - 1);
				Если Первая И (Не Последняя) Тогда
					ШиринаЯчейки = ШиринаЯчейки - ПравоМежкнопочныйИнтервал;
				ИначеЕсли (Последняя) И (Не Первая) Тогда
					ЛевоЯчейки = ЛевоЯчейки + ЛевоМежкнопочныйИнтервал;
					ШиринаЯчейки = ШиринаЯчейки - ЛевоМежкнопочныйИнтервал;
				ИначеЕсли (Не Первая) И (Не Последняя) Тогда
					ЛевоЯчейки = ЛевоЯчейки + ЛевоМежкнопочныйИнтервал;
					ШиринаЯчейки = ШиринаЯчейки - ЛевоМежкнопочныйИнтервал - ПравоМежкнопочныйИнтервал;
				КонецЕсли;
				
				
				// ---- Привязка (II).
				ПривязкаЯчейкиЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭталонКолонки, ГраницаЭлементаУправления.Лево);
				ПривязкаЯчейкиПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭталонКолонки, ГраницаЭлементаУправления.Право);
				
				
				// ---- Ячейка.
				Если мЭтотОбъект.ГоризонтальнаяОриентация Тогда
					ШифрЯчейки = ЗашифроватьИмяЭлементФормы("Ячейка", ИндексКолонки * СтрокНаСтранице + ИндексСтроки);
				Иначе
					ШифрЯчейки = ЗашифроватьИмяЭлементФормы("Ячейка", ИндексСтроки * КолонокНаСтранице + ИндексКолонки);
				КонецЕсли;
				
				ЭлементСлева = ДобавитьЭлементФормы(мЭлементыФормыКнопок, ШифрЯчейки, Истина, ,
													Ложь, ЛевоЯчейки, ВерхЯчейки, ШиринаЯчейки, ВысотяЯчейки,
													ПривязкаЯчейкиЛево, ПривязкаЯчейкиПраво, ПривязкаЯчейкиВерх, ПривязкаЯчейкиНиз);
				
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;		
		
	
	// -- Кнопки.
		
	// ---- Определение необходимости отображения кнопок.
	Если Не мЭтотОбъект.ВидимостьРеальная Тогда
		Возврат;
	КонецЕсли;
		
	// ---- Список активных элементов.
	ДополнительныйСписок = Новый СписокЗначений;
	
	// ---- Кнопки.
	ПройденоКнопокСтраницы = 0; ОсталосьКнопокСтраницы = мЭтотОбъект.КнопокНаСтраницеРеальная;
	КоличествоКнопок = Кнопки.Количество(); 
	
	Для ИндексКнопки = мТекущаяСтраница * мЭтотОбъект.КнопокНаСтраницеРеальная По КоличествоКнопок - 1 Цикл
		
		// -- Отсечение непомещаемыхся кнопок.
		Если (ОсталосьКнопокСтраницы = 0) Тогда
			Прервать;
		КонецЕсли;
		
		// -- Кнопка.
		
		// ---- Текст и картинка.
		Кнопка = Кнопки.Получить(ИндексКнопки);
		Отображение = Кнопка.Отображение;
		Если (Отображение = ОтображениеКнопкиКоманднойПанели.Надпись) Или (Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка) Или (Не ТипЗнч(Кнопка.Картинка) = мТипКартинки) Или (Кнопка.Картинка.Вид = ВидКартинки.Пустая) Тогда
			Текст = Кнопка.Текст;
		Иначе
			Текст = "";
		КонецЕсли;
		Если (Не Отображение = ОтображениеКнопкиКоманднойПанели.Надпись) И (ТипЗнч(Кнопка.Картинка) = мТипКартинки) И (Не Кнопка.Картинка.Вид = ВидКартинки.Пустая) Тогда
			Картинка = Кнопка.Картинка;
		Иначе
			Картинка = мСлужебнаяКартинка;
		КонецЕсли;
		
		
		ШифрЯчейки = ЗашифроватьИмяЭлементФормы("Ячейка", ПройденоКнопокСтраницы);
		
		ЭлементФормы = ИзменитьЭлементФормы(мЭлементыФормыКнопок, ШифрЯчейки, ДополнительныйСписок,
											Текст, Кнопка.ЦветФонаКнопки, Кнопка.ЦветТекстаКнопки, Кнопка.Шрифт, ,,
											, Картинка, ,
											,,, Кнопка.Подсказка);
		// ---- Доступность.									
		ЭлементФормы.Доступность = Доступность И Кнопка.Доступность;
		
		мЯчейки.Вставить(ШифрЯчейки, Кнопка);
		
		
		ПройденоКнопокСтраницы = ПройденоКнопокСтраницы + 1; ОсталосьКнопокСтраницы = ОсталосьКнопокСтраницы - 1;
		
	КонецЦикла;	
	
	// -- Прячем неиспользуемые ячейки и отображаем используемые.
	Для Каждого ЭлементСтруктуры Из мЭлементыФормыКнопок Цикл
		ЭлементФормы = ЭлементСтруктуры.Значение;
		ЭлементФормы.Видимость = (Не ДополнительныйСписок.НайтиПоЗначению(ЭлементФормы) = Неопределено);
	КонецЦикла;
	
КонецПроцедуры



// Функция формирует полное имя элемента формы по данным определяющим логические пренадлежность и местоположение элемента формы.
//
// Параметры:
//	Имя - Строка. Логическая пренадлежность;
//	... - Число. Логическое местоположение.
//
// Возвращаемое значение:
//  Строка. Полное имя элемента формы.
//
Функция ЗашифроватьИмяЭлементФормы(Знач Имя, Строка = Неопределено, Колонка = Неопределено, ЭлементВложенногоСписка = Неопределено)
	
	// Формирование имени элемнта формы.
	Если (Не Строка = Неопределено) Тогда
		// -- Строка.
		Имя = Строка(Имя) + "_" + Строка;
		
		// -- Колонка.
		Если (Не Колонка = Неопределено) Тогда
			Имя = Имя + "x" + Колонка;
			
			// -- Элемент вложенного списка.
			Если (Не ЭлементВложенногоСписка = Неопределено) Тогда
				Имя = Имя + "x" + ЭлементВложенногоСписка;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

// Процедура востанавливает логические пренадлежность и местоположение элемента формы по полному имени элемента формы.
//
// Параметры:
//	ПолноеИмя - Строка. Полное имя элемента формы сформированное функцией "ЗашифроватьИмяЭлементФормы".
//
// Возвращаемое значение:
//  Имя - Строка. Логическая пренадлежность;
//	... - Число. Логическое местоположение.
//
Процедура РасшифроватьИмяЭлементаФормы(Знач ПолноеИмя, Имя, Строка = Неопределено, Колонка = Неопределено, ЭлементВложенногоСписка = Неопределено)
	
	// Расшифровака имени элемнта формы.
	// -- Имя.
	Позиция = Найти(ПолноеИмя, "_");
	Если (Позиция = 0) Тогда
		Имя = ПолноеИмя;
		Возврат;
	Иначе
		Имя = Лев(ПолноеИмя, Позиция - 1);
		ПолноеИмя = Сред(ПолноеИмя, Позиция + 1); 
	КонецЕсли;
	// -- Строка.
	Позиция = Найти(ПолноеИмя, "x");
	Если (Позиция = 0) Тогда
		Строка = Число(ПолноеИмя);
		Возврат;
	Иначе
		Строка = Число(Лев(ПолноеИмя, Позиция - 1));
		ПолноеИмя = Сред(ПолноеИмя, Позиция + 1); 
	КонецЕсли;
	// -- Колонка.
	Позиция = Найти(ПолноеИмя, "x");
	Если (Позиция = 0) Тогда
		Колонка = Число(ПолноеИмя);
		Возврат;
	Иначе
		Колонка = Число(Лев(ПолноеИмя, Позиция - 1));
		ПолноеИмя = Сред(ПолноеИмя, Позиция + 1); 
	КонецЕсли;
	// -- Элемент вложенного списка.
	ЭлементВложенногоСписка = Число(ПолноеИмя);
	
КонецПроцедуры


// Функция сохраняет параметры привязки элемента формы в стандартизированное соответствие.
//
// Параметры:
//	... Параметры привязки элемента формы.
//
// Возвращаемое значение:
//  Соответствие. Стандартизированное соответствие с параметрами привязки элемента формы, используется совместно с функцией "УстановитьПривязкуЭлементаФормы".
//
Функция СоздатьПривязкуЭлементаФормы(Граница, ПервыйЭлемент = Неопределено, ГраницаПервогоЭлемента = Неопределено, ВторойЭлемент = Неопределено, ГраницаВторогоЭлемента = Неопределено)
	
	// Создание привязки.
	Привязка = Новый Соответствие;
	Привязка.Вставить("Граница", Граница);
	Если (ТипЗнч(ПервыйЭлемент) = Тип("Соответствие")) Тогда
		// -- По шаблону.
		Привязка.Вставить("ПервыйЭлемент", ПервыйЭлемент.Получить("ПервыйЭлемент"));
		Привязка.Вставить("ГраницаПервогоЭлемента", ПервыйЭлемент.Получить("ГраницаПервогоЭлемента"));
		Привязка.Вставить("ВторойЭлемент", ПервыйЭлемент.Получить("ВторойЭлемент"));
		Привязка.Вставить("ГраницаВторогоЭлемента", ПервыйЭлемент.Получить("ГраницаВторогоЭлемента"));
	Иначе
		// -- По параметрам.
		Привязка.Вставить("ПервыйЭлемент", ПервыйЭлемент);
		Привязка.Вставить("ГраницаПервогоЭлемента", ГраницаПервогоЭлемента);
		Привязка.Вставить("ВторойЭлемент", ВторойЭлемент);
		Привязка.Вставить("ГраницаВторогоЭлемента", ГраницаВторогоЭлемента);
	КонецЕсли;
	
	Возврат Привязка;
	
КонецФункции

// Процедура устанавливает требуемую привязку элемента формы.
//
// Параметры:
//	ЭлементФормы - ЭлементФормы. Элемента формы привязку которого требуется установить;
//	Привязка - Соответствие. Соответствие созданное функцией "СоздатьПривязкуЭлементаФормы".
//
Процедура УстановитьПривязкуЭлементаФормы(ЭлементФормы, Привязка)
	
	Если (Привязка = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Установка привязки.
	ЭлементФормы.УстановитьПривязку(Привязка.Получить("Граница"), Привязка.Получить("ПервыйЭлемент"), Привязка.Получить("ГраницаПервогоЭлемента"), Привязка.Получить("ВторойЭлемент"), Привязка.Получить("ГраницаВторогоЭлемента"));
	
КонецПроцедуры


// Функция создает новый элемента формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая требуемый элемент;
//	Имя - Строка. Имя требуемого элемента формы;
//	Тип - Тип, Булево. Тип создаваемого элемента: Истина - кнопка, Ложь - надпись или непосредственно тип;
//	ДополнительныйСписок - СпсисокЗначений. Список значений в который добавляется текущий элемент формы, используется совместно с функцией "УдалитьЭлементФормы";
//	... Параметры елемента формы.
//
// Возвращаемое значение:
//  Кнопка, Надпись, РамкаГруппы. Изменяемый элемент формы.
//
Функция ДобавитьЭлементФормы(Структура, Имя, Знач Тип = Истина, ДополнительныйСписок = Неопределено, 
							 Видимость = Истина, Лево, Верх, Ширина, Высота, 
							 ПривязкаЛево = Неопределено, ПривязкаПраво = Неопределено, ПривязкаВерх = Неопределено, ПривязкаНиз = Неопределено, 
							 Заголовок = "", ЦветФона = Неопределено, ЦветТекста = Неопределено, Шрифт = Неопределено, ГоризонтальноеПоложениеТекста  = Неопределено, ВертикальноеПоложениеТекста = Неопределено,
							 ПоложениеКартинки = Неопределено, Картинка = Неопределено, РазмерКартинкиЭлемента = Неопределено,
							 Рамка = Неопределено, ЦветРамки = Неопределено, ПрозрачныйФон = Ложь, Подсказка = "")
	
	Перем ЭлементФормы;
	
	// Нормализация.
	Если (ТипЗнч(Тип) = мТипБулева) Тогда
		Если Тип Тогда
			Тип = Тип("Кнопка");
		Иначе
			Тип = Тип("Надпись");
		КонецЕсли;
	КонецЕсли;
	Кнопка = (Тип = мТипКнопки); Надпись = (Тип = мТипНадписи); РамкаГруппы = (Тип = мТипРамкиГруппы);
	
	Если (ЦветФона = Неопределено) Тогда
		ЦветФона = мЭтотОбъект.ЦветФонаПоУмолчанию;
	КонецЕсли;
	Если (ЦветТекста = Неопределено) Тогда
		ЦветТекста = мЭтотОбъект.ЦветТекстаПоУмолчанию;
	КонецЕсли;
	Если (Шрифт = Неопределено) Тогда
		Шрифт = мЭтотОбъект.Шрифт;
	КонецЕсли;
	Если (Кнопка Или Надпись) Тогда
		Если (Картинка = Неопределено) Тогда
			Картинка = мСлужебнаяКартинка;
		КонецЕсли;
		Если (РазмерКартинкиЭлемента = Неопределено) Тогда
			РазмерКартинкиЭлемента = РазмерКартинки.РеальныйРазмер;
		КонецЕсли;
		Если (ВертикальноеПоложениеТекста = Неопределено) Тогда
			ВертикальноеПоложениеТекста = ВертикальноеПоложение.Центр;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка Тогда
		Если (ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Центр;
		КонецЕсли;
		Если (ПоложениеКартинки = Неопределено) Тогда
			ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево;
		КонецЕсли;
	КонецЕсли;
	Если Надпись Тогда
		Если (ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Авто;
		КонецЕсли;
		Если (ПоложениеКартинки = Неопределено) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
		ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
		ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Право) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Право;
		КонецЕсли;
	КонецЕсли;
	Если (Надпись Или РамкаГруппы) И (Рамка = Неопределено) Тогда
		Рамка = мСлужебнаяРамка;
	КонецЕсли;
	Если (ЦветРамки = Неопределено) Тогда
		ЦветРамки = мЭтотОбъект.ЦветРамки;
	КонецЕсли;

	
	// Поиск элемента.
	Структура.Свойство(Имя, ЭлементФормы);
	// -- Проверка соответсвия типов.
	Если (Не ЭлементФормы = Неопределено) И (Не Тип(ЭлементФормы) = Тип) Тогда
		Структура.Удалить(Имя);
		ЭлементФормы.Удалить();
		ЭлементФормы = Неопределено;
	КонецЕсли;
	// -- Создание нового элемента.
	Если (ЭлементФормы = Неопределено) Тогда
		ЭлементФормы = мЭтотОбъект.Форма.ЭлементыФормы.Добавить(Тип, мЭтотОбъект.ИмяЭлементаФормы + "_" + Имя, Видимость, мЭтотОбъект.ЭлементФормы);
		Структура.Вставить(Имя, ЭлементФормы);
	КонецЕсли;
	// -- Добавление в дополнительный список.
	Если (Не ДополнительныйСписок = Неопределено) Тогда
		ДополнительныйСписок.Добавить(ЭлементФормы);
	КонецЕсли;
	
	
	// Изменение параметров.
	ЭлементФормы.Лево = Лево + мЭтотОбъект.ВыравниваниеОтступСлева;
	ЭлементФормы.Верх = Верх + мЭтотОбъект.ВыравниваниеОтступСверху;
	ЭлементФормы.Ширина = Ширина;
	ЭлементФормы.Высота = Высота;
	ЭлементФормы.Заголовок = Заголовок;
	ЭлементФормы.Шрифт = Шрифт;
	Если (Кнопка Или Надпись) Тогда
		ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеТекста;
		ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложениеТекста;
		ЭлементФормы.Картинка = Картинка;
		ЭлементФормы.РазмерКартинки = РазмерКартинкиЭлемента;
	КонецЕсли;
	Если Кнопка Тогда
		ЭлементФормы.МногострочныйРежим = Истина;
		ЭлементФормы.ПоложениеКартинки = ПоложениеКартинки;
		ЭлементФормы.ЦветФонаКнопки = ЦветФона;
		ЭлементФормы.ЦветТекстаКнопки = ЦветТекста;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.Подсказка = Подсказка;
	КонецЕсли;
	Если Надпись Тогда
		ЭлементФормы.ПоложениеКартинкиНадписи = ПоложениеКартинки;
		ЭлементФормы.ЦветФона = ЦветФона;
		ЭлементФормы.ЦветТекста = ЦветТекста;
		ЭлементФормы.Рамка = Рамка;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
		ЭлементФормы.Подсказка = Подсказка;
	КонецЕсли;
	Если РамкаГруппы Тогда
		ЭлементФормы.ЦветТекста = ЦветТекста;
		ЭлементФормы.Рамка = Рамка;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
	КонецЕсли;
	УстановитьПривязкуЭлементаФормы(ЭлементФормы, ПривязкаЛево);
	УстановитьПривязкуЭлементаФормы(ЭлементФормы, ПривязкаПраво);
	УстановитьПривязкуЭлементаФормы(ЭлементФормы, ПривязкаВерх);
	УстановитьПривязкуЭлементаФормы(ЭлементФормы, ПривязкаНиз);
	
	// Установка связанного действия.
	Если Кнопка Тогда
		ЭлементФормы.УстановитьДействие("Нажатие", мЭтотОбъект.Нажатие);
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Функция изменяет настройки элемента формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая требуемый элемент;
//	Имя - Строка. Имя требуемого элемента формы;
//	ДополнительныйСписок - СпсисокЗначений. Список значений в который добавляется текущий элемент формы, используется совместно с функцией "УдалитьЭлементФормы";
//	... Параметры елемента формы.
//
// Возвращаемое значение:
//  Кнопка, Надпись, РамкаГруппы. Изменяемый элемент формы.
//
Функция ИзменитьЭлементФормы(Структура, Имя, ДополнительныйСписок = Неопределено,
							 Заголовок = "", ЦветФона = Неопределено, ЦветТекста = Неопределено, Шрифт = Неопределено, ГоризонтальноеПоложениеТекста  = Неопределено, ВертикальноеПоложениеТекста = Неопределено,
							 ПоложениеКартинки = Неопределено, Картинка = Неопределено, РазмерКартинкиЭлемента = Неопределено,
							 Рамка = Неопределено, ЦветРамки = Неопределено, ПрозрачныйФон = Ложь, Подсказка = "")
	
	Перем ЭлементФормы;
	
	// Поиск элемента.
	Структура.Свойство(Имя, ЭлементФормы);
	Если (ЭлементФормы = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	// -- Добавление в дополнительный список.
	Если (Не ДополнительныйСписок = Неопределено) Тогда
		ДополнительныйСписок.Добавить(ЭлементФормы);
	КонецЕсли;
	
	
	// Нормализация.
	Тип = ТипЗнч(ЭлементФормы);
	Кнопка = (Тип = мТипКнопки); Надпись = (Тип = мТипНадписи); РамкаГруппы = (Тип = мТипРамкиГруппы);
	
	Если (ЦветФона = Неопределено) Тогда
		ЦветФона = мЭтотОбъект.ЦветФонаПоУмолчанию;
	КонецЕсли;
	Если (ЦветТекста = Неопределено) Тогда
		ЦветТекста = мЭтотОбъект.ЦветТекстаПоУмолчанию;
	КонецЕсли;
	Если (Шрифт = Неопределено) Тогда
		Шрифт = мЭтотОбъект.Шрифт;
	КонецЕсли;
	Если (Кнопка Или Надпись) Тогда
		Если (Картинка = Неопределено) Тогда
			Картинка = мСлужебнаяКартинка;
		КонецЕсли;
		Если (РазмерКартинкиЭлемента = Неопределено) Тогда
			РазмерКартинкиЭлемента = РазмерКартинки.РеальныйРазмер;
		КонецЕсли;
		Если (ВертикальноеПоложениеТекста = Неопределено) Тогда
			ВертикальноеПоложениеТекста = ВертикальноеПоложение.Центр;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка Тогда
		Если (ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Центр;
		КонецЕсли;
		Если (ПоложениеКартинки = Неопределено) Тогда
			ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево;
		КонецЕсли;
	КонецЕсли;
	Если Надпись Тогда
		Если (ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Авто;
		КонецЕсли;
		Если (ПоложениеКартинки = Неопределено) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
		ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
		ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Право) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Право;
		КонецЕсли;
	КонецЕсли;
	Если (Надпись Или РамкаГруппы) И (Рамка = Неопределено) Тогда
		Рамка = мСлужебнаяРамка;
	КонецЕсли;
	Если (ЦветРамки = Неопределено) Тогда
		ЦветРамки = мЭтотОбъект.ЦветРамки;
	КонецЕсли;
	
	
	// Изменение параметров.
	ЭлементФормы.Заголовок = Заголовок;
	ЭлементФормы.Шрифт = Шрифт;
	Если (Кнопка Или Надпись) Тогда
		ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеТекста;
		ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложениеТекста;
		ЭлементФормы.Картинка = Картинка;
		ЭлементФормы.РазмерКартинки = РазмерКартинкиЭлемента;
	КонецЕсли;
	Если Кнопка Тогда
		ЭлементФормы.ПоложениеКартинки = ПоложениеКартинки;
		ЭлементФормы.ЦветФонаКнопки = ЦветФона;
		ЭлементФормы.ЦветТекстаКнопки = ЦветТекста;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.Подсказка = Подсказка;
	КонецЕсли;
	Если Надпись Тогда
		ЭлементФормы.ПоложениеКартинкиНадписи = ПоложениеКартинки;
		ЭлементФормы.ЦветФона = ЦветФона;
		ЭлементФормы.ЦветТекста = ЦветТекста;
		ЭлементФормы.Рамка = Рамка;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
		ЭлементФормы.Подсказка = Подсказка;
	КонецЕсли;
	Если РамкаГруппы Тогда
		ЭлементФормы.ЦветТекста = ЦветТекста;
		ЭлементФормы.Рамка = Рамка;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Функция изменяет только указанные настройки элемента формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая требуемый элемент;
//	Имя - Строка. Имя требуемого элемента формы;
//	ДополнительныйСписок - СпсисокЗначений. Список значений в который добавляется текущий элемент формы, используется совместно с функцией "УдалитьЭлементФормы";
//	... Параметры елемента формы.
//
// Возвращаемое значение:
//  Кнопка, Надпись, РамкаГруппы. Изменяемый элемент формы.
//
Функция ОбновитьЭлементФормы(Структура, Имя, ДополнительныйСписок = Неопределено,
							 Заголовок = Неопределено, ЦветФона = Неопределено, ЦветТекста = Неопределено, Шрифт = Неопределено, ГоризонтальноеПоложениеТекста  = Неопределено, ВертикальноеПоложениеТекста = Неопределено,
							 ПоложениеКартинки = Неопределено, Картинка = Неопределено, РазмерКартинкиЭлемента = Неопределено,
							 Рамка = Неопределено, ЦветРамки = Неопределено, ПрозрачныйФон = Неопределено, Подсказка = Неопределено)
	
	Перем ЭлементФормы;
	
	// Поиск элемента.
	Структура.Свойство(Имя, ЭлементФормы);
	Если (ЭлементФормы = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	// -- Добавление в дополнительный список.
	Если (Не ДополнительныйСписок = Неопределено) Тогда
		ДополнительныйСписок.Добавить(ЭлементФормы);
	КонецЕсли;
	
	
	// Нормализация.
	Тип = ТипЗнч(ЭлементФормы);
	Кнопка = (Тип = мТипКнопки); Надпись = (Тип = мТипНадписи); РамкаГруппы = (Тип = мТипРамкиГруппы);
	
	Если Надпись Тогда
		Если (Не ПоложениеКартинки = Неопределено) Тогда
			Если (ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево) Тогда
				ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
			ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Право) Тогда
				ПоложениеКартинки = ПоложениеКартинкиНадписи.Право;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// Изменение параметров.
	Если (Не Заголовок = Неопределено) Тогда
		ЭлементФормы.Заголовок = Заголовок;
	КонецЕсли;
	Если (Не Шрифт = Неопределено) Тогда
		ЭлементФормы.Шрифт = Шрифт;
	КонецЕсли;
	Если (Кнопка Или Надпись) Тогда
		Если (Не ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеТекста;
		КонецЕсли;
		Если (Не ВертикальноеПоложениеТекста = Неопределено) Тогда
			ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложениеТекста;
		КонецЕсли;
		Если (Не Картинка = Неопределено) Тогда
			ЭлементФормы.Картинка = Картинка;
		КонецЕсли;
		Если (Не РазмерКартинкиЭлемента = Неопределено) Тогда
			ЭлементФормы.РазмерКартинки = РазмерКартинкиЭлемента;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка Тогда
		Если (Не ПоложениеКартинки = Неопределено) Тогда
			ЭлементФормы.ПоложениеКартинки = ПоложениеКартинки;
		КонецЕсли;
		Если (Не ЦветФона = Неопределено) Тогда
			ЭлементФормы.ЦветТекстаКнопки = ЦветФона;
		КонецЕсли;
		Если (Не ЦветТекста = Неопределено) Тогда
			ЭлементФормы.ЦветТекстаКнопки = ЦветТекста;
		КонецЕсли;
		Если (Не ЦветРамки = Неопределено) Тогда
			ЭлементФормы.ЦветРамки = ЦветРамки;
		КонецЕсли;
		Если (Не Подсказка = Неопределено) Тогда
			ЭлементФормы.Подсказка = Подсказка;
		КонецЕсли;
	КонецЕсли;
	Если Надпись Тогда
		Если (Не ПоложениеКартинки = Неопределено) Тогда
			ЭлементФормы.ПоложениеКартинки = ПоложениеКартинки;
		КонецЕсли;
		Если (Не ЦветФона = Неопределено) Тогда
			ЭлементФормы.ЦветФона = ЦветФона;
		КонецЕсли;
		Если (Не ЦветТекста = Неопределено) Тогда
			ЭлементФормы.ЦветТекста = ЦветТекста;
		КонецЕсли;
		Если (Не Рамка = Неопределено) Тогда
			ЭлементФормы.Рамка = Рамка;
		КонецЕсли;
		Если (Не ЦветРамки = Неопределено) Тогда
			ЭлементФормы.ЦветРамки = ЦветРамки;
		КонецЕсли;
		Если (Не ПрозрачныйФон = Неопределено) Тогда
			ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
		КонецЕсли;
		Если (Не Подсказка = Неопределено) Тогда
			ЭлементФормы.Подсказка = Подсказка;
		КонецЕсли;
	КонецЕсли;
	Если РамкаГруппы Тогда
		Если (Не ЦветТекста = Неопределено) Тогда
			ЭлементФормы.ЦветТекста = ЦветТекста;
		КонецЕсли;
		Если (Не Рамка = Неопределено) Тогда
			ЭлементФормы.Рамка = Рамка;
		КонецЕсли;
		Если (Не ЦветРамки = Неопределено) Тогда
			ЭлементФормы.ЦветРамки = ЦветРамки;
		КонецЕсли;
		Если (Не ПрозрачныйФон = Неопределено) Тогда
			ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Функция возвращает элемент формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая требуемый элемент;
//	Имя - Строка. Имя требуемого элемента формы;
//	ДополнительныйСписок - СпсисокЗначений. Список значений в который добавляется текущий элемент формы, используется совместно с функцией "УдалитьЭлементФормы".
//
// Возвращаемое значение:
//  Кнопка, Надпись. Требуемый элемент формы.
//
Функция ПолучитьЭлементФормы(Структура, Имя, ДополнительныйСписок = Неопределено)
	
	Перем ЭлементФормы;
	
	// Поиск элемента.
	Структура.Свойство(Имя, ЭлементФормы);
	// -- Добавление в дополнительный список.
	Если (Не ЭлементФормы = Неопределено) И (Не ДополнительныйСписок = Неопределено) Тогда
		ДополнительныйСписок.Добавить(ЭлементФормы);
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Процедура удаляет элементы формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая удаляемый элемент;
//	Имя - Строка. Имя удаляемого элемента формы;
//		- СписокЗначений. Удаляются все элементы формы не вошедшие в список;
//		- Неопределено. Удаляются все элементы формы принадлежащие данной структуре.
//
Процедура УдалитьЭлементФормы(Структура, Имя = Неопределено)
	
	Перем ЭлементФормы;
	
	Если (Имя = Неопределено) Тогда
		
		// Удаление всех элементов не вошедших в список.
		Для Каждого ЭлементСтруктуры Из Структура Цикл
			мЭтотОбъект.Форма.ЭлементыФормы.Удалить(ЭлементСтруктуры.Значение);
		КонецЦикла;
		Структура.Очистить();
		Возврат;
		
	ИначеЕсли (ТипЗнч(Имя) = Тип("СписокЗначений")) Тогда
		
		// Удаление всех элементов не вошедших в список.
		Для Каждого ЭлементСтруктуры Из Структура Цикл
			Если (Имя.НайтиПоЗначению(ЭлементСтруктуры.Значение) = Неопределено) Тогда
				Структура.Удалить(ЭлементСтруктуры.Ключ);
				мЭтотОбъект.Форма.ЭлементыФормы.Удалить(ЭлементСтруктуры.Значение);
			КонецЕсли;
		КонецЦикла;
		Возврат;
		
	ИначеЕсли (ТипЗнч(Имя) = Тип("Строка")) Тогда
		
		// Нормализация.
		Структура.Свойство(Имя, ЭлементФормы);
		Если (ЭлементФормы = Неопределено) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		ЭлементФормы = Имя;
	КонецЕсли;
	
	// Удаление из списка.
	Структура.Удалить(Имя);
	
	// Удаление с формы.
	мЭтотОбъект.Форма.ЭлементыФормы.Удалить(ЭлементФормы);
	
КонецПроцедуры


// Функция возвращает описание вызвваемого исключения.
//
// Параметры:
//	Метод - Строка. Метод в пространстве которого вызывается исключение;
//	Причина - Строка. Причина исключения;
//	Параметр - Строка. Дополнительный параметр связанный с исключеним.
//
// Возвращаемое значение:
//  Строка. Описание исключения.
//
Функция ОписаниеИсключения(Метод, Причина = Неопределено, Параметр = Неопределено)
	
	// Формирование описания исключения.
	Результат = "Ошибка при вызове метода контекста ("" + %метод% + "")"; 
	Если ПустаяСтрока(Причина) Тогда
		Результат = Результат + ".";
	Иначе
		Результат = Результат + ": " + Причина + ".";
	КонецЕсли;
	
	// Результат.
	Возврат СтрЗаменить(СтрЗаменить(Результат, "%параметр%", Параметр), "%метод%", Метод);
	
КонецФункции // ОписаниеИсключения()


// Локализация.
лПричинаНеПоддерживаетсяСвязьСДанными	= "Данный элемент управления не поддерживает связь с данными";
лПричинаНесоответствиеТипов				= "Несоответствие типов (параметр '%параметр%')";
лПричинаИндексВыходитЗаГраницы			= "Значение индекса выходит за границы диапазона";


// Инициализация переменных.
// -- Данные.
мДанные = "";
мТипДанных = Новый ОписаниеТипов;
мПоддерживаемыеТипыДанных = мТипДанных;

// -- Списки элементов формы.
мЭлементыФормыПолосыПрокрутки = Новый Структура;
мЭлементыФормыСетки = Новый Структура;
мЭлементыФормыКнопок = Новый Структура;

// -- Спецрежимы.
мРежимПрограммногоОбновления = Ложь;
мРежимИзмененияСтраницы = Ложь;

// -- Флаги изменения состояний.
мИзмененРазмерФормы = Ложь;
мИзмененыПараметрыДанных = Ложь;

// -- Типы данных.
мСлужебнаяКартинка = Новый Картинка;
мСлужебнаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);

мТипСтроки = Тип("Строка");
мТипЧисла = Тип("Число");
мТипБулева = Тип("Булево");
мТипОписанияТипов = Тип("ОписаниеТипов");
мТипФормы = Тип("Форма");
мТипПанель = Тип("Панель");
мТипСтраницы = Тип("СтраницаПанели");
мТипКнопки = Тип("Кнопка");
мТипНадписи = Тип("Надпись");
мТипРамкиГруппы = Тип("РамкаГруппы");
мТипДействия = Тип("Действие");
мТипКартинки = Тип("Картинка");
мТипРамки = Тип("Рамка");
мТипВыравниванияКнопокКоманднойПанели = Тип("ВыравниваниеКнопокКоманднойПанели");
мТипОтображенияКнопкиКоманднойПанели = Тип("ОтображениеКнопкиКоманднойПанели");


// Инициализация значений по умолчанию.
ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Лево;
Доступность = Истина;
МежкнопочныйИнтервал = 2;
Рамка = мСлужебнаяРамка;
ЦветКнопокПолосыПрокрутки = ЦветаСтиля.ЦветФонаКнопки;
ЦветРамки = ЦветаСтиля.ЦветРамки;
ЦветТекстаКнопки = ЦветаСтиля.ЦветТекстаКнопки;
ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
ЦветФонаКнопки = ЦветаСтиля.ЦветФонаКнопки;
Шрифт = ШрифтыСтиля.ШрифтТекста;

// Нормализация.
Нормализация();


// Инициализация по единым стандартам.
Попытка Выполнить("Touch.КоманднаяПанель(ЭтотОбъект)"); Исключение КонецПопытки;

#КонецЕсли


// TODO:
// 1. Режим обновления кнопок
// 2. Текущая страница при недостаточности пространства
// 3. Отсечение проверки состояния кнопок при недостаточности пространства
// 4. Инверсия