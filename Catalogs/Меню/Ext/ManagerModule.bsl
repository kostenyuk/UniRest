
Функция НайтиПоНоменклатуре(Номенклатура, Владелец) Экспорт
	
	// Проверка.
	Если (ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Меню")) Тогда
		Возврат Номенклатура;
	КонецЕсли; 
	
	// Поиск.
	Возврат Справочники.Меню.НайтиПоРеквизиту("Номенклатура", Номенклатура, , Владелец);

КонецФункции // НайтиПоНоменклатуре()


Процедура ПеренестиНоменклатуру(Номенклатура, ПараметрыПереноса, Справочник = "Меню") Экспорт
	
	// Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Номенклатура.Ссылка КАК Номенклатура,
	                      |	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	                      |	Номенклатура.Родитель КАК Родитель,
	                      |	Номенклатура.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Ссылка В ИЕРАРХИИ(&Номенклатура)
	                      |	И (Номенклатура.ЭтоГруппа
	                      |			ИЛИ Номенклатура.ИспользуетсяТоварами)
	                      |	И НЕ Номенклатура.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Номенклатура.Ссылка ИЕРАРХИЯ");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если (Справочник = "МодификаторыНоменклатуры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИспользуетсяТоварами", "ИспользуетсяМодификаторами");
	КонецЕсли; 
	Если (Справочник = "УсловияНоменклатуры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИспользуетсяТоварами", "ИспользуетсяУсловиями");
	КонецЕсли;
	
	Если Не ПараметрыПереноса.ИерархическийСписок Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.ЭтоГруппа", "ЛОЖЬ");
	КонецЕсли; 
	
	Если ПараметрыПереноса.ПомеченныеНаУдаление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ Номенклатура.ПометкаУдаления", "ИСТИНА");
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать(); СоответствиеРодителей = Новый Соответствие;
	
	// Перенос.
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		Если ПараметрыПереноса.ИсключаяВерхнийУровень Тогда
			ПараметрыПереноса.ИсключаяВерхнийУровень = Ложь;
			Продолжить;
		КонецЕсли;
		
		СправочникРодитель = СоответствиеРодителей[Выборка.Родитель]; 
		Если (СправочникРодитель = Неопределено) Тогда
			СправочникРодитель = ПараметрыПереноса.Родитель;
		КонецЕсли; 
		
		Если Выборка.ЭтоГруппа Тогда
			Если (Справочник = "Меню") Тогда
				СправочникСсылка = Справочники[Справочник].НайтиПоНаименованию(Выборка.Наименование, Истина, СправочникРодитель, ПараметрыПереноса.Владелец);
			Иначе
				СправочникСсылка = Справочники[Справочник].НайтиПоНаименованию(Выборка.Наименование, Истина, СправочникРодитель);
			КонецЕсли; 
		Иначе
			Если (Справочник = "Меню") Тогда
				СправочникСсылка = Справочники[Справочник].НайтиПоРеквизиту("Номенклатура", Выборка.Номенклатура, , ПараметрыПереноса.Владелец);
			Иначе
				СправочникСсылка = Справочники[Справочник].НайтиПоРеквизиту("Номенклатура", Выборка.Номенклатура);
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			Если ПараметрыПереноса.ПеремещатьСуществующие Или Выборка.ЭтоГруппа Тогда
				СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
			Иначе
				Продолжить;
			КонецЕсли; 
		Иначе
			Если Выборка.ЭтоГруппа Тогда
				СправочникОбъект = Справочники[Справочник].СоздатьГруппу();
			Иначе
				СправочникОбъект = Справочники[Справочник].СоздатьЭлемент();
			КонецЕсли; 
		КонецЕсли;
		
		Если (Справочник = "Меню") Тогда
			СправочникОбъект.Владелец = ПараметрыПереноса.Владелец;
		КонецЕсли; 
		СправочникОбъект.Родитель = СправочникРодитель;
		СправочникОбъект.Наименование = Выборка.Наименование;
		СправочникОбъект.Актуальность = Истина;
		Если Не Выборка.ЭтоГруппа Тогда
			СправочникОбъект.Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
		
		СправочникОбъект.Записать();	// ERR
		
		Если Выборка.ЭтоГруппа Тогда
			СоответствиеРодителей[Выборка.Номенклатура] = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();	// ERR
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПеренестиНоменклатуру()

//Костенюк Александр-Старт 16.11.2012
// Процедура удаляет неактуальные элементы справочника
// 
// Параметры
// ТолькоВыделенное - Тип: Булево. Признак удаления только выделенных элементов списка.
// ВыделенныеСтроки - Тип: Массив. Массив из элементов справочника, которые подлежат удалению.
// 
Процедура УдалитьНеактуальные(ТолькоВыделенное, ВыделенныеСтроки = Неопределено) Экспорт
	
	Если ТолькоВыделенное Тогда
		Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтроки Цикл
			СправочникОбъект = ВыделеннаяСтрока.ПолучитьОбъект();
			СправочникОбъект.Удалить();
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Меню.Ссылка
		               |ИЗ
		               |	Справочник.Меню КАК Меню
		               |ГДЕ
		               |	НЕ Меню.Актуальность";
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			// Битые ссылки пропускаем
			Если СправочникОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СправочникОбъект.Удалить();
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры
//Костенюк Александр-Финиш 16.11.2012

//Костенюк Александр-Старт 21.10.2013
// 
// Процедура создает/обновляет автоматическое меню на основании структуры справочника "Номенклатура"
// 
// Параметры:
// Нет.
// 
Процедура ОбновитьАвтоматическоеМеню() Экспорт
	
	// Выборка данных.
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	Номенклатура.Родитель КАК Родитель,
	               |	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	               |	Номенклатура.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления
	               |	И Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
	               |	И Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)
	               |ИТОГИ ПО
	               |	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	СоответствиеРодителей = Новый Соответствие;
	Владелец = Справочники.ВидыМеню.АвтоматическоеМеню;
	Справочник = "Меню";
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникРодитель = СоответствиеРодителей[Выборка.Родитель]; 
		
		Если (СправочникРодитель = Неопределено) Тогда
			СправочникРодитель = Справочники[Справочник].ПустаяСсылка();
		КонецЕсли;
		
		Если Выборка.ЭтоГруппа = Null Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ЭтоГруппа Тогда
			Если (Справочник = "Меню") Тогда
				СправочникСсылка = Справочники[Справочник].НайтиПоНаименованию(Выборка.Наименование, Истина, СправочникРодитель, Владелец);
			Иначе
				СправочникСсылка = Справочники[Справочник].НайтиПоНаименованию(Выборка.Наименование, Истина, СправочникРодитель);
			КонецЕсли; 
		Иначе
			Если (Справочник = "Меню") Тогда
				СправочникСсылка = Справочники[Справочник].НайтиПоРеквизиту("Номенклатура", Выборка.Номенклатура, , Владелец);
			Иначе
				СправочникСсылка = Справочники[Справочник].НайтиПоРеквизиту("Номенклатура", Выборка.Номенклатура);
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		Иначе
			Если Выборка.ЭтоГруппа Тогда
				СправочникОбъект = Справочники[Справочник].СоздатьГруппу();
			Иначе
				СправочникОбъект = Справочники[Справочник].СоздатьЭлемент();
			КонецЕсли; 
		КонецЕсли;
		
		Если (Справочник = "Меню") Тогда
			СправочникОбъект.Владелец = Владелец;
		КонецЕсли; 
		
		СправочникОбъект.Родитель = СправочникРодитель;
		СправочникОбъект.Наименование = Выборка.Наименование;
		СправочникОбъект.Актуальность = Истина;
		
		Если Не Выборка.ЭтоГруппа Тогда
			СправочникОбъект.Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Если Выборка.ЭтоГруппа Тогда
			СоответствиеРодителей[Выборка.Номенклатура] = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//Костенюк Александр-Финиш 21.10.2013

//Костенюк Александр-Старт 28.10.2016
Процедура СоздатьОбновитьСтруктуруМеню(ВидМеню, Период) Экспорт
	
	// Выборка данных.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправочникНоменклатура.Ссылка КАК Номенклатура,
	               |	СправочникНоменклатура.Родитель КАК Родитель,
	               |	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	               |	СправочникНоменклатура.Наименование КАК Наименование,
	               |	СправочникНоменклатура.Архив
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ПО ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка
	               |ГДЕ
	               |	НЕ СправочникНоменклатура.ПометкаУдаления
	               |	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
	               |	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)
	               |	И ЦеныНоменклатуры.Период = &Период
	               |	И ЦеныНоменклатуры.ТипЦены = &ТипЦен
	               |ИТОГИ ПО
	               |	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТипЦен", ВидМеню.ТипЦен);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеРодителей = Новый Соответствие;	Владелец = ВидМеню;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникРодитель = СоответствиеРодителей[Выборка.Родитель];
		
		Если Выборка.Номенклатура.Код = "0000000001" Тогда // корневую папку "Меню Автогриль" не нужно включать в меню
			Продолжить;
		КонецЕсли;
				
		Если (СправочникРодитель = Неопределено) Тогда
			СправочникРодитель = Справочники.Меню.ПустаяСсылка();
		КонецЕсли;
		
		Если Выборка.ЭтоГруппа Тогда
			СправочникСсылка = Справочники.Меню.НайтиПоНаименованию(Выборка.Наименование, Истина, СправочникРодитель, Владелец);
		Иначе
			СправочникСсылка = Справочники.Меню.НайтиПоРеквизиту("Номенклатура", Выборка.Номенклатура, , Владелец);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		Иначе
			Если Выборка.ЭтоГруппа Тогда
				СправочникОбъект = Справочники.Меню.СоздатьГруппу();
			Иначе
				СправочникОбъект = Справочники.Меню.СоздатьЭлемент();
			КонецЕсли; 
		КонецЕсли;
		
		СправочникОбъект.Владелец = Владелец;
		СправочникОбъект.Родитель = СправочникРодитель;
		СправочникОбъект.Наименование = Выборка.Наименование;
		СправочникОбъект.Актуальность = НЕ Выборка.Архив;
				
		Если НЕ Выборка.ЭтоГруппа Тогда
			СправочникОбъект.Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Если Выборка.ЭтоГруппа Тогда
			СоответствиеРодителей[Выборка.Номенклатура] = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выборка данных.
	// Выборка неактуальных позиций путем сравнения текущего меню
	// и нового меню согласно типу цен
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Меню.Номенклатура
	               |ПОМЕСТИТЬ ТаблицаМенюТекущая
	               |ИЗ
	               |	Справочник.Меню КАК Меню
	               |ГДЕ
	               |	Меню.Актуальность
	               |	И Меню.Владелец = &Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СправочникНоменклатура.Ссылка КАК Номенклатура
	               |ПОМЕСТИТЬ ТаблицаМенюНовая
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ПО ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка
	               |ГДЕ
	               |	НЕ СправочникНоменклатура.ПометкаУдаления
	               |	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
	               |	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)
	               |	И ЦеныНоменклатуры.Период = &Период
	               |	И ЦеныНоменклатуры.ТипЦены = &ТипЦен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаМенюТекущая.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	ТаблицаМенюНовая КАК ТаблицаМенюНовая
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаМенюТекущая КАК ТаблицаМенюТекущая
	               |		ПО (ТаблицаМенюТекущая.Номенклатура = ТаблицаМенюНовая.Номенклатура)
	               |ГДЕ
	               |	ТаблицаМенюНовая.Номенклатура ЕСТЬ NULL 
	               |	И НЕ ТаблицаМенюТекущая.Номенклатура ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТипЦен", ВидМеню.ТипЦен);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Деактуализация неактуальных позиций меню
	Пока Выборка.Следующий() Цикл
		
		СправочникСсылка = Справочники.Меню.НайтиПоРеквизиту("Номенклатура", Выборка.Номенклатура, , Владелец);
		
		Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.Актуальность = Ложь;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
//Костенюк Александр-Финиш 28.10.2016
