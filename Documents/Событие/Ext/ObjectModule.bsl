
Перем мТекущаяДата; // Используется при подготовке реквизитов документа, обеспечивая синхронность даты.

Перем мЗаголовок; // Заголовок служебных сообщений.


// Функция возвращает либо переданную дату, либубо текущую если переданное значение не заполнено.
//
Функция ПолучитьНеПустуюДату(Значение, Алетернатива = Неопределено)
	
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Значение) Тогда
		Если (Алетернатива = Неопределено) Тогда
			Возврат мТекущаяДата;
		Иначе
			Возврат Алетернатива;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции // ПолучитьНеПустуюДату()


// Подготавливает (автоматически заполнениет) шапку документа.
//
Процедура ПодготовитьШапку(РежимЗаписи, РежимПроведения)
	
	// ПометкаУдаления.
	Если (ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокДобавление) Или (ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокУдаление) Тогда
		Если (РежимЗаписи = РежимЗаписиДокумента.Запись) Тогда
			Если Не ПометкаУдаления Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
		Иначе
			ПометкаУдаления = (Не РежимЗаписи = РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;
	
	// Текущая дата.
	мТекущаяДата = ТекущаяДата();
	
	// ОснованиеЗавершения.
	Если (Не ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
		ОснованиеЗавершения = Неопределено;
	КонецЕсли;
	
	// Контрагент.
	Если ЗначениеЗаполнено(Основание) Тогда
		Ресторан = Основание.Ресторан;
		Контрагент = Основание.Контрагент;
	Иначе
		Если ЗначениеЗаполнено(ОснованиеЗавершения) Тогда
			Контрагент = ОснованиеЗавершения.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	// Распечатан.
	Распечатан = (Проведен Или (РежимЗаписи = РежимЗаписиДокумента.Проведение)) И (Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);

	// НачалоСобытия.
	Если (ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(НачалоСобытия) Тогда
			НачалоСобытия = Мин(ПолучитьНеПустуюДату(ОкончаниеСобытия), мТекущаяДата);
		КонецЕсли;
	Иначе
		НачалоСобытия = Дата;
	КонецЕсли;
	
	// ОкончаниеСобытия.
	Если (ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
		Если Распечатан И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ОкончаниеСобытия) Тогда
				ОкончаниеСобытия = Макс(ПолучитьНеПустуюДату(НачалоСобытия), мТекущаяДата);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОкончаниеСобытия = Дата;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьШапку()


// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, Заголовок)

	// Обязательные.
	Если (СтруктураОбязательныхПолей = Неопределено) Тогда
		СтруктураОбязательныхПолей = Новый Структура;
	КонецЕсли;
	СтруктураОбязательныхПолей.Вставить("Ответственный");
	СтруктураОбязательныхПолей.Вставить("Ресторан");
	СтруктураОбязательныхПолей.Вставить("НачалоСобытия");
	СтруктураОбязательныхПолей.Вставить("ВидСобытия");
	СтруктураОбязательныхПолей.Вставить("Контрагент");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Дополнительная проверка булевых типов.
	Если СтруктураОбязательныхПолей.Свойство("Распечатан") Тогда
		Если Не Распечатан Тогда
			ОбщегоНазначения.СообщитьОбНезаполненомРеквизитеДокумента(ЭтотОбъект, "Распечатан", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Дополнительная проверка кореляции значений.
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(НачалоСобытия) И ЗначениеЗаполнено(ОкончаниеСобытия) И (НачалоСобытия > ОкончаниеСобытия) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().Реквизиты.НачалоСобытия.Синоним + "» документа «" + Метаданные().Синоним + "» не может быть больше значения реквизита «" + Метаданные().Реквизиты.ОкончаниеСобытия.Синоним + "».", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Основание) И ЗначениеЗаполнено(ОснованиеЗавершения) И ((Не Основание.Распечатан) Или (Не ОснованиеЗавершения.Распечатан)) И (Не Основание.Контрагент = ОснованиеЗавершения.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Контрагенты основания «" + СокрЛП(Основание) + "» и основания завершения «" + СокрЛП(ОснованиеЗавершения) + "» не совпадают.", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка уникальности события по основанию.
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(Основание) И (Не ПометкаУдаления) И (ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	Событие.Ссылка
			                      |ИЗ
			                      |	Документ.Событие КАК Событие
			                      |ГДЕ
			                      |	Событие.Основание = &Основание
			                      |	И (НЕ Событие.Ссылка = &Ссылка)
			                      |	И Событие.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыСобытий.Прочее)
			                      |	И (НЕ Событие.ПометкаУдаления)");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);					  
			Запрос.УстановитьПараметр("Основание", Основание);					  
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначения.СообщитьОбОшибке("По документу «" + Основание + "» уже существует событие «" + РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка").Получить(0) + "».", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


// Выполняет движения документа по регистрам состояний.
//
Процедура ДвиженияПоРегистрамСостояний(РежимПроведения, Отказ, Заголовок);

	// Состояние событий.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеСобытий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не Проведен) И (Не ПометкаУдаления) И (ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
			НаборЗаписей.Прочитать();
			Если Булево(НаборЗаписей.Количество()) Тогда
				Запись = НаборЗаписей[0];
			Иначе
				Запись = НаборЗаписей.Добавить();
			КонецЕсли;
			
			Запись.Дата = НачалоСобытия;
			Запись.Документ = Ссылка;
			Запись.Контрагент = Контрагент;
			Запись.ГруппаСобытия = ГруппаСобытия;
			Запись.Основание = Основание;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
	
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамСостояний()

// Выполняет движения документа по регистрам учета.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
	
	// ЧерныйСписокКонтрагентов.
	Если Не Отказ Тогда
		Движения.ЧерныйСписокКонтрагентов.Очистить();
		
		Если (ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокДобавление) Или (ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокУдаление) Тогда
			Движение = Движения.ЧерныйСписокКонтрагентов.Добавить();
			Движение.Период = Дата;
			Движение.Контрагент = Контрагент;
			Движение.Актуальность = (ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокДобавление);
			Движение.ГруппаСобытия = ГруппаСобытия;
		КонецЕсли;
		
		Попытка
			Движения.ЧерныйСписокКонтрагентов.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.ЧерныйСписокКонтрагентов, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Выполняет удаление движения документа по регистрам учета.
//
Процедура УдалениеДвиженияПоРегистрам(Отказ, Заголовок)
	
КонецПроцедуры // УдалениеДвиженияПоРегистрам()


// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Удаляем значения некопируемых реквизитов шапки.
	Если Не ОбъектКопирования.ПометкаУдаления Тогда
		НачалоСобытия = Неопределено;
		ОкончаниеСобытия = Неопределено;
		Если (ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
			Основание = Неопределено;
		КонецЕсли;
		Распечатан = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриКопировании()

// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(Основание)
	
	// Структура.
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание.Свойство("Ресторан", Ресторан);
		Основание.Свойство("ВидСобытия", ВидСобытия);
		Основание.Свойство("Контрагент", Контрагент);
		Основание.Свойство("Основание", ЭтотОбъект.Основание);
		Основание.Свойство("ГруппаСобытия", ГруппаСобытия);
		Основание.Свойство("Комментарий", Комментарий);
	КонецЕсли;
	
	// ВидыСобытий.
	Если ТипЗнч(Основание) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		
		ВидСобытия = Основание;

	КонецЕсли;
	
	// Контрагенты.
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Не Основание.ЭтоГруппа Тогда
			
			Контрагент = Основание;
			
		КонецЕсли;
	КонецЕсли;

	// Событие.
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		
		Ресторан = Основание.Ресторан;
		Если (Основание.ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокДобавление) Тогда
			ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокУдаление;
		КонецЕсли;
		Если (Основание.ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокУдаление) Тогда
			ВидСобытия = Перечисления.ВидыСобытий.ЧерныйСписокДобавление;
		КонецЕсли;
		Если (Основание.ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
			ВидСобытия = Основание.ВидСобытия;
		КонецЕсли;
		Контрагент = Основание.Контрагент;
		Если (Основание.ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
			ГруппаСобытия = Основание.ГруппаСобытия;
		КонецЕсли;
		
	КонецЕсли;
	
	// РеализацияТоваровУслуг.
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Ресторан = Основание.Ресторан;
		Контрагент = Основание.Контрагент;
		ЭтотОбъект.Основание = Основание;
		
	КонецЕсли;
	
	// Заполнение значений по умолчанию.
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Нормализация.
	ПодготовитьШапку(РежимЗаписи, РежимПроведения);
	
	Состояние = УправлениеЗаказами.ПолучитьСостояниеДокумента(ЭтотОбъект, РежимЗаписи);
	
	// Проверка заполнения реквизитов.
	мЗаголовок = Строка(РежимЗаписи) + " документа «" + СокрЛП(ЭтотОбъект) + "»: ";
	
	// Проверка заполнения реквизитов шапки.
	СтруктураОбязательныхПолей = Новый Структура;
	Если Распечатан Тогда
		СтруктураОбязательныхПолей.Вставить("ОкончаниеСобытия");
		Если (ВидСобытия = Перечисления.ВидыСобытий.Прочее) Тогда
			СтруктураОбязательныхПолей.Вставить("ГруппаСобытия");
		КонецЕсли;
	КонецЕсли;
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		СтруктураОбязательныхПолей.Вставить("Распечатан");
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, мЗаголовок);

КонецПроцедуры // ПередЗаписью()

// Обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Движения документа.
	ДвиженияПоРегистрамСостояний(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);

КонецПроцедуры // ПриЗаписи()

// Обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Движения документа.
	ДвиженияПоРегистрам(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Удаление движений документа.
	УдалениеДвиженияПоРегистрам(Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()
