////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ОбработкаКоманды(МассивРассылок, Параметры)
	Если ТипЗнч(МассивРассылок) <> Тип("Массив") ИЛИ МассивРассылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма = Параметры.Источник;
	
	ПредварительныеНастройки = Неопределено;
	Если ЭтаФорма.ИмяФормы = "Справочник.РассылкиОтчетов.Форма.ФормаЭлемента" Тогда
		ТекстСообщения = НСтр("ru = 'Выполняется рассылка отчетов'");
		
		Объект = ЭтаФорма.Объект;
		Если НЕ Объект.Подготовлена Тогда
			Предупреждение(НСтр("ru = 'Рассылка не подготовлена'"));
			Возврат;
		КонецЕсли;
		
		Если Объект.ИспользоватьЭлектроннуюПочту Тогда
			//Получатели = РассылкаОтчетовКлиент.ВыбратьПолучателя(Объект, Истина, Истина);
			Получатели = ВыбратьПолучателя(Объект, Истина, Истина);
			Если Получатели = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПредварительныеНастройки = Новый Структура("Получатели", Получатели);
		КонецЕсли;
	Иначе
		//ТекстСообщения = НСтр("ru = 'Выполняются рассылки отчетов'");
		
		ТекстСообщения = НСтр("ru = 'Выполнять рассылку необходимо из формы элемента справочника!'; uk = 'Виконувати розсилку необхідно з форми елемента довідника!'");
		Предупреждение(ТекстСообщения, 5);
		Возврат;
		
	КонецЕсли;
	
	Состояние(ТекстСообщения, , , );
	
	ПараметрыВызоваСервера = Новый Структура("МассивРассылок, ПредварительныеНастройки",
		МассивРассылок,
		ПредварительныеНастройки
	);
	
	Результат = ВыполнитьРассылкиВФоновомЗадании(ПараметрыВызоваСервера, ЭтаФорма.УникальныйИдентификатор);
	
	Если Результат.Статус = "ВыполненоУспешно" Тогда
		РассылкаОтчетовКлиент.ПоказатьРезультат(Результат.Детали);
	ИначеЕсли Результат.Статус = "Исключение" Тогда
		Предупреждение(
			НСтр("ru = 'Рассылки не выполнены из-за ошибки,
			|Подробности см. в журнале регистрации.'")
		);
	ИначеЕсли Результат.Статус = "Выполняется" Тогда
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, Результат.Детали.ИдентификаторЗадания);
		
		ПараметрыОбработчика = Неопределено;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		
		ЭтаФорма.ПараметрыФоновогоЗадания.Очистить();
		ЭтаФорма.ПараметрыФоновогоЗадания.Добавить(Результат.Детали.ИдентификаторЗадания);
		ЭтаФорма.ПараметрыФоновогоЗадания.Добавить(Результат.Детали.АдресХранилища);
		ЭтаФорма.ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработчика);
		ЭтаФорма.ПараметрыФоновогоЗадания.Добавить(ФормаДлительнойОперации);
		
		ЭтаФорма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ВыполнитьРассылкиВФоновомЗадании(ПараметрыВызоваСервера, Знач УникальныйИдентификатор)
	Результат = Новый Структура("Статус, Детали");
	
	Попытка
		Если __ОбщегоНазначенияСервер.ИнформационнаяБазаФайловая() Тогда
			РезультатФоновогоЗадания = Новый Структура("ЗаданиеВыполнено, АдресХранилища");
			РезультатФоновогоЗадания.ЗаданиеВыполнено = Истина;
			РезультатФоновогоЗадания.АдресХранилища   = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
			РассылкаОтчетов.ВыполнитьРассылкиВФоновомЗадании(ПараметрыВызоваСервера, РезультатФоновогоЗадания.АдресХранилища);
		Иначе
			РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"РассылкаОтчетов.ВыполнитьРассылкиВФоновомЗадании", 
				ПараметрыВызоваСервера, 
				НСтр("ru = 'Рассылки отчетов: Выполнение рассылок в фоне'")
			);
		КонецЕсли;
		
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			Результат.Статус = "ВыполненоУспешно"; // Не локализуется
			Результат.Детали = ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища);
		Иначе
			Результат.Статус = "Выполняется"; // Не локализуется
			Результат.Детали = Новый Структура("ИдентификаторЗадания, АдресХранилища");
			ЗаполнитьЗначенияСвойств(Результат.Детали, РезультатФоновогоЗадания);
		КонецЕсли;
	Исключение
		Результат.Статус = "Исключение"; // Не локализуется
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
// Формирует список получателей рассылки, предлагает пользователю выбрать
//   конкретного получателя или всех получателей рассылки и возвращает
//   результат выбора пользователя.
//
Функция ВыбратьПолучателя(Объект, МножественныйВыбор = Истина, ВозвращатьСоответствие = Истина, ЗаголовокДляОшибок = "") Экспорт
	
	Если Объект.Личная = Истина Тогда
		НаборПараметров = "Ссылка, ВидПочтовогоАдресаПолучателей, Личная, Автор";
	Иначе	
		НаборПараметров = "Ссылка, ВидПочтовогоАдресаПолучателей, Личная, ТипПолучателейРассылки, Получатели";
	КонецЕсли;
	
	ПараметрыПолучателей = Новый Структура(НаборПараметров);
	ЗаполнитьЗначенияСвойств(ПараметрыПолучателей, Объект);
	РезультатРаботыСервера = СформироватьСписокПолучателейРассылки(ПараметрыПолучателей);
	
	Получатели = РезультатРаботыСервера.Получатели;
	ТекстОшибок = РезультатРаботыСервера.ТекстОшибок;
	Заголовок = НСтр("ru = 'Выбор получателя'");
	
	Если Получатели.Количество() = 0 Тогда
		Результат = Новый Структура("Оповестить, Заголовок, Текст, ТекстОшибок");
		Результат.Оповестить = Ложь;
		Результат.ТекстОшибок = ТекстОшибок;
		Результат.Заголовок = Заголовок;
		Результат.Текст = НСтр("ru = 'Не удалось сформировать список получателей'");
		ПоказатьРезультат(Результат);
		Возврат Неопределено;
	КонецЕсли;
	
	ВозможныеПолучатели = Новый СписокЗначений;
	Если МножественныйВыбор Тогда
		ВозможныеПолучатели.Добавить(Неопределено, НСтр("ru = 'Всем получателям'"));
	КонецЕсли;
	Для Каждого КлючИЗначение Из Получатели Цикл
		ВозможныеПолучатели.Добавить(КлючИЗначение.Ключ, Строка(КлючИЗначение.Ключ) +" <"+ КлючИЗначение.Значение +">");
	КонецЦикла;
	
	Если Объект.Личная И ВозможныеПолучатели.Количество() = 1 Тогда
		ВыбранноеЗначение = ВозможныеПолучатели[0];
	Иначе
		ВыбранноеЗначение = ВозможныеПолучатели.ВыбратьЭлемент(Заголовок);
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозвращатьСоответствие Тогда
		Если ВыбранноеЗначение.Значение = Неопределено Тогда
			Результат = Получатели;
		Иначе
			Результат = Новый Соответствие;
			Результат.Вставить(ВыбранноеЗначение.Значение, Получатели[ВыбранноеЗначение.Значение]);
		КонецЕсли;
	Иначе
		Результат = Новый Структура("Получатель, ПочтовыйАдрес", ВыбранноеЗначение.Значение, Получатели[ВыбранноеЗначение.Значение]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
// Для внутреннего использования
//
Функция СформироватьСписокПолучателейРассылки(Знач Параметры) Экспорт
	ПараметрыЖурнала = Новый Структура("ИмяСобытия, Метаданные, Данные, МассивОшибок, БылиОшибки");
	ПараметрыЖурнала.ИмяСобытия   = НСтр("ru = 'Рассылка отчетов. Формирование списка получателей'");
	ПараметрыЖурнала.МассивОшибок = Новый Массив;
	ПараметрыЖурнала.БылиОшибки   = Ложь;
	ПараметрыЖурнала.Данные       = Параметры.Ссылка;
	ПараметрыЖурнала.Метаданные   = Метаданные.Справочники.РассылкиОтчетов;
	
	Результат = Новый Структура("Получатели, ТекстОшибок", , "");
	Результат.Получатели = СформироватьСписокПолучателейРассылкиСервер(Параметры);
	
	Если ПараметрыЖурнала.БылиОшибки = Истина Тогда
		Результат.ТекстОшибок = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(ПараметрыЖурнала.МассивОшибок, Ложь);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
// Выводит пользователю результат выполнения какой-либо операции, при необходимости
//   оповещает об изменении типа или ссылки.
//
Процедура ПоказатьРезультат(Результат) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить  = ?(Результат.Свойство("Оповестить"),  Результат.Оповестить,  Истина);
	Заголовок   = ?(Результат.Свойство("Заголовок"),   Результат.Заголовок,   "");
	Текст       = ?(Результат.Свойство("Текст"),       Результат.Текст,       "");
	Картинка    = ?(Результат.Свойство("Картинка"),    Результат.Картинка,    БиблиотекаКартинок.ВыполнитьЗадачу);
	ТекстОшибок = ?(Результат.Свойство("ТекстОшибок"), Результат.ТекстОшибок, "");
	
	Если Оповестить = Истина Тогда
		ПоказатьОповещениеПользователя(Заголовок, , Текст, Картинка);
	Иначе
		Если ЗначениеЗаполнено(ТекстОшибок) Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru = 'Показать ошибки'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			Ответ = Вопрос(Текст, Кнопки, , 1, Заголовок);
			
			Если Ответ = 1 Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.УстановитьТекст(ТекстОшибок);
				Если ЗначениеЗаполнено(Заголовок) Тогда
					ТекстовыйДокумент.Показать(Заголовок);
				Иначе
					ТекстовыйДокумент.Показать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Предупреждение(Текст);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ТипДляОбновления") Тогда
		ОповеститьОбИзменении(Результат.ТипДляОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Формирует список получателей из табличной части "Получатели" рассылки.
//
// Параметры:
//   Рассылка (СправочникСсылка.РассылкиОтчетов, Структура) Элемент справочника, для которого необходимо сформировать список получателей
//
// Возвращаемое значение: 
//   Результат (Структура)
//       |- Получатели (Соответствие) см. функцию ВыполнитьРассылку, параметр ПараметрыДоставки.Получатели
//       |- Ошибки (Строка) Ошибки, которые возникли в процессе
//
Функция СформироватьСписокПолучателейРассылкиСервер(Рассылка) Экспорт
	
	ВидКИ = Рассылка.ВидПочтовогоАдресаПолучателей;
	
	Если Рассылка.Личная Тогда
		
		РеквизитыТЧ = Метаданные.Справочники.РассылкиОтчетов.ТабличныеЧасти.Получатели.Реквизиты;
		
		ТипПолучателей = ТипЗнч(Рассылка.Автор);
		ТаблицаПолучателей = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из РеквизитыТЧ Цикл
			ТаблицаПолучателей.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		ТаблицаПолучателей.Добавить().Получатель = Рассылка.Автор;
		
	Иначе
		
		ТипПолучателей = Рассылка.ТипПолучателейРассылки.КлючОбъектаМетаданных.Получить();
		ТаблицаПолучателей = Рассылка.Получатели.Выгрузить();
		
	КонецЕсли;
	
	СписокПолучателей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаПолучателей.Получатель,
	               |	ТаблицаПолучателей.Исключен
	               |ПОМЕСТИТЬ втТаблицаПолучателей
	               |ИЗ
	               |	&ТаблицаПолучателей КАК ТаблицаПолучателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Контрагенты.Ссылка КАК Получатель,
	               |	КонтактнаяИнформация.Представление КАК EMail
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ПО Контрагенты.Ссылка = КонтактнаяИнформация.Объект
	               |			И (КонтактнаяИнформация.Вид = &ВидКИ)
	               |ГДЕ
	               |	Контрагенты.Ссылка В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				Получатели.Получатель
	               |			ИЗ
	               |				втТаблицаПолучателей КАК Получатели
	               |			ГДЕ
	               |				Получатели.Исключен = ЛОЖЬ)
	               |	И НЕ Контрагенты.Ссылка В ИЕРАРХИИ
	               |				(ВЫБРАТЬ
	               |					ИсключенияПолучателей.Получатель
	               |				ИЗ
	               |					втТаблицаПолучателей КАК ИсключенияПолучателей
	               |				ГДЕ
	               |					ИсключенияПолучателей.Исключен = ИСТИНА)
	               |	И НЕ Контрагенты.ПометкаУдаления
	               |	И &ЭтоНеГруппа";
	
	УстановитьПривилегированныйРежим(Истина);
	ПолучателиМД = Метаданные.НайтиПоТипу(ТипПолучателей);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ПолучателиМД.Иерархический Тогда
		// Не иерархический
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "В ИЕРАРХИИ", "В");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "");
	ИначеЕсли ПолучателиМД.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
		// Иерархия элементов
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "");
	Иначе
		// Иерархия групп
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "И Контрагенты.ЭтоГруппа = ЛОЖЬ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаПолучателей", ТаблицаПолучателей);
	Если ЗначениеЗаполнено(ВидКИ) Тогда
		Запрос.УстановитьПараметр("ВидКИ", ВидКИ);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Вид = &ВидКИ", ".Тип = &ТипКИ");
		Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	ШаблонСообщенияОбОшибке = НСтр("ru = 'При формировании списка получателей ""%1"" возникла ошибка:'");
	
	// Механизм расширения
	Попытка
		СтандартнаяОбработка = Истина;
		РассылкаОтчетовПереопределяемый.ПередФормированиемСпискаПолучателейРассылки(Рассылка, Запрос, СтандартнаяОбработка, СписокПолучателей);
		Если СтандартнаяОбработка <> Истина Тогда
			Возврат СписокПолучателей;
		КонецЕсли;
	Исключение
		//ЗаписьЖурнала(ПараметрыЖурнала, ,
		//	ШаблонСообщенияОбОшибке, ИнформацияОбОшибке(),
		//	Строка(ТипПолучателей)
		//);
		//Возврат СписокПолучателей;
	КонецПопытки;
	
	// Стандартная обработка
	Попытка
		ТЗИтог = Запрос.Выполнить().Выгрузить();
	Исключение
		//ЗаписьЖурнала(ПараметрыЖурнала, ,
		//	ШаблонСообщенияОбОшибке, ИнформацияОбОшибке(),
		//	Строка(ТипПолучателей)
		//);
		//Возврат СписокПолучателей;
	КонецПопытки;
	
	Для Каждого СтрИтог Из ТЗИтог Цикл
		Если НЕ ЗначениеЗаполнено(СтрИтог.EMail) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийАдрес = СписокПолучателей.Получить(СтрИтог.Получатель);
		Если ТекущийАдрес = Неопределено Тогда
			СписокПолучателей.Вставить(СтрИтог.Получатель, СтрИтог.EMail);
		Иначе
			Если Найти(ВРег(ТекущийАдрес), ВРег(СтрИтог.EMail)) = 0 Тогда
				СписокПолучателей.Вставить(СтрИтог.Получатель, ТекущийАдрес +"; "+ СтрИтог.EMail);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПолучателей.Количество() = 0 Тогда
		ТекстОшибок = НСтр("ru = 'Не удалось сформировать список получателей %1 рассылки %2 по одной из возможных причин:
		| - У получателей не заполнен почтовый адрес %3
		| - Не заполнен список получателей
		| - Выбраны пустые группы получателей
		| - Получатели помечены на удаление
		| - Недостаточно прав доступа к справочнику'");
		
		//ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
		//	ТекстОшибок, "",
		//	"'"+ Строка(ТипПолучателей) +"'",
		//	"'"+ Строка(ПараметрыЖурнала.Данные) +"'",
		//	"'"+ Строка(ВидКИ) +"'"
		//);
	КонецЕсли;
	
	Возврат СписокПолучателей;
КонецФункции // СформироватьСписокПолучателейРассылки()
