


// Чистяков Павел 01.10.2010 14:53:25 
Процедура ДеревоПравилПрочитать(ДеревоПравил, ВладелецПравилИспользования, ДопустимыеТипыИспользования, Элемент, Принудительно = Ложь) Экспорт
	
	// Проверка заполнялись ли уже данные.
	Если Не(ЗначениеЗаполнено(Принудительно) И Принудительно)
		И (Не ДеревоПравил.Строки.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПравил.Строки.Очистить();
	
	Если (ДеревоПравил.Колонки.Найти("Актуальность")=Неопределено) Тогда
		ДеревоПравил.Колонки.Добавить("Актуальность", Новый ОписаниеТипов("Булево"), "Объекты");
	КонецЕсли;
	
	// Перенос и настройка колонок.
	Элемент.СоздатьКолонки();
	Элемент.Колонки.Актуальность.ДанныеФлажка	= Элемент.Колонки.Актуальность.Данные;
	Элемент.Колонки.Актуальность.Данные			= Неопределено;
	Элемент.Колонки.Актуальность.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	Элемент.Колонки.Актуальность.Ширина			= 10;
	
	// Добавление служебных колонок.
	Если (ДеревоПравил.Колонки.Найти("Наименование")=Неопределено) Тогда
		ДеревоПравил.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если (ДеревоПравил.Колонки.Найти("ОбъектИспользования")=Неопределено) Тогда
		ДеревоПравил.Колонки.Добавить("ОбъектИспользования",ДопустимыеТипыИспользования);
	КонецЕсли;
	Если (ДеревоПравил.Колонки.Найти("ЭтоТип")=Неопределено) Тогда
		ДеревоПравил.Колонки.Добавить("ЭтоТип");
	КонецЕсли;
	Если (ДеревоПравил.Колонки.Найти("ЭтоВладелец")=Неопределено) Тогда
		ДеревоПравил.Колонки.Добавить("ЭтоВладелец");
	КонецЕсли;
	Если (ДеревоПравил.Колонки.Найти("ЭтоГруппа") = Неопределено) Тогда
		ДеревоПравил.Колонки.Добавить("ЭтоГруппа");
	КонецЕсли;
	
	ТаблицаРезультатаЗапроса = Новый ТаблицаЗначений();
	ТаблицаРезультатаЗапроса.Колонки.Добавить("ОбъектИспользования");
	
	// Заполнение данных.
	Для Каждого ДопустимыйТипы Из ДопустимыеТипыИспользования.Типы() Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ДопустимыйТипы);
		Если Не Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		КорневаяСтрокаТипа		= ДеревоПравил.Строки.Добавить();
		КорневаяСтрокаТипа.Наименование			= ОбъектМетаданных.Синоним;
		КорневаяСтрокаТипа.ОбъектИспользования	= Справочники[ОбъектМетаданных.Имя].ПустаяСсылка();
		КорневаяСтрокаТипа.ЭтоТип				= Истина;
		КорневаяСтрокаТипа.ЭтоВладелец			= Ложь;
		КорневаяСтрокаТипа.ЭтоГруппа			= Ложь;
		КорневаяСтрокаТипа.Актуальность			= Истина;
		
		Если (ОбъектМетаданных.Владельцы.Количество() = 0) Тогда
			Если (ОбъектМетаданных.Иерархический) Тогда
				Если (ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов) Тогда
					ТекстЗапроса = "ВЫБРАТЬ ЛОЖЬ КАК ЭтоГруппа, Справочник.Ссылка, Справочник.Наименование КАК Наименование, Справочник.Родитель ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник ГДЕ НЕ Справочник.ПометкаУдаления УПОРЯДОЧИТЬ ПО Ссылка ИЕРАРХИЯ, Наименование";
				Иначе
					ТекстЗапроса = "ВЫБРАТЬ Справочник.ЭтоГруппа, Справочник.Ссылка, Справочник.Наименование КАК Наименование, Справочник.Родитель ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник ГДЕ НЕ Справочник.ПометкаУдаления УПОРЯДОЧИТЬ ПО ЭтоГруппа ИЕРАРХИЯ, Наименование";
				КонецЕсли;
			Иначе
				ТекстЗапроса = "ВЫБРАТЬ Справочник.Ссылка, Справочник.Наименование КАК Наименование ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник ГДЕ НЕ Справочник.ПометкаУдаления УПОРЯДОЧИТЬ ПО Наименование";
			КонецЕсли;
		Иначе
			Если (ОбъектМетаданных.Иерархический) Тогда
				Если (ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов) Тогда
					ТекстЗапроса = "ВЫБРАТЬ ЛОЖЬ КАК ЭтоГруппа, Справочник.Ссылка, Справочник.Наименование КАК Наименование, Справочник.Родитель, Справочник.Владелец ИЗ Справочник.Номенклатура" + ОбъектМетаданных.Имя + " КАК Справочник ГДЕ НЕ Справочник.ПометкаУдаления УПОРЯДОЧИТЬ ПО Владелец.Представление, Ссылка ИЕРАРХИЯ, Наименование";
				Иначе
					ТекстЗапроса = "ВЫБРАТЬ Справочник.ЭтоГруппа, Справочник.Ссылка, Справочник.Наименование КАК Наименование, Справочник.Родитель, Справочник.Владелец ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник ГДЕ НЕ Справочник.ПометкаУдаления УПОРЯДОЧИТЬ ПО Владелец.Представление, ЭтоГруппа ИЕРАРХИЯ, Наименование";
				КонецЕсли;
			Иначе
				ТекстЗапроса = "ВЫБРАТЬ Справочник.Ссылка, Справочник.Наименование КАК Наименование, Справочник.Владелец ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник ГДЕ НЕ Справочник.ПометкаУдаления УПОРЯДОЧИТЬ ПО Владелец.Представление, Наименование";
			КонецЕсли;
		КонецЕсли;
	
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		Выборка = РезультатЗапроса.Выбрать();
		Если (ОбъектМетаданных.Иерархический) Тогда
			Пока Выборка.Следующий() Цикл
				Если Выборка.Родитель.Пустая() Тогда
					СтрокаГруппы = КорневаяСтрокаТипа;
					Если (Не ОбъектМетаданных.Владельцы.Количество() = 0) Тогда
						СтрокаГруппы = СтрокаГруппы.Строки.Найти(Выборка.Владелец, "ОбъектИспользования", Истина);
						Если (СтрокаГруппы = Неопределено) Тогда
							СтрокаЭлемент				= КорневаяСтрокаТипа.Строки.Добавить();
							СтрокаЭлемент.Наименование	= Строка(Выборка.Владелец);
							СтрокаЭлемент.ОбъектИспользования = Выборка.Владелец;
							СтрокаЭлемент.ЭтоТип		= Ложь;
							СтрокаЭлемент.ЭтоВладелец	= Истина;
							СтрокаЭлемент.ЭтоГруппа		= Ложь;
							СтрокаЭлемент.Актуальность	= Истина;
							СтрокаГруппы				= СтрокаЭлемент;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтрокаГруппы = ДеревоПравил.Строки.Найти(Выборка.Родитель, "ОбъектИспользования", Истина);
				КонецЕсли;		
				
				// Администратор 18.02.2012 14:13:36 
				// Была ошибка когда СтрокаЭлемента=Неопределено
				Если СтрокаГруппы<>неопределено Тогда
					СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
					СтрокаЭлемент.Наименование			= Выборка.Наименование;
					СтрокаЭлемент.ОбъектИспользования	= Выборка.Ссылка;
					СтрокаЭлемент.ЭтоТип				= Ложь;
					СтрокаЭлемент.ЭтоВладелец			= Ложь;
					СтрокаЭлемент.ЭтоГруппа				= Выборка.ЭтоГруппа;
					СтрокаТаблицыЗначений = ТаблицаРезультатаЗапроса.Найти(СтрокаЭлемент.ОбъектИспользования, "ОбъектИспользования");
					СтрокаЭлемент.Актуальность			= (СтрокаТаблицыЗначений = Неопределено) Или СтрокаТаблицыЗначений.Актуальность;
				КонецЕсли; 
				
			КонецЦикла;
			
		Иначе
			
			Пока Выборка.Следующий() Цикл
				СтрокаГруппы = КорневаяСтрокаТипа;
				Если (Не ОбъектМетаданных.Владельцы.Количество() = 0) Тогда
					СтрокаГруппы = СтрокаГруппы.Строки.Найти(Выборка.Владелец, "ОбъектИспользования", Истина);
					Если (СтрокаГруппы = Неопределено) Тогда
						СтрокаЭлемент = КорневаяСтрокаТипа.Строки.Добавить();
						СтрокаЭлемент.Наименование = Строка(Выборка.Владелец);
						СтрокаЭлемент.ОбъектИспользования = Выборка.Владелец;
						СтрокаЭлемент.ЭтоТип = Ложь;
						СтрокаЭлемент.ЭтоВладелец = Истина;
						СтрокаЭлемент.ЭтоГруппа = Ложь;
						СтрокаЭлемент.Актуальность = Истина;
						СтрокаГруппы = СтрокаЭлемент;
					КонецЕсли;
				КонецЕсли;
				СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
				СтрокаЭлемент.Наименование = Выборка.Наименование;
				СтрокаЭлемент.ОбъектИспользования = Выборка.Ссылка;
				СтрокаЭлемент.ЭтоТип = Ложь;
				СтрокаЭлемент.ЭтоВладелец = Ложь;
				СтрокаЭлемент.ЭтоГруппа = Ложь;
				СтрокаТаблицыЗначений = ТаблицаРезультатаЗапроса.Найти(СтрокаЭлемент.ОбъектИспользования, "ОбъектИспользования");
				СтрокаЭлемент.Актуальность = (СтрокаТаблицыЗначений = Неопределено) Или СтрокаТаблицыЗначений.Актуальность;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры




// Процедура переносит строку из таблицы в Структуру
Процедура ПеренестиСтрокуТаблицыВСтруктуру(Таблица, СтрокаТаблицы, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ СтрокаТаблицы = Неопределено 
		ИЛИ Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из Таблица.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры
                   
// Процедура переносит строку из запроса в Структуру
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры





// Процедура назначает макет по умолчанию
//
Функция НазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, ИмяМетаданных) Экспорт
	
	СтрокаПоУмолчанию = УниверсальныеМеханизмы.ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	СписокМакетов = Новый СписокЗначений;
	
	Для каждого Строка Из ДеревоМакетов.Строки Цикл
	
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Не Строка.Расшифровка = "ПечатьПоУмолчанию" Тогда
			
			СписокМакетов.Добавить(Строка.Текст,,СтрокаПоУмолчанию = Строка);
			
		КонецЕсли; 
		
	
	КонецЦикла; 
	
	ФормаВыбораПечатнойФормыПоУмолчанию = ПолучитьОбщуюФорму("ФормаВыбораПечатнойФормыПоУмолчанию");
	ФормаВыбораПечатнойФормыПоУмолчанию.СписокВыбораПечатнойФормы = СписокМакетов;
	
	МакетПоУмолчанию = ФормаВыбораПечатнойФормыПоУмолчанию.ОткрытьМодально();
	
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", Ложь);
		
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции



// Процедура инициализирует параметры обработки поиска по строке
Процедура ИнициализироватьПараметрыОбработкиПоискаПоСтроке(ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке) Экспорт
	
	ОбработкаПоискаПоСтроке                 = Ложь;
	ТекстПоискаПоСтроке                     = "";
	ПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено;
    	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()
      
// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//  Форма    - форма проверяемого документа
//
Функция ПроверитьМодифицированностьВФорме(Документ, Форма) Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен    = Метаданные.Документы.Содержит(Документ.Метаданные()) И Документ.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");
		
		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ СтрПроведен +".
		               |Записать" + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Проведен Тогда
				
				Попытка

					Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				
				Попытка
					
					Форма.ЗаписатьВФорме();
					
				Исключение
					
					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;
					
				КонецПопытки;
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ПОИСКА ПО СТРОКЕ В ПОЛЕ ВВОДА

// Функция формирует ограничение для запроса по полю 
Функция СформироватьОграничениеПоПолюВхождениеВНачало(ИмяПоля, ТипЗначенияПоиска) Экспорт
	
	Ограничение = ИмяПоля + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло"));
	Возврат "(" + Ограничение + ") ";
	
КонецФункции

//Функция Определяет тип ограничений по полю
Функция ОпределитьТипОграниченийПоПолю(ИмяЭлемента, МетаданныеОбъекта, ДляСправочника = Истина)
	
	Если ДляСправочника Тогда
		
		Если ИмяЭлемента <> "Наименование" И ИмяЭлемента <> "Код" Тогда
	    	ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ИмяЭлемента].Тип.Типы()[0];
		Иначе
			Если ИмяЭлемента = "Наименование" Тогда
				ТипЗначенияПоиска = Тип("Строка");
			Иначе
				Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
					ТипЗначенияПоиска = Тип("Строка");
				Иначе
					ТипЗначенияПоиска = Тип("Число");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	Иначе
		// тип определяем для регистра сведений
		Объект = МетаданныеОбъекта.Измерения.Найти(ИмяЭлемента);
		Если Объект = Неопределено Тогда
			Объект = МетаданныеОбъекта.Ресурсы.Найти(ИмяЭлемента);
		КонецЕсли;
		Если Объект = Неопределено Тогда
			Объект = МетаданныеОбъекта.Реквизиты.Найти(ИмяЭлемента);
			Если Объект = Неопределено Тогда
				ТипЗначенияПоиска = Тип("Строка");
			КонецЕсли;	
		КонецЕсли;
		ТипЗначенияПоиска = Объект.Тип.Типы()[0];
		
	КонецЕсли;
	
	Возврат  ТипЗначенияПоиска;
	
КонецФункции

// Функция создает объект запрос и устанавливает у него параметры ТекстАвтоПодбора и ТекстАвтоПодбораЧисло
// убирает лишние символы в строке поиска
Функция  СоздатьЗапросДляСпискаАвтоподбора(СтрокаПоиска, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений)
	
	Запрос = Новый Запрос;
	
	СтрокаПоиска = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска);
		
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (СтрокаПоиска + "%"));
	Попытка
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(СтрокаПоиска));
	Исключение
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
	КонецПопытки;
	
	// Устанавливает ограничения
	СтрокаОтборовПоСтруктуре = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Ключ 	 = ЭлементСтруктуры.Ключ;
        Значение = ЭлементСтруктуры.Значение;

		Запрос.УстановитьПараметр(Ключ, Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
		|		И
		|		" + ИмяТаблицыОграничений + "." + Ключ + " В (&"+ Ключ + ")";
	КонецЦикла; 
	
	Возврат Запрос;
	
КонецФункции

// функция по типу возвращает наименование ветки метаданных
Функция ПолучитьВеткуМетаданныхПоТипу(ТипДанных)
	
	ВеткаМетаданных = "";
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "Справочник"
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланВидовРасчета"
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланВидовХарактеристик"
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланСчетов"
	КонецЕсли;
	
	Возврат ВеткаМетаданных;

КонецФункции


// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода видв контактной информации, по которому необходимо строить поиск
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаАвтоподбора(Знач Текст, СтруктураПараметров, ТипСправочника, КоличествоЭлементов) Экспорт
    	
	ВеткаМетаданных = ПолучитьВеткуМетаданныхПоТипу(ТипСправочника);
	Если ВеткаМетаданных = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПустаяСсылкаТипа = Новый(ТипСправочника);

	МетаданныеОбъекта = ПустаяСсылкаТипа.Метаданные();
	
	КоллекцияПоискаПоПодстроке = МетаданныеОбъекта.ВводПоСтроке;
	Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяТаблицыСправочника = МетаданныеОбъекта.Имя;
	ИмяТаблицыОграничений = ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса", "ТаблицаСправочника");
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений);
	
	СтрокаПолей = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
	|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
	|";
	
	Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Наименование КАК Наименование,";
	КонецЕсли;
	
	Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Код КАК Код,";
	КонецЕсли; 
	
	Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
		
		ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
		ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ЭлементКоллекции.Имя, МетаданныеОбъекта);
		
		Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;
		КонецЕсли;
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|	" + ВеткаМетаданных + "." + ИмяТаблицыСправочника + " КАК ТаблицаВложенногоЗапроса
		|ГДЕ ";
		
		ОграничениеПоПолю = СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя, ТипЗначенияПоиска);
		
		Запрос.Текст = Запрос.Текст +"
		|	" + ОграничениеПоПолю + СтрокаОтборовПоСтруктуре;
	
	Иначе
		
		ПервыйЭлемент = Истина;
		СтрокаТаблиц = "";
		Для Каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
			
			ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ЭлементКоллекции.Имя, МетаданныеОбъекта);
			
			Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";
			КонецЕсли;
			
			Если НЕ ПервыйЭлемент Тогда
				СтрокаТаблиц = СтрокаТаблиц + "
				|
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли; 
			ПервыйЭлемент = Ложь;
			
			СтрокаТаблиц = СтрокаТаблиц + "
			|	ВЫБРАТЬ  ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
			|		ТаблицаСправочника.Ссылка КАК Ссылка
			|	ИЗ
			|		" + ВеткаМетаданных + "." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
			|	ГДЕ ";
			
			ОграничениеПоПолю = СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаСправочника." + ЭлементКоллекции.Имя, ТипЗначенияПоиска);
			СтрокаТаблиц = СтрокаТаблиц +"
			|	" + ОграничениеПоПолю + СтрокаОтборовПоСтруктуре;		
		КонецЦикла; 
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|
		|	(
		|" + СтрокаТаблиц + "
		|	) КАК ТаблицаВложенногоЗапроса";
	
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();

КонецФункции

//Функция Строит запрос автоподбора для регистра
Функция ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Знач Текст, СтруктураПараметров, ИмяРегистра, ПоляДляПоиска, КоличествоЭлементов) Экспорт
	
	Если (ПоляДляПоиска = Неопределено) ИЛИ ПоляДляПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Объект = Метаданные.РегистрыСведений[ИмяРегистра];
    	
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, "ТаблицаРегистра");
	
	СтрокаПолей = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
				  	|	ТаблицаРегистра.* ";
	
	Запрос.Текст = СтрокаПолей + "
		|ИЗ
		|	РегистрСведений." + ИмяРегистра + " КАК ТаблицаРегистра
		|ГДЕ ";

	
	// формируем ограничения по полям для поиска
	ОграничениеПоПолю = "";
	Для Каждого ПолеПоиска из ПоляДляПоиска Цикл
		
		ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ПолеПоиска, Объект, Ложь);
		Если (ОграничениеПоПолю <> "") Тогда
			ОграничениеПоПолю = ОграничениеПоПолю + "
				| ИЛИ ";
		КонецЕсли;
		ОграничениеПоПолю = ОграничениеПоПолю + СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаРегистра." + ПолеПоиска, ТипЗначенияПоиска);

	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст +"
		|	(" + ОграничениеПоПолю + ") " + СтрокаОтборовПоСтруктуре;

	Возврат Запрос.Выполнить();
 	
КонецФункции

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ поиска по строке.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором происводится поиск по строке
//
Процедура ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, Элемент, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке) Экспорт

	Если ОбработкаПоискаПоСтроке Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстПоискаПоСтроке;
		ОбработкаПоискаПоСтроке = Ложь;
		ТекстПоискаПоСтроке = "";
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
	Иначе
		Элемент.ЦветТекстаПоля = Новый Цвет;
	КонецЕсли;

КонецПроцедуры

// Функция формирует массив имен полей по которым организованн ввод по строке
Функция СформироватьМассивПоКоллекцииВводаПоСтроке(ТипСправочника) Экспорт
	
	ПоляПоиска = Новый Массив();
	ПустаяСсылка = Новый(ТипСправочника);
	КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
		ПоляПоиска.Добавить(ЭлементКоллекции.Имя)
	КонецЦикла;
	
	Возврат ПоляПоиска;
	
КонецФункции

// Функция подбирает значения по выборке
Функция ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПоляПоиска, Знач ПолеВыбора = "") Экспорт
	
	СтруктураНайденногоЭлемента = Новый Структура;
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли;
	
	ВрегТекст =	ВРег(Текст);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли;

	// выбран только один элемент - его и подставляем
	Выборка.Следующий();
	Для Каждого ИмяПоляПоиска Из ПоляПоиска Цикл
		ВрегЗначение = Врег(Выборка[ИмяПоляПоиска]);
		
		Если Лев(ВрегЗначение, СтрДлина(ВрегТекст)) = ВрегТекст Тогда
			Если ВрегТекст <> ВрегЗначение Тогда
				
				Если ПустаяСтрока(ПолеВыбора) Тогда			
					ТекстАвтоподбора = Выборка[ИмяПоляПоиска];
				Иначе
					ТекстАвтоподбора = Выборка[ПолеВыбора];
				КонецЕсли;
				
				ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, СтруктураНайденногоЭлемента);
			КонецЕсли;
			
			Возврат СтруктураНайденногоЭлемента;
		КонецЕсли; 
		
	КонецЦикла;  
		
КонецФункции

// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, ТипСправочника) Экспорт

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
	ПоляПоиска = СформироватьМассивПоКоллекцииВводаПоСтроке(ТипСправочника);
	ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПоляПоиска);
	
КонецПроцедуры

// функция вовзращает продолжить ли работу после введения некорректных данных при поиске по строке
Функция ЗапроситьПродолжитьРаботуПриНекорректныхДанныхПоискаПоСтроке(СообщатьПользователюОбОшибкеВводаДанных)
	
	Если СообщатьПользователюОбОшибкеВводаДанных Тогда
		ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ОтветНаВопрос = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Возврат (ОтветНаВопрос = КодВозвратаДиалога.Да);
	
КонецФункции

// процедура переносит значение из выборки в структуру
Процедура ОбработатьЕдинственныйЭлементВыбора(РезультатЗапроса, Выборка, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента)
	
	Выборка.Следующий();
	Значение = Выборка[ПолеВыбора];
	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, СтруктураВыбранногоЭлемента);	
	
КонецПроцедуры

// Процедура предупреждает пользователя что найдено более 50 элементов для подбора
Процедура ПредупредитьНайденоБолееПятидесятиЭлементов()
	
	Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
				   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
				   
КонецПроцедуры

// функция возвращает выбранног значение при поиске по строке
Функция ПолучитьЗначениеПоискаПоСтроке(ПоследнееЗначениеЭлементаПоискаПоСтроке, Текст)
	
	Если ПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено Тогда
		Возврат Текст;
	Иначе
		Возврат ПоследнееЗначениеЭлементаПоискаПоСтроке;
	КонецЕсли;
	
КонецФункции


// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
//
// Параметры
//  РезультатЗапроса - РезультатЗапроса при поиске по строке
//  Текст - Строка, текст поиска по строке
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
// Возвращаемое значение:
//   Список значений
//
Функция СформироватьСписокВыбораЗначенийПоискаПоСтроке(ТаблицаЗапроса, Знач Текст, ПоляПоиска) Экспорт

	КЧ = Новый КвалификаторыЧисла(12,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаЗапроса.Колонки.Добавить("УникальныйНомерСтроки", ОписаниеТиповЧ);
	
	СписокВозврата = Новый СписокЗначений;
	
	Текст = ВРег(Текст);
	ДлинаТекста = СтрДлина(Текст);
	
	ЕстьНаименование = (ТаблицаЗапроса.Колонки.Найти("Наименование") <> Неопределено);
	ЕстьКод          = (ТаблицаЗапроса.Колонки.Найти("Код") <> Неопределено);
	
	НужноИскатьПоКоду 		  = (ОбщегоНазначения.ВернутьИндексВМассиве(ПоляПоиска, "Код") <> -1);
	НужноИскатьПоНаименованию = (ОбщегоНазначения.ВернутьИндексВМассиве(ПоляПоиска, "Наименование") <> -1);

	НомерЭлемента = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		СтрокаТаблицы.УникальныйНомерСтроки = НомерЭлемента;
		НомерЭлемента = НомерЭлемента + 1;
		
		Если ЕстьНаименование И НужноИскатьПоНаименованию И ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
			СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], (СтрокаТаблицы.Наименование + ?(ЕстьКод, (" (" + СокрЛП(Строка(СтрокаТаблицы.Код)) + ")"), "")));
			Продолжить;
		КонецЕсли;
		
		Если ЕстьКод И НужноИскатьПоКоду И ВРег(Лев(СтрокаТаблицы.Код, ДлинаТекста)) = Текст Тогда
			Если ЕстьНаименование Тогда
				СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], (СтрокаТаблицы.Наименование + " (" + СокрЛП(Строка(СтрокаТаблицы.Код)) + ")"));
			Иначе
				СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], Строка(СтрокаТаблицы.Код));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		
			Если Колонка.Имя = "Наименование" ИЛИ Колонка.Имя = "Код" ИЛИ Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли; 
		
			Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], ("" + СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНаименование, (" (" + СокрЛП(Строка(СтрокаТаблицы.Наименование)) + ")"), "")));
			КонецЕсли
			
		КонецЦикла; 
	
	КонецЦикла; 

	Возврат СписокВозврата;
	
КонецФункции

// функция возвращает был ли выбран пользователем элемент из выпадающего списка выбора
Функция ОпределитьВыборПользователяИзСписка(Элемент, ЭтаФорма, СписокВыбора, ТаблицаВыборки, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента)
	
	// а содержит ли список строки
	Если СписокВыбора.Количество() > 0 Тогда
		// список отсортируем в алфавитном порядке
		СписокВыбора.СортироватьПоПредставлению();
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	Иначе
		ВыбранныйЭлемент = Неопределено; // если список пустой - выбирать не из чего
	КонецЕсли;
		
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыбраннаяСтрока = ТаблицаВыборки.Найти(ВыбранныйЭлемент.Значение, "УникальныйНомерСтроки");
		Значение = ВыбраннаяСтрока[ПолеВыбора];
		// структуру надо вернуть
		ПеренестиСтрокуТаблицыВСтруктуру(ТаблицаВыборки, ВыбраннаяСтрока, СтруктураВыбранногоЭлемента);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура организует выбор элементов по результату запроса
Процедура ВыбратьЭлементОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено, 
											ПриОтсутствииЗначенияОставлятьТекст = Истина, ПоляПоиска, ПолеВыбора, 
											СтруктураВыбранногоЭлемента = Неопределено, Знач СообщатьПользователюОбОшибкеВводаДанных = Истина)
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		
		ПродолжитьРаботу = ЗапроситьПродолжитьРаботуПриНекорректныхДанныхПоискаПоСтроке(СообщатьПользователюОбОшибкеВводаДанных);
		Если НЕ ПродолжитьРаботу Тогда
			ОбработкаПоискаПоСтроке = Истина;
			ТекстПоискаПоСтроке = Текст;
		Иначе
			Значение = Текст;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоЭлементовВыборки = Выборка.Количество();
	
	Если КоличествоЭлементовВыборки = 1 Тогда
		
		// единственный элемент в выборке - переносим значение в стуктуру
		ОбработатьЕдинственныйЭлементВыбора(РезультатЗапроса, Выборка, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента);
		Возврат;
		
	ИначеЕсли КоличествоЭлементовВыборки > 50 Тогда
		
		ПредупредитьНайденоБолееПятидесятиЭлементов();  
		Значение = ПолучитьЗначениеПоискаПоСтроке(ПоследнееЗначениеЭлементаПоискаПоСтроке, Текст);
        Возврат;
		
	ИначеЕсли КоличествоЭлементовВыборки = 0 Тогда
		ЭлементВыбран = Ложь;
	Иначе
		
		// из выпадающего списка предлагаем выбрать элемент
		ТаблицаВыборки = РезультатЗапроса.Выгрузить();
		СписокВыбора = СформироватьСписокВыбораЗначенийПоискаПоСтроке(ТаблицаВыборки, Текст, ПоляПоиска);
		
		ЭлементВыбран = ОпределитьВыборПользователяИзСписка(Элемент, ЭтаФорма, СписокВыбора, ТаблицаВыборки, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента);
		
	КонецЕсли; 
	
	Если ЭлементВыбран Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьРаботу = ЗапроситьПродолжитьРаботуПриНекорректныхДанныхПоискаПоСтроке(СообщатьПользователюОбОшибкеВводаДанных);
	Значение = ПолучитьЗначениеПоискаПоСтроке(ПоследнееЗначениеЭлементаПоискаПоСтроке, Текст);
	
	Если НЕ ПродолжитьРаботу Тогда
		ОбработкаПоискаПоСтроке = Истина;
		ТекстПоискаПоСтроке = Текст;
	КонецЕсли;
		
КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, ТипСправочника, 
		ОбработкаПоискаПоСтроке = Неопределено, ТекстПоискаПоСтроке = Неопределено, ПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено, 
		ПриОтсутствииЗначенияОставлятьТекст = Истина, Знач СообщатьПользователюОбОшибкеВводаДанных = Истина) Экспорт

	Если ПустаяСтрока(Текст) Тогда
		Значение = Новый(ТипСправочника);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 
	
	ПоляПоиска = СформироватьМассивПоКоллекцииВводаПоСтроке(ТипСправочника);

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
	
	ВыбратьЭлементОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаПоискаПоСтроке, 
										ПриОтсутствииЗначенияОставлятьТекст, ПоляПоиска, "Ссылка", , СообщатьПользователюОбОшибкеВводаДанных);
	
КонецПроцедуры


Функция ВыборСправочникИзСписка(Элемент, ЭтаФорма, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ОбщегоНазначения.ВыбратьСправочникИзСписка(ТипЗнч(Элемент.Значение), ЭтаФорма, Элемент, Элемент.Значение);
	Если (Результат = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	Элемент.Значение = Результат;
	
	Возврат Истина;
	
КонецФункции // ВыборСправочникИзСписка()

Функция ВыборОтветсвенногоИзСписка(Элемент, ЭтаФорма, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивИсключаемых = Новый Массив;
	МассивИсключаемых.Добавить(Справочники.Пользователи.FrontOffice);
	МассивИсключаемых.Добавить(Справочники.Пользователи.НеАвторизирован);
	
	Результат = ОбщегоНазначения.ВыбратьСправочникИзСписка(ТипЗнч(Элемент.Значение), ЭтаФорма, Элемент, Элемент.Значение, ,, Новый Структура("НЕВСПИСКЕ_Ссылка", МассивИсключаемых));
	Если (Результат = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	Элемент.Значение = Результат;
	
	Возврат Истина;
	
КонецФункции // ВыборОтветсвенногоИзСписка()


Процедура НастроитьДействияВыбораФормыСписка(ЭтаФорма) Экспорт

	// Удаление кнопок соответсвующих режиму выбора.
	Если Не ЭтаФорма.РежимВыбора Тогда
		Попытка
			ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.ДействияФормыВыбрать);
			ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Разделитель);
		Исключение КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // НастроитьДействияВыбораФормыСписка()


Процедура СинхронизироватьСправочникДеревоФормыСписка(СправочникДерево, СправочникСписок) Экспорт
	
	Если (СправочникСписок.ТекущиеДанные = Неопределено) Тогда
		СправочникДерево.ТекущаяСтрока = СправочникСписок.ТекущийРодитель;
	Иначе
		СправочникДерево.ТекущаяСтрока = СправочникСписок.ТекущиеДанные.Ссылка.Родитель;
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьСправочникДеревоФормыСписка()


Функция ПараметрыСтиляСостоянияДокумента(СостояниеДокумента, Шрифт = Неопределено, Цвет = Неопределено, ЦветФона = Неопределено, Картинка = Неопределено) Экспорт
	
	// Результат.
	Результат = Новый Структура;
	Если (Не Шрифт = Ложь) Тогда
		Результат.Вставить("Шрифт");
	КонецЕсли;
	Если (Не Цвет = Ложь) Тогда
		Результат.Вставить("Цвет");
	КонецЕсли;
	Если (Не ЦветФона = Ложь) Тогда
		Результат.Вставить("ЦветФона");
	КонецЕсли;
	Если (Не Картинка = Ложь) Тогда
		Результат.Вставить("Картинка");
	КонецЕсли;
	
	// Элемент стиля и картинка.
	Если (СостояниеДокумента = Перечисления.СостоянияДокументов.Открытые) Тогда
		ЭлементСтиля = "ОткрытогоДокумента";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументов.ВыполняемыеЧастично) Тогда
		ЭлементСтиля = "ВыполняемогоЧастичноДокумента";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументов.ВыполняемыеПолностью) Тогда
		ЭлементСтиля = "ВыполняемогоПолностьюДокумента";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументов.ВыполненныеЧастично) Тогда
		ЭлементСтиля = "ВыполненногоЧастичноДокумента";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументов.ВыполненныеПолностью) Тогда
		ЭлементСтиля = "ВыполненногоПолностьюДокумента";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументов.Распечатанные) Тогда
		ЭлементСтиля = "РаспечатанногоДокумента";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументов.Закрытые) Тогда
		ЭлементСтиля = "ЗакрытогоДокумента";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	ИначеЕсли (СостояниеДокумента = Перечисления.СостоянияДокументов.Удаленные) Тогда
		ЭлементСтиля = "УдаленногоДокумента";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	Иначе
		ЭлементСтиля = "Неопеределено";
		Картинка = БиблиотекаКартинок.ДокументОбъект;
	КонецЕсли;
	
	// Шрифт и цвет.
	СтруктураСтиля = УправлениеПользователями.ПолучитьЗначениеСтиля(ЭлементСтиля, Шрифт, Цвет, ЦветФона); СтруктураСтиля.Вставить("Картинка", Картинка);
	ЗаполнитьЗначенияСвойств(Результат, СтруктураСтиля);
	
	Если Результат.Свойство("Цвет") Тогда
		Результат.Вставить("ЦветТекста", Результат.Цвет);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПараметрыСтиляСостоянияДокумента()

// Александр Переверзев 11.03.2012 22:16:32 
Функция ПараметрыСтиляЭлементовМеню(Шрифт = Неопределено, Цвет = Неопределено, ЦветФона = Неопределено, Картинка = Неопределено) Экспорт
	
	// Результат.
	Результат = Новый Структура;
	Если (Не Шрифт = Ложь) Тогда
		Результат.Вставить("Шрифт");
	КонецЕсли;
	Если (Не Цвет = Ложь) Тогда
		Результат.Вставить("Цвет");
	КонецЕсли;
	Если (Не ЦветФона = Ложь) Тогда
		Результат.Вставить("ЦветФона");
	КонецЕсли;
	Если (Не Картинка = Ложь) Тогда
		Результат.Вставить("Картинка");
	КонецЕсли;
	
	// Шрифт и цвет.
	СтруктураСтиля = УправлениеПользователями.ПолучитьЗначениеСтиля("ЭлементовМеню", Шрифт, Цвет, ЦветФона); СтруктураСтиля.Вставить("Картинка", Картинка);
	ЗаполнитьЗначенияСвойств(Результат, СтруктураСтиля);
	
	Если Результат.Свойство("Цвет") Тогда
		Результат.Вставить("ЦветТекста", Результат.Цвет);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПараметрыСтиляЭлементовМеню()



Функция КартинкаВидаСобытия(ВидСобытия) Экспорт
	
	// Заполнение.
	Если Не ЗначениеЗаполнено(ВидСобытия) Тогда
		Возврат Новый Картинка;
	КонецЕсли;
	
	// Результат.
	Возврат БиблиотекаКартинок["Событие" + Метаданные.Перечисления.ВидыСобытий.ЗначенияПеречисления[Перечисления.ВидыСобытий.Индекс(ВидСобытия)].Имя];
	
КонецФункции // КартинкаВидаСобытия()



// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Ответственный) Тогда
		Заголовок = Заголовок + ". " + ПроцедурыУправленияПерсоналом.ФамилияИнициалыФизЛица(ДокументОбъект.Ответственный);
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()


// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Функция АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента) Экспорт

	// TODO: Реализовать и добавить наши реквищиты.
	
	// Структура - порядок актиизации реквизитов.
	// Активизируется первый не заполненный.
	СтруктураРеквизитов = Новый Структура();
	
	СтруктураРеквизитов.Вставить("Дата");
	
	// Если поле ввода "Номер" доступен для редактирования
	ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти("Номер");
	Если ЭлементУправления <> Неопределено И Не ЭлементУправления.ТолькоПросмотр Тогда
		СтруктураРеквизитов.Вставить("Номер");
	КонецЕсли;

	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Касса");
	СтруктураРеквизитов.Вставить("Склад");
	СтруктураРеквизитов.Вставить("СкладОрдер");
	СтруктураРеквизитов.Вставить("БанковскийСчет");
	СтруктураРеквизитов.Вставить("СчетОрганизации");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("Получатель");
	СтруктураРеквизитов.Вставить("Плательщик");
	СтруктураРеквизитов.Вставить("ПериодРегистрации");
	СтруктураРеквизитов.Вставить("ФизЛицо");
	СтруктураРеквизитов.Вставить("Сделка");
	

	Для каждого Элемент Из СтруктураРеквизитов Цикл

		// Определим, есть ли ЭУ с таким именем.
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
		Если ЭлементУправления <> Неопределено Тогда // есть такой
			Если НЕ ЗначениеЗаполнено(ЭлементУправления.Значение)
			   И ЭлементУправления.Доступность
			   И ЭлементУправления.Видимость
			   И Не ЭлементУправления.ТолькоПросмотр Тогда 

				// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
				ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции // АктивизироватьРеквизитВФорме()


// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		ПунктМеню = ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                                        ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		ПунктМеню.ИзменяетДанные = Истина;
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()


Процедура ПриИзмененииОплаты(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.Оплата.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Метаданные.
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		ДокументОбъект.ОтражатьВУправленческомУчете = ДокументОбъект.Оплата.ОтражатьВУправленческомУчете;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		ДокументОбъект.ОтражатьВБухгалтерскомУчете = ДокументОбъект.Оплата.ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		ДокументОбъект.ОтражатьВНалоговомУчете = ДокументОбъект.Оплата.ОтражатьВНалоговомУчете;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОплаты()


// Процедура добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьКодАртикул(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт

	Если (Не КолонкиТабПоля.Найти("Код") = Неопределено) И КолонкиТабПоля.Код.Видимость Тогда
		Если (Не Номенклатура = Неопределено) Тогда
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
		Иначе
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если (Не КолонкиТабПоля.Найти("Артикул") = Неопределено) И КолонкиТабПоля.Артикул.Видимость Тогда
		Если (Не Номенклатура = Неопределено) Тогда
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Номенклатура.Артикул);
		Иначе
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКодАртикул()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ ВЫПАДАЮЩИХ СПИСКОВ ПОСЛЕДНИХ 10 ЗНАЧЕНИЙ
               
// Процедура восстанавливает список 10 последних выпавших значений элемента
Процедура ВосстановитьСписокЗначенийУнивер(СписокЗначений, ИмяПараметраДляСохранения = "", СписокЭлементаВизуализации) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяПараметраДляСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначений.Очистить();
	
	ВосстановленноеЗначение = ВосстановитьЗначение(ИмяПараметраДляСохранения);
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
		СписокЗначений = ВосстановленноеЗначение;
		СписокЭлементаВизуализации = СписокЗначений.Скопировать();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура добавляет в список последних 10-ти значений элементов
// Параметры :
//		СписокСохраняемыхЗначений - список значений куда нужно поместить очередной элемент
//      ИмяПараметраДляСохранения - под каким именем сохранить значение (если пустая - то ничего не сохраняем)
//      ЭлементСписка			  - выбранный элемент списка
Процедура ДобавитьВСписокЗначенийУнивер(СписокСохраняемыхЗначений, ИмяПараметраДляСохранения = "", ЭлементСписка, 
	Знач ЗначениеПоиска = "") Экспорт

	Если ПустаяСтрока(ЗначениеПоиска) Тогда
		ДобавляемоеЗначение = ЭлементСписка.Значение;
	Иначе
		ДобавляемоеЗначение = ЗначениеПоиска;
    КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ДобавляемоеЗначение);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ДобавляемоеЗначение);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(ИмяПараметраДляСохранения)) И ТипЗнч(ИмяПараметраДляСохранения) = Тип("Строка") Тогда
		СохранитьЗначение(ИмяПараметраДляСохранения, СписокСохраняемыхЗначений.Скопировать());
	КонецЕсли;
	
	ЭлементСписка.СписокВыбора = СписокСохраняемыхЗначений.Скопировать();

КонецПроцедуры





// Функция установки отметок переданного списка значений.
//
// Параметры:
//	Значение - СписокЗначений. Список значений пометки которого необходимо установить;
//	Подсказка - Строка. Заголовок диалога;
//	ЗапретОтменыОтметкиВсех - Булево. Признак запрета отмены отметки всех элементов списка.
//
// Возвращаемое значение:
//	Булево. Истина, если выбор был осущетсвлен;
//	Значение - СписокЗначений. Копия оригинального списка значений с установленными пометками.
//
Функция ВыбратьОтметкиСписка(Значение, Подсказка = "", ЗапретОтменыОтметкиВсех = Ложь) Экспорт
	
	// Результат.
	Возврат Обработки.РаботаСДиалогами.Создать().ВыбратьОтметкиСписка(Значение, Подсказка, ЗапретОтменыОтметкиВсех);

КонецФункции // ВыбратьОтметкиСписка()




Функция ВыборПричиныОтказа(Значение) Экспорт
	
	Возврат Обработки.ВыборПричиныОтказа.Создать().ВыбратьПричинуОтказа(Значение);
	
КонецФункции // ВыборПричиныОтказа()

Функция ВыборПричиныОтказаИЧерногоСписка(Значение, ЧерныйСписокДобавление, ЧерныйСписокКомментарий) Экспорт
	
	Возврат Обработки.ВыборПричиныОтказа.Создать().ВыбратьПричинуОтказаИЧерныйСписок(Значение, ЧерныйСписокДобавление, ЧерныйСписокКомментарий);
	
КонецФункции // ВыборПричиныОтказаИЧерногоСписка()

Функция ВыборПереносимойНоменклатуры(ДокументОбъект, ПервоночальнаяПометка = Ложь) Экспорт
	
	Возврат Обработки.ПереносНоменклатуры.Создать().ПереносНоменклатуры(ДокументОбъект, ПервоночальнаяПометка);
	
КонецФункции // ВыбратьПереносимуюНоменклатуру()


Функция ВыполнитьПереносНоменклатуры(ДокументОбъект, ФормаДокумента, ПервоночальнаяПометка = Ложь, Подсказка = "") Экспорт
	
	
КонецФункции // ВыполнитьПереносНоменклатуры()




Функция ГрупповаяУстановкаТолькоПросмотра(ЭтаФорма, ТолькоПросмотр, СписокЭлементовФормы = "", СписокИсключаемыхЭлементовФормы = "") Экспорт

	Возврат ТолькоПросмотр;
	
КонецФункции




// Обработчик события ДокументСписок.ПередУстановкойПометкиУдаления элемента.
//
Процедура ДокументСписокПередУстановкойПометкиУдаления(Элемент, Отказ) Экспорт
	
	// Отказ от стандартной обработки.
	Отказ = Истина;
	
	// Параметры.
	Документ = Элемент.ТекущиеДанные.Ссылка;
	
	// Запись.
	ДокументУстановитьПометкуУдаления(Документ, Неопределено);
	
КонецПроцедуры // ДокументСписокПередУстановкойПометкиУдаления()

// Обработчик события ДокументСписок.ПередПроведением элемента.
//
Процедура ДокументСписокПередПроведением(Элемент, Отказ) Экспорт
	
	// Отказ от стандартной обработки.
	Отказ = Истина;
	
	// Параметры.
	Документ = Элемент.ТекущиеДанные.Ссылка;
	
	// Запись.
	ДокументПровести(Документ, Неопределено);
	
КонецПроцедуры // ДокументСписокПередОтменойПроведения()

// Обработчик события ДокументСписок.ПередОтменойПроведения элемента.
//
Процедура ДокументСписокПередОтменойПроведения(Элемент, Отказ) Экспорт
	
	// Отказ от стандартной обработки.
	Отказ = Истина;
	
	// Параметры.
	Документ = Элемент.ТекущиеДанные.Ссылка;
	
	// Запись.
	ДокументОтменитьПроведение(Документ, Неопределено);
	
КонецПроцедуры // ДокументСписокПередОтменойПроведения()

// Обработчик события ДокументСписок.ПередИзменениемДаты элемента.
//
Процедура ДокументСписокПередИзменениемДаты(Элемент, Отказ) Экспорт
	
	// Отказ от стандартной обработки.
	Отказ = Истина;
	
КонецПроцедуры // ДокументСписокПередИзменениемДаты()







Функция ДокументПолучитьРежимЗаписи(ДокументОбъект, РежимЗаписи = Неопределено) Экспорт
	
	// Основной реквизит.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Оплачен", ДокументОбъект.Метаданные()) Тогда
		Реквизит = "Оплачен";
	Иначе
		Реквизит = "Распечатан";
	КонецЕсли; 
	
	// Режим записи.
	Если ДокументОбъект[Реквизит] Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
	КонецЕсли;

	Возврат РежимЗаписи;
	
КонецФункции // ПолучитьРежимЗаписиДокумента()


Функция ДокументУстановитьПредотвращениеПроверки(НеПроверятьПраваДоступа = Истина, НеПроверятьГраницуЗапретаИзменения = Истина, НеПроверятьРеквизиты = Ложь) Экспорт
	
	ПраметрыПроверки = Новый Структура("НеПроверятьПраваДоступа,НеПроверятьГраницуЗапретаИзменения,НеПроверятьРеквизиты", 
									   НеПроверятьПраваДоступа, 
									   НеПроверятьГраницуЗапретаИзменения,
									   НеПроверятьРеквизиты);
							
	Возврат ПраметрыПроверки;
	
КонецФункции // ДокументУстановитьПраметрыПроверки()

Функция ДокументУстановитьДополнительныеСвойства(ПраметрыПроверки = Неопределено, ОтложеннаяПечатьДиспетчер = Неопределено, НеПечатать = Ложь, Заполнение = Неопределено) Экспорт
	
	ДополнительныеСвойства = Новый Структура;
	
	// Праметры проверки.
	Если (Не ПраметрыПроверки = Неопределено) Тогда
		ДополнительныеСвойства.Вставить("ПраметрыПроверки", ПраметрыПроверки);
	КонецЕсли;
	
	// Отложенная печать: диспетчер.
	Если (Не ОтложеннаяПечатьДиспетчер = Неопределено) Тогда
		ДополнительныеСвойства.Вставить("ОтложеннаяПечатьДиспетчер", ОтложеннаяПечатьДиспетчер);
	КонецЕсли;
	
	// Не печатать.
	Если (Не НеПечатать = Ложь) Тогда
		ДополнительныеСвойства.Вставить("НеПечатать", НеПечатать);
	КонецЕсли;
	
	// Заполнение.
	Если (Не Заполнение = Неопределено) Тогда
		ДополнительныеСвойства.Вставить("Заполнение", Заполнение);
	КонецЕсли;
	
	Возврат ДополнительныеСвойства;
	
КонецФункции // ДокументУстановитьДополнительныеСвойства()


Функция ДокументУстановитьРеквизит(ДокументОбъект, Реквизит, Значение) Экспорт
	
	// Пакетное выполнение.
	Если (ТипЗнч(ДокументОбъект) = Тип("Массив")) Тогда
		Для Индекс = 0 По ДокументОбъект.Количество() - 1 Цикл
			
			ДокументВМассиве = ДокументОбъект.Получить(Индекс);
			Если Не ДокументУстановитьРеквизит(ДокументВМассиве, Реквизит, Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	// Установка реквизита.
	Возврат ОбщегоНазначения.УстановитьРеквизитОбъекта(ДокументОбъект, Реквизит, Значение);
	
КонецФункции // ДокументУстановитьРеквизит()

Функция ДокументУстановитьОплату(ДокументОбъект, Оплата) Экспорт
	
	Если Оплата = Неопределено Тогда Возврат Истина; КонецЕсли;
		
	// Пакетное выполнение.
	Если (ТипЗнч(ДокументОбъект) = Тип("Массив")) Тогда
		Для Индекс = 0 По ДокументОбъект.Количество() - 1 Цикл
			
			ДокументВМассиве = ДокументОбъект.Получить(Индекс);
			Если Не ДокументУстановитьОплату(ДокументВМассиве, Оплата) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	// Установка оплаты.
	ДокументОбъект.Оплата = Оплата;
	ПриИзмененииОплаты(ДокументОбъект);
	
	Возврат Истина;
	
КонецФункции // ДокументУстановитьОплату()



Функция ДокументПолучить(ДокументОбъект) Экспорт
	
	// Получение объекта.
	Документ = ДокументОбъект;
	
	Если (Метаданные.НайтиПоТипу(ТипЗнч(Документ)) = Неопределено) Или (Документ = Документ.Ссылка) Тогда
		
		Если Документ.Ссылка.Пустая() Тогда
			Попытка
				ДокументОбъект = Документы[Документ.Ссылка.Метаданные().Имя].СоздатьДокумент();
			Исключение
				____Ошибка("Невозможно создать документ." + Символы.ПС + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Попытка
				ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			Исключение
				____Ошибка("Невозможно получить документ." + Символы.ПС + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДокументПолучить()	

Функция ДокументОткрыть(ДокументОбъект, ФормаДокумента, Блокировть = Ложь, ДополнительныеСвойства = Неопределено) Экспорт
	
	Перем Заполнение;
	
	Блокировть = Ложь;	

	// Пакетное выполнение.
	Если (ТипЗнч(ДокументОбъект) = Тип("Массив")) Тогда
		ФормаДокументаВМассиве = ФормаДокумента;
		Для Индекс = 0 По ДокументОбъект.Количество() - 1 Цикл

			ДокументВМассиве = ДокументОбъект.Получить(Индекс);
			Если Не ДокументОткрыть(ДокументВМассиве, ФормаДокументаВМассиве, Блокировть, ДополнительныеСвойства) Тогда
				Возврат Ложь;
			КонецЕсли;
			ДокументОбъект.Установить(Индекс, ДокументВМассиве);
			
			ФормаДокументаВМассиве = Неопределено;
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	// Получение объекта.
	Если Не ДокументПолучить(ДокументОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Дополнительные свойства.
	Если (Не ДополнительныеСвойства = Неопределено) Тогда
		ОбщегоНазначения.ОбъеденитьСтруктуры(ДокументОбъект.ДополнительныеСвойства, ДополнительныеСвойства, ДокументОбъект.ДополнительныеСвойства);
	КонецЕсли;
	
	// Заполнение.
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("Заполнение", Заполнение) Тогда
		ДокументОбъект.Заполнить(Заполнение);
	КонецЕсли;
	
	// Предотвращение открытия в форме.
	Если (Не ФормаДокумента = Неопределено) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// Выполнение вне формы.
	ВыполнениеВнеФормы = (ФормаДокумента = Неопределено);
	Если ВыполнениеВнеФормы Тогда
		ФормаДокумента = Новый Структура("ДокументОбъект,ТолькоПросмотр", ДокументОбъект, Ложь);
		Параметры.Вставить("ВыполнениеВнеФормы", Истина);
	КонецЕсли;
	
	// Типовые события.
	Отказ = Ложь;
	
	// -- ПриИзмененииДанных.
	Если Не Отказ Тогда
		ПриИзмененииДанныхДокумента(ДокументОбъект, ФормаДокумента);
	КонецЕсли;
	
	// -- ПередОткрытием.
	Если Не Отказ Тогда
		Параметры.Вставить("НеБлокировать", Не Блокировть);
		
		СтандартнаяОбработка = Истина;
		ПередОткрытиемДокумента(ДокументОбъект, ФормаДокумента, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// -- ПриОткрытии.
	Если Не Отказ Тогда
		Если СтандартнаяОбработка Тогда
			ПриОткрытииДокумента(ДокументОбъект, ФормаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение вне формы.
	Если ВыполнениеВнеФормы И ФормаДокумента.ТолькоПросмотр Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // ДокументОткрыть()	

Функция ДокументЗаписать(ДокументОбъект, ФормаДокумента, РежимЗаписи = Неопределено, РежимПроведения = Неопределено, ДополнительныеСвойства = Неопределено) Экспорт
	
	// Пакетное выполнение.
	Если (ТипЗнч(ДокументОбъект) = Тип("Массив")) Тогда
		ФормаДокументаВМассиве = ФормаДокумента;
		Для Индекс = 0 По ДокументОбъект.Количество() - 1 Цикл
			
			ДокументВМассиве = ДокументОбъект.Получить(Индекс);
			Если Не ДокументЗаписать(ДокументВМассиве, ФормаДокументаВМассиве, РежимЗаписи, РежимПроведения) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ФормаДокументаВМассиве = Неопределено;
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	// Режим записи.
	Если (РежимЗаписи = Неопределено) Тогда
		ДокументПолучитьРежимЗаписи(ДокументОбъект, РежимЗаписи);
	КонецЕсли;
	
	// Дополнительные свойства.
	Если (Не ДополнительныеСвойства = Неопределено) Тогда
		ОбщегоНазначения.ОбъеденитьСтруктуры(ДокументОбъект.ДополнительныеСвойства, ДополнительныеСвойства, ДокументОбъект.ДополнительныеСвойства);
	КонецЕсли;
	
	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// Типовые события.
	Отказ = Ложь;
	
	// Запись в форме или вне формы.
	Если ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ВыполнениеВнеФормы") Тогда
			
		// -- ПередЗаписью.
		Если Не Отказ Тогда
			ПередЗаписьюДокумента(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения);
		КонецЕсли;
		
		// Транзацкия.
		НачатьТранзакцию();
		
		// Запись.
		Если Не Отказ Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписи, РежимПроведения);	
			Исключение
				Отказ = Истина; ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
		// -- ПриЗаписи.
		Если Не Отказ Тогда
			ПриЗаписиДокумента(ДокументОбъект, ФормаДокумента, Отказ);
		КонецЕсли;
		
		// Транзацкия.
		Если Не Отказ Тогда
			Попытка
				ЗафиксироватьТранзакцию();
			Исключение
				Отказ = Истина; ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		Если Отказ Тогда
			ОтменитьТранзакцию(); ____Ошибка(ОписаниеОшибки);
		КонецЕсли;
		
		// -- ПослеЗаписи.
		Если Не Отказ Тогда
			ПослеЗаписиДокумента(ДокументОбъект, ФормаДокумента);
		КонецЕсли;
			
	Иначе
		Отказ = Не ФормаДокумента.ЗаписатьВФорме(РежимЗаписи);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // ДокументЗаписать()	

Функция ДокументПеренестиНоменклатуру(ДокументОбъект, ФормаДокумента, ДополнительныеСвойства = Неопределено) Экспорт
	
	Результат = ДокументОткрыть(ДокументОбъект, ФормаДокумента, , ДополнительныеСвойства) И
				ВыборПереносимойНоменклатуры(ДокументОбъект) И
				ДокументЗаписать(ДокументОбъект, ФормаДокумента);
				
	ДокументЗакрыть(ДокументОбъект, ФормаДокумента);			
				
	Возврат	Результат;		
				
КонецФункции // ДокументПровести()	

Функция ДокументПровести(ДокументОбъект, ФормаДокумента, ДополнительныеСвойства = Неопределено, Оплата = Неопределено) Экспорт
	
	Результат = ДокументОткрыть(ДокументОбъект, ФормаДокумента, Истина, ДополнительныеСвойства) И
	            ДокументУстановитьОплату(ДокументОбъект, Оплата) И
				ДокументУстановитьРеквизит(ДокументОбъект, "ПометкаУдаления", Ложь) И 
				ДокументЗаписать(ДокументОбъект, ФормаДокумента, РежимЗаписиДокумента.Проведение);
				
	ДокументЗакрыть(ДокументОбъект, ФормаДокумента);			
				
	Возврат	Результат;		
				
КонецФункции // ДокументПровести()	

Функция ДокументОтменитьПроведение(ДокументОбъект, ФормаДокумента, ДополнительныеСвойства = Неопределено) Экспорт
	
	Результат = ДокументОткрыть(ДокументОбъект, ФормаДокумента, , ДополнительныеСвойства) И
				ДокументЗаписать(ДокументОбъект, ФормаДокумента, РежимЗаписиДокумента.ОтменаПроведения);
				
	ДокументЗакрыть(ДокументОбъект, ФормаДокумента);			
				
	Возврат	Результат;		
				
КонецФункции // ДокументПровести()	

Функция ДокументУстановитьПометкуУдаления(ДокументОбъект, ФормаДокумента, ПометкаУдаления = Неопределено, ДополнительныеСвойства = Неопределено) Экспорт
	
	// Пометка удаления.
	Если (ПометкаУдаления = Неопределено) Тогда
		ПометкаУдаления = Не ДокументОбъект.ПометкаУдаления;
	КонецЕсли;
	
	// Подтверждение.
	Если ПометкаУдаления Тогда
		ТекстВопроса = "Пометить объект на удаление?"; // Локализация.
	Иначе
		ТекстВопроса = "Снять с объекта пометку на удаление?"; // Локализация.
	КонецЕсли;
	Если (Не ____Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Режим записи.
	Если ПометкаУдаления Тогда
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
	КонецЕсли;
	
	// Запись.
	Результат = ДокументОткрыть(ДокументОбъект, ФормаДокумента, , ДополнительныеСвойства) И
				ДокументУстановитьРеквизит(ДокументОбъект, "ПометкаУдаления", ПометкаУдаления) И 
				ДокументЗаписать(ДокументОбъект, ФормаДокумента, РежимЗаписи);
				
	ДокументЗакрыть(ДокументОбъект, ФормаДокумента);			
				
	Возврат	Результат;		
				
КонецФункции // ДокументУстановитьПометкуУдаления()	

Функция ДокументУстановитьПометкуРаспечатанности(ДокументОбъект, ФормаДокумента, ПометкаРаспечатанности, ДополнительныеСвойства = Неопределено) Экспорт
	
	Результат = ДокументОткрыть(ДокументОбъект, ФормаДокумента, , ДополнительныеСвойства) И
				ДокументУстановитьРеквизит(ДокументОбъект, "Распечатан", ПометкаРаспечатанности) И 
				ДокументЗаписать(ДокументОбъект, ФормаДокумента);
				
	ДокументЗакрыть(ДокументОбъект, ФормаДокумента);			
				
	Возврат	Результат;		
				
КонецФункции // ДокументУстановитьПометкуРаспечатанности()	

Функция ДокументЗакрыть(ДокументОбъект, ФормаДокумента) Экспорт
	
	// Пакетное выполнение.
	Если (ТипЗнч(ДокументОбъект) = Тип("Массив")) Тогда
		ФормаДокументаВМассиве = ФормаДокумента;
		Для Индекс = 0 По ДокументОбъект.Количество() - 1 Цикл
			
			ДокументВМассиве = ДокументОбъект.Получить(Индекс);
			Если Не ДокументЗакрыть(ДокументВМассиве, ФормаДокументаВМассиве) Тогда
				Возврат Ложь;
			КонецЕсли;
			ДокументОбъект.Установить(Индекс, ДокументВМассиве);
			
			ФормаДокументаВМассиве = Неопределено;
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	//Формат Эксперт - SD 16.08.2011 20:36:27 - перенос ядра - Поменял местами два следующих абзаца, чтоб не вылетало, когда документобъект неопределено.
	// Проверка объекта.
	Если (ДокументОбъект = Неопределено) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Костенюк Александр-Комментарий 11.03.2013
	// непонятно, что такое "ВыполнениеВнеФормы"
	// при включенном механизме не очищается значение переменнной ДокументОбъект
	// как следствие удаление блюд при оплате
	// Предотвращение закрытия в форме.
	Если Не ОбщегоНазначения.ПолучитьБулевоеСвойство(ДокументОбъект.ДополнительныеСвойства, "ВыполнениеВнеФормы") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если (ДокументОбъект = ДокументОбъект.Ссылка) Тогда
		ДокументОбъект = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
	// Типовые события.
	Отказ = Ложь;
	
	// -- ПередЗакрытием.
	Если Не Отказ Тогда
		СтандартнаяОбработка = Истина;
		ПередЗакрытиемДокумента(ДокументОбъект, ФормаДокумента, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// -- ПриЗакрытии.
	Если Не Отказ Тогда
		Если СтандартнаяОбработка Тогда
			ПриЗакрытииДокумента(ДокументОбъект, ФормаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие объекта.
	Если Не Отказ Тогда
		ДокументОбъект = Неопределено;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // ДокументЗакрыть()	


// Обработчик события ПередОткрытием формы документа.
//
Процедура ПередОткрытиемДокумента(ДокументОбъект, ФормаДокумента, Отказ, СтандартнаяОбработка) Экспорт

КонецПроцедуры // ПередОткрытиемДокумента()

// Обработчик события ПриОткрытии формы документа.
//
Процедура ПриОткрытииДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Перем НеБлокировть;
	
	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// Пометка удаления.
	Если Не ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ВыполнениеВнеФормы") Тогда
		ФормаДокумента.ТолькоПросмотр = ФормаДокумента.ТолькоПросмотр Или ДокументОбъект.ПометкаУдаления;
	КонецЕсли;
	
	// Дата запрета редактирования.
	Если Не НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ФормаДокумента) Тогда
		Если ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ВыполнениеВнеФормы") Тогда
			____Ошибка("Документ за границей запрета изменения данных не может быть изменен!");
		КонецЕсли;
	КонецЕсли;

	//// Изменение номера и даты документа.
	//НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияОсновныхПолейОбъекта(ДокументОбъект, ФормаДокумента);
	
	// Блокировка.
	//Если (Не ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "НеБлокировать")) И (Не ФормаДокумента.ТолькоПросмотр) Тогда
	//	Пока Истина Цикл
	//		Попытка
	//			ДокументОбъект.Заблокировать(); 
	//			Прервать;
	//		Исключение
	//			Результат = ____Вопрос("Невозможно заблокировать документ, документ используется другим пользователем." + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Повторить попытку блокировки записи?", РежимДиалогаВопрос.ПовторитьОтмена);
	//			Если (Результат = КодВозвратаДиалога.Повторить) Тогда
	//				Продолжить;
	//			Иначе
	//				ФормаДокумента.ТолькоПросмотр = Истина;
	//				Прервать;
	//			КонецЕсли;
	//		КонецПопытки;
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры // ПриОткрытииДокумента()

// Обработчик события ПриИзмененииДанных формы документа.
//
Процедура ПриИзмененииДанныхДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Перем МетаданныеДокумента;
	
	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// Метаданны.
	Если Не Параметры.Свойство("Метаданны", МетаданныеДокумента) Тогда
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли; 
	Параметры.Вставить("Метаданны", МетаданныеДокумента);
		
	// Исходные значения.
	ИсходныеЗначения = Новый Структура("Проведен,ПометкаУдаления,Распечатан",
									   ДокументОбъект.Проведен,
									   ДокументОбъект.ПометкаУдаления,
									   ДокументОбъект.Распечатан);
	Параметры.Вставить("ИсходныеЗначения", ИсходныеЗначения);
	
КонецПроцедуры // ПриИзмененииДанныхДокумента()

// Обработчик события ПередЗакрытием формы документа.
//
Процедура ПередЗакрытиемДокумента(ДокументОбъект, ФормаДокумента, Отказ, СтандартнаяОбработка) Экспорт

КонецПроцедуры // ПередЗакрытиемДокумента()

// Обработчик события ПриЗакрытии формы документа.
//
Процедура ПриЗакрытииДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	// Блокировка.
	Если ДокументОбъект.Заблокирован() Тогда
		ДокументОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытииДокумента()

// Обработчик события ПередЗаписью формы документа.
//
Процедура ПередЗаписьюДокумента(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	//// Дата запрета редактирования.
	//Если Не Отказ Тогда
	//	Отказ = Не НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, Неопределено);
	//	Если Отказ Тогда
	//		____Ошибка("Документ за границей запрета изменения данных не может быть записан!");
	//	КонецЕсли;
	//КонецЕсли;
	
	// Основные события.
	Если Не Отказ Тогда
		ИсходныеЗначения = Параметры.ИсходныеЗначения;
		ОсновныеСобытия = Новый Структура("Проведение,ОтменаПроведения,Уадление,ОтменаУадления,Печать,ОтменаПечати",
										  ДокументОбъект.Проведен И (Не ИсходныеЗначения.Проведен),
											  (Не ДокументОбъект.Проведен) И ИсходныеЗначения.Проведен,
										  ДокументОбъект.ПометкаУдаления И (Не ИсходныеЗначения.ПометкаУдаления),
											  (Не ДокументОбъект.Проведен) И ИсходныеЗначения.Проведен,
										  ДокументОбъект.Распечатан И (Не ИсходныеЗначения.Распечатан),
											  (Не ДокументОбъект.Распечатан) И ИсходныеЗначения.Распечатан);
		Параметры.Вставить("ОсновныеСобытия", ОсновныеСобытия);
	КонецЕсли;
	
	// История изменения.
	Если Не Отказ Тогда
		ИсторияИзменений.УстановитьНовыйИдентификаторТранзации(ДокументОбъект);
	КонецЕсли;
	
	// Причина отказа и перенос номенклатуры.
	Если Не Отказ Тогда
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		Если ДокументОбъект.ПометкаУдаления Тогда
			
			// -- Черный список.
			Если Не Отказ Тогда
				Если ОбщегоНазначения.РежимFrontOffice() И (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) И ЗначениеЗаполнено(ДокументОбъект.Контрагент) И (Не УправлениеЗаказами.КонтрагентВЧерномСписке(ДокументОбъект.Контрагент)) Тогда
					Параметры.Вставить("ЧерныйСписокДобавление", Ложь);	
					Параметры.Вставить("ЧерныйСписокКомментарий");	
				КонецЕсли;
			КонецЕсли;
			
			// -- Перенос номенклатуры.
			Если Не Отказ Тогда
				Если ОбщегоНазначения.РежимFrontOffice() И (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) И Булево(ДокументОбъект.Товары.Количество() + ДокументОбъект.Услуги.Количество()) Тогда
					
					Отказ = Не ВыборПереносимойНоменклатуры(ДокументОбъект, Истина);
					
				КонецЕсли;
			КонецЕсли;
			
			// -- Причина отказа.
			Если Не Отказ Тогда
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПричинаОтказа", МетаданныеДокумента) И ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОбъект.ПричинаОтказа) Тогда
					
					// ---- Предустановка причиын отказа.
					Параметры.Свойство("ПричинаОтказа", ДокументОбъект.ПричинаОтказа);
					
					// ---- Причиына отказа.
					Если (Не ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "НеВыбиратьПричинуОтказа")) И ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОбъект.ПричинаОтказа) Тогда
						
						Если Параметры.Свойство("ЧерныйСписокДобавление") Тогда
							Отказ = Не ВыборПричиныОтказаИЧерногоСписка(ДокументОбъект.ПричинаОтказа, Параметры.ЧерныйСписокДобавление, Параметры.ЧерныйСписокКомментарий);
						Иначе
							Отказ = Не ВыборПричиныОтказа(ДокументОбъект.ПричинаОтказа);
						КонецЕсли;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Или (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
			Если (ОбщегоНазначения.РежимFrontOffice() и ОбщегоНазначения.ЕстьРеквизитДокумента("Оплата", МетаданныеДокумента)) Тогда
				//Если ЗначениеЗаполнено(ДокументОбъект.Оплата) Тогда
				ДокументОбъект.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
			КонецЕсли;
		КонецЕсли;					
		
	КонецЕсли;
	
	// Перенос номенклатуры.
	ПередЗаписьюДокументаПереносНоменклатуры(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения);

	// Бизнес логика.
	Если Не Отказ Тогда
		УправлениеРеализациямиТоваровУслуг.ПередЗаписьюДокументаРеализацияТоваровУслуг(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения);
		УправлениеНакладнымиНаДоставку.ПередЗаписьюДокументаНакладнаяНаДоставку(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюДокумента()

// Обработчик события ПередЗаписью формы документа.
//
Процедура ПриЗаписиДокумента(ДокументОбъект, ФормаДокумента, Отказ) Экспорт

	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// Основные события.
	Если Не Отказ Тогда
		ИсходныеЗначения = Параметры.ИсходныеЗначения;
		ОсновныеСобытия = Новый Структура("Проведение,ОтменаПроведения,Уадление,ОтменаУадления,Печать,ОтменаПечати",
										  ДокументОбъект.Проведен И (Не ИсходныеЗначения.Проведен),
											  (Не ДокументОбъект.Проведен) И ИсходныеЗначения.Проведен,
										  ДокументОбъект.ПометкаУдаления И (Не ИсходныеЗначения.ПометкаУдаления),
											  (Не ДокументОбъект.Проведен) И ИсходныеЗначения.Проведен,
										  ДокументОбъект.Распечатан И (Не ИсходныеЗначения.Распечатан),
											  (Не ДокументОбъект.Распечатан) И ИсходныеЗначения.Распечатан);
		Параметры.Вставить("ОсновныеСобытия", ОсновныеСобытия);
	КонецЕсли;
	
	// Перенос номенклатуры.
	Если Не Отказ Тогда
		Если ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ПереносНоменклатуры") Тогда
			ПереносПараметры = Параметры.ПереносПараметры;
			
			// -- Получатель.
			Если ПереносПараметры.Переносить Тогда
				Результат = ДокументУстановитьРеквизит(ПереносПараметры.Получатель, "ПометкаУдаления", Ложь) И
							ДокументЗаписать(ПереносПараметры.Получатель, Неопределено, ПереносПараметры.РежимЗаписи);
							
				Отказ = Не Результат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ПереносНоменклатуры") И Параметры.ПереносПараметры.Переносить Тогда
		ДокументЗакрыть(ПереносПараметры.Получатель, Неопределено);
	КонецЕсли;
	
	// Бизнес логика.
	Если Не Отказ Тогда
		УправлениеРеализациямиТоваровУслуг.ПриЗаписиДокументаРеализацияТоваровУслуг(ДокументОбъект, ФормаДокумента, Отказ);
		УправлениеНакладнымиНаДоставку.ПриЗаписиДокументаНакладнаяНаДоставку(ДокументОбъект, ФормаДокумента, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписиДокумента()

// Обработчик события ПослеЗаписи формы документа.
//
Процедура ПослеЗаписиДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// Печать.
	ПослеЗаписиДокументаПечать(ДокументОбъект, ФормаДокумента);
	
	// Исходные значения.
	ИсходныеЗначения = Новый Структура("Проведен,ПометкаУдаления,Распечатан,Оплачен",
									   ДокументОбъект.Проведен,
									   ДокументОбъект.ПометкаУдаления,
									   ОбщегоНазначения.ЕстьРеквизитДокумента("Распечатан", Параметры.Метаданны) И ДокументОбъект.Распечатан);
	ЗаполнитьЗначенияСвойств(Параметры.ИсходныеЗначения, ИсходныеЗначения);										   
	
	// История изменения.
	Если Не ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ВыполнениеВнеФормы") Тогда
		ИсторияИзменений.ПослеЗаписиОбъекта(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписиДокумента()


// Обработчик события ПередЗаписью.ПереносНоменклатуры формы документа.
//
Процедура ПередЗаписьюДокументаПереносНоменклатуры(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// Перенос номенклатуры.
	Если Не Отказ Тогда
		Если ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ПереносНоменклатуры") Тогда
			ПереносПараметры = Параметры.ПереносПараметры;
			
			// -- Получатель.
			Если ПереносПараметры.Переносить Тогда
				Отказ = Не ДокументОткрыть(Параметры.ПереносПараметры.Получатель, Неопределено, , ДокументУстановитьДополнительныеСвойства(ДокументУстановитьПредотвращениеПроверки(), ДокументОбъект));
			КонецЕсли;
			
			// -- Перенос.
			Если Не Отказ Тогда
				
				// -- Получатель.
				Если ПереносПараметры.Переносить Тогда
					
					Если ПереносПараметры.Получатель.ЭтоНовый() Тогда
						ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ПереносПараметры.Получатель, ДокументОбъект);
					Иначе
						ПереносПараметры.Получатель.ПометкаУдаления = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ПереносПараметры.Оплата) Тогда
						ПереносПараметры.Получатель.Оплата = ПереносПараметры.Оплата;
						РаботаСДиалогами.ПриИзмененииОплаты(ПереносПараметры.Получатель);
					КонецЕсли;
					
				КонецЕсли;
				
				// -- Дополнительные реквизиты.
				ДополнительныеРеквизиты = Новый Структура("Списание,ПричинаОтказа,ДокументРезерва", ПереносПараметры.Списание, ПереносПараметры.ПричинаОтказа, ДокументОбъект.Ссылка);
					
				// -- Перенос номенкалтуры.
				Если ПереносПараметры.Переносить Тогда
					ОбработкаТабличныхЧастей.ПеренестиСодержимоеТабЧасти(ДокументОбъект, ПереносПараметры.Получатель, ПереносПараметры.НоменклатураПереноса, ПереносПараметры.НоменклатураУдаления, ДополнительныеРеквизиты);
				Иначе
					ОбработкаТабличныхЧастей.ПеренестиСодержимоеТабЧасти(ДокументОбъект, Неопределено, Неопределено, ПереносПараметры.НоменклатураУдаления);
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюДокументаПереносНоменклатуры()


// Обработчик события ПослеЗаписи.Печать формы документа.
//
Процедура ПослеЗаписиДокументаПечать(ДокументОбъект, ФормаДокумента) Экспорт

	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// Печать.
	Если Не ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "НеПечатать") Тогда
		Если Не ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ОтложеннаяПечать") Тогда
		//Если ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "Печать") И (Не ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ОтложеннаяПечать")) Тогда
			УправлениеРеализациямиТоваровУслуг.ПриПечатиДокументаРеализацияТоваровУслуг(ДокументОбъект, ФормаДокумента);
			УправлениеНакладнымиНаДоставку.ПриПечатиДокументаНакладнаяНаДоставку(ДокументОбъект, ФормаДокумента);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры // ПослеЗаписиДокумента()

          
Процедура ПередОткрытиемОтчета(ОтчетОбъект, ФормаОтчета, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не НастройкаПравДоступа.ОпределитьДоступностьВыполненияОтчетаОбработки(ОтчетОбъект) Тогда
		Отказ = Истина; ____Ошибка("Недостаточно прав доступа!");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытиемОтчета()
