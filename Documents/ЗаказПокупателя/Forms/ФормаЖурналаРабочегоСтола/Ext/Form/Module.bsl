
&НаКлиенте
Процедура УстановитьОбновление(ПриОткрытии = Ложь, ПриСменеРежимаРедактирования = Ложь)
	
	// Текущая дата.
	ТекущаяДата = ТекущаяДата();
	
	// Настройка формы.
	Если УпрощенныеДатаПериодКлиентСервер.НаСегодня(Период) Тогда
		Элементы.ГруппаТекущаяДатаСейчас.ТекущаяСтраница = Элементы.ГруппаТекущаяДата;
	Иначе
		Элементы.ГруппаТекущаяДатаСейчас.ТекущаяСтраница = Элементы.ГруппаСейчас;
	КонецЕсли;
	
	
	// Данные.
	Если ПриОткрытии Тогда
	Иначе
		Если РежимРедактирования Или РежимРедактированияСтроки Тогда
		Иначе
			УстановитьОбновлениеНаСервере(УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(Период), Ресторан, Родитель, Состояние, Поиск, Сортировка, ПараметрыРасчета, ПриСменеРежимаРедактирования);
		КонецЕсли;
	КонецЕсли;
	
	// Автообновление.
	ОтключитьОбработчикОжидания("ОбработчикОжидания");
	ПодключитьОбработчикОжидания("ОбработчикОжидания", 60);
	
КонецПроцедуры // УстановитьОбновление()

&НаСервере
Процедура УстановитьОбновлениеНаСервере(Период, Ресторан, Родитель, Состояние, Поиск, Сортировка, ПараметрыРасчета, ПриСменеРежимаРедактирования = Ложь)
	
	// Дата.
	НачалоПериода = (Период);
	ОкончаниеПериода = (Период + 3600 - 1);
	
	// Состояние.
	Если (Состояние = Перечисления.СостояниеЗаказовПокупателей.Открытые) Тогда
		ДопустимыеСостояния = Новый Массив;
		ДопустимыеСостояния.Добавить(Перечисления.СостояниеЗаказовПокупателей.Открытые);
		ДопустимыеСостояния.Добавить(Перечисления.СостояниеЗаказовПокупателей.Текущие);
		ДопустимыеСостояния.Добавить(Перечисления.СостояниеЗаказовПокупателей.Просроченные);
	ИначеЕсли ЗначениеЗаполнено(Состояние) Тогда
		ДопустимыеСостояния = Состояние;
	Иначе
		ДопустимыеСостояния = Неопределено;
	КонецЕсли;
	
	// Данные.
	СостояниекРезервов = РегистрыСведений.СостояниеЗаказовПокупателей.ПолучитьСостояниеРезервов(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, ДопустимыеСостояния, Поиск, Сортировка, ПараметрыРасчета);
	
	СоответствиеАктуальных = Новый Соответствие; МассивУдаляемых = Новый Массив; Индекс = 0;
	Для Каждого СтрокаСписка Из Данные.Список Цикл
		Если (СостояниекРезервов.Найти(СтрокаСписка.Ссылка, "Ссылка") = Неопределено) Тогда
			МассивУдаляемых.Добавить(СтрокаСписка);
		Иначе
			СоответствиеАктуальных[СтрокаСписка.Ссылка] = СтрокаСписка;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСостояния Из СостояниекРезервов Цикл
		СтрокаСписка = СоответствиеАктуальных[СтрокаСостояния.Ссылка];
		Если (СтрокаСписка = Неопределено) Тогда
			СтрокаСписка = Данные.Список.Вставить(Индекс);
		Иначе
			ИндексСтроки = Данные.Список.Индекс(СтрокаСписка); Данные.Список.Сдвинуть(ИндексСтроки, Индекс - ИндексСтроки);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаСписка, СтрокаСостояния);
		Индекс = Индекс + 1;
	КонецЦикла;
		
	Для Каждого СтрокаСписка Из МассивУдаляемых Цикл
		Данные.Список.Удалить(СтрокаСписка);
	КонецЦикла;
	
КонецПроцедуры // УстановитьОбновлениеНаСервере()

&НаСервере
Процедура УстановитьУсловноеОформлениеНаСервере()
	
	ТаблицаСтиля = РегистрыСведений.СтилиСхемСтолов.ПолучитьТаблицуСтиля();
	
	Для Каждого СтрокаТаблицыСтиля Из ТаблицаСтиля Цикл
		СостояниеЗаказовПокупателей = (ТипЗнч(СтрокаТаблицыСтиля.Состояние) = Тип("ПеречислениеСсылка.СостояниеЗаказовПокупателей"));	
		
		Если СостояниеЗаказовПокупателей Тогда
			
			Если СостояниеЗаказовПокупателей Тогда
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			КонецЕсли;
				
			ЭлементУсловногоОформления.Представление = "ПрограммноеОформление";
			ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			Если (Не СтрокаТаблицыСтиля.СписокЦветТекста = Неопределено) Тогда
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", СтрокаТаблицыСтиля.СписокЦветТекста);
			КонецЕсли;
			Если (Не СтрокаТаблицыСтиля.СписокЦветФона = Неопределено) Тогда
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", СтрокаТаблицыСтиля.СписокЦветФона);
			КонецЕсли;
			Если СостояниеЗаказовПокупателей Тогда
				ЗаполнитьЗначенияСвойств(ЭлементУсловногоОформления.Поля.Элементы.Добавить(), 
					Новый Структура("Поле,Использование", 
						Новый ПолеКомпоновкиДанных("Список"), 
						Истина));
			КонецЕсли;
			Если (СтрокаТаблицыСтиля.Состояние = Перечисления.СостояниеЗаказовПокупателей.Пересекающиеся) Тогда
				ЗаполнитьЗначенияСвойств(ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), 
					Новый Структура("ВидСравнения,Использование,ЛевоеЗначение,ПравоеЗначение", 
						ВидСравненияКомпоновкиДанных.Равно,
						Истина,
						Новый ПолеКомпоновкиДанных("Данные.Список.СостояниеДокументаПересекающийся"),
						Истина));
			Иначе
				ЗаполнитьЗначенияСвойств(ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), 
					Новый Структура("ВидСравнения,Использование,ЛевоеЗначение,ПравоеЗначение", 
						ВидСравненияКомпоновкиДанных.Равно,
						Истина,
						Новый ПолеКомпоновкиДанных("Данные.Список.СостояниеДокумента"),
						СтрокаТаблицыСтиля.Состояние));
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьУсловноеОформлениеНаСервере()


&НаКлиенте
Процедура Переход(Команда)
	
	Перем Параметры;
	
	ОчиститьСообщения();
	
	Если (Команда = Неопределено) Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные; ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	
		РежимНазначенияСписка = Новый Структура;
		РежимНазначенияСписка.Вставить("Период", УпрощенныеДатаПериодКлиентСервер.ПолучитьУпрощенныйПериод(Период));
		РежимНазначенияСписка.Вставить("Ресторан", Ресторан);
		РежимНазначенияСписка.Вставить("Родитель", Родитель);
		РежимНазначенияСписка.Вставить("Сортировка", Сортировка);
		РежимНазначенияСписка.Вставить("Состояние", Состояние);
		РежимНазначенияСписка.Вставить("РежимРедактирования", РежимРедактирования);
		РежимНазначенияСписка.Вставить("Данные", Данные);
		РежимНазначенияСписка.Вставить("Объект", Объект);
		РежимНазначенияСписка.Вставить("ТекущаяСтрока", ТекущаяСтрока);
		РежимНазначенияСписка.Вставить("ИсторияПоиска", Элементы.Поиск.СписокВыбора.ВыгрузитьЗначения());
		РежимНазначенияСписка = Новый ФиксированнаяСтруктура(РежимНазначенияСписка);
	
		Параметры = Новый Структура;
		Параметры.Вставить("Период", ТекущиеДанные.Дата);
		Параметры.Вставить("Ресторан", ТекущиеДанные.Ресторан);
		Параметры.Вставить("Родитель", Родитель);
		Параметры.Вставить("РежимНазначенияСписка", РежимНазначенияСписка);
	Иначе
		Параметры = Новый Структура;
		Параметры.Вставить("Период", УпрощенныеДатаПериодКлиентСервер.ПолучитьУпрощенныйПериод(Период));
		Параметры.Вставить("Ресторан", Ресторан);
		Параметры.Вставить("Родитель", Родитель);
		Параметры.Вставить("РежимНазначенияСписка", Неопределено);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаСхемыРабочегоСтола", Параметры, ВладелецФормы, , __УправляемыеФормыКлиент.ПолучитьОкно(Окно));
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Закрыть();
	#КонецЕсли
	
КонецПроцедуры // Переход()

&НаКлиенте
Процедура Сейчас(Команда)

	УпрощенныеДатаПериодКлиентСервер.УстановитьМоментВремени(Период, "Сегодня");
	УстановитьОбновление();
	
КонецПроцедуры // Сейчас()


&НаКлиенте
Процедура РесторанПриИзменении(Элемент)
	
	// Настройка формы.
	УстановитьОбновление();
	
КонецПроцедуры // РесторанПриИзменении()

&НаКлиенте
Процедура РесторанОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // РесторанОчистка()

&НаКлиенте
Процедура РесторанОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // РесторанОткрытие()

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	// Настройка формы.
	УстановитьОбновление();
	
КонецПроцедуры // РодительПриИзменении()

&НаКлиенте
Процедура РодительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // РодительОчистка()

&НаКлиенте
Процедура РодительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РодительОткрытие()

&НаКлиенте
Процедура ПериодДатаПриИзменении(Элемент)
	
	УпрощенныеДатаПериодКлиентСервер.ДатаПриИзменении(Период, Элемент);
	УстановитьОбновление();
	
КонецПроцедуры // ПериодДатаПриИзменении()

&НаКлиенте
Процедура ПериодДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УпрощенныеДатаПериодКлиентСервер.ДатаНачалоВыбора(Период, Элемент, ДанныеВыбора, СтандартнаяОбработка) Тогда
		УстановитьОбновление();
	КонецЕсли;
	
КонецПроцедуры // ПериодДатаНачалоВыбора()

&НаКлиенте
Процедура ПериодДатаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УпрощенныеДатаПериодКлиентСервер.ДатаНачалоВыбораИзСписка(Период, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ПериодДатаНачалоВыбораИзСписка()

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	// Настройка формы.
	УстановитьОбновление();
	
КонецПроцедуры  // СостояниеПриИзменении()

&НаКлиенте
Процедура СостояниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // СостояниеПриИзменении()

&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	
	Поиск = УправлениеКонтрагентамиКлиентСервер.ПолучитьНормальнуюСтроку(Поиск);
		
	// Список выбора.			
	Если Не ПустаяСтрока(Поиск) Тогда
		ЭлементСпискаВыбора = Элемент.СписокВыбора.НайтиПоЗначению(Поиск);
		Если (ЭлементСпискаВыбора = Неопределено) Тогда
			Элемент.СписокВыбора.Добавить(Поиск);
			Если (Элемент.СписокВыбора.Количество() > Элемент.ВысотаСпискаВыбора) Тогда
				Элемент.СписокВыбора.Удалить(Элемент.СписокВыбора.Количество() - 1);
			КонецЕсли;
		Иначе
			Элемент.СписокВыбора.Сдвинуть(ЭлементСпискаВыбора, -Элемент.СписокВыбора.Индекс(ЭлементСпискаВыбора));
		КонецЕсли;
	КонецЕсли;
	
	// Настройка формы.
	УстановитьОбновление();
	
КонецПроцедуры // ПоискПриИзменении()

&НаКлиенте
Процедура ПоискНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Булево(Элемент.СписокВыбора.Количество());
	
КонецПроцедуры // ОтборПоискНачалоВыбораИзСписка()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Параметры.
	Если (Параметры.РежимНазначенияСписка = Неопределено) Тогда
		РежимНазначенияСписка = Ложь;
	Иначе
		РежимНазначенияСписка = Истина;
		ДанныеРежимаНазначенияСписка = Параметры.РежимНазначенияСписка;
		
		Параметры.Период = ДанныеРежимаНазначенияСписка.Период;
		Параметры.Ресторан = ДанныеРежимаНазначенияСписка.Ресторан;
		Параметры.Родитель = ДанныеРежимаНазначенияСписка.Родитель;
		Параметры.Состояние = ДанныеРежимаНазначенияСписка.Состояние;
		Параметры.Сортировка = ДанныеРежимаНазначенияСписка.Сортировка;
    КонецЕсли;
	УпрощенныеДатаПериодКлиентСервер.УстановитьУпрощенныйПериод(Период, ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(Параметры.Период, "Сейчас"));
	Ресторан = ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(Параметры.Ресторан, Справочники.Рестораны.ОсновнойРесторан());
	Родитель = Параметры.Родитель;
	Состояние = ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(Параметры.Состояние, Перечисления.СостояниеЗаказовПокупателей.Открытые);
	Поиск = Параметры.Поиск;
	Сортировка = ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(Параметры.Сортировка, "Дата");
	
	// Переменные.
	ПараметрыРасчета = РегистрыСведений.СостояниеЗаказовПокупателей.ПолучитьПараметрыРасчетаСостоянияЗаказовПокупателей();
	ИнтервалВыбораВремени = РегистрыСведений.СхемыСтолов.ПолучитьИнтервалВыбораВремени();
	
	// Дата.
	УпрощенныеДатаПериодКлиентСервер.УстановитьИнтервалВыбораВремени(Период, ИнтервалВыбораВремени.МинимальныйЧас, ИнтервалВыбораВремени.МаксимальныйЧас);
	
	// Схема.
	СхемаДоступна = РегистрыСведений.СхемыСтолов.КоличествоНастроенныхОднаИБолее();
	
	// Данные.
	Если РежимНазначенияСписка Тогда
		
		КопироватьДанныеФормы(ДанныеРежимаНазначенияСписка.Данные, Данные);
		ТекущиеДанные = ДанныеРежимаНазначенияСписка.Данные.Список.НайтиПоИдентификатору(ДанныеРежимаНазначенияСписка.ТекущаяСтрока);
		КопироватьДанныеФормы(ТекущиеДанные, Объект);
		УстановитьСостояниеДействияОбъектаНаСервере(ТекущиеДанные);
		РежимРедактирования = (ДанныеРежимаНазначенияСписка.РежимРедактирования Или ТекущиеДанные.Изменение);
		
		УстановитьРежимНазначенияСпискаНаСервере(ДанныеРежимаНазначенияСписка);
		
		ОбъектСортироватьНаСервереПоДанным(Сортировка, Истина);
		
	Иначе
		
		ОбъектСортироватьНаСервереПоДанным(Сортировка, Истина);
		УстановитьОбновлениеНаСервере(УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(Период), Ресторан, Родитель, Состояние, Поиск, Сортировка, ПараметрыРасчета);
		
	КонецЕсли;
	
	// Настройка формы.
	Элементы.Ресторан.Видимость = Справочники.Рестораны.КоличествоАктуальныхРесторановБолееОдного();
	Если РегистрыСведений.СхемыСтолов.КоличествоНастроенныхСхемБолееОдной() Тогда
		Элементы.Родитель.СписокВыбора.ЗагрузитьЗначения(РегистрыСведений.СхемыСтолов.ПолучитьНастроенныеСхемы());
		Элементы.Родитель.СписокВыбора.Вставить(0, Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
		УстановитьСвойство(Элементы.Родитель.СписокВыбора.НайтиПоЗначению(Справочники.Столы.ПустаяСсылка()), "Представление", НСтр("ru = 'Столы'; uk = 'Столи'"));
	Иначе
		Элементы.Родитель.Видимость = Ложь;
	КонецЕсли;
	Элементы.РесторанРежимРедактирования.Видимость = Элементы.Ресторан.Видимость;
	Элементы.РодительРежимРедактирования.Видимость = Элементы.Родитель.Видимость;
	Если РежимНазначенияСписка Тогда
		Элементы.Поиск.СписокВыбора.ЗагрузитьЗначения(ДанныеРежимаНазначенияСписка.ИсторияПоиска);
	КонецЕсли;
	Элементы.СписокРесторан.Видимость = Элементы.Ресторан.Видимость;
	УстановитьУсловноеОформлениеНаСервере();
	
	// Проверяемые реквизиты.
	ОбъектМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПроверяемыеРеквизыты = Новый Массив;
	
	ПроверяемыйРеквизыт = Новый Структура;
	ПроверяемыйРеквизыт.Вставить("Имя", "КонтрагентПредставление");
	ПроверяемыйРеквизыт.Вставить("Синоним", ОбъектМетаданные.Реквизиты[ПроверяемыйРеквизыт.Имя].Синоним);
	ПроверяемыйРеквизыт.Вставить("Поле", "КонтрагентПредставление");
	ПроверяемыйРеквизыт.Вставить("Распечатан", Ложь);
	ПроверяемыеРеквизыты.Добавить(ПроверяемыйРеквизыт);
	
	ПроверяемыйРеквизыт = Новый Структура;
	ПроверяемыйРеквизыт.Вставить("Имя", "ТелефонПредставление");
	ПроверяемыйРеквизыт.Вставить("Синоним", ОбъектМетаданные.Реквизиты[ПроверяемыйРеквизыт.Имя].Синоним);
	ПроверяемыйРеквизыт.Вставить("Поле", "ТелефонПредставление");
	ПроверяемыйРеквизыт.Вставить("Распечатан", Ложь);
	ПроверяемыеРеквизыты.Добавить(ПроверяемыйРеквизыт);
	
	ПроверяемыйРеквизыт = Новый Структура;
	ПроверяемыйРеквизыт.Вставить("Имя", "Стол");
	ПроверяемыйРеквизыт.Вставить("Синоним", ОбъектМетаданные.Реквизиты[ПроверяемыйРеквизыт.Имя].Синоним);
	ПроверяемыйРеквизыт.Вставить("Поле", "СтолПредставление");
	ПроверяемыйРеквизыт.Вставить("Распечатан", Истина);
	ПроверяемыеРеквизыты.Добавить(ПроверяемыйРеквизыт);
	
	ОбъектПроверяемыеРеквизыты = ОбщегоНазначения.ФиксированныеДанные(ПроверяемыеРеквизыты);
	
	// Дата.
	УпрощенныеДатаПериодКлиентСервер.УстановитьИнтервалВыбораВремени(ОбъектПериод, ИнтервалВыбораВремени.МинимальныйЧас, ИнтервалВыбораВремени.МаксимальныйЧас);
	
	// Автокорректировка наименования.
	ОбъектАвтокорректировкаНаименованийКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьАвтокорректировкуНаименованийКонтрагентов");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриСозданииСозданиеЭлементовНаСервере()
	
	// Состояние.
	
КонецПроцедуры // ПриСозданииСозданиеЭлементовНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Настройка формы.
	УстановитьОбновление(Истина);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// Объект.
	Если __УправлениеДаннымиКлиентСервер.ОповещениеИзмененияЗаказаПокупателя(ИмяСобытия) Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр);
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр)

	// Объект.
	Если __УправлениеДаннымиКлиентСервер.ОповещениеИзмененияЗаказаПокупателя(ИмяСобытия) Тогда
		Для Каждого СтрокаСписка Из Данные.Список.НайтиСтроки(Новый Структура("Ссылка", Параметр)) Цикл
			ТекущиеДанные = СтрокаСписка;
			
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Параметр); 
			
			ТекущиеДанные.Столы = Неопределено;
			ТекущиеДанные.Добавление = Ложь;
			ТекущиеДанные.Изменение = Ложь;
			ТекущиеДанные.Удаление = Ложь;
			ТекущиеДанные.Проведение = Ложь;
			
			УстановитьСостояниеСтрокиНаСервере(ТекущиеДанные);
			УстановитьСостояниеДействияОбъектаНаСервере(ТекущиеДанные);
			
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещенияНаСервере()

&НаКлиенте
Процедура ОбработчикОжидания()
	
	// Настройка формы.
	УстановитьОбновление();
	
КонецПроцедуры // ОбработчикОжидания()



&НаСервере
Функция ПолучитьАктульныеСтолыНаСервере(Ссылка)
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Стол Из Ссылка.Столы.ВыгрузитьКолонку("Стол") Цикл
		Результат.Добавить(Стол);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПолучитьАктульныеСтолыНаСервере()


&НаКлиенте
Процедура ОбъектOK(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь; ОбъектOKНаСервере(Отказ);
	
	Если Не Отказ Тогда
		УстановитьРежимРедактирования(Ложь);
	КонецЕсли;
	
	// Настройка формы.
	Если Не Отказ Тогда
		УстановитьОбновление(Ложь, Истина);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Изменения записаны'; uk = 'Зміни записані'");
		ТексПояснения = НСтр("ru = 'В журнал резервов внесены изменения'; uk = 'В журнал резервів внесено зміни'");
		ПоказатьОповещениеПользователя(
			ТекстСообщения,
			,
			ТексПояснения,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

КонецПроцедуры // ОбъектOK()

&НаСервере
Процедура ОбъектOKНаСервере(Отказ)
	
	Перем Объект;
	
	Для Каждого СтрокаСписка Из Данные.Список Цикл
		Если СтрокаСписка.Добавление Или СтрокаСписка.Изменение Или СтрокаСписка.Удаление Или СтрокаСписка.Проведение Тогда
			
			ОтказТекущего = Ложь;
			
			// Режим записи.
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			Если СтрокаСписка.Проведение Тогда
				Если СтрокаСписка.Проведен Тогда
					СтрокаСписка.Распечатан = Ложь;
					РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
				Иначе
					СтрокаСписка.ПометкаУдаления = Ложь;
					СтрокаСписка.Распечатан = Истина;
					РежимЗаписи = РежимЗаписиДокумента.Проведение;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаСписка.Удаление Тогда
				СтрокаСписка.ПометкаУдаления = Не СтрокаСписка.ПометкаУдаления;
				СтрокаСписка.Распечатан = Ложь;
				Если СтрокаСписка.Проведен Тогда
					РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
				Иначе
					РежимЗаписи = РежимЗаписиДокумента.Запись;
				КонецЕсли;
			КонецЕсли;
			
			Объект = СтрокаСписка; ОбъектСтолы = СтрокаСписка.Столы;
			
			// Столы.
			Если (Не ОбъектСтолы = Неопределено) Тогда
				Если ОбъектСтолы.Количество() Тогда
					Объект.Стол = Объект.Столы[0].Значение;
				Иначе
					Объект.Стол = Неопределено;
				КонецЕсли;
			КонецЕсли;
				
			// Проверяемые реквизиты.
			Для Каждого ПроверяемыйРеквизыт Из ОбъектПроверяемыеРеквизыты Цикл
				Если (ПроверяемыйРеквизыт.Распечатан = Объект.Распечатан) Или (Не ПроверяемыйРеквизыт.Распечатан) Тогда
					Если Не ЗначениеЗаполнено(Объект[ПроверяемыйРеквизыт.Имя]) Тогда
						
						Поле = "Список[" + XMLСтрока(Данные.Список.Индекс(СтрокаСписка)) + "]." + ПроверяемыйРеквизыт.Поле;
						ТекстСообщения = НСтр("ru = 'Поле ""[Синоним]"" не заполнено'; uk = 'Поле ""[Синоним]"" не заповнене'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Синоним]", ПроверяемыйРеквизыт.Синоним);
						__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , Поле, "Данные", ОтказТекущего);
						
						Отказ = Отказ Или ОтказТекущего;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Запись.
			Если Не ОтказТекущего Тогда
				
				Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
					ТекущийОбъект = Объект.Ссылка.ПолучитьОбъект();
				Иначе
					ТекущийОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
					ТекущийОбъект.Модуль = Перечисления.МодулиИПодсистемы.Ресторан;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущийОбъект, Объект);
				
				// Столы.
				Если (Не ОбъектСтолы = Неопределено) Тогда
					ТекущийОбъект.Столы.Очистить();
					Для Каждого ЭлеменСтолов Из ОбъектСтолы Цикл
						ТекущийОбъект.Столы.Добавить().Стол = ЭлеменСтолов.Значение;
					КонецЦикла;
					Если ТекущийОбъект.Столы.Количество() Тогда
						ТекущийОбъект.Стол = ТекущийОбъект.Столы[0].Стол;
					Иначе
						ТекущийОбъект.Стол = Неопределено;
					КонецЕсли;
				КонецЕсли;
		
				Попытка
					ТекущийОбъект.Записать(РежимЗаписи);
				Исключение
					
					Поле = "Список[" + XMLСтрока(Данные.Список.Индекс(СтрокаСписка)) + "]." + "КонтрагентПредставление";
					ТекстСообщения = НСтр("ru = 'Не удалось записать документ'; uk = 'Не вдалося записати документ'");
					__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , Поле, "Данные", ОтказТекущего);
					
					Отказ = Отказ Или ОтказТекущего;
					
				КонецПопытки;
		
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбъектOKНаСервере()

&НаКлиенте
Процедура ОбъектОтмена(Команда)
	
	ОчиститьСообщения();
	
	УстановитьРежимРедактирования(Ложь);
	
	// Настройка формы.
	УстановитьОбновление(Ложь, Истина);
	
КонецПроцедуры // ОбъектОтмена()

&НаКлиенте
Процедура ОбъектПровести(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если (ТекущиеДанные = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	Если (ТекущийЭлемент = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Проведение = Не ТекущиеДанные.Проведение;
	ТекущиеДанные.Удаление = Ложь;

	УстановитьСостояниеДействияОбъекта(ТекущиеДанные);
	УстановитьРежимРедактирования(Истина);
	
КонецПроцедуры // ОбъектПровести()

&НаКлиенте
Процедура ОбъектСортировать(Команда)
	
	Если (Элементы.Список.ТекущийЭлемент = Неопределено) Или
		 (Элементы.Список.ТекущийЭлемент = Элементы.ГруппаКомментарийПричинаОтказа) Или
		 (Элементы.Список.ТекущийЭлемент = Элементы.СписокКомментарий) Или
		 (Элементы.Список.ТекущийЭлемент = Элементы.СписокПричинаОтказа) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСортироватьНаСервереПоЭлементу();
	
КонецПроцедуры // ОбъектСортировать()

&НаСервере
Процедура ОбъектСортироватьНаСервереПоЭлементу()
	
	ТекущийЭлементСписка = Элементы.Список.ТекущийЭлемент;
	Если (ТекущийЭлементСписка = Элементы.СписокГруппаКартинка) Тогда
		ТекущийЭлементСписка = Элементы.СписокПериодДата;
	ИначеЕсли (ТекущийЭлементСписка = Элементы.СписокГруппаДата) Тогда
		ТекущийЭлементСписка = Элементы.СписокПериодДата;
	ИначеЕсли (ТекущийЭлементСписка = Элементы.СписокИндексКартинки) Тогда
		ТекущийЭлементСписка = Элементы.СписокПериодДата;
	ИначеЕсли (ТекущийЭлементСписка = Элементы.СписокИндексКартинкиДействия) Тогда
		ТекущийЭлементСписка = Элементы.СписокПериодДата;
	ИначеЕсли (ТекущийЭлементСписка = Элементы.СписокПериодВремя) Тогда
		ТекущийЭлементСписка = Элементы.СписокПериодДата;
	ИначеЕсли (ТекущийЭлементСписка = Элементы.ГруппаКомментарийПричинаОтказа) Тогда
		ТекущийЭлементСписка = Элементы.СписокКомментарий;
	КонецЕсли;
	
	Если (ТекущийЭлементСписка = Элементы.СписокПериодДата) Тогда
		ПутьКДанным = "Данные.Список.Дата";
	Иначе
		ПутьКДанным = ТекущийЭлементСписка.ПутьКДанным;
	КонецЕсли;
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Данные.Список.", "");
	
	Если Найти(Сортировка, ПутьКДанным + " Убыв") Тогда
		Порядок = ПутьКДанным;
	ИначеЕсли Найти(Сортировка, ПутьКДанным) Тогда
		Порядок = ПутьКДанным + " Убыв";
	Иначе
		Порядок = ПутьКДанным;
	КонецЕсли;
	
	ОбъектСортироватьНаСервереПоДанным(Порядок);

КонецПроцедуры // ОбъектСортироватьНаСервере()

&НаСервере
Процедура ОбъектСортироватьНаСервереПоДанным(Порядок, ПриОткрытии = Ложь)
	
	Если ПустаяСтрока(Сортировка) Тогда
	Иначе
		ИмяТекущигоЭлементаСписка = "Список" + СтрЗаменить(Сортировка, " Убыв", "");
		Если (ИмяТекущигоЭлементаСписка = "СписокДата") Тогда
			ИмяТекущигоЭлементаСписка = "СписокГруппаКартинка";
		КонецЕсли;
		ТекущийЭлементСписка = Элементы[ИмяТекущигоЭлементаСписка];
		ТекущийЭлементСписка.КартинкаШапки = Новый Картинка;
	КонецЕсли;
	
	
	Если ПустаяСтрока(Порядок) Тогда
		Порядок = "Дата";
	КонецЕсли;
	
	Сортировка = Порядок;
	Если ПриОткрытии Тогда
	Иначе
		Если Найти(Сортировка, "Дата") Тогда
			Колонки = Сортировка + ",Номер,Ссылка";
		Иначе
			Колонки = Сортировка + ",Дата,Номер,Ссылка";
		КонецЕсли;
		Данные.Список.Сортировать(Колонки);
	КонецЕсли;
	
	
	ИмяТекущигоЭлементаСписка = "Список" + СтрЗаменить(Сортировка, " Убыв", "");
	Если (ИмяТекущигоЭлементаСписка = "СписокДата") Тогда
		ИмяТекущигоЭлементаСписка = "СписокГруппаКартинка";
	КонецЕсли;
	ТекущийЭлементСписка = Элементы[ИмяТекущигоЭлементаСписка];
	Если Найти(Сортировка, "Убыв") Тогда
		ТекущийЭлементСписка.КартинкаШапки = БиблиотекаКартинок.НаправлениеСортировкиСпискаПоУбыванию;
	Иначе
		ТекущийЭлементСписка.КартинкаШапки = БиблиотекаКартинок.НаправлениеСортировкиСпискаПоВозрастанию;
	КонецЕсли;

КонецПроцедуры // ОбъектСортироватьНаСервереПоДанным()


&НаКлиенте
Процедура УстановитьРежимРедактирования(Режим)
	
	Если Режим Тогда
		РежимРедактирования = Истина;
		Элементы.ГруппаОбъектДействияРежимы.ТекущаяСтраница = Элементы.ГруппаОбъектДействияРежимРедактирования;
		Элементы.ГруппаСписокДействияРежимы.ТекущаяСтраница = Элементы.ГруппаСписокДействияРежимРедактирования;
	Иначе
		РежимРедактирования = Ложь;
		Элементы.ГруппаОбъектДействияРежимы.ТекущаяСтраница = Элементы.ГруппаОбъектДействияРежимОсновной;
		Элементы.ГруппаСписокДействияРежимы.ТекущаяСтраница = Элементы.ГруппаСписокДействияРежимОсновной;
	КонецЕсли;
	
КонецПроцедуры // УстановитьРежимРедактирования()

&НаСервере
Процедура УстановитьРежимНазначенияСпискаНаСервере(ДанныеРежимаНазначенияСписка)
	
	Если РежимРедактирования Тогда
		Элементы.ГруппаОбъектДействияРежимы.ТекущаяСтраница = Элементы.ГруппаОбъектДействияРежимРедактирования;
		Элементы.ГруппаСписокДействияРежимы.ТекущаяСтраница = Элементы.ГруппаСписокДействияРежимРедактирования;
	КонецЕсли;
	Элементы.Список.ТекущаяСтрока = ДанныеРежимаНазначенияСписка.ТекущаяСтрока;
	
КонецПроцедуры // УстановитьРежимНазначенияСпискаНаСервере()

&НаКлиенте
Процедура УстановитьСостояниеСтроки(ТекущиеДанные)
	
	// Индекс картинки действия.
	Если ТекущиеДанные.Проведен Тогда
		ТекущиеДанные.ИндексКартинки = 1;
	ИначеЕсли ТекущиеДанные.ПометкаУдаления Тогда
		ТекущиеДанные.ИндексКартинки = 2;
	Иначе	
		ТекущиеДанные.ИндексКартинки = 0;
	КонецЕсли;

КонецПроцедуры // УстановитьСостояниеСтроки()

&НаСервере
Процедура УстановитьСостояниеСтрокиНаСервере(ТекущиеДанные)
	
	// Индекс картинки действия.
	Если ТекущиеДанные.Проведен Тогда
		ТекущиеДанные.ИндексКартинки = 1;
	ИначеЕсли ТекущиеДанные.ПометкаУдаления Тогда
		ТекущиеДанные.ИндексКартинки = 2;
	Иначе	
		ТекущиеДанные.ИндексКартинки = 0;
	КонецЕсли;

КонецПроцедуры // УстановитьСостояниеСтрокиНаСервере()

&НаКлиенте
Процедура УстановитьСостояниеДействияОбъекта(ТекущиеДанные)
	
	// Индекс картинки действия.
	Если ТекущиеДанные.Добавление Тогда
		ТекущиеДанные.ИндексКартинкиДействия = 6;
	ИначеЕсли ТекущиеДанные.Проведение Тогда
		Если ТекущиеДанные.Проведен Тогда
			ТекущиеДанные.ИндексКартинкиДействия = 5;
		Иначе
			ТекущиеДанные.ИндексКартинкиДействия = 4;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Удаление Тогда
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ТекущиеДанные.ИндексКартинкиДействия = 3;
		Иначе
			ТекущиеДанные.ИндексКартинкиДействия = 2;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Изменение Тогда
		ТекущиеДанные.ИндексКартинкиДействия = 1;
	Иначе	
		ТекущиеДанные.ИндексКартинкиДействия = 0;
	КонецЕсли;

КонецПроцедуры // УстановитьСостояниеДействияОбъекта()

&НаСервере
Процедура УстановитьСостояниеДействияОбъектаНаСервере(ТекущиеДанные)
	
	// Индекс картинки действия.
	Если ТекущиеДанные.Добавление Тогда
		ТекущиеДанные.ИндексКартинкиДействия = 6;
	ИначеЕсли ТекущиеДанные.Проведение Тогда
		Если ТекущиеДанные.Проведен Тогда
			ТекущиеДанные.ИндексКартинкиДействия = 5;
		Иначе
			ТекущиеДанные.ИндексКартинкиДействия = 4;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Удаление Тогда
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ТекущиеДанные.ИндексКартинкиДействия = 3;
		Иначе
			ТекущиеДанные.ИндексКартинкиДействия = 2;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Изменение Тогда
		ТекущиеДанные.ИндексКартинкиДействия = 1;
	Иначе	
		ТекущиеДанные.ИндексКартинкиДействия = 0;
	КонецЕсли;

КонецПроцедуры // УстановитьСостояниеДействияОбъектаНаСервере()

&НаКлиенте
Процедура УстановитьПредставлениеСтоловОбъекта(ТекущиеДанные, РежимРедактирования)
	
	Если РежимРедактирования Тогда
		Если ПустаяСтрока(ТекущиеДанные.СтолПредставление) Тогда
			ТекущиеДанные.СтолПредставление = НСтр("ru = 'Изменить'; uk = 'Змінити'");
		Иначе
			ТекущиеДанные.СтолПредставление = ТекущиеДанные.СтолПредставление + " — " + НСтр("ru = 'изменить'; uk = 'змінити'");
		КонецЕсли;
	Иначе
		ТекущиеДанные.СтолПредставление = СтрЗаменить(СтрЗаменить(ТекущиеДанные.СтолПредставление, НСтр("ru = 'Изменить'; uk = 'Змінити'"), ""), " — " + НСтр("ru = 'изменить'; uk = 'змінити'"), "");
	КонецЕсли;
	
КонецПроцедуры // УстановитьПредставлениеСтоловОбъекта()


&НаКлиенте
Процедура ДобавитьПервоночальноеСостоянияДанных(ТекущиеДанные, Копирование)
	
	Если Копирование Тогда
		Столы = ТекущиеДанные.Столы;
		
		ТекущиеДанные.Ссылка = Неопределено;
		ТекущиеДанные.Проведен = Ложь;
		ТекущиеДанные.ПометкаУдаления = Ложь;
		ТекущиеДанные.Распечатан = Неопределено;
		ТекущиеДанные.Ответственный = Неопределено;
		ТекущиеДанные.Сотрудник = Неопределено;
		ТекущиеДанные.Добавление = Истина;
		ТекущиеДанные.Изменение = Ложь;
		ТекущиеДанные.Удаление = Ложь;
		ТекущиеДанные.Проведение = Ложь;
		
		Если (Не Столы = Неопределено) Тогда
			ТекущиеДанные.Столы = Новый СписокЗначений;
			ТекущиеДанные.Столы.ЗагрузитьЗначения(Столы.ВыгрузитьЗначения());
		КонецЕсли;
	Иначе
		ТекущиеДанные.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(Период);
		ТекущиеДанные.Ресторан = Ресторан;
		ТекущиеДанные.КоличествоКлиентов = 2;
		ТекущиеДанные.Добавление = Истина;
		ТекущиеДанные.ПериодДата = Период.Дата;
		ТекущиеДанные.ПериодВремя = УпрощенныеДатаПериодКлиентСервер.ПолучитьТолькоВремя(Период);
    КонецЕсли;

	КопироватьДанныеФормы(ТекущиеДанные, Объект);
	
	УстановитьСостояниеДействияОбъекта(ТекущиеДанные);
	УстановитьРежимРедактирования(Истина);
	
КонецПроцедуры // ДобавитьПервоночальноеСостоянияДанных()

&НаКлиенте
Процедура ЗапомнитьПервоночальноеСостоянияДанных(ТекущиеДанные)
	
	КопироватьДанныеФормы(ТекущиеДанные, Объект);
	
КонецПроцедуры // ЗапомнитьПервоночальноеСостоянияДанных()

&НаКлиенте
Процедура АктуализироватьПервоночальноеСостоянияДанных(ТекущиеДанные, Поле)
	
	ТекущиеДанные[Поле] = Объект[Поле];

КонецПроцедуры // АктуализироватьПервоночальноеСостоянияДанных()

&НаКлиенте
Процедура ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, Поле)
	
	Если (Поле = Неопределено) Тогда
		
		ТекущиеДанные.Изменение = Истина;
		
	Иначе
	
		Если ПустаяСтрока(ТекущиеДанные[Поле]) Тогда
			Если Найти("Ресторан,КонтрагентПредставление,ТелефонПредставление,ТелефонПоиск", Поле) Тогда
				ТекущиеДанные[Поле] = Объект[Поле];
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если (ТекущиеДанные[Поле] = Объект[Поле]) Тогда
			Возврат;
		Иначе
			ТекущиеДанные.Изменение = Истина;
			Объект[Поле] = ТекущиеДанные[Поле];
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСостояниеДействияОбъекта(ТекущиеДанные);
	Если ТекущиеДанные.Проведение Или ТекущиеДанные.Удаление Или ТекущиеДанные.Изменение Тогда
		УстановитьРежимРедактирования(Истина);
	КонецЕсли;

КонецПроцедуры // ИзменитьПервоночальноеСостоянияДанных()

&НаКлиенте
Процедура УдалитьПервоночальноеСостоянияДанных(ТекущиеДанные, Отказ)
	
	Если ТекущиеДанные.Добавление Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	// Причина отказа.
	Если ТекущиеДанные.Удаление Тогда
	Иначе
		Если Не ТекущиеДанные.ПометкаУдаления Тогда
			ТекущиеДанные.ПричинаОтказа = ОткрытьФормуМодально("Справочник.ПричиныОтказов.Форма.ФормаВыбораРабочегоСтола", , ЭтаФорма);
			Если Не ЗначениеЗаполнено(ТекущиеДанные.ПричинаОтказа) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.Удаление = Не ТекущиеДанные.Удаление;
	ТекущиеДанные.Проведение = Ложь;

	УстановитьСостояниеДействияОбъекта(ТекущиеДанные);
	УстановитьРежимРедактирования(Истина);
	
КонецПроцедуры // УдалитьПервоночальноеСостоянияДанных()


&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем Параметры, Объект;
	
	Если (Поле = Элементы.СписокСтолПредставление) Тогда
		Если СхемаДоступна Тогда
				
			Переход(Неопределено);
		
		Иначе
			
			ТекущиеДанные = Данные.Список.НайтиПоИдентификатору(ВыбраннаяСтрока); Объект = ТекущиеДанные; ОбъектСтолы = Объект.Столы;
		
			Если (ОбъектСтолы = Неопределено) Тогда
				ОбъектСтолы = ПолучитьАктульныеСтолыНаСервере(ТекущиеДанные.Ссылка); Объект.Столы = ОбъектСтолы;
			КонецЕсли;
			
			Параметры = Новый Структура;
			Параметры.Вставить("МножественныйВыбор", Истина);
			Если (ОбъектСтолы.Количество() = 1) Тогда
				Параметры.Вставить("ТекущаяСтрока", ОбъектСтолы[0].Значение);
			ИначеЕсли (ОбъектСтолы.Количество() > 1) Тогда
				Параметры.Вставить("ВыбранныеЗначения", ОбъектСтолы.ВыгрузитьЗначения());
			КонецЕсли;

			ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Столы.Форма.ФормаВыбораРабочегоСтола", Параметры, Элемент);
			Если (ВыбранноеЗначение = Неопределено) Тогда
				Возврат;
			КонецЕсли;
	
			Если (ТипЗнч(ВыбранноеЗначение) = Тип("Массив")) Тогда
				ОбъектСтолы.ЗагрузитьЗначения(ВыбранноеЗначение);
			Иначе
				ОбъектСтолы.Очистить();
				Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
					ОбъектСтолы.Добавить(ВыбранноеЗначение);
				КонецЕсли;
			КонецЕсли;
			
			ТекущиеДанные.СтолПредставление = СтрЗаменить(ОбъектСтолы, ";", ",");
			
			// Настройка формы.
			УстановитьПредставлениеСтоловОбъекта(ТекущиеДанные, РежимРедактированияСтроки);
			ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
	
	Если (Поле = Элементы.СписокИндексКартинки) Тогда
		
		ТекущиеДанные = Данные.Список.НайтиПоИдентификатору(ВыбраннаяСтрока); Объект = ТекущиеДанные; ОбъектСтолы = Объект.Столы;
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
	
		// Форма.
		Параметры = Новый Структура;
		Параметры.Вставить("Ключ", Объект.Ссылка);
		Параметры.Вставить("РежимПодтверждения", Ложь);
		
		Форма = ПолучитьФорму("Документ.ЗаказПокупателя.Форма.ФормаДокументаРабочегоСтола", Параметры, ЭтаФорма);
		
		КопироватьДанныеФормы(Объект, Форма.Объект);
		
		Объект = Форма.Объект;
		Если (Не ОбъектСтолы = Неопределено) Тогда
			Объект.Столы.Очистить();
			Для Каждого ЭлеменСтолов Из ОбъектСтолы Цикл
				Объект.Столы.Добавить().Стол = ЭлеменСтолов.Значение;
			КонецЦикла;
			Если Объект.Столы.Количество() Тогда
				Объект.Стол = Объект.Столы[0].Стол;
			Иначе
				Объект.Стол = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // СписокВыбор()

&НаКлиенте
Процедура СписокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РежимРедактированияСтроки = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ДобавитьПервоночальноеСостоянияДанных(ТекущиеДанные, Копирование);
	Иначе
		ЗапомнитьПервоночальноеСостоянияДанных(ТекущиеДанные);
	КонецЕсли;
	
	УпрощенныеДатаПериодКлиентСервер.УстановитьМоментВремени(ОбъектПериод, ТекущиеДанные.Дата);
	
	// Настройка формы.
	УстановитьПредставлениеСтоловОбъекта(ТекущиеДанные, Истина);

КонецПроцедуры // СписокПриНачалеРедактирования()

&НаКлиенте
Процедура СписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РежимРедактированияСтроки = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	// Настройка формы.
	УстановитьПредставлениеСтоловОбъекта(ТекущиеДанные, Ложь);

КонецПроцедуры // СписокПриОкончанииРедактирования()

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	УдалитьПервоночальноеСостоянияДанных(ТекущиеДанные, Отказ);
	
КонецПроцедуры // СписокПриНачалеРедактирования()

&НаКлиенте
Процедура СписокПериодДатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ОбъектПериод.Дата = ТекущиеДанные.ПериодДата; ОбъектПериод.Время = ТекущиеДанные.ПериодВремя;
	
	Если УпрощенныеДатаПериодКлиентСервер.ДатаПриИзменении(ОбъектПериод, Элемент) Тогда
		ТекущиеДанные.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(ОбъектПериод);
		ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "Дата");
	КонецЕсли;
	
	ТекущиеДанные.ПериодДата = ОбъектПериод.Дата; ТекущиеДанные.ПериодВремя = ОбъектПериод.Время;
	
КонецПроцедуры // СписокПериодДатаПриИзменении()

&НаКлиенте
Процедура СписокПериодДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ОбъектПериод.Дата = ТекущиеДанные.ПериодДата; ОбъектПериод.Время = ТекущиеДанные.ПериодВремя;
	
	Если УпрощенныеДатаПериодКлиентСервер.ДатаНачалоВыбора(ОбъектПериод, Элемент, ДанныеВыбора, СтандартнаяОбработка) Тогда
		ТекущиеДанные.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(ОбъектПериод);
		ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "Дата");
	КонецЕсли;
	
	ТекущиеДанные.ПериодДата = ОбъектПериод.Дата; ТекущиеДанные.ПериодВремя = ОбъектПериод.Время;
	
КонецПроцедуры // СписокПериодДатаНачалоВыбора()

&НаКлиенте
Процедура СписокПериодДатаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ОбъектПериод.Дата = ТекущиеДанные.ПериодДата; ОбъектПериод.Время = ТекущиеДанные.ПериодВремя;
	
	Если УпрощенныеДатаПериодКлиентСервер.ДатаНачалоВыбораИзСписка(ОбъектПериод, Элемент, СтандартнаяОбработка) Тогда
		ТекущиеДанные.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(ОбъектПериод);
		ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "Дата");
	КонецЕсли;
	
	ТекущиеДанные.ПериодДата = ОбъектПериод.Дата; ТекущиеДанные.ПериодВремя = ОбъектПериод.Время;
	
КонецПроцедуры // СписокПериодДатаНачалоВыбораИзСписка()

&НаКлиенте
Процедура СписокПериодВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ОбъектПериод.Дата = ТекущиеДанные.ПериодДата; ОбъектПериод.Время = ТекущиеДанные.ПериодВремя;
	
	Если УпрощенныеДатаПериодКлиентСервер.ВремяПриИзменении(ОбъектПериод, Элемент) Тогда
		ТекущиеДанные.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(ОбъектПериод);
		ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "Дата");
	КонецЕсли;
	
	ТекущиеДанные.ПериодДата = ОбъектПериод.Дата; ТекущиеДанные.ПериодВремя = ОбъектПериод.Время;
	
КонецПроцедуры // СписокПериодВремяПриИзменении()

&НаКлиенте
Процедура СписокПериодВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ОбъектПериод.Дата = ТекущиеДанные.ПериодДата; ОбъектПериод.Время = ТекущиеДанные.ПериодВремя;
	
	Если УпрощенныеДатаПериодКлиентСервер.ВремяНачалоВыбора(ОбъектПериод, Элемент, ДанныеВыбора, СтандартнаяОбработка) Тогда
		ТекущиеДанные.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(ОбъектПериод);
		ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "Дата");
	КонецЕсли;
	
	ТекущиеДанные.ПериодДата = ОбъектПериод.Дата; ТекущиеДанные.ПериодВремя = ОбъектПериод.Время;
	
КонецПроцедуры // СписокПериодВремяНачалоВыбора()

&НаКлиенте
Процедура СписокПериодВремяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ОбъектПериод.Дата = ТекущиеДанные.ПериодДата; ОбъектПериод.Время = ТекущиеДанные.ПериодВремя;
	
	Если УпрощенныеДатаПериодКлиентСервер.ВремяНачалоВыбораИзСписка(ОбъектПериод, Элемент, СтандартнаяОбработка) Тогда
		ТекущиеДанные.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(ОбъектПериод);
		ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "Дата");
	КонецЕсли;
	
	ТекущиеДанные.ПериодДата = ОбъектПериод.Дата; ТекущиеДанные.ПериодВремя = ОбъектПериод.Время;
	
КонецПроцедуры // СписокПериодВремяНачалоВыбораИзСписка()

&НаКлиенте
Процедура СписокКонтрагентПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	// Автокорректировка наименования.
	УправлениеКонтрагентамиКлиентСервер.НаименованиеПриИзменении(ТекущиеДанные.КонтрагентПредставление, ОбъектАвтокорректировкаНаименованийКонтрагентов);
	
	ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "КонтрагентПредставление");
	
КонецПроцедуры // СписокКонтрагентПредставлениеПриИзменении()

&НаКлиенте
Процедура СписокКоличествоКлиентовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ТекущиеДанные.КоличествоКлиентов = Макс(ТекущиеДанные.КоличествоКлиентов, 1);
	
	ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "КоличествоКлиентов");
	
КонецПроцедуры // СписокКоличествоКлиентовПриИзменении()

&НаКлиенте
Процедура СписокТелефонПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	СтруктураТелефона = УправлениеКонтрагентамиКлиентСервер.ПолучитьПустуюСтруктуруТелефона();
	УправлениеКонтрагентамиКлиентСервер.РазложитьТелефонПоПолям(ТекущиеДанные.ТелефонПредставление, СтруктураТелефона);
	
	ТекущиеДанные.ТелефонПредставление = СтруктураТелефона.Представление;
	ТекущиеДанные.ТелефонПоиск = СтруктураТелефона.Поиск;
	
	Если ПустаяСтрока(ТекущиеДанные.ТелефонПредставление) Тогда
		ТекущиеДанные.ТелефонПредставление = ТекущиеДанные.ТелефонДополнительныйПредставление;
		ТекущиеДанные.ТелефонПоиск = ТекущиеДанные.ТелефонДополнительныйПоиск;
		ТекущиеДанные.ТелефонДополнительныйПредставление = Неопределено;
		ТекущиеДанные.ТелефонДополнительныйПоиск = Неопределено;
		
		АктуализироватьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонДополнительныйПредставление");
		АктуализироватьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонДополнительныйПоиск");
		
	КонецЕсли;
	
	ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонПредставление");
	ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонПоиск");
	
КонецПроцедуры  // СписокТелефонПредставлениеПриИзменении()

&НаКлиенте
Процедура СписокТелефонДополнительныйПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	СтруктураТелефона = УправлениеКонтрагентамиКлиентСервер.ПолучитьПустуюСтруктуруТелефона();
	УправлениеКонтрагентамиКлиентСервер.РазложитьТелефонПоПолям(ТекущиеДанные.ТелефонДополнительныйПредставление, СтруктураТелефона);
	
	ТекущиеДанные.ТелефонДополнительныйПредставление = СтруктураТелефона.Представление;
	ТекущиеДанные.ТелефонДополнительныйПоиск = СтруктураТелефона.Поиск;
	
	Если ПустаяСтрока(ТекущиеДанные.ТелефонПредставление) Тогда
		ТекущиеДанные.ТелефонПредставление = ТекущиеДанные.ТелефонДополнительныйПредставление;
		ТекущиеДанные.ТелефонПоиск = ТекущиеДанные.ТелефонДополнительныйПоиск;
		ТекущиеДанные.ТелефонДополнительныйПредставление = Неопределено;
		ТекущиеДанные.ТелефонДополнительныйПоиск = Неопределено;
		
		АктуализироватьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонПредставление");
		АктуализироватьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонПоиск");
		АктуализироватьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонДополнительныйПредставление");
		АктуализироватьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонДополнительныйПоиск");
		
	КонецЕсли;
	
	ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонДополнительныйПредставление");
	ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "ТелефонДополнительныйПоиск");
	
КонецПроцедуры // СписокТелефонДополнительныйПредставлениеПриИзменении()

&НаКлиенте
Процедура СписокКомментарийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "Комментарий");
	
КонецПроцедуры // СписокКомментарийПриИзменении()

&НаКлиенте
Процедура СписокРесторанПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ИзменитьПервоночальноеСостоянияДанных(ТекущиеДанные, "Ресторан");
	
КонецПроцедуры // СписокРесторанПриИзменении()

