

Процедура УстановитьКраткийСостав(Объект, ИмяРеквизитаКраткогоСостава, Коллекция, ДополнительнаяКоллекция = Неопределено, ИмяРеквизитаКоллекции = Неопределено) Экспорт

	Результат = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Строка"));
	ДлинаКраткогоСостава = __ОбщегоНазначенияСервер.Реквизиты(Объект)[ИмяРеквизитаКраткогоСостава].Тип.КвалификаторыСтроки.Длина;
	Если Не ДлинаКраткогоСостава Тогда
		ДлинаКраткогоСостава = 1000;
	КонецЕсли;
	
	МассивКоллекций = Новый Массив;
	МассивКоллекций.Добавить(Коллекция);
	Если (Не ДополнительнаяКоллекция = Неопределено) Тогда
		МассивКоллекций.Добавить(ДополнительнаяКоллекция);
	КонецЕсли;
	
	Для Каждого ОчереднаяКоллекция Из МассивКоллекций Цикл
		Для Каждого ЭлементКоллекции Из ОчереднаяКоллекция Цикл
			
			Если (ИмяРеквизитаКоллекции = Неопределено) Тогда
				ЗначениеКоллекции = Строка(ЭлементКоллекции);
			Иначе
				ЗначениеКоллекции = Строка(ЭлементКоллекции[ИмяРеквизитаКоллекции]);
			КонецЕсли;
			
			Если Не Найти(Результат, ЗначениеКоллекции) Тогда
				
				Если (СтрДлина(Результат + ЗначениеКоллекции) - 2 < ДлинаКраткогоСостава) Тогда
					Результат = Результат + ", " + ЗначениеКоллекции;
				Иначе
					Результат = Результат + "…";
					Прервать;
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЦикла;
	КонецЦикла;
	
	Объект[ИмяРеквизитаКраткогоСостава] = Сред(Результат, 3);
	
КонецПроцедуры // УстановитьКраткийСостав()


Функция ПроверитьУникальностьРеквизитаСправочника(Объект, Реквизит) Экспорт
	
	Перем Метаданные;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Метаданные = __ОбщегоНазначенияСервер.Метаданные(Объект);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК НеУникальный
	                      |ИЗ
	                      |	Справочник.Меню КАК ПроверяемыСправочник
	                      |ГДЕ
	                      |	НЕ ПроверяемыСправочник.Ссылка = &Ссылка
	                      |	И ПроверяемыСправочник.Номенклатура = &Значени
	                      |	И ПроверяемыСправочник.Владелец = &Владелец");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Меню", "Справочник." + Метаданные.Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПроверяемыСправочник.Номенклатура", "ПроверяемыСправочник." + Реквизит);
	Если Метаданные.Владельцы.Количество() Тогда
		Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПроверяемыСправочник.Владелец = &Владелец", "ИСТИНА");
	КонецЕсли; 
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Значени", Объект[Реквизит]);
	
	Результат = Запрос.Выполнить().Пустой();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;

КонецФункции // ПроверитьУникальностьРеквизитаСправочника()


Процедура ПолучитьНаследуемыеРеквизиты(Объект) Экспорт
	
	// Метаданные не используются намеренно.
	Реквзиты = Новый Структура("Актуальность,ПериодДействия"); ЗаполнитьЗначенияСвойств(Реквзиты, Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Актуальность.
	Если (Не Реквзиты.Актуальность = Неопределено) Тогда
		Если (Объект.Ссылка.Актуальность = ((Не ЗначениеЗаполнено(Объект.Ссылка.Родитель)) Или Объект.Ссылка.Родитель.Актуальность)) Тогда
			Объект.Актуальность = (Не ЗначениеЗаполнено(Объект.Родитель)) Или Объект.Родитель.Актуальность;
		КонецЕсли; 
	КонецЕсли; 
	
	// Период действия.
	Если (Не Реквзиты.ПериодДействия = Неопределено) Тогда
		Если (Объект.Ссылка.ПериодДействия = Объект.Ссылка.Родитель.ПериодДействия) Тогда
			Объект.ПериодДействия = Объект.Родитель.ПериодДействия;
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ПолучитьНаследуемыеРеквизиты()


Процедура УстановитьАктуальность(Ссылка, Актуальность = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Изменение.
	Если (Ссылка = Ссылка.Ссылка) Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Ссылка;
	КонецЕсли;
	Если (Актуальность = Неопределено) Тогда
		Объект.Актуальность = Не Объект.Актуальность;
	Иначе
		Объект.Актуальность = Актуальность;
	КонецЕсли;
	Объект.ОбменДанными.Загрузка = Истина;	
	Объект.ДополнительныеСвойства.Вставить("ПринудительнаяРегистрацияАктуальности");
	Объект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // УстановитьАктуальность()

Процедура УстановитьСвязанныеДанные(Ссылка, Данные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Изменение.
	Если (Ссылка = Ссылка.Ссылка) Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Ссылка;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, Данные);
	Объект.ОбменДанными.Загрузка = Истина;	
	Объект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // УстановитьСвязанныеДанные()


Процедура ПолучитьПравилаПринадлежности(Ссылка, Справочник, Реквизит, Объект) Экспорт

	// Связанный справочник.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.НоменклатурнаяГруппа КАК Значение,
		|	ВЫБОР
		|		КОГДА Номенклатура.НоменклатурнаяГруппа = &Значение
		|				И НЕ Номенклатура.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Принадлежность,
		|	ВЫБОР
		|		КОГДА Номенклатура.ЭтоГруппа
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Номенклатура.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексКартинки,
		|	ВЫБОР
		|		КОГДА Номенклатура.НоменклатурнаяГруппа = &Значение
		|				И НЕ Номенклатура.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ &ТолькоПросмотр
		|	КОНЕЦ КАК ТолькоПросмотр
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("Значение", Ссылка.Ссылка);
	
	МетаданныеСправочнка = Метаданные.Справочники[Справочник];
	
	Если (МетаданныеСправочнка.Реквизиты[Реквизит].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТолькоПросмотр", "Номенклатура.ЭтоГруппа");
	ИначеЕсли (МетаданныеСправочнка.Реквизиты[Реквизит].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТолькоПросмотр", "НЕ Номенклатура.ЭтоГруппа");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТолькоПросмотр", "ЛОЖЬ");
	КонецЕсли;
	
	Если (Не МетаданныеСправочнка.Иерархический) Или (Не МетаданныеСправочнка.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.ЭтоГруппа", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Ссылка ИЕРАРХИЯ", "Номенклатура.Представление");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", "Справочник." + Справочник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.НоменклатурныеГруппы.ПустаяСсылка", "Справочник." + __ОбщегоНазначенияСервер.Метаданные(Ссылка).Имя + ".ПустаяСсылка");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.НоменклатурнаяГруппа", "Номенклатура." + Реквизит);
	
	ПравилаПринадлежности = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗначениеВДанныеФормы(ПравилаПринадлежности, Объект);	
	
КонецПроцедуры // ПолучитьПравилаПринадлежности()

Процедура УстановитьПравилаПринадлежности(Ссылка, Справочник, Реквизит, Объект, Отказ) Экспорт

	Если Не Отказ Тогда
		
		ПравилаПринадлежности = ДанныеФормыВЗначение(Объект, Тип("ДеревоЗначений")); МассивПринадлежащих = Новый Массив;
		
		// Устанавливаемые.
		//Для Каждого СтрокаПравилПринадлежности Из ПравилаПринадлежности.Строки.НайтиСтроки(Новый Структура("Принадлежность,ТолькоПросмотр", Истина, Ложь), Истина) Цикл МассивПринадлежащих.Добавить(СтрокаПравилПринадлежности.Ссылка); КонецЦикла; 
		
		//Костенюк Александр-Старт 17.07.2012
		Для Каждого СтрокаПравилПринадлежности Из ПравилаПринадлежности.Строки.НайтиСтроки(Новый Структура("Принадлежность", Истина), Истина) Цикл 
			МассивПринадлежащих.Добавить(СтрокаПравилПринадлежности.Ссылка); 
		КонецЦикла; 
		//Костенюк Александр-Финиш 17.07.2012

		// Связанный справочник.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА Номенклатура.Ссылка В (&Принадлежащие)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Принадлежность
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	ВЫБОР
			|			КОГДА Номенклатура.Ссылка В (&Принадлежащие)
			|				ТОГДА НЕ Номенклатура.НоменклатурнаяГруппа = &Значение
			|			ИНАЧЕ Номенклатура.НоменклатурнаяГруппа = &Значение
			|		КОНЕЦ");
		Запрос.УстановитьПараметр("Значение", Ссылка.Ссылка);
		Запрос.УстановитьПараметр("Принадлежащие", МассивПринадлежащих);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", "Справочник." + Справочник);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.НоменклатурнаяГруппа", "Номенклатура." + Реквизит);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать(); Имя = __ОбщегоНазначенияСервер.Метаданные(Ссылка).Имя;
		
			Пока Выборка.Следующий() Цикл
				
				ПринадлежащийОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если Выборка.Принадлежность Тогда
					ПринадлежащийОбъект[Реквизит] = Ссылка.Ссылка;
				Иначе
					ПринадлежащийОбъект[Реквизит] = Справочники[Имя].ПустаяСсылка();
				КонецЕсли; 
				ПринадлежащийОбъект.ОбменДанными.Загрузка = Истина;	
				Попытка
					ПринадлежащийОбъект.Записать();
				Исключение
					// ERR
					Отказ = Истина;
					Прервать;
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПравилаПринадлежности()



Процедура ПередЗаписьюОбъектаАктуальность(Источник, Отказ) Экспорт

	// При обмене данными ничего не проверяем.
	Если Источник.ОбменДанными.Загрузка Тогда
		Если Не Источник.ДополнительныеСвойства.Свойство("ПринудительнаяРегистрацияАктуальности") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Наследование.
	Если Не Отказ Тогда
		Если Не Источник.ДополнительныеСвойства.Свойство("ПредотвратитьРегистрациюАктуальности") Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			Если (Не Источник.Родитель = Источник.Ссылка.Родитель) Тогда
				Если (Источник.Актуальность = Источник.Ссылка.Актуальность) И
					 (Источник.Актуальность = ((Не ЗначениеЗаполнено(Источник.Ссылка.Родитель)) Или Источник.Ссылка.Родитель.Актуальность)) Тогда
					 Источник.Актуальность = (Не ЗначениеЗаполнено(Источник.Родитель)) Или Источник.Родитель.Актуальность;
				КонецЕсли; 
			КонецЕсли; 
			
			Источник.Актуальность = Источник.Актуальность И (Не Источник.ПометкаУдаления);
			
			Если (Не Источник.Актуальность = Источник.Ссылка.Актуальность) Тогда
				Источник.ДополнительныеСвойства.Вставить("РегистрацияАктуальности", Источник.Актуальность);
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры // ПередЗаписьюОбъектаАктуальность()

Процедура ПриЗаписиОбъектаАктуальность(Источник, Отказ) Экспорт

	// При обмене данными ничего не проверяем.
	Если Источник.ОбменДанными.Загрузка Тогда
		Если Не Источник.ДополнительныеСвойства.Свойство("ПринудительнаяРегистрацияАктуальности") Тогда
			Возврат;
		КонецЕсли;
		Источник.ДополнительныеСвойства.Удалить("ПринудительнаяРегистрацияАктуальности");
	КонецЕсли;
	
	// Наследование.
	Если Не Отказ Тогда
		Если Источник.ДополнительныеСвойства.Свойство("РегистрацияАктуальности") Тогда
			Источник.ДополнительныеСвойства.Удалить("РегистрацияАктуальности");
			УстановитьПривилегированныйРежим(Истина);
			
			// Родители.
			Если Источник.Актуальность Тогда
				РодительСсылка = Источник.Родитель;
				Пока ЗначениеЗаполнено(РодительСсылка) И (Не РодительСсылка.Актуальность) Цикл
					
				    РодительОбъект = РодительСсылка.ПолучитьОбъект();
					РодительОбъект.Актуальность = Истина;
					РодительОбъект.ОбменДанными.Загрузка = Истина;	
					Попытка
						РодительОбъект.Записать();
					Исключение
						Отказ = Истина;	// ERR
						Прервать;
					КонецПопытки;
					
					РодительСсылка = РодительОбъект.Родитель;
				КонецЦикла; 
			КонецЕсли; 
			
			// Подчиненные.
			Если Не Отказ Тогда
				Имя = __ОбщегоНазначенияСервер.Метаданные(Источник).Имя;
				
				Запрос = Новый Запрос("ВЫБРАТЬ
				                      |	Меню.Ссылка
				                      |ИЗ
				                      |	Справочник.Меню КАК Меню
				                      |ГДЕ
				                      |	Меню.Ссылка В ИЕРАРХИИ(&Ссылка)
				                      |	И (НЕ Меню.Актуальность = &Актуальность)
				                      |	И ((НЕ Меню.ПометкаУдаления)
				                      |			ИЛИ (НЕ &Актуальность))");
				Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
				Запрос.УстановитьПараметр("Актуальность", Источник.Актуальность);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Меню", "Справочник." + Имя);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
				    ПодчиненныеОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ПодчиненныеОбъект.Актуальность = Источник.Актуальность;
					ПодчиненныеОбъект.ОбменДанными.Загрузка = Истина;	
					Попытка
						ПодчиненныеОбъект.Записать();
					Исключение
						Отказ = Истина;	// ERR
						Прервать;
					КонецПопытки;
					
				КонецЦикла;
			КонецЕсли; 
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры // ПередЗаписьюОбъектаАктуальность()

Процедура ПередЗаписьюОбъектаПримененияПериодаДействия(Источник, Отказ) Экспорт
	
	РегистрыСведений.ПериодыДействия.ПередЗаписьюОбъектаПрименения(Источник, Отказ);
	
КонецПроцедуры // ПередЗаписьюОбъектаПримененияПериодаДействия()

Процедура ПриЗаписиОбъектаПримененияПериодаДействия(Источник, Отказ) Экспорт
	
	РегистрыСведений.ПериодыДействия.ПриЗаписиОбъектаПрименения(Источник, Отказ);
	
КонецПроцедуры // ПриЗаписиОбъектаПримененияПериодаДействия()


