Перем RegExp Экспорт;

Процедура кзСохранитьШаблоны(ГлавнаяФорма) Экспорт
	Перем СтрокаСШаблонами;
	СтрокаСШаблонами = ДополнительныеПараметры.Найти("Шаблоны","Параметр");
	Если СтрокаСШаблонами = Неопределено Тогда
		СтрокаСШаблонами = ДополнительныеПараметры.Добавить();
		СтрокаСШаблонами.Параметр = "Шаблоны";
	КонецЕсли;
	СтрокаСШаблонами.Значение = ГлавнаяФорма.Шаблоны.Скопировать();
	ГлавнаяФорма.ЭлементыФормы.ТабличноеПолеШаблонов.СоздатьКолонки();
КонецПроцедуры

Процедура кзПоказатьОПрограмме() Экспорт
	Перем ФормаОПрограмме;
	Перем ШиринаФормы;
	Перем ВысотаФормы;
	Перем Элемент1;
	Перем Элемент2;
	ФормаОПрограмме = ПолучитьФорму("Точка");
	ШиринаФормы = 500;
	ВысотаФормы = 400;
	ФормаОПрограмме.Заголовок = "О программе";
	ФормаОПрограмме.Ширина = ШиринаФормы;
	ФормаОПрограмме.Высота = ВысотаФормы;
	ФормаОПрограмме.ИзменениеРазмера = ИзменениеРазмераОкна.НеИзменять;
	Элемент1 = ФормаОПрограмме.ЭлементыФормы.Добавить(Тип("Надпись"),"нИсторияИзменений");
	Элемент1.Лево = 5;
	Элемент1.Верх = 5;
	Элемент1.Ширина = 130;
	Элемент2 = ФормаОПрограмме.ЭлементыФормы.Добавить(Тип("ПолеВвода"),"ИсторияИзменений");
	Элемент2.Лево = 5;
	Элемент2.Верх = Элемент1.Верх + Элемент1.Высота + 2;
	Элемент2.Высота = ФормаОПрограмме.Высота - Элемент1.Верх - Элемент2.Верх;
	Элемент2.Ширина = ФормаОПрограмме.Ширина - 2 * Элемент1.Лево;
	Элемент2.ТолькоПросмотр = Истина;
	ФормаОПрограмме.ЭлементыФормы.нИсторияИзменений.Значение = "История изменений:";
	ФормаОПрограмме.ЭлементыФормы.ИсторияИзменений.МногострочныйРежим = Истина;
	ФормаОПрограмме.ЭлементыФормы.ИсторияИзменений.Значение = "Обработка ""Консоль запросов дополненная""
	|
	|Релиз платформы: 8.0.18.2
	|
	|
	|11.12.2008, релиз 1.13.16
	|1. добавлен функционал: сравнение двух текстов запросов
	|[Меню: Правая кнопка мыши на ветке -  Сравнить
	|[Навеяно обработкой  Evg-Lylyk <http://infostart.ru/projects/2932/>.
	|2. добавлен функционал: вычисление агрегатных функций для выделенных значений (как в Excel)
	|[Меню: Правая кнопка мыши в правом нижнем углу(рядом с пиктограммкой калькулятора)
	|[Навеяно обработкой  Evg-Lylyk <http://infostart.ru/projects/2932/>.
	|--------------------------------------------------------------
	|10.10.2008, релиз 1.13.15
	|добавлен функционал: вставка текста запроса без обработки параметров
	|--------------------------------------------------------------
	|09.10.2008, релиз 1.13.14
	|добавлен функционал: выгрузка текста запроса в таблицу значений и обход полученной таблицы значений
	|--------------------------------------------------------------
	|19.04.2008, релиз 1.13.13
	|исправлена ошибка: при выгрузке/загрузке ветки из дерева запросов использовался не файл выгрузки а файл с деревом запросов
	|--------------------------------------------------------------
	|25.03.2008, релиз 1.13.12
	|при формировании запроса ""Все документы с полями (условиями)"" в случае некорректности полей
	|или условий для конкретного вида документа формирование запроса не прерывается,
	|а пропускается с выдачей соответствующего сообщения
	|--------------------------------------------------------------
	|17.03.2008, релиз 1.13.11
	|исправлена ошибка: не сохранялась ширина колонок по меню: Сервис - Дополнительно - Заполнить ширину колонок
	|--------------------------------------------------------------
	|13.03.2008, релиз 1.13.10
	|добавлена возможность выгрузки/загрузка ветки из дерева запросов
	|[Меню: Правая кнопка мыши на ветке -  выгрузить ветку (ctrl+alt+s) / Правая кнопка мыши на ветке -  загрузить ветку (ctrl+alt+o)]
	|--------------------------------------------------------------
	|02.03.2008, релиз 1.13.9
	|добавлена возможность выгрузки табличной части результатат запроса(в режиме ""Список"") в DBF
	|[Меню: Сервис - Действие с результатом запроса - Выгрузить в DBF]
	|[Код написал Docent; email: d_dotsenko@mail.ru]
	|--------------------------------------------------------------
	|18.02.2008, релиз 1.13.8
	|добавлен поиск подстроки в текстах запросов и в коде(от Docent)
	|--------------------------------------------------------------
	|31.01.2008, релиз 1.13.7
	|добавлена автоподстановка значений перечислений (от angro)
	|--------------------------------------------------------------
	|04.01.2008, релиз 1.13.6
	|увеличина длина строкового параметра со 100 до 999
	|--------------------------------------------------------------
	|29.11.2007, релиз 1.13.5
	|часть процедур и функций перенесена из модуля объекта в модуль формы
	|--------------------------------------------------------------
	|26.11.2007, релиз 1.13.44
	|добавлен префикс к процедурам и функциям модуля
	|--------------------------------------------------------------
	|10.10.2007, релиз 1.13.45
	|изменение интерфейса
	|--------------------------------------------------------------
	|1.13.43
	|очередное исправление ошибки при заполнении параметров из буфера обмена
	|--------------------------------------------------------------
	|1.13.42
	|исправление ошибки при заполнении параметров из буфера обмена
	|--------------------------------------------------------------
	|1.13.41
	|1. исправление ошибки при подстановке значений из шаблона (если значение полностью совпадало со строкой шаблона, то оно не заменялось)
	|2. добавлена возможность сохранения запроса перед выполнением (Кнопка ""Настройка автосохранения -> Сохранить запрос перед выполнением"")
	|--------------------------------------------------------------
	|1.13.4
	|очередное обновление(исправление ошибок)по проблеме сохранения кода выполнения
	|--------------------------------------------------------------
	|1.13.3
	|возможность вывода всех значений по выбранным группировкам (Выбрать(ОбходРезультатаЗапроса.Прямой,Измерения,""Все""))
	|--------------------------------------------------------------
	|1.13.2
	|исправление ошибки: при копировании элемента дерева запросов в последствии не сохранялся код выполнения запроса для данного элемента
	|--------------------------------------------------------------
	|1.13.1
	|время выполнения запроса
	|";
	ФормаОПрограмме.Открыть();
	ФормаОПрограмме.Ширина = ШиринаФормы;
	ФормаОПрограмме.Высота = ВысотаФормы;
	Элемент2.Лево = 5;
	Элемент2.Верх = Элемент1.Верх + Элемент1.Высота + 2;
	Элемент2.Высота = ФормаОПрограмме.Высота - Элемент1.Верх - Элемент2.Верх;
	Элемент2.Ширина = ФормаОПрограмме.Ширина - 2 * Элемент1.Лево;
КонецПроцедуры

Функция кзЗначениеНеЗаполнено(Значение) Экспорт
	Перем Результат;
	Перем ТипЗначения;
	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	Если Значение = Неопределено Тогда
		Результат = Истина;
	ИначеЕсли Значение = Null Тогда
		Результат = Истина;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если Значение = Дата('00010101000000') Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Ложь;
	ИначеЕсли ТипЗначения = Тип("РежимПроведенияДокумента") Тогда
		Если (Значение = РежимПроведенияДокумента.Неоперативный ИЛИ Значение = РежимПроведенияДокумента.Оперативный) Тогда
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("Клавиша") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Ложь;
		КонецЕсли;
	Иначе
		Если Значение = Новый(ТипЗначения,Неопределено) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзПолучитьОписаниеТиповСтрокиЛокально(ДлинаСтроки) Экспорт
	Перем Массив;
	Перем КвалификаторСтроки;
	Массив = Новый Массив();
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки,ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив,Неопределено,КвалификаторСтроки);
КонецФункции

Функция кзПолучитьОписаниеПроизвольногоТипаЛокально(ТекТип) Экспорт
	Перем Массив;
	Перем ЭлементСписка;
	Массив = Новый Массив();
	Попытка
		Если (ТипЗнч(ТекТип) = Тип("СписокЗначений") И ТекТип.Количество() > 0) Тогда
			Для каждого ЭлементСписка Из ТекТип Цикл
				Массив.Добавить(ЭлементСписка.Значение);
			КонецЦикла;
			//Исключение
		Иначе
			Массив.Добавить(ТекТип);
			//Исключение
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции

Функция кзЗаполнитьСтруктуруТекста(ПолеТекстаЗапроса, СтруктураКоординат) Экспорт
	Перем Результат;
	Результат = Новый Структура();
	кзРаботыСВыделеннымТекстом(ПолеТекстаЗапроса,Новый Структура("НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки",1,1,СтруктураКоординат.КонецСтроки,СтруктураКоординат.КонецКолонки));
	Результат.Вставить("ТекстДо",ПолеТекстаЗапроса.ВыделенныйТекст);
	кзРаботыСВыделеннымТекстом(ПолеТекстаЗапроса,Новый Структура("НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки",СтруктураКоординат.КонецСтроки,СтруктураКоординат.КонецКолонки,ПолеТекстаЗапроса.КоличествоСтрок(),Макс(СтруктураКоординат.КонецКолонки,СтрДлина(ПолеТекстаЗапроса.ПолучитьСтроку(ПолеТекстаЗапроса.КоличествоСтрок()) + 1))));
	Результат.Вставить("ТекстПосле",ПолеТекстаЗапроса.ВыделенныйТекст);
	кзРаботыСВыделеннымТекстом(ПолеТекстаЗапроса,СтруктураКоординат);
	Возврат Результат;
КонецФункции

Функция кзРаботыСВыделеннымТекстом(ПолеТекстаЗапроса, СтруктураКоординат=Неопределено) Экспорт
	Перем НачалоСтроки;
	Перем НачалоКолонки;
	Перем КонецСтроки;
	Перем КонецКолонки;
	Если СтруктураКоординат = Неопределено Тогда
		НачалоСтроки = 1;
		НачалоКолонки = 1;
		КонецСтроки = 1;
		КонецКолонки = 1;
		ПолеТекстаЗапроса.ПолучитьГраницыВыделения(НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки);
		Возврат Новый Структура("НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки",НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки);
	Иначе
		ПолеТекстаЗапроса.УстановитьГраницыВыделения(СтруктураКоординат.НачалоСтроки,СтруктураКоординат.НачалоКолонки,СтруктураКоординат.КонецСтроки,СтруктураКоординат.КонецКолонки);
	КонецЕсли;
КонецФункции

Функция кзИнициализацияVBScript() Экспорт
	Попытка
		RegExp = Новый COMОбъект("VBScript.RegExp");
	Исключение
		Предупреждение("Ошибка инициализации VBScript.RegExp.");
		Возврат Ложь;
	КонецПопытки;
	RegExp.Multiline = Ложь;
	RegExp.Global = Истина;
	RegExp.IgnoreCase = Истина;
	Возврат Истина;
КонецФункции

Функция кзРазобратьВСписок(Текст) Экспорт
	Перем Результат;
	Перем Массив;
	Перем i;
	Результат = Новый СписокЗначений();
	RegExp.Pattern = "[\?a-zA-Zа-яА-я]+";
	Массив = RegExp.Execute(Текст);
	Для i = 0 По Массив.Count - 1 Цикл
		Результат.Добавить(Массив.Item(i).Value,Массив.Item(i).Value);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция кзРежимВыбораПолей(СтруктураТекста)
	Перем Результат;
	Перем ЛеваяПроверкаШаблона;
	Перем ПраваяПроверкаШаблона;
	Перем Массив;
	Результат = Новый Структура();
	RegExp.Pattern = "(^|\s+|\()Выбрать\s+[\s\S]*";
	ЛеваяПроверкаШаблона = RegExp.Test(СтруктураТекста.ТекстДо);
	RegExp.Pattern = "[a-zA-Zа-яА-Я,\s]+$";
	ПраваяПроверкаШаблона = RegExp.Test(СтруктураТекста.ТекстДо);
	Если (ЛеваяПроверкаШаблона И ПраваяПроверкаШаблона) Тогда
		RegExp.Pattern = "^(\s*|[[a-zA-Zа-яА-я]\.\s*]+\s+)из\s+[a-zA-Zа-яА-я]+($|\s+|(\.[a-zA-Zа-яА-я]+)+)+";
		Массив = RegExp.Execute(СтруктураТекста.ТекстПосле);
		Если Массив.Count > 0 Тогда
			Результат.Вставить("ТекстПосле",Массив.Item(0).Value);
		Иначе
			Результат.Вставить("ТекстПосле","");
		КонецЕсли;
	Иначе
		Результат.Вставить("ТекстДо","");
		Результат.Вставить("ТекстПосле","");
	КонецЕсли;
	Если Результат.ТекстПосле <> "" Тогда
		Результат.Вставить("Режим","ВыборПолей");
	Иначе
		Результат.Вставить("Режим","");
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзРежимВыбораТаблицы(СтруктураТекста)
	Перем ГрубаяПроверка;
	Перем Результат;
	Перем Массив;
	RegExp.Pattern = "(^|\s+|\(\s*)Выбрать\s+[\s\S]*\s+из\s+[\s\S]*[a-zA-Zа-яА-Я\.?]$";
	ГрубаяПроверка = RegExp.Test(СтруктураТекста.ТекстДо);
	Результат = Новый Структура();
	Если ГрубаяПроверка Тогда
		RegExp.Pattern = "[a-zA-Zа-яА-я\.?]+$";
		Массив = RegExp.Execute(СтруктураТекста.ТекстДо);
		Если Массив.Count > 0 Тогда
			Результат.Вставить("ТекстДо",Массив.Item(0).Value);
			Результат.Вставить("Режим","ВыборТаблицы");
		Иначе
			Результат.Вставить("ТекстДо","");
			Результат.Вставить("Режим","");
		КонецЕсли;
	Иначе
		Результат.Вставить("ТекстДо","");
		Результат.Вставить("Режим","");
	КонецЕсли;
	Результат.Вставить("ТекстПосле","");
	Возврат Результат;
КонецФункции

Функция кзРежимВыбораПараметра(СтруктураТекста)
	Перем Результат;
	Перем Массив;
	Результат = Новый Структура();
	RegExp.Pattern = "(^|\s+|\()[a-zA-Zа-яА-я]+\s*=\s*&$";
	Массив = RegExp.Execute(СтруктураТекста.ТекстДо);
	Если Массив.Count > 0 Тогда
		Результат.Вставить("ТекстДо",Массив.Item(0).Value);
		Результат.Вставить("Режим","ВыборПараметра");
	Иначе
		Результат.Вставить("ТекстДо","");
		Результат.Вставить("Режим","");
	КонецЕсли;
	Результат.Вставить("ТекстПосле","");
	Возврат Результат;
КонецФункции

Функция кзРежимВыбораСначала(СтруктураТекста)
	Перем Результат;
	Перем Массив;
	Результат = Новый Структура();
	RegExp.Pattern = "(^|\s+)[\?a-zA-Zа-яА-я]*$";
	Массив = RegExp.Execute(СтруктураТекста.ТекстДо);
	Если Массив.Count > 0 Тогда
		Результат.Вставить("ТекстДо",Массив.Item(0).Value);
		Результат.Вставить("Режим","ВыборСначала");
	Иначе
		Результат.Вставить("ТекстДо","");
		Результат.Вставить("Режим","");
	КонецЕсли;
	Результат.Вставить("ТекстПосле","");
	Возврат Результат;
КонецФункции

Функция кзРежимВыбораУсловий(СтруктураТекста)
	Перем ГрубаяПроверка;
	Перем Результат;
	Перем Массив;
	Перем ПромежуточныйТекст;
	RegExp.Pattern = "(^|\s+|\(\s*)Выбрать\s+[\s\S]*\s+из\s+[\s\S]*где\s+[\s\S]*$";
	ГрубаяПроверка = RegExp.Test(СтруктураТекста.ТекстДо);
	Результат = Новый Структура();
	Если ГрубаяПроверка Тогда
		RegExp.Pattern = "из\s+[\s\S]+\s+где";
		Массив = RegExp.Execute(СтруктураТекста.ТекстДо);
		ПромежуточныйТекст = Массив.Item(0).Value;
		RegExp.Pattern = "из(\s+)[a-zA-Zа-яА-я]+($|\s|(\.[a-zA-Zа-яА-я]+)*)+";
		Массив = RegExp.Execute(ПромежуточныйТекст);
		Если Массив.Count > 0 Тогда
			Результат.Вставить("ТекстДо",Массив.Item(0).Value);
			Результат.Вставить("Режим","ВыборПолейДляУсловий");
		Иначе
			Результат.Вставить("Режим","");
		КонецЕсли;
	Иначе
		Результат.Вставить("ТекстДо","");
		Результат.Вставить("Режим","");
	КонецЕсли;
	Результат.Вставить("ТекстПосле","");
	Возврат Результат;
КонецФункции

Функция кзПолучитьПараметр(Текст)
	Перем Массив;
	Перем Результат;
	RegExp.Pattern = "(^|\s+)[a-zA-Zа-яА-я]+\s*=\s*&$";
	Массив = RegExp.Execute(Текст);
	Если Массив.Count > 0 Тогда
		Результат = Массив.Item(0).Value;
		RegExp.Pattern = "[a-zA-Zа-яА-я]+";
		Массив = RegExp.Execute(Результат);
		Если Массив.Count > 0 Тогда
			Результат = Массив.Item(0).Value;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзПолучитьНазваниеТаблицы(Текст)
	Перем Массив;
	Перем Результат;
	RegExp.Pattern = "[a-zA-Zа-яА-я\.]+\s*$";
	Массив = RegExp.Execute(Текст);
	Если Массив.Count > 0 Тогда
		Результат = Массив.Item(0).Value;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзПолучитьФильтр(Текст)
	Перем Массив;
	Перем Результат;
	RegExp.Pattern = "[\?a-zA-Zа-яА-я]+$";
	Массив = RegExp.Execute(Текст);
	Если Массив.Count > 0 Тогда
		Результат = Массив.Item(0).Value;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзПодставитьРезультат(СтруктураТекста, Результат, ГлавнаяФорма)
	Если Результат <> Неопределено Тогда
		ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(СтруктураТекста.ТекстДо + Результат + СтруктураТекста.ТекстПосле);
	КонецЕсли;
КонецФункции

Процедура кзТочка(ПолеТекстаЗапроса, ГлавнаяФорма) Экспорт
	Перем СтруктураКоординат;
	Перем ТекущаяСтрока;
	Перем СтруктураТекста;
	Перем ПараметрыРежима;
	Перем Результат;
	Перем ТаблицаСПараметрами;
	Перем НоваяСтрока;
	Перем ТекстЗапроса;
	Перем Запрос;
	Перем ПараметрыЗапроса;
	Перем ТекПараметрЗапроса;
	Перем Список;
	Перем Фильтр;
	Перем РазмерСписка;
	Перем ГлубинаВложенности;
	Перем i;
	Перем ЗаменяемПоследнееСлово;
	Перем Правильно;
	Перем ПоправкаПозиции;
	Если (ПолеТекстаЗапроса.КоличествоСтрок() = 0 ИЛИ ПолеТекстаЗапроса.ВыделенныйТекст <> "") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ кзИнициализацияVBScript() Тогда
		Возврат;
	КонецЕсли;
	СтруктураКоординат = кзРаботыСВыделеннымТекстом(ГлавнаяФорма.Элементыформы.ТекстЗапроса);
	ТекущаяСтрока = ГлавнаяФорма.Элементыформы.ТекстЗапроса.ПолучитьСтроку(СтруктураКоординат.НачалоСтроки);
	Если СтрДлина(ТекущаяСтрока) < СтруктураКоординат.КонецКолонки Тогда
		СтруктураКоординат.НачалоКолонки = СтрДлина(ТекущаяСтрока) + 1;
		СтруктураКоординат.КонецКолонки = СтруктураКоординат.НачалоКолонки;
	КонецЕсли;
	СтруктураТекста = кзЗаполнитьСтруктуруТекста(ГлавнаяФорма.Элементыформы.ТекстЗапроса,СтруктураКоординат);
	ПараметрыРежима = кзРежимВыбораПараметра(СтруктураТекста);
	Если ПараметрыРежима.Режим = "" Тогда
		ПараметрыРежима = кзРежимВыбораТаблицы(СтруктураТекста);
		Если ПараметрыРежима.Режим = "" Тогда
			ПараметрыРежима = кзРежимВыбораПолей(СтруктураТекста);
			Если ПараметрыРежима.Режим = "" Тогда
				ПараметрыРежима = кзРежимВыбораУсловий(СтруктураТекста);
				Если ПараметрыРежима.Режим = "" Тогда
					ПараметрыРежима = кзРежимВыбораСначала(СтруктураТекста);
					Если ПараметрыРежима.Режим = "" Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыРежима.Режим = "ВыборПараметра" Тогда
		Результат = кзПолучитьПараметр(СтруктураТекста.ТекстДо);
		Если (Результат <> Неопределено И ВвестиСтроку(Результат,"Введите название параметра",,)) Тогда
			ТаблицаСПараметрами = ГлавнаяФорма.мФормаПараметров.Параметры;
			НоваяСтрока = ТаблицаСПараметрами.Найти(Результат,"ИмяПараметра");
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ТаблицаСПараметрами.добавить();
				НоваяСтрока.ИмяПараметра = Результат;
				НоваяСтрока.ЭтоВыражение = Ложь;
				ГлавнаяФорма.Параметры();
			КонецЕсли;
			кзПодставитьРезультат(СтруктураТекста,Результат,ГлавнаяФорма);
			ТекстЗапроса = ГлавнаяФорма.ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
			Запрос = Новый Запрос(ТекстЗапроса);
			Попытка
				ПараметрыЗапроса = Запрос.НайтиПараметры();
			Исключение
				Предупреждение(ОписаниеОшибки(),,"Ошибка в запросе");
				Возврат;
			КонецПопытки;
			ТекПараметрЗапроса = ПараметрыЗапроса.Найти(Результат);
			Если ТекПараметрЗапроса <> Неопределено Тогда
				НоваяСтрока.ЗначениеПараметра = ТекПараметрЗапроса.ТипЗначения.ПривестиЗначение(НоваяСтрока.ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ПараметрыРежима.Режим = "ВыборТаблицы" ИЛИ ПараметрыРежима.Режим = "ВыборСначала") Тогда
		Список = кзРазобратьВСписок(ПараметрыРежима.текстДо);
		Фильтр = кзПолучитьФильтр(СтруктураТекста.ТекстДо);
		Результат = Неопределено;
		РазмерСписка = Список.Количество();
		ГлубинаВложенности = 3;
		i = 0;
		ЗаменяемПоследнееСлово = Ложь;
		Пока i < ГлубинаВложенности Цикл
			i = i + 1;
			Если i > РазмерСписка Тогда
				Результат = кзВыбратьПозицию(i,Список,ГлавнаяФорма,Фильтр,ГлавнаяФорма);
				Прервать;
			КонецЕсли;
			Правильно = кзПроверитьПозицию(i,Список,ГлавнаяФорма);
			Если Правильно Тогда
				Продолжить;
			КонецЕсли;
			Если (НЕ Правильно И i = РазмерСписка) Тогда
				ЗаменяемПоследнееСлово = Истина;
				Результат = кзВыбратьПозицию(i,Список,ГлавнаяФорма,Фильтр,ГлавнаяФорма);
				Прервать;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЦикла;
		Если Результат <> Неопределено Тогда
			ПоправкаПозиции = 0;
			Если ЗаменяемПоследнееСлово Тогда
				ПоправкаПозиции = СтрДлина(Фильтр);
				ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(Лев(СтруктураТекста.ТекстДо,СтрДлина(СтруктураТекста.ТекстДо) - ПоправкаПозиции) + Результат + СтруктураТекста.ТекстПосле);
			Иначе
				ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(СтруктураТекста.ТекстДо + Результат + СтруктураТекста.ТекстПосле);
			КонецЕсли;
			кзРаботыСВыделеннымТекстом(ГлавнаяФорма.Элементыформы.ТекстЗапроса,Новый Структура("НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки",СтруктураКоординат.НачалоСтроки,СтруктураКоординат.НачалоКолонки + СтрДлина(Результат) - ПоправкаПозиции,СтруктураКоординат.КонецСтроки,СтруктураКоординат.НачалоКолонки + СтрДлина(Результат) - ПоправкаПозиции));
		КонецЕсли;
	ИначеЕсли ПараметрыРежима.Режим = "ВыборПолейДляУсловий" Тогда
		Список = кзРазобратьВСписок(кзПолучитьНазваниеТаблицы(ПараметрыРежима.ТекстДо));
		Фильтр = кзПолучитьФильтр(СтруктураТекста.ТекстДо);
		Результат = кзВыбратьПозицию(5,Список,ГлавнаяФорма,Фильтр,ГлавнаяФорма);
		Если Результат <> Неопределено Тогда
			Результат = Результат.Значение;
			Результат = Результат + " = &" + Результат;
			ПоправкаПозиции = 0;
			Если Фильтр <> Неопределено Тогда
				ПоправкаПозиции = СтрДлина(Фильтр);
				ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(Лев(СтруктураТекста.ТекстДо,СтрДлина(СтруктураТекста.ТекстДо) - ПоправкаПозиции) + Результат + СтруктураТекста.ТекстПосле);
			Иначе
				ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(СтруктураТекста.ТекстДо + Результат + СтруктураТекста.ТекстПосле);
			КонецЕсли;
			кзРаботыСВыделеннымТекстом(ГлавнаяФорма.Элементыформы.ТекстЗапроса,Новый Структура("НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки",СтруктураКоординат.НачалоСтроки,СтруктураКоординат.НачалоКолонки + СтрДлина(Результат) - ПоправкаПозиции,СтруктураКоординат.КонецСтроки,СтруктураКоординат.НачалоКолонки + СтрДлина(Результат) - ПоправкаПозиции));
		КонецЕсли;
	ИначеЕсли ПараметрыРежима.Режим = "ВыборПолей" Тогда
		Список = кзРазобратьВСписок(кзПолучитьНазваниеТаблицы(ПараметрыРежима.ТекстПосле));
		Фильтр = кзПолучитьФильтр(СтруктураТекста.ТекстДо);
		Результат = кзВыбратьПозицию(4,Список,ГлавнаяФорма,Фильтр,ГлавнаяФорма);
		Если Результат <> Неопределено Тогда
			ПоправкаПозиции = 0;
			Если Фильтр <> Неопределено Тогда
				ПоправкаПозиции = СтрДлина(Фильтр);
				ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(Лев(СтруктураТекста.ТекстДо,СтрДлина(СтруктураТекста.ТекстДо) - ПоправкаПозиции) + Результат + СтруктураТекста.ТекстПосле);
			Иначе
				ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(СтруктураТекста.ТекстДо + Результат + СтруктураТекста.ТекстПосле);
			КонецЕсли;
			кзРаботыСВыделеннымТекстом(ГлавнаяФорма.Элементыформы.ТекстЗапроса,Новый Структура("НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки",СтруктураКоординат.НачалоСтроки,СтруктураКоординат.НачалоКолонки + СтрДлина(Результат) - ПоправкаПозиции,СтруктураКоординат.КонецСтроки,СтруктураКоординат.НачалоКолонки + СтрДлина(Результат) - ПоправкаПозиции));
		КонецЕсли;
	ИначеЕсли ПараметрыРежима.Режим = "ВыборПоШаблону" Тогда
		Список = кзРазобратьВСписок(кзПолучитьНазваниеТаблицы(ПараметрыРежима.ТекстДо));
		Фильтр = кзПолучитьФильтр(СтруктураТекста.ТекстДо);
		Результат = кзВыбратьПозицию(5,Список,ГлавнаяФорма,Фильтр,ГлавнаяФорма);
		Если Результат <> Неопределено Тогда
			Результат = Результат.Значение;
			Результат = Результат + " = &" + Результат;
			ПоправкаПозиции = 0;
			Если Фильтр <> Неопределено Тогда
				ПоправкаПозиции = СтрДлина(Фильтр);
				ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(Лев(СтруктураТекста.ТекстДо,СтрДлина(СтруктураТекста.ТекстДо) - ПоправкаПозиции) + Результат + СтруктураТекста.ТекстПосле);
			Иначе
				ГлавнаяФорма.Элементыформы.ТекстЗапроса.УстановитьТекст(СтруктураТекста.ТекстДо + Результат + СтруктураТекста.ТекстПосле);
			КонецЕсли;
			кзРаботыСВыделеннымТекстом(ГлавнаяФорма.Элементыформы.ТекстЗапроса,Новый Структура("НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки",СтруктураКоординат.НачалоСтроки,СтруктураКоординат.НачалоКолонки + СтрДлина(Результат) - ПоправкаПозиции,СтруктураКоординат.КонецСтроки,СтруктураКоординат.НачалоКолонки + СтрДлина(Результат) - ПоправкаПозиции));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция кзВыбратьПозицию(i, Список, Форма, фильтр, ГлавнаяФорма)
	Перем Результат;
	Перем ТемпРезультат;
	Перем ЭлементСписка;
	Если i = 1 Тогда
		Результат = кзЗагрузитьМетаданные(фильтр,ГлавнаяФорма);
	ИначеЕсли i = 2 Тогда
		Результат = кзЗагрузитьИменаПоМетаданному(Список[0],фильтр,ГлавнаяФорма);
	ИначеЕсли i = 3 Тогда
		Результат = кзЗагрузитьПодтаблицыМетаданного(Список[0],Список[1],фильтр,ГлавнаяФорма);
	ИначеЕсли (i = 4 ИЛИ i = 5) Тогда
		Результат = кзЗагрузитьПоляМетаданного(Список[0],?(Список.Количество() > 1, Список[1], Неопределено),?(Список.Количество() > 2, Список[2], Неопределено),Форма,фильтр,ГлавнаяФорма);
	КонецЕсли;
	Если Результат.количество() = 1 Тогда
		Результат = Результат[0];
	ИначеЕсли Результат.количество() > 1 Тогда
		Если (i <> 4 ИЛИ фильтр <> Неопределено) Тогда
			Результат.СортироватьПоПредставлению();
			Результат = Результат.ВыбратьЭлемент();
		ИначеЕсли i = 4 Тогда
			Если Результат.ОтметитьЭлементы() Тогда
				ТемпРезультат = "";
				Для каждого ЭлементСписка Из Результат Цикл
					Если ЭлементСписка.пометка Тогда
						Если ТемпРезультат <> "" Тогда
							ТемпРезультат = ТемпРезультат + ", ";
						КонецЕсли;
						ТемпРезультат = ТемпРезультат + ЭлементСписка.Значение;
					КонецЕсли;
				КонецЦикла;
				Результат = ?(ТемпРезультат = "", Неопределено, ТемпРезультат);
			Иначе
				Результат = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзПроверитьПозицию(i, Список, ГлавнаяФорма)
	Если i = 1 Тогда
		Возврат кзПроверитьМетаданное(Список[0],ГлавнаяФорма);
	ИначеЕсли i = 2 Тогда
		Возврат кзПроверитьИмяМетаданного(Список[0],Список[1],ГлавнаяФорма);
	ИначеЕсли i = 3 Тогда
		Возврат кзПроверитьПодтаблицуМетаданного(Список[0],Список[1],Список[2],ГлавнаяФорма);
	КонецЕсли;
КонецФункции

Функция кзПроверитьМетаданное(Метаданное, ГлавнаяФорма)
	Перем Результат;
	Если ТипЗнч(Метаданное) = Тип("ЭлементСпискаЗначений") Тогда
		Результат = кзНайтиПоПредставлению(кзЗагрузитьМетаданные(,ГлавнаяФорма),Метаданное.Значение,Истина);
	Иначе
		Результат = кзНайтиПоПредставлению(кзЗагрузитьМетаданные(,ГлавнаяФорма),Метаданное,Истина);
	КонецЕсли;
	Если Результат = Ложь Тогда
		Возврат Ложь;
	Иначе
		Метаданное.Значение = Результат;
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция кзНайтиПоПредставлению(Список, Представление, ВернутьЗначение=Неопределено) Экспорт
	Перем ЭлементСписка;
	Для каждого ЭлементСписка Из Список Цикл
		Если ЭлементСписка.Представление = Представление Тогда
			Если ВернутьЗначение = Неопределено Тогда
				Возврат Истина;
			Иначе
				Возврат ЭлементСписка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция кзЗагрузитьМетаданные(Фильтр=Неопределено, ГлавнаяФорма) Экспорт
	Перем Список;
	Перем Результат;
	Перем РезультатШаблона;
	Перем Элементсписка;
	Список = Новый СписокЗначений();
	Список.Добавить("Константы","Константы",,ГлавнаяФорма.ЭлементыФормы.КартинкаКонстанты.Картинка);
	Список.Добавить("Справочники","Справочник",,ГлавнаяФорма.ЭлементыФормы.КартинкаСправочники.Картинка);
	Список.Добавить("Документы","Документ",,ГлавнаяФорма.ЭлементыФормы.КартинкаДокументы.Картинка);
	Список.Добавить("ЖурналыДокументов","ЖурналДокументов",,ГлавнаяФорма.ЭлементыФормы.КартинкаЖурналыДокументов.Картинка);
	Список.Добавить("Перечисления","Перечисление",,ГлавнаяФорма.ЭлементыФормы.КартинкаПеречисления.Картинка);
	Список.Добавить("ПланыВидовРасчета","ПланВидовРасчета",,ГлавнаяФорма.ЭлементыФормы.КартинкаПланыВидовРасчета.Картинка);
	Список.Добавить("ПланыВидовХарактеристик","ПланВидовХарактеристик",,ГлавнаяФорма.ЭлементыФормы.КартинкаПланыВидовХарактеристик.Картинка);
	Список.Добавить("ПланыОбмена","ПланОбмена",,ГлавнаяФорма.ЭлементыФормы.КартинкаПланыОбмена.Картинка);
	Список.Добавить("ПланыСчетов","ПланСчетов",,ГлавнаяФорма.ЭлементыФормы.КартинкаПланыСчетов.Картинка);
	Список.Добавить("РегистрыБухгалтерии","РегистрБухгалтерии",,ГлавнаяФорма.ЭлементыФормы.КартинкаРегистрыБухгалтерии.Картинка);
	Список.Добавить("РегистрыНакопления","РегистрНакопления",,ГлавнаяФорма.ЭлементыФормы.КартинкаРегистрыНакопления.Картинка);
	Список.Добавить("РегистрыРасчета","РегистрРасчета",,ГлавнаяФорма.ЭлементыФормы.КартинкаРегистрыРасчета.Картинка);
	Список.Добавить("РегистрыСведений","РегистрСведений",,ГлавнаяФорма.ЭлементыФормы.КартинкаРегистрыСведений.Картинка);
	Список.Добавить("Последовательности","Последовательность",,ГлавнаяФорма.ЭлементыФормы.КартинкаПоследовательности.Картинка);
	Список.Добавить("КритерииОтбора","КритерийОтбора",,ГлавнаяФорма.ЭлементыФормы.КартинкаКритерииОтбора.Картинка);
	Список.Добавить("БизнесПроцессы","БизнесПроцесс",,ГлавнаяФорма.ЭлементыФормы.КартинкаБизнесПроцессы.Картинка);
	Список.Добавить("Задачи","Задача",,ГлавнаяФорма.ЭлементыФормы.КартинкаЗадачи.Картинка);
	Результат = кзФильтроватьСписок(Фильтр,Список,ГлавнаяФорма);
	РезультатШаблона = кзФильтроватьСписок(Фильтр,,ГлавнаяФорма);
	Если РезультатШаблона <> Неопределено Тогда
		Для каждого Элементсписка Из РезультатШаблона Цикл
			Если Результат.НайтиПоЗначению(Элементсписка.Значение) = Неопределено Тогда
				Результат.Добавить(Элементсписка.Значение,Элементсписка.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзПроверитьИмяМетаданного(Метаданное, Имя, ГлавнаяФорма)
	Возврат ?(кзЗагрузитьИменаПоМетаданному(Метаданное,,ГлавнаяФорма).НайтиПозначению(Имя.Значение) = Неопределено, Ложь, Истина);
КонецФункции

Функция кзЗагрузитьИменаПоМетаданному(Метаданное, Фильтр=Неопределено, ГлавнаяФорма) Экспорт
	Перем Список;
	Перем ТекМетаданное;
	Перем ТекМетаданные;
	Перем Картинка;
	Перем ЭлементКоллекции;
	Список = Новый СписокЗначений();
	ТекМетаданное = Метаданное.Значение;
	ТекМетаданные = Вычислить("Метаданные[""" + ТекМетаданное + """]");
	Картинка = кзПолучитьКартинку(ТекМетаданное,ГлавнаяФорма);
	Для каждого ЭлементКоллекции Из ТекМетаданные Цикл
		Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,Картинка);
	КонецЦикла;
	Возврат кзФильтроватьСписок(Фильтр,Список,ГлавнаяФорма);
КонецФункции

Функция кзПроверитьПодтаблицуМетаданного(Метаданное, Имя, Подтаблица, ГлавнаяФорма)
	Возврат ?(кзЗагрузитьПодтаблицыМетаданного(Метаданное,Имя,,ГлавнаяФорма).НайтиПозначению(Подтаблица.Значение) = Неопределено, Ложь, Истина);
КонецФункции

Функция кзЗагрузитьПодтаблицыМетаданного(Знач Метаданное, Знач Имя, Фильтр=Неопределено, ГлавнаяФорма)
	Перем Список;
	Перем Картинка;
	Перем ТекМетаданные;
	Перем ЭлементКоллекции;
	Список = Новый СписокЗначений();
	Метаданное = Метаданное.Значение;
	Имя = Имя.Значение;
	Картинка = кзПолучитьКартинку(Метаданное,ГлавнаяФорма);
	Если Метаданное = "Константы" Тогда
	ИначеЕсли (Метаданное = "Справочники" ИЛИ Метаданное = "Документы") Тогда
		ТекМетаданные = Вычислить("Метаданные[""" + Метаданное + """][""" + Имя + """]");
		ТекМетаданные = ТекМетаданные.ТабличныеЧасти;
		Для каждого ЭлементКоллекции Из ТекМетаданные Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,ГлавнаяФорма.ЭлементыФормы.КартинкаТабличныеЧасти.Картинка);
		КонецЦикла;
	ИначеЕсли Метаданное = "ЖурналыДокументов" Тогда
	ИначеЕсли Метаданное = "Перечисления" Тогда
		ТекМетаданные = Вычислить("Метаданные[""" + Метаданное + """][""" + Имя + """]");
		Для каждого ЭлементКоллекции Из ТекМетаданные.ЗначенияПеречисления Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,ГлавнаяФорма.ЭлементыФормы.КартинкаЗначениеПеречисления.Картинка);
		КонецЦикла;
	ИначеЕсли Метаданное = "ПланыВидовРасчета" Тогда
	ИначеЕсли Метаданное = "ПланыВидовХарактеристик" Тогда
	ИначеЕсли Метаданное = "ПланыОбмена" Тогда
	ИначеЕсли Метаданное = "ПланыСчетов" Тогда
	ИначеЕсли Метаданное = "РегистрыБухгалтерии" Тогда
		Список.Добавить("Субконто","Субконто");
		Список.Добавить("ДвиженияССубконто","ДвиженияССубконто");
		Список.Добавить("Остатки","Остатки");
		Список.Добавить("Обороты","Обороты");
		Список.Добавить("ОстаткиИОбороты","ОстаткиИОбороты");
		Список.Добавить("ОборотыДтКт","ОборотыДтКт");
	ИначеЕсли Метаданное = "РегистрыНакопления" Тогда
		Список.Добавить("Обороты","Обороты");
		Список.Добавить("Остатки","Остатки");
		Список.Добавить("ОстаткиИОбороты","ОстаткиИОбороты");
	ИначеЕсли Метаданное = "РегистрыРасчета" Тогда
		ТекМетаданные = Вычислить("Метаданные[""" + Метаданное + """][""" + Имя + """]");
		ТекМетаданные = ТекМетаданные.Перерасчеты;
		Для каждого ЭлементКоллекции Из ТекМетаданные Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя);
		КонецЦикла;
		Список.Добавить("ФактическийПериодДействия()","ФактическийПериодДействия()");
		Список.Добавить("ДанныеГрафика","ДанныеГрафика");
	ИначеЕсли Метаданное = "РегистрыСведений" Тогда
		Список.Добавить("СрезПоследних","СрезПоследних");
		Список.Добавить("СрезПервых","СрезПервых");
	ИначеЕсли Метаданное = "Последовательности" Тогда
		Список.Добавить("Границы","Границы");
	ИначеЕсли Метаданное = "КритерийОтбора" Тогда
	ИначеЕсли Метаданное = "БизнесПроцесс" Тогда
		Список.Добавить("Точки","Точки");
	ИначеЕсли Метаданное = "Задача" Тогда
	КонецЕсли;
	Возврат кзФильтроватьСписок(Фильтр,Список,ГлавнаяФорма);
КонецФункции

Функция кзФильтроватьСписок(Фильтр, Знач Список=Неопределено, ГлавнаяФорма)
	Перем СтрокаСЗапросами;
	Перем ТаблицаФильтра;
	Перем НоваяСтрока;
	Перем ЭлементСписка;
	Если Список = Неопределено Тогда
		Список = Новый СписокЗначений();
		СтрокаСЗапросами = ДополнительныеПараметры.Найти("Шаблоны","Параметр");
		Если СтрокаСЗапросами = Неопределено Тогда
			кзСохранитьШаблоны(ГлавнаяФорма);
			СтрокаСЗапросами = ДополнительныеПараметры.Найти("Шаблоны","Параметр");
		КонецЕсли;
		ТаблицаФильтра = СтрокаСЗапросами.Значение.Скопировать();
		НоваяСтрока = ТаблицаФильтра.Добавить();
		НоваяСтрока.Значение = "Выбрать * из";
		НоваяСтрока.Использовать = Истина;
		НоваяСтрока.Параметр = "Выбрать";
		НоваяСтрока = ТаблицаФильтра.Добавить();
		НоваяСтрока.Значение = "Выбрать Первые 1 * из";
		НоваяСтрока.Использовать = Истина;
		НоваяСтрока.Параметр = "Выбрать";
		Если ТаблицаФильтра.количество() > 0 Тогда
			Список = кзВернутьЗначенияУдовлетворяющиеФильтру(Фильтр,ТаблицаФильтра);
		КонецЕсли;
	Иначе
		Если Фильтр <> Неопределено Тогда
			ТаблицаФильтра = Новый ТаблицаЗначений();
			ТаблицаФильтра.Колонки.Добавить("Значение",кзПолучитьОписаниеТиповСтрокиЛокально(100));
			ТаблицаФильтра.Колонки.Добавить("Параметр",кзПолучитьОписаниеТиповСтрокиЛокально(100));
			ТаблицаФильтра.Колонки.Добавить("Использовать",кзПолучитьОписаниеПроизвольногоТипаЛокально(Тип("Булево")));
			ТаблицаФильтра.Колонки.Добавить("Картинка");
			Для каждого ЭлементСписка Из Список Цикл
				НоваяСтрока = ТаблицаФильтра.Добавить();
				НоваяСтрока.Значение = ЭлементСписка.Представление;
				НоваяСтрока.Параметр = ЭлементСписка.Значение;
				НоваяСтрока.Использовать = Истина;
				НоваяСтрока.Картинка = ЭлементСписка.Картинка;
			КонецЦикла;
			Список = кзВернутьЗначенияУдовлетворяющиеФильтру(Фильтр,ТаблицаФильтра);
		КонецЕсли;
	КонецЕсли;
	Возврат Список;
КонецФункции

Функция кзПолучитьКартинку(Метаданное, ГлавнаяФорма)
	Перем Результат;
	Если Метаданное = "Константы" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаКонстанты.Картинка;
	ИначеЕсли Метаданное = "Справочники" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаСправочники.Картинка;
	ИначеЕсли Метаданное = "Документы" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаДокументы.Картинка;
	ИначеЕсли Метаданное = "ЖурналыДокументов" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаЖурналыДокументов.Картинка;
	ИначеЕсли Метаданное = "Перечисления" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаПеречисления.Картинка;
	ИначеЕсли Метаданное = "ПланыВидовРасчета" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаПланыВидовРасчета.Картинка;
	ИначеЕсли Метаданное = "ПланыВидовХарактеристик" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаПланыВидовХарактеристик.Картинка;
	ИначеЕсли Метаданное = "ПланыОбмена" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаПланыОбмена.Картинка;
	ИначеЕсли Метаданное = "ПланыСчетов" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаПланыСчетов.Картинка;
	ИначеЕсли Метаданное = "РегистрыБухгалтерии" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаРегистрыБухгалтерии.Картинка;
	ИначеЕсли Метаданное = "РегистрыНакопления" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаРегистрыНакопления.Картинка;
	ИначеЕсли Метаданное = "РегистрыРасчета" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаРегистрыРасчета.Картинка;
	ИначеЕсли Метаданное = "РегистрыСведений" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаРегистрыСведений.Картинка;
	ИначеЕсли Метаданное = "Последовательности" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаПоследовательности.Картинка;
	ИначеЕсли Метаданное = "КритерииОтбора" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаКритерииОтбора.Картинка;
	ИначеЕсли Метаданное = "БизнесПроцессы" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаБизнесПроцессы.Картинка;
	ИначеЕсли Метаданное = "Задачи" Тогда
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаЗадачи.Картинка;
	Иначе
		Результат = ГлавнаяФорма.ЭлементыФормы.КартинкаЗадачи.Картинка;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзЗагрузитьПоляМетаданного(Знач Метаданное, Знач Имя, Знач Таблица, Форма, Фильтр=Неопределено, ГлавнаяФорма)
	Перем Список;
	Перем Картинка;
	Перем ТекМетаданные;
	Перем ЭлементКоллекции;
	Перем ТекМетаданное;
	Перем ТекМетаданныеСписок;
	Перем ДопНазваниеРесурса;
	Перем Результат;
	Список = Новый СписокЗначений();
	Метаданное = Метаданное.Значение;
	Если Метаданное = "Константы" Тогда
		Картинка = Форма.ЭлементыФормы.КартинкаКонстанты.Картинка;
		ТекМетаданные = Вычислить("Метаданные[""" + Метаданное + """]");
		Для каждого ЭлементКоллекции Из ТекМетаданные Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,Картинка);
		КонецЦикла;
	ИначеЕсли Метаданное = "ПланыВидовХарактеристик" Тогда
	ИначеЕсли (Метаданное = "Справочник" ИЛИ Метаданное = "Документ") Тогда
		Список.Добавить("Ссылка","Ссылка");
		Список.Добавить("ПометкаУдаления","ПометкаУдаления");
		Если Метаданное = "Справочник" Тогда
			Список.Добавить("Код","Код");
			Список.Добавить("Предопределенный","Предопределенный");
			Список.Добавить("Родитель","Родитель");
			Список.Добавить("ЭтоГруппа","ЭтоГруппа");
			Список.Добавить("Наименование","Наименование");
			ТекМетаданное = "Справочники";
		ИначеЕсли Метаданное = "Документ" Тогда
			Список.Добавить("Номер","Номер");
			Список.Добавить("Дата","Дата");
			Список.Добавить("Проведен","Проведен");
			ТекМетаданное = "Документы";
		Иначе
			Возврат Список;
		КонецЕсли;
		Картинка = ГлавнаяФорма.ЭлементыФормы.КартинкаРеквизит.Картинка;
		Если Таблица = Неопределено Тогда
			ТекМетаданные = Вычислить("Метаданные[""" + ТекМетаданное + """][""" + Имя + """]");
		Иначе
			ТекМетаданные = Вычислить("Метаданные[""" + ТекМетаданное + """][""" + Имя + """].ТабличныеЧасти[""" + Таблица + """]");
		КонецЕсли;
		ТекМетаданныеСписок = ТекМетаданные.Реквизиты;
		Для каждого ЭлементКоллекции Из ТекМетаданныеСписок Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,Картинка);
		КонецЦикла;
	ИначеЕсли Метаданное = "ЖурналДокументов" Тогда
		Картинка = Форма.ЭлементыФормы.КартинкаЖурналыДокументов.Картинка;
		ТекМетаданные = Метаданные.ЖурналыДокументов;
		Для каждого ЭлементКоллекции Из ТекМетаданные Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,Картинка);
		КонецЦикла;
	ИначеЕсли Метаданное = "Перечисление" Тогда
		Картинка = Форма.ЭлементыФормы.КартинкаПеречисления.Картинка;
		ТекМетаданные = Метаданные.Перечисления;
		Для каждого ЭлементКоллекции Из ТекМетаданные Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,Картинка);
		КонецЦикла;
	ИначеЕсли Метаданное = "ПланыВидовРасчета" Тогда
	ИначеЕсли Метаданное = "ПланыОбмена" Тогда
	ИначеЕсли Метаданное = "ПланыСчетов" Тогда
	ИначеЕсли Метаданное = "РегистрыБухгалтерии" Тогда
	ИначеЕсли (Метаданное = "РегистрНакопления" ИЛИ Метаданное = "РегистрСведений") Тогда
		Если Метаданное = "РегистрНакопления" Тогда
			ТекМетаданные = "РегистрыНакопления";
		ИначеЕсли Метаданное = "РегистрСведений" Тогда
			ТекМетаданные = "РегистрыСведений";
		Иначе
			Возврат Список;
		КонецЕсли;
		ТекМетаданные = Вычислить("Метаданные[""" + ТекМетаданные + """][""" + Имя + """]");
		Картинка = Форма.ЭлементыФормы.КартинкаИзмерения.Картинка;
		ТекМетаданныеСписок = ТекМетаданные.Измерения;
		Список.Добавить("Регистратор","Регистратор");
		Для каждого ЭлементКоллекции Из ТекМетаданныеСписок Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,Картинка);
		КонецЦикла;
		Картинка = Форма.ЭлементыФормы.КартинкаРесурсы.Картинка;
		ТекМетаданныеСписок = ТекМетаданные.Ресурсы;
		Для каждого ЭлементКоллекции Из ТекМетаданныеСписок Цикл
			Если (Таблица <> Неопределено И Таблица.Значение = "Обороты") Тогда
				Список.Добавить(ЭлементКоллекции.Имя + "Оборот",ЭлементКоллекции.Имя + "Оборот",,Картинка);
				Список.Добавить(ЭлементКоллекции.Имя + "Приход",ЭлементКоллекции.Имя + "Приход",,Картинка);
				Список.Добавить(ЭлементКоллекции.Имя + "Расход",ЭлементКоллекции.Имя + "Расход",,Картинка);
			ИначеЕсли (Таблица <> Неопределено И Таблица.Значение = "Остатки") Тогда
				Список.Добавить(ЭлементКоллекции.Имя + "Остаток",ЭлементКоллекции.Имя + "Остаток",,Картинка);
			ИначеЕсли (Таблица <> Неопределено И Таблица.Значение = "ОстаткиИОбороты") Тогда
				Список.Добавить(ЭлементКоллекции.Имя + "НачальныйОстаток",ЭлементКоллекции.Имя + "НачальныйОстаток",,Картинка);
				Список.Добавить(ЭлементКоллекции.Имя + "Приход",ЭлементКоллекции.Имя + "Приход",,Картинка);
				Список.Добавить(ЭлементКоллекции.Имя + "Расход",ЭлементКоллекции.Имя + "Расход",,Картинка);
				Список.Добавить(ЭлементКоллекции.Имя + "КонечныйОстаток",ЭлементКоллекции.Имя + "КонечныйОстаток",,Картинка);
			Иначе
				ДопНазваниеРесурса = "";
			КонецЕсли;
		КонецЦикла;
		Картинка = Форма.ЭлементыФормы.КартинкаРеквизит.Картинка;
		ТекМетаданныеСписок = ТекМетаданные.Реквизиты;
		Для каждого ЭлементКоллекции Из ТекМетаданныеСписок Цикл
			Список.Добавить(ЭлементКоллекции.Имя,ЭлементКоллекции.Имя,,Картинка);
		КонецЦикла;
	ИначеЕсли Метаданное = "РегистрыРасчета" Тогда
	ИначеЕсли Метаданное = "Последовательности" Тогда
	ИначеЕсли Метаданное = "КритерийОтбора" Тогда
	ИначеЕсли Метаданное = "БизнесПроцесс" Тогда
	ИначеЕсли Метаданное = "Задача" Тогда
	КонецЕсли;
	Результат = кзФильтроватьСписок(Фильтр,Список,ГлавнаяФорма);
	Возврат Результат;
КонецФункции

Функция кзСформироватьПравильнуюСтроку(НачальнаяСтрока, Тип)
	Перем Результат;
	Перем ДлинаСтроки;
	Перем флагПропуск;
	Перем флагРавно;
	Перем СписокЗапрещенныхСимволов;
	Перем СтрПараметр;
	Перем i;
	Перем ТекПодСтрока;
	Перем Правильно;
	Перем флагТочка;
	Результат = Ложь;
	Если Тип = "Параметр" Тогда
		ДлинаСтроки = СтрДлина(НачальнаяСтрока);
		Результат = "";
		флагПропуск = Истина;
		флагРавно = Ложь;
		СписокЗапрещенныхСимволов = Новый СписокЗначений();
		СписокЗапрещенныхСимволов.Добавить("	");
		СписокЗапрещенныхСимволов.Добавить(" ");
		СтрПараметр = "";
		Для i = 1 По ДлинаСтроки Цикл
			ТекПодСтрока = Сред(НачальнаяСтрока,ДлинаСтроки - i + 1,1);
			Если ТекПодСтрока = "=" Тогда
				флагРавно = Истина;
			ИначеЕсли флагРавно Тогда
				Если СписокЗапрещенныхСимволов.НайтиПоЗначению(ТекПодСтрока) = Неопределено Тогда
					флагПропуск = Ложь;
					СтрПараметр = ТекПодСтрока + СтрПараметр;
				ИначеЕсли НЕ флагПропуск Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			Результат = ТекПодСтрока + Результат;
		КонецЦикла;
		Попытка
			RegExp = Новый COMОбъект("VBScript.RegExp");
			RegExp.Multiline = Ложь;
			RegExp.Global = Истина;
			RegExp.IgnoreCase = Истина;
			RegExp.Pattern = "^(.\s+|\s*)[a-zA-Zа-яА-я]+[0-9]*[\s\t ]*=[\s\t ]*\&$";
			Правильно = RegExp.Test(Результат);
			Если Правильно = 0 Тогда
				Результат = Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если СтрПараметр = "" Тогда
			Результат = Ложь;
		Иначе
			Результат = Новый Структура("Строка,Параметр",Результат,СтрПараметр);
		КонецЕсли;
	ИначеЕсли Тип = "Точка" Тогда
		СписокЗапрещенныхСимволов = Новый СписокЗначений();
		СписокЗапрещенныхСимволов.Добавить("	");
		СписокЗапрещенныхСимволов.Добавить(" ");
		ДлинаСтроки = СтрДлина(НачальнаяСтрока);
		Результат = "";
		флагТочка = Ложь;
		Для i = 1 По ДлинаСтроки Цикл
			ТекПодСтрока = Сред(НачальнаяСтрока,ДлинаСтроки - i + 1,1);
			Если СписокЗапрещенныхСимволов.НайтипоЗначению(ТекПодСтрока) <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			Если ТекПодСтрока = "." Тогда
				Если флагТочка Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				флагТочка = Истина;
			Иначе
				флагТочка = Ложь;
			КонецЕсли;
			Результат = ТекПодСтрока + Результат;
		КонецЦикла;
		Если ((Результат <> Ложь И Результат <> "") И Прав(Результат,1) <> ".") Тогда
			Результат = Результат + "*#";
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция кзВернутьЗначенияУдовлетворяющиеФильтру(Фильтр, Таблица)
	Перем СтрокаСоЗначениями;
	Перем Результат;
	Перем СтрокаПоиска;
	Перем СтрокаТаблицы;
	Перем Массив;
	Перем i;
	Перем ТекЗначение;
	Перем Параметры;
	Перем СписокПараметров;
	Перем ПодходящиеСтроки;
	СтрокаСоЗначениями = Новый СписокЗначений();
	Результат = Новый СписокЗначений();
	Результат = Новый СписокЗначений();
	RegExp.Pattern = "(^|\s)(" + СтрЗаменить(Фильтр,"?","\?") + ")[a-zA-Zа-яА-я]*";
	СтрокаПоиска = "";
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаПоиска = СтрокаПоиска + ?(СтрокаПоиска = "", "", "; ") + СтрокаТаблицы.Параметр;
	КонецЦикла;
	Массив = RegExp.Execute(СтрокаПоиска);
	СтрокаСоЗначениями.Очистить();
	Для i = 0 По Массив.Count - 1 Цикл
		ТекЗначение = СокрЛП(Массив.Item(i).Value);
		СтрокаСоЗначениями.Добавить(ТекЗначение,ТекЗначение);
	КонецЦикла;
	Параметры = Новый Структура();
	Параметры.Вставить("ИсточникДанных",Новый ОписаниеИсточникаДанных(Таблица));
	СписокПараметров = Новый СписокЗначений();
	СписокПараметров.Добавить(СтрокаСоЗначениями,"Параметр");
	СписокПараметров.Добавить(Истина,"Использовать");
	Параметры.Вставить("ПараметрыЗапроса",СписокПараметров);
	ПодходящиеСтроки = кзВернутьРезультатЗапросаПоИсточникуДанных(Параметры);
	Для каждого СтрокаТаблицы Из ПодходящиеСтроки Цикл
		Результат.Добавить(СтрокаТаблицы.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура кзСкопироватьШаблоны(Дерево, ГлавнаяФорма) Экспорт
	Перем НазваниеСпециальнойСтроки;
	Перем Специальнаястрока;
	Перем ТемпТаблица;
	Перем СтрокаТаблицы;
	Перем НоваяСтрока;
	НазваниеСпециальнойСтроки = ДополнительныеПараметры.Найти("СлужебнаяСтрокаДереваЗапросов","Параметр");
	Если НазваниеСпециальнойСтроки <> Неопределено Тогда
		Специальнаястрока = Дерево.Строки.Найти(НазваниеСпециальнойСтроки.Значение,"Запрос");
		Если Специальнаястрока <> Неопределено Тогда
			Если ГлавнаяФорма.шаблоны.колонки.Количество() <> Специальнаястрока.ПараметрыЗапроса.Колонки.Количество() Тогда
				Если Вопрос("Изменился формат таблицы шаблонов. " + Символы.ПС + "Возможна некорректная работа обработки. " + Символы.ПС + "Обновить таблицу шаблонов, при этом данные по шаблонам будут утеряны?!",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					ГлавнаяФорма.шаблоны = Специальнаястрока.ПараметрыЗапроса.Скопировать();
				КонецЕсли;
			ИначеЕсли ((ГлавнаяФорма.шаблоны.колонки.Значение.ТипЗначения <> Специальнаястрока.ПараметрыЗапроса.Колонки.Значение.ТипЗначения ИЛИ ГлавнаяФорма.шаблоны.колонки.Использовать <> Специальнаястрока.ПараметрыЗапроса.Колонки.Использовать.ТипЗначения) ИЛИ ГлавнаяФорма.шаблоны.колонки.Параметр <> Специальнаястрока.ПараметрыЗапроса.Колонки.Параметр.ТипЗначения) Тогда
				ТемпТаблица = ГлавнаяФорма.шаблоны.скопировать();
				ТемпТаблица.Очистить();
				Для каждого СтрокаТаблицы Из Специальнаястрока.ПараметрыЗапроса Цикл
					НоваяСтрока = ТемпТаблица.Добавить();
					НоваяСтрока.Значение = СтрокаТаблицы.Значение;
					НоваяСтрока.Использовать = СтрокаТаблицы.Использовать;
					НоваяСтрока.Параметр = СтрокаТаблицы.Параметр;
				КонецЦикла;
				ГлавнаяФорма.шаблоны = ТемпТаблица.Скопировать();
			Иначе
				ГлавнаяФорма.шаблоны = Специальнаястрока.ПараметрыЗапроса.Скопировать();
			КонецЕсли;
			Дерево.Строки.Удалить(Специальнаястрока);
			кзСохранитьШаблоны(ГлавнаяФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция кзРаботаСЯндексДеньги(Режим=Неопределено)
	Перем МоиДанныеЯндекс;
	Перем ТД;
	Если Режим = Неопределено Тогда
		МоиДанныеЯндекс = "
		|Визитная карточка участника платежной системы Яндекс.Деньги
		|
		|Для того, чтобы прочесть данное сообщение произведите следующие действия:
		|
		|- Откройте Интернет.Кошелек
		|- Выделите текст сообщения, с помощью команды ''Выделить все'' меню ''Правка''
		|(или одновременным нажатием клавиш Ctrl+A)
		|- Скопируйте выделенный текст в буфер обмена Windows, с помощью
		|команды ''Копировать'' меню ''Правка'' (или одновременным нажатием
		|клавиш Ctrl+С)
		|- В главном окне Интернет.Кошелька выберите пункт меню ''Принять
		|информацию из буфера обмена или файла''
		|
		|Visiting card of Yandex.Money payment system user
		|This message is sent to you by user of Yandex.Money payment system (based
		|on PayCash technology). In contains information in specific format, that can
		|be read with the use of Internet.Wallet software. If you are sure that you
		|received this message by mistake, simply disregard it.
		|
		|To read this message to your Internet.Wallet, do the following:
		|
		|- Select the message text using the ''Select All'' command, that can be found
		|in ''Edit'' menu (or simply press Ctrl+A)
		|- Copy the selection into the Windows Clipboard using the ''Copy'' command
		|in ''Edit'' menu (or press Ctrl+C or Ctrl+Ins)
		|- Click the ''Read message from Clipboard or file'' item in the main window
		|of Internet.Wallet
		|-----Begin PayCash Message-----
		|MsgVersion=1.0
		|
		|4QEAAA==
		|AQAAAGeVwJFwjslCAAAAALkBAAChAAAAAQAAAAmcVfFFd2dlbnkgTGF2ZWxpbgAAAAAA
		|AAAAAAAAAAAAAAAAAAE+AAAAy+Di5evo7SDF4uPl7ejpINHl8OPl5eLo9w0K0ffl8iDq
		|7vDw5fHv7u3k5e3y4DogNDEwMDExNjI3NTI2MAAbBmIKEicBABInAQBHCF+iI6CsR7PI
		|z4V7xKdLVaDo1sdPk0MZJirMP7MnNPyoFOD0xroV4MpfAim/9c0yWl4dABgJQm4fNWOR
		|V1GYmhHuTUOFic5W/XdWDi/cfa4K/BTgzaeEJ/udxpExS7/c6pQkF12TgKxxaIr5tF5s
		|xcYTta5c5HcO3Ca1IkAOvQAAAAAbBmIKGAsiTgEAIk4BAHEjfKu8+5LgHCGF3Nvk14aL
		|Pn5fAkRS7kAq7VlI3s91EHo8TP+t9oFN+2G0e04czsc0HNtUSefmSmBfEcXU/bOZqIGx
		|0v/qD2b1ziNgIoQR8MPJwLx9xZuRsw/GOYBhdDHph4KWitIsibf9kQ9sqMBGqXIt0aT3
		|uV+7cdkdoqGBAAAAACQAAAAAAQwAIAAAAAEAAAAYAAAAIAAAAAwAAAB6ZW5AbGlzdC5y
		|dQA7ZEjmCUg3SKW8X37hyYtteW/Gww==
		|-----End PayCash Message-----
		|";
		ТД = Новый ТекстовыйДокумент();
		ТД.УстановитьТекст(МоиДанныеЯндекс);
		ТД.Показать("Визитная карточка Лавелина Евгения для вставки в программу Интернет.Кошелек");
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция кзЗаполнитьAbout()
	Перем ФормаAbout;
	Перем КоманднаяПанель;
	Перем Кнопка;
	ФормаAbout = ПолучитьФорму("Точка");
	ФормаAbout.ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьПодайте");
	ФормаAbout.ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьWWW");
	ФормаAbout.ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьПочта");
	ФормаAbout.ЭлементыФормы.Добавить(Тип("КоманднаяПанель"),"ПанельНижняя");
	КоманднаяПанель = ФормаAbout.ЭлементыФормы.Найти("ПанельНижняя");
	КоманднаяПанель.Вспомогательная = Ложь;
	КоманднаяПанель.установитьПривязку(ГраницаЭлементаУправления.Верх,ФормаAbout.Панель,ГраницаЭлементаУправления.Низ);
	КоманднаяПанель.установитьПривязку(ГраницаЭлементаУправления.Низ,ФормаAbout.Панель,ГраницаЭлементаУправления.Низ);
	КоманднаяПанель.установитьПривязку(ГраницаЭлементаУправления.Право,ФормаAbout.Панель,ГраницаЭлементаУправления.Право);
	Кнопка = КоманднаяПанель.Кнопки.Добавить("РазделительКнопокКопирования");
	Кнопка.Текст = "Выделение";
	Кнопка.Подсказка = "Режим выделения строк.";
	Кнопка.Доступность = Истина;
	Кнопка.ИзменяетДанные = Ложь;
	ФормаAbout.Открыть();
КонецФункции

Функция кзВернутьРезультатЗапросаПоИсточникуДанных(Параметры)
	Перем ТекПостроительЗапроса;
	Перем ТекПараметр;
	Перем Отбор;
	ТекПостроительЗапроса = Новый ПостроительОтчета();
	ТекПостроительЗапроса.ИсточникДанных = Параметры.ИсточникДанных;
	Если Параметры.Свойство("ПараметрыЗапроса") Тогда
		Для каждого ТекПараметр Из Параметры.ПараметрыЗапроса Цикл
			Отбор = ТекПостроительЗапроса.Отбор;
			Если Отбор.Найти(ТекПараметр.Представление) = Неопределено Тогда
				Отбор.Добавить(ТекПараметр.Представление);
			КонецЕсли;
			Если ТипЗнч(ТекПараметр.Значение) = Тип("СписокЗначений") Тогда
				Отбор[ТекПараметр.Представление].ВидСравнения = ВидСравнения.ВСписке;
			Иначе
				Отбор[ТекПараметр.Представление].ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
			Отбор[ТекПараметр.Представление].Значение = ТекПараметр.Значение;
			Отбор[ТекПараметр.Представление].Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	ТекПостроительЗапроса.Выполнить();
	Возврат ТекПостроительЗапроса.Результат.Выгрузить();
КонецФункции

Процедура кзПолучитьИзЗапроса(Форма) Экспорт
	Перем ТекстЗапроса;
	Перем Запрос;
	Перем ПараметрыЗапроса;
	Перем СписокПараметров;
	Перем ПараметрЗапроса;
	Перем ИмяПараметра;
	Перем СтрокаПараметров;
	ТекстЗапроса = Форма.ВладелецФормы.ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	СписокПараметров = Новый СписокЗначений();
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		СписокПараметров.Добавить(ПараметрЗапроса.ТипЗначения,ПараметрЗапроса.Имя,Истина);
	КонецЦикла;
	Для каждого ПараметрЗапроса Из СписокПараметров Цикл
		ИмяПараметра = ПараметрЗапроса.Представление;
		СтрокаПараметров = Форма.Параметры.Найти(ИмяПараметра,"ИмяПараметра");
		Если СтрокаПараметров = Неопределено Тогда
			СтрокаПараметров = Форма.Параметры.Добавить();
			СтрокаПараметров.ИмяПараметра = ИмяПараметра;
			СтрокаПараметров.ЭтоВыражение = Ложь;
		КонецЕсли;
		Если СтрокаПараметров.ЭтоВыражение <> 2 Тогда
			СтрокаПараметров.ЗначениеПараметра = ПараметрЗапроса.Значение.ПривестиЗначение(СтрокаПараметров.ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	Если НЕ Форма.Открыта() Тогда
		Форма.Открыть();
	КонецЕсли;
	Форма.Активизировать();
КонецПроцедуры


