// Игорь 22.09.2011 16:34:49
Перем мСохраненныеЗначения Экспорт; 
Перем мРегистрЗаполнен Экспорт;
//Перем мПрограммно Экспорт;

////////////////////////////////////Программная работа с обработкой////////////////////////////////////////////
//Инициализация
//
Процедура ОбработкаИнициализация(СтруктураПараметрыФормы) Экспорт	  
	Если СтруктураПараметрыФормы = Неопределено Тогда
		ЭтаФорма =  ПолучитьФорму(ЭтотОбъект.Метаданные().ПолноеИмя() +".Форма");
	Иначе			
		ЭтаФорма =  ПолучитьФорму(ЭтотОбъект.Метаданные().ПолноеИмя() +".Форма", СтруктураПараметрыФормы);
	КонецЕсли;
	
	Если ЭтаФорма.Открыта() Тогда
		ЭтаФорма.Активизировать();
	Иначе
		ЭтаФорма.Открыть();		
	КонецЕсли; 	  
КонецПроцедуры

//Возвращает структуру сохраненных значений
//
Функция ПолучитьСтруктуруСохраненныхЗначений(СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если СтруктураПараметрыФормы = Неопределено Тогда
		ЭтаФорма =  ПолучитьФорму(ЭтотОбъект.Метаданные().ПолноеИмя() +".Форма");
	Иначе			
		ЭтаФорма =  ПолучитьФорму(ЭтотОбъект.Метаданные().ПолноеИмя() +".Форма", СтруктураПараметрыФормы);
	КонецЕсли;	
	
	//Тоесть не модифицируеться в данный момент	
	Если не ЭтаФорма.Открыта() Тогда		
		Попытка
			мСохраненныеЗначения.Вставить("КоличествоПопытокПроверки", ЭтаФорма.Объект.КоличествоПопытокПроверки);
			мСохраненныеЗначения.Вставить("КаталогДляОбмненаДисконтнымиКартамиHTTP", ЭтаФорма.Объект.КаталогДляОбмненаДисконтнымиКартамиHTTP);
			мСохраненныеЗначения.Вставить("ВремяПоследнейЗагрузкиВидовСертификатов", ЭтаФорма.Объект.ВремяПоследнейЗагрузкиВидовСертификатов);
			мСохраненныеЗначения.Вставить("ВремяПоследнейЗагрузкиДисконтныхКарт", ЭтаФорма.Объект.ВремяПоследнейЗагрузкиДисконтныхКарт);
			мСохраненныеЗначения.Вставить("ВремяПоследнейЗагрузкиСертификатов", ЭтаФорма.Объект.ВремяПоследнейЗагрузкиСертификатов);
			мСохраненныеЗначения.Вставить("МаскаФайловВидыСертификатов", ЭтаФорма.Объект.МаскаФайловВидыСертификатов);
			мСохраненныеЗначения.Вставить("МаскаФайловДисконтныеКарты", ЭтаФорма.Объект.МаскаФайловДисконтныеКарты);
			мСохраненныеЗначения.Вставить("МаскаФайловСертификаты", ЭтаФорма.Объект.МаскаФайловСертификаты);
			мСохраненныеЗначения.Вставить("УдалятьНеактуальныеФайлыОбменаHTTP", ЭтаФорма.Объект.УдалятьНеактуальныеФайлыОбменаHTTP);		  
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
	Иначе
		Сообщить(НСтр("ru = 'В данный момент происходит изменение формы!
		| повторите действие позже.'"), СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если мСохраненныеЗначения.Количество() > 0 Тогда
		Возврат мСохраненныеЗначения;
	Иначе 
		Возврат Новый Структура;
	КонецЕсли;	 
КонецФункции

//Заполнить из вне
//Возвращает: 
//истина если заполнено
//ложь если не заполнено
Функция ЗаполнитьПрограммно() Экспорт   
	ЭтаФорма =  ПолучитьФорму(ЭтотОбъект.Метаданные().ПолноеИмя() +".Форма");	   
	//Тоесть не модифицируеться в данный момент
	Если не ЭтаФорма.Открыта() Тогда		
		Попытка
			ЭтотОбъект.КоличествоПопытокПроверки = ЭтаФорма.Объект.КоличествоПопытокПроверки;
			ЭтотОбъект.УдалятьНеактуальныеФайлыОбменаHTTP = ЭтаФорма.Объект.УдалятьНеактуальныеФайлыОбменаHTTP;
			ЭтотОбъект.КаталогДляОбмненаДисконтнымиКартамиHTTP = ЭтаФорма.Объект.КаталогДляОбмненаДисконтнымиКартамиHTTP;
			ЭтотОбъект.ВремяПоследнейЗагрузкиВидовСертификатов = ЭтаФорма.Объект.ВремяПоследнейЗагрузкиВидовСертификатов;
			ЭтотОбъект.ВремяПоследнейЗагрузкиДисконтныхКарт = ЭтаФорма.Объект.ВремяПоследнейЗагрузкиДисконтныхКарт;
			ЭтотОбъект.ВремяПоследнейЗагрузкиСертификатов = ЭтаФорма.Объект.ВремяПоследнейЗагрузкиСертификатов;
			ЭтотОбъект.МаскаФайловВидыСертификатов = ЭтаФорма.Объект.МаскаФайловВидыСертификатов;
			ЭтотОбъект.МаскаФайловДисконтныеКарты =  ЭтаФорма.Объект.МаскаФайловДисконтныеКарты;
			ЭтотОбъект.МаскаФайловСертификаты =  ЭтаФорма.Объект.МаскаФайловСертификаты;
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Сообщить(НСтр("ru = 'В данный момент происходит изменение формы!
		| повторите действие позже.'"), СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;		 
КонецФункции

////////////////////////////////////////////////////////////////////////////////  
//
//
Процедура ВыполнитьОбработку(ТекущаяДата = Неопределено, Программно = Ложь) Экспорт 
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДата();
	КонецЕсли;
	
	// Удалить файли которые залежались
	УдалитьНеактуальныеФайлы();
	ОчисткиРегистраСписокФайловПриОбмене(ТекущаяДата ); 
	 
	 Если не мРегистрЗаполнен Тогда
		ЗаполнитьТабличныеЧасти(); 
	КонецЕсли;
	
	 
	ВыполнитьВидыСертификатов(ТекущаяДата,,Программно);
	ВыполнитьДисконтныеКарты(ТекущаяДата,, Программно);
	ВыполнитьСертификаты(ТекущаяДата,, Программно);

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧасти(мЭтотОбъект = Неопределено) Экспорт
	
	Если мЭтотОбъект = Неопределено Тогда
		мЭтотОбъект = ЭтотОбъект;
	КонецЕсли;                                                    
	
	Если ПустаяСтрока(мЭтотОбъект.КаталогДляОбмена) Тогда
		Каталог = Константы.КаталогОбмена.Получить();
	Иначе
		Каталог = мЭтотОбъект.КаталогДляОбмена;
	КонецЕсли;
	
	//Сертификаты
	ЗаписатьВРегистрСписокФайловВКаталогеСервер(Каталог + "in\certificates",  мЭтотОбъект.МаскаФайловСертификаты, , Перечисления.ВидыОбъектовОбмена.Сертификаты );
	
	//Дисконты 
	ЗаписатьВРегистрСписокФайловВКаталогеСервер(Каталог + "in\sdc_out",  мЭтотОбъект.МаскаФайловДисконтныеКарты, , Перечисления.ВидыОбъектовОбмена.ДисконтныеКарты);
	
	//ВидыСертификатов                                     	         
	ЗаписатьВРегистрСписокФайловВКаталогеСервер(Каталог + "in\certificates",  мЭтотОбъект.МаскаФайловВидыСертификатов, , Перечисления.ВидыОбъектовОбмена.ВидыСертификатов);		  
	мРегистрЗаполнен = Истина;
	
КонецПроцедуры  

Процедура ЗаписатьВРегистрСписокФайловВКаталогеСервер(ИмяКаталога, МаскаФайлов, ТекущаяДата = Неопределено, ВидыОбъектовОбмена = Неопределено) Экспорт
	
	Если ВидыОбъектовОбмена = Неопределено Тогда
		Если МаскаФайлов = МаскаФайловСертификаты Тогда
			ВидыОбъектовОбмена = Перечисления.ВидыОбъектовОбмена.Сертификаты;
		ИначеЕсли МаскаФайлов = МаскаФайловДисконтныеКарты Тогда
			ВидыОбъектовОбмена = Перечисления.ВидыОбъектовОбмена.ДисконтныеКарты;
		ИначеЕсли МаскаФайлов = МаскаФайловВидыСертификатов Тогда
			ВидыОбъектовОбмена = Перечисления.ВидыОбъектовОбмена.ВидыСертификатов;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДата();                                            
	КонецЕсли;
	
	Пользователь = глЗначениеПеременной("глТекущийПользователь");
	
	МассивФайлов = НайтиФайлы(ИмяКаталога, МаскаФайлов, Ложь);                                                
	Если МассивФайлов.Количество() > 0 Тогда
		
		Для каждого СтрокаМассива Из МассивФайлов Цикл
			//Открыть файл                                                      
			ВыбФайл = Новый Файл(СтрокаМассива.ПолноеИмя);              
			Если ВыбФайл.Существует() и ВыбФайл.ЭтоФайл() Тогда
				//Проверка в регистре  
				Если ЗаписыватьСуществующийФайл(ТекущаяДата, ВидыОбъектовОбмена,  ВыбФайл.Имя) Тогда	
					НаборЗаписей =  РегистрыСведений.СписокФайловПриОбмене.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ВидыОбъектовОбмена.Установить(ВидыОбъектовОбмена); 
					НаборЗаписей.Отбор.ИмяФайла.Установить(ВыбФайл.Имя );					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.период  = ТекущаяДата;
					НоваяЗапись.СостояниеУдаления = Ложь;
					НоваяЗапись.ВидыОбъектовОбмена = ВидыОбъектовОбмена;
					НоваяЗапись.ИмяФайла = ВыбФайл.Имя;                          
					НоваяЗапись.КоличествоПопыток = 0;              
					НоваяЗапись.СостояниеФайла = Перечисления.ВидыСостоянийФайлов.НовыйФайл;  
					НоваяЗапись.ПолноеИмяФайла = ВыбФайл.ПолноеИмя;
					НоваяЗапись.ВремяИзменения = ВыбФайл.ПолучитьВремяИзменения();
					НоваяЗапись.Размер = ВыбФайл.Размер();
					НоваяЗапись.Пользователь = Пользователь; 		
					Попытка
						НаборЗаписей.Записать();	
					Исключение
						//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					КонецПопытки; 		
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата = Неопределено, СостояниеУдаления, ВидыОбъектовОбмена, 
	Имя, КоличествоПопыток, СостояниеФайла, ПолноеИмяФайла, ВремяИзменения, Размер,
	 СтрАнализа, Ошибка = "")
	
	НаборЗаписей =  РегистрыСведений.СписокФайловПриОбмене.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор["СостояниеУдаления"].Установить(СостояниеУдаления , Истина);                          
	//НаборЗаписей.Отбор["ВидыОбъектовОбмена"].Установить(ВидыОбъектовОбмена , Истина);
	НаборЗаписей.Отбор["ИмяФайла"].Установить(Имя , Истина);                                      
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период  = ?(ТекущаяДата = Неопределено , ТекущаяДата(), ТекущаяДата);
	НоваяЗапись.СостояниеУдаления = СостояниеУдаления;
	НоваяЗапись.ВидыОбъектовОбмена = ВидыОбъектовОбмена;
	НоваяЗапись.ИмяФайла = Имя; 
	НоваяЗапись.КоличествоПопыток = КоличествоПопыток;
	НоваяЗапись.СостояниеФайла = СостояниеФайла;  
	НоваяЗапись.ПолноеИмяФайла = ПолноеИмяФайла;
	НоваяЗапись.ВремяИзменения = ВремяИзменения;
	НоваяЗапись.Размер = Размер;
	НоваяЗапись.Пользователь = глЗначениеПеременной("глТекущийПользователь"); 
	НоваяЗапись.КоличествоВсего = СтрАнализа.КоличествоВсего;
	НоваяЗапись.Новых = СтрАнализа.Новых;
	НоваяЗапись.Удаленных = СтрАнализа.Удаленных;
	НоваяЗапись.КоличествоСОшибкой =  СтрАнализа.КоличествоСОшибкой ;
	
	Если не ПустаяСтрока(Ошибка) Тогда
		НоваяЗапись.КоментарииФайла = Ошибка;		 
	КонецЕсли; 	 
	// записываем изменения в регистре         
	Попытка	  
		НаборЗаписей.Записать();
	Исключение
		//Ошибка = НСтр("ru = '"+ОписаниеОшибки()+"'");
	КонецПопытки; 
	
КонецПроцедуры

//Работа с константами
////////////////////////////////////////////////////////////////////////////////

Функция ЗаписатьКонстанту(НовоеЗначение, ИмяКонстанты = "КаталогОбмена") Экспорт		   	
	СтароеЗначение = Константы[ИмяКонстанты].Получить();
	Если  ТипЗнч(СтароеЗначение) = Тип("Число") Тогда
		СтароеЗначение = ?(СтароеЗначение= 0, Неопределено, СтароеЗначение); 		
	ИначеЕсли  ТипЗнч(СтароеЗначение) = Тип("Строка") Тогда
		СтароеЗначение = ?(ПустаяСтрока(СтароеЗначение), Неопределено, СтароеЗначение); 
	КонецЕсли;		
	Если не ПустаяСтрока(НовоеЗначение) или СтароеЗначение <> НовоеЗначение Тогда
		Если ИмяКонстанты = "КаталогОбмена" и Прав(НовоеЗначение,1) <> "\" Тогда
			НовоеЗначение = НовоеЗначение+"\";		
		Иначе 
			НовоеЗначение = НовоеЗначение;
		КонецЕсли;	
		НоваяКонстанта = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
		НоваяКонстанта.Прочитать();	
		НоваяКонстанта.Значение = НовоеЗначение;
		Попытка
			НоваяКонстанта.Записать();
		Исключение
			Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
	КонецЕсли;	
КонецФункции

Функция КонстантаЗаполнена(ИмяКонстанты = "КаталогОбмена") Экспорт		
	
	Возврат ЗначениеЗаполнено(Константы[ИмяКонстанты].Получить());	
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////

Функция ЗаписыватьСуществующийФайл(Период, ВидыОбъектовОбмена ,  ИмяФайла) Экспорт  
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Период",Период );
	Запрос.УстановитьПараметр("ВидыОбъектовОбмена",ВидыОбъектовОбмена );
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);  
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокФайловПриОбменеСрезПоследних.ИмяФайла
	|ИЗ
	|	РегистрСведений.СписокФайловПриОбмене.СрезПоследних(
	|			,
	|			(НЕ СостояниеУдаления)
	|				И ВидыОбъектовОбмена = &ВидыОбъектовОбмена
	|				И ИмяФайла = &ИмяФайла) КАК СписокФайловПриОбменеСрезПоследних";
	
	Возврат  Запрос.Выполнить().Пустой();  
КонецФункции

Функция УдалитьНеактуальныеФайлы(ТекущаяДата = Неопределено) Экспорт
	
		
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДата();
	КонецЕсли;
	
	УдалятьНеактуальныеФайлы = Константы.УдалятьНеактуальныеФайлыОбменаHTTP.Получить();
	Если УдалятьНеактуальныеФайлы = 0  Тогда
		УдалятьНеактуальныеФайлы = ЭтотОбъект.УдалятьНеактуальныеФайлыОбменаHTTP;
	КонецЕсли;
	УдалятьНеактуальныеФайлы = УдалятьНеактуальныеФайлы * 86400;
	
	КоличествоПопытокПроверки = Константы.КоличествоПопытокПроверки.Получить();
	Если КоличествоПопытокПроверки = 0  Тогда
		КоличествоПопытокПроверки = ЭтотОбъект.КоличествоПопытокПроверки;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КоличествоПопытокПроверки", КоличествоПопытокПроверки); 
	Запрос.УстановитьПараметр("КонстантаУдалятьНеактуальныеФайлы", УдалятьНеактуальныеФайлы); 
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата); 	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокФайловПриОбменеСрезПоследних.ИмяФайла,
	               |	СписокФайловПриОбменеСрезПоследних.СостояниеУдаления,
	               |	СписокФайловПриОбменеСрезПоследних.ВидыОбъектовОбмена,
	               |	СписокФайловПриОбменеСрезПоследних.КоличествоПопыток,
	               |	СписокФайловПриОбменеСрезПоследних.СостояниеФайла,
	               |	СписокФайловПриОбменеСрезПоследних.ПолноеИмяФайла,
	               |	СписокФайловПриОбменеСрезПоследних.ВремяИзменения,
	               |	СписокФайловПриОбменеСрезПоследних.Размер,
	               |	СписокФайловПриОбменеСрезПоследних.КоментарииФайла,
	               |	СписокФайловПриОбменеСрезПоследних.Пользователь,
	               |	СписокФайловПриОбменеСрезПоследних.КоличествоВсего,
	               |	СписокФайловПриОбменеСрезПоследних.Новых,
	               |	СписокФайловПриОбменеСрезПоследних.Удаленных,
	               |	СписокФайловПриОбменеСрезПоследних.КоличествоСОшибкой
	               |ИЗ
	               |	РегистрСведений.СписокФайловПриОбмене.СрезПоследних(
	               |			&ТекущаяДата,
	               |			(НЕ СостояниеУдаления)
	               |				И ВЫБОР
	               |					КОГДА КоличествоПопыток <> 0
	               |						ТОГДА &КонстантаУдалятьНеактуальныеФайлы < РАЗНОСТЬДАТ(ВремяИзменения, Период, СЕКУНДА)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК СписокФайловПриОбменеСрезПоследних
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);	
	Пока Выборка.Следующий() Цикл			                                     
		Если НайтиФайлы(Выборка.ПолноеИмяФайла).Количество() > 0 Тогда		
			Попытка
				УдалитьФайлы(Выборка.ПолноеИмяФайла);
				//Запись в регистр
			Исключение	
				
				ОшибкаУдаления = "ОшибкаУдаления ";
				СтрАнализа = Новый Структура("КоличествоВсего,Новых,Удаленных,КоличествоСОшибкой", Выборка.КоличествоВсего, Выборка.Новых, Выборка.Удаленных, Выборка.КоличествоСОшибкой);

				НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Ложь , Выборка.ВидыОбъектовОбмена, Выборка.ИмяФайла,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой, Выборка.ПолноеИмяФайла, 
				Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа, ОшибкаУдаления );	
				
				Продолжить;
			КонецПопытки;
			СтрАнализа = Новый Структура("КоличествоВсего,Новых,Удаленных,КоличествоСОшибкой", Выборка.КоличествоВсего, Выборка.Новых, Выборка.Удаленных, Выборка.КоличествоСОшибкой);

			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата,Истина , Выборка.ВидыОбъектовОбмена, Выборка.ИмяФайла, Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.УдаленФайл, Выборка.ПолноеИмяФайла,
			Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа );	
		КонецЕсли;		
	КонецЦикла;   
	
	Возврат Истина;
	
КонецФункции
                                                                           
Функция УдалитьФайлыСДиска(ПолноеИмяФайла) Экспорт		
	
	Попытка
		УдалитьФайлы(ПолноеИмяФайла);
	Исключение		
	КонецПопытки;	
	
КонецФункции                         

Процедура ОчисткиРегистраСписокФайловПриОбмене(ТекущаяДата = Неопределено) Экспорт 
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата =ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокФайловПриОбмене.ИмяФайла
	               |ИЗ
	               |	РегистрСведений.СписокФайловПриОбмене КАК СписокФайловПриОбмене,
	               |	Константа.ВремяХраненияУдаленныхФайловВРегистре КАК ВремяХраненияУдаленныхФайловВРегистре,
	               |	Константа.КоличествоПопытокПроверки КАК КоличествоПопытокПроверки
	               |ГДЕ
	               |	(ВЫБОР
	               |				КОГДА СписокФайловПриОбмене.Период < ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, ВремяХраненияУдаленныхФайловВРегистре.Значение * -86400)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ
	               |			ИЛИ СписокФайловПриОбмене.КоличествоПопыток > КоличествоПопытокПроверки.Значение)";
	                        
	РезультатЗапроса = Запрос.Выполнить();                                              
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл	
		НаборЗаписей =  РегистрыСведений.СписокФайловПриОбмене.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["ИмяФайла"].Установить(Выборка.ИмяФайла , Истина); 
		НаборЗаписей.Записать();
	КонецЦикла; 
	 
КонецПроцедуры

////////////////////////////////////// Обработать Файлы //////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////

 
Процедура ВыполнитьВидыСертификатов(ТекущаяДата = Неопределено, Кодировка = Неопределено, Программно = Ложь)
	
	Перем CODE, NAME, REQUIREDDISCOUNT, REQUIREDPASSWORD;	
	
	 Каталог = СокрЛП(КаталогДляОбмена) + "in\certificates";

	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата =ТекущаяДата();
	КонецЕсли;
	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата );
	Запрос.Текст = "ВЫБРАТЬ
	|	СписокФайловПриОбменеСрезПоследних.Период,
	|	СписокФайловПриОбменеСрезПоследних.СостояниеУдаления,
	|	СписокФайловПриОбменеСрезПоследних.ВидыОбъектовОбмена,
	|	СписокФайловПриОбменеСрезПоследних.ИмяФайла КАК Имя,
	|	СписокФайловПриОбменеСрезПоследних.КоличествоПопыток,
	|	СписокФайловПриОбменеСрезПоследних.СостояниеФайла,
	|	СписокФайловПриОбменеСрезПоследних.ПолноеИмяФайла,
	|	СписокФайловПриОбменеСрезПоследних.ВремяИзменения,
	|	СписокФайловПриОбменеСрезПоследних.Размер,
	|	СписокФайловПриОбменеСрезПоследних.КоментарииФайла,
	|	СписокФайловПриОбменеСрезПоследних.Пользователь
	|ИЗ
	|	РегистрСведений.СписокФайловПриОбмене.СрезПоследних(
	|			&ТекущаяДата,
	|			(НЕ СостояниеУдаления)
	|				И ВидыОбъектовОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ВидыСертификатов)) КАК СписокФайловПриОбменеСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	#Если  НЕ Сервер  Тогда
		Сообщить(НСтр("ru = '==== Загрузка обновлений видов сертификатов ========================='"));
	#КонецЕсли

	Ошибка = "";
	// обработка файлов
	Пока Выборка.Следующий() Цикл
		
					
		ОшибкаЧтениеФайла = ""; 
		СтрАнализа = Новый Структура("КоличествоВсего,Новых,Удаленных,КоличествоСОшибкой",0,0,0,0);
		
		#Если  НЕ Сервер  Тогда
		 	 ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		//Получить строку  
		#Если  НЕ Сервер  Тогда
			Сообщить(НСтр("ru = 'Чтение файла " + Выборка.Имя + ".'"));			
		#КонецЕсли
 			
		Если Кодировка = Неопределено Тогда
			Кодировка = КодировкаТекста.ANSI;
		КонецЕсли;
		
		ТекстовыйФайл = Новый ТекстовыйДокумент;
		
		//Костенюк Александр-Старт 26.03.2012
		//Пишем данные в транзакции по 500 строк
		НачатьТранзакцию();
		//Костенюк Александр-Финиш 26.03.2012

		Попытка		
			
			ТекстовыйФайл.Прочитать(Выборка.ПолноеИмяФайла, Кодировка);
			КоличествоДанных = ТекстовыйФайл.КоличествоСтрок();
			
			ОшибкаЗаписи = "";
			ОшибкаВФайле = "";  
			Для НомерСтроки = 1 По КоличествоДанных Цикл 
							 
				СтрАнализа.КоличествоВсего = СтрАнализа.КоличествоВсего + 1;
								 			
				РазбираемамяСтрока = ""; 
				//Получить строку
				РазбираемамяСтрока = ТекстовыйФайл.ПолучитьСтроку(НомерСтроки); 					
				
				Попытка
					РазобратьСтрокуВидовСертификатов(РазбираемамяСтрока, CODE, NAME, REQUIREDDISCOUNT, REQUIREDPASSWORD);
				Исключение
				    ОшибкаВФайле = СокрЛП(ОшибкаВФайле)  + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
					СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;

					Продолжить;
				КонецПопытки;
				
				//Попытка
				//	Справочники.ВидыСертификатов.СоздатьЗаписьВСправочнике(ОбщегоНазначенияСервер.РазложитьЧислоВСтроку(CODE, 10, Истина), NAME, REQUIREDDISCOUNT, REQUIREDPASSWORD, СтрАнализа);
				//Исключение
				//   ОшибкаЗаписи = СокрЛП(ОшибкаЗаписи) + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
				//   СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;

				//   Продолжить;
				//КонецПопытки;
				
				//Костенюк Александр-Старт 02.04.2012
				CODE = ОбщегоНазначенияСервер.РазложитьЧислоВСтроку(CODE, 10, Истина);
				
				НайденнаяСсылка = Справочники.ВидыСертификатов.НайтиПоКоду(CODE);
				
				Если НайденнаяСсылка.Пустая() Тогда
					СправочникОбект = Справочники.ВидыСертификатов.СоздатьЭлемент();
					СтрАнализа.Новых = СтрАнализа.Новых + 1;
					ТекстСообщения = "Создан новый";
				Иначе
					СправочникОбект = НайденнаяСсылка.ПолучитьОбъект();
					ТекстСообщения = "Перезаписан";
				КонецЕсли;
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("CODE", 				CODE);
				СтруктураРеквизитов.Вставить("NAME", 				NAME);
				СтруктураРеквизитов.Вставить("REQUIREDDISCOUNT", 	REQUIREDDISCOUNT);
				СтруктураРеквизитов.Вставить("REQUIREDPASSWORD", 	REQUIREDPASSWORD);
				
				ЗаполнитьРеквизитыЭлементаСправочника(СправочникОбект, СтруктураРеквизитов);

				СправочникОбект.ОбменДанными.Загрузка = Истина;
				
				Попытка
					СправочникОбект.Записать();  
					Сообщить(ТекстСообщения+" "+"элемент справочника"+" "+""""+СправочникОбект.Метаданные().Синоним+""""+" "+СправочникОбект.Ссылка);
				Исключение
					ОшибкаЗаписи = СокрЛП(ОшибкаЗаписи) + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
					СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;
					Продолжить;
				КонецПопытки;
				//Костенюк Александр-Финиш 02.04.2012
				
				//Костенюк Александр-Старт 26.03.2012
				//Пишем данные в транзакции по 500 строк
				Если НомерСтроки%500 = 0 Тогда
					ЗафиксироватьТранзакцию();
					//Сообщить("Обработано "+НомерСтроки+" строк. Транзакция зафиксирована");
					НачатьТранзакцию();
				КонецЕсли;
				//Костенюк Александр-Финиш 26.03.2012

			КонецЦикла;		                                      
			
			//Костенюк Александр-Старт 26.03.2012
			ЗафиксироватьТранзакцию();
			//Костенюк Александр-Финиш 26.03.2012
			
		Исключение
			
			//Костенюк Александр-Старт 26.03.2012
			ОтменитьТранзакцию();
			//Костенюк Александр-Финиш 26.03.2012

			ОшибкаЧтениеФайла = "Ошибка чтения файла.";
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Выборка.СостояниеУдаления,  Выборка.ВидыОбъектовОбмена,  Выборка.Имя,  Выборка.КоличествоПопыток+1,  Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой,  Выборка.ПолноеИмяФайла,  Выборка.ВремяИзменения,  Выборка.Размер, СтрАнализа, ОшибкаЧтениеФайла);			
			Продолжить;		
		КонецПопытки;		
		
		Ошибка = СокрЛП(ОшибкаВФайле) + Символы.ПС + СокрЛП(ОшибкаЗаписи) + Символы.ПС +  СокрЛП(ОшибкаЧтениеФайла);
		
		//Анализ ошибок
		Если ПустаяСтрока(Ошибка) Тогда	
			                                                              
			Попытка				
				УдалитьФайлыСДиска(Выборка.ПолноеИмяФайла);				
			Исключение			
				Ошибка = СокрЛП(Ошибка) + НСтр("ru = '"+ОписаниеОшибки()+"'");
				НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Ложь, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа, Ошибка );			  
				Продолжить;					
			КонецПопытки;
			
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Истина, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.УдаленФайл, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа );			
			//СтрАнализа.Удаленных = СтрАнализа.Удаленных + 1;

		Иначе				
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Ложь, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа, Ошибка );			  				
		КонецЕсли;
		
		#Если  НЕ Сервер  Тогда
			Сообщить(НСтр("ru = 'Чтение файла "+ Выборка.Имя+" завершено.'"));			
		#КонецЕсли
		
		ТекстовыйФайл = Неопределено;
		
	КонецЦикла;
	
	#Если  НЕ Сервер  Тогда
		Сообщить(НСтр("ru = '==== Загрузка обновлений видов сертификатов завершена================'"));		
	#КонецЕсли
	
			
КонецПроцедуры

Процедура ВыполнитьДисконтныеКарты( ТекущаяДата = Неопределено, Кодировка = Неопределено , Программно = Ложь)	
	
	перем CODE, CODESTR, NAME,  TIP, DISC,  CHECKCARD, OLDCODE, PERCENT, SUM, SHOWMSG,  MSG, BDAY, LGREET ;
		
	// подготовка списка файлов
	Каталог = СокрЛП(КаталогДляОбмена) + "in\sdc_out";
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата =ТекущаяДата();
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата );
	Запрос.Текст = "ВЫБРАТЬ
	|	СписокФайловПриОбменеСрезПоследних.Период,
	|	СписокФайловПриОбменеСрезПоследних.СостояниеУдаления,
	|	СписокФайловПриОбменеСрезПоследних.ВидыОбъектовОбмена,
	|	СписокФайловПриОбменеСрезПоследних.ИмяФайла Имя,
	|	СписокФайловПриОбменеСрезПоследних.КоличествоПопыток,
	|	СписокФайловПриОбменеСрезПоследних.СостояниеФайла,
	|	СписокФайловПриОбменеСрезПоследних.ПолноеИмяФайла,
	|	СписокФайловПриОбменеСрезПоследних.ВремяИзменения,
	|	СписокФайловПриОбменеСрезПоследних.Размер,
	|	СписокФайловПриОбменеСрезПоследних.КоментарииФайла,
	|	СписокФайловПриОбменеСрезПоследних.Пользователь
	|ИЗ
	|	РегистрСведений.СписокФайловПриОбмене.СрезПоследних(
	|			&ТекущаяДата,
	|			(НЕ СостояниеУдаления)
	|				И ВидыОбъектовОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ДисконтныеКарты)) КАК СписокФайловПриОбменеСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	//Костенюк Александр-Старт 29.03.2012
	РезултатЗапросаПоИнформационнымКартам 	= СформироватьЗапросПоИнформационнымКартам();
	ТаблицаПоИнформационнымКартам 			= РезултатЗапросаПоИнформационнымКартам.Выгрузить();
	//Костенюк Александр-Финиш 29.03.2012
	
	#Если  НЕ Сервер  Тогда
		Сообщить(НСтр("ru = '==== Загрузка обновлений дисконтных карт ========================='"));	
	#КонецЕсли
	
	Ошибка = "";	
	// обработка файлов
	Пока Выборка.Следующий() Цикл
		
		ID 	= Выборка.Имя;
		ID  = СтрЗаменить(ID, "sdc_out_", ""); 
		ID  = СтрЗаменить(ID, ".txt","");
		
		ОбменДанными.ПередатьСостоянияФайлаОбновленияДисконтныхКарт(ID, 1);
					
		ОшибкаЧтениеФайла = ""; 
		СтрАнализа = Новый Структура("КоличествоВсего,Новых,Удаленных,КоличествоСОшибкой",0,0,0,0);
		
		#Если  НЕ Сервер  Тогда
		 	 ОбработкаПрерыванияПользователя();
			 Сообщить(НСтр("ru = 'Чтение файла " + Выборка.Имя + ".'"));
		#КонецЕсли
 				               
				
		//Получить строку
		Если Кодировка = Неопределено Тогда
			Кодировка = КодировкаТекста.ANSI;
		КонецЕсли;
		
		//Костенюк Александр-Закомментировано 01.10.2012 ТекстовыйФайл = Новый ТекстовыйДокумент;		
		
		//Костенюк Александр-Старт 26.03.2012
		//Пишем данные в транзакции по 500 строк
		НачатьТранзакцию();
		//Костенюк Александр-Финиш 26.03.2012

		Попытка			
			//ТекстовыйФайл.Прочитать(Выборка.ПолноеИмяФайла, Кодировка);
			//Костенюк Александр-Старт 01.10.2012
			// Помещение во временное хранилище
			Адрес 			= ПоместитьФайлВоВременноеХранилище(Выборка.ПолноеИмяФайла, Кодировка);
			ТекстовыйФайл 	= ПолучитьИзВременногоХранилища(Адрес);
			//Костенюк Александр-Финиш 01.10.2012
			КоличествоДанных = ТекстовыйФайл.КоличествоСтрок();		

			ОшибкаЗаписи = "";
			ОшибкаВФайле = "";  
			Для НомерСтроки = 1 По КоличествоДанных Цикл 
				
				СтрАнализа.КоличествоВсего = СтрАнализа.КоличествоВсего + 1;			
				РазбираемамяСтрока = "";
				РазбираемамяСтрока = ТекстовыйФайл.ПолучитьСтроку(НомерСтроки); 					
				
				//Костенюк Александр-Старт 17.05.2012
				#Если Клиент  Тогда
					Состояние("Обработка строки "+""""+СокрЛП(РазбираемамяСтрока)+"""", НомерСтроки);
				#КонецЕсли
				//Костенюк Александр-Финиш 17.05.2012
				
				Попытка
					РазобратьСтрокуДисконтныхКарт(РазбираемамяСтрока, CODE, CODESTR, NAME, TIP, DISC, CHECKCARD, OLDCODE, PERCENT, SUM, SHOWMSG, MSG, BDAY, LGREET);	
				Исключение
					ОшибкаВФайле = СокрЛП(ОшибкаВФайле)  + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
					СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;
					Продолжить;		
				КонецПопытки;      
				
				//// СоздатьЗаписьВСправочнике	
				//Попытка
				//	Справочники.ИнформационныеКарты.СоздатьЗаписьВСправочнике(CODE, CODESTR, NAME, TIP, DISC, CHECKCARD, OLDCODE, PERCENT, SUM, Перечисления.ВидыИнформационныхКарт.Магнитная , Перечисления.ТипыИнформационныхКарт.Дисконтная, СтрАнализа );
				//Исключение
				//	ОшибкаЗаписи = СокрЛП(ОшибкаЗаписи) + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
				//	СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;
				//	Продолжить;
				//КонецПопытки;
				
				//Костенюк Александр-Старт 30.03.2012
				//ПараметрыОтбора = Новый Структура;
				//ПараметрыОтбора.Вставить("КодКарты",			CODE);
				//ПараметрыОтбора.Вставить("ВидДисконтнойКарты", 	DISC);
				//ПараметрыОтбора.Вставить("ВладелецКарты", 		NAME);
				
				//Если ЗначениеЗаполнено(PERCENT) Тогда
				//	ПараметрыОтбора.Вставить("ПроцентУточняемый", ЧИСЛО(PERCENT));
				//КонецЕсли;
				
				//НайденныеСтроки = ТаблицаПоИнформационнымКартам.НайтиСтроки(ПараметрыОтбора);
				НайденнаяСтрока = ТаблицаПоИнформационнымКартам.Найти(CODE, "КодКарты");
				
				//Если НЕ НайденныеСтроки.Количество() = 0 Тогда
				//	СправочникОбект = НайденныеСтроки[0].ДисконтнаяКарта.ПолучитьОбъект();
				Если НайденнаяСтрока <> Неопределено Тогда
					СправочникОбект = НайденнаяСтрока.ДисконтнаяКарта.ПолучитьОбъект();
					ТекстСообщения = "Перезаписан";
				Иначе
					СправочникОбект = Справочники.ИнформационныеКарты.СоздатьЭлемент();
					СправочникОбект.УстановитьНовыйКод();
					СтрАнализа.Новых = СтрАнализа.Новых + 1;
					ТекстСообщения = "Создан новый";
				КонецЕсли;
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("CODE", 		CODE);
				СтруктураРеквизитов.Вставить("CODESTR", 	CODESTR);
				СтруктураРеквизитов.Вставить("NAME", 		NAME);
				СтруктураРеквизитов.Вставить("TIP", 		TIP);
				СтруктураРеквизитов.Вставить("DISC", 		DISC);
				СтруктураРеквизитов.Вставить("CHECKCARD", 	CHECKCARD);
				СтруктураРеквизитов.Вставить("OLDCODE", 	OLDCODE);
				СтруктураРеквизитов.Вставить("PERCENT", 	PERCENT);
				СтруктураРеквизитов.Вставить("SUM", 		SUM);
				СтруктураРеквизитов.Вставить("ВидКарты", 	Перечисления.ВидыИнформационныхКарт.Магнитная);
				СтруктураРеквизитов.Вставить("ТипКарты", 	Перечисления.ТипыИнформационныхКарт.Дисконтная);
				СтруктураРеквизитов.Вставить("СтрАнализа", 	СтрАнализа);
				
				ЗаполнитьРеквизитыЭлементаСправочника(СправочникОбект, СтруктураРеквизитов);
				
				СправочникОбект.ОбменДанными.Загрузка = Истина;
				
				Попытка
					СправочникОбект.Записать();
					Сообщить(ТекстСообщения+" "+"элемент справочника"+" "+""""+СправочникОбект.Метаданные().Синоним+""""+" "+СправочникОбект.Ссылка);
				Исключение
					ОшибкаЗаписи = СокрЛП(ОшибкаЗаписи) + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
					СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;
					Продолжить;
				КонецПопытки;
				//Костенюк Александр-Финиш 30.03.2012
				
				//Костенюк Александр-Старт 26.03.2012
				//Пишем данные в транзакции по 500 строк для ускорения работы
				Если НомерСтроки%500 = 0 Тогда
					ЗафиксироватьТранзакцию();
					Сообщить("Обработано "+Строка(НомерСтроки)+" строк. Транзакция зафиксирована", СтатусСообщения.Информация);
					НачатьТранзакцию();
				КонецЕсли;
				//Костенюк Александр-Финиш 26.03.2012
				
			КонецЦикла;		                                      
			
			//Костенюк Александр-Старт 26.03.2012
			ЗафиксироватьТранзакцию();
			//Костенюк Александр-Финиш 26.03.2012

		Исключение	
			
			//Костенюк Александр-Старт 26.03.2012
			ОтменитьТранзакцию();
			//Костенюк Александр-Финиш 26.03.2012
			
			ОшибкаЧтениеФайла = "Ошибка чтения файла.";
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Выборка.СостояниеУдаления,  Выборка.ВидыОбъектовОбмена,  Выборка.Имя,  Выборка.КоличествоПопыток+1,  Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой,  Выборка.ПолноеИмяФайла,  Выборка.ВремяИзменения,  Выборка.Размер, СтрАнализа, ОшибкаЧтениеФайла);			
			Продолжить;		
			
		КонецПопытки;		
		
		Ошибка = СокрЛП(ОшибкаВФайле) + Символы.ПС + СокрЛП(ОшибкаЗаписи) + Символы.ПС +  СокрЛП(ОшибкаЧтениеФайла);
		
		//Анализ ошибок
		Если ПустаяСтрока(Ошибка) Тогда	
			
			Попытка				
				УдалитьФайлыСДиска(Выборка.ПолноеИмяФайла);				
			Исключение			
				Ошибка = СокрЛП(Ошибка) + НСтр("ru = '"+ОписаниеОшибки()+"'");
				НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Ложь, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа, Ошибка );			  
				Продолжить;		
				
			КонецПопытки;
			
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Истина, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.УдаленФайл, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа );			
			ОбменДанными.ПередатьСостоянияФайлаОбновленияДисконтныхКарт(ID, 2);
			
		Иначе				
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Ложь, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа, Ошибка );			  				
		КонецЕсли;
		#Если  НЕ Сервер  Тогда
			Сообщить(НСтр("ru = 'Чтение файла "+ Выборка.Имя+" завершено.'"));		
		#КонецЕсли
				
		ТекстовыйФайл = Неопределено;		
	КонецЦикла; 
	
	ОбменДанными.ПередатьСостоянияОбновленийДисконтныхКарт();

	#Если  НЕ Сервер  Тогда
		Сообщить(НСтр("ru = '==== Загрузка обновлений дисконтных карт завершена================'"));
	#КонецЕсли

		
КонецПроцедуры

Процедура ВыполнитьСертификаты(ТекущаяДата = Неопределено , Кодировка = Неопределено, Программно = Ложь )
	
	Перем CODE, TYPE, SUM, ACTIVE, DISCOUNT, PASSWORD;
		
	Каталог = СокрЛП(КаталогДляОбмена)+ "in\certificates";
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата =ТекущаяДата();
	КонецЕсли;
	
	//УдалитьНеактуальныеФайлы();                                                           
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата );
	Запрос.Текст = "ВЫБРАТЬ
	|	СписокФайловПриОбменеСрезПоследних.Период,
	|	СписокФайловПриОбменеСрезПоследних.СостояниеУдаления,
	|	СписокФайловПриОбменеСрезПоследних.ВидыОбъектовОбмена,
	|	СписокФайловПриОбменеСрезПоследних.ИмяФайла КАК имя,
	|	СписокФайловПриОбменеСрезПоследних.КоличествоПопыток,
	|	СписокФайловПриОбменеСрезПоследних.СостояниеФайла,
	|	СписокФайловПриОбменеСрезПоследних.ПолноеИмяФайла,
	|	СписокФайловПриОбменеСрезПоследних.ВремяИзменения,
	|	СписокФайловПриОбменеСрезПоследних.Размер,
	|	СписокФайловПриОбменеСрезПоследних.КоментарииФайла,
	|	СписокФайловПриОбменеСрезПоследних.Пользователь
	|ИЗ
	|	РегистрСведений.СписокФайловПриОбмене.СрезПоследних(
	|			&ТекущаяДата,
	|			(НЕ СостояниеУдаления)
	|				И ВидыОбъектовОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.Сертификаты)) КАК СписокФайловПриОбменеСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	#Если  НЕ Сервер  Тогда
		Сообщить(НСтр("ru = '==== Загрузка обновлений Сертификатов ========================='"));	
	#КонецЕсли
 	
	Ошибка = "";
	
	// обработка файлов
	
	Пока Выборка.Следующий() Цикл
		
					
		ОшибкаЧтениеФайла = ""; 

		СтрАнализа = Новый Структура("КоличествоВсего,Новых,Удаленных,КоличествоСОшибкой",0,0,0,0);
				
		#Если  НЕ Сервер  Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		#Если НЕ Сервер  Тогда
			Сообщить(НСтр("ru = 'Чтение файла " + Выборка.Имя + ".'"));
		#КонецЕсли	
	
		Если Кодировка = Неопределено Тогда
			Кодировка = КодировкаТекста.ANSI;
		КонецЕсли;
		                                                                                                  
		ТекстовыйФайл = Новый ТекстовыйДокумент;
		
		//Костенюк Александр-Старт 26.03.2012
		//Пишем данные в транзакции по 500 строк
		НачатьТранзакцию();
		//Костенюк Александр-Финиш 26.03.2012

		Попытка						
			ТекстовыйФайл.Прочитать(Выборка.ПолноеИмяФайла, Кодировка);		
			КоличествоДанных  = ТекстовыйФайл.КоличествоСтрок();
			
			ОшибкаЗаписи = "";
			ОшибкаВФайле = ""; 
			Для НомерСтроки = 1 По КоличествоДанных Цикл 			
				   
				СтрАнализа.КоличествоВсего = СтрАнализа.КоличествоВсего + 1;
				                                                    
				РазбираемамяСтрока = ""; 		
				//Получить строку
				РазбираемамяСтрока = ТекстовыйФайл.ПолучитьСтроку(НомерСтроки); 					
							
				Попытка
					РазобратьСтрокуСертификатов(РазбираемамяСтрока, CODE, TYPE, SUM, ACTIVE, DISCOUNT, PASSWORD);
				Исключение
				    ОшибкаВФайле = СокрЛП(ОшибкаВФайле)  + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
					СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;
					Продолжить;
				КонецПопытки;
								
				//// СоздатьЗаписьВСправочник		
				//Попытка
				//	Справочники.Сертификаты.СоздатьЗаписьВСправочнике(ОбщегоНазначенияСервер.РазложитьЧислоВСтроку(CODE, 10, Истина), ОбщегоНазначенияСервер.РазложитьЧислоВСтроку(TYPE, 10, Истина), SUM, ACTIVE, DISCOUNT, PASSWORD, СтрАнализа);	
				//Исключение
				//	ОшибкаЗаписи = СокрЛП(ОшибкаЗаписи) + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
				//	СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;
				//	Продолжить;
				//	 
				//КонецПопытки;
				
				//Костенюк Александр-Старт 02.04.2012
				CODE = ОбщегоНазначенияСервер.РазложитьЧислоВСтроку(CODE, 10, Истина);
				TYPE = ОбщегоНазначенияСервер.РазложитьЧислоВСтроку(TYPE, 10, Истина);
				
				НайденнаяСсылка = Справочники.Сертификаты.НайтиПоРеквизиту("КодСертификата", CODE);
				
				Если НайденнаяСсылка.Пустая() Тогда
					СправочникОбект = Справочники.Сертификаты.СоздатьЭлемент();
					СправочникОбект.УстановитьНовыйКод();
					СтрАнализа.Новых = СтрАнализа.Новых + 1;
					ТекстСообщения = "Создан новый";
				Иначе
					СправочникОбект = НайденнаяСсылка.ПолучитьОбъект();
					ТекстСообщения = "Перезаписан";
				КонецЕсли;
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("CODE", 		CODE);
				СтруктураРеквизитов.Вставить("TYPE", 		TYPE);
				СтруктураРеквизитов.Вставить("SUM", 		SUM);
				СтруктураРеквизитов.Вставить("ACTIVE", 		ACTIVE);
				СтруктураРеквизитов.Вставить("DISCOUNT", 	DISCOUNT);
				СтруктураРеквизитов.Вставить("PASSWORD", 	PASSWORD);
				
				ЗаполнитьРеквизитыЭлементаСправочника(СправочникОбект, СтруктураРеквизитов);

				СправочникОбект.ОбменДанными.Загрузка = Истина;
				
				Попытка
					СправочникОбект.Записать();  
					Сообщить(ТекстСообщения+" "+"элемент справочника"+" "+""""+СправочникОбект.Метаданные().Синоним+""""+" "+СправочникОбект.Ссылка);
				Исключение
					ОшибкаЗаписи = СокрЛП(ОшибкаЗаписи) + Символы.ПС + НСтр("ru = '"+ОписаниеОшибки()+ " в строке " + НомерСтроки + ".""'");
					СтрАнализа.КоличествоСОшибкой = СтрАнализа.КоличествоСОшибкой + 1;
					Продолжить;
				КонецПопытки;
				//Костенюк Александр-Финиш 02.04.2012
				
				//Костенюк Александр-Старт 26.03.2012
				//Пишем данные в транзакции по 500 строк для ускорения работы
				Если НомерСтроки%500 = 0 Тогда
					ЗафиксироватьТранзакцию();
					//Сообщить("Обработано "+НомерСтроки+" строк. Транзакция зафиксирована");
					НачатьТранзакцию();
				КонецЕсли;
				//Костенюк Александр-Финиш 26.03.2012

			КонецЦикла;		
			
			//Костенюк Александр-Старт 26.03.2012
			ЗафиксироватьТранзакцию();
			//Костенюк Александр-Финиш 26.03.2012

		Исключение			
			
			//Костенюк Александр-Старт 26.03.2012
			ОтменитьТранзакцию();
			//Костенюк Александр-Финиш 26.03.2012

			ОшибкаЧтениеФайла = "Ошибка чтения файла.";
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Выборка.СостояниеУдаления,  Выборка.ВидыОбъектовОбмена,  Выборка.Имя,  Выборка.КоличествоПопыток+1,  Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой,  Выборка.ПолноеИмяФайла,  Выборка.ВремяИзменения,  Выборка.Размер, СтрАнализа, ОшибкаЧтениеФайла);
				
			Продолжить;
			
		КонецПопытки;		
		
		Ошибка = СокрЛП(ОшибкаВФайле) + Символы.ПС + СокрЛП(ОшибкаЗаписи) + Символы.ПС +  СокрЛП(ОшибкаЧтениеФайла);
		
		  //Анализ ошибок

		Если ПустаяСтрока(Ошибка) Тогда	
			
			Попытка
				УдалитьФайлыСДиска(Выборка.ПолноеИмяФайла);	
			Исключение
				Ошибка = СокрЛП(Ошибка) + НСтр("ru = '"+ОписаниеОшибки()+"'");
				НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Ложь, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа, Ошибка );			  
				Продолжить;
			КонецПопытки;
			
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Истина, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.УдаленФайл, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа );	
			
		Иначе		
			
			НоваяЗаписьВСписокФайловПриОбмене(ТекущаяДата, Ложь, Выборка.ВидыОбъектовОбмена, Выборка.Имя,  Выборка.КоличествоПопыток + 1, Перечисления.ВидыСостоянийФайлов.ЗаписанФайлСОшибкой, Выборка.ПолноеИмяФайла, Выборка.ВремяИзменения, Выборка.Размер, СтрАнализа, Ошибка );			  		
			
		КонецЕсли;
		
		#Если  НЕ Сервер  Тогда
			Сообщить(НСтр("ru = 'Чтение файла "+ Выборка.Имя+" завершено.'"));		
		#КонецЕсли
		
		ТекстовыйФайл = Неопределено;
		
	КонецЦикла;
	
	#Если  НЕ Сервер  Тогда
		Сообщить(НСтр("ru = '==== Загрузка обновлений сертификатов завершена================'"));	
	#КонецЕсли
	
КонецПроцедуры

Функция РазобратьСтрокуДисконтныхКарт(РазбираемамяСтрока, CODE, CODESTR, NAME, TIP, DISC, CHECKCARD, OLDCODE, PERCENT, SUM, SHOWMSG, MSG, BDAY, LGREET  )
	
	CODE = "";
	CODESTR = "";
	NAME = "";//Владелец 
	TIP = 0; 
	DISC = 0; 
	CHECKCARD = 0; 
	OLDCODE = 0; 
	PERCENT = 0; 
	SUM = 0;
	SHOWMSG = 0;
	MSG = "";
	BDAY = ОбщегоНазначенияСервер.ПолучитьПустуюДату();
	LGREET = BDAY;
	
	
	Если ПустаяСтрока(РазбираемамяСтрока) Тогда
		ВызватьИсключение "Пустая строка" ;
	КонецЕсли;
	
	// -- CODE
	Поз = Найти(РазбираемамяСтрока, "©©");
	
	Если (Поз = 0) Тогда	
		РазбираемамяСтрока = "";		
	Иначе	
		CODE = Число(Лев(РазбираемамяСтрока,Поз-1)); 		
		Если CODE <> 0 Тогда
			CODE  = Формат(CODE, "ЧЦ=8; ЧГ=");	
		Иначе
			ВызватьИсключение "Ошибка CODE " + РазбираемамяСтрока;
		КонецЕсли;			
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);	
	КонецЕсли;
	
	Если ПустаяСтрока(CODE) Тогда	
		ВызватьИсключение "Пустой CODE " + РазбираемамяСтрока;
	КонецЕсли;
	
	// -- CODESTR
	Поз = Найти(РазбираемамяСтрока, "©©");
	
	Если (Поз = 0) Тогда
		CODESTR = РазбираемамяСтрока; 
		РазбираемамяСтрока = "";
	Иначе
		CODESTR = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- NAME
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		NAME = РазбираемамяСтрока;
		РазбираемамяСтрока = "";
	Иначе
		NAME = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- TIP
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//TIP = Число(РазбираемамяСтрока); 
		РазбираемамяСтрока = "";
	Иначе
		TIP = Число(Лев(РазбираемамяСтрока,Поз-1)); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- DISC
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		РазбираемамяСтрока = "";
	Иначе	
		DISCс = Лев(РазбираемамяСтрока,Поз-1);
		DISC = ?(ПустаяСтрока(DISCс), 0 , Число(DISCс)); 	
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	Если DISC = 0 Тогда	
		ВызватьИсключение "Пустой DISC ";
	КонецЕсли;

	
	// -- CHECKCARD
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//CHECKCARD = Число(РазбираемамяСтрока); 
		РазбираемамяСтрока = "";
	Иначе
		CHECKCARD = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- OLDCODE
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//OLDCODE = Число(Поз); 
		РазбираемамяСтрока = "";
	Иначе
		OLDCODE = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- PERCENT
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//PERCENT = Число(РазбираемамяСтрока); 
		РазбираемамяСтрока = "";
	Иначе
		PERCENT = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- SUM
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//SUM = Число(РазбираемамяСтрока); 
		РазбираемамяСтрока = "";
	Иначе
		SUMс = Лев(РазбираемамяСтрока,Поз-1);
		SUM = ?(ПустаяСтрока(SUMс), 0 , Число(SUMс)); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- SHOWMSG
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//SHOWMSG = Число(РазбираемамяСтрока);
		РазбираемамяСтрока = "";
	Иначе
		SHOWMSG = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- MSG
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		MSG = РазбираемамяСтрока; 
		РазбираемамяСтрока = "";
	Иначе
		MSG = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- BDAY
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//BDAY = Дата(СтрЗаменить(РазбираемамяСтрока, "-", ".")); 
		РазбираемамяСтрока = "";
	Иначе
		BDAY = СтрЗаменить(Лев(РазбираемамяСтрока,Поз-1), "-", "."); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- LGREET
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//LGREET = Дата(СтрЗаменить(РазбираемамяСтрока, "-", ".")); 
		РазбираемамяСтрока = "";
	Иначе
		LGREET = СтрЗаменить(Лев(РазбираемамяСтрока,Поз-1), "-", "."); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РазобратьСтрокуВидовСертификатов(РазбираемамяСтрока, CODE, NAME, REQUIREDDISCOUNT, REQUIREDPASSWORD)
	
	CODE = 0; 
	NAME = "";
	REQUIREDDISCOUNT = 0; 
	REQUIREDPASSWORD = 0;
	
	Если ПустаяСтрока(РазбираемамяСтрока) Тогда
		ВызватьИсключение "Пустая строка" ;
	КонецЕсли;

	// -- CODE
	Поз = Найти(РазбираемамяСтрока, "©©");
	
	Если (Поз = 0) Тогда
		CODE = Число(РазбираемамяСтрока); 
		РазбираемамяСтрока = "";
	Иначе
		CODE = Число(Лев(РазбираемамяСтрока,Поз-1)); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	Если (CODE = 0) Тогда
		ВызватьИсключение "Пустой CODE "+ РазбираемамяСтрока;
	КонецЕсли;
	
	// -- NAME
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		NAME = РазбираемамяСтрока; 
		РазбираемамяСтрока = "";
	Иначе
		NAME = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- REQUIREDDISCOUNT
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		REQUIREDDISCOUNT = Ложь; 
		РазбираемамяСтрока = "";
	Иначе
		REQUIREDDISCOUNT = Булево(Число(Лев(РазбираемамяСтрока, Поз-1))); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- REQUIREDPASSWORD
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		REQUIREDPASSWORD = Ложь; 
		РазбираемамяСтрока = "";
	Иначе
		REQUIREDPASSWORD = Булево(Число(Лев(РазбираемамяСтрока,Поз-1))); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция РазобратьСтрокуСертификатов(РазбираемамяСтрока, CODE, TYPE, SUM, ACTIVE, DISCOUNT, PASSWORD)
	
	CODE = 0; //КодСертификата
	TYPE = 0;   // ВидыСертификатов.Код
	SUM = 0;    //Сумма
	ACTIVE = 0; //Актуальность                                           
	DISCOUNT = "";//КодДисконтнойКарты 
	PASSWORD = ""; //Пароль
	
	
	Если ПустаяСтрока(РазбираемамяСтрока) Тогда
		ВызватьИсключение "Пустая строка";
	КонецЕсли;
	
	// -- CODE
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		CODE = Число(РазбираемамяСтрока); 
		РазбираемамяСтрока = "";
	Иначе
		CODE = Число(Лев(РазбираемамяСтрока,Поз-1)); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	Если (CODE = 0) Тогда
		
		ВызватьИсключение "Пустой CODE "+РазбираемамяСтрока;
		//Возврат Ложь;
		
	КонецЕсли;
	
	// -- TYPE
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//TYPE = Число(РазбираемамяСтрока); 
		РазбираемамяСтрока = "";
	Иначе
		TYPE = Число(Лев(РазбираемамяСтрока,Поз-1)); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	Если (TYPE = 0) Тогда
		
		ВызватьИсключение "Пустой TYPE "+РазбираемамяСтрока;
		//Возврат Ложь;
		
	КонецЕсли;
	
	// -- SUM
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//SUM = Число(РазбираемамяСтрока);
		РазбираемамяСтрока = "";
	Иначе
		SUM = Число(Лев(РазбираемамяСтрока,Поз-1)); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- ACTIVE
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		ACTIVE = Ложь; 
		РазбираемамяСтрока = "";
	Иначе
		ACTIVE = Булево(Число(Лев(РазбираемамяСтрока,Поз-1))); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- DISCOUNT
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//DISCOUNT = РазбираемамяСтрока;
		РазбираемамяСтрока = "";
	Иначе
		DISCOUNT = Лев(РазбираемамяСтрока,Поз-1);
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	// -- PASSWORD
	Поз = Найти(РазбираемамяСтрока, "©©");
	Если (Поз = 0) Тогда
		//PASSWORD = РазбираемамяСтрока; 
		РазбираемамяСтрока = "";
	Иначе
		PASSWORD = Лев(РазбираемамяСтрока,Поз-1); 
		РазбираемамяСтрока = Сред(РазбираемамяСтрока, Поз+2);
	КонецЕсли;
	
	Возврат Истина;
	//
КонецФункции

Процедура ЗаполнитьРеквизитыОбъекта() Экспорт 
	 ВремяПоследнейЗагрузкиВидовСертификатов  = ОбменДанными.ПолучитьВремяПоследнейЗагрузкиВидовСертификатов(); 
	 ВремяПоследнейЗагрузкиДисконтныхКарт   =  ОбменДанными.ПолучитьВремяПоследнейЗагрузкиДисконтныхКарт();                                         
	 ВремяПоследнейЗагрузкиСертификатов =   ОбменДанными.ПолучитьВремяПоследнейЗагрузкиСертификатов();
КонецПроцедуры

//Костенюк Александр-Старт 29.03.2012
// функция возвращает результат запроса по информационным картам
//
// Параметры:
//  нет
//
//	Возвращаемое значение:
//  Результат запроса 
Функция СформироватьЗапросПоИнформационнымКартам() Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ИнформационныеКарты.Ссылка КАК ДисконтнаяКарта,
	                |	ИнформационныеКарты.КодКарты КАК КодКарты,
	                |	ИнформационныеКарты.ВидДисконтнойКарты.Диск КАК ВидДисконтнойКарты,
	                |	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты,
	                |	ИнформационныеКарты.ПроцентУточняемый КАК ПроцентУточняемый
	                |ИЗ
	                |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	                |ГДЕ
	                |	НЕ ИнформационныеКарты.ЭтоГруппа";
	Запрос.Текст = ТекстЗапроса;
	Результат =  Запрос.Выполнить();	  
	
	Возврат Результат;
	
КонецФункции
//Костенюк Александр-Финиш 29.03.2012

//Костенюк Александр-Старт 30.03.2012
// Процедура записывает элемент справочника в базу данных
// 
// Параметры:
// СправочникОбект - элемент справочника, который нужно записать
//
Процедура ЗаписатьЭлементСправочника(СправочникОбект) Экспорт
	
	СправочникОбект.ОбменДанными.Загрузка 	= Истина;
	ЗаписанУспешно 							= Истина;
	
	Попытка
		СправочникОбект.Записать();  
	Исключение
		#Если  НЕ Сервер  Тогда
			Сообщить(ОписаниеОшибки());	
		#КонецЕсли
	КонецПопытки;
	
КонецПроцедуры
//Костенюк Александр-Финиш 30.03.2012

//Костенюк Александр-Старт 02.04.2012
// Процедура заполняет реквизиты элемента справочника
//
// Параметры:
// СправочникОбект - Элемент справочника
// СтруктураРеквизитов - структура значений, которыми нужно заполнить элемент справочника
//
Процедура ЗаполнитьРеквизитыЭлементаСправочника(СправочникОбект, СтруктураРеквизитов) Экспорт
	
	Если ТипЗнч(СправочникОбект) = Тип("СправочникОбъект.ИнформационныеКарты") Тогда
		
		//ЗначенияРеквизитов.Свойство("CODE", CODE);
		//ЗначенияРеквизитов.Свойство("CODESTR", CODESTR);
		//ЗначенияРеквизитов.Свойство("NAME", NAME);
		//ЗначенияРеквизитов.Свойство("TIP", TIP);
		//ЗначенияРеквизитов.Свойство("DISC", DISC);
		//ЗначенияРеквизитов.Свойство("CHECKCARD", CHECKCARD);
		//ЗначенияРеквизитов.Свойство("OLDCODE", OLDCODE);
		//ЗначенияРеквизитов.Свойство("PERCENT", PERCENT);
		//ЗначенияРеквизитов.Свойство("SUM", SUM);
		//ЗначенияРеквизитов.Свойство("ВидКарты", ВидКарты);
		//ЗначенияРеквизитов.Свойство("ТипКарты", ТипКарты);
		//ЗначенияРеквизитов.Свойство("СтрАнализа", СтрАнализа);
		
		CODE 		= СтруктураРеквизитов.CODE;
		CODESTR 	= СтруктураРеквизитов.CODESTR;
		NAME 		= СтруктураРеквизитов.NAME;
		TIP 		= СтруктураРеквизитов.TIP;
		DISC 		= СтруктураРеквизитов.DISC;
		CHECKCARD 	= СтруктураРеквизитов.CHECKCARD;
		OLDCODE 	= СтруктураРеквизитов.OLDCODE;
		PERCENT 	= СтруктураРеквизитов.PERCENT;
		SUM 		= СтруктураРеквизитов.SUM;
		ВидКарты 	= СтруктураРеквизитов.ВидКарты;
		ТипКарты 	= СтруктураРеквизитов.ТипКарты;
		СтрАнализа 	= СтруктураРеквизитов.СтрАнализа;
				
		Если TIP = 2 Тогда
			СтрАнализа.Удаленных = СтрАнализа.Удаленных + 1;
		КонецЕсли;
		
		СправочникОбект.Наименование 		= "№"+ CODE;
		СправочникОбект.ВидДисконтнойКарты 	= Справочники.ВидыДисконтныхКарт.ПолучитьВидДисконтнойКарты(TIP, DISC);
		СправочникОбект.ВидКарты 			= ВидКарты;
		СправочникОбект.КодКарты 			= CODE;
		СправочникОбект.ВладелецКарты 		= NAME;
		СправочникОбект.ТипКарты 			= ТипКарты;
		СправочникОбект.ПроцентУточняемый 	= ?(ЗначениеЗаполнено(PERCENT), Число(PERCENT), "");
		
	ИначеЕсли ТипЗнч(СправочникОбект) = Тип("СправочникОбъект.ВидыСертификатов") Тогда
		
		CODE 				= СтруктураРеквизитов.CODE;
		NAME 				= СтруктураРеквизитов.NAME;
		REQUIREDDISCOUNT 	= СтруктураРеквизитов.REQUIREDDISCOUNT;
		REQUIREDPASSWORD 	= СтруктураРеквизитов.REQUIREDPASSWORD;

		СправочникОбект.Код 							= CODE;
		СправочникОбект.Наименование 					= NAME;
		СправочникОбект.НеобходимаДисконтнаяКатрочка 	= REQUIREDDISCOUNT;
		СправочникОбект.НеобходимПароль 				= REQUIREDPASSWORD;
		
	ИначеЕсли ТипЗнч(СправочникОбект) = Тип("СправочникОбъект.Сертификаты") Тогда
		
		CODE 		= СтруктураРеквизитов.CODE;
		TYPE 		= СтруктураРеквизитов.TYPE;
		SUM 		= СтруктураРеквизитов.SUM;
		ACTIVE 		= СтруктураРеквизитов.ACTIVE;
		DISCOUNT 	= СтруктураРеквизитов.DISCOUNT;
		PASSWORD 	= СтруктураРеквизитов.PASSWORD;
		
		СправочникОбект.Наименование 	= "№" + CODE; 
		СправочникОбект.КодСертификата 	= CODE;
		СправочникОбект.ВидСертификата 	= Справочники.ВидыСертификатов.НайтиЭлементВСправочнике(TYPE);   
		СправочникОбект.ДисконтнаяКарта = Справочники.ИнформационныеКарты.НайтиЭлементВСправочнике(DISCOUNT);           
		СправочникОбект.Актуальность 	= ACTIVE;                              
		СправочникОбект.Пароль  		= PASSWORD;
		СправочникОбект.Сумма 			= SUM;	  

	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 02.04.2012

//Костенюк Александр-Старт 01.10.2012
//
// Функция помещает данные файла во временное хранилище
//
// Параметры:
// Путь - Тип: Строка. Путь к файлу.
//
// Возвращаемое значение:
// Адрес - Тип: Строка. Адрес во временном хранилище.
//
Функция ПоместитьФайлВоВременноеХранилище(Путь, Кодировка) Экспорт
	
	Данные = Новый ТекстовыйДокумент;
	Данные.Прочитать(Путь, Кодировка);	
	Адрес = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции
//Костенюк Александр-Финиш 01.10.2012


мРегистрЗаполнен = Ложь;                                                                         
мСохраненныеЗначения = Новый Структура;                                                             
МаскаФайловСертификаты = "certificates_*.txt";                                                         
МаскаФайловДисконтныеКарты = "sdc_out_*.txt";
МаскаФайловВидыСертификатов = "certif_types_*.txt";                                                                       
КоличествоПопытокПроверки = Константы.КоличествоПопытокПроверки.Получить();
УдалятьНеактуальныеФайлыОбменаHTTP = Константы.УдалятьНеактуальныеФайлыОбменаHTTP.Получить() ;               
КаталогДляОбмена =  Константы.КаталогОбмена.Получить();
ЗаполнитьРеквизитыОбъекта();