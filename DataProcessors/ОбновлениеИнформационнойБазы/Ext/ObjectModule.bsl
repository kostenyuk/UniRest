//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//#Если Клиент Тогда

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт
	
	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить() = "");
	
	Если ПервыйЗапуск Тогда

		НачатьТранзакцию();
		
		// Обновление данных справочника "ИдентификаторыОбъектовМетаданных"
		СостояниеОбновления("Обновление данных справочника ""ИдентификаторыОбъектовМетаданных""");
		Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника();
		
		// Заполнение основных настроек программы
		 		
		// Заполнение настроек и прав групп пользователей
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
		ЗафиксироватьТранзакцию();
		
		Возврат;
		
	КонецЕсли;
		
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ 	= "3.1.4.5";
	НовыйНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(НоваяВерсияИБ);
	
	Если (ТекущаяВерсияИБ = "3.1.1.1")
		ИЛИ ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "3.1.1") И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		ИЛИ ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "3.1.2") И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		ИЛИ ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "3.1.3") И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		ИЛИ ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "3.1.4") И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);		
		НачатьТранзакцию();
		
		СостояниеОбновления("");
		
		Если НЕ ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			СостояниеОбновления("Обновление данных справочника ""ИдентификаторыОбъектовМетаданных""");
			Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника();
		КонецЕсли;
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru='Выполнено ';uk='Виконано '") + СтрСообщения);
		
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОбновление

// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт

	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
	Параметры               = МакетОписаниеОбновлений.Параметры;

	// Заполнение параметров расшифровок макета описания обновлений,

	//Параметры.ФормаЗаполнениеПустойИБ          = ПолучитьФорму("ЗаполнениеПустойИБ", ФормаОписаниеОбновлений);

	//Параметры.ФормаПодбораВалют                = Справочники.Валюты.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	//Параметры.ФормаСпискаВалют                 = Справочники.Валюты.ПолучитьФормуСписка();
	//Параметры.ФормаЗагрузкиКурсов              = Обработки.ЗагрузкаКурсовВалют.ПолучитьФорму();
	//Параметры.ФормаПодбораЕдиниц               = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	//Параметры.ФормаСпискаЕдиниц                = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФормуСписка();	

	//Параметры.ФормаСпискаКонтрагентов          = Справочники.Контрагенты.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаНоменклатуры          = Справочники.Номенклатура.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаТиповЦен              = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаТиповСкидокНаценок    = Справочники.ТипыСкидокНаценок.ПолучитьФормуСписка();

	//Организации = Справочники.Организации.Выбрать();
	//Организация = Неопределено;
	//
	//Если Организации.Следующий() Тогда
	//	Организация = Организации.ПолучитьОбъект();
	//КонецЕсли;

	//Если Организация = Неопределено Тогда
	//	Параметры.ФормаНовойОрганизации            = "ФормаНовойОрганизации";
	//Иначе
	//	Параметры.ФормаНовойОрганизации            = Организация.ПолучитьФорму();
	//КонецЕсли;

	//Параметры.ФормаСпискаОрганизаций           = Справочники.Организации.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаПодразделений         = Справочники.Подразделения.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаСкладов               = Справочники.Склады.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаКасс                  = Справочники.Кассы.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаКассККМ               = Справочники.КассыККМ.ПолучитьФормуСписка();
	//Параметры.ФормаКонстант                    = Константы.ПолучитьФорму();

	//Параметры.ФормаСпискаПользователей         = Справочники.Пользователи.ПолучитьФормуСписка();
	//Параметры.ФормаПользователя                = глТекущийПользователь;
	
	//Костенюк Александр-Старт 10.06.2013
	Параметры.ПереносВариантовОтчетов 			= ПолучитьФорму("ПереносВариантовОтчетов"); 
	Параметры.ПерезаписьРегистрационныхКарт 	= ПолучитьФорму("ПерезаписьРегистрационныхКарт");
	Параметры.ОбработкиОбслуживанияТО 			= Справочники.ОбработкиОбслуживанияТО.ПолучитьФорму("ФормаСписка");
	//Костенюк Александр-Финиш 10.06.2013

	Возврат МакетОписаниеОбновлений;

КонецФункции

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";

	Сообщить(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

// Процедура записывает переданный план видов характеристик и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки информационной базы.
//
// Параметры:
//  ПланВидовХарактеристикОбъект - объект, который требуется записать.
//
Процедура ЗаписатьПланВидовХарактеристикОбъект(ПланВидовХарактеристикОбъект) Экспорт

	Если НЕ ПланВидовХарактеристикОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если ПланВидовХарактеристикОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если ПланВидовХарактеристикОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " плана видов характеристик """ + ПланВидовХарактеристикОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + ПланВидовХарактеристикОбъект.Наименование + """";

	Попытка
		ПланВидовХарактеристикОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + ПланВидовХарактеристикОбъект.Код + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(СтрокаВерсии, СтрокаШапки, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)

	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

КонецПроцедуры // ВывестиОписаниеИзменений()


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт

	// Обязательное начальное заполнение информационной базы.
	// Автоматический поиск и заполнение необходимых объектов
	ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	ОбработкаНЗ.ЗаполнитьВсеОбъекты();
	
	// Создадим одну организацию
	Организация = Справочники.Организации.НайтиПоНаименованию("Наша организация");

	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда

		Организация = Справочники.Организации.СоздатьЭлемент();
		Организация.Наименование		= "Наша организация";
		Организация.Записать();

	КонецЕсли;
	
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();

	Набор.Отбор.Пользователь.Использование = Истина;
	//Набор.Отбор.Пользователь.Значение      = глТекущийПользователь;
	Набор.Отбор.Пользователь.Значение      = глЗначениеПеременной("глТекущийПользователь"); //Костенюк Александр 10.06.2013

	Запись = Набор.Добавить();

	//Запись.Пользователь = глТекущийПользователь;
	Запись.Пользователь = глЗначениеПеременной("глТекущийПользователь"); //Костенюк Александр 10.06.2013
	Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьВДокументахСчетаУчета;
	Запись.Значение     = Истина;
	
	Набор.Записать();
	
	// Заполним значение по умолчанию для константы РежимЗавершенияРаботыПользователей.
	Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу);
	
	Возврат "";

КонецФункции

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);
		ЕСли МетаданныеТипа.ДлинаКода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда
				МассивЭлементов.Добавить(ЭлементСписка.Значение);
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);
			КонецЕсли;			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьНовыйКод();
			Объект.Записать();
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет удаление старых элементов справочника "ТорговоеОборудование".
//
Процедура ОчиститьСправочникТорговоеОборудование()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТорговоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
	|ГДЕ
	|	ТорговоеОборудование.ОбработкаОбслуживания = ЗНАЧЕНИЕ(Справочник.ОбработкиОбслуживанияТО.ПустаяСсылка)
	|	И ТорговоеОборудование.Модель = """"
	|");

	УдалитьОбъекты(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

КонецПроцедуры // ОчиститьСправочникТорговоеОборудование()

Процедура СостояниеОбновления(Текст)
#Если Клиент Тогда
	Состояние(Текст);
#КонецЕсли
КонецПроцедуры

//#КонецЕсли
