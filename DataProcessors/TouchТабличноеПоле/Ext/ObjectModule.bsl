
//	1С:Touch. Touch-ориентированные элементы управления и диалоговые формы, 
//	построенные с использованием только стандартных элементов управления платформы.
//	Copyright (C) 2008-2010 Переверзев Александр Владимирович.
//
//	Это программа является свободным программным обеспечением. Вы можете 
//	распространять и/или модифицировать её согласно условиям Стандартной 
//	Общественной Лицензии GNU, опубликованной Фондом Свободного Программного 
//	Обеспечения, версии 3 или, по Вашему желанию, любой более поздней версии. 
//
//	Эта программа распространяется в надежде, что она будет полезной, но БЕЗ 
//	ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО СОСТОЯНИЯ ПРИ 
//	ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите Стандартную 
//	Общественную Лицензию GNU для получения дополнительной информации. 
//
//	Вы должны были получить копию Стандартной Общественной Лицензии GNU вместе 
//	с программой. В случае её отсутствия, посмотрите <http://www.gnu.org/licenses/>.


#Если Клиент Тогда

Перем мДанные, мТипДанных, мПоддерживаемыеТипыДанных, мПоддерживаемыеТипыВложенныхДанных;
Перем мТекущийРодитель, мТекущаяСтрока, мТекущаяКолонка, мТекущийЭлементВложенныхДанных;

Перем мТекущаяСтраница;

Перем мДинамическиеДанные, мДинамическиеКолонки, мДинамическиеСтроки, мДинамическиеФиксированные, мДинамическиеРодители, мИндексПервогоРазделаДанных, мИндексВторогоРазделаДанных;
Перем мИерархияЭлеменит, мИерархияГруппа, мИерархияРодитель;

Перем мЭтотОбъект, мГруппыКолонок, мКолонки, мОформлениеСтроки, мСтраницы, мСтроки, мЯчейки;
Перем мЭлементыФормыПолосыПрокрутки, мЭлементыФормыГруппКолонок, мЭлементыФормыШапки, мЭлементыФормыПодвала, мЭлементыФормыСетки;

Перем мИзмененРазмерФормы, мИзмененыПараметрыПолосыПрокрутки, мИзмененыПараметрыКолонок, мИзмененыПараметрыДанных;
Перем мРежимПрограммногоОбновления, мРежимИзмененияСтраницы, мРежимОбновленияСтрок, мРежимИзмененияВыделения;

Перем мСлужебнаяКартинка, мСлужебнаяРамка;
Перем мТипСтроки, мТипЧисла, мТипДаты, мТипБулева, мТипСпискаЗначений, мТипТаблицыЗначений, мТипДереваЗначений, мТипОписанияТипов, 
	  мТипФормы, мТипПанель, мТипСтраницы, мТипКнопки, мТипНадписи, мТипРамкиГруппы,
	  мТипДействия, мТипКартинки, мТипРамки, мТипИспользованияПолосыПрокрутки, мТипНачальногоОтображенияСписка, мТипРежимаВыделенияСтрокиТабличногоПоля, мТипИзмененияРазмераКолонки, мТипПоложенияКолонки;
	  
//Костенюк Александр-Старт 30.05.2012
Перем мТипМассив;
//Костенюк Александр-Финиш 30.05.2012

Процедура СоздатьКолонки(Знач СписокКолонок = "") Экспорт
	
	// Удаление существующих колонок.
	Колонки.Очистить();
	
	Если (мДанные = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Колонки данных.
	Если (мТипДанных = мТипСпискаЗначений) Тогда
		КолонкиДанных = Неопределено;
	Иначе
		КолонкиДанных = мДанные.Колонки;
	КонецЕсли;
	
	// Подготовка списка колонок.
	Если ПустаяСтрока(СписокКолонок) Тогда
		Если (мТипДанных = мТипСпискаЗначений) Тогда
			КолонкиДанных = "Значение";
		Иначе
			КолонкиДанных = "Картинка";
			Для Каждого КолонкаДанных Из мДанные.Колонки Цикл
				КолонкиДанных = Символы.ПС + мДанные.Колонки;
			КонецЦикла;
		КонецЕсли;
	Иначе
		СписокКолонок = СтрЗаменить(СтрЗаменить(СписокКолонок, " ", ""), ",", Символы.ПС);
	КонецЕсли;
	
	// Коэфициент пересчета ширины колонок.
	КоэфициентПересчетаШирины = МинимальнаяШиринаКолонки / 4; // Предпологается соответсвие минимальной ширины колонки четырем символам (подобрано империческим путем);
	
	// Формирование колонок.
	КоличествоКолонок = СтрЧислоСтрок(СписокКолонок) - 1;
	Для ИндексКолонки = 0 По КоличествоКолонок Цикл
		
		// -- Создание колонки.
		ИмяКолонки = СтрПолучитьСтроку(СписокКолонок, ИндексКолонки + 1);
		Колонка = Колонки.Добавить(ИмяКолонки, ИмяКолонки);
		Колонка.Ширина = МинимальнаяШиринаКолонки;
		
		// -- Настройка колонки.
		Если (мТипДанных = мТипСпискаЗначений) Тогда
			// ---- Данные.
			ПромежуточноеИмяКолонки = НРег(ИмяКолонки);
			Если (ПромежуточноеИмяКолонки = "значение") Или (ПромежуточноеИмяКолонки = "представление") Тогда
				Колонка.Данные = ИмяКолонки;
				Колонка.Ширина = 100; // Стандартная ширина используемая 1С в даном случае.
			ИначеЕсли (ПромежуточноеИмяКолонки = "пометка") Тогда
				Колонка.ДанныеФлажка = ИмяКолонки;
			ИначеЕсли (ПромежуточноеИмяКолонки = "картинка") Тогда
				Колонка.ДанныеКартинки = ИмяКолонки;
			КонецЕсли;
			
			Колонка.ТекстШапки = ИмяКолонки;
		Иначе
			Если (Не КолонкиДанных = Неопределено) Тогда
				КолонкаДанных = КолонкиДанных.Найти(ИмяКолонки);
				
				Если (Не КолонкаДанных = Неопределено) Тогда
					// ---- Данные.
					ТипЗначения = КолонкаДанных.ТипЗначения;
					Если (ТипЗначения.Типы().Количество() = 1) Тогда
						Если ТипЗначения.СодержитТип(мТипБулева) Тогда
							Колонка.ДанныеФлажка = КолонкаДанных.Имя;
						ИначеЕсли ТипЗначения.СодержитТип(мТипКартинки) Тогда
							Колонка.ДанныеКартинки = КолонкаДанных.Имя;
						Иначе
							Колонка.Данные = КолонкаДанных.Имя;
						КонецЕсли;
					Иначе
						Колонка.Данные = КолонкаДанных.Имя;
					КонецЕсли;
						
					Колонка.ТекстШапки = КолонкаДанных.Заголовок;
					Колонка.Ширина = Макс(КоэфициентПересчетаШирины * КолонкаДанных.Ширина, Колонка.Ширина);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
			
		// -- Первая колонка.
		Если (ИндексКолонки = 0) И ПустаяСтрока(Колонка.Данные) И ПустаяСтрока(Колонка.ДанныеФлажка) И ПустаяСтрока(Колонка.ДанныеКартинки) И (НРег(ИмяКолонки) = "картинка") Тогда
			Колонка.ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			Колонка.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
			Колонка.ОтображатьИерархию = Истина;
			Колонка.ТекстШапки = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция связывает данные с элементом формы.
//
// Параметры:
//	Данные. Содержит связываемую переменную допустимого типа.
//
// Возвращаемое значение:
//   Значение текущей связанной переменной.
//
Функция Данные(Данные = Неопределено) Экспорт
	
	//// Нормализация.
	//Попытка
	//	Если Не мПоддерживаемыеТипыДанных.СодержитТип(ТипЗнч(Данные)) Тогда
	//		ВызватьИсключение "Ошибка при установке значения атрибута контекста (Данные): Неподдерживаемй тип данных";
	//	КонецЕсли;
	//Исключение
	//	ВызватьИсключение "Ошибка при установке значения атрибута контекста (Данные): Неправильный путь к данным";
	//КонецПопытки;
	
	// Изменение источника данных.
	Если (Не Данные = Неопределено) И (Не Данные = мДанные) Тогда
		// -- Удаление существующих колонок.
		Если (Не мОформлениеСтроки = Неопределено) Тогда
			мОформлениеСтроки.Высвободить();
		КонецЕсли;
		Колонки.Очистить();
		
		// -- Подключение к источнику данных.
		мДанные = Данные;
		мТипДанных = ТипЗнч(мДанные);
		мТекущийРодитель = Неопределено;
		мТекущаяСтрока = Неопределено;
		мТекущаяКолонка = Неопределено;
		мТекущийЭлементВложенныхДанных = Неопределено;
		
		// -- Текущая страница.
		мТекущаяСтраница = Неопределено;
		
		// -- Обновление формы.
		Обновить();
	КонецЕсли;
	
	Возврат мДанные;
	
КонецФункции

// Функция возвращает объект, описывающий допустимые типы значений для элемента управления.
//
// Возвращаемое значение:
//   ОписаниеТипов. Содержит допустимые типы значений для элемента управления.
//
Функция ТипЗначения() Экспорт
	
	Если (мДанные = Неопределено) Тогда
		// Поддерживаемые типы данных.
		Возврат мПоддерживаемыеТипыДанных;
	Иначе
		// Тип свзязаных данных.
		МассивТипов = Новый Массив; МассивТипов.Добавить(мТипДанных);
		Возврат Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецФункции


// Размещает элемент управления на форме.
//
// Параметры:
//	Форма - Форма. Форма на которую необходимо поместить элемент управления;
//	ПоместитьНа - Панель. Определяет, какой панели формы принадлежит создаваемый элемент. Если указана панель, то добавляемый элемент размещается на текущей странице панели;
//	Нажатие - Действие, Строка. Содержит действие или имя процедуры модуля котороая будет выполнятся при нажатии на элемент управления;
//	... - Число. Задают отступы размещаемого элемент управления от краев панели формы.
//
Процедура Поместить(Знач Форма, Знач ПоместитьНа = Неопределено, Знач Нажатие = Неопределено, Знач Страница = Неопределено) Экспорт
	
	// Нормализация.
	Если (ТипЗнч(Нажатие) = мТипСтроки) Тогда
		Попытка
			Нажатие = Новый Действие(Нажатие);
		Исключение
			Нажатие = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если (Страница = Неопределено) И (Не ПоместитьНа = Неопределено) Тогда
		Страница = ПоместитьНа.ТекущаяСтраница; 
	КонецЕсли;
	Если (Форма = Неопределено) Или (ПоместитьНа = Неопределено) Или (Нажатие = Неопределено) Или
		 (Не ТипЗнч(Форма) = мТипФормы) Или (Не ТипЗнч(ПоместитьНа) = мТипПанель) Или (Не ТипЗнч(Нажатие) = мТипДействия) Или (Не ТипЗнч(Страница) = мТипСтраницы) Тогда
		Форма = Неопределено;
		ПоместитьНа = Неопределено;
		Нажатие = Неопределено;
		Страница = Неопределено;
	КонецЕсли;
	
	
	// Изменение формы (удаление элемента с формы).
	Если (Не мЭтотОбъект = Неопределено) И (Не мЭтотОбъект.ЭлементФормы = ПоместитьНа) Тогда
		// -- Удаление элементов с формы.
		Видимость = мЭтотОбъект.ЭлементФормы.Видимость; мЭтотОбъект.ЭлементФормы.Видимость = Ложь;
		
		УдалитьЭлементФормы(мЭлементыФормыСетки);
		УдалитьЭлементФормы(мЭлементыФормыПодвала);
		УдалитьЭлементФормы(мЭлементыФормыШапки);
		УдалитьЭлементФормы(мЭлементыФормыГруппКолонок);
		УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки);
		
		мЭтотОбъект.ЭлементФормы.Видимость = Видимость;
		
		
		// -- Обнуление текущего состояния.
		мЭтотОбъект = Неопределено;
		мГруппыКолонок = Неопределено;
		мКолонки = Неопределено;
		мОформлениеСтроки = Неопределено;
		мСтраницы = Неопределено;
		мСтроки = Неопределено;
		мЯчейки = Неопределено;
		
		// ---- Обнуление динамических данных.
		мДинамическиеДанные = Неопределено;
		мДинамическиеКолонки = Неопределено;
		мДинамическиеСтроки = Неопределено;
		мДинамическиеФиксированные = Неопределено;
		мДинамическиеРодители = Неопределено;
		
		// ---- Текущая сраница.
		мТекущаяСтраница = Неопределено;
		
		// ---- Спецрежимы.
		мРежимПрограммногоОбновления = Ложь;
		мРежимИзмененияСтраницы = Ложь;
		мРежимОбновленияСтрок = Ложь;
		мРежимИзмененияВыделения = Ложь;
	КонецЕсли;
	Если (ПоместитьНа = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	
	// Проверка.
	ПроверитьПозицию(мТекущаяСтрока, мТекущаяКолонка, мТекущийЭлементВложенныхДанных, мТекущийРодитель);
	
	// Проверка изменения состояния.
	СравнитьСостояние(ПоместитьНа, Страница);
	
	// Нормализация объекта.
	Нормализация();
	
	// Сохранение текщего состояния.
	ЗапомнитьСостояние(Форма, ПоместитьНа, Нажатие, Страница);
	
	// Прячем контейнер.
	Если Не мРежимИзмененияВыделения Тогда
		Видимость = мЭтотОбъект.ЭлементФормы.Видимость; ТекущаяСтраница = мЭтотОбъект.ЭлементФормы.ТекущаяСтраница; мЭтотОбъект.ЭлементФормы.Видимость = Ложь; Если (Не мЭтотОбъект.ЭлементФормы.ТекущаяСтраница = Страница) Тогда ТекущееДействие = мЭтотОбъект.ЭлементФормы.ПолучитьДействие("ПриСменеСтраницы"); мЭтотОбъект.ЭлементФормы.УстановитьДействие("ПриСменеСтраницы", Неопределено); мЭтотОбъект.ЭлементФормы.ТекущаяСтраница = Страница; КонецЕсли;
	КонецЕсли;
	
	// Полоса прокрутки.
	ОтобразитьПолосуПрокрутки();
	
	// Группы колонок.
	ОтобразитьГруппыКолонок();
	
	// Шапка.
	ОтобразитьШапку();
	
	// Подвал.
	ОтобразитьПодвал();
	
	// Сетка.
	ОтобразитьСетку();
	
	// Строки.
	ОтобразитьСтроки();
	
	// Отображаем контейнер.
	Если Не мРежимИзмененияВыделения Тогда
		Если (Не мЭтотОбъект.ЭлементФормы.ТекущаяСтраница = ТекущаяСтраница) Тогда мЭтотОбъект.ЭлементФормы.ТекущаяСтраница = ТекущаяСтраница; мЭтотОбъект.ЭлементФормы.УстановитьДействие("ПриСменеСтраницы", ТекущееДействие); КонецЕсли; мЭтотОбъект.ЭлементФормы.Видимость = Видимость;
	КонецЕсли;

	
	// Обнуление спецрежимов.
	мРежимПрограммногоОбновления = Ложь;
	мРежимИзмененияСтраницы = Ложь;
	мРежимОбновленияСтрок = Ложь;
	мРежимИзмененияВыделения = Ложь;
	
	// Сохранение состояния выделения.
	мЭтотОбъект.Вставить("ТекущаяСтрока", мТекущаяСтрока);
	мЭтотОбъект.Вставить("ТекущаяКолонка", мТекущаяКолонка);
	мЭтотОбъект.Вставить("ТекущийЭлементВложенныхДанных", мТекущийЭлементВложенныхДанных);
	
КонецПроцедуры

// Удаляет элемент управления с формы.
//
Процедура Удалить() Экспорт
	
	// Удаление элемента с формы.
	Поместить(Неопределено);
	
КонецПроцедуры


Процедура Высвободить() Экспорт
	
	// Высвобождение ссылок.
	Если (Не мОформлениеСтроки = Неопределено) Тогда
		мОформлениеСтроки.Высвободить();
	КонецЕсли;
	Колонки.Высвободить();
	
	мДанные = Неопределено;
	мТекущийРодитель = Неопределено;
	мТекущаяСтрока = Неопределено;
	мТекущаяКолонка = Неопределено;
	мТекущийЭлементВложенныхДанных = Неопределено;
	
	мДинамическиеДанные = Неопределено;
	мДинамическиеКолонки = Неопределено;
	мДинамическиеСтроки = Неопределено;
	мДинамическиеФиксированные = Неопределено;
	мДинамическиеРодители = Неопределено;
	мИндексПервогоРазделаДанных = Неопределено;
	мИндексВторогоРазделаДанных = Неопределено;
	мИерархияЭлеменит = Неопределено;
	мИерархияГруппа = Неопределено;
	мИерархияРодитель = Неопределено;
	
	мЭтотОбъект = Неопределено;
	мГруппыКолонок = Неопределено;
	мКолонки = Неопределено;
	мОформлениеСтроки = Неопределено;
	мСтраницы = Неопределено;
	мСтроки = Неопределено;
	мЯчейки = Неопределено;
	мЭлементыФормыПолосыПрокрутки = Неопределено;
	мЭлементыФормыГруппКолонок = Неопределено;
	мЭлементыФормыШапки = Неопределено;
	мЭлементыФормыПодвала = Неопределено;
	мЭлементыФормыСетки = Неопределено;
	
КонецПроцедуры // Высвободить()


// Обновляет данные, и применяет параметры элемента управления вступающие в силу только после обновления.
//
Процедура Обновить() Экспорт
	
	// Обновление формы.
	Если (Не мЭтотОбъект = Неопределено) Тогда
		// -- Обновление.
		Поместить(мЭтотОбъект.Форма, мЭтотОбъект.ЭлементФормы, мЭтотОбъект.Нажатие, мЭтотОбъект.Страница);
	Иначе
		// -- Обнуление спецрежимов.
		мРежимПрограммногоОбновления = Ложь;
		мРежимИзмененияСтраницы = Ложь;
		мРежимОбновленияСтрок = Ложь;
		мРежимИзмененияВыделения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные и выполняет обновление всех видимых строк элемента управления.
//
Процедура ОбновитьСтроки() Экспорт
	
	// Обновление формы (только данные).
	мРежимОбновленияСтрок = Истина;
	Обновить();
	
КонецПроцедуры


Процедура Нажатие(Элемент) Экспорт
	
	Перем Имя, РазделДанных, Строка, Колонка, ЭлементВложенныхДанных;
	
	// Проверка доступности и текущей страницы (если она неопределена, то никакого нажатия быть не может).
	//Если (мЭтотОбъект = Неопределено) Или (Не мЭтотОбъект.Доступность) Или (Не ((Булево(мДинамическиеДанные[мИндексПервогоРазделаДанных].Количество())) Или Булево(мДинамическиеДанные[мИндексВторогоРазделаДанных].Количество()))) Тогда
	Если (мЭтотОбъект = Неопределено) Или (Не Доступность) Или (Не ((Булево(мДинамическиеДанные[мИндексПервогоРазделаДанных].Количество())) Или Булево(мДинамическиеДанные[мИндексВторогоРазделаДанных].Количество()))) Тогда
		Возврат;
	КонецЕсли;
	
	// Полоса прокрутки.
	Для Каждого ЭлементСтруктуры Из мЭлементыФормыПолосыПрокрутки Цикл
		Если (ЭлементСтруктуры.Значение = Элемент) Тогда
			
			// -- Расшифровка.
			Имя = ЭлементСтруктуры.Ключ;
			
			// -- Вычисление новой страницы.
			Если (Имя = "ПолностьюВверх") Тогда
				Страница = 0;
			ИначеЕсли (Имя = "Вверх") Тогда
				Страница = Макс(мТекущаяСтраница - 1, 0);
			ИначеЕсли (Имя = "Вниз") Тогда
				Страница = Мин(мТекущаяСтраница + 1, мСтраницы.Количество() - 1);
			ИначеЕсли (Имя = "ПолностьюВниз") Тогда
				Страница = мСтраницы.Количество() - 1;
			Иначе
				Возврат;
			КонецЕсли;
			Если (Страница = мТекущаяСтраница) Тогда
				Возврат;
			КонецЕсли;
			
			// -- Изменение текущей страницы.
			мТекущаяСтраница = Страница;
			мТекущаяСтрока = Неопределено;
			мТекущийЭлементВложенныхДанных = Неопределено;
			
			
			// ---- Событие.
			мРежимПрограммногоОбновления = Истина;
			Если Не ПустаяСтрока(ПриСменеТекущейСтраницы) Тогда
				Попытка Выполнить("мЭтотОбъект.Форма." + ПриСменеТекущейСтраницы + "(ЭтотОбъект);"); Исключение КонецПопытки;
			КонецЕсли;
			
			// ---- Обновление.
			Если мРежимПрограммногоОбновления Тогда
				мРежимИзмененияСтраницы = Истина;
				Обновить();
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Строки.
	Для Каждого ЭлементСтруктуры Из мЭлементыФормыСетки Цикл
		Если (ЭлементСтруктуры.Значение = Элемент) Тогда
			// -- Расшифровка (через ячейку таблицы).
			Ячейка = мЯчейки[ЭлементСтруктуры.Ключ];
			Если (Ячейка = Неопределено) Тогда
				Возврат;
			КонецЕсли;
			
			РазделДанных = Ячейка.ТекущийРазделДанных;
			Строка = Ячейка.ТекущаяСтрока;
			Колонка = Ячейка.ТекущаяКолонка;
			ЭлементВложенныхДанных = Ячейка.ТекущийЭлементВложенныхДанных;
			
			// Проверка.
			ПроверитьПозицию(Строка, Колонка, ЭлементВложенныхДанных);
	
			Если (РазделДанных = Неопределено) Или (Строка = Неопределено) Или (Колонка = Неопределено) Тогда
				Возврат;
			КонецЕсли;
			
			// -- Выбор / Гиперссылка.
			РежимВыбора = (мТекущаяСтрока = Строка) И (мТекущаяКолонка = Колонка) И (мТекущийЭлементВложенныхДанных = ЭлементВложенныхДанных);
			Если РежимВыбора Или Ячейка.ГиперСсылка Тогда
				
				Если (Не ПустаяСтрока(Выбор)) И ((Не мТипДанных = мТипДереваЗначений) Или (РазделДанных = мИндексВторогоРазделаДанных)) Тогда
					ВыбраннаяСтрока = Строка; ВыбраннаяКолонка = Колонка; 
					ВыбранныйЭлементВложенныхДанных = ЭлементВложенныхДанных; 
					СтандартнаяОбработка = Истина;
					
					// ---- Событие.
					мРежимПрограммногоОбновления = Истина;
					Попытка
						Выполнить("мЭтотОбъект.Форма." + Выбор + "(ЭтотОбъект, ВыбраннаяСтрока, ВыбраннаяКолонка, ВыбранныйЭлементВложенныхДанных, СтандартнаяОбработка);");
					Исключение
						Попытка Выполнить("мЭтотОбъект.Форма." + Выбор + "(ЭтотОбъект, ВыбраннаяСтрока, ВыбраннаяКолонка, СтандартнаяОбработка);"); Исключение КонецПопытки;
					КонецПопытки;
					
					Если Не мРежимПрограммногоОбновления Тогда
						Возврат;
					КонецЕсли;
					
					Если (Не СтандартнаяОбработка = Истина) Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				// ---- Изменение родителя.
				Попытка
					РежимИзменениРодителя = (мТипДанных = мТипДереваЗначений) И (Булево(Строка.Строки.Количество()) Или Булево(Строка.ЭтоГруппа));
				Исключение
					РежимИзменениРодителя = Ложь;
				КонецПопытки;	
			Иначе
				// ---- Изменение родителя.
				Попытка
					РежимИзменениРодителя = (мТипДанных = мТипДереваЗначений) И ((РазделДанных = мИндексПервогоРазделаДанных) Или (Колонка.ОтображатьИерархию И (Булево(Строка.Строки.Количество()) Или Булево(Строка.ЭтоГруппа))));
				Исключение
					РежимИзменениРодителя = Ложь;
				КонецПопытки;	
			КонецЕсли;
			
			// -- Изменение родителя.
			Если РежимИзменениРодителя Тогда
				Если (РазделДанных = мИндексПервогоРазделаДанных) Тогда
					мТекущийРодитель = Строка.Родитель;
				Иначе
					мТекущийРодитель = Строка;
				КонецЕсли;
				мТекущаяСтрока = Неопределено;
				мТекущийЭлементВложенныхДанных = Неопределено;
				
				мТекущаяСтраница = Неопределено;
				
				// ---- Событие.
				мРежимПрограммногоОбновления = Истина;
				Если Не ПустаяСтрока(ПриСменеТекущегоРодителя) Тогда
					Попытка Выполнить("мЭтотОбъект.Форма." + ПриСменеТекущегоРодителя + "(ЭтотОбъект);"); Исключение КонецПопытки;
				КонецЕсли;
				
				// ---- Обновление.
				Если мРежимПрограммногоОбновления Тогда
					мРежимОбновленияСтрок = Истина;
					Обновить();
				КонецЕсли;

				Возврат;
			КонецЕсли;
				
			// -- Первый раздел данных. Изменение колонки (строка должна остатся неизмененной).
			Если (РазделДанных = мИндексПервогоРазделаДанных) Тогда
				Строка = мТекущаяСтрока;
			КонецЕсли;
			
			// -- Изменение текущего выделения.
			ИзмениласьСтрока = (Не мТекущаяСтрока = Строка);
			ИзмениласьКолонка = (Не мТекущаяКолонка = Колонка);
			ИзмениласьЯчейка = ИзмениласьКолонка Или (Не мТекущийЭлементВложенныхДанных = ЭлементВложенныхДанных);
			Если ИзмениласьСтрока Или ИзмениласьКолонка Или ИзмениласьЯчейка Тогда
				мТекущаяСтрока = Строка;
				мТекущаяКолонка = Колонка;
				мТекущийЭлементВложенныхДанных = ЭлементВложенныхДанных;
				
				// ---- События.
				мРежимПрограммногоОбновления = Истина;
				Если (Не ПустаяСтрока(ПриАктивизацииСтроки)) И ИзмениласьСтрока Тогда
					Попытка Выполнить("мЭтотОбъект.Форма." + ПриАктивизацииСтроки + "(ЭтотОбъект);"); Исключение КонецПопытки;
				КонецЕсли;
				Если (Не ПустаяСтрока(ПриАктивизацииКолонки)) И ИзмениласьКолонка Тогда
					Попытка Выполнить("мЭтотОбъект.Форма." + ПриАктивизацииКолонки + "(ЭтотОбъект);"); Исключение КонецПопытки;
				КонецЕсли;
				Если (Не ПустаяСтрока(ПриАктивизацииЯчейки)) Тогда
					Попытка Выполнить("мЭтотОбъект.Форма." + ПриАктивизацииЯчейки + "(ЭтотОбъект);"); Исключение КонецПопытки;
				КонецЕсли;
				
					// ---- Обновление.
				Если мРежимПрограммногоОбновления Тогда
					мРежимИзмененияВыделения = Истина;
					Обновить();
				КонецЕсли;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьРодителя(ТекущийРодитель = Неопределено)

	// Проверка.
	Если (ТекущийРодитель = Неопределено) Или (ТекущийРодитель = Null) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если (Не мДанные = Неопределено) Тогда
		Если (мТипДанных = мТипДереваЗначений) Тогда
			
			// -- Дополнительная проверка для платформы 8.2.
			Попытка
				Проверка = (Не ТекущийРодитель.Строки = ТекущийРодитель.Родитель);
			Исключение
				Проверка = Ложь;
			КонецПопытки;
			
			// -- Нисходящий обход дерева.
			Если Проверка Тогда
				
				СписокПодчиненных = Новый Массив;
				СписокПодчиненных.Добавить(мДанные);

				Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
					
					Результат = (Не СтрокаВладелец.Строки.Индекс(ТекущийРодитель) = -1);
					Если Результат Тогда
						Прервать;
					КонецЕсли;
						
					Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
						Если Булево(СтрокаВладельца.Строки.Количество()) Тогда
							СписокПодчиненных.Добавить(СтрокаВладельца);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Обнуление тестируемого значения.
	Если Не Результат Тогда
		ТекущийРодитель = Неопределено;
	КонецЕсли;
	
	// Возврат результата.
	Возврат Результат;

КонецФункции // ПроверитьРодителя()

Функция ПроверитьСтроку(ТекущаяСтрока = Неопределено)

	// Проверка.
	Если (ТекущаяСтрока = Неопределено) Или (ТекущаяСтрока = Null) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если (Не мДанные = Неопределено) Тогда
		Если (мТипДанных = мТипДереваЗначений) Тогда
			
			// -- Нисходящий обход дерева.
			СписокПодчиненных = Новый Массив;
			СписокПодчиненных.Добавить(мДанные);

			Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
				
				Результат = (Не СтрокаВладелец.Строки.Индекс(ТекущаяСтрока) = -1);
				Если Результат Тогда
					Прервать;
				КонецЕсли;
				
				Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
					Если Булево(СтрокаВладельца.Строки.Количество()) Тогда
						СписокПодчиненных.Добавить(СтрокаВладельца);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			
			//Результат = (Не мДанные.Индекс(ТекущаяСтрока) = -1);
			
			//Костенюк Александр-Старт 30.05.2012
			Если Отбор.Количество() Тогда
				Результат = (НЕ мДанные.НайтиСтроки(Отбор).Количество() = 0);
			Иначе
				Результат = (НЕ мДанные.Индекс(ТекущаяСтрока) = -1);
			КонецЕсли;
			//Костенюк Александр-Финиш 30.05.2012
			
		КонецЕсли;
	КонецЕсли;
	
	// Обнуление тестируемого значения.
	Если Не Результат Тогда
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	// Возврат результата.
	Возврат Результат;
	
КонецФункции // ПроверитьСтроку()

Функция ПроверитьКолонку(ТекущаяКолонка = Неопределено)

	// Проверка.
	Если (ТекущаяКолонка = Неопределено) Или (ТекущаяКолонка = Null) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = (Не Колонки.Индекс(ТекущаяКолонка) = -1);
	
	// Обнуление тестируемого значения.
	Если Не Результат Тогда
		ТекущаяКолонка = Неопределено;
	КонецЕсли;
	
	// Возврат результата.
	Возврат Результат;

КонецФункции // ПроверитьКолонку()

Функция ПроверитьЭлементВложенныхДанных(ТекущийЭлементВложенныхДанных = Неопределено, ТекущаяСтрока = Неопределено, ТекущаяКолонка = Неопределено)

	// Проверка.
	Если (ТекущийЭлементВложенныхДанных = Неопределено) Или (ТекущийЭлементВложенныхДанных = Null) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если (ТекущаяСтрока = Неопределено) Или (ТекущаяСтрока = Null) Тогда
		ТекущаяСтрока = мТекущаяСтрока;
	КонецЕсли;
	Если (ТекущаяКолонка = Неопределено) Или (ТекущаяКолонка = Null) Тогда
		ТекущаяКолонка = мТекущаяКолонка;
	КонецЕсли;
	
	Попытка
		Результат = (Не ТекущаяСтрока = Неопределено) И (Не ТекущаяКолонка = Неопределено) И 
					ПроверитьСтроку(ТекущаяСтрока) И ПроверитьКолонку(ТекущаяКолонка) И
					ТекущаяКолонка.ОтображатьВложенныеДанные И мПоддерживаемыеТипыВложенныхДанных.СодержитТип(ТипЗнч(ТекущаяСтрока[ТекущаяКолонка.Данные])) И
					(ТекущийЭлементВложенныхДанных >= 0) И (ТекущийЭлементВложенныхДанных <= ТекущаяСтрока[ТекущаяКолонка.Данные].Количество() - 1);
	Исключение
		Результат = Ложь;			
	КонецПопытки;			
	
	// Обнуление тестируемого значения.
	Если Не Результат Тогда
		ТекущийЭлементВложенныхДанных = Неопределено;
	КонецЕсли;
	
	// Возврат результата.
	Возврат Результат;

КонецФункции // ПроверитьЭлементВложенныхДанных()

Функция ПроверитьСтраницу(ТекущаяСтраница = Неопределено)

	// Проверка.
	Если (ТекущаяСтраница = Неопределено) Или (ТекущаяСтраница = Null) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = (Не мСтраницы = Неопределено) И 
				(ТекущаяСтраница >= 0) И (ТекущаяСтраница <= мСтраницы.Количество() - 1);
	
	// Обнуление тестируемого значения.
	Если Не Результат Тогда
		ТекущаяСтраница = Неопределено;
	КонецЕсли;
	
	// Возврат результата.
	Возврат Результат;

КонецФункции // ПроверитьСтраницу()

Процедура ПроверитьПозицию(ТекущаяСтрока = Неопределено, ТекущаяКолонка = Неопределено, ТекущийЭлементВложенныхДанных = Неопределено, ТекущийРодитель = Неопределено)

	// Проверка.
	ПроверитьРодителя(ТекущийРодитель);
	Если Не ПроверитьСтроку(ТекущаяСтрока) Тогда
		ТекущийЭлементВложенныхДанных = Неопределено;
	КонецЕсли;
	Если Не ПроверитьКолонку(ТекущаяКолонка) Тогда
		ТекущийЭлементВложенныхДанных = Неопределено;
	КонецЕсли;
	ПроверитьЭлементВложенныхДанных(ТекущийЭлементВложенныхДанных, ТекущаяСтрока, ТекущаяКолонка);

КонецПроцедуры // ПроверитьПозицию()


Функция ТекущиеДанные() Экспорт

	Возврат ТекущаяСтрока();
	
КонецФункции // ТекущиеДанные()

Функция ТекущийРодитель(ТекущийРодитель = Null) Экспорт

	// Проверка входных параметров.
	// ...
	
	// Проверка.
	Если Не ПроверитьРодителя(мТекущийРодитель) Тогда
		мТекущаяСтрока = Неопределено; мТекущийЭлементВложенныхДанных = Неопределено;
	КонецЕсли;
	
	// Изменение текущего родителя.
	Если (Не ТекущийРодитель = Null) Тогда
		ТекущийРодительИзменен = (Не мТекущийРодитель = ТекущийРодитель); мТекущийРодитель = ТекущийРодитель;
	КонецЕсли;
	
	// Обновление.
	Если (ТекущийРодительИзменен = Истина) Тогда
		мТекущаяСтрока = Неопределено; мТекущийЭлементВложенныхДанных = Неопределено;
		
		мРежимПрограммногоОбновления = Истина;
		мРежимОбновленияСтрок = Истина;
		Обновить();
	КонецЕсли;
	
	// Возврат текущего родителя.
	Возврат мТекущийРодитель;
	
КонецФункции // ТекущийРодитель()

Функция ТекущаяСтрока(ТекущаяСтрока = Null) Экспорт

	// Проверка входных параметров.
	// ...
	
	// Проверка.
	Если Не ПроверитьСтроку(мТекущаяСтрока) Тогда
		мТекущийЭлементВложенныхДанных = Неопределено;
	КонецЕсли;
	
	// Изменение текущей строки.
	Если (Не ТекущаяСтрока = Null) Тогда
		ТекущаяСтрокаИзменена = (Не мТекущаяСтрока = ТекущаяСтрока); мТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	// Обновление.
	Если (ТекущаяСтрокаИзменена = Истина) Тогда
		Если (мТипДанных = мТипДереваЗначений) Тогда
			мТекущийРодитель = мТекущаяСтрока.Родитель;
		КонецЕсли;
		мТекущийЭлементВложенныхДанных = Неопределено;
		
		мРежимПрограммногоОбновления = Истина;
		мРежимОбновленияСтрок = Истина;
		Обновить();
	КонецЕсли;
	
	// Возврат текущей строки.
	Возврат мТекущаяСтрока;
	
КонецФункции // ТекущаяСтрока()

Функция ТекущаяКолонка(ТекущаяКолонка = Null) Экспорт

	// Проверка входных параметров.
	// ...
	
	// Проверка.
	Если Не ПроверитьКолонку(мТекущаяКолонка) Тогда
		мТекущийЭлементВложенныхДанных = Неопределено;
	КонецЕсли;
	
	// Изменение текущей колонки.
	Если (Не ТекущаяКолонка = Null) Тогда
		ТекущаяКолонкаИзменена = (Не мТекущаяКолонка = ТекущаяКолонка); мТекущаяКолонка = ТекущаяКолонка;
	КонецЕсли;
	
	// Обновление.
	Если (ТекущаяКолонкаИзменена = Истина) Тогда
		мТекущийЭлементВложенныхДанных = Неопределено;
		
		мРежимПрограммногоОбновления = Истина;
		мРежимИзмененияВыделения = Истина;
		Обновить();
	КонецЕсли;
	
	// Возврат текущей колонки.
	Возврат мТекущаяКолонка;
	
КонецФункции // ТекущаяКолонка()

Функция ТекущийЭлементВложенныхДанных(ТекущийЭлементВложенныхДанных = Null) Экспорт

	// Проверка входных параметров.
	// ...
	
	// Проверка.
	ПроверитьЭлементВложенныхДанных(мТекущийЭлементВложенныхДанных);
	
	// Изменение текущей строки.
	Если (Не ТекущийЭлементВложенныхДанных = Null) Тогда
		ТекущийЭлементВложенныхДанныхИзменен = (Не мТекущийЭлементВложенныхДанных = ТекущийЭлементВложенныхДанных); мТекущийЭлементВложенныхДанных = ТекущийЭлементВложенныхДанных;
	КонецЕсли;
	
	// Обновление.
	Если (ТекущийЭлементВложенныхДанныхИзменен = Истина) Тогда
		мРежимПрограммногоОбновления = Истина;
		мРежимОбновленияСтрок = Истина;
		Обновить();
	КонецЕсли;
	
	// Возврат текущего элемента вложенных данных.
	Возврат мТекущийЭлементВложенныхДанных;
	
КонецФункции // ТекущийЭлементВложенныхДанных()


Процедура ТекущаяПозиция(ТекущаяСтрока = Null, ТекущаяКолонка = Null, ТекущийЭлементВложенныхДанных = Null, ТекущийРодитель = Null) Экспорт

	// Проверка входных параметров.
	// ...
	
	// Проверка.
	ПроверитьПозицию(мТекущаяСтрока, мТекущаяКолонка, мТекущийЭлементВложенныхДанных, мТекущийРодитель);
	
	// Нормализация.
	Если (мТипДанных = мТипДереваЗначений) Тогда
		Если (ТекущаяСтрока = Null) Или (ТекущаяСтрока = Неопределено) Тогда
			Если (ТекущийРодитель = Null) Тогда
				ТекущийРодитель = мТекущийРодитель;
			КонецЕсли;
		Иначе
			ТекущийРодитель = ТекущаяСтрока.Родитель;
		КонецЕсли;
	Иначе
		ТекущийРодитель = Неопределено;
	КонецЕсли;
	Если (ТекущаяСтрока = Null) Тогда
		ТекущаяСтрока = мТекущаяСтрока;
	КонецЕсли;
	Если (ТекущаяКолонка = Null) Тогда
		ТекущаяКолонка = мТекущаяКолонка;
	КонецЕсли;
	Если (ТекущийЭлементВложенныхДанных = Null) Тогда
		ТекущийЭлементВложенныхДанных = мТекущийЭлементВложенныхДанных;
	КонецЕсли;
	
	// Изменение текущей позиции.
	ТекущаяПозицияИзменена = (Не мТекущийРодитель = ТекущийРодитель) Или 
							 (Не мТекущаяСтрока = ТекущаяСтрока) Или
							 (Не мТекущаяКолонка = ТекущаяКолонка) Или
							 (Не мТекущийЭлементВложенныхДанных = ТекущийЭлементВложенныхДанных);
	мТекущийРодитель = ТекущийРодитель;
	мТекущаяСтрока = ТекущаяСтрока;
	мТекущаяКолонка = ТекущаяКолонка;
	мТекущийЭлементВложенныхДанных = ТекущийЭлементВложенныхДанных;
	
	// Обновление.
	Если (ТекущаяПозицияИзменена = Истина) Тогда
		мРежимПрограммногоОбновления = Истина;
		мРежимОбновленияСтрок = Истина;
		Обновить();
	КонецЕсли;
	
КонецПроцедуры // ТекущаяПозиция()


Функция ТекущаяСтраница(ТекущаяСтраница = Null) Экспорт
	
	// Проверка входных параметров.
	Если (Не ТекущаяСтраница = Неопределено) Тогда
		// -- Параметр 1.
		Если (Не ТипЗнч(ТекущаяСтраница) = мТипЧисла) Тогда
			ВызватьИсключение "Ошибка при вызове метода контекста (ТекущаяСтраница): Несоответствие типов (параметр номер '1')";
		КонецЕсли;
		Если (мСтраницы = Неопределено) Или (ТекущаяСтраница < 0) Или (ТекущаяСтраница >= мСтраницы.Количество()) Тогда
			ВызватьИсключение "Ошибка при вызове метода контекста (ТекущаяСтраница): Значение индекса выходит за границы диапазона";
		КонецЕсли;
	КонецЕсли;
	
	// Проверка.
	Если Не ПроверитьСтраницу(мТекущаяСтраница) Тогда
		мТекущаяСтрока = Неопределено; мТекущийЭлементВложенныхДанных = Неопределено;
	КонецЕсли;
	
	// Изменение текущей страницы.
	Если (Не ТекущаяСтраница = Null) Тогда
		ТекущаяСтраницаИзменена = (Не мТекущаяСтраница = ТекущаяСтраница); мТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
	
	// Обновление.
	Если (ТекущаяСтраницаИзменена = Истина) Тогда
		мТекущаяСтрока = Неопределено; мТекущийЭлементВложенныхДанных = Неопределено;
		
		мРежимПрограммногоОбновления = Истина;
		мРежимИзмененияСтраницы = Истина;
		Обновить();
	КонецЕсли;
	
	// Возврат текущей страницы.
	Возврат мТекущаяСтраница;
	
КонецФункции // ТекущаяСтраница()


Функция КоличествоСтраниц() Экспорт
	
	Если (Не мСтраницы = Неопределено) Тогда
		Возврат мСтраницы.Количество();
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции


Процедура Нормализация()
	
	// Проверка спецрежимов и изменения состояния.
	Если (мРежимПрограммногоОбновления И (мРежимИзмененияСтраницы Или мРежимИзмененияВыделения)) Или мРежимОбновленияСтрок Тогда
		Возврат;
	КонецЕсли;
	
	// Этот объект.
	Если (Не ТипЗнч(ВертикальнаяПолосаПрокрутки) = мТипИспользованияПолосыПрокрутки) Тогда
		ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьАвтоматически;
	КонецЕсли;
	ВысотаКнопокПолосыПрокрутки = Макс(ВысотаКнопокПолосыПрокрутки, 20);
	ВысотаПодвала = Макс(ВысотаПодвала, 20);
	ВысотаШапки = Макс(ВысотаШапки, 20);
	МинимальнаяВысотаСтроки = Макс(МинимальнаяВысотаСтроки, 20);
	МинимальнаяШиринаКолонки = Макс(МинимальнаяШиринаКолонки, 20);
	Если (Не ТипЗнч(НачальноеОтображение) = мТипНачальногоОтображенияСписка) Тогда
		НачальноеОтображение = НачальноеОтображениеСписка.Авто;
	КонецЕсли;
	Если (Не ТипЗнч(Рамка) = мТипРамки) Тогда
		Рамка = мСлужебнаяРамка;
	КонецЕсли;
	Если (Не ТипЗнч(РежимВыделенияСтроки) = мТипРежимаВыделенияСтрокиТабличногоПоля) Тогда
		РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Ячейка;
	КонецЕсли;
	ШиринаКнопокПолосыПрокрутки = Макс(ШиринаКнопокПолосыПрокрутки, 20);
	
	
	// Колонки.
	ПредидущаяКолонка = Неопределено;
	
	КоличествоКолонок = Колонки.Количество();
	Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
		Колонка = Колонки.Получить(ИндексКолонки);
		
		Если (Колонка.ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.ПоШирине) Тогда
			Колонка.ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Авто;
		КонецЕсли;
		Если (Колонка.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложение.ПоШирине) Тогда
			Колонка.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложение.Лево;
		КонецЕсли;
		Если (Колонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложение.ПоШирине) Тогда
			Колонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложение.Лево;
		КонецЕсли;
		Если (Не ПустаяСтрока(Колонка.ДанныеФлажка)) Тогда
			Колонка.Данные = "";
		КонецЕсли;
		Если (Не ТипЗнч(Колонка.ИзменениеРазмера) = мТипИзмененияРазмераКолонки) Тогда
			Колонка.ИзменениеРазмера = ИзменениеРазмераКолонки.Изменять;
		КонецЕсли;
		Если (Не ТипЗнч(Колонка.КартинкаПодвала) = мТипКартинки) Тогда
			Колонка.КартинкаПодвала = мСлужебнаяКартинка;
		КонецЕсли;
		Если (Не ТипЗнч(Колонка.КартинкаШапки) = мТипКартинки) Тогда
			Колонка.КартинкаШапки = мСлужебнаяКартинка;
		КонецЕсли;
		Если (Не ТипЗнч(Колонка.Положение) = мТипПоложенияКолонки) Тогда
			Колонка.Положение = ПоложениеКолонки.НоваяКолонка;
		КонецЕсли;
		Если ПустаяСтрока(Колонка.Данные) Или (Не Колонка.Положение = ПоложениеКолонки.НоваяКолонка) Тогда
			Колонка.ОтображатьВложенныеДанные = Ложь;
		КонецЕсли;
		Если Колонка.ОтображатьВложенныеДанные Тогда
			Колонка.ОтображатьИерархию = Ложь;
		КонецЕсли;
		Если (Колонка.Ширина = 0) Тогда
			Колонка.Видимость = Ложь;
		Иначе
			Колонка.Ширина = Макс(Колонка.Ширина, МинимальнаяШиринаКолонки);
		КонецЕсли;
		Колонка.ШиринаЭлементаВложенныхДанных = Мин(Макс(Колонка.ШиринаЭлементаВложенныхДанных, МинимальнаяШиринаКолонки), Колонка.Ширина);
		
		// -- Корректировка предидущей колонки.
		Если (Не ПредидущаяКолонка = Неопределено) И (Не Колонка.Положение = ПоложениеКолонки.НоваяКолонка) Тогда
			ПредидущаяКолонка.ОтображатьВложенныеДанные = Ложь;
		КонецЕсли;
		
		ПредидущаяКолонка = Колонка;
	КонецЦикла;
	
	
	// Библиотека картинок.
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.Вверх) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.Вверх = БиблиотекаКартинок.TouchВверх; Исключение ЭтотОбъект.БиблиотекаКартинок.Вверх = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.Вниз) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.Вниз = БиблиотекаКартинок.TouchВниз; Исключение ЭтотОбъект.БиблиотекаКартинок.Вниз = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ПолностьюВверх) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ПолностьюВверх = БиблиотекаКартинок.TouchПолностьюВверх; Исключение ЭтотОбъект.БиблиотекаКартинок.ПолностьюВверх = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ПолностьюВниз) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ПолностьюВниз = БиблиотекаКартинок.TouchПолностьюВниз; Исключение ЭтотОбъект.БиблиотекаКартинок.ПолностьюВниз = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ПометкаИстина) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ПометкаИстина = БиблиотекаКартинок.TouchПометкаИстина; Исключение ЭтотОбъект.БиблиотекаКартинок.ПометкаИстина = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ИерархияЭлеменит) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ИерархияЭлеменит = БиблиотекаКартинок.TouchИерархияЭлеменит; Исключение ЭтотОбъект.БиблиотекаКартинок.ИерархияЭлеменит = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ИерархияГруппа) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ИерархияГруппа = БиблиотекаКартинок.TouchИерархияГруппа; Исключение ЭтотОбъект.БиблиотекаКартинок.ИерархияГруппа = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ИерархияРодитель) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ИерархияРодитель = БиблиотекаКартинок.TouchИерархияРодитель; Исключение ЭтотОбъект.БиблиотекаКартинок.ИерархияРодитель = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ПометкаИстинаПросмотр) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ПометкаИстинаПросмотр = БиблиотекаКартинок.TouchПометкаИстинаПросмотр; Исключение ЭтотОбъект.БиблиотекаКартинок.ПометкаИстинаПросмотр = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ПометкаЛожь) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ПометкаЛожь = БиблиотекаКартинок.TouchПометкаЛожь; Исключение ЭтотОбъект.БиблиотекаКартинок.ПометкаЛожь = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ПометкаЛожьПросмотр) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ПометкаЛожьПросмотр = БиблиотекаКартинок.TouchПометкаЛожьПросмотр; Исключение ЭтотОбъект.БиблиотекаКартинок.ПометкаЛожьПросмотр = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ПометкаНеопределено) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ПометкаНеопределено = БиблиотекаКартинок.TouchПометкаНеопределено; Исключение ЭтотОбъект.БиблиотекаКартинок.ПометкаНеопределено = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	Если (Не ТипЗнч(ЭтотОбъект.БиблиотекаКартинок.ПометкаНеопределеноПросмотр) = мТипКартинки) Тогда
		Попытка ЭтотОбъект.БиблиотекаКартинок.ПометкаНеопределеноПросмотр = БиблиотекаКартинок.TouchПометкаНеопределеноПросмотр; Исключение ЭтотОбъект.БиблиотекаКартинок.ПометкаНеопределеноПросмотр = мСлужебнаяКартинка; КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


Процедура СравнитьСостояние(ПоместитьНа, Страница)
	
	// Проверка спецрежимов и изменения состояния.
	Если мРежимПрограммногоОбновления И (мРежимИзмененияСтраницы Или мРежимИзмененияВыделения) Тогда
		мИзмененРазмерФормы = Ложь;
		мИзмененыПараметрыПолосыПрокрутки = Ложь;
		мИзмененыПараметрыКолонок = Ложь;
		мИзмененыПараметрыДанных = Ложь;
		Возврат;
	КонецЕсли;
	
	// Форма.
	Если мРежимОбновленияСтрок Тогда
		мИзмененРазмерФормы = (мЭтотОбъект = Неопределено);
	Иначе
		мИзмененРазмерФормы = (мЭтотОбъект = Неопределено) Или
		                      (Не ПоместитьНа = мЭтотОбъект.ЭлементФормы) Или
		                      (Не Страница = мЭтотОбъект.Страница) Или
							  (Не Выравнивание.ОтступСлева = мЭтотОбъект.ВыравниваниеОтступСлева) Или
							  (Не Выравнивание.ОтступСверху = мЭтотОбъект.ВыравниваниеОтступСверху) Или
							  (Не Выравнивание.ОтступСправа = мЭтотОбъект.ВыравниваниеОтступСправа) Или
							  (Не Выравнивание.ОтступСнизу = мЭтотОбъект.ВыравниваниеОтступСнизу) Или
							  (Не МинимальнаяВысотаСтроки = мЭтотОбъект.МинимальнаяВысотаСтроки) Или 
							  (Не МинимальнаяШиринаКолонки = мЭтотОбъект.МинимальнаяШиринаКолонки);
	КонецЕсли;

	// Полосу прокрутки.
	СравнитьСостояниеПолосуПрокрутки();
	
	// Колонки.
	СравнитьСостояниеКолонок();
	
	// Строки.
	СравнитьСостояниеСтрок();
						  
	// Кооректировка спец режимов.
	Если мИзмененРазмерФормы Или мИзмененыПараметрыПолосыПрокрутки Или мИзмененыПараметрыКолонок Или мИзмененыПараметрыДанных Тогда
		мРежимИзмененияСтраницы = Ложь;
		мРежимОбновленияСтрок = Ложь;
		мРежимИзмененияВыделения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СравнитьСостояниеПолосуПрокрутки()
	
	// Проверка спецрежимов и изменения состояния.
	Если мРежимОбновленияСтрок Тогда
		мИзмененыПараметрыПолосыПрокрутки = Ложь;
		Возврат;
	КонецЕсли;
	
	мИзмененыПараметрыПолосыПрокрутки = мИзмененРазмерФормы Или
										(Не ВертикальнаяПолосаПрокрутки = мЭтотОбъект.ВертикальнаяПолосаПрокрутки) Или
										(Не ВысотаКнопокПолосыПрокрутки = мЭтотОбъект.ВысотаКнопокПолосыПрокрутки) Или
										(Не ДополнительныеКнопкиПолосыПрокрутки = мЭтотОбъект.ДополнительныеКнопкиПолосыПрокрутки) Или
										(Не ШиринаКнопокПолосыПрокрутки = мЭтотОбъект.ШиринаКнопокПолосыПрокрутки);

КонецПроцедуры

Процедура СравнитьСостояниеКолонок()
	
	// Проверка спецрежимов и изменения состояния.
	Если мРежимОбновленияСтрок Тогда
		мИзмененыПараметрыКолонок = Ложь;
		Возврат;
	КонецЕсли;
	
	// Проверка изменениня колонок.
	
	// -- Проверка по поверхностным признакам.
	мИзмененыПараметрыКолонок = мИзмененРазмерФормы Или
								(Не ВертикальнаяПолосаПрокрутки = мЭтотОбъект.ВертикальнаяПолосаПрокрутки) Или
								(Не ШиринаКнопокПолосыПрокрутки = мЭтотОбъект.ШиринаКнопокПолосыПрокрутки) Или
								(Не Колонки.Количество() = мКолонки.Количество()) Или
								(Не ВысотаПодвала = мЭтотОбъект.ВысотаПодвала) Или
								(Не ВысотаШапки = мЭтотОбъект.ВысотаШапки) Или
								(Не Подвал = мЭтотОбъект.Подвал) Или
								(Не Шапка = мЭтотОбъект.Шапка);
	
	
	// -- Проверка колонок по реквизитам.
	Если Не мИзмененыПараметрыКолонок Тогда
	
		Для Каждого мКолонка Из мКолонки Цикл
			мКолонка = мКолонка.Значение; Колонка = Колонки.Получить(мКолонка.Индекс);
			
			мИзмененыПараметрыКолонок = (Не Колонка = мКолонка.Колонка) Или
										(Не Колонка.Видимость = мКолонка.Видимость) Или
										(Не Колонка.Доступность = мКолонка.Доступность) Или
										(Не Колонка.ИзменениеРазмера = мКолонка.ИзменениеРазмера) Или
										(Не Колонка.ОтображатьВложенныеДанные = мКолонка.ОтображатьВложенныеДанные) Или
										(Не Колонка.ОтображатьВПодвале = мКолонка.ОтображатьВПодвале) Или
										(Не Колонка.ОтображатьВШапке = мКолонка.ОтображатьВШапке) Или
										(Не Колонка.Положение = мКолонка.Положение) Или
										(Не Колонка.Ширина = мКолонка.Ширина) Или
										(Не Колонка.ШиринаЭлементаВложенныхДанных = мКолонка.ШиринаЭлементаВложенныхДанных);
			
			Если мИзмененыПараметрыКолонок Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СравнитьСостояниеСтрок()
	
	// Проверка изменениня данных (I).
	
	// -- Проверка по поверхностным признакам.
	мИзмененыПараметрыДанных = (мЭтотОбъект = Неопределено) Или 
							   (Не мДанные = мЭтотОбъект.Данные) Или 
							   (Не мТекущийРодитель = мЭтотОбъект.ТекущийРодитель) Или
							   (Не мТекущаяСтрока = мЭтотОбъект.ТекущаяСтрока);
							   
							   
	// Получение динамических данных.
	
	// -- Данные.
	мДинамическиеДанные = Новый Массив;
	мДинамическиеКолонки = Новый СписокЗначений;
	мДинамическиеСтроки = Новый Соответствие;
	мДинамическиеФиксированные = 0;
	мДинамическиеРодители = 0;
	
	мМассивФиксированныхДанных = Новый Массив;
	мДинамическиеДанные.Добавить(мМассивФиксированныхДанных);
	
	Если (мТипДанных = мТипСпискаЗначений) Или (мТипДанных = мТипТаблицыЗначений) Тогда
		
		ИндексСтроки = 0;
		Для Каждого ДанныеСтроки Из мДанные Цикл
			Если (ИндексСтроки = ФиксацияСверху) Тогда
				Прервать;
			КонецЕсли;
			мМассивФиксированныхДанных.Добавить(ДанныеСтроки);
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		//мДинамическиеДанные.Добавить(мДанные);
		мДинамическиеФиксированные = ИндексСтроки;
		
		//Костенюк Александр-Старт 29.05.2012
		Если Отбор.Количество() Тогда
			Строки = мДанные.НайтиСтроки(Отбор);
			мДинамическиеДанные.Добавить(Строки);
		Иначе
			мДинамическиеДанные.Добавить(мДанные);
		КонецЕсли;
		//Костенюк Александр-Финиш 29.05.2012
		
	ИначеЕсли (мТипДанных = мТипДереваЗначений) Тогда
		
		Если (мТекущийРодитель = Неопределено) Тогда
			мДинамическиеДанные.Добавить(мДанные.Строки);
		Иначе
			Родитель = мТекущийРодитель;
			Пока (Не Родитель = Неопределено) Цикл
				мМассивФиксированныхДанных.Вставить(0, Родитель);
				Родитель = Родитель.Родитель;
			КонецЦикла;
			мДинамическиеДанные.Добавить(мТекущийРодитель.Строки);
		КонецЕсли;
		мДинамическиеРодители = мМассивФиксированныхДанных.Количество();
		
	Иначе
		
		мДинамическиеДанные.Добавить(мМассивФиксированныхДанных);
		Возврат;
		
	КонецЕсли;
	
	// -- Динамические данные (вложенные данные).
	
	// ---- Динамические колонки.
	КоличествоКолонок = Колонки.Количество();
	Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
		Колонка = Колонки.Получить(ИндексКолонки);
		
		Если Колонка.Видимость И Колонка.ОтображатьВложенныеДанные Тогда
			мДинамическиеКолонки.Добавить(Колонка);
		КонецЕсли;
		
	КонецЦикла;			
	
	// ---- Динамические строки.
	Если Булево(мДинамическиеКолонки.Количество()) Тогда
		
		// ------ Разделы данных.
		
		ИндексРазделаДанных = мИндексПервогоРазделаДанных;
		Для Каждого РазделДанных Из мДинамическиеДанные Цикл
			
			СтрокиРазделаДанных = Новый Соответствие;
			
			
			// ------ Строки раздела.
			
			КоличествоСтрок = РазделДанных.Количество();
			Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл
				Если (ИндексРазделаДанных = мИндексВторогоРазделаДанных) И (ИндексСтроки < мДинамическиеФиксированные) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеСтроки = РазделДанных.Получить(ИндексСтроки);
				
				КолонкиСтроки = Новый Соответствие;
				
				
				// ------ Колонки строки.
			
				Для Каждого Колонка Из мДинамическиеКолонки Цикл
					Колонка = Колонка.Значение;
					Попытка
						Значение = ДанныеСтроки[Колонка.Данные];
						Если мПоддерживаемыеТипыВложенныхДанных.СодержитТип(ТипЗнч(Значение)) Тогда
							КолонкиСтроки.Вставить(Колонка.Индекс(), Значение.Количество());
						КонецЕсли;
					Исключение КонецПопытки;
				КонецЦикла;
				
				
				Если Булево(КолонкиСтроки.Количество()) Тогда
					СтрокиРазделаДанных.Вставить(ИндексСтроки, КолонкиСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
			
			Если Булево(СтрокиРазделаДанных.Количество()) Тогда
				мДинамическиеСтроки.Вставить(ИндексРазделаДанных, СтрокиРазделаДанных);
			КонецЕсли;
				
			ИндексРазделаДанных = ИндексРазделаДанных + 1;
		КонецЦикла;

	КонецЕсли;
	
	
	// Проверка изменениня данных (II).
	
	// -- Проверка по количетсву и динамическим данным.
	мИзмененыПараметрыДанных = мИзмененыПараметрыДанных Или
							   (Не мДинамическиеДанные[мИндексПервогоРазделаДанных].Количество() = мЭтотОбъект.ДинамическиеДанныеПервыйРазделКоличество) Или
							   (Не мДинамическиеДанные[мИндексВторогоРазделаДанных].Количество() = мЭтотОбъект.ДинамическиеДанныеВторойРазделКоличество) Или
							   (Не ЗначениеВСтрокуВнутр(мДинамическиеСтроки) = мЭтотОбъект.ДинамическиеСтроки);
					  
КонецПроцедуры


Процедура ЗапомнитьСостояние(Форма, ПоместитьНа, Нажатие, Страница)
	
	// Объект.
	ЗапомнитьСостояниеОбъекта();
	
	// Форма.
	Если мИзмененРазмерФормы Тогда
		мЭтотОбъект.Вставить("Форма", Форма);
		мЭтотОбъект.Вставить("ЭлементФормы", ПоместитьНа);
		мЭтотОбъект.Вставить("Страница", Страница);
		мЭтотОбъект.Вставить("ИмяЭлементаФормы", СтрЗаменить(ПоместитьНа.Имя + Страница.Имя, "_", ""));
		мЭтотОбъект.Вставить("ШиринаЭлементаФормы", ПоместитьНа.Ширина);
		мЭтотОбъект.Вставить("ВысотаЭлементаФормы", ПоместитьНа.Высота);
		мЭтотОбъект.Вставить("Нажатие", Нажатие);
		// -- Клиентская область.
		мЭтотОбъект.Вставить("ЛевоКлиентскойОбласти", Выравнивание.ОтступСлева);
		мЭтотОбъект.Вставить("ВерхКлиентскойОбласти", Выравнивание.ОтступСверху);
		мЭтотОбъект.Вставить("ШиринаКлиентскойОбласти", Макс(ПоместитьНа.Ширина - Выравнивание.ОтступСлева - Выравнивание.ОтступСправа, 0));
		мЭтотОбъект.Вставить("ВысотаКлиентскойОбласти", Макс(ПоместитьНа.Высота - Выравнивание.ОтступСверху - Выравнивание.ОтступСнизу, 0));
	КонецЕсли;
	
	// Полоса прокрутки.
	ЗапомнитьСостояниеПолосыПрокрутки();
	
	// Колонки.
	ЗапомнитьСостояниеКолонок();
	
	// Строки.
	ЗапомнитьСостояниеСтрок();
	
КонецПроцедуры

Процедура ЗапомнитьСостояниеОбъекта()
	
	// Проверка спецрежимов и изменения состояния.
	Если мРежимИзмененияВыделения Или мРежимИзмененияСтраницы Или мРежимОбновленияСтрок Тогда
		Возврат;
	КонецЕсли;
	
	// Этот объект.
	Если (мЭтотОбъект = Неопределено) Тогда
		мЭтотОбъект = Новый Структура;
	КонецЕсли;
	
	мЭтотОбъект.Вставить("ВертикальнаяПолосаПрокрутки", ВертикальнаяПолосаПрокрутки);
	мЭтотОбъект.Вставить("ВысотаКнопокПолосыПрокрутки", ВысотаКнопокПолосыПрокрутки);
	мЭтотОбъект.Вставить("ВысотаПодвала", ВысотаПодвала);
	мЭтотОбъект.Вставить("ВысотаШапки", ВысотаШапки);
	мЭтотОбъект.Вставить("ДополнительныеКнопкиПолосыПрокрутки", ДополнительныеКнопкиПолосыПрокрутки);
	мЭтотОбъект.Вставить("Доступность", Доступность);
	мЭтотОбъект.Вставить("МинимальнаяВысотаСтроки", МинимальнаяВысотаСтроки);
	мЭтотОбъект.Вставить("МинимальнаяШиринаКолонки", МинимальнаяШиринаКолонки);
	мЭтотОбъект.Вставить("Подвал", Подвал);
	мЭтотОбъект.Вставить("Рамка", Рамка);
	мЭтотОбъект.Вставить("РежимВыделенияСтроки", РежимВыделенияСтроки);
	мЭтотОбъект.Вставить("ЦветТекстаВыделения", ЦветТекстаВыделения);
	мЭтотОбъект.Вставить("ЦветТекстаПоля", ЦветТекстаПоля);
	мЭтотОбъект.Вставить("ЦветТекстаШапки", ЦветТекстаШапки);
	мЭтотОбъект.Вставить("ЦветФонаВыделения", ЦветФонаВыделения);
	мЭтотОбъект.Вставить("ЦветФонаПоля", ЦветФонаПоля);
	мЭтотОбъект.Вставить("ЦветФонаЧередованияСтрок", ЦветФонаЧередованияСтрок);
	мЭтотОбъект.Вставить("ЦветФонаШапки", ЦветФонаШапки);
	мЭтотОбъект.Вставить("ЧередованиеЦветовСтрок", ЧередованиеЦветовСтрок);
	мЭтотОбъект.Вставить("Шапка", Шапка);
	мЭтотОбъект.Вставить("ШиринаКнопокПолосыПрокрутки", ШиринаКнопокПолосыПрокрутки);

	// -- Выравнивание.
	мЭтотОбъект.Вставить("ВыравниваниеОтступСлева", Выравнивание.ОтступСлева);
	мЭтотОбъект.Вставить("ВыравниваниеОтступСверху", Выравнивание.ОтступСверху);
	мЭтотОбъект.Вставить("ВыравниваниеОтступСправа", Выравнивание.ОтступСправа);
	мЭтотОбъект.Вставить("ВыравниваниеОтступСнизу", Выравнивание.ОтступСнизу);
	
	// -- Дополнительно.
	мЭтотОбъект.Вставить("ЦветРамки", ЦветРамки);
	мЭтотОбъект.Вставить("ЦветФонаПоУмолчанию", ЦветФонаПоля);
	мЭтотОбъект.Вставить("ЦветТекстаПоУмолчанию", ЦветТекстаПоля);
	мЭтотОбъект.Вставить("Шрифт", Шрифт);
	
КонецПроцедуры

Процедура ЗапомнитьСостояниеПолосыПрокрутки()
	
	// Проверка спецрежимов и изменения состояния.
	Если Не мИзмененыПараметрыПолосыПрокрутки Тогда
		Возврат;
	КонецЕсли;
		
	// Полоса прокрутки.
	Если (ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать) Тогда
		мЭтотОбъект.Вставить("ВидимостьПолосуПрокруткиРеальная", Ложь);
		Возврат;
	КонецЕсли;
	
	// Размеры.
	Ширина = мЭтотОбъект.ШиринаКлиентскойОбласти; Высота = мЭтотОбъект.ВысотаКлиентскойОбласти;
	
	// Проверка достаточности пространства.
	// -- Ширина.
	Если (Ширина < ШиринаКнопокПолосыПрокрутки) Тогда
		мЭтотОбъект.Вставить("ВидимостьПолосуПрокруткиРеальная", Ложь);
		Возврат;
	КонецЕсли;
	
	// -- Высота (дополнительные кнопки).
	Если ДополнительныеКнопкиПолосыПрокрутки И (Высота < ВысотаКнопокПолосыПрокрутки * 4 - 3) Тогда
		мЭтотОбъект.Вставить("ВидимостьДополнительныхКнопокПолосыПрокруткиРеальная", Ложь);
	Иначе
		мЭтотОбъект.Вставить("ВидимостьДополнительныхКнопокПолосыПрокруткиРеальная", ДополнительныеКнопкиПолосыПрокрутки);
	КонецЕсли;
	
	// -- Высота (стандартные кнопки).
	Если (Высота < ВысотаКнопокПолосыПрокрутки * 2 - 1) Тогда
		мЭтотОбъект.Вставить("ВидимостьПолосуПрокруткиРеальная", Ложь);
		Возврат;
	КонецЕсли;
	
	мЭтотОбъект.Вставить("ВидимостьПолосуПрокруткиРеальная", Истина);
		
КонецПроцедуры

Процедура ЗапомнитьСостояниеКолонок()
	
	Перем ГруппаКолонок, ТекущаяСтрока;

	// Проверка спецрежимов и изменения состояния.
	Если Не мИзмененыПараметрыКолонок Тогда
		
		Если мРежимИзмененияВыделения Или мРежимИзмененияСтраницы Или мРежимОбновленияСтрок Тогда
			Возврат;
		КонецЕсли;
		
		// Колонки.
		Для Каждого мКолонка Из мКолонки Цикл
			мКолонка = мКолонка.Значение;
			
			Если (Не мКолонка.Видимость) Или (Не мКолонка.ВидимостьРеальная) Тогда
				Продолжить;
			КонецЕсли;
			
			Колонка = мКолонка.Колонка;
			
			// -- Запоминание состояния.
			мКолонка.Вставить("ВыделятьОтрицательные", Колонка.ВыделятьОтрицательные);
			мКолонка.Вставить("ГоризонтальноеПоложениеВКолонке", Колонка.ГоризонтальноеПоложениеВКолонке);
			мКолонка.Вставить("Данные", Колонка.Данные);
			мКолонка.Вставить("ДанныеКартинки", Колонка.ДанныеКартинки);
			мКолонка.Вставить("ДанныеФлажка", Колонка.ДанныеФлажка);
			мКолонка.Вставить("ОтображатьИерархию", Колонка.ОтображатьИерархию);
			мКолонка.Вставить("ТолькоПросмотр", Колонка.ТолькоПросмотр);
			мКолонка.Вставить("Формат", Колонка.Формат);
			мКолонка.Вставить("ЦветТекстаПоля", Колонка.ЦветТекстаПоля);
			мКолонка.Вставить("ЦветФонаПоля", Колонка.ЦветФонаПоля);
			мКолонка.Вставить("ШрифтТекста", Колонка.ШрифтТекста);
			// ---- Дополнительно.
			мКолонка.Вставить("Имя", Колонка.Имя());
			
		КонецЦикла;
		
	Иначе

		// Колонки.
		мКолонки = Новый СписокЗначений;
		мГруппыКолонок = Новый СписокЗначений;
		
		// -- Видимых строк шапки и подвала.
		ВидимыхСтрокШапки = 1; ВидимыхСтрокПодвала = 1; // Первая строка всегда видима.
		
		ПерваяГруппа = Истина;
		
		КоличествоКолонок = Колонки.Количество();
		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
			Колонка = Колонки.Получить(ИндексКолонки);
			
			мКолонка = Новый Структура;
			мКолонки.Добавить(мКолонка);
			
			// -- Запоминание состояния.
			мКолонка.Вставить("Видимость", Колонка.Видимость);
			мКолонка.Вставить("ВыделятьОтрицательные", Колонка.ВыделятьОтрицательные);
			мКолонка.Вставить("ГоризонтальноеПоложениеВКолонке", Колонка.ГоризонтальноеПоложениеВКолонке);
			мКолонка.Вставить("Данные", Колонка.Данные);
			мКолонка.Вставить("ДанныеКартинки", Колонка.ДанныеКартинки);
			мКолонка.Вставить("ДанныеФлажка", Колонка.ДанныеФлажка);
			мКолонка.Вставить("Доступность", Колонка.Доступность);
			мКолонка.Вставить("ИзменениеРазмера", Колонка.ИзменениеРазмера);
			мКолонка.Вставить("ОтображатьВложенныеДанные", Колонка.ОтображатьВложенныеДанные);
			мКолонка.Вставить("ОтображатьВПодвале", Колонка.ОтображатьВПодвале);
			мКолонка.Вставить("ОтображатьВШапке", Колонка.ОтображатьВШапке);
			мКолонка.Вставить("ОтображатьИерархию", Колонка.ОтображатьИерархию);
			мКолонка.Вставить("Положение", Колонка.Положение);
			мКолонка.Вставить("ТолькоПросмотр", Колонка.ТолькоПросмотр);
			мКолонка.Вставить("Формат", Колонка.Формат);
			мКолонка.Вставить("ЦветТекстаПоля", Колонка.ЦветТекстаПоля);
			мКолонка.Вставить("ЦветФонаПоля", Колонка.ЦветФонаПоля);
			мКолонка.Вставить("Ширина", Колонка.Ширина);
			мКолонка.Вставить("ШиринаЭлементаВложенныхДанных", Колонка.ШиринаЭлементаВложенныхДанных);
			мКолонка.Вставить("ШрифтТекста", Колонка.ШрифтТекста);
			// ---- Дополнительно.
			мКолонка.Вставить("Колонка", Колонка);
			мКолонка.Вставить("Имя", Колонка.Имя());
			мКолонка.Вставить("Индекс", ИндексКолонки);
			
			// -- Отсекаем скрытые колонки.
			Если Не Колонка.Видимость Тогда
				мКолонка.Вставить("ГруппаКолонок", Неопределено);
				Продолжить;
			КонецЕсли;
			
			
			// -- Группа колонок.
			Если ПерваяГруппа Или (мКолонка.Положение = ПоложениеКолонки.НоваяКолонка) Тогда
				Если (Не ГруппаКолонок = Неопределено) Тогда
					ГруппаКолонок.Вставить("ВидимыхСтрокШапки", ГруппаКолонок.ВидимыхСтрокШапки + Число(ГруппаКолонок.ОтображатьВШапке[ТекущаяСтрока]));
					ГруппаКолонок.Вставить("ВидимыхСтрокПодвала", ГруппаКолонок.ВидимыхСтрокПодвала + Число(ГруппаКолонок.ОтображатьВПодвале[ТекущаяСтрока]));
					ВидимыхСтрокШапки = Макс(ВидимыхСтрокШапки, ГруппаКолонок.ВидимыхСтрокШапки); ВидимыхСтрокПодвала = Макс(ВидимыхСтрокПодвала, ГруппаКолонок.ВидимыхСтрокПодвала);
				КонецЕсли;
				
				ГруппаКолонок = Новый Структура;
				ГруппаКолонок.Вставить("Индекс", мГруппыКолонок.Количество());
				ГруппаКолонок.Вставить("КоличествоКолнокВСтроке", Новый Соответствие);
				ГруппаКолонок.Вставить("ОтображатьВШапке", Новый Соответствие);
				ГруппаКолонок.Вставить("ОтображатьВПодвале", Новый Соответствие);
				ГруппаКолонок.Вставить("ШиринаСтроки", Новый Соответствие);
				ГруппаКолонок.Вставить("ШиринаГруппы", 0);
				ГруппаКолонок.Вставить("ВидимыхСтрокШапки", 0);
				ГруппаКолонок.Вставить("ВидимыхСтрокПодвала", 0);
				мГруппыКолонок.Добавить(ГруппаКолонок);
				
				ПерваяГруппа = Ложь;
				ТекущаяСтрока = 0; ТекущаяКолонка = 0;
				
				ГруппаКолонок.ОтображатьВШапке.Вставить(ТекущаяСтрока, Истина);
				ГруппаКолонок.ОтображатьВПодвале.Вставить(ТекущаяСтрока, Истина);
				ГруппаКолонок.ШиринаСтроки.Вставить(ТекущаяСтрока, 0);
			ИначеЕсли (мКолонка.Положение = ПоложениеКолонки.НаСледующейСтроке) Тогда
				ГруппаКолонок.Вставить("ВидимыхСтрокШапки", ГруппаКолонок.ВидимыхСтрокШапки + Число(ГруппаКолонок.ОтображатьВШапке[ТекущаяСтрока]));
				ГруппаКолонок.Вставить("ВидимыхСтрокПодвала", ГруппаКолонок.ВидимыхСтрокПодвала + Число(ГруппаКолонок.ОтображатьВПодвале[ТекущаяСтрока]));
				ВидимыхСтрокШапки = Макс(ВидимыхСтрокШапки, ГруппаКолонок.ВидимыхСтрокШапки); ВидимыхСтрокПодвала = Макс(ВидимыхСтрокПодвала, ГруппаКолонок.ВидимыхСтрокПодвала);
				
				ТекущаяСтрока = ТекущаяСтрока + 1; ТекущаяКолонка = 0;
				
				ГруппаКолонок.ОтображатьВШапке.Вставить(ТекущаяСтрока, Ложь);
				ГруппаКолонок.ОтображатьВПодвале.Вставить(ТекущаяСтрока, Ложь);
				ГруппаКолонок.ШиринаСтроки.Вставить(ТекущаяСтрока, 0);
			Иначе
				ТекущаяКолонка = ТекущаяКолонка + 1;
			КонецЕсли;
			ГруппаКолонок.Вставить("КоличествоСтрок", ТекущаяСтрока + 1);
			ГруппаКолонок.КоличествоКолнокВСтроке.Вставить(ТекущаяСтрока, ТекущаяКолонка + 1);
			ГруппаКолонок.ОтображатьВШапке.Вставить(ТекущаяСтрока, ГруппаКолонок.ОтображатьВШапке[ТекущаяСтрока] Или мКолонка.ОтображатьВШапке);
			ГруппаКолонок.ОтображатьВПодвале.Вставить(ТекущаяСтрока, ГруппаКолонок.ОтображатьВПодвале[ТекущаяСтрока] Или мКолонка.ОтображатьВПодвале);
			ГруппаКолонок.ШиринаСтроки.Вставить(ТекущаяСтрока, ГруппаКолонок.ШиринаСтроки[ТекущаяСтрока] + мКолонка.Ширина);
			ГруппаКолонок.Вставить("ШиринаГруппы", Макс(ГруппаКолонок.ШиринаСтроки[ТекущаяСтрока], ГруппаКолонок.ШиринаГруппы));
			
			мКолонка.Вставить("ГруппаКолонок", ГруппаКолонок);
			мКолонка.Вставить("СтрокаГруппыКолонок", ТекущаяСтрока);
			мКолонка.Вставить("КолонкаГруппыКолонок", ТекущаяКолонка);
		КонецЦикла;
		// -- Видимых строк шапки и подвала.
		мЭтотОбъект.Вставить("ВидимыхСтрокШапки", ВидимыхСтрокШапки);
		мЭтотОбъект.Вставить("ВидимыхСтрокПодвала", ВидимыхСтрокПодвала);
		

		// Корректировка ширины.
		ПредшествующаяГруппа = Неопределено; ПоследняяГруппа = Неопределено;
		Если мЭтотОбъект.ВидимостьПолосуПрокруткиРеальная Тогда
			ИсходнаяШирина = мЭтотОбъект.ШиринаКлиентскойОбласти - (ШиринаКнопокПолосыПрокрутки - 1); 
		Иначе
			ИсходнаяШирина = мЭтотОбъект.ШиринаКлиентскойОбласти;
		КонецЕсли;
		ОсталосьШирины = ИсходнаяШирина; ПоправкаШирины = 0;
		
		// -- Предварительный расчет.
		Для Каждого ГруппаКолонок Из мГруппыКолонок Цикл
			ГруппаКолонок = ГруппаКолонок.Значение;
			
			// ---- Отсечение непомещающихся групп колонок.
			Если (Не ПоследняяГруппа = Неопределено) Тогда
				ГруппаКолонок.Вставить("ВидимостьРеальная", Ложь);
				Продолжить;
			КонецЕсли;
			
			// ---- Определение видимости.
			Если (ОсталосьШирины >= ГруппаКолонок.ШиринаГруппы) Тогда
				ГруппаКолонок.Вставить("ВидимостьРеальная", Истина);
				ПредшествующаяГруппа = ГруппаКолонок;
				
				ОсталосьШирины = ОсталосьШирины - (ГруппаКолонок.ШиринаГруппы - ПоправкаШирины); ПоправкаШирины = 1;
			Иначе
				ГруппаКолонок.Вставить("ВидимостьРеальная", Ложь);
				ПоследняяГруппа = ПредшествующаяГруппа;	
			КонецЕсли;
			
		КонецЦикла;
		Если (ПоследняяГруппа = Неопределено) Тогда
			ПоследняяГруппа = ПредшествующаяГруппа;	
		КонецЕсли;
		
		// -- Окончательный расчет.
		ГруппаКолонок = Неопределено;
		Если (ИсходнаяШирина - ОсталосьШирины = 0) Тогда
			КоэфициентРасширения = 1;
		Иначе
			КоэфициентРасширения = ИсходнаяШирина / (ИсходнаяШирина - ОсталосьШирины);
		КонецЕсли;
		ПройденнаяШирина = 0; ОсталосьШирины = ИсходнаяШирина; ПоправкаШирины = 0;
		
		Для Каждого Колонка Из мКолонки Цикл
			Колонка = Колонка.Значение;
			
			// ---- Отсечение неотображаемых колонок.
			Если (Колонка.ГруппаКолонок = Неопределено) Или (Не Колонка.ГруппаКолонок.ВидимостьРеальная) Тогда
				Колонка.Вставить("ВидимостьРеальная", Ложь);
				Продолжить;
			КонецЕсли;
			
			Колонка.Вставить("ВидимостьРеальная", Истина);
			
			// ---- Изменена группа колонок и соответсвенно начата новая строка.
			Если (Не ГруппаКолонок = Колонка.ГруппаКолонок) Тогда
				ГруппаКолонок = Колонка.ГруппаКолонок;
				
				Если ГруппаКолонок.ВидимостьРеальная Тогда
					ГруппаКолонок.Вставить("ЛевоГруппыРеальная", ПройденнаяШирина);
					Если (ГруппаКолонок = ПоследняяГруппа) Тогда
						ШиринаГруппыРеальная = ОсталосьШирины; ПоправкаШирины = 0;
					Иначе
						ШиринаГруппыРеальная = Окр(ГруппаКолонок.ШиринаГруппы * КоэфициентРасширения); ПоправкаШирины = 1;
					КонецЕсли;
					ГруппаКолонок.Вставить("ШиринаГруппыРеальная", ШиринаГруппыРеальная);
					
					ПройденнаяШирина = ПройденнаяШирина + (ШиринаГруппыРеальная - 1); ОсталосьШирины = Макс(ОсталосьШирины - (ШиринаГруппыРеальная - ПоправкаШирины), 0);
				КонецЕсли;
				
				РасчитатьСтроку = Истина;
			КонецЕсли;
			
			// ---- Начата новая строка.
			Если РасчитатьСтроку Или (Колонка.Положение = ПоложениеКолонки.НаСледующейСтроке) Тогда
				Если (ГруппаКолонок.ШиринаСтроки[Колонка.СтрокаГруппыКолонок] = 0) Тогда
					КоэфициентРасширенияГруппы = 1;
				Иначе
					КоэфициентРасширенияГруппы = ГруппаКолонок.ШиринаГруппыРеальная / ГруппаКолонок.ШиринаСтроки[Колонка.СтрокаГруппыКолонок];
				КонецЕсли;
				ПройденнаяШиринаГруппы = 0; ОсталосьШириныГруппы = ГруппаКолонок.ШиринаГруппыРеальная; ПоправкаШириныГруппы = 0;
				
				РасчитатьСтроку = Ложь;
			КонецЕсли;
				
			// ---- Определение ширины колонки.
			Колонка.Вставить("ЛевоРеальная", ГруппаКолонок.ЛевоГруппыРеальная + ПройденнаяШиринаГруппы);
			Если (Колонка.КолонкаГруппыКолонок = ГруппаКолонок.КоличествоКолнокВСтроке[Колонка.СтрокаГруппыКолонок] - 1) Тогда
				ШиринаРеальная = ОсталосьШириныГруппы; ПоправкаШириныГруппы = 0;
			Иначе
				ШиринаРеальная = Окр(Колонка.Ширина * КоэфициентРасширенияГруппы); ПоправкаШириныГруппы = 1;
			КонецЕсли;
			Колонка.Вставить("ШиринаРеальная", ШиринаРеальная);
			
			ПройденнаяШиринаГруппы = ПройденнаяШиринаГруппы + (ШиринаРеальная - 1); ОсталосьШириныГруппы = Макс(ОсталосьШириныГруппы - (ШиринаРеальная - ПоправкаШириныГруппы), 0);

			
			// ---- Определение количетсва вложенных элементов данных и их ширины.
			Если Колонка.ОтображатьВложенныеДанные Тогда
				КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная = Макс(Цел((Колонка.ШиринаРеальная - 1) / (Колонка.ШиринаЭлементаВложенныхДанных - 1)), 1);
				ЛевоВложенныхЭлементовРеальная = Новый Массив;
				ШиринаВложенныхЭлементовРеальная = Новый Массив;
				
				КоэфициентРасширенияКолокни = (Колонка.ШиринаРеальная - 1) / (Колонка.ШиринаЭлементаВложенныхДанных - 1) / КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная;
				ПройденнаяШиринаКолокни = 0; ОсталосьШириныКолокни = Колонка.ШиринаРеальная; ПоправкаШириныКолокни = 0;
				
				Для ИндексВложенногоЭлементаВПределахСтрокиСтраницы = 0 По КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная - 1 Цикл
					ЛевоВложенныхЭлементовРеальная.Добавить(Колонка.ЛевоРеальная + ПройденнаяШиринаКолокни);
					Если (ИндексВложенногоЭлементаВПределахСтрокиСтраницы = КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная - 1) Тогда
						ШиринаВложенногоЭлементаРеальная = ОсталосьШириныКолокни; ПоправкаШириныКолонки = 0;
					Иначе
						ШиринаВложенногоЭлементаРеальная = Окр(Колонка.ШиринаЭлементаВложенныхДанных * КоэфициентРасширенияКолокни); ПоправкаШириныКолокни = 1;
					КонецЕсли;
					ШиринаВложенныхЭлементовРеальная.Добавить(ШиринаВложенногоЭлементаРеальная);
					
					ПройденнаяШиринаКолокни = ПройденнаяШиринаКолокни + (ШиринаВложенногоЭлементаРеальная - 1); ОсталосьШириныКолокни = Макс(ОсталосьШириныКолокни - (ШиринаВложенногоЭлементаРеальная - ПоправкаШириныКолокни), 0);
				КонецЦикла;
				
				Колонка.Вставить("КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная", КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная);
				Колонка.Вставить("ЛевоВложенныхЭлементовРеальная", ЛевоВложенныхЭлементовРеальная);
				Колонка.Вставить("ШиринаВложенныхЭлементовРеальная", ШиринаВложенныхЭлементовРеальная);
			КонецЕсли;
			
		КонецЦикла;
		
		
		// Шапка.
		Высота = мЭтотОбъект.ВысотаКлиентскойОбласти;
		
		Если Шапка Тогда
			// -- Расчет параметров шапки.
			мЭтотОбъект.Вставить("ВидимостьШапкиРеальная", Высота >= ВысотаШапки);
			мЭтотОбъект.Вставить("ВидимыхСтрокШапкиРеальная", Мин(Цел((Высота - 1) / (ВысотаШапки - 1)), мЭтотОбъект.ВидимыхСтрокШапки));
			мЭтотОбъект.Вставить("ВысотаШапкиРеальная", (ВысотаШапки - 1) * мЭтотОбъект.ВидимыхСтрокШапкиРеальная + 1);
		Иначе
			мЭтотОбъект.Вставить("ВидимостьШапкиРеальная", Ложь);
			мЭтотОбъект.Вставить("ВысотаШапкиРеальная", 0);
		КонецЕсли;
		
		
		// Подвал.
		Высота = мЭтотОбъект.ВысотаКлиентскойОбласти - мЭтотОбъект.ВысотаШапкиРеальная;
		
		Если Подвал Тогда
			// -- Расчет параметров шапки.
			мЭтотОбъект.Вставить("ВидимостьПодвалаРеальная", Высота >= ВысотаПодвала);
			мЭтотОбъект.Вставить("ВидимыхСтрокПодвалаРеальная", Мин(Цел((Высота - 1) / (ВысотаПодвала - 1)), мЭтотОбъект.ВидимыхСтрокПодвала));
			мЭтотОбъект.Вставить("ВысотаПодвалаРеальная", (ВысотаПодвала - 1) * мЭтотОбъект.ВидимыхСтрокПодвалаРеальная + 1);
		Иначе
			мЭтотОбъект.Вставить("ВидимостьПодвалаРеальная", Ложь);
			мЭтотОбъект.Вставить("ВысотаПодвалаРеальная", 0);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗапомнитьСостояниеСтрок()
	
	Перем ИндексРазделаДанных, ИндексДинамическойСтроки;
	
	// Проверка спецрежимов и изменения состояния.
	Если Не мИзмененыПараметрыДанных Тогда
		Возврат;
	КонецЕсли;
	
	// Источник данных.
	мЭтотОбъект.Вставить("Данные", мДанные);
	мЭтотОбъект.Вставить("ТекущийРодитель", мТекущийРодитель);
	мЭтотОбъект.Вставить("ДинамическиеДанныеПервыйРазделКоличество", мДинамическиеДанные[мИндексПервогоРазделаДанных].Количество());
	мЭтотОбъект.Вставить("ДинамическиеДанныеВторойРазделКоличество", мДинамическиеДанные[мИндексВторогоРазделаДанных].Количество());
	мЭтотОбъект.Вставить("ДинамическиеСтроки", ЗначениеВСтрокуВнутр(мДинамическиеСтроки));
	
	
	// Расчет параметров страницы.
	мСтраницы = Новый СписокЗначений;
	
	Высота = мЭтотОбъект.ВысотаКлиентскойОбласти - Макс(мЭтотОбъект.ВысотаШапкиРеальная - 1, 0) - Макс(мЭтотОбъект.ВысотаПодвалаРеальная - 1, 0);
	
	СтрокНаСтранице = Цел((Высота - 1) / (ЭтотОбъект.МинимальнаяВысотаСтроки - 1));
	
	мЭтотОбъект.Вставить("ВидимостьСтрокРеальная", (Не мДанные = Неопределено) И Булево(мГруппыКолонок.Количество()) И Булево(СтрокНаСтранице));
	мЭтотОбъект.Вставить("СтрокНаСтраницеРеальная", СтрокНаСтранице);
	
	// -- Проверка достаточности пространства.
	Если Не мЭтотОбъект.ВидимостьСтрокРеальная Тогда
		мТекщаяСтраница = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	// Расчет параметров строк.
	
	// -- Расчет занимаемого пространства стандартной строкой.
	СтандартнаяВысотаСтрокиВСтрокахСтраницы = 0;
	Для Каждого ГруппаКолонок Из мГруппыКолонок Цикл
		ГруппаКолонок = ГруппаКолонок.Значение;
		
		// ---- Отсекаем неотображаемые группы колонок.
		Если Не ГруппаКолонок.ВидимостьРеальная Тогда
			Прервать;
		КонецЕсли;
		
		СтандартнаяВысотаСтрокиВСтрокахСтраницы = Мин(Макс(СтандартнаяВысотаСтрокиВСтрокахСтраницы, ГруппаКолонок.КоличествоСтрок), СтрокНаСтранице);
	КонецЦикла;
	мЭтотОбъект.Вставить("СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная", СтандартнаяВысотаСтрокиВСтрокахСтраницы);
	
	
	// Расчет распределения строк.
	
	// -- Определение присутствия видимых динамических колонок.
	ДинамическиеКолонки = Новый Соответствие;
	Если Булево(мДинамическиеКолонки.Количество()) Тогда
		
		Для Каждого Колонка Из мКолонки Цикл
			Колонка = Колонка.Значение;
			
			// ---- Отсекаем неотображаемые колонки.
			Если Не Колонка.ВидимостьРеальная Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексКолонки = Колонка.Индекс;
			Если (Не мДинамическиеКолонки.НайтиПоЗначению(Колонки.Получить(ИндексКолонки)) = Неопределено) Тогда
				ДинамическиеКолонки.Вставить(ИндексКолонки, Колонка.КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// -- Текащая страница (I).
	Если (Не мТекущаяСтрока = Неопределено) Тогда
		//ИндексТекущейСтроки = мДинамическиеДанные[мИндексВторогоРазделаДанных].Индекс(мТекущаяСтрока);
		//Костенюк Александр-Старт 30.05.2012
		Если ТипЗнч(мДинамическиеДанные[мИндексВторогоРазделаДанных]) = мТипМассив Тогда
			ИндексТекущейСтроки = мДинамическиеДанные[мИндексВторогоРазделаДанных].Найти(мТекущаяСтрока);
			Если (ИндексТекущейСтроки = Неопределено) Тогда
				ИндексТекущейСтроки = -1;
			КонецЕсли;
		Иначе
			ИндексТекущейСтроки = мДинамическиеДанные[мИндексВторогоРазделаДанных].Индекс(мТекущаяСтрока);
		КонецЕсли;
		//Костенюк Александр-Финиш 30.05.2012
	КонецЕсли;
		
	Если Булево(ДинамическиеКолонки.Количество()) И Булево(мДинамическиеСтроки.Количество()) Тогда
		
		// -- Динамические строки.
		мСтроки = Новый Соответствие;
		
		СтандартныхСтрокНаСтранице = Макс(Цел(СтрокНаСтранице / СтандартнаяВысотаСтрокиВСтрокахСтраницы) - мДинамическиеФиксированные, 1); ПройденоСтандартныхСтрокСтраницы = 0;

		// ---- Анализ данных.
		РазделДанных = мДинамическиеДанные[мИндексВторогоРазделаДанных]; КоличествоСтрок = РазделДанных.Количество();
		ИндексСтроки = мДинамическиеФиксированные;
		
		Для Каждого ДанныеРаздела Из мДинамическиеСтроки Цикл
			ИндексРазделаДанных = ДанныеРаздела.Ключ; ПредставлениеРазделаДанных = Строка(ИндексРазделаДанных);
			
			Для Каждого ДанныеСтроки Из ДанныеРаздела.Значение Цикл
				ИндексДинамическойСтроки = ДанныеСтроки.Ключ; ПредставлениеДинамическойСтроки = Строка(ИндексДинамическойСтроки);
			
				// ------ Рачет высоты строки.
				ВысотаСтрокиВСтрокахСтраницы = СтандартнаяВысотаСтрокиВСтрокахСтраницы;
				Для Каждого ДанныеКолонки Из ДанныеСтроки.Значение Цикл
					ИндексДинамическойКолонки = ДанныеКолонки.Ключ;
					
					КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная = ДинамическиеКолонки.Получить(ИндексДинамическойКолонки);
					Если (КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная = Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоВложенныхЭлементов = ДанныеКолонки.Значение;
					
					ВысотаКолонкиСтрокиВСтрокахСтраницы = Цел(КоличествоВложенныхЭлементов / КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная);
					Если Булево(КоличествоВложенныхЭлементов % КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная) Тогда
						ВысотаКолонкиСтрокиВСтрокахСтраницы = ВысотаКолонкиСтрокиВСтрокахСтраницы + 1;
					КонецЕсли;
						
					ВысотаСтрокиВСтрокахСтраницы = Макс(ВысотаКолонкиСтрокиВСтрокахСтраницы, ВысотаСтрокиВСтрокахСтраницы);
				КонецЦикла;
				// -------- Высота динамической строки должна быть кратной высоте стандартной строки.
				ВысотаСтрокиВСтандартныхСтроках = Цел(ВысотаСтрокиВСтрокахСтраницы / СтандартнаяВысотаСтрокиВСтрокахСтраницы);
				Если Булево(ВысотаСтрокиВСтрокахСтраницы % СтандартнаяВысотаСтрокиВСтрокахСтраницы) Тогда
					ВысотаСтрокиВСтандартныхСтроках = ВысотаСтрокиВСтандартныхСтроках + 1;
				КонецЕсли;
				
				мСтроки.Вставить(ПредставлениеРазделаДанных + "x" + ПредставлениеДинамическойСтроки, ВысотаСтрокиВСтандартныхСтроках);
				
				
				// ------ Стандартные строки до текущей динамической строки.
				Если (ИндексРазделаДанных = мИндексВторогоРазделаДанных) Тогда
					Если (ПройденоСтандартныхСтрокСтраницы >= СтандартныхСтрокНаСтранице) Тогда
						ПройденоСтандартныхСтрокСтраницы = 0;
					КонецЕсли;
					
					Для ИндексСтроки = ИндексСтроки По ИндексДинамическойСтроки - 1 Цикл
						
						// -------- Текащая страница (II).
						Если (Не мТекущаяСтрока = Неопределено) И (ИндексСтроки <= ИндексТекущейСтроки) Тогда
							мТекущаяСтраница = мСтраницы.Количество();
						КонецЕсли;
						
						ОсталосьСтандартныхСтрокСтраницы = СтандартныхСтрокНаСтранице - ПройденоСтандартныхСтрокСтраницы;
						
						Если Не Булево(ПройденоСтандартныхСтрокСтраницы) Тогда
							мСтраницы.Добавить(ИндексСтроки);
						КонецЕсли;
						ИндексСтроки = ИндексСтроки + (ОсталосьСтандартныхСтрокСтраницы - 1);
						
						ПройденоСтандартныхСтрокСтраницы = ПройденоСтандартныхСтрокСтраницы + ОсталосьСтандартныхСтрокСтраницы;
						
					КонецЦикла;
				КонецЕсли;
				
				// ------ Текущая днамическая строка.
				Если (ИндексРазделаДанных = мИндексПервогоРазделаДанных) Тогда
					
					ПройденоСтандартныхСтрокСтраницы = ПройденоСтандартныхСтрокСтраницы + ВысотаСтрокиВСтандартныхСтроках;
					
				Иначе
					
					ИндексСтроки = ИндексДинамическойСтроки; ИндексСмещенияСтроки = 0;
					
					// -------- Текащая страница (II).
					Если (Не мТекущаяСтрока = Неопределено) И (ИндексСтроки <= ИндексТекущейСтроки) Тогда
						мТекущаяСтраница = мСтраницы.Количество();
					КонецЕсли;
					
					Пока Булево(ВысотаСтрокиВСтандартныхСтроках) Цикл
						Если (ПройденоСтандартныхСтрокСтраницы >= СтандартныхСтрокНаСтранице) Тогда
							ПройденоСтандартныхСтрокСтраницы = 0;
						КонецЕсли;
						
						ОсталосьСтандартныхСтрокСтраницы = СтандартныхСтрокНаСтранице - ПройденоСтандартныхСтрокСтраницы;
						
						Если Не Булево(ПройденоСтандартныхСтрокСтраницы) Тогда
							мСтраницы.Добавить(ПредставлениеДинамическойСтроки + "." + Строка(ИндексСмещенияСтроки));
						КонецЕсли;
						
						ПройденоСтандартныхСтрокСтраницы = ПройденоСтандартныхСтрокСтраницы + ВысотаСтрокиВСтандартныхСтроках;
						
						ИндексСмещенияСтроки = ИндексСмещенияСтроки + ОсталосьСтандартныхСтрокСтраницы;
						ВысотаСтрокиВСтандартныхСтроках = Макс(ВысотаСтрокиВСтандартныхСтроках - ОсталосьСтандартныхСтрокСтраницы, 0);
						
					КонецЦикла;
					
					// -------- Следующая строка.
					ИндексСтроки = ИндексДинамическойСтроки + 1;
					
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
		
		// ------ Стандартные строки после последней динамической строки.
		Для ИндексСтроки = ИндексСтроки По КоличествоСтрок - 1 Цикл
			Если (ПройденоСтандартныхСтрокСтраницы >= СтандартныхСтрокНаСтранице) Тогда
				ПройденоСтандартныхСтрокСтраницы = 0;
			КонецЕсли;
			
			// -------- Текащая страница (II).
			Если (Не мТекущаяСтрока = Неопределено) И (ИндексСтроки <= ИндексТекущейСтроки) Тогда
				мТекущаяСтраница = мСтраницы.Количество();
			КонецЕсли;
			
			Если Не Булево(ПройденоСтандартныхСтрокСтраницы) Тогда
				мСтраницы.Добавить(ИндексСтроки);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + (СтандартныхСтрокНаСтранице - ПройденоСтандартныхСтрокСтраницы - 1);
			
			ПройденоСтандартныхСтрокСтраницы = 0;
			
		КонецЦикла;
		
	Иначе
		
		// -- Статические строки (только второй раздел).
		мСтроки = Неопределено;
		
		СтандартныхСтрокНаСтранице = Макс(Цел(СтрокНаСтранице / СтандартнаяВысотаСтрокиВСтрокахСтраницы) - мДинамическиеФиксированные - мДинамическиеРодители, 1);
		
		РазделДанных = мДинамическиеДанные[мИндексВторогоРазделаДанных]; КоличествоСтрок = РазделДанных.Количество();
		Для ИндексСтроки = мДинамическиеФиксированные По КоличествоСтрок - 1 Цикл

			// ---- Текащая страница (II).
			Если (Не мТекущаяСтрока = Неопределено) И (ИндексСтроки <= ИндексТекущейСтроки) Тогда
				мТекущаяСтраница = мСтраницы.Количество();
			КонецЕсли;
			
			мСтраницы.Добавить(ИндексСтроки);
			ИндексСтроки = ИндексСтроки + (СтандартныхСтрокНаСтранице - 1); 
			
		КонецЦикла;
		
	КонецЕсли;
		
	// -- Текащая страница (III).
	Если (мТекущаяСтраница = Неопределено) Тогда
		Если (НачальноеОтображение = НачальноеОтображениеСписка.Конец) Тогда
			мТекущаяСтраница = мСтраницы.Количество() - 1;
		Иначе
			мТекущаяСтраница = 0;
		КонецЕсли;
	КонецЕсли;
	мТекущаяСтраница = Макс(Мин(мТекущаяСтраница, мСтраницы.Количество() - 1), 0);
	
КонецПроцедуры


Процедура ОтобразитьПолосуПрокрутки()
	
	// Корректировка положения элементов полосы прокрутки.
	Если мИзмененыПараметрыПолосыПрокрутки Тогда
		
		// -- Удаление элементов.
		Если мИзмененРазмерФормы Тогда
			УдалитьЭлементФормы(мЭлементыФормыСетки);
			УдалитьЭлементФормы(мЭлементыФормыПодвала);
			УдалитьЭлементФормы(мЭлементыФормыШапки);
			УдалитьЭлементФормы(мЭлементыФормыГруппКолонок);
			УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки);
		КонецЕсли;			
		
		// -- Размеры.
		Ширина = мЭтотОбъект.ШиринаКлиентскойОбласти; Высота = мЭтотОбъект.ВысотаКлиентскойОбласти;
		
		// ---- Привязки.
		ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Право);
		ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ПривязкаЛево);
		ПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Верх);
		ПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Низ);
		
		
		// -- Дополнительная кнопка (сверху).
		Если мЭтотОбъект.ВидимостьДополнительныхКнопокПолосыПрокруткиРеальная Тогда
			
			ЭлементФормыПолностьюВверх = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "ПолностьюВверх", Истина, , 
															  , Ширина - ШиринаКнопокПолосыПрокрутки, 0, ШиринаКнопокПолосыПрокрутки, ВысотаКнопокПолосыПрокрутки,
															  ПривязкаЛево, ПривязкаПраво, ПривязкаВерх, СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ПривязкаВерх),
															  , ЦветКнопокПолосыПрокрутки, ,,,, 
															  , ЭтотОбъект.БиблиотекаКартинок.ПолностьюВверх);
								 
			СмещениеВысоты = мЭтотОбъект.ВысотаКнопокПолосыПрокрутки - 1;
			
		Иначе
			
			УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "ПолностьюВверх");
			
			СмещениеВысоты = 0;
			
		КонецЕсли;
		
		
		// -- Полоса и кнопки.
		Если мЭтотОбъект.ВидимостьПолосуПрокруткиРеальная Тогда
			
			ЭлементФормыПолосы = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Полоса", Ложь, ,
													  , Ширина - ШиринаКнопокПолосыПрокрутки, СмещениеВысоты, ШиринаКнопокПолосыПрокрутки, Высота - СмещениеВысоты - СмещениеВысоты,
													  ПривязкаЛево, ПривязкаПраво, ПривязкаВерх, ПривязкаНиз,
													  , ЦветПолосыПрокрутки, ,, ГоризонтальноеПоложение.Центр);
													  
			ЭлементФормыВверх = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вверх", Истина, ,
													 , Ширина - ШиринаКнопокПолосыПрокрутки, СмещениеВысоты, ШиринаКнопокПолосыПрокрутки, ВысотаКнопокПолосыПрокрутки,
													 ПривязкаЛево, ПривязкаПраво, ПривязкаВерх, СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ПривязкаВерх),
													 , ЦветКнопокПолосыПрокрутки, ,,,, 
													 , ЭтотОбъект.БиблиотекаКартинок.Вверх);
								 
			ЭлементФормыВниз = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вниз", Истина, , 
												    , Ширина - ШиринаКнопокПолосыПрокрутки, Высота - ВысотаКнопокПолосыПрокрутки - СмещениеВысоты, ШиринаКнопокПолосыПрокрутки, ВысотаКнопокПолосыПрокрутки,
												    ПривязкаЛево, ПривязкаПраво, СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ПривязкаНиз), ПривязкаНиз,
												    , ЦветКнопокПолосыПрокрутки, ,,,, 
												    , ЭтотОбъект.БиблиотекаКартинок.Вниз);
		Иначе
								 
			УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Полоса");
			УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вверх");
			УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вниз");
			
		КонецЕсли;
		
		
		// -- Дополнительная кнопка (снизу).
		Если мЭтотОбъект.ВидимостьДополнительныхКнопокПолосыПрокруткиРеальная Тогда
			
			ЭлементФормыПолностьюВниз = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "ПолностьюВниз", Истина, , 
														     , Ширина - ШиринаКнопокПолосыПрокрутки, Высота - ВысотаКнопокПолосыПрокрутки, ШиринаКнопокПолосыПрокрутки, ВысотаКнопокПолосыПрокрутки,
														     ПривязкаЛево, ПривязкаПраво, СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ПривязкаНиз), ПривязкаНиз, 
														     , ЦветКнопокПолосыПрокрутки, ,,,, 
														     , ЭтотОбъект.БиблиотекаКартинок.ПолностьюВниз);
								 
		Иначе
			
			УдалитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "ПолностьюВниз");
			
		КонецЕсли;

		
		// -- Рабочая область.
		Если мЭтотОбъект.ВидимостьПолосуПрокруткиРеальная Тогда
			ШиринаРабочейОбласти = Ширина - (ШиринаКнопокПолосыПрокрутки - 1);
		Иначе
			ШиринаРабочейОбласти = Ширина;
		КонецЕсли;
		
		ЭлементФормыРабочаяОбласть = ДобавитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "РабочаяОбласть", Ложь, , 
														  , 0, 0, ШиринаРабочейОбласти, Высота,
														  СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Лево), ПривязкаПраво, ПривязкаВерх, ПривязкаНиз,
														  , ЦветФонаПоля);
		
	Иначе
		
		Если мРежимИзмененияВыделения Тогда
			Возврат;
		КонецЕсли;
			
		Если мРежимИзмененияСтраницы Или мРежимОбновленияСтрок Тогда
			
			// -- Рабочая область.
			ЭлементФормыРабочаяОбласть = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "РабочаяОбласть");
			
			// -- Определение необходимости отображения полосы прокрутки.
			Если мЭтотОбъект.ВидимостьПолосуПрокруткиРеальная Тогда
			
				ЭлементФормыПолосы = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Полоса");
				ЭлементФормыВверх = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вверх");
				ЭлементФормыВниз = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вниз");
				
				// -- Дополнительные кнопки.
				Если мЭтотОбъект.ВидимостьДополнительныхКнопокПолосыПрокруткиРеальная Тогда
					ЭлементФормыПолностьюВверх = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "ПолностьюВверх");
					ЭлементФормыПолностьюВниз = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "ПолностьюВниз");
				КонецЕсли;
				
			КонецЕсли;
		
		Иначе	
			
			// -- Рабочая область.
			ЭлементФормыРабочаяОбласть = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "РабочаяОбласть", ,
															  , ЦветФонаПоля);

			
			// -- Определение необходимости отображения полосы прокрутки.
			Если мЭтотОбъект.ВидимостьПолосуПрокруткиРеальная Тогда
			
				ЭлементФормыПолосы = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Полоса", ,
														  , ЦветПолосыПрокрутки, ,, ГоризонтальноеПоложение.Центр);
									                                              
				ЭлементФормыВверх = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вверх", ,
														 , ЦветКнопокПолосыПрокрутки, ,,,, 
														 , ЭтотОбъект.БиблиотекаКартинок.Вверх);
														 
				ЭлементФормыВниз = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "Вниз", ,
													    , ЦветКнопокПолосыПрокрутки, ,,,, 
													    , ЭтотОбъект.БиблиотекаКартинок.Вниз);
									 
				// -- Дополнительные кнопки.
				Если мЭтотОбъект.ВидимостьДополнительныхКнопокПолосыПрокруткиРеальная Тогда
					ЭлементФормыПолностьюВверх = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "ПолностьюВверх", ,
																	  , ЦветКнопокПолосыПрокрутки, ,,,, 
																	  , ЭтотОбъект.БиблиотекаКартинок.ПолностьюВверх);
										 
					ЭлементФормыПолностьюВниз = ИзменитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "ПолностьюВниз", ,
																	 , ЦветКнопокПолосыПрокрутки, ,,,, 
																	 , ЭтотОбъект.БиблиотекаКартинок.ПолностьюВниз);
				КонецЕсли;

			КонецЕсли;
															 
		КонецЕсли;
		
	КонецЕсли;
	
	// -- Видимость и доступность.
	ЭлементФормыРабочаяОбласть.Доступность = мЭтотОбъект.Доступность;
	
	Если мЭтотОбъект.ВидимостьПолосуПрокруткиРеальная Тогда
		
		//Видимость = Булево(мСтраницы.Количество());
		Видимость = (мСтраницы.Количество() > 1);
		Первая = (мТекущаяСтраница = 0); Последняя = (Не Видимость) Или (мТекущаяСтраница = мСтраницы.Количество() - 1);
		
		ЭлементФормыПолосы.Доступность = мЭтотОбъект.Доступность И Видимость;
		ЭлементФормыВверх.Доступность = мЭтотОбъект.Доступность И (Не Первая);
		ЭлементФормыВниз.Доступность = мЭтотОбъект.Доступность И (Не Последняя);
		
		// ---- Дополнительные кнопки.
		Если мЭтотОбъект.ВидимостьДополнительныхКнопокПолосыПрокруткиРеальная Тогда
			ЭлементФормыПолностьюВверх.Доступность = ЭлементФормыВверх.Доступность;
			ЭлементФормыПолностьюВниз.Доступность = ЭлементФормыВниз.Доступность;
		КонецЕсли;
		
		// -- Страницы и кнопки.
		Если Видимость Тогда
			Заголовок = Строка(мТекущаяСтраница + 1) + Символы.ПС + "———" + Символы.ПС + мСтраницы.Количество();
		Иначе
			Заголовок = "";
		КонецЕсли;
		ЭлементФормыПолосы.Заголовок = Заголовок;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ОтобразитьГруппыКолонок()
	
	// Корректировка положения элементов групп колонок.
	Если Не мИзмененыПараметрыКолонок Тогда
		Возврат;
	КонецЕсли;
		
	// -- Удаление элементов.
	УдалитьЭлементФормы(мЭлементыФормыСетки);
	УдалитьЭлементФормы(мЭлементыФормыПодвала);
	УдалитьЭлементФормы(мЭлементыФормыШапки);
	УдалитьЭлементФормы(мЭлементыФормыГруппКолонок);

	// -- Определение видимости групп колонок.
	ВидимостьГруппКолонокРеальная = мЭтотОбъект.ВидимостьШапкиРеальная Или мЭтотОбъект.ВидимостьПодвалаРеальная Или мЭтотОбъект.ВидимостьСтрокРеальная;
	
	Если Не ВидимостьГруппКолонокРеальная Тогда
		Возврат;
	КонецЕсли;
	
	// -- Размещение элементов формы групп колонок.
	ЭлементРабочейОбласти = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "РабочаяОбласть");
	ЭлементСлева = ЭлементРабочейОбласти;
	
	// ---- Привязки (I).
	ПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Верх);
	ПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Верх);
	
	
	Для Каждого ГруппаКолонок Из мГруппыКолонок Цикл
		ГруппаКолонок = ГруппаКолонок.Значение;
		
		// ---- Отсечение непомещающихся групп колонок.
		Если Не ГруппаКолонок.ВидимостьРеальная Тогда
			Прервать;
		КонецЕсли;
		
		// ---- Привязки (II).
		Если (ЭлементСлева = ЭлементРабочейОбласти) Тогда
			ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементСлева, ГраницаЭлементаУправления.Лево);
			ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементСлева, ГраницаЭлементаУправления.Лево, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Право);
		Иначе
			ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементСлева, ГраницаЭлементаУправления.Право);
			ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементСлева, ГраницаЭлементаУправления.Право, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Право);
		КонецЕсли;
		
		ЭлементСлева = ДобавитьЭлементФормы(мЭлементыФормыГруппКолонок, ЗашифроватьИмяЭлементФормы("ГруппаКолонок", ГруппаКолонок.Индекс), Истина, , 
											Ложь, ГруппаКолонок.ЛевоГруппыРеальная, 0, ГруппаКолонок.ШиринаГруппыРеальная, 8,
											ПривязкаЛево, ПривязкаПраво, ПривязкаВерх, ПривязкаНиз);
		ЭлементСлева.Доступность = Ложь;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОтобразитьШапку()

	// Корректировка положения элементов шапки.
	Если мИзмененыПараметрыКолонок Тогда
			
		// -- Определение необходимости отображения шапки.
		Если Не мЭтотОбъект.ВидимостьШапкиРеальная Тогда
			Возврат;
		КонецЕсли;
	
		// -- Размещение элементов формы шапки.
		ЭлементРабочейОбласти = ПолучитьЭлементФормы(мЭлементыФормыПолосыПрокрутки, "РабочаяОбласть");
				
		// -- Привязка (I).
		ПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Верх);
		ПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ПривязкаВерх);
		
		ГруппаКолонок = Неопределено;
		
		Для Каждого Колонка Из мКолонки Цикл
			Колонка = Колонка.Значение;
			
			// -- Отсечение неотображаемых колонок.
			Если Не Колонка.ВидимостьРеальная Тогда
				Колонка.Вставить("ВидимостьВШапкеРеальная", Ложь);
				Продолжить;
			КонецЕсли;
			
			// -- Смена текущей группы колонок.
			Если (Не ГруппаКолонок = Колонка.ГруппаКолонок) Тогда
				ГруппаКолонок = Колонка.ГруппаКолонок;
				
				ЭлементГруппКолонок = ПолучитьЭлементФормы(мЭлементыФормыГруппКолонок, ЗашифроватьИмяЭлементФормы("ГруппаКолонок", ГруппаКолонок.Индекс));
				
				СменаСтроки = Истина; ПройденоВидимыхСтрок = 0;
				СмещениеВысоты = 0; ВысотаСтроки = 0; ПоправкаВысоты = 0;
			КонецЕсли;
			
			// -- Отсечение неотображаемых колонок (строк шапки).
			Если Не ГруппаКолонок.ОтображатьВШапке[Колонка.СтрокаГруппыКолонок] Тогда
				Колонка.Вставить("ВидимостьВШапкеРеальная", Ложь);
				Продолжить;
			КонецЕсли;
			
			// -- Смена строки группы колонок.
			Если СменаСтроки Или (Колонка.Положение = ПоложениеКолонки.НаСледующейСтроке) Тогда
				ЭлементСлева = ЭлементГруппКолонок;
				
				// ---- Определение высоты строки (поправка на невидимые колонки в шапке и максимальную высоту шапки).
				Если (Колонка.СтрокаГруппыКолонок = ГруппаКолонок.КоличествоСтрок - 1) Тогда
					ВысотаСтрокиВСтроках = мЭтотОбъект.ВидимыхСтрокШапкиРеальная - Колонка.СтрокаГруппыКолонок;
				Иначе
					ВысотаСтрокиВСтроках = 1;
					Для Строка = Колонка.СтрокаГруппыКолонок + 1 По ГруппаКолонок.КоличествоСтрок - 1 Цикл
						Если ГруппаКолонок.ОтображатьВШапке[Строка] Или (Строка >= мЭтотОбъект.ВидимыхСтрокШапкиРеальная) Тогда
							Прервать;
						КонецЕсли;
						ВысотаСтрокиВСтроках = ВысотаСтрокиВСтроках + 1;
					КонецЦикла;
					Если (Строка = ГруппаКолонок.КоличествоСтрок) Тогда
						ВысотаСтрокиВСтроках = мЭтотОбъект.ВидимыхСтрокШапкиРеальная - Колонка.СтрокаГруппыКолонок;
					КонецЕсли;
				КонецЕсли;
				
				СменаСтроки = Ложь; ПройденоВидимыхСтрок = ПройденоВидимыхСтрок + 1;
				СмещениеВысоты = СмещениеВысоты + (ВысотаСтроки - ПоправкаВысоты); ВысотаСтроки = (ВысотаШапки - 1) * ВысотаСтрокиВСтроках + 1; ПоправкаВысоты = Макс(ВысотаСтрокиВСтроках - 1, 1);
			КонецЕсли;
			
			// -- Отсечение неопомещающихся колонок.
			Если (ПройденоВидимыхСтрок > мЭтотОбъект.ВидимыхСтрокШапкиРеальная) Тогда
				Колонка.Вставить("ВидимостьВШапкеРеальная", Ложь);
				Продолжить;
			КонецЕсли;
			
			
			КолонкаРеальная = Колонка.Колонка;
			
			// -- Привязка (II).
			Если (ЭлементСлева = ЭлементГруппКолонок) Тогда
				ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементСлева, ГраницаЭлементаУправления.Лево);
				ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементСлева, ГраницаЭлементаУправления.Лево, ЭлементГруппКолонок, ГраницаЭлементаУправления.Право);
			Иначе
				ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементСлева, ГраницаЭлементаУправления.Право);
				ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементСлева, ГраницаЭлементаУправления.Право, ЭлементГруппКолонок, ГраницаЭлементаУправления.Право);
			КонецЕсли;
			
			// -- Колонка.
			ЭлементСлева = ДобавитьЭлементФормы(мЭлементыФормыШапки, ЗашифроватьИмяЭлементФормы("Шапка", Колонка.Индекс), Ложь, , 
												, Колонка.ЛевоРеальная, СмещениеВысоты, Колонка.ШиринаРеальная, ВысотаСтроки, 
												ПривязкаЛево, ПривязкаПраво, ПривязкаВерх, ПривязкаНиз,
												КолонкаРеальная.ТекстШапки, КолонкаРеальная.ЦветФонаШапки, КолонкаРеальная.ЦветТекстаШапки, КолонкаРеальная.ШрифтШапки, КолонкаРеальная.ГоризонтальноеПоложениеВШапке, , 
												, КолонкаРеальная.КартинкаШапки);
			
			
			Колонка.Вставить("ВидимостьВШапкеРеальная", Истина);
		КонецЦикла;							 
			
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьПодвал()
	
	Возврат;
		
КонецПроцедуры

Процедура ОтобразитьСетку()

	// Корректировка положения ячеек.
	Если Не мИзмененыПараметрыКолонок Тогда
		Возврат;
	КонецЕсли;
		
	мЯчейки = Новый Соответствие;

	// Оформление строки.
	Если (Не мОформлениеСтроки = Неопределено) Тогда
		мОформлениеСтроки.Высвободить();
	КонецЕсли;
	мОформлениеСтроки = Обработки.TouchОформлениеСтроки.Создать();
	
	// -- Определение необходимости отображения строк.
	Если Не мЭтотОбъект.ВидимостьСтрокРеальная Тогда
		Возврат;
	КонецЕсли;
		
	// -- Расчет параметров страницы.
	СмещениеВысоты = Макс(мЭтотОбъект.ВысотаШапкиРеальная - 1, 0); ОсталосьВысоты = мЭтотОбъект.ВысотаКлиентскойОбласти - Макс(мЭтотОбъект.ВысотаШапкиРеальная - 1, 0) - Макс(мЭтотОбъект.ВысотаПодвалаРеальная - 1, 0); ПоправкаВысоты = 0;
	
	ВысотаСтрокиСтраницыРеальная = Цел((ОсталосьВысоты - 1) / мЭтотОбъект.СтрокНаСтраницеРеальная) + 1;
	ЗначениеРасширения = (ОсталосьВысоты - 1) - (ВысотаСтрокиСтраницыРеальная - 1) * мЭтотОбъект.СтрокНаСтраницеРеальная;
	
	// -- Рабочая область строк.
	Если мЭтотОбъект.ВидимостьПолосуПрокруткиРеальная Тогда
		ОсталосьШирины = мЭтотОбъект.ШиринаКлиентскойОбласти - (мЭтотОбъект.ШиринаКнопокПолосыПрокрутки - 1); 
	Иначе
		ОсталосьШирины = мЭтотОбъект.ШиринаКлиентскойОбласти;
	КонецЕсли;
	
	
	// ---- Привязки рабочей области.
	ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Лево);
	ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Право);
	ПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Верх);
	ПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, мЭтотОбъект.ЭлементФормы, ГраницаЭлементаУправления.Низ);
	
	ЭлементРабочейОбласти = ДобавитьЭлементФормы(мЭлементыФормыСетки, "РабочаяОбластьСтрок", Ложь, ,
												 Ложь, 0, СмещениеВысоты, ОсталосьШирины, ОсталосьВысоты,
												 ПривязкаЛево, ПривязкаПраво, ПривязкаВерх, ПривязкаНиз);
	ЭлементРабочейОбласти.Доступность = Ложь;

	
	// -- Привязки эталонов (I).
	ЭлементЭталонаСверху = ЭлементРабочейОбласти;
	
	ПривязкаЭталонаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Лево);
	ПривязкаЭталонаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ПривязкаЭталонаЛево);
	
	
	// -- Строки.
	
	// ---- Эталоны.
	СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная = мЭтотОбъект.СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная;
	
	ПройденоСтрокСтраницы = 0; ОсталосьСтрокСтраницы = мЭтотОбъект.СтрокНаСтраницеРеальная;
	
	Пока (ОсталосьВысоты > 0) Цикл
		
		// ------ Определение высоты строки.
		Если (ОсталосьВысоты > ВысотаСтрокиСтраницыРеальная) Тогда
			ВысотаСтроки = ВысотаСтрокиСтраницыРеальная + Мин(ЗначениеРасширения, 1);
			ЗначениеРасширения = Макс(ЗначениеРасширения - 1, 0);
			ПоправкаВысоты = 1;
		Иначе
			ВысотаСтроки = ОсталосьВысоты;
			ПоправкаВысоты = 0;
		КонецЕсли;
		
		
		// ------ Привязки эталонов (II).
		Если (ЭлементЭталонаСверху = ЭлементРабочейОбласти) Тогда
			ПривязкаЭталонаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭлементЭталонаСверху, ГраницаЭлементаУправления.Верх);
			ПривязкаЭталонаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭлементЭталонаСверху, ГраницаЭлементаУправления.Верх, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Низ);
		Иначе
			ПривязкаЭталонаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭлементЭталонаСверху, ГраницаЭлементаУправления.Низ);
			ПривязкаЭталонаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭлементЭталонаСверху, ГраницаЭлементаУправления.Низ, ЭлементРабочейОбласти, ГраницаЭлементаУправления.Низ);
		КонецЕсли;
		
		ЭлементЭталонаСверху = ДобавитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Эталон", ПройденоСтрокСтраницы), Истина, ,
													Ложь, 0, СмещениеВысоты, 8, ВысотаСтроки,
													ПривязкаЭталонаЛево, ПривязкаЭталонаПраво, ПривязкаЭталонаВерх, ПривязкаЭталонаНиз);
		ЭлементЭталонаСверху.Доступность = Ложь;

		
		ПройденоСтрокСтраницы = ПройденоСтрокСтраницы + 1;
		СмещениеВысоты = СмещениеВысоты + (ВысотаСтроки - 1); ОсталосьВысоты = ОсталосьВысоты - (ВысотаСтроки - ПоправкаВысоты); ПоправкаВысоты = 1;
		
	КонецЦикла;

	
	// ---- Ячейки.
	ПройденоСтрокДанных = 0; ПройденоСтрокСтраницы = 0;
	
	Пока (ОсталосьСтрокСтраницы > 0) Цикл
		
		// -- Определение высоты строки в строках страницы.
		ВысотаСтрокиДанныхВСтрокахСтраницы = Мин(СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная, ОсталосьСтрокСтраницы);
		
		// -- Корректировка положения элементов ячеек.
		ГруппаКолонок = Неопределено;
		
		Для Каждого Колонка Из мКолонки Цикл
			Колонка = Колонка.Значение;
			
			// ---- Отсечение неотображаемых колонок.
			Если Не Колонка.ВидимостьРеальная Тогда
				Продолжить;
			КонецЕсли;
			
			// ---- Отсечение непомещающихся колонок.
			Если (Колонка.СтрокаГруппыКолонок >= ВысотаСтрокиДанныхВСтрокахСтраницы) Тогда
				Продолжить;
			КонецЕсли;
			
			// ---- Смена текущей группы колонок.
			Если (Не ГруппаКолонок = Колонка.ГруппаКолонок) Тогда
				ГруппаКолонок = Колонка.ГруппаКолонок; ИндексГруппыКолонок = ГруппаКолонок.Индекс;
				
				ЭлементГруппКолонок = ПолучитьЭлементФормы(мЭлементыФормыГруппКолонок, ЗашифроватьИмяЭлементФормы("ГруппаКолонок", ГруппаКолонок.Индекс));
				
				СменаСтроки = Истина;
			КонецЕсли;
		
			// ---- Смена строки группы колонок.
			Если СменаСтроки Или (Колонка.Положение = ПоложениеКолонки.НаСледующейСтроке) Тогда
				СменаСтроки = Ложь;
				
				ЭлементСлева = ЭлементГруппКолонок;
															
				// ---- Привязка (I).
				ВерхнийЭталон = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Эталон", ПройденоСтрокСтраницы + Колонка.СтрокаГруппыКолонок));
				Если (Колонка.СтрокаГруппыКолонок = ГруппаКолонок.КоличествоСтрок - 1) Или (Колонка.СтрокаГруппыКолонок = ВысотаСтрокиДанныхВСтрокахСтраницы - 1) Тогда
					НижнийЭталон = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Эталон", ПройденоСтрокСтраницы + ВысотаСтрокиДанныхВСтрокахСтраницы - 1));
				Иначе
					НижнийЭталон = ВерхнийЭталон;
				КонецЕсли;
				
				ПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ВерхнийЭталон, ГраницаЭлементаУправления.Верх);
				ПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, НижнийЭталон, ГраницаЭлементаУправления.Низ);
				
				// ---- Высота.
				Верх = ВерхнийЭталон.Верх - мЭтотОбъект.ВыравниваниеОтступСверху;
				Если (ВерхнийЭталон = НижнийЭталон) Тогда
					Высота = ВерхнийЭталон.Высота;
				Иначе
					Высота = НижнийЭталон.Верх + НижнийЭталон.Высота - Верх;
				КонецЕсли;
			КонецЕсли;
			
			
			// ---- Привязка (II).
			Если (ЭлементСлева = ЭлементГруппКолонок) Тогда
				ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементСлева, ГраницаЭлементаУправления.Лево);
				ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементСлева, ГраницаЭлементаУправления.Лево, ЭлементГруппКолонок, ГраницаЭлементаУправления.Право);
			Иначе
				ПривязкаЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементСлева, ГраницаЭлементаУправления.Право);
				ПривязкаПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементСлева, ГраницаЭлементаУправления.Право, ЭлементГруппКолонок, ГраницаЭлементаУправления.Право);
			КонецЕсли;
	
			
			// ---- Ячейка.
			ШифрЯчейки = ЗашифроватьИмяЭлементФормы("Ячейка", ПройденоСтрокДанных, Колонка.Индекс);
			
			ЭлементСлева = ДобавитьЭлементФормы(мЭлементыФормыСетки, ШифрЯчейки, Колонка.Доступность И (Не Колонка.ОтображатьВложенныеДанные), ,
												Ложь, Колонка.ЛевоРеальная, Верх, Колонка.ШиринаРеальная, Высота,
												ПривязкаЛево, ПривязкаПраво, ПривязкаВерх, ПривязкаНиз);

												
			мЯчейки.Вставить(ШифрЯчейки, Новый Структура("Стандарт,ЦветФонаПоля,ЦветТекстаПоля,ГиперСсылка,ТекущийРазделДанных,ТекущаяСтрока,ТекущаяКолонка,ТекущийЭлементВложенныхДанных,КоличествоЭлементовВложенныхДанных", Истина, Колонка.ЦветФонаПоля, Колонка.ЦветТекстаПоля, Ложь, Неопределено, Неопределено, Неопределено, Неопределено));
			
			
			// ---- Вложенные ячейки.
			Если Колонка.ОтображатьВложенныеДанные Тогда
				
				КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная = Колонка.КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная;
				ЛевоВложенныхЭлементовРеальная = Колонка.ЛевоВложенныхЭлементовРеальная;
				ШиринаВложенныхЭлементовРеальная = Колонка.ШиринаВложенныхЭлементовРеальная;
				
				Для ИндексСтрокиСтраницыВПределахСтрокиДанных = 0 По ВысотаСтрокиДанныхВСтрокахСтраницы - 1 Цикл
					
					// ------ Смена строки вложенных ячеек.
					ЭлементВложенныхДанныхСлева = ЭлементГруппКолонок;
					
					ЭталонВложенныхДанныхСверху = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Эталон", ПройденоСтрокСтраницы + ИндексСтрокиСтраницыВПределахСтрокиДанных));
					
					
					// ------ Привязка (I).
					ПривязкаВложенныхДанныхВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ЭталонВложенныхДанныхСверху, ГраницаЭлементаУправления.Верх);
					ПривязкаВложенныхДанныхНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, ЭталонВложенныхДанныхСверху, ГраницаЭлементаУправления.Низ);
					
					
					// ------ Высота.
					Верх = ЭталонВложенныхДанныхСверху.Верх - мЭтотОбъект.ВыравниваниеОтступСверху;
					Высота = ЭталонВложенныхДанныхСверху.Высота;
				
					Для ИндексВложенногоЭлементаВПределахСтрокиСтраницы = 0 По КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная - 1 Цикл
						
						
						// ------ Привязка (II).
						Если (ЭлементВложенныхДанныхСлева = ЭлементГруппКолонок) Тогда
							ПривязкаВложенныхДанныхЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементВложенныхДанныхСлева, ГраницаЭлементаУправления.Лево);
							ПривязкаВложенныхДанныхПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементВложенныхДанныхСлева, ГраницаЭлементаУправления.Лево, ЭлементГруппКолонок, ГраницаЭлементаУправления.Право);
						Иначе
							ПривязкаВложенныхДанныхЛево = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Лево, ЭлементВложенныхДанныхСлева, ГраницаЭлементаУправления.Право);
							ПривязкаВложенныхДанныхПраво = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Право, ЭлементВложенныхДанныхСлева, ГраницаЭлементаУправления.Право, ЭлементГруппКолонок, ГраницаЭлементаУправления.Право);
						КонецЕсли;
						
						
						// ------ Ячейка.
						ШифрЯчейки = ЗашифроватьИмяЭлементФормы("Ячейка", ПройденоСтрокСтраницы + ИндексСтрокиСтраницыВПределахСтрокиДанных, Колонка.Индекс, ИндексВложенногоЭлементаВПределахСтрокиСтраницы);
						
						ЭлементВложенныхДанныхСлева = ДобавитьЭлементФормы(мЭлементыФормыСетки, ШифрЯчейки, Колонка.Доступность, ,
																		   Ложь, ЛевоВложенныхЭлементовРеальная[ИндексВложенногоЭлементаВПределахСтрокиСтраницы], Верх, ШиринаВложенныхЭлементовРеальная[ИндексВложенногоЭлементаВПределахСтрокиСтраницы], Высота,
																		   ПривязкаВложенныхДанныхЛево, ПривязкаВложенныхДанныхПраво, ПривязкаВложенныхДанныхВерх, ПривязкаВложенныхДанныхНиз);

												
						мЯчейки.Вставить(ШифрЯчейки, Новый Структура("Стандарт,ЦветФонаПоля,ЦветТекстаПоля,ГиперСсылка,ТекущийРазделДанных,ТекущаяСтрока,ТекущаяКолонка,ТекущийЭлементВложенныхДанных,КоличествоЭлементовВложенныхДанных", Истина, Колонка.ЦветФонаПоля, Колонка.ЦветТекстаПоля, Ложь, Неопределено, Неопределено, Неопределено, Неопределено, 0));
						
					КонецЦикла;
														
				КонецЦикла;
				
			КонецЕсли;
			
			
		КонецЦикла;
											
		// -- Корректировака оставшейся высоты.
		ПройденоСтрокДанных = ПройденоСтрокДанных + 1; ПройденоСтрокСтраницы = ПройденоСтрокСтраницы + ВысотаСтрокиДанныхВСтрокахСтраницы; ОсталосьСтрокСтраницы = ОсталосьСтрокСтраницы - ВысотаСтрокиДанныхВСтрокахСтраницы;

	КонецЦикла;
	
КонецПроцедуры

Процедура ОтобразитьСтроки()

	// Корректировка положения строк.
	
	// -- Определение необходимости отображения строк.
	Если Не мЭтотОбъект.ВидимостьСтрокРеальная Тогда
		Возврат;
	КонецЕсли;
	
	// -- Режим динамических строк.
	ИспользуютсяДинамическиеСтроки = (Не мСтроки = Неопределено);
		
	// -- Оформление строки.
	Если мРежимИзмененияВыделения Тогда
		// -- Список активных элементов.
		ДополнительныйСписок = Неопределено;
	Иначе
		ПараметрыОформление = Новый Структура;
		ПараметрыОформление.Вставить("Колонки", мКолонки);
		ПараметрыОформление.Вставить("ЦветТекстаПоля", ЦветТекстаПоля);
		ПараметрыОформление.Вставить("ЦветФонаПоля", ЦветФонаПоля);
		ПараметрыОформление.Вставить("Шрифт", Шрифт);
		
		// -- Список активных элементов.
		ДополнительныйСписок = Новый СписокЗначений;
	КонецЕсли;
	СтандартныйЦветФонаПоля = мЭтотОбъект.ЦветФонаПоля; СтандартныйЦветФонаЧередованияСтрок = мЭтотОбъект.ЦветФонаЧередованияСтрок;
	СтандартныйЦветФонаШапки = мЭтотОбъект.ЦветФонаШапки; СтандартныйЦветТекстаШапки = мЭтотОбъект.ЦветТекстаШапки;
	СтандартныйЦветФонаВыделения = мЭтотОбъект.ЦветФонаВыделения; СтандартныйЦветТекстаВыделения = мЭтотОбъект.ЦветТекстаВыделения;

	// -- Строки.
	ПройденоСтрокДанных = 0; ПройденоСтрокСтраницы = 0; ОсталосьСтрокСтраницы = мЭтотОбъект.СтрокНаСтраницеРеальная; ВысотаСтрокиДанныхВСтрокахСтраницы = 0;
	СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная = мЭтотОбъект.СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная;
	
	ИндексРазделаДанных = мИндексПервогоРазделаДанных;
	Для Каждого РазделДанных Из мДинамическиеДанные Цикл
		ПредставлениеРазделаДанных = Строка(ИндексРазделаДанных);
		
		// -- Определение начального индекса и смещения строки.
		Если Булево(мСтраницы.Количество()) И (ИндексРазделаДанных = мИндексВторогоРазделаДанных) Тогда
			ПредставлениеСтроки = мСтраницы.Получить(мТекущаяСтраница).Значение;
		Иначе
			ПредставлениеСтроки = 0;
		КонецЕсли;
		ИндексСтроки = Число(ПредставлениеСтроки); 
		ПозицияРазделителя = Найти(ПредставлениеСтроки, ".");
		Если Булево(ПозицияРазделителя) Тогда
			ИндексСмещенияСтроки = Число(Сред(ПредставлениеСтроки, ПозицияРазделителя + 1));
		Иначе
			ИндексСмещенияСтроки = 0;
		КонецЕсли;
		
		КоличествоСтрокДанных = РазделДанных.Количество();
		Для ИндексСтроки = Цел(ИндексСтроки) По КоличествоСтрокДанных - 1 Цикл
			// -- Пропуск фиксированных строк.
			Если (ИндексРазделаДанных = мИндексВторогоРазделаДанных) И (ИндексСтроки < мДинамическиеФиксированные) Тогда
				Продолжить;
			КонецЕсли;
				
			// -- Корректировака оставшейся высоты.
			ПройденоСтрокСтраницы = ПройденоСтрокСтраницы + ВысотаСтрокиДанныхВСтрокахСтраницы; ОсталосьСтрокСтраницы = ОсталосьСтрокСтраницы - ВысотаСтрокиДанныхВСтрокахСтраницы;

			// -- Отсечение непомещаемыхся строк.
			Если Не Булево(ОсталосьСтрокСтраницы) Тогда
				Прервать;
			КонецЕсли;
			
			ДанныеСтроки = РазделДанных.Получить(ИндексСтроки);
			
			// -- Определение высоты строки в строках страницы и стандартизации.
			Если ИспользуютсяДинамическиеСтроки Тогда
				ВысотаСтрокиДанныхВСтрокахСтраницы = мСтроки[ПредставлениеРазделаДанных + "x" + ИндексСтроки];
				Если (ВысотаСтрокиДанныхВСтрокахСтраницы = Неопределено) Тогда
					СтандартСтроки = Истина;
				Иначе
					ВысотаСтрокиДанныхВСтрокахСтраницы = ВысотаСтрокиДанныхВСтрокахСтраницы - ИндексСмещенияСтроки;
					СтандартСтроки = (ВысотаСтрокиДанныхВСтрокахСтраницы = СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная);
				КонецЕсли;
			Иначе
				ВысотаСтрокиДанныхВСтрокахСтраницы = СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная; 
				СтандартСтроки = Истина;
			КонецЕсли;
			ВысотаСтрокиДанныхВСтрокахСтраницы = Мин(ВысотаСтрокиДанныхВСтрокахСтраницы, ОсталосьСтрокСтраницы);
			ВысотаСтрокиДанныхВСтрокахДанных = Цел(ВысотаСтрокиДанныхВСтрокахСтраницы / СтандартнаяВысотаСтрокиВСтрокахСтраницыРеальная);
			
			// -- Режим выделения.
			Если мРежимИзмененияВыделения Тогда
				
				ДанныеСтрокиЯчейки = мЯчейки[ЗашифроватьИмяЭлементФормы("Ячейка", ПройденоСтрокДанных, 0)].ТекущаяСтрока;
				
				Если (ИндексРазделаДанных = мИндексПервогоРазделаДанных) Или ((Не ДанныеСтрокиЯчейки = мЭтотОбъект.ТекущаяСтрока) И (Не ДанныеСтрокиЯчейки = мТекущаяСтрока)) Тогда
					// -- Новый номер динамической строки (I).
					ПройденоСтрокДанных = ПройденоСтрокДанных + ВысотаСтрокиДанныхВСтрокахДанных; ИндексСмещенияСтроки = 0;
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				ДанныеСтрокиЯчейки = ДанныеСтроки;
				
				// -- Оформление строки.
				ПараметрыОформление.Вставить("ДанныеСтроки", ДанныеСтроки);
				мОформлениеСтроки.Ячейки(ПараметрыОформление);
				// ---- Событие.
				Если Не ПустаяСтрока(ПриВыводеСтроки) Тогда
					Попытка Выполнить("мЭтотОбъект.Форма." + ПриВыводеСтроки + "(ЭтотОбъект, мОформлениеСтроки, ДанныеСтроки);"); Исключение КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			
			// -- Колонки.
			Для Каждого Колонка Из мКолонки Цикл
				Колонка = Колонка.Значение;
				
				// ---- Отсечение неотображаемых колонок.
				Если Не Колонка.ВидимостьРеальная Тогда
					Продолжить;
				КонецЕсли;
				
				// ---- Отсечение непомещаемыхся колонок.
				Если (Колонка.СтрокаГруппыКолонок >= ВысотаСтрокиДанныхВСтрокахСтраницы) Тогда
					Продолжить;
				КонецЕсли;
				
				// ---- Режим выделения.
				ДанныеКолонки = Колонка.Колонка; ИндексКолонки = Колонка.Индекс;
				Если мРежимИзмененияВыделения И (мЭтотОбъект.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Ячейка) И (Не ДанныеКолонки = мЭтотОбъект.ТекущаяКолонка) И (Не ДанныеКолонки = мТекущаяКолонка) Тогда
					Продолжить;
				КонецЕсли;
				
				// ---- Определение стандартизации.
				Если (Колонка.СтрокаГруппыКолонок = Колонка.ГруппаКолонок.КоличествоСтрок - 1) Тогда
					СтандартКолонки = СтандартСтроки;
				Иначе
					СтандартКолонки = Истина;
				КонецЕсли;
				
				
				// ---- Ячейка.
				ШифрЯчейки = ЗашифроватьИмяЭлементФормы("Ячейка", ПройденоСтрокДанных, Колонка.Индекс);
				Ячейка = мЯчейки[ШифрЯчейки];
				
				Если мРежимИзмененияВыделения Тогда
					
					// ------ Оформление ячейки.
					Если (ДанныеСтрокиЯчейки = мТекущаяСтрока) И (((ДанныеКолонки = мТекущаяКолонка) И (Не Колонка.ОтображатьВложенныеДанные)) Или (мЭтотОбъект.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка)) Тогда
						ЦветФонаПоляЯчейки = СтандартныйЦветФонаВыделения; ЦветТекстаПоляЯчейки = СтандартныйЦветТекстаВыделения;
					Иначе
						ЦветФонаПоляЯчейки = Ячейка.ЦветФонаПоля; ЦветТекстаПоляЯчейки = Ячейка.ЦветТекстаПоля;
					КонецЕсли;
					ЭлементФормы = ПолучитьЭлементФормы(мЭлементыФормыСетки, ШифрЯчейки);
					Если (ТипЗнч(ЭлементФормы) = мТипКнопки) Тогда
						ЭлементФормы.ЦветФонаКнопки = ЦветФонаПоляЯчейки; ЭлементФормы.ЦветТекстаКнопки = ЦветТекстаПоляЯчейки;
					Иначе
						ЭлементФормы.ЦветФона = ЦветФонаПоляЯчейки; ЭлементФормы.ЦветТекста = ЦветТекстаПоляЯчейки;
					КонецЕсли;
					
				Иначе
						
					// ------ Оформление ячейки.
					ОформлениеЯчейки = мОформлениеСтроки.Ячейки(Колонка.Имя);
					Если (ИндексРазделаДанных = мИндексПервогоРазделаДанных) Тогда
						ЦветФонаПоляЯчейки = СтандартныйЦветФонаШапки; ЦветТекстаПоляЯчейки = СтандартныйЦветТекстаШапки;
					Иначе
						Если мЭтотОбъект.ЧередованиеЦветовСтрок И (СтандартныйЦветФонаПоля = ОформлениеЯчейки.ЦветФона) Тогда
							Если Булево(ИндексСтроки % 2) Тогда
								ЦветФонаПоляЯчейки = СтандартныйЦветФонаЧередованияСтрок;
							Иначе
								ЦветФонаПоляЯчейки = СтандартныйЦветФонаПоля;
							КонецЕсли;
						Иначе
							ЦветФонаПоляЯчейки = ОформлениеЯчейки.ЦветФона;
						КонецЕсли;
						ЦветТекстаПоляЯчейки = ОформлениеЯчейки.ЦветТекста;
					КонецЕсли;
					Если (ДанныеСтрокиЯчейки = мТекущаяСтрока) И (((ДанныеКолонки = мТекущаяКолонка) И (Не Колонка.ОтображатьВложенныеДанные))  Или (мЭтотОбъект.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка)) Тогда
						ЦветФонаПоляЯчейкиОтображения = СтандартныйЦветФонаВыделения; ЦветТекстаПоляЯчейкиОтображения = СтандартныйЦветТекстаВыделения;
					Иначе
						ЦветФонаПоляЯчейкиОтображения = ЦветФонаПоляЯчейки; ЦветТекстаПоляЯчейкиОтображения = ЦветТекстаПоляЯчейки;
					КонецЕсли;
					ГоризонтальноеПоложениеТекста = ОформлениеЯчейки.Выравнивание;
					Если (ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Авто) Или (ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.ПоШирине) Тогда
						ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Лево;
					КонецЕсли;
					// -------- Текст и картинка.
					КоличествоЭлементовВложенныхДанных = мОформлениеСтроки.Ячейки(Колонка.Имя).Ячейки(Неопределено);
					Если Колонка.ОтображатьВложенныеДанные И Булево(КоличествоЭлементовВложенныхДанных) Тогда
						ТекстПоляЯчейкиОтображения = "";
						КартинкаПоляЯчейкиОтображения = мСлужебнаяКартинка;
					Иначе
						Если ОформлениеЯчейки.ОтображатьТекст Тогда
							ТекстПоляЯчейкиОтображения = ОформлениеЯчейки.Текст;
						Иначе
							ТекстПоляЯчейкиОтображения = "";
						КонецЕсли;
						Если Колонка.ОтображатьИерархию И (мТипДанных = мТипДереваЗначений) Тогда
							Попытка
								Иерархия = Число(Булево(ДанныеСтрокиЯчейки.Строки.Количество()) Или Булево(ДанныеСтрокиЯчейки.ЭтоГруппа)) + Число(ИндексРазделаДанных = мИндексПервогоРазделаДанных);
							Исключение
								Иерархия = Число(Булево(ДанныеСтрокиЯчейки.Строки.Количество())) + Число(ИндексРазделаДанных = мИндексПервогоРазделаДанных);
							КонецПопытки;
						Иначе
							Иерархия = мИерархияЭлеменит;
						КонецЕсли;
						КартинкаПоляЯчейкиОтображения = СоздатьКартинкуЭлементаФормы(Колонка.ОтображатьИерархию, Иерархия, ОформлениеЯчейки.ОтображатьФлажок, ОформлениеЯчейки.Флажок, ОформлениеЯчейки.ТолькоПросмотр, ОформлениеЯчейки.Картинка);
					КонецЕсли;
					
					
					ЭлементФормы = ИзменитьЭлементФормы(мЭлементыФормыСетки, ШифрЯчейки, ДополнительныйСписок,
														ТекстПоляЯчейкиОтображения, ЦветФонаПоляЯчейкиОтображения, ЦветТекстаПоляЯчейкиОтображения, ОформлениеЯчейки.Шрифт, ГоризонтальноеПоложениеТекста, ,
														, КартинкаПоляЯчейкиОтображения);
														
					// ------ Размеры ячейки.
					Если (Не СтандартКолонки) Или (Не Ячейка.Стандарт) Тогда
						ВерхнийЭталон = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Эталон", ПройденоСтрокСтраницы + Колонка.СтрокаГруппыКолонок));
						НижнийЭталон = ПолучитьЭлементФормы(мЭлементыФормыСетки, ЗашифроватьИмяЭлементФормы("Эталон", ПройденоСтрокСтраницы + ВысотаСтрокиДанныхВСтрокахСтраницы - 1));
						
						ПривязкаВерх = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Верх, ВерхнийЭталон, ГраницаЭлементаУправления.Верх);
						ПривязкаНиз = СоздатьПривязкуЭлементаФормы(ГраницаЭлементаУправления.Низ, НижнийЭталон, ГраницаЭлементаУправления.Низ);
						
						// ------ Высота.
						Если (ВерхнийЭталон = НижнийЭталон) Тогда
							Высота = ВерхнийЭталон.Высота;
						Иначе
							Высота = НижнийЭталон.Верх + НижнийЭталон.Высота - ВерхнийЭталон.Верх;
						КонецЕсли;
						
						ЭлементФормы.Высота = Высота;
					КонецЕсли;
					
					// ------ Состояние.
					Ячейка.Стандарт = СтандартКолонки;
					Ячейка.ЦветФонаПоля = ЦветФонаПоляЯчейки;
					Ячейка.ЦветТекстаПоля = ЦветТекстаПоляЯчейки;
					Ячейка.ГиперСсылка = ОформлениеЯчейки.ГиперСсылка;
					Ячейка.ТекущийРазделДанных = ИндексРазделаДанных;
					Ячейка.ТекущаяСтрока = ДанныеСтроки;
					Ячейка.ТекущаяКолонка = ДанныеКолонки;
					Ячейка.КоличествоЭлементовВложенныхДанных = КоличествоЭлементовВложенныхДанных;
				КонецЕсли;
				
				
				// ---- Вложенные ячейки.
				Если Колонка.ОтображатьВложенныеДанные И Булево(Ячейка.КоличествоЭлементовВложенныхДанных) Тогда
					КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная = Колонка.КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная;
					
					ИндексВложенногоЭлемента = ИндексСмещенияСтроки * КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная;
					КоличествоВложенныхЭлементов = Мин(мДинамическиеСтроки[ИндексРазделаДанных][ИндексСтроки][ИндексКолонки], Ячейка.КоличествоЭлементовВложенныхДанных);
					
					
					Для ИндексСтрокиСтраницыВПределахСтрокиДанных = 0 По ВысотаСтрокиДанныхВСтрокахСтраницы - 1 Цикл
						Для ИндексВложенногоЭлементаВПределахСтрокиСтраницы = 0 По КоличествоВложенныхЭлементовНаСтрокеСтраницыРеальная - 1 Цикл
							Если (Не ИндексВложенногоЭлемента <= КоличествоВложенныхЭлементов - 1) Тогда
								Прервать;
							КонецЕсли;
							
							
							// ------ Ячейка.
							ШифрЯчейки = ЗашифроватьИмяЭлементФормы("Ячейка", ПройденоСтрокСтраницы + ИндексСтрокиСтраницыВПределахСтрокиДанных, Колонка.Индекс, ИндексВложенногоЭлементаВПределахСтрокиСтраницы);
							Ячейка = мЯчейки[ШифрЯчейки];
							
							Если мРежимИзмененияВыделения Тогда
				
								// ------ Оформление ячейки.
								Если (ДанныеСтрокиЯчейки = мТекущаяСтрока) И (((ДанныеКолонки = мТекущаяКолонка) И (ИндексВложенногоЭлемента = мТекущийЭлементВложенныхДанных)) Или (мЭтотОбъект.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка)) Тогда
									ЦветФонаПоляЯчейки = СтандартныйЦветФонаВыделения; ЦветТекстаПоляЯчейки = СтандартныйЦветТекстаВыделения;
								Иначе
									ЦветФонаПоляЯчейки = Ячейка.ЦветФонаПоля; ЦветТекстаПоляЯчейки = Ячейка.ЦветТекстаПоля;
								КонецЕсли;
								ЭлементФормы = ПолучитьЭлементФормы(мЭлементыФормыСетки, ШифрЯчейки);
								Если (ТипЗнч(ЭлементФормы) = мТипКнопки) Тогда
									ЭлементФормы.ЦветФонаКнопки = ЦветФонаПоляЯчейки; ЭлементФормы.ЦветТекстаКнопки = ЦветТекстаПоляЯчейки;
								Иначе
									ЭлементФормы.ЦветФона = ЦветФонаПоляЯчейки; ЭлементФормы.ЦветТекста = ЦветТекстаПоляЯчейки;
								КонецЕсли;
								
							Иначе
									
								// ------ Оформление ячейки.
								ОформлениеЯчейки = мОформлениеСтроки.Ячейки(Колонка.Имя).Ячейки(ИндексВложенногоЭлемента);
								Если (ИндексРазделаДанных = мИндексПервогоРазделаДанных) Тогда
									ЦветФонаПоляЯчейки = СтандартныйЦветФонаШапки; ЦветТекстаПоляЯчейки = СтандартныйЦветТекстаШапки;
								Иначе
									Если мЭтотОбъект.ЧередованиеЦветовСтрок И (СтандартныйЦветФонаПоля = ОформлениеЯчейки.ЦветФона) Тогда
										Если (ИндексСтроки % 2 = 0) Тогда
											ЦветФонаПоляЯчейки = СтандартныйЦветФонаПоля;
										Иначе
											ЦветФонаПоляЯчейки = СтандартныйЦветФонаЧередованияСтрок;
										КонецЕсли;
									Иначе
										ЦветФонаПоляЯчейки = ОформлениеЯчейки.ЦветФона;
									КонецЕсли;
									ЦветТекстаПоляЯчейки = ОформлениеЯчейки.ЦветТекста;
								КонецЕсли;
								Если (ДанныеСтрокиЯчейки = мТекущаяСтрока) И (((ДанныеКолонки = мТекущаяКолонка) И (ИндексВложенногоЭлемента = мТекущийЭлементВложенныхДанных)) Или (мЭтотОбъект.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка)) Тогда
									ЦветФонаПоляЯчейкиОтображения = СтандартныйЦветФонаВыделения; ЦветТекстаПоляЯчейкиОтображения = СтандартныйЦветТекстаВыделения;
								Иначе
									ЦветФонаПоляЯчейкиОтображения = ЦветФонаПоляЯчейки; ЦветТекстаПоляЯчейкиОтображения = ЦветТекстаПоляЯчейки;
								КонецЕсли;
								ГоризонтальноеПоложениеТекста = ОформлениеЯчейки.Выравнивание;
								Если (ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Авто) Или (ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.ПоШирине) Тогда
									ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Лево;
								КонецЕсли;
								// -------- Текст и картинка.
								Если ОформлениеЯчейки.ОтображатьТекст Тогда
									ТекстПоляЯчейкиОтображения = ОформлениеЯчейки.Текст;
								Иначе
									ТекстПоляЯчейкиОтображения = "";
								КонецЕсли;
								КартинкаПоляЯчейкиОтображения = СоздатьКартинкуЭлементаФормы(,, ОформлениеЯчейки.ОтображатьФлажок, ОформлениеЯчейки.Флажок, ОформлениеЯчейки.ТолькоПросмотр, ОформлениеЯчейки.Картинка);
								
								
								ЭлементФормы = ИзменитьЭлементФормы(мЭлементыФормыСетки, ШифрЯчейки, ДополнительныйСписок,
																	ТекстПоляЯчейкиОтображения, ЦветФонаПоляЯчейкиОтображения, ЦветТекстаПоляЯчейкиОтображения, ОформлениеЯчейки.Шрифт, ГоризонтальноеПоложениеТекста, ,
																	, КартинкаПоляЯчейкиОтображения);

					
								// ------ Состояние.
								Ячейка.Стандарт = СтандартКолонки;
								Ячейка.ЦветФонаПоля = ЦветФонаПоляЯчейки;
								Ячейка.ЦветТекстаПоля = ЦветТекстаПоляЯчейки;
								Ячейка.ГиперСсылка = ОформлениеЯчейки.ГиперСсылка;
								Ячейка.ТекущийРазделДанных = ИндексРазделаДанных;
								Ячейка.ТекущаяСтрока = ДанныеСтроки;
								Ячейка.ТекущаяКолонка = ДанныеКолонки;
								Ячейка.ТекущийЭлементВложенныхДанных = ИндексВложенногоЭлемента;
							КонецЕсли;
							
																
							ИндексВложенногоЭлемента = ИндексВложенногоЭлемента + 1;																
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
				
			КонецЦикла;
			
			
			// -- Новый номер динамической строки (II).
			ПройденоСтрокДанных = ПройденоСтрокДанных + ВысотаСтрокиДанныхВСтрокахДанных; ИндексСмещенияСтроки = 0;
		КонецЦикла;
		
		ИндексРазделаДанных = ИндексРазделаДанных + 1;
	КонецЦикла;
	
	// -- Прячем неиспользуемые ячейки и отображаем используемые.
	Если Не мРежимИзмененияВыделения Тогда
		Для Каждого ЭлементСтруктуры Из мЭлементыФормыСетки Цикл
			ЭлементФормы = ЭлементСтруктуры.Значение;
			ЭлементФормы.Видимость = (Не ДополнительныйСписок.НайтиПоЗначению(ЭлементФормы) = Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Функция сохраняет параметры привязки элемента формы в стандартизированное соответствие.
//
// Параметры:
//	... Параметры привязки элемента формы.
//
// Возвращаемое значение:
//  Соответствие. Стандартизированное соответствие с параметрами привязки элемента формы, используется совместно с функцией "УстановитьПривязкуЭлементаФормы".
//
Функция СоздатьКартинкуЭлементаФормы(ОтображатьИерархию = Ложь, ТипИерархии = Неопределено, ОтображатьФлажок = Ложь, Флажок = Неопределено, ТолькоПросмотр = Ложь, Картинка = Неопределено)
	
	// Иерархия.
	Если ОтображатьИерархию И (мТипДанных = мТипДереваЗначений) Тогда
		Если (ТипИерархии = мИерархияРодитель) Тогда
			Возврат ЭтотОбъект.БиблиотекаКартинок.ИерархияРодитель;
		ИначеЕсли (ТипИерархии = мИерархияГруппа) Тогда
			Возврат ЭтотОбъект.БиблиотекаКартинок.ИерархияГруппа;
		Иначе
			Возврат ЭтотОбъект.БиблиотекаКартинок.ИерархияЭлеменит;
		КонецЕсли;
	КонецЕсли;
	
	// Флажок.
	Если ОтображатьФлажок Тогда
		Реквизит = "Пометка";
		Если (Флажок = 0) Или (Не Флажок) Тогда
			Реквизит = Реквизит + "Ложь"
		ИначеЕсли (Флажок = 1) Или Флажок Тогда
			Реквизит = Реквизит + "Истина"
		Иначе
			Реквизит = Реквизит + "Неопределено"
		КонецЕсли;
		Если ТолькоПросмотр Тогда
			Реквизит = Реквизит + "Просмотр"
		КонецЕсли;
		Возврат ЭтотОбъект.БиблиотекаКартинок[Реквизит];
	КонецЕсли;
	
	// Картинка.
	Возврат Картинка;
	
КонецФункции


// Функция формирует полное имя элемента формы по данным определяющим логические пренадлежность и местоположение элемента формы.
//
// Параметры:
//	Имя - Строка. Логическая пренадлежность;
//	... - Число. Логическое местоположение.
//
// Возвращаемое значение:
//  Строка. Полное имя элемента формы.
//
Функция ЗашифроватьИмяЭлементФормы(Знач Имя, Строка = Неопределено, Колонка = Неопределено, ЭлементВложенногоСписка = Неопределено)
	
	// Формирование имени элемнта формы.
	Если (Не Строка = Неопределено) Тогда
		// -- Строка.
		Имя = Строка(Имя) + "_" + Строка;
		
		// -- Колонка.
		Если (Не Колонка = Неопределено) Тогда
			Имя = Имя + "x" + Колонка;
			
			// -- Элемент вложенного списка.
			Если (Не ЭлементВложенногоСписка = Неопределено) Тогда
				Имя = Имя + "x" + ЭлементВложенногоСписка;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

// Процедура востанавливает логические пренадлежность и местоположение элемента формы по полному имени элемента формы.
//
// Параметры:
//	ПолноеИмя - Строка. Полное имя элемента формы сформированное функцией "ЗашифроватьИмяЭлементФормы".
//
// Возвращаемое значение:
//  Имя - Строка. Логическая пренадлежность;
//	... - Число. Логическое местоположение.
//
Процедура РасшифроватьИмяЭлементаФормы(Знач ПолноеИмя, Имя, Строка = Неопределено, Колонка = Неопределено, ЭлементВложенногоСписка = Неопределено)
	
	// Расшифровака имени элемнта формы.
	// -- Имя.
	Позиция = Найти(ПолноеИмя, "_");
	Если (Позиция = 0) Тогда
		Имя = ПолноеИмя;
		Возврат;
	Иначе
		Имя = Лев(ПолноеИмя, Позиция - 1);
		ПолноеИмя = Сред(ПолноеИмя, Позиция + 1); 
	КонецЕсли;
	// -- Строка.
	Позиция = Найти(ПолноеИмя, "x");
	Если (Позиция = 0) Тогда
		Строка = Число(ПолноеИмя);
		Возврат;
	Иначе
		Строка = Число(Лев(ПолноеИмя, Позиция - 1));
		ПолноеИмя = Сред(ПолноеИмя, Позиция + 1); 
	КонецЕсли;
	// -- Колонка.
	Позиция = Найти(ПолноеИмя, "x");
	Если (Позиция = 0) Тогда
		Колонка = Число(ПолноеИмя);
		Возврат;
	Иначе
		Колонка = Число(Лев(ПолноеИмя, Позиция - 1));
		ПолноеИмя = Сред(ПолноеИмя, Позиция + 1); 
	КонецЕсли;
	// -- Элемент вложенного списка.
	ЭлементВложенногоСписка = Число(ПолноеИмя);
	
КонецПроцедуры


// Функция сохраняет параметры привязки элемента формы в стандартизированное соответствие.
//
// Параметры:
//	... Параметры привязки элемента формы.
//
// Возвращаемое значение:
//  Соответствие. Стандартизированное соответствие с параметрами привязки элемента формы, используется совместно с функцией "УстановитьПривязкуЭлементаФормы".
//
Функция СоздатьПривязкуЭлементаФормы(Граница, ПервыйЭлемент = Неопределено, ГраницаПервогоЭлемента = Неопределено, ВторойЭлемент = Неопределено, ГраницаВторогоЭлемента = Неопределено)
	
	// Создание привязки.
	Привязка = Новый Соответствие;
	Привязка.Вставить("Граница", Граница);
	Если (ТипЗнч(ПервыйЭлемент) = Тип("Соответствие")) Тогда
		// -- По шаблону.
		Привязка.Вставить("ПервыйЭлемент", ПервыйЭлемент.Получить("ПервыйЭлемент"));
		Привязка.Вставить("ГраницаПервогоЭлемента", ПервыйЭлемент.Получить("ГраницаПервогоЭлемента"));
		Привязка.Вставить("ВторойЭлемент", ПервыйЭлемент.Получить("ВторойЭлемент"));
		Привязка.Вставить("ГраницаВторогоЭлемента", ПервыйЭлемент.Получить("ГраницаВторогоЭлемента"));
	Иначе
		// -- По параметрам.
		Привязка.Вставить("ПервыйЭлемент", ПервыйЭлемент);
		Привязка.Вставить("ГраницаПервогоЭлемента", ГраницаПервогоЭлемента);
		Привязка.Вставить("ВторойЭлемент", ВторойЭлемент);
		Привязка.Вставить("ГраницаВторогоЭлемента", ГраницаВторогоЭлемента);
	КонецЕсли;
	
	Возврат Привязка;
	
КонецФункции

// Процедура устанавливает требуемую привязку элемента формы.
//
// Параметры:
//	ЭлементФормы - ЭлементФормы. Элемента формы привязку которого требуется установить;
//	Привязка - Соответствие. Соответствие созданное функцией "СоздатьПривязкуЭлементаФормы".
//
Процедура УстановитьПривязкуЭлементаФормы(ЭлементФормы, Привязка)
	
	Если (Привязка = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Установка привязки.
	ЭлементФормы.УстановитьПривязку(Привязка.Получить("Граница"), Привязка.Получить("ПервыйЭлемент"), Привязка.Получить("ГраницаПервогоЭлемента"), Привязка.Получить("ВторойЭлемент"), Привязка.Получить("ГраницаВторогоЭлемента"));
	
КонецПроцедуры


// Функция создает новый элемента формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая требуемый элемент;
//	Имя - Строка. Имя требуемого элемента формы;
//	Тип - Тип, Булево. Тип создаваемого элемента: Истина - кнопка, Ложь - надпись или непосредственно тип;
//	ДополнительныйСписок - СпсисокЗначений. Список значений в который добавляется текущий элемент формы, используется совместно с функцией "УдалитьЭлементФормы";
//	... Параметры елемента формы.
//
// Возвращаемое значение:
//  Кнопка, Надпись, РамкаГруппы. Изменяемый элемент формы.
//
Функция ДобавитьЭлементФормы(Структура, Имя, Знач Тип = Истина, ДополнительныйСписок = Неопределено, 
							 Видимость = Истина, Лево, Верх, Ширина, Высота, 
							 ПривязкаЛево = Неопределено, ПривязкаПраво = Неопределено, ПривязкаВерх = Неопределено, ПривязкаНиз = Неопределено, 
							 Заголовок = "", ЦветФона = Неопределено, ЦветТекста = Неопределено, Шрифт = Неопределено, ГоризонтальноеПоложениеТекста  = Неопределено, ВертикальноеПоложениеТекста = Неопределено,
							 ПоложениеКартинки = Неопределено, Картинка = Неопределено, РазмерКартинкиЭлемента = Неопределено,
							 Рамка = Неопределено, ЦветРамки = Неопределено, ПрозрачныйФон = Ложь, Подсказка = "")
	
	Перем ЭлементФормы;
	
	// Нормализация.
	Если (ТипЗнч(Тип) = мТипБулева) Тогда
		Если Тип Тогда
			Тип = Тип("Кнопка");
		Иначе
			Тип = Тип("Надпись");
		КонецЕсли;
	КонецЕсли;
	Кнопка = (Тип = мТипКнопки); Надпись = (Тип = мТипНадписи); РамкаГруппы = (Тип = мТипРамкиГруппы);
	
	Если (ЦветФона = Неопределено) Тогда
		ЦветФона = мЭтотОбъект.ЦветФонаПоУмолчанию;
	КонецЕсли;
	Если (ЦветТекста = Неопределено) Тогда
		ЦветТекста = мЭтотОбъект.ЦветТекстаПоУмолчанию;
	КонецЕсли;
	Если (Шрифт = Неопределено) Тогда
		Шрифт = мЭтотОбъект.Шрифт;
	КонецЕсли;
	Если (Кнопка Или Надпись) Тогда
		Если (Картинка = Неопределено) Тогда
			Картинка = мСлужебнаяКартинка;
		КонецЕсли;
		Если (РазмерКартинкиЭлемента = Неопределено) Тогда
			РазмерКартинкиЭлемента = РазмерКартинки.РеальныйРазмер;
		КонецЕсли;
		Если (ВертикальноеПоложениеТекста = Неопределено) Тогда
			ВертикальноеПоложениеТекста = ВертикальноеПоложение.Центр;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка Тогда
		Если (ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Центр;
		КонецЕсли;
		Если (ПоложениеКартинки = Неопределено) Тогда
			ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево;
		КонецЕсли;
	КонецЕсли;
	Если Надпись Тогда
		Если (ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Авто;
		КонецЕсли;
		Если (ПоложениеКартинки = Неопределено) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
		ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
		ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Право) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Право;
		КонецЕсли;
	КонецЕсли;
	Если (Надпись Или РамкаГруппы) И (Рамка = Неопределено) Тогда
		Рамка = мСлужебнаяРамка;
	КонецЕсли;
	Если (ЦветРамки = Неопределено) Тогда
		ЦветРамки = мЭтотОбъект.ЦветРамки;
	КонецЕсли;

	
	// Поиск элемента.
	Структура.Свойство(Имя, ЭлементФормы);
	// -- Проверка соответсвия типов.
	Если (Не ЭлементФормы = Неопределено) И (Не Тип(ЭлементФормы) = Тип) Тогда
		Структура.Удалить(Имя);
		ЭлементФормы.Удалить();
		ЭлементФормы = Неопределено;
	КонецЕсли;
	// -- Создание нового элемента.
	Если (ЭлементФормы = Неопределено) Тогда
		ЭлементФормы = мЭтотОбъект.Форма.ЭлементыФормы.Добавить(Тип, мЭтотОбъект.ИмяЭлементаФормы + "_" + Имя, Видимость, мЭтотОбъект.ЭлементФормы);
		Структура.Вставить(Имя, ЭлементФормы);
	КонецЕсли;
	// -- Добавление в дополнительный список.
	Если (Не ДополнительныйСписок = Неопределено) Тогда
		ДополнительныйСписок.Добавить(ЭлементФормы);
	КонецЕсли;
	
	
	// Изменение параметров.
	ЭлементФормы.Лево = Лево + мЭтотОбъект.ВыравниваниеОтступСлева;
	ЭлементФормы.Верх = Верх + мЭтотОбъект.ВыравниваниеОтступСверху;
	ЭлементФормы.Ширина = Ширина;
	ЭлементФормы.Высота = Высота;
	ЭлементФормы.Заголовок = Заголовок;
	ЭлементФормы.Шрифт = Шрифт;
	Если (Кнопка Или Надпись) Тогда
		ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеТекста;
		ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложениеТекста;
		ЭлементФормы.Картинка = Картинка;
		ЭлементФормы.РазмерКартинки = РазмерКартинкиЭлемента;
	КонецЕсли;
	Если Кнопка Тогда
		ЭлементФормы.МногострочныйРежим = Истина;
		ЭлементФормы.ПоложениеКартинки = ПоложениеКартинки;
		ЭлементФормы.ЦветФонаКнопки = ЦветФона;
		ЭлементФормы.ЦветТекстаКнопки = ЦветТекста;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.Подсказка = Подсказка;
	КонецЕсли;
	Если Надпись Тогда
		ЭлементФормы.ПоложениеКартинкиНадписи = ПоложениеКартинки;
		ЭлементФормы.ЦветФона = ЦветФона;
		ЭлементФормы.ЦветТекста = ЦветТекста;
		ЭлементФормы.Рамка = Рамка;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
		ЭлементФормы.Подсказка = Подсказка;
	КонецЕсли;
	Если РамкаГруппы Тогда
		ЭлементФормы.ЦветТекста = ЦветТекста;
		ЭлементФормы.Рамка = Рамка;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
	КонецЕсли;
	УстановитьПривязкуЭлементаФормы(ЭлементФормы, ПривязкаЛево);
	УстановитьПривязкуЭлементаФормы(ЭлементФормы, ПривязкаПраво);
	УстановитьПривязкуЭлементаФормы(ЭлементФормы, ПривязкаВерх);
	УстановитьПривязкуЭлементаФормы(ЭлементФормы, ПривязкаНиз);
	
	// Установка связанного действия.
	Если Кнопка Тогда
		ЭлементФормы.УстановитьДействие("Нажатие", мЭтотОбъект.Нажатие);
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Функция изменяет настройки элемента формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая требуемый элемент;
//	Имя - Строка. Имя требуемого элемента формы;
//	ДополнительныйСписок - СпсисокЗначений. Список значений в который добавляется текущий элемент формы, используется совместно с функцией "УдалитьЭлементФормы";
//	... Параметры елемента формы.
//
// Возвращаемое значение:
//  Кнопка, Надпись, РамкаГруппы. Изменяемый элемент формы.
//
Функция ИзменитьЭлементФормы(Структура, Имя, ДополнительныйСписок = Неопределено,
							 Заголовок = "", ЦветФона = Неопределено, ЦветТекста = Неопределено, Шрифт = Неопределено, ГоризонтальноеПоложениеТекста  = Неопределено, ВертикальноеПоложениеТекста = Неопределено,
							 ПоложениеКартинки = Неопределено, Картинка = Неопределено, РазмерКартинкиЭлемента = Неопределено,
							 Рамка = Неопределено, ЦветРамки = Неопределено, ПрозрачныйФон = Ложь, Подсказка = "")
	
	Перем ЭлементФормы;
	
	// Поиск элемента.
	Структура.Свойство(Имя, ЭлементФормы);
	Если (ЭлементФормы = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	// -- Добавление в дополнительный список.
	Если (Не ДополнительныйСписок = Неопределено) Тогда
		ДополнительныйСписок.Добавить(ЭлементФормы);
	КонецЕсли;
	
	
	// Нормализация.
	Тип = ТипЗнч(ЭлементФормы);
	Кнопка = (Тип = мТипКнопки); Надпись = (Тип = мТипНадписи); РамкаГруппы = (Тип = мТипРамкиГруппы);
	
	Если (ЦветФона = Неопределено) Тогда
		ЦветФона = мЭтотОбъект.ЦветФонаПоУмолчанию;
	КонецЕсли;
	Если (ЦветТекста = Неопределено) Тогда
		ЦветТекста = мЭтотОбъект.ЦветТекстаПоУмолчанию;
	КонецЕсли;
	Если (Шрифт = Неопределено) Тогда
		Шрифт = мЭтотОбъект.Шрифт;
	КонецЕсли;
	Если (Кнопка Или Надпись) Тогда
		Если (Картинка = Неопределено) Тогда
			Картинка = мСлужебнаяКартинка;
		КонецЕсли;
		Если (РазмерКартинкиЭлемента = Неопределено) Тогда
			РазмерКартинкиЭлемента = РазмерКартинки.РеальныйРазмер;
		КонецЕсли;
		Если (ВертикальноеПоложениеТекста = Неопределено) Тогда
			ВертикальноеПоложениеТекста = ВертикальноеПоложение.Центр;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка Тогда
		Если (ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Центр;
		КонецЕсли;
		Если (ПоложениеКартинки = Неопределено) Тогда
			ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево;
		КонецЕсли;
	КонецЕсли;
	Если Надпись Тогда
		Если (ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Авто;
		КонецЕсли;
		Если (ПоложениеКартинки = Неопределено) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
		ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
		ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Право) Тогда
			ПоложениеКартинки = ПоложениеКартинкиНадписи.Право;
		КонецЕсли;
	КонецЕсли;
	Если (Надпись Или РамкаГруппы) И (Рамка = Неопределено) Тогда
		Рамка = мСлужебнаяРамка;
	КонецЕсли;
	Если (ЦветРамки = Неопределено) Тогда
		ЦветРамки = мЭтотОбъект.ЦветРамки;
	КонецЕсли;
	
	
	// Изменение параметров.
	ЭлементФормы.Заголовок = Заголовок;
	ЭлементФормы.Шрифт = Шрифт;
	Если (Кнопка Или Надпись) Тогда
		ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеТекста;
		ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложениеТекста;
		ЭлементФормы.Картинка = Картинка;
		ЭлементФормы.РазмерКартинки = РазмерКартинкиЭлемента;
	КонецЕсли;
	Если Кнопка Тогда
		ЭлементФормы.ПоложениеКартинки = ПоложениеКартинки;
		ЭлементФормы.ЦветФонаКнопки = ЦветФона;
		ЭлементФормы.ЦветТекстаКнопки = ЦветТекста;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.Подсказка = Подсказка;
	КонецЕсли;
	Если Надпись Тогда
		ЭлементФормы.ПоложениеКартинкиНадписи = ПоложениеКартинки;
		ЭлементФормы.ЦветФона = ЦветФона;
		ЭлементФормы.ЦветТекста = ЦветТекста;
		ЭлементФормы.Рамка = Рамка;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
		ЭлементФормы.Подсказка = Подсказка;
	КонецЕсли;
	Если РамкаГруппы Тогда
		ЭлементФормы.ЦветТекста = ЦветТекста;
		ЭлементФормы.Рамка = Рамка;
		ЭлементФормы.ЦветРамки = ЦветРамки;
		ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Функция изменяет только указанные настройки элемента формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая требуемый элемент;
//	Имя - Строка. Имя требуемого элемента формы;
//	ДополнительныйСписок - СпсисокЗначений. Список значений в который добавляется текущий элемент формы, используется совместно с функцией "УдалитьЭлементФормы";
//	... Параметры елемента формы.
//
// Возвращаемое значение:
//  Кнопка, Надпись, РамкаГруппы. Изменяемый элемент формы.
//
Функция ОбновитьЭлементФормы(Структура, Имя, ДополнительныйСписок = Неопределено,
							 Заголовок = Неопределено, ЦветФона = Неопределено, ЦветТекста = Неопределено, Шрифт = Неопределено, ГоризонтальноеПоложениеТекста  = Неопределено, ВертикальноеПоложениеТекста = Неопределено,
							 ПоложениеКартинки = Неопределено, Картинка = Неопределено, РазмерКартинкиЭлемента = Неопределено,
							 Рамка = Неопределено, ЦветРамки = Неопределено, ПрозрачныйФон = Неопределено, Подсказка = Неопределено)
	
	Перем ЭлементФормы;
	
	// Поиск элемента.
	Структура.Свойство(Имя, ЭлементФормы);
	Если (ЭлементФормы = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	// -- Добавление в дополнительный список.
	Если (Не ДополнительныйСписок = Неопределено) Тогда
		ДополнительныйСписок.Добавить(ЭлементФормы);
	КонецЕсли;
	
	
	// Нормализация.
	Тип = ТипЗнч(ЭлементФормы);
	Кнопка = (Тип = мТипКнопки); Надпись = (Тип = мТипНадписи); РамкаГруппы = (Тип = мТипРамкиГруппы);
	
	Если Надпись Тогда
		Если (Не ПоложениеКартинки = Неопределено) Тогда
			Если (ПоложениеКартинки = ПоложениеКартинкиКнопки.Лево) Тогда
				ПоложениеКартинки = ПоложениеКартинкиНадписи.Лево;
			ИначеЕсли (ПоложениеКартинки = ПоложениеКартинкиКнопки.Право) Тогда
				ПоложениеКартинки = ПоложениеКартинкиНадписи.Право;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// Изменение параметров.
	Если (Не Заголовок = Неопределено) Тогда
		ЭлементФормы.Заголовок = Заголовок;
	КонецЕсли;
	Если (Не Шрифт = Неопределено) Тогда
		ЭлементФормы.Шрифт = Шрифт;
	КонецЕсли;
	Если (Кнопка Или Надпись) Тогда
		Если (Не ГоризонтальноеПоложениеТекста = Неопределено) Тогда
			ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеТекста;
		КонецЕсли;
		Если (Не ВертикальноеПоложениеТекста = Неопределено) Тогда
			ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложениеТекста;
		КонецЕсли;
		Если (Не Картинка = Неопределено) Тогда
			ЭлементФормы.Картинка = Картинка;
		КонецЕсли;
		Если (Не РазмерКартинкиЭлемента = Неопределено) Тогда
			ЭлементФормы.РазмерКартинки = РазмерКартинкиЭлемента;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка Тогда
		Если (Не ПоложениеКартинки = Неопределено) Тогда
			ЭлементФормы.ПоложениеКартинки = ПоложениеКартинки;
		КонецЕсли;
		Если (Не ЦветФона = Неопределено) Тогда
			ЭлементФормы.ЦветТекстаКнопки = ЦветФона;
		КонецЕсли;
		Если (Не ЦветТекста = Неопределено) Тогда
			ЭлементФормы.ЦветТекстаКнопки = ЦветТекста;
		КонецЕсли;
		Если (Не ЦветРамки = Неопределено) Тогда
			ЭлементФормы.ЦветРамки = ЦветРамки;
		КонецЕсли;
		Если (Не Подсказка = Неопределено) Тогда
			ЭлементФормы.Подсказка = Подсказка;
		КонецЕсли;
	КонецЕсли;
	Если Надпись Тогда
		Если (Не ПоложениеКартинки = Неопределено) Тогда
			ЭлементФормы.ПоложениеКартинки = ПоложениеКартинки;
		КонецЕсли;
		Если (Не ЦветФона = Неопределено) Тогда
			ЭлементФормы.ЦветФона = ЦветФона;
		КонецЕсли;
		Если (Не ЦветТекста = Неопределено) Тогда
			ЭлементФормы.ЦветТекста = ЦветТекста;
		КонецЕсли;
		Если (Не Рамка = Неопределено) Тогда
			ЭлементФормы.Рамка = Рамка;
		КонецЕсли;
		Если (Не ЦветРамки = Неопределено) Тогда
			ЭлементФормы.ЦветРамки = ЦветРамки;
		КонецЕсли;
		Если (Не ПрозрачныйФон = Неопределено) Тогда
			ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
		КонецЕсли;
		Если (Не Подсказка = Неопределено) Тогда
			ЭлементФормы.Подсказка = Подсказка;
		КонецЕсли;
	КонецЕсли;
	Если РамкаГруппы Тогда
		Если (Не ЦветТекста = Неопределено) Тогда
			ЭлементФормы.ЦветТекста = ЦветТекста;
		КонецЕсли;
		Если (Не Рамка = Неопределено) Тогда
			ЭлементФормы.Рамка = Рамка;
		КонецЕсли;
		Если (Не ЦветРамки = Неопределено) Тогда
			ЭлементФормы.ЦветРамки = ЦветРамки;
		КонецЕсли;
		Если (Не ПрозрачныйФон = Неопределено) Тогда
			ЭлементФормы.ПрозрачныйФон = ПрозрачныйФон;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Функция возвращает элемент формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая требуемый элемент;
//	Имя - Строка. Имя требуемого элемента формы;
//	ДополнительныйСписок - СпсисокЗначений. Список значений в который добавляется текущий элемент формы, используется совместно с функцией "УдалитьЭлементФормы".
//
// Возвращаемое значение:
//  Кнопка, Надпись. Требуемый элемент формы.
//
Функция ПолучитьЭлементФормы(Структура, Имя, ДополнительныйСписок = Неопределено)
	
	Перем ЭлементФормы;
	
	// Поиск элемента.
	Структура.Свойство(Имя, ЭлементФормы);
	// -- Добавление в дополнительный список.
	Если (Не ЭлементФормы = Неопределено) И (Не ДополнительныйСписок = Неопределено) Тогда
		ДополнительныйСписок.Добавить(ЭлементФормы);
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Процедура удаляет элементы формы.
//
// Параметры:
//	Структура - Структура. Структура содержащая удаляемый элемент;
//	Имя - Строка. Имя удаляемого элемента формы;
//		- СписокЗначений. Удаляются все элементы формы не вошедшие в список;
//		- Неопределено. Удаляются все элементы формы принадлежащие данной структуре.
//
Процедура УдалитьЭлементФормы(Структура, Имя = Неопределено)
	
	Перем ЭлементФормы;
	
	Если (Имя = Неопределено) Тогда
		
		// Удаление всех элементов не вошедших в список.
		Для Каждого ЭлементСтруктуры Из Структура Цикл
			мЭтотОбъект.Форма.ЭлементыФормы.Удалить(ЭлементСтруктуры.Значение);
		КонецЦикла;
		Структура.Очистить();
		Возврат;
		
	ИначеЕсли (ТипЗнч(Имя) = Тип("СписокЗначений")) Тогда
		
		// Удаление всех элементов не вошедших в список.
		Для Каждого ЭлементСтруктуры Из Структура Цикл
			Если (Имя.НайтиПоЗначению(ЭлементСтруктуры.Значение) = Неопределено) Тогда
				Структура.Удалить(ЭлементСтруктуры.Ключ);
				мЭтотОбъект.Форма.ЭлементыФормы.Удалить(ЭлементСтруктуры.Значение);
			КонецЕсли;
		КонецЦикла;
		Возврат;
		
	ИначеЕсли (ТипЗнч(Имя) = Тип("Строка")) Тогда
		
		// Нормализация.
		Структура.Свойство(Имя, ЭлементФормы);
		Если (ЭлементФормы = Неопределено) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		ЭлементФормы = Имя;
	КонецЕсли;
	
	// Удаление из списка.
	Структура.Удалить(Имя);
	
	// Удаление с формы.
	мЭтотОбъект.Форма.ЭлементыФормы.Удалить(ЭлементФормы);
	
КонецПроцедуры


// Инициализация переменных.
// -- Данные.
мДанные = Неопределено;
мТипДанных = Новый ОписаниеТипов("СписокЗначений,ТаблицаЗначений,ДеревоЗначений");
мПоддерживаемыеТипыДанных = мТипДанных;
мПоддерживаемыеТипыВложенныхДанных = Новый ОписаниеТипов("Массив,Структура,Соответствие,СписокЗначений,ФиксированныйМассив");

// -- Индексы разделов данных.
мИндексПервогоРазделаДанных = 0;
мИндексВторогоРазделаДанных = 1;

// -- Тип строки.
мИерархияЭлеменит = 0;
мИерархияГруппа = 1;
мИерархияРодитель = 2;
	
// -- Списки элементов формы.
мЭлементыФормыПолосыПрокрутки = Новый Структура;
мЭлементыФормыГруппКолонок = Новый Структура;
мЭлементыФормыШапки = Новый Структура;
мЭлементыФормыПодвала = Новый Структура;
мЭлементыФормыСетки = Новый Структура;

// -- Спецрежимы.
мРежимПрограммногоОбновления = Ложь;
мРежимИзмененияСтраницы = Ложь;
мРежимОбновленияСтрок = Ложь;
мРежимИзмененияВыделения = Ложь;

// -- Флаги изменения состояний.
мИзмененРазмерФормы = Ложь;
мИзмененыПараметрыПолосыПрокрутки = Ложь;
мИзмененыПараметрыКолонок = Ложь;
мИзмененыПараметрыДанных = Ложь;

// -- Типы данных.
мСлужебнаяКартинка = Новый Картинка;
мСлужебнаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);

мТипСтроки = Тип("Строка");
мТипЧисла = Тип("Число");
мТипДаты = Тип("Дата");
мТипБулева = Тип("Булево");
мТипСпискаЗначений = Тип("СписокЗначений");
//Костенюк Александр-Старт 30.05.2012
мТипМассив = Тип("Массив");
//Костенюк Александр-Финиш 30.05.2012
мТипТаблицыЗначений = Тип("ТаблицаЗначений");
мТипДереваЗначений = Тип("ДеревоЗначений");
мТипОписанияТипов = Тип("ОписаниеТипов");
мТипФормы = Тип("Форма");
мТипПанель = Тип("Панель");
мТипСтраницы = Тип("СтраницаПанели");
мТипКнопки = Тип("Кнопка");
мТипНадписи = Тип("Надпись");
мТипРамкиГруппы = Тип("РамкаГруппы");
мТипДействия = Тип("Действие");
мТипКартинки = Тип("Картинка");
мТипРамки = Тип("Рамка");
мТипИспользованияПолосыПрокрутки = Тип("ИспользованиеПолосыПрокрутки");
мТипНачальногоОтображенияСписка = Тип("НачальноеОтображениеСписка");
мТипРежимаВыделенияСтрокиТабличногоПоля = Тип("РежимВыделенияСтрокиТабличногоПоля");
мТипИзмененияРазмераКолонки = Тип("ИзменениеРазмераКолонки");
мТипПоложенияКолонки = Тип("ПоложениеКолонки");


// Инициализация значений по умолчанию.
Доступность = Истина;
Рамка = мСлужебнаяРамка;
ЦветКнопокПолосыПрокрутки = ЦветаСтиля.ЦветФонаКнопки;
ЦветПолосыПрокрутки = ЦветаСтиля.ЦветФонаПоля;
ЦветРамки = ЦветаСтиля.ЦветРамки;
ЦветТекстаВыделения = ЦветаСтиля.ЦветТекстаВыделенияПоля;
ЦветТекстаКнопкиПолосыПрокрутки = ЦветаСтиля.ЦветТекстаФормы;
ЦветТекстаПодвала = ЦветаСтиля.ЦветТекстаФормы;
ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаФормы;
ЦветТекстаШапки = ЦветаСтиля.ЦветТекстаФормы;
ЦветФонаВыделения = ЦветаСтиля.ЦветФонаВыделенияПоля;
ЦветФонаПодвала = ЦветаСтиля.ЦветФонаКнопки;
ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
ЦветФонаЧередованияСтрок = ЦветаСтиля.АльтернативныйЦветФонаПоля;
ЦветФонаШапки = ЦветаСтиля.ЦветФонаКнопки;
Шапка = Истина;
Шрифт = ШрифтыСтиля.ШрифтТекста;
ШрифтПодвала = ШрифтыСтиля.ШрифтТекста;
ШрифтПолосыПрокрутки = ШрифтыСтиля.ШрифтТекста;
ШрифтШапки = ШрифтыСтиля.ШрифтТекста;

//Костенюк Александр-Старт 30.05.2012
Отбор = Новый Структура;
//Костенюк Александр-Финиш 30.05.2012

// Нормализация.
Нормализация();

#КонецЕсли


// TODO:
// 1. Обновление цветов колонок даже когда их папраметры не изменяются.
// 2. Блокировка изменения размера колонки.
// 3. Проверка данных при нажатии.
// 4. Дно.