
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции // НайтиЭлементОтбораПоПредставлению()

Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

Процедура УстановитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	Иначе
		УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()


Процедура СкопироватьЭлементыОтбораВГруппуСписка(ГруппаЭлементов, КоллекцияЭлементовИсточник, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	ГруппаЭлементов.Элементы.Очистить();
	
	Для каждого ЭлементКоллекции Из КоллекцияЭлементовИсточник Цикл
		ЗаполнитьЗначенияСвойств(ГруппаЭлементов.Элементы.Добавить(ТипЗнч(ЭлементКоллекции)), ЭлементКоллекции);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Список.Отбор.Элементы, ИмяПоля);
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()


Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	УстановитьЭлементОтбораКоллекции(Список.Отбор.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()


// Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	Если Использование Тогда
		Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
	Иначе
		
		ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
		Если ЗначениеПараметра <> Неопределено Тогда
			Если ЗначениеПараметра.Значение <> Значение Тогда
				ЗначениеПараметра.Значение = Значение;
			КонецЕсли;
			Если ЗначениеПараметра.Использование <> Использование Тогда
				ЗначениеПараметра.Использование = Использование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрДинамическогоСписка()

// ПРОЦЕДУРЫ ОТБОРА ПО МЕНЕДЖЕРУ

Процедура ОтборПоМенеджеруПриСозданииНаСервере(Список, Менеджер, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Менеджер", Менеджер) Тогда
			УстановитьОтборВСпискеПоМенеджеру(Список, Менеджер);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоМенеджеруПриСозданииНаСервере()

Процедура ОтборПоМенеджеруПриЗагрузкеИзНастроек(Список, Менеджер, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Менеджер = Настройки.Получить("Менеджер");
		УстановитьОтборВСпискеПоМенеджеру(Список, Менеджер);
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Менеджер") Тогда
			Менеджер = Настройки.Получить("Менеджер");
			УстановитьОтборВСпискеПоМенеджеру(Список, Менеджер);
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Менеджер");
	
КонецПроцедуры // ОтборПоМенеджеруПриЗагрузкеИзНастроек()

Процедура УстановитьОтборВСпискеПоМенеджеру(Список, Менеджер) Экспорт
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Менеджер", Менеджер, ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры // УстановитьОтборВСпискеПоМенеджеру()

// ПРОЦЕДУРЫ ОТБОРА ПО АКТУАЛЬНОСТИ

Процедура ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаАктуальности, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Актуальность", Актуальность) Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Просрочен", Актуальность = "Просроченные", ЗначениеЗаполнено(Актуальность));
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора.Свойство("ДатаАктуальности", ДатаАктуальности) Тогда
			Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
				Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", ДатаАктуальности);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоАктуальностиПриСозданииНаСервере()

Процедура ОтборПоАктуальностиПриЗагрузкеИзНастроек(Список, Актуальность, ДатаАктуальности, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Актуальность     = Настройки.Получить("Актуальность");
		ДатаАктуальности = Настройки.Получить("ДатаАктуальности");
		
		УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
		УстановитьОтборВСпискеПоДатеАктуальности(Список, ДатаАктуальности);
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Актуальность") Тогда
			Актуальность = Настройки.Получить("Актуальность");
			УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
		КонецЕсли;
		
		Если Не СтруктураБыстрогоОтбора.Свойство("ДатаАктуальности") Тогда
			ДатаАктуальности = Настройки.Получить("ДатаАктуальности");
			УстановитьОтборВСпискеПоДатеАктуальности(Список, ДатаАктуальности);
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Актуальность");
	Настройки.Удалить("ДатаАктуальности");
	
КонецПроцедуры // ОтборПоАктуальностиПриЗагрузкеИзНастроек()

Процедура УстановитьОтборВСпискеПоАктуальности(Список, Актуальность) Экспорт
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Просрочен", Актуальность = "Просроченные", ЗначениеЗаполнено(Актуальность));
	
КонецПроцедуры // УстановитьОтборВСпискеПоАктуальности()

Процедура УстановитьОтборВСпискеПоДатеАктуальности(Список, ДатаАктуальности) Экспорт
	
	Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", ДатаАктуальности);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДата()));
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборВСпискеПоДатеАктуальности()

// ПРОЦЕДУРЫ ОТБОРА ПО ПРИОРИТЕТУ

Процедура ОтборПоПриоритетуПриСозданииНаСервере(Список, Приоритет, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Приоритет", Приоритет) Тогда
			УстановитьОтборВСпискеПоПриоритету(Список, Приоритет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоПриоритетуПриСозданииНаСервере()

Процедура ОтборПоПриоритетуПриЗагрузкеИзНастроек(Список, Приоритет, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Приоритет = Настройки.Получить("Приоритет");
		УстановитьОтборВСпискеПоПриоритету(Список, Приоритет);
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Приоритет") Тогда
			Приоритет = Настройки.Получить("Приоритет");
			УстановитьОтборВСпискеПоПриоритету(Список, Приоритет);
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Приоритет");
	
КонецПроцедуры // ОтборПоПриоритетуПриЗагрузкеИзНастроек()

Процедура УстановитьОтборВСпискеПоПриоритету(Список, Приоритет) Экспорт
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Приоритет", Приоритет, ЗначениеЗаполнено(Приоритет));
	
КонецПроцедуры // УстановитьОтборВСпискеПоПриоритету()

// ФУНКЦИИ ОТБОРА ПО СОСТОЯНИЮ

Функция НеобходимОтборПоПриоритетуПриСозданииНаСервере(Список, Состояние, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("Состояние", Состояние) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НеобходимОтборПоПриоритетуПриСозданииНаСервере()

Функция НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек(Список, Состояние, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	НеобходимОтборПоСостоянию = Ложь;
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Состояние = Настройки.Получить("Состояние");
		НеобходимОтборПоСостоянию = Истина;
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Состояние") Тогда
			Состояние = Настройки.Получить("Состояние");
			НеобходимОтборПоСостоянию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Состояние");

	Возврат НеобходимОтборПоСостоянию;
	
КонецФункции // НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек()

Процедура ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности, ЭлементДатаАктуальности) Экспорт
	
	ОтборыСписковКлиентСервер.УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
	
	НеПоказыватьВсе = ЗначениеЗаполнено(Актуальность);
	ЭлементДатаАктуальности.Доступность = НеПоказыватьВсе;
	
	Если Не НеПоказыватьВсе Тогда
		ДатаАктуальности = Дата(1,1,1);
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.УстановитьОтборВСпискеПоДатеАктуальности(Список, ДатаАктуальности);
	
КонецПроцедуры // ПриИзмененииОтбораПоАктуальности()

// ПРОЦЕДУРЫ ОТБОРА ПО РЕГУЛЯРНОСТИ

Процедура ОтборПоРегулярностиПриСозданииНаСервере(Список, Регулярность, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Регулярность", Регулярность) Тогда
			УстановитьОтборВСпискеПоРегулярности(Список, Регулярность);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоРегулярностиПриСозданииНаСервере()

Процедура ОтборПоРегулярностиПриЗагрузкеИзНастроек(Список, Регулярность, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Регулярность = Настройки.Получить("Регулярность");
		УстановитьОтборВСпискеПоРегулярности(Список, Регулярность);
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Регулярность") Тогда
			Приоритет = Настройки.Получить("Регулярность");
			УстановитьОтборВСпискеПоПриоритету(Список, Регулярность);
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Регулярность");
	
КонецПроцедуры // ОтборПоРегулярностиПриЗагрузкеИзНастроек()

Процедура УстановитьОтборВСпискеПоРегулярности(Список, Регулярность) Экспорт
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Регулярное", Регулярность = "Регулярные", ЗначениеЗаполнено(Регулярность));
	
КонецПроцедуры // УстановитьОтборВСпискеПоРегулярности()

