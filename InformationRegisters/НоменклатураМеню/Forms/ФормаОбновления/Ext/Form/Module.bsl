
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Период.Дата) Тогда
		Период.Дата = НачалоДня(ТекущаяДата());
	КонецЕсли; 
	
КонецПроцедуры // ПериодПриИзменении()

&НаКлиенте
Процедура ПереченьАктуализацииПриИзменении(Элемент)
	
	ПереченьАктуализацииПриИзмененииСервер();
	
КонецПроцедуры // ПереченьАктуализацииПриИзменении()

&НаСервере
Процедура ПереченьАктуализацииПриИзмененииСервер()

	// Иерархия.
	Если Не ПереченьАктуализации Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	Справочник.Ссылка КАК Номенклатура
		                      |ИЗ
		                      |	Справочник.Номенклатура КАК Справочник
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		                      |		ПО (НоменклатураМеню.Номенклатура = Справочник.Ссылка)
		                      |ГДЕ
		                      |	НЕ Справочник.ВерсияСравнения = ЕСТЬNULL(НоменклатураМеню.ВерсияСравнения, НЕОПРЕДЕЛЕНО)
		                      |ИТОГИ ПО
		                      |	Номенклатура ИЕРАРХИЯ");
	    Номенклатура = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	КонецЕсли; 
	
	// Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Справочник.Ссылка КАК Номенклатура,
	                      |	ИСТИНА КАК Актуальность,
	                      |	ВЫБОР
	                      |		КОГДА Справочник.ЭтоГруппа
	                      |			ТОГДА 2
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ + ВЫБОР
	                      |		КОГДА Справочник.ПометкаУдаления
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ИндексКартинки,
	                      |	Справочник.ЭтоГруппа
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Справочник
	                      |ГДЕ
	                      |	Справочник.Ссылка В(&Номенклатура)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Номенклатура ИЕРАРХИЯ
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	Если Не ПереченьАктуализации Тогда
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Ссылка В(&Номенклатура)", "ИСТИНА");
	КонецЕсли;
	
	ПараметрыАктуализации = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗначениеВРеквизитФормы(ПараметрыАктуализации, "ПравилаАктуализации");
	
КонецПроцедуры // ПереченьАктуализацииПриИзмененииСервер()


&НаКлиенте
Процедура ПравилаАктуализацииАктуальностьПриИзменении(Элемент)

	// Актуальность.
	__РаботаСДаннымиКлиентСервер.ИзменитьПравилаАктуальностиПодчиненных(Элемент, ПравилаАктуализации);
	
КонецПроцедуры // ПравилаАктуализацииАктуальностьПриИзменении()


&НаКлиенте
Процедура ОК(Команда)

	Отказ = Ложь;
	
	ОКСервер(Отказ);
	
	Если Не Отказ Тогда
		__УправлениеДаннымиКлиент.ОповеститьИзменениеАктуализацииМеню();
		Закрыть();
	КонецЕсли; 
	
КонецПроцедуры // ОК()

&НаСервере
Процедура ОКСервер(Отказ)
	
	ПараметрыАктуализации = РеквизитФормыВЗначение("ПравилаАктуализации");
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаТаблицыАктуализации Из ПараметрыАктуализации.Строки.НайтиСтроки(Новый Структура("Актуальность,ЭтоГруппа", Истина, Ложь), Истина) Цикл
		
		РегистрыСведений.НоменклатураМеню.АктуализорватьНоменклатуру(СтрокаТаблицыАктуализации.Номенклатура, Период.Дата, Отказ);
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры // ОКСервер()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Период.
	Период.Вариант = ВариантСтандартнойДатыНачала.НачалоЭтогоДня;
	
	// Данные.
	ПереченьАктуализацииПриИзмененииСервер();
	
КонецПроцедуры // ПриСозданииНаСервере()
