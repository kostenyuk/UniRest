///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ ИБ 

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить, то
// - предлагает завершить работу системы (в режиме клиента);
// - выбрасывает исключение с описанием ошибки (в режиме внешнего соединения).
//
// Вызывается в режиме клиента или внешнего соединения.
//
// Параметры:
//  Нет.
//
Функция ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	Перем ВыполненноСОшибками;
	ВыполненноСОшибками = Ложь;

	// Проверка необходимости обновления информационной базы.
	НомерВерсии = Константы.НомерВерсииКонфигурации.Получить();
	ПервыйЗапуск = (НомерВерсии = "");

	Если НЕ (НЕ ПустаяСтрока(Метаданные.Версия)
		И НомерВерсии <> Метаданные.Версия) Тогда
		Возврат ВыполненноСОшибками;
	КонецЕсли;
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	// Проверка наличия прав для обновления информационной базы.
		Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
		 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
		 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
		 ИЛИ НРег(СокрЛП(ПользовательИБ.Имя)) = "frontoffice" Тогда
			ВыполненноСОшибками = Истина;
			ТекстСообщения = "Недостаточно прав для выполнения обновления. Работа системы будет завершена.";
			#Если Клиент Тогда
			Предупреждение(ТекстСообщения);
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
			#Иначе
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
			#КонецЕсли
			Возврат ВыполненноСОшибками;
		КонецЕсли;

		// Установка монопольного режима для обновления информационной базы.
		Попытка
			УстановитьМонопольныйРежим(Истина);
		Исключение
			ВыполненноСОшибками = Истина;
			#Если Клиент Тогда
			Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Предупреждение("Не удалось установить монопольный режим. Работа системы будет завершена.");
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
			#Иначе
			ТекстСообщения = "Не удалось установить монопольный режим. Работа системы завершена.";
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение;
			#КонецЕсли
			Возврат ВыполненноСОшибками;
		КонецПопытки;


	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

	УстановитьМонопольныйРежим(Ложь);

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		#Если Клиент Тогда
		Действие = ?(ПервыйЗапуск, "начальное заполнение", "обновление");
		
		Сообщить("Не выполнено " + Действие + " информационной базы .", СтатусСообщения.Важное);

		Текст = "Не выполнено " + Действие + " информационной базы! Завершить работу системы?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
			ВыполненноСОшибками = Истина;
		КонецЕсли;
		#Иначе
		ТекстСообщения = "Не выполнено обновление информационной базы. Работа системы завершена.";
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		#КонецЕсли
	Иначе
		ТекстСообщения = "Обновление информационной базы выполнено успешно.";
		#Если Клиент Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Информация);
		#Иначе
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		#КонецЕсли
	КонецЕсли;
	возврат ВыполненноСОшибками;

КонецФункции


// Для внутреннего использования.
//
Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) Экспорт
	Возврат Ложь //НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   – версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки, Знач ПолучитьВерсиюОбщихДанных = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	Результат = "";
	
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

// Проверить права текущего пользователя на выполнение обновления информационной базы.
Функция ЕстьПраваНаОбновлениеИнформационнойБазы(УчитыватьПривилегированныйРежим = Истина, РазделенныеДанные = Неопределено) Экспорт
	
	ПроверятьПраваАдминистрированияСистемы = Истина;
	
	Если РазделенныеДанные = Неопределено Тогда
		РазделенныеДанные = НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
			ИЛИ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И РазделенныеДанные Тогда
		
		Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Возврат Ложь;
		КонецЕсли;
		ПроверятьПраваАдминистрированияСистемы = Ложь;
	КонецЕсли;
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(
		, ПроверятьПраваАдминистрированияСистемы, УчитыватьПривилегированныйРежим);
	
КонецФункции

// Проверить необходимость обновления неразделенных данных информационной базы
// при смене версии конфигурации.
//
Функция НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ВерсияМетаданных = Метаданные.Версия;
		Если ПустаяСтрока(ВерсияМетаданных) Тогда
			ВерсияМетаданных = "0.0.0.0";
		КонецЕсли;
		
		ВерсияОбщихДанных = ВерсияИБ(Метаданные.Имя, Истина);
		
		Если НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияОбщихДанных) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Найти(НРег(ПараметрЗапускаКлиента), НРег("ЗапуститьОбновлениеИнформационнойБазы")) > 0
			   И ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
				
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
	
	Если НеобходимоВыполнитьОбновление(Метаданные.Версия, ВерсияИБ(Метаданные.Имя)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Найти(НРег(ПараметрЗапускаКлиента), НРег("ЗапуститьОбновлениеИнформационнойБазы")) > 0
	   И ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТребуетсяПроверитьЛегальностьПолученияОбновления()
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоЗапускСПустымСпискомПользователей()
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтандартныеПодсистемыПовтИсп.ИмяТекущегоПриложения() <> "BackgroundJob" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина если запуск информационной базы 
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйЗапускИнформационнойБазы() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает текст причины блокировки, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав, иначе возвращает пустую строку.
//
// Параметры:
//  УчитыватьПривилегированныйРежим - Булево. Начальное значение Истина. Если указать Ложь,
//                                    то при проверке полноправности текущего пользователя
//                                    наличие привилегированного режиме не будет учитываться.
//  
//  ПриЗапускеКлиентскогоПриложения - Булево. Начальное значение Ложь. Если указать Истина,
//                                    тогда в случае, если выполнен запуск с пустым списком
//                                    пользователей, то возвращается пустая строка, вместо
//                                    сообщения о недостатке прав (когда есть недостаток), 
//                                    т.к. проверка на запуск с пустым списком пользователей
//                                    при недостатке прав проверяется позднее и отдельно,
//                                    в результате чего происходит добавление пользователя ИБ
//                                    администратор с ролями АдминистраторСистемы и ПолныеПрава.
// 
// Возвращаемое значение:
//  Строка. Если база не заблокирована, тогда пустая строка, иначе сообщение о причине блокировки.
// 
Функция ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, Знач ПриЗапускеКлиентскогоПриложения = Ложь) Экспорт
	
	Сообщение = "";
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;
	
	СообщениеАдминистраторуСистемы =
		НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением на новую версию.
		           |Для завершения обновления версии программы требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").'");
	
	УстановитьПривилегированныйРежим(Истина);
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
		
		СообщениеАдминистраторуОбластиДанных =
			НСтр("ru = 'Вход в приложение временно невозможен в связи с обновлением на новую версию.
			           |Обратитесь к администратору сервиса за подробностями.'");
		
		Если ДоступноИспользованиеРазделенныхДанных Тогда
			Сообщение = СообщениеАдминистраторуОбластиДанных;
			
		ИначеЕсли НЕ ЕстьПраваНаОбновлениеИнформационнойБазы(УчитыватьПривилегированныйРежим, Ложь) Тогда
			
			Если ЕстьПравоАдминистрирование Тогда
				Сообщение = СообщениеАдминистраторуСистемы;
			Иначе
				Сообщение = СообщениеАдминистраторуОбластиДанных;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Сообщение;
	КонецЕсли;
	
	// Сообщение администратору сервиса не выдается
	Если РазделениеВключено И Не ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат "";
	КонецЕсли;
		
	Если ЕстьПраваНаОбновлениеИнформационнойБазы(УчитыватьПривилегированныйРежим, Истина) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не НеобходимоОбновлениеИнформационнойБазы() И Не ТребуетсяПроверитьЛегальностьПолученияОбновления() Тогда
		Возврат "";
	КонецЕсли;
	
	ЭтоЗапускСПустымСпискомПользователей = ЭтоЗапускСПустымСпискомПользователей();
	
	Если ПривилегированныйРежим() И НЕ УчитыватьПривилегированныйРежим И ЭтоЗапускСПустымСпискомПользователей Тогда
		Возврат ""; // Возможно, использован параметр запуска UsePrivilegedMode.
	КонецЕсли;
	
	Если ЭтоЗапускСПустымСпискомПользователей Тогда
		
		Если ПриЗапускеКлиентскогоПриложения Тогда
			// Проверка выполняется в подсистеме пользователи (с предложением добавить администратора).
			Возврат "";
		КонецЕсли;
		
		// Сообщение администратору системы при пустом списке пользователей.
		Сообщение =
			НСтр("ru = 'Для завершения обновления версии программы требуются административные права.
			           |Необходимо добавить в список пользователей информационной базы учетную запись
			           |администратора с двумя ролями ""Администратор системы"" и ""Полные права"",
			           |и повторить запуск программы от его имени.
			           |
			           |Для перехода к списку пользователей информационной базы необходимо открыть Конфигуратор и
			           |воспользоваться пунктом меню ""Администрирование - Пользователи"".'");
		Возврат Сообщение;
	КонецЕсли;
	
	Если ЕстьПравоАдминистрирование Тогда
		Возврат СообщениеАдминистраторуСистемы;
	КонецЕсли;

	Если РазделениеВключено Тогда
		// Сообщение пользователю сервиса.
		Сообщение =
			НСтр("ru = 'Вход в приложение временно невозможен в связи с обновлением на новую версию.
			           |Обратитесь к администратору сервиса за подробностями.'");
	Иначе
		// Сообщение пользователю локального режима.
		Сообщение =
			НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением на новую версию.
			           |Обратитесь к администратору за подробностями.'");
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции
