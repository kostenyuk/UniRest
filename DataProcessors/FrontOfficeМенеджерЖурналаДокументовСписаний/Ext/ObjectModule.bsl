
#Если Клиент Тогда
	
	Перем мРежимПоиска, мДанныеПоиска; // Переменные обслуживающие механизм поиска данных.
	
	Перем мФорматнаяСтрока; // Форматная строка представления суммы документа.
	
	
	// Процедура инициализация модуля рабочего места.
	//
	Процедура Инициализация() Экспорт
		
		// Проверка режима.
		Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
			Возврат;
		КонецЕсли;
		
		// Создание формы.
		Если (Форма = Неопределено) Тогда
			Форма = ЭтотОбъект.ПолучитьФорму("Форма");
			ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		КонецЕсли;
		
	КонецПроцедуры // Инициализация()
	
	// Процедура открытия формы рабочего места.
	//
	Процедура Открыть() Экспорт
		Если Форма = Неопределено Тогда
			Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		КонецЕсли;
		// Открытие формы.
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		
	КонецПроцедуры // Открыть()
	
	// Процедура заполнения табличного поля открытых документов.
	//
	// Параметры:
	//	ТабличноеПоле - TouchТабличноеПоле. Табличное поле;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов;
	//	СписокИсключаемых - СписокЗначений. Список исключаемых документов;
	//	Реализация - Булево. Сигнализирует о необходимости включения в вборку документов реализаций и нарядов;
	//	Списание - Булево. Сигнализирует о необходимости включения в вборку документов списаний;
	//	Открытые - Булево. Сигнализирует о необходимости формирования списка открытых или закрытых и удаленных документов.
	//
	Процедура ТаблицаОткрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаОткрытых", СписокИсключаемых = Неопределено, Реализация = Ложь, Списание = Истина, Открытые = Истина, ИерархическийПросмотр = Ложь) Экспорт
		
		ЗапросГде ="";
		// Данные.
		Данные = ТабличноеПоле.Данные();
		Если (Данные = Неопределено) Тогда
			Данные = Новый ДеревоЗначений;
			Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.СписаниеТоваров"));
			Данные.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"), "Документ");
			Данные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
			Данные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
			Данные.Колонки.Добавить("СотрудникПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Сотрудник';uk=Працівник'") );
			Данные.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число"), НСтр("ru='Сумма';uk='Сума'") );
			Данные.Колонки.Добавить("ОплатаПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Вид оплаты';uk='Вид оплати'") );
			Данные.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументов"));
			Данные.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
			
			ТабличноеПоле.Данные(Данные);
			Если Открытые Тогда
				ТабличноеПоле.СоздатьКолонки("Картинка,Номер,СотрудникПредставление,СуммаДокумента");
			Иначе
				ТабличноеПоле.СоздатьКолонки("Картинка,Номер,СотрудникПредставление,СуммаДокумента,ОплатаПредставление");
			КонецЕсли;
			ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.10;
			ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.40;
			ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.15;
			ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
			Если не Открытые Тогда
				ТабличноеПоле.Колонки.Получить("ОплатаПредставление").Ширина = 400 * 0.35;
			КонецЕсли;
			ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
			
			Возврат;
			
		Иначе
			
			// -- Текущая позиция (I).
			Если (Не ТабличноеПоле.ТекущийРодитель() = Неопределено) Тогда
				ТекущийРодитель = ТабличноеПоле.ТекущийРодитель().Сотрудник;
			КонецЕсли;
			Если (Не ТабличноеПоле.ТекущаяСтрока() = Неопределено) Тогда
				ТекущийДокумент = ТабличноеПоле.ТекущиеДанные().Ссылка;
			КонецЕсли;
			
			// -- Текущие данные не изменяемые при обновлении.
			Если Открытые Тогда
				ТекущиеДанные = ОбщегоНазначения.ДеревоЗначенийВТаблицуЗначений(Данные, ТабличноеПоле.ТекущийРодитель(), Ложь, "Ссылка");// ,Оплата,ОплатаПредставление
			КонецЕсли;
			
			Данные.Строки.Очистить();
			
		КонецЕсли;
		
		
		// Выборка данных.
		ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
		ТекущийСотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
		
		// -- Документы.
		
		ДоступностьСписаний = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.СписаниеТоваров"), ТребуемыеПолномочия);
		
		
		// -- Запрос.
		Если Открытые Тогда
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			              |	СостояниеДокументов.Документ КАК Ссылка,
			              |	СостояниеДокументов.Номер КАК Номер,
			              |	СостояниеДокументов.Дата КАК Дата,
			              |	СостояниеДокументов.СуммаДокумента КАК СуммаДокумента,
			              |	СостояниеДокументов.Документ.Сотрудник КАК Сотрудник,
			              |	СостояниеДокументов.Сотрудник.Представление КАК СотрудникПредставление,
			              |	СостояниеДокументов.Состояние КАК Состояние
			              |ИЗ
			              |	РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
			              |ГДЕ
			              |	СостояниеДокументов.Ресторан = &Ресторан
			              |	И СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров
			              |
			              |УПОРЯДОЧИТЬ ПО
			              |	СостояниеДокументов.ДатаНачалаПериода,
			              |	Номер";
			
			ОплатаКолонка = Данные.Колонки.Найти("Оплата");
			ОплатаПредставлениеКолонка = Данные.Колонки.Найти("ОплатаПредставление");
			
			Если не ОплатаКолонка = Неопределено Тогда
				Данные.Колонки.Удалить(ОплатаКолонка);
			КонецЕсли;
			
			Если не ОплатаПредставлениеКолонка = Неопределено Тогда
				Данные.Колонки.Удалить(ОплатаПредставлениеКолонка);
			КонецЕсли;
			
		
		Иначе
			
			ЗакрытыеСостояния = УправлениеЗаказами.СостоянияЗакрытыхДокументов(Истина);
			// Александр Переверзев 03.03.2012 17:44:10 
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	СписаниеТоваров.Ссылка КАК Ссылка,
			                      |	СписаниеТоваров.Номер КАК Номер,
			                      |	СписаниеТоваров.Дата КАК Дата,
			                      |	СписаниеТоваров.Сотрудник КАК Сотрудник,
			                      |	СписаниеТоваров.Сотрудник.Представление КАК СотрудникПредставление,
			                      |	СписаниеТоваров.Оплата КАК Оплата,
			                      |	СписаниеТоваров.Оплата.Представление КАК ОплатаПредставление,
			                      |	СписаниеТоваров.СуммаДокумента КАК СуммаДокумента,
			                      |	СписаниеТоваров.Состояние КАК Состояние,
			                      |	СписаниеТоваров.ДатаНачалаПериода КАК ДатаНачалаПериода,
			                      |	СписаниеТоваров.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
			                      |	СписаниеТоваров.Ссылка КАК Документ
			                      |ИЗ
			                      |	Документ.СписаниеТоваров КАК СписаниеТоваров
			                      |ГДЕ
			                      |	СписаниеТоваров.Ресторан = &Ресторан
			                      |	И СписаниеТоваров.ОтражатьВНалоговомУчете
			                      |	И НАЧАЛОПЕРИОДА(СписаниеТоваров.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)");
			Запрос.УстановитьПараметр("Дата", ПолучитьСерверFrontOffice().ТекущаяКассоваяДата());
			Запрос.УстановитьПараметр("Состояние", ЗакрытыеСостояния);
			
			ОплатаКолонка = Данные.Колонки.Найти("Оплата");
			ОплатаПредставлениеКолонка = Данные.Колонки.Найти("ОплатаПредставление");
			
			Если  ОплатаКолонка = Неопределено Тогда
				
				Данные.Колонки.Добавить("Оплата", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
			КонецЕсли;
			
			Если  ОплатаПредставлениеКолонка = Неопределено Тогда
				Данные.Колонки.Добавить("ОплатаПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Вид оплаты';uk='Вид оплати'") );
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийРесторан.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам) Тогда
			Если Открытые Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеДокументов.Ресторан = &Ресторан", "ИСТИНА");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписаниеТоваров.Ресторан = &Ресторан", "ИСТИНА");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписаниеТоваров.ОтражатьВНалоговомУчете", "истина");
			//Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг.ОтражатьВНалоговомУчете ", "истина");
		КонецЕсли;

		
		Если ЗначениеЗаполнено(ТекущийСотрудник) Тогда
			Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТекущийРесторан) Тогда
			Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
		КонецЕсли;
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		// -- Пустая выборка.
		Если РезультатЗапроса.Пустой() Тогда
			ТабличноеПоле.ОбновитьСтроки();
			Возврат;
		КонецЕсли;
		
		// Перенос данных в табличное поле.
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// -- Добавление в дерево родителей.
			СтрокаГруппы = Данные;
			Если ИерархическийПросмотр Тогда
				СтрокаЭлемент = Данные.Строки.Найти(Выборка.Сотрудник, "Сотрудник");
				
				Если (СтрокаЭлемент = Неопределено) Тогда
					СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
					СтрокаЭлемент.Сотрудник = Выборка.Сотрудник;
					СтрокаЭлемент.СотрудникПредставление = Выборка.СотрудникПредставление;
					СтрокаЭлемент.ЭтоГруппа = Истина;
				КонецЕсли;
				
				СтрокаГруппы = СтрокаЭлемент;
			КонецЕсли;
			
			// -- Добавление в дерево элемента.
			СтрокаДанных = СтрокаГруппы.Строки.Добавить();
			
			СтрокаДанных.Ссылка = Выборка.Ссылка;
			СтрокаДанных.Номер = Выборка.Номер;
			СтрокаДанных.Дата = Выборка.Дата;
			СтрокаДанных.Сотрудник = Выборка.Сотрудник;
			СтрокаДанных.СотрудникПредставление = Выборка.СотрудникПредставление;
			СтрокаДанных.СуммаДокумента = Выборка.СуммаДокумента;
			
			Если не Открытые Тогда
				СтрокаДанных.Оплата = Выборка.Оплата;
				СтрокаДанных.ОплатаПредставление = Выборка.ОплатаПредставление;		
			КонецЕсли;
			//СтрокаДанных.СуммаОплачиваемая = Выборка.СуммаОплачиваемая;
			СтрокаДанных.Состояние = Выборка.Состояние;
			
			// -- Обновление родителя.
			Если ИерархическийПросмотр Тогда
				СтрокаГруппы.СуммаДокумента = СтрокаГруппы.СуммаДокумента + СтрокаДанных.СуммаДокумента;	
			КонецЕсли;
			
			// -- Текущая позиция (II).
			Если (Не СтрокаДанных.Родитель = Неопределено) И (СтрокаДанных.Сотрудник = ТекущийРодитель) Тогда
				ТекущаяСтрокаРодитель = СтрокаДанных.Родитель;
			КонецЕсли;
			Если (СтрокаДанных.Ссылка = ТекущийДокумент) Тогда
				ТекущаяСтрока = СтрокаДанных;
			КонецЕсли;
		КонецЦикла;
		
		// -- Сортировка.
		Если ИерархическийПросмотр Тогда
			Данные.Строки.Сортировать("СотрудникПредставление");
		КонецЕсли;
		
		
		// -- Текущая позиция (III).
		Если (Не ТекущаяСтрокаРодитель = Неопределено) Или (Не ТекущаяСтрока = Неопределено) Тогда
			ТабличноеПоле.ТекущаяПозиция(ТекущаяСтрока, ,, ТекущаяСтрокаРодитель);
		КонецЕсли;
		
		// Обновление.
		Если (ТекущаяСтрокаРодитель = Неопределено) И (ТекущаяСтрока = Неопределено) Тогда
			ТабличноеПоле.ОбновитьСтроки();
		КонецЕсли;
		
		Выборка = Неопределено;
		
	КонецПроцедуры // ТаблицаОткрытыхДокументовПрочитать()
	
	// Процедура обработчик события ПриВыводеСтроки табличного поля открытых документов.
	//
	Процедура ТаблицаОткрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Открытые = Истина) Экспорт
		
		// Оформление строки.
		ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
		ОформлениеСтроки.Ячейки("Номер").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
		ОформлениеСтроки.Ячейки("СотрудникПредставление").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
		ОформлениеСтроки.Ячейки("СуммаДокумента").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
		
		// Номер.
		ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
		
		

		Попытка
			ОформлениеСтроки.Ячейки("ОплатаПредставление").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
		Исключение
			
		КонецПопытки;
		
		Попытка
			СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
		Исключение
			
		КонецПопытки;
		
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Картинка"), СтруктураСтиля);
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Номер"), СтруктураСтиля);
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СотрудникПредставление"), СтруктураСтиля);
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
		//Если Открытые Тогда
		//	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Оплачивать"), СтруктураСтиля);
		//КонецЕсли;
		
		Попытка
			ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ОплатаПредставление"), СтруктураСтиля);			
		Исключение
			
		КонецПопытки;
		
		
			КонецПроцедуры // ТаблицаОткрытыхДокументовВывестиСтроку()
	
	// Процедура осуществляет поиск данных табличного поля открытых документов.
	//
	Функция ТаблицаОткрытыхДокументовНайти(ТабличноеПоле) Экспорт
		
		Перем Значение;
		
		// Открываем форму.
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПоиска");
		
		// Выбор.
		ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
		Если (Не ТипЗнч(ПараметрЗакрытия) = Тип("Строка")) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Режим и данные поиска.
		мРежимПоиска = ПараметрЗакрытия; мДанныеПоиска = ТабличноеПоле.Данные(); 
		
		// Данные.
		Данные = Новый ТаблицаЗначений;
		Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
			Данные.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		КонецЦикла;
		
		// Поиск.
		Если (мРежимПоиска = "Телефон") Тогда
			Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите телефон';uk='Введіть телефон'") , 12, ,,, "ЧЦ=12; ЧДЦ=0; ЧГ=", Данные, "Номер,ТелефонПредставление", , ЭтотОбъект, "ПоискДокумента");
		ИначеЕсли (мРежимПоиска = "Адрес") Тогда
			Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите адрес';uk='Введіть адресу'") , ,,, Данные, "Номер,КонтрагентПредставление", , ЭтотОбъект, "ПоискДокумента");
		ИначеЕсли (мРежимПоиска = "Сумма") Тогда
			Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите сумму';uk='Введіть суму'") , Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ,,, Данные, "Номер,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
		ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
			Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите сотрудника';uk='Введіть працівника'") , ,,, Данные, "Номер,СотрудникПредставление,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
		Иначе
			Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите номер документа';uk='Введіть номер документу'") , Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера, ,,, "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера + "; ЧДЦ=0; ЧГ=", Данные, "Номер", , ЭтотОбъект, "ПоискДокумента");
		КонецЕсли;
		
		// Позиционирование.
		Если Результат Тогда
			ТабличноеПоле.ТекущаяСтрока(ТабличноеПоле.Данные().Строки.Найти(Значение.Ссылка, "Ссылка", Истина));
		КонецЕсли;
		
		Данные = Неопределено;
		
		// Результат.
		Возврат Результат;
		
	КонецФункции // ТаблицаОткрытыхДокументовНайти()
	
	// Процедура заполнения табличного поля закрытых документов.
	//
	// Описания:
	//	См. процедуру "ТаблицаОткрытыхДокументовПрочитать".
	//
	Процедура ТаблицаЗакрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаЗакрытых", СписокИсключаемых = Неопределено, Реализация = Ложь, Списание = Истина, ИерархическийПросмотр = Ложь) Экспорт
		
		ТаблицаОткрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия, СписокИсключаемых, Реализация, Списание, Ложь, ИерархическийПросмотр);
		
	КонецПроцедуры // ТаблицаЗакрытыхДокументовПрочитать()
	
	// Процедура обработчик события ПриВыводеСтроки табличного поля закрырых документов.
	//
	Процедура ТаблицаЗакрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		ТаблицаОткрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Ложь);
		
	КонецПроцедуры // ТаблицаЗакрытыхДокументовВывестиСтроку()
	
	// Процедура осуществляет поиск данных табличного поля закрытых документов.
	//
	// Описания:
	//	См. процедуру "ТаблицаОткрытыхДокументовПрочитать".
	//
	Функция ТаблицаЗакрытыхДокументовНайти(ТабличноеПоле) Экспорт
		
		Возврат ТаблицаОткрытыхДокументовНайти(ТабличноеПоле);
		
	КонецФункции // ТаблицаЗакрытыхДокументовНайти()
	
	// Обработчик события ПоискДокумента.ПриИзмененииДанных элемента.
	//
	Процедура ПоискДокументаПриИзмененииДанных(Элемент) Экспорт
		
		// Табличное поле.
		ТабличноеПоле = Элемент; 
		
		ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		Если (мРежимПоиска = "Телефон") Тогда
			ТабличноеПоле.Колонки.Получить("ТелефонПредставление").Ширина = 400 * 0.30;
			ТабличноеПоле.Колонки.Получить("ТелефонПредставление").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ИначеЕсли (мРежимПоиска = "Адрес") Тогда
			ТабличноеПоле.Колонки.Получить("КонтрагентПредставление").Ширина = 400 * 0.70;
		ИначеЕсли (мРежимПоиска = "Сумма") Тогда
			ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.30;
			ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
			ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.40;
			ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.30;
			ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		КонецЕсли;
		
		ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
		
	КонецПроцедуры // ПоискДокументаПриИзмененииДанных()
	
	// Обработчик события ПоискДокумента.ПриПоискеЗначения элемента.
	//
	Процедура ПоискДокументаПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
		
		// Даныне.
		Данные = Элемент.Данные(); Данные.Очистить();
		
		// Значение для поиска.
		Если (мРежимПоиска = "Сумма") Тогда
			ЗначениеДляПоиска = Формат(Значение, "ЧРД=,; ЧГ=");
		ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
			ЗначениеДляПоиска = Нрег(СокрЛ(Значение));
		Иначе
			ЗначениеДляПоиска = Формат(Значение, "ЧГ=");
		КонецЕсли;
		Если ПустаяСтрока(ЗначениеДляПоиска) Тогда
			Возврат;
		КонецЕсли;
		
		// Нисходящий обход дерева.
		СписокПодчиненных = Новый СписокЗначений();
		СписокПодчиненных.Добавить(мДанныеПоиска);
		
		Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
			СтрокаВладелец = СтрокаВладелец.Значение;	// Наепка - друг чекиста ;)
			
			Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
				Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
					СписокПодчиненных.Добавить(СтрокаВладельца);
				КонецЕсли;
				
				СтрокаТаблицыДанных = СтрокаВладельца;
				
				// Поиск.
				Если СтрокаТаблицыДанных.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				
				Если (мРежимПоиска = "Сумма") Тогда
					Валидная = Булево(Найти(Формат(СтрокаТаблицыДанных.СуммаДокумента), ЗначениеДляПоиска));
				ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
					Валидная = Булево(Найти(НРег(СтрокаТаблицыДанных.СотрудникПредставление), ЗначениеДляПоиска));
				Иначе
					Валидная = Булево(Найти(FrontOffice.ПредставлениеНомера(СтрокаТаблицыДанных.Номер), ЗначениеДляПоиска));
				КонецЕсли;
				Если Не Валидная Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицы = Данные.Добавить();
				Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
					СтрокаТаблицы[Колонка.Имя] = СтрокаТаблицыДанных[Колонка.Имя];
				КонецЦикла;
				
				// TODO: Поиск значения.
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецПроцедуры // ПоискКлиентаПриПоискеЗначения()
	
	// Обработчик события ПоискДокумента.ПриВыводеСтроки элемента.
	//
	Процедура ПоискДокументаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		// Оформление строки.
		СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
		
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Номер"), СтруктураСтиля);
		
		
		Если (мРежимПоиска = "Сумма") Тогда
			ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
		КонецЕсли;
		//
		// Номер.
		ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
		
		
	КонецПроцедуры // ПоискКлиентаПриВыводеСтроки()
	
	// Функция применения оплаты к документам по данным из табличного поля открытых документов.
	//
	Функция ОплатаПрименить(ТабличноеПоле) Экспорт
		
		// Данные.
		ТекщийРодитель = ТабличноеПоле.ТекущийРодитель();
		Если (ТекщийРодитель = Неопределено) Тогда
			Строки = ТабличноеПоле.Данные().Строки;	
		Иначе
			Строки = ТекщийРодитель.Строки;	
		КонецЕсли;
		
		// Действие.
		Для Каждого СтрокаДереваЗначений Из Строки Цикл
			Если  (Не ЗначениеЗаполнено(СтрокаДереваЗначений.Оплата)) Тогда
				Продолжить;
			КонецЕсли;
			
			// Изменение документа.
			ДокументОбъект = СтрокаДереваЗначений.Ссылка;
			
			Если Не РаботаСДиалогами.ДокументПровести(ДокументОбъект, Неопределено, ,СтрокаДереваЗначений.Оплата) Тогда Возврат Ложь; КонецЕсли;
			
			//СД перенос на новый движок
			//Если ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект) И
			//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОбъект, "Оплата", СтрокаДереваЗначений.Оплата) И
			//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОбъект, "ОтражатьВУправленческомУчете", СтрокаДереваЗначений.Оплата.ОтражатьВУправленческомУчете) И
			//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОбъект, "ОтражатьВНалоговомУчете", СтрокаДереваЗначений.Оплата.ОтражатьВНалоговомУчете) И
			//	 ОбщегоНазначения.УстановитьИПроверитьРеквизитОбъекта(ДокументОбъект, "ОтражатьВБухгалтерскомУчете", СтрокаДереваЗначений.Оплата.ОтражатьВБухгалтерскомУчете) И
			//	 
			//	 
			//	 ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.Проведение) И
			//	 ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект) Тогда
			//Иначе
			//	ПолучитьСерверFrontOffice().ДокументЗакрыть(ДокументОбъект);
			//	Возврат Ложь;
			//КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	КонецФункции // ОплатаПрименить()
	
	// Процедура установки вида оплаты документов в табличном поле открытых документов.
	//
	Процедура ОплатаУстановить(ТабличноеПоле, Документ, Оплата) Экспорт
		
		// Документ.
		СтрокаДанных = ТабличноеПоле.Данные().Строки.Найти(Документ, "Ссылка", Истина);
		Если (СтрокаДанных = Неопределено) Тогда
			Возврат;
		КонецЕсли;
		
		// Действие.
		Если (Не Оплата = Неопределено) Тогда
			//СтрокаДанных.Оплачивать = Истина;
			СтрокаДанных.Оплата = Оплата;
			СтрокаДанных.ОплатаПредставление = СтрокаДанных.Оплата;
			//СтрокаДанных.СуммаОплачиваемая = СтрокаДанных.СуммаДокумента;
		Иначе
			//СтрокаДанных.Оплачивать = Ложь;
			СтрокаДанных.Оплата = Неопределено;
			СтрокаДанных.ОплатаПредставление = Неопределено;
			//СтрокаДанных.СуммаОплачиваемая = Неопределено;
		КонецЕсли;
		
	КонецПроцедуры // ОплатаУстановить()
	
	// Процедура очистки вида оплаты документов в табличном поле открытых документов.
	//
	Процедура ОплатаУдалить(ТабличноеПоле, Исключая = Неопределено) Экспорт
		
		// Нисходящий обход дерева.
		СписокПодчиненных = Новый СписокЗначений();
		СписокПодчиненных.Добавить(ТабличноеПоле.Данные());
		
		Для Каждого СтрокиВладелец Из СписокПодчиненных Цикл
			СтрокаВладелецСп = СтрокиВладелец.Значение;	// Наепка - друг чекиста ;)
			
			Для Каждого СтрокаВладельца Из СтрокаВладелецСп.Строки Цикл
				Если (Не СтрокаВладельца.Родитель = Исключая) Тогда
					
					Если  не ТабличноеПоле.Данные().Колонки.Найти("Оплата") =Неопределено Тогда
						СтрокаВладельца.Оплата = Неопределено;	
					КонецЕсли;
					Если не ТабличноеПоле.Данные().Колонки.Найти("ОплатаПредставление") = Неопределено Тогда
						СтрокаВладельца.ОплатаПредставление = Неопределено;		
					КонецЕсли;
				КонецЕсли;
				
				Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
					СписокПодчиненных.Добавить(СтрокаВладельца);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецПроцедуры // ОплатаСбросить()
	
	
	// Инициализация переменных.
	мФорматнаяСтрока = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	
#КонецЕсли
