Процедура ВывестиСообщение(Текст) Экспорт
	
	Если НеВыводитьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();

КонецПроцедуры

Функция ПолучитьСпособОплаты(Документ)

	Если Документ.ОтражатьВБухгалтерскомУчете
		И Документ.Оплата.ТипОплаты=Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
		Возврат 1;
	ИначеЕсли Документ.Оплата.ТипОплаты=Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
		Возврат 2;
	ИначеЕсли Документ.Оплата.ТипОплаты=Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
		Возврат 3;
	ИначеЕсли Документ.Оплата.ТипОплаты=Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
		Возврат 4;
	Иначе
		Возврат 5;
	КонецЕсли; 

КонецФункции

//Функция НайтиКодОбменаПоСсылке(Ссылка)
Функция НайтиКодОбменаПоСсылке(Ссылка, ИнформационнаяСистема) //Костенюк Александр 24.11.2014

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СинонимыОбъектов.КодОбмена
	|ИЗ
	|	РегистрСведений.СинонимыОбъектов КАК СинонимыОбъектов
	|ГДЕ
	|	СинонимыОбъектов.ИнформационнаяСистема = &ИнформационнаяСистема
	|	И СинонимыОбъектов.Объект = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ИнформационнаяСистема",ИнформационнаяСистема);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КодОбмена;
	Иначе
		Возврат "";		
	КонецЕсли; 

КонецФункции

Функция ЗапросКТабличнымЧастямДокумента(Объект,ВидДока)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.Текст =
	" ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,		
	|	НоменклатурнаяГруппа,					
	|	Организация,                            		
	|	СтавкаНДС,
	|	ЕдиницаИзмерения,
	|	ДатаНачалаПериода,
	|	ДатаОкончанияПериода,	
	|	Цена,
	|	Количество,		
	|	Сумма,";
	Если ВидДока="РеализацияТоваровУслуг" Тогда
		Запрос.Текст = Запрос.Текст +"
		|	СуммаНДС,	
		|	СуммаСкидки";
	Иначе
		Запрос.Текст = Запрос.Текст +"
		|	СуммаНДС";	
	КонецЕсли;  
	Запрос.Текст = Запрос.Текст +"
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		Организация			 КАК Организация,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,			
	|		ДатаНачалаПериода 	 КАК ДатаНачалаПериода,
	|		ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|		Цена                 КАК Цена,						
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,";
	Если ВидДока="РеализацияТоваровУслуг" Тогда
		Запрос.Текст = Запрос.Текст +"
		|		СУММА(СуммаНДС)      КАК СуммаНДС,
		|		СУММА(СуммаСкидки)   КАК СуммаСкидки";			
	Иначе
		Запрос.Текст = Запрос.Текст +"
		|		СУММА(СуммаНДС)      КАК СуммаНДС";
	КонецЕсли;  	
	Запрос.Текст = Запрос.Текст +"
	|		
	|	ИЗ
	|		Документ."+ВидДока+".Товары КАК "+ВидДока+"
	|	ГДЕ
	|		"+ВидДока+".Ссылка = &ТекущийДокумент
	// Чистяков Павел 29.08.2011 14:14:18 
	|	И "+ВидДока+".Цена<>0";
	Если ВидДока="СписаниеТоваров" Тогда
		Запрос.Текст = Запрос.Текст +"
		|	И "+ВидДока+".Списание";
	КонецЕсли;                                        
	Запрос.Текст = Запрос.Текст +"
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,			
	|		НоменклатурнаяГруппа,
	|		Организация,
	|		СтавкаНДС,
	|		ЕдиницаИзмерения,
	|		ДатаНачалаПериода,
	|		ДатаОкончанияПериода,
	|		Цена
	|) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   2,
	|   "+ВидДока+".НомерСтроки,
	|	Номенклатура,
	|	НоменклатурнаяГруппа,		
	|	Организация,
	|	СтавкаНДС,
	|	NULL,
	|	ДатаНачалаПериода,
	|	ДатаОкончанияПериода,
	|	Цена,
	|	Количество,		
	|	Сумма,";	
	Если ВидДока="РеализацияТоваровУслуг" Тогда
		Запрос.Текст = Запрос.Текст +"
		|	СуммаНДС,	
		|	СуммаСкидки";
	Иначе
		Запрос.Текст = Запрос.Текст +"
		|	СуммаНДС";	
	КонецЕсли;                                        
	Запрос.Текст = Запрос.Текст +"
	|ИЗ
	|	Документ."+ВидДока+".Услуги КАК "+ВидДока+"
	|
	|ГДЕ
	|	"+ВидДока+".Ссылка = &ТекущийДокумент
	// Чистяков Павел 29.08.2011 14:14:18 
	|	И "+ВидДока+".Цена<>0";
	Если ВидДока="СписаниеТоваров" Тогда
		Запрос.Текст = Запрос.Текст +"
		|	И "+ВидДока+".Списание";
	КонецЕсли;                                        
	Запрос.Текст = Запрос.Текст +"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

//Функция НайтиКодПоСсылке(Ссылка)
Функция НайтиКодПоСсылке(Ссылка, ИнформационнаяСистема) //Костенюк Александр 24.11.2014

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СинонимыОбъектов.Код
	|ИЗ
	|	РегистрСведений.СинонимыОбъектов КАК СинонимыОбъектов
	|ГДЕ
	|	СинонимыОбъектов.ИнформационнаяСистема = &ИнформационнаяСистема
	|	И СинонимыОбъектов.Объект = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ИнформационнаяСистема",ИнформационнаяСистема);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Код;
	Иначе
		Возврат "";		
	КонецЕсли; 

КонецФункции

//Процедура РазложитьСсылку(Знач Ссылка, Адресс, Каталог, Файл)
Процедура РазложитьСсылку(Знач Ссылка, Адресс, Каталог) //Костенюк Александр 04.11.2014
	
	Если ЛЕВ(Ссылка,6)="ftp://" Тогда
		Ссылка	= Сред(Ссылка,7);
	КонецЕсли;
	
	Позиция	= Найти(Ссылка,"/");
	Если Позиция=0 Тогда
		Адресс = Ссылка;
	Иначе
		Адресс = ЛЕВ(Ссылка,Позиция-1);
		Каталог = СРЕД(Ссылка,Позиция+1);
	КонецЕсли;
	
	Если Прав(Каталог,1)="/" Тогда
		Каталог = Сред(Каталог,1,СтрДлина(Каталог)-1);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРеквизит(Объект,Реквизит,Значение)
	
	// Этот случай отсекает модифицированность
	// когда Значение=Неопределено, а Реквизит=Справочник.ПустаяСсылка()
	Если Значение=Неопределено
		И НЕ ЗначениеЗаполнено(Объект[Реквизит]) Тогда
		Возврат;
	КонецЕсли; 
	
	// Администратор 24.07.2012 14:24:36 
	// Для кода почему-то появляются пробелы справа для созданных элементов
	// Вероятно 1С при записи дополняет справа пробелами
	// Чтобы избежать модифицированности уберем их
	Если Реквизит="Код" Тогда
		Если СОКРП(Объект[Реквизит])=Значение Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Объект[Реквизит]=Значение Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Объект[Реквизит] = Значение;
	
КонецПроцедуры

Функция НайтиСсылкуЭлемента(Идентификатор)
	
	Если Идентификатор="" Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СинонимыОбъектов.Объект КАК Ссылка
	|ИЗ
	|	РегистрСведений.СинонимыОбъектов КАК СинонимыОбъектов
	|ГДЕ
	|	СинонимыОбъектов.ИнформационнаяСистема = &ИнформационнаяСистема
	|	И СинонимыОбъектов.Код = &Идентификатор"
	);
	Запрос.УстановитьПараметр("Идентификатор",СокрЛП(Идентификатор));
	Запрос.УстановитьПараметр("ИнформационнаяСистема",ИнформационнаяСистема);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция НайтиСсылкуПоКоду(Идентификатор)
	
	Если Идентификатор="" Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СинонимыОбъектов.Объект КАК Ссылка
	|ИЗ
	|	РегистрСведений.СинонимыОбъектов КАК СинонимыОбъектов
	|ГДЕ
	|	СинонимыОбъектов.ИнформационнаяСистема = &ИнформационнаяСистема
	|	И СинонимыОбъектов.КодОбмена = &Идентификатор"
	);
	Запрос.УстановитьПараметр("Идентификатор",СокрЛП(Идентификатор));
	Запрос.УстановитьПараметр("ИнформационнаяСистема",ИнформационнаяСистема);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция НайтиПоНаименованию(Идентификатор)
	
	Если Идентификатор="" Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И (НЕ Номенклатура.ЭтоГруппа)"
	);
	Запрос.УстановитьПараметр("Наименование",СокрЛП(Идентификатор));
	Запрос.УстановитьПараметр("ИнформационнаяСистема",ИнформационнаяСистема);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьНоменклатурнуюГруппу(Наименование, ОсновнаяОрганизация, СоздаватьНовую)
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатурныеГруппы.Ссылка
		|ИЗ
		|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
		|ГДЕ
		|	НоменклатурныеГруппы.Наименование = &Наименование"
		);
		Запрос.УстановитьПараметр("Наименование",Наименование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			НовыйЭлемент = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
			НовыйЭлемент.Наименование	= Наименование;
			НовыйЭлемент.Организация	= ОсновнаяОрганизация;
			Попытка
				НовыйЭлемент.Записать();
				ВывестиСообщение("Создана номенклатурная группа: "+НовыйЭлемент);
			Исключение
				ВывестиСообщение(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Константы.ОсновнаяНоменклатурнаяГруппа.Получить();
	
КонецФункции

Функция ДобавитьЗаписьВРегистрСинонимов(Объект, Код, КодОбмена)
	
	Запись = РегистрыСведений.СинонимыОбъектов.СоздатьМенеджерЗаписи();
	
	Запись.ИнформационнаяСистема	= ИнформационнаяСистема;
	Запись.Объект					= Объект.Ссылка;
	Запись.Код						= Код;
	Запись.КодОбмена			 	= КодОбмена;
	
	Запись.Записать(Истина);
	
КонецФункции

Процедура УстановитьЦену(Объект,Цена)
	
	Если Цена=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних"
	);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура",Объект.Ссылка);
	
	//.. Начало изменения Dim)on  6 октября 2013 г. 21:18:44
	//
	Ресторан = ОбменДаннымиПовтИсп.ПолучитьТекущийРесторан(); //Костенюк Александр 27.10.2014
	ТипЦены = ОбменДаннымиПовтИсп.ПолучитьТипЦенТекущегоРесторана();
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура = &Номенклатура", "Номенклатура = &Номенклатура И ТипЦены = &ТипЦеныРесторана");
	Запрос.УстановитьПараметр("ТипЦеныРесторана", ТипЦены);
	//
	//.. Конец изменения Dim)on  6 октября 2013 г. 21:18:44

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Цена<>Цена Тогда
			ВывестиСообщение("Изменилась цена: "+Объект+" с "+Формат(Выборка.Цена,"ЧДЦ=2")+" до "+Формат(Цена,"ЧДЦ=2"));
			Запись = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
			Запись.Период		= ТекущаяДата();
			Запись.Номенклатура	= Объект.Ссылка;
			Запись.ТипЦены		= ТипЦены;
			Запись.Цена			= Цена;
			Запись.Записать(Истина);
		КонецЕсли;
	Иначе
		ВывестиСообщение("Назначение цены: "+Объект+" назначенена цена "+Формат(Цена,"ЧДЦ=2"));
		Запись = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
		Запись.Период		= ТекущаяДата();
		Запись.Номенклатура	= Объект.Ссылка;
		Запись.ТипЦены		= ТипЦены;
		Запись.Цена			= Цена;
		Запись.Записать(Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьВМеню(Объект,ЕстьВМеню)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Меню.Ссылка
	|ИЗ
	|	Справочник.Меню КАК Меню
	|ГДЕ
	|	Меню.Актуальность <> &Актуальность
	|	И Меню.Номенклатура = &Номенклатура"
	);
	Запрос.УстановитьПараметр("Номенклатура",Объект.Ссылка);
	Запрос.УстановитьПараметр("Актуальность",ЕстьВМеню);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектМеню = Выборка.ССылка.ПолучитьОбъект();
		ОбъектМеню.Актуальность = ЕстьВМеню;
		ОбъектМеню.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ВосстановитьНастройкиОбработки() Экспорт

	Хранилище		= Константы.ОбменСБухгалтериейНастройки.Получить();
	Соответствие	= Хранилище.Получить();
	
	Если Соответствие=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из Соответствие Цикл
		Если Лев(Строка.Ключ,7)="Объект." Тогда
			Реквизит				= Сред(Строка.Ключ,8);
			ЭтотОбъект[Реквизит]	= Строка.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ ВЫГРУЗКИ/ЗАГРУЗКИ

Процедура ЗагрузитьСFTP() Экспорт
	
	Если ЗагружатьСохранятьФайлыНаFTP Тогда
		
		Адресс		= "";
		Каталог		= "";
		//Файл		= ""; //Костенюк Александр-Закомментировано 04.11.2014
		
		//РазложитьСсылку(АдрессFTP,Адресс,Каталог,Файл);
		РазложитьСсылку(АдрессFTP,Адресс,Каталог); //Костенюк Александр 04.11.2014
		
		Попытка
			ФТПСоединение = Новый FTPСоединение(Адресс,21,Пользователь,Пароль,,);
		Исключение
			ВывестиСообщение(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Массивфайлов	= ФТПСоединение.НайтиФайлы(Каталог,ПрефиксФайлов+"*.dbf");
		РазмерФайловФТП = 0; //Костенюк Александр 22.09.2014
		
		Для каждого Файл Из Массивфайлов Цикл
			Попытка
				ФТПСоединение.Получить(Файл.ПолноеИмя,КаталогОбмена+"\"+Файл.Имя);
				РазмерФайловФТП = РазмерФайловФТП + Файл.Размер(); //Костенюк Александр 22.09.2014
			Исключение
				ВывестиСообщение("При пересылке файла "+Файл.Имя+" произошла ошибка: "+ОписаниеОшибки());
			КонецПопытки; 
		КонецЦикла;
		
		//Костенюк Александр-Старт 22.09.2014
		РазмерФайловКаталог = 0;
		НайденныеФайлы = НайтиФайлы(КаталогОбмена + "\", "*.dbf");
		Для Каждого Файл Из НайденныеФайлы Цикл
			РазмерФайловКаталог = РазмерФайловКаталог + Файл.Размер();
		КонецЦикла;
		Если РазмерФайловФТП <> РазмерФайловКаталог Тогда
			Сообщить("Не совпадает суммарный размер файлов фтп" + "(" + РазмерФайловФТП + " байт)" + " и локального каталога" + "(" + РазмерФайловКаталог + " байт). " "Необходимо выполнить загрузку повторно!", СтатусСообщения.Внимание);
		КонецЕсли;
		//Костенюк Александр-Финиш 22.09.2014
		
	КонецЕсли; 

КонецПроцедуры

//Процедура ВыгрузитьНаFTP() Экспорт
//	
//	Если ЗагружатьСохранятьФайлыНаFTP Тогда
//		
//		Адресс		= "";
//		Каталог		= "";
//		Файл		= "";
//		
//		РазложитьСсылку(АдрессFTP,Адресс,Каталог,Файл);
//		
//		Попытка
//			ФТПСоединение = Новый FTPСоединение(Адресс,21,Пользователь,Пароль,,);
//		Исключение
//			ВывестиСообщение(ОписаниеОшибки());
//			Возврат;
//		КонецПопытки;
//		
//		Массивфайлов = НайтиФайлы(КаталогОбмена,ПрефиксФайлов+"*.dbf");
//		
//		Для каждого Файл Из Массивфайлов Цикл
//			Попытка
//				ФТПСоединение.Записать(Файл.ПолноеИмя,Каталог+"\"+Файл.Имя);
//				УдалитьФайлы(Файл.ПолноеИмя); // если файл отослан удалим его
//				ВывестиСообщение("Отослан файл "+Файл.Имя);
//			Исключение
//				ВывестиСообщение("При пересылке файла "+Файл.Имя+" произошла ошибка: "+ОписаниеОшибки());
//			КонецПопытки; 
//		КонецЦикла; 

//	КонецЕсли; 
//	
//КонецПроцедуры

//Процедура ВыгрузитьРеализации() Экспорт
//	
//	xB = Новый xBase();
//	xB.Поля.Добавить("Date", 3,,);
//	xB.Поля.Добавить("SposOpl", 1, 1,);
//	xB.Поля.Добавить("KodSpos", 1, 5,);
//	xB.Поля.Добавить("IDKodSp", 2, 100,);
//	xB.Поля.Добавить("IDSpOpl", 2, 100,);
//	xB.Поля.Добавить("KodName", 2, 48,);
//	Если СекторнаяВерсия Тогда
//		//xB.Поля.Добавить("BlKod", 2, 10,);
//		xB.Поля.Добавить("BlKod", 2, 11,); //Костенюк Александр 18.10.2013
//	Иначе
//		xB.Поля.Добавить("BlKod", 1, 6,);
//	КонецЕсли;
//	xB.Поля.Добавить("IDKod", 2, 100,);
//	xB.Поля.Добавить("BlName", 2, 50,); 
//	xB.Поля.Добавить("Kol", 1, 12, 3); 
//	xB.Поля.Добавить("Cena", 1, 10, 2);
//	xB.Поля.Добавить("Sum", 1, 10, 2);
//	xB.Поля.Добавить("SumSk", 1, 10, 2); 
//	xB.Поля.Добавить("SumOpl", 1, 10, 2);
//	xB.Поля.Добавить("DLT", 1, 1,); 
//	xB.Поля.Добавить("Frm", 1, 5,);
//	xB.Поля.Добавить("DEPT", "S", 10);
//	xB.Поля.Добавить("IDDEPT", "S", 100);
//	xB.Поля.Добавить("CAT", 1, 5,);
//	xB.Поля.Добавить("nomStol", 2, 25,);
//	xB.Поля.Добавить("CrDate", 2, 8,);
//	xB.Поля.Добавить("Nom", 1, 11,0);//Номер документа;
//	xB.Поля.Добавить("VidOpl", 2, 64,);
//	xB.Поля.Добавить("Kassa",1,2,0);
//	xB.Поля.Добавить("FISCDATE", 3,,);
//	xB.Поля.Добавить("CHARGE", "L",,);
//	xB.Поля.Добавить("EMPLOYEE", 1,11,0);
//	xB.Поля.Добавить("OUTOFSTAFF", 2,16,);
//	xB.Поля.Добавить("WHS", "S", 10, 0); //Костенюк Александр 14.08.2012
//	xB.СоздатьФайл(КаталогОбмена + "\" + ПрефиксФайлов + "real.dbf");
//	
//	xBСпис = Новый xBase();
//	xBСпис.Поля.Добавить("Date", 3,,);
//	xBСпис.Поля.Добавить("Nom", 1, 11,0);//Номер документа;
//	Если СекторнаяВерсия Тогда
//		//xBСпис.Поля.Добавить("BlKod", 2, 10,);
//		xBСпис.Поля.Добавить("BlKod", 2, 11,); //Костенюк Александр 18.10.2013
//	Иначе
//		xBСпис.Поля.Добавить("BlKod", 1, 6,);
//	КонецЕсли;
//	xBСпис.Поля.Добавить("IDKod", 2, 100,);//06/12/2010 Ковтун А.
//	xBСпис.Поля.Добавить("BlName", 2, 50,); 
//	xBСпис.Поля.Добавить("Kol", 1, 12, 3); 
//	xBСпис.Поля.Добавить("DLT", 1, 1,); 
//	xBСпис.Поля.Добавить("Frm", 1, 5,);
//	xBСпис.Поля.Добавить("DEPT", "S", 10);
//	xBСпис.Поля.Добавить("IDDEPT", "S", 100);//06/12/2010 Ковтун А.
//	xBСпис.Поля.Добавить("CAT", 1, 5,);	
//	xBСпис.Поля.Добавить("VidOpl", 2, 64,);
//	xBСпис.Поля.Добавить("EMPLOYEE", "S",10,0);
//	xBСпис.Поля.Добавить("Cena", 1, 10, 2);
//	xBСпис.Поля.Добавить("Sum", 1, 10, 2);
//	xBСпис.Поля.Добавить("SumSk", 1, 10, 2); 
//	xBСпис.Поля.Добавить("SumOpl", 1, 10, 2);
//	xBСпис.Поля.Добавить("WHS", "S", 10, 0); //Костенюк Александр 14.08.2012
//	xBСпис.СоздатьФайл(КаталогОбмена + "\" + ПрефиксФайлов + "spis.dbf");
//		
//	Док = Документы.РеализацияТоваровУслуг.Выбрать(ПериодВыгрузки.ДатаНачала, ПериодВыгрузки.ДатаОкончания);
//	
//	Пока Док.Следующий() Цикл
//		
//		Если Док.Состояние<>Перечисления.СостоянияДокументов.Закрытые Тогда
//			продолжить;
//		КонецЕсли;   
//		
//		//Запрос = Новый Запрос(
//		//"ВЫБРАТЬ
//		//|	Товары.Номенклатура,
//		//|	Товары.ДатаНачалаПериода,
//		//|	Товары.ДатаОкончанияПериода,
//		//|	Товары.Цена КАК Цена,
//		//|	Товары.Сумма КАК Сумма,
//		//|	Товары.СуммаНДС,
//		//|	Товары.СтавкаНДС,
//		//|	Товары.Распечатан,
//		//|	Товары.Количество КАК Количество,
//		//|	Товары.Организация,
//		//|	Товары.НоменклатурнаяГруппа,
//		//|	Товары.Ссылка.Оплата КАК ВидОплаты,
//		//|	Товары.Ссылка.Сотрудник.Код КАК СотрудникКод,
//		////Костенюк Александр-Старт 14.08.2012
//		//|	Товары.Склад,
//		////Костенюк Александр-Финиш 14.08.2012
//		//|	Товары.СуммаСкидки
//		//|ИЗ
//		//|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
//		//|ГДЕ
//		//|	Товары.Ссылка = &Ссылка
//		//|	И Товары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)
//		//|
//		//|ОБЪЕДИНИТЬ ВСЕ
//		//|
//		//|ВЫБРАТЬ
//		//|	Услуги.Номенклатура,
//		//|	Услуги.ДатаНачалаПериода,
//		//|	Услуги.ДатаОкончанияПериода,
//		//|	Услуги.Цена,
//		//|	Услуги.Сумма,
//		//|	Услуги.СуммаНДС,
//		//|	Услуги.СтавкаНДС,
//		//|	Услуги.Распечатан,
//		//|	Услуги.Количество,
//		//|	Услуги.Организация,
//		//|	Услуги.НоменклатурнаяГруппа,
//		//|	Услуги.Ссылка.Оплата,
//		//|	Услуги.Ссылка.Сотрудник.Код,
//		////Костенюк Александр-Старт 14.08.2012
//		//|	Услуги.Склад,
//		////Костенюк Александр-Финиш 14.08.2012
//		//|	Услуги.СуммаСкидки
//		//|ИЗ
//		//|	Документ.РеализацияТоваровУслуг.Услуги КАК Услуги
//		//|ГДЕ
//		//|	Услуги.Ссылка = &Ссылка
//		//|	И Услуги.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)"
//		//);
//		
//		//Костенюк Александр-Старт 18.05.2013
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	Товары.Номенклатура,
//		|	Товары.ДатаНачалаПериода,
//		|	Товары.ДатаОкончанияПериода,
//		|	Товары.Цена КАК Цена,
//		|	Товары.Сумма КАК Сумма,
//		|	Товары.СуммаНДС,
//		|	Товары.СтавкаНДС,
//		|	Товары.Распечатан,
//		|	Товары.Количество КАК Количество,
//		|	Товары.Организация,
//		|	Товары.НоменклатурнаяГруппа,
//		|	Товары.Ссылка.Оплата КАК ВидОплаты,
//		|	Товары.Ссылка.Сотрудник.Код КАК СотрудникКод,
//		|	Товары.Склад,
//		|	Товары.СуммаСкидки
//		|ИЗ
//		|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
//		|ГДЕ
//		|	Товары.Ссылка = &Ссылка
//		|	И Товары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)"
//		);
//		//Костенюк Александр-Финиш 18.05.2013
//		
//		Запрос.УстановитьПараметр("Ссылка",Док.Ссылка);
//		Таблица = Запрос.Выполнить().Выгрузить();
//		Если Таблица.Количество()=0 Тогда
//			Продолжить;
//		КонецЕсли; 
//		
//		СпособОплаты		= ПолучитьСпособОплаты(Док);
//		//Костенюк Александр-Закомментировано 18.10.2012 Если ЗначениеЗаполнено(Док.Оплата.Родитель) Тогда 
//		// не совсем понятно зачем нужна эта проверка
//		// если оплата не состоит ни в какой группе, тогда код оплаты будет пустой при выгрузке
//			ВидОплаты		= НайтиКодОбменаПоСсылке(Док.Оплата);		
//		//Костенюк Александр-Закомментировано 18.10.2012 КонецЕсли;

//		Для каждого СтрокаДока из Таблица Цикл
//			
//			xB.Добавить();
//			xB.Date = Док.Дата; 
//			xB.Nom  = Док.Номер;
//			
//			Если ЗначениеЗаполнено(Док.Оплата) Тогда
//				xB.SposOpl	= СпособОплаты;
//				xB.VidOpl	= ВидОплаты;
//				xB.KodSpos	= Док.Оплата.Код;							
//				xB.IDKodSp	= НайтиКодПоСсылке(Док.Оплата);
//				
//				//Костенюк Александр-Старт 29.05.2013
//				// Перенесено из Пицца33
//				Если ЗначениеЗаполнено(док.Оплата.Родитель) Тогда  
//					xB.IDSpOpl = НайтиКодПоСсылке(док.Оплата.Родитель);		
//				КонецЕсли;
//				//Костенюк Александр-Финиш 29.05.2013
//				
//			Иначе
//				xB.SposOpl = 0;
//			КонецЕсли;
//			
//			Если СекторнаяВерсия Тогда
//				xB.BlKod = НайтиКодОбменаПоСсылке(СтрокаДока.Номенклатура);
//			Иначе
//				xB.IDKod = НайтиКодПоСсылке(СтрокаДока.Номенклатура);
//				xB.BlKod = НайтиКодОбменаПоСсылке(СтрокаДока.Номенклатура);
//			КонецЕсли;
//			
//			xB.BlName	= СокрЛП(СтрокаДока.Номенклатура.Наименование);
//			xB.Kol		= СтрокаДока.Количество;
//			xB.Cena		= СтрокаДока.Цена;
//			xB.Sum		= СтрокаДока.Сумма;   
//			xB.SumSK	= СтрокаДока.СуммаСкидки;
//			xB.SumOpl	= СтрокаДока.Сумма;
//			
//			Если док.Состояние = Перечисления.СостоянияДокументов.Удаленные Тогда
//				xB.DLT = 1;
//			Иначе
//				xB.DLT = 0;
//			КонецЕсли;
//			
//			xB.Frm = СтрокаДока.Организация.Код;   
//			xB.CAT = СтрокаДока.НоменклатурнаяГруппа.Код;
//			
//			//Костенюк Александр-Старт 29.05.2013
//			// Перенесено из Пицца33
//			Если ЗначениеЗаполнено(док.Ресторан) Тогда  
//				xB.IDDEPT = НайтиКодПоСсылке(док.Ресторан);	
//				xB.DEPT = НайтиКодОбменаПоСсылке(док.Ресторан);	
//			КонецЕсли;
//			//Костенюк Александр-Финиш 29.05.2013
//			
//			//Костенюк Александр-Старт 14.08.2012
//			Если ЗначениеЗаполнено(СтрокаДока.Склад) Тогда
//				xB.WHS = СокрЛП(СтрокаДока.Склад.Код);
//			КонецЕсли;
//			//Костенюк Александр-Финиш 14.08.2012

//			xB.nomStol	= док.Стол.Код;
//			xB.CrDate	= Формат(док.Дата, "ДЛФ=T");
//			xB.FISCDATE = док.ДатаОкончанияПериода;
//			xBСпис.EMPLOYEE	= ПРАВ(Док.Сотрудник.Код,4);
//			
//			xB.Записать();    
//			
//		КонецЦикла;
//		
//		ВывестиСообщение("Выгружен " + Док);
//		
//	КонецЦикла;
//	
//	Док = Документы.СписаниеТоваров.Выбрать(ПериодВыгрузки.ДатаНачала, ПериодВыгрузки.ДатаОкончания);
//   	
//	Пока Док.Следующий() Цикл
//		
//		Если Док.Состояние <> Перечисления.СостоянияДокументов.Закрытые Тогда
//			продолжить;
//		КонецЕсли;
//		
//		//Запрос = Новый Запрос(
//		//"ВЫБРАТЬ
//		//|	Товары.Номенклатура,
//		//|	Товары.ДатаНачалаПериода,
//		//|	Товары.ДатаОкончанияПериода,
//		//|	Товары.Цена КАК Цена,
//		//|	Товары.Сумма КАК Сумма,
//		//|	Товары.СуммаНДС,
//		//|	Товары.СтавкаНДС,
//		//|	Товары.Списание,
//		//|	Товары.Распечатан,
//		//|	Товары.Количество КАК Количество,
//		//|	Товары.Организация,
//		//|	Товары.НоменклатурнаяГруппа,
//		//|	Товары.Ссылка.Оплата КАК ВидОплаты,
//		////Костенюк Александр-Старт 14.08.2012
//		//|	Товары.Склад,
//		////Костенюк Александр-Финиш 14.08.2012
//		//|	Товары.Ссылка.Сотрудник.Код КАК СотрудникКод
//		//|ИЗ
//		//|	Документ.СписаниеТоваров.Товары КАК Товары
//		//|ГДЕ
//		//|	Товары.Ссылка = &Ссылка
//		//|	И Товары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)
//		//|
//		//|ОБЪЕДИНИТЬ ВСЕ
//		//|
//		//|ВЫБРАТЬ
//		//|	Услуги.Номенклатура,
//		//|	Услуги.ДатаНачалаПериода,
//		//|	Услуги.ДатаОкончанияПериода,
//		//|	Услуги.Цена,
//		//|	Услуги.Сумма,
//		//|	Услуги.СуммаНДС,
//		//|	Услуги.СтавкаНДС,
//		//|	Услуги.Списание,
//		//|	Услуги.Распечатан,
//		//|	Услуги.Количество,
//		//|	Услуги.Организация,
//		//|	Услуги.НоменклатурнаяГруппа,
//		//|	Услуги.Ссылка.Оплата,
//		////Костенюк Александр-Старт 14.08.2012
//		//|	Услуги.Склад,
//		////Костенюк Александр-Финиш 14.08.2012
//		//|	Услуги.Ссылка.Сотрудник.Код
//		//|ИЗ
//		//|	Документ.СписаниеТоваров.Услуги КАК Услуги
//		//|ГДЕ
//		//|	Услуги.Ссылка = &Ссылка
//		//|	И Услуги.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)"
//		//);
//		
//		//Костенюк Александр-Старт 20.05.2013
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	Товары.Номенклатура,
//		|	Товары.ДатаНачалаПериода,
//		|	Товары.ДатаОкончанияПериода,
//		|	Товары.Цена КАК Цена,
//		|	Товары.Сумма КАК Сумма,
//		|	Товары.СуммаНДС,
//		|	Товары.СтавкаНДС,
//		|	Товары.Списание,
//		|	Товары.Распечатан,
//		|	Товары.Количество КАК Количество,
//		|	Товары.Организация,
//		|	Товары.НоменклатурнаяГруппа,
//		|	Товары.Ссылка.Оплата КАК ВидОплаты,
//		|	Товары.Склад,
//		|	Товары.Ссылка.Сотрудник.Код КАК СотрудникКод
//		|ИЗ
//		|	Документ.СписаниеТоваров.Товары КАК Товары
//		|ГДЕ
//		|	Товары.Ссылка = &Ссылка
//		|	И Товары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)"
//		);
//		//Костенюк Александр-Финиш 20.05.2013
//		
//		Запрос.УстановитьПараметр("Ссылка",Док.Ссылка);
//		Таблица = Запрос.Выполнить().Выгрузить();
//		Если Таблица.Количество()=0 Тогда
//			Продолжить;
//		КонецЕсли; 

//		Для каждого СтрокаДока из Таблица Цикл
//			
//			xBСпис.Добавить();
//			xBСпис.Date	= док.Дата; 
//			xBСпис.Nom	= Док.Номер;
//			Если СекторнаяВерсия Тогда
//				xBСпис.BlKod = НайтиКодОбменаПоСсылке(СтрокаДока.Номенклатура);
//			Иначе
//				xBСпис.IDKod = НайтиКодПоСсылке(СтрокаДока.Номенклатура);
//				xBСпис.BlKod = НайтиКодОбменаПоСсылке(СтрокаДока.Номенклатура);
//			КонецЕсли;
//			xBСпис.BlName	= СокрЛП(СтрокаДока.Номенклатура.Наименование);
//			xBСпис.Kol		= СтрокаДока.Количество;
//			Если док.Состояние = Перечисления.СостоянияДокументов.Удаленные Тогда
//				xBСпис.DLT = 1;
//			Иначе
//				xBСпис.DLT = 0;
//			КонецЕсли;
//			xBСпис.Frm		= СтрокаДока.Организация.Код;   
//			xBСпис.CAT		= СтрокаДока.НоменклатурнаяГруппа.Код;
//			xBСпис.EMPLOYEE	= ПРАВ(СтрокаДока.СотрудникКод,7);
//			xBСпис.Cena		= СтрокаДока.Цена;
//			xBСпис.Sum		= СтрокаДока.Сумма;   
//			xBСпис.SumSK	= 0; // в списании нет скидки
//			xBСпис.SumOpl	= СтрокаДока.Сумма;
//			ВидОплаты		= "";
//			Если ЗначениеЗаполнено(СтрокаДока.ВидОплаты.Родитель) Тогда
//				ВидОплаты	= НайтиКодОбменаПоСсылке(СтрокаДока.ВидОплаты);
//			КонецЕсли;
//			xBСпис.VidOpl	= ВидОплаты;
//			
//			//Костенюк Александр-Старт 14.08.2012
//			Если ЗначениеЗаполнено(СтрокаДока.Склад) Тогда
//				xBСпис.WHS = СокрЛП(СтрокаДока.Склад.Код);
//			КонецЕсли;
//			//Костенюк Александр-Финиш 14.08.2012
//			
//			//Костенюк Александр-Старт 29.05.2013
//			// Перенесено из Пицца33 
//			Если ЗначениеЗаполнено(док.Ресторан) Тогда  
//				xBСпис.IDDEPT = НайтиКодПоСсылке(док.Ресторан);	
//				xBСпис.DEPT = НайтиКодОбменаПоСсылке(док.Ресторан);	
//			КонецЕсли;
//			//Костенюк Александр-Финиш 29.05.2013
//			
//			xBСпис.Записать();
//			
//		КонецЦикла;
//		
//		ВывестиСообщение("Выгружен " + Док);
//		
//	КонецЦикла;	
//	
//	xB.ЗакрытьФайл();
//	xBСпис.ЗакрытьФайл();
//	
//КонецПроцедуры

Процедура ВыгрузитьРабочееВремя() Экспорт
	           
	База = Новый xBase();
	База.Поля.Добавить("EMPLOYEE","S",10,0);
	База.Поля.Добавить("OUTOFSTAFF","S",16,);
	База.Поля.Добавить("INITALSTAT","S",16,);
	База.Поля.Добавить("INITALDATE","D",,);
	База.Поля.Добавить("INITALTIME","S",8,);
	База.Поля.Добавить("FINALSTAT","S",16,);
	База.Поля.Добавить("FINALDATE","D",,);
	База.Поля.Добавить("FINALTIME","S",8,);
	База.Поля.Добавить("DURATION","N",8,0);
	База.Поля.Добавить("SHIFT","S",10,);
	База.СоздатьФайл(КаталогОбмена + "\" + ПрефиксФайлов + "table.dbf");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Табель.Ссылка КАК Ссылка,
	|	Табель.НомерСтроки,
	|	Табель.ВидВремени,
	|	Табель.ВнештатныйСотрудник,
	|	Табель.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	Табель.ДатаОкончанияПериода,
	|	Табель.Дней,
	|	Табель.Идентификатор,
	|	Табель.КодВнештатногоСотрудника,
	|	Табель.Организация,
	|	Табель.Сотрудник КАК Сотрудник,
	|	Табель.Часов,
	|	Табель.Ссылка.РабочаяСмена КАК РабочаяСмена
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК Табель
	|ГДЕ
	|	Табель.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
	|	И Табель.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	ДатаНачалаПериода
	|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ДатаС",ПериодВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаПо",КонецДня(ПериодВыгрузки.ДатаОкончания));
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокументВыгружаемый = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		База.Добавить();
		
		Если ДокументВыгружаемый<>Выборка.Ссылка Тогда
			ДокументВыгружаемый = Выборка.Ссылка;
			ВывестиСообщение("Выгружается "+ДокументВыгружаемый);
		КонецЕсли; 
		
		Если Выборка.ВнештатныйСотрудник Тогда
			База.OUTOFSTAFF	= "1";
			Попытка
				База.EMPLOYEE = Число(Выборка.КодВнештатногоСотрудника);
			Исключение
				База.EMPLOYEE = 0;
			КонецПопытки; 
		Иначе
			База.OUTOFSTAFF	= "0"; 
			База.EMPLOYEE	= ПРАВ(СОКРЛП(Выборка.Сотрудник.Код),10);
		КонецЕсли;
		
		База.INITALSTAT	= "0";//Выборка.ВидВремени.Идентификатор(); 
		База.INITALDATE	= Выборка.ДатаНачалаПериода; 
		База.INITALTIME	= Формат(Дата(1,1,1,Час(Выборка.ДатаНачалаПериода),Минута(Выборка.ДатаНачалаПериода),0),"ДФ=HH:mm"); 
		База.FINALSTAT	= "0";//Выборка.ВидВремени.Идентификатор(); 
		База.FINALDATE	= Выборка.ДатаОкончанияПериода; 
		База.FINALTIME	= Формат(Дата(1,1,1,Час(Выборка.ДатаОкончанияПериода),Минута(Выборка.ДатаОкончанияПериода),0),"ДФ=HH:mm"); 
		База.DURATION	= (Выборка.ДатаОкончанияПериода - Выборка.ДатаНачалаПериода)/60;
		Если (ЗначениеЗаполнено(Выборка.РабочаяСмена)) Тогда
			База.SHIFT = ПРАВ(Выборка.РабочаяСмена.Код,7); // В семерке ограничение в 7 символов
		КонецЕсли;
		База.Записать();
		
	КонецЦикла;

	База.ЗакрытьФайл();
	
КонецПроцедуры

//Процедура ЗагрузитьТовары() Экспорт
//Костенюк Александр-Старт 01.10.2012
Процедура ЗагрузитьТовары(Адрес, МассивМодифицируемых) Экспорт
//Костенюк Александр-Финиш 01.10.2012
	
	//База = Новый XBase(КаталогОбмена+"\"+ПрефиксФайлов+"menu.dbf","",Истина);
	//Костенюк Александр-Старт 01.10.2012
	// Получение из временного хранилища
	База = ПолучитьИзВременногоХранилища(Адрес);
	//Костенюк Александр-Финиш 01.10.2012
	Если НЕ База.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ База.Первая() Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикМаксимум				= База.КоличествоЗаписей();
	СчетчикОбработаных			= 0;
	ЕдиницаИзмерения			= Константы.ЕдиницаИзмеренияШтучк.Получить();
	ОсновнаяОрганизация			= Константы.ОсновнаяОрганизация.Получить();
	
	//Пока Истина Цикл
	Пока НЕ База.ВКонце() Цикл //Костенюк Александр 24.09.2013
		
		СчетчикОбработаных		= СчетчикОбработаных + 1;
		
		Идентификатор			= СОКРЛП(База.ELEMID);
		ИдентификаторРодителя	= СОКРЛП(База.PARNTID);
		КодОбмена				= СОКРЛП(База.SYNC);
		КодГруппы				= СОКРЛП(База.PARNCODE); //Костенюк Александр 11.11.2014
		Наименование			= СОКРЛП(База.NAME);
		НаименованиеПолное		= СОКРЛП(База.NAMEFULL);
		Если НЕ ЗначениеЗаполнено(НаименованиеПолное) Тогда
			НаименованиеПолное	= Наименование;
		КонецЕсли; 
		НаименованиеСокращенное	= СОКРЛП(База.NAMEKASSA);
		Если НЕ ЗначениеЗаполнено(НаименованиеСокращенное) Тогда
			НаименованиеСокращенное = Наименование;
		КонецЕсли;
		АкцизныйНалог 			= ?(База.EXCISE = 1, Истина, Ложь); //Костенюк Александр 04.02.2015
		ПенсионныйФонд			= ?(База.PENSFOND=1,Истина,Ложь);
		НоменклатурнаяГруппа	= СОКРЛП(База.CATNAME);
		ТипНоменклатуры			= СОКРЛП(База.VIDMENU);
		Если ТипНоменклатуры="Модификатор" Тогда
			ТипНоменклатуры	= Перечисления.ТипыНоменклатуры.Модификатор;
		ИначеЕсли ТипНоменклатуры="УсловиеПриготовления" Тогда
			ТипНоменклатуры	= Перечисления.ТипыНоменклатуры.Условие;
		ИначеЕсли ТипНоменклатуры="Услуга" Тогда
			ТипНоменклатуры	= Перечисления.ТипыНоменклатуры.Блюдо; // Хотя это должно быть услугой, услуги у нас пока не работают, Саша сказал грузить как блюдо
		ИначеЕсли ТипНоменклатуры = "Сертификат" Тогда
			ТипНоменклатуры	= Перечисления.ТипыНоменклатуры.Сертификат; //Костенюк Александр 10.12.2014
		Иначе
			ТипНоменклатуры	= Перечисления.ТипыНоменклатуры.Блюдо;
		КонецЕсли;
		Цена					= База.COST;
		////Костенюк Александр-Старт 24.09.2013
		//// Товар с нулевой ценой не должен грузиться
		//Если (База.GROUP = 0) И (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Блюдо) Тогда
		//	Если Цена = 0 Тогда
		//		Сообщить("Товар " +""""+ Наименование +""""+ " Цена = 0, пропуск", СтатусСообщения.Внимание);
		//		База.Следующая();
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		////Костенюк Александр-Финиш 24.09.2013
		Модифицируемый			= (?(База.MODIF=1,Истина,Ложь)) И (ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Блюдо);
		ЕстьВМеню				= ?(База.NOMENU=1,Ложь,Истина);
		ПометкаУдаления			= ?(База.DELETE = 1, Истина, Ложь); //Костенюк Александр 06.03.2014
		
		//НайденнаяСсылка			= НайтиСсылкуЭлемента(Идентификатор);
		
		//Костенюк Александр-Старт 10.11.2014
		Если РежимЗагрузки = 0 Тогда
			НайденнаяСсылка = НайтиСсылкуЭлемента(Идентификатор);
		Иначе
			НайденнаяСсылка = НайтиСсылкуПоКоду(КодОбмена);
		КонецЕсли;
		//Костенюк Александр-Финиш 10.11.2014
		
		ОбъектЭлемента			= Неопределено;
		Если НайденнаяСсылка=Неопределено Тогда
			//Костенюк Александр-Старт 06.03.2014
			Если ПометкаУдаления Тогда
				База.Следующая();
				Продолжить;
			КонецЕсли;
			//Костенюк Александр-Финиш 06.03.2014
			Если База.GROUP=1 Тогда
				ОбъектЭлемента	= Справочники.Номенклатура.СоздатьГруппу();
			Иначе
				ОбъектЭлемента	= Справочники.Номенклатура.СоздатьЭлемент();
			КонецЕсли;
		Иначе
			ОбъектЭлемента = НайденнаяСсылка.ПолучитьОбъект();
			УстановитьРеквизит(ОбъектЭлемента, "ПометкаУдаления", ПометкаУдаления); //Костенюк Александр 06.03.2014
		КонецЕсли;
		
		Если ОбъектЭлемента<>Неопределено Тогда
			
			//УстановитьРеквизит(ОбъектЭлемента,"Родитель",НайтиСсылкуЭлемента(ИдентификаторРодителя));
			
			//Костенюк Александр-Старт 12.11.2014
			Если РежимЗагрузки = 0 Тогда
				УстановитьРеквизит(ОбъектЭлемента,"Родитель",НайтиСсылкуЭлемента(ИдентификаторРодителя));
			Иначе
				УстановитьРеквизит(ОбъектЭлемента,"Родитель",НайтиСсылкуПоКоду(КодГруппы));
			КонецЕсли;
			//Костенюк Александр-Финиш 12.11.2014
			
			Если НЕ ЗначениеЗаполнено(ОбъектЭлемента.Наименование) ИЛИ НЕ НеОбновлятьНаименованиеНоменклатуры Тогда
				УстановитьРеквизит(ОбъектЭлемента,"Наименование",Наименование);
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ОбъектЭлемента.НоменклатурнаяГруппа)
				ИЛИ (НЕ НеОбновлятьНоменклатурныеГруппыНоменклатуры) Тогда
				УстановитьРеквизит(ОбъектЭлемента,"НоменклатурнаяГруппа",ПолучитьНоменклатурнуюГруппу(НоменклатурнаяГруппа,ОсновнаяОрганизация,Истина));
			КонецЕсли;
			
			Если Не ОбъектЭлемента.ЭтоГруппа Тогда
				
				УстановитьРеквизит(ОбъектЭлемента,"АкцизныйНалог",АкцизныйНалог); //Костенюк Александр 04.02.2015
				УстановитьРеквизит(ОбъектЭлемента,"ПенсионныйФонд",ПенсионныйФонд);
				УстановитьРеквизит(ОбъектЭлемента,"Артикул",КодОбмена);
				
				ЗаполненоНаименование = ЗначениеЗаполнено(ОбъектЭлемента.НаименованиеПолное)
								И ЗначениеЗаполнено(ОбъектЭлемента.НаименованиеСокращенное);
				
				Если ОбъектЭлемента.ЭтоНовый()
					ИЛИ НЕ ЗаполненоНаименование
					ИЛИ НЕ НеОбновлятьНаименованиеНоменклатуры Тогда
					УстановитьРеквизит(ОбъектЭлемента,"НаименованиеПолное",НаименованиеПолное);
					УстановитьРеквизит(ОбъектЭлемента,"НаименованиеСокращенное",НаименованиеСокращенное);
				КонецЕсли;
				
				//// Установим цену
				//Если ЗначениеЗаполнено(Цена) Тогда
				//	УстановитьРеквизит(ОбъектЭлемента,"Ценовой",Истина);
				//Иначе
				//	УстановитьРеквизит(ОбъектЭлемента,"Ценовой",Ложь);
				//КонецЕсли;
				
				УстановитьРеквизит(ОбъектЭлемента, "Ценовой", Истина); //Костенюк Александр 19.05.2014
				
				Если НЕ ЗначениеЗаполнено(ОбъектЭлемента.СтавкаНДС) Тогда
					//УстановитьРеквизит(ОбъектЭлемента,"СтавкаНДС",Перечисления.СтавкиНДС.НДС20);
					//Костенюк Александр-Старт 20.09.2013
					ОсновнаяСтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();
					СтавкаНДС = ?(ЗначениеЗаполнено(ОсновнаяСтавкаНДС), ОсновнаяСтавкаНДС, Перечисления.СтавкиНДС.НДС20);
					УстановитьРеквизит(ОбъектЭлемента,"СтавкаНДС", СтавкаНДС);
					//Костенюк Александр-Финиш 20.09.2013
				КонецЕсли; 
				
				УстановитьРеквизит(ОбъектЭлемента,"ТипНоменклатуры",ТипНоменклатуры);
				УстановитьРеквизит(ОбъектЭлемента,"Модифицируемый",Модифицируемый);
				// Чистяков Павел 27.09.2011 11:47:32 
				// В файле не было единицы измерения.
				// Пока не придумают как быть гружу все со штуками.
				//УстановитьРеквизит(ОбъектЭлемента,"БазоваяЕдиницаИзмерения",ЕдиницаИзмерения);
				
				//Костенюк Александр-Старт 11.06.2012
				// Единицу измерения устанавливаем только для новых элементов
				// Для существующих элементов оставляем все как есть
				Если ОбъектЭлемента.ЭтоНовый() Тогда
					УстановитьРеквизит(ОбъектЭлемента, "БазоваяЕдиницаИзмерения", ЕдиницаИзмерения);
					УстановитьРеквизит(ОбъектЭлемента, "Печатаемый", Истина);
					Если ЗначениеЗаполнено(ОбъектЭлемента.Родитель) И (ЗначениеЗаполнено(ОбъектЭлемента.Родитель.ГруппаБлюда)) Тогда
						 УстановитьРеквизит(ОбъектЭлемента, "ГруппаБлюда", ОбъектЭлемента.Родитель.ГруппаБлюда);
					КонецЕсли;
				КонецЕсли;
				//Костенюк Александр-Финиш 11.06.2012
				
			КонецЕсли; 
			
			Попытка
				
				НадоЗарегистрироватьСсылку = ОбъектЭлемента.ЭтоНовый();
				
				Если ОбъектЭлемента.Модифицированность() Тогда
					Если ОбъектЭлемента.ЭтоНовый() Тогда
						ВывестиСообщение("Создана номенклатура: "+ОбъектЭлемента);
					Иначе
						ВывестиСообщение("Изменена номенклатура: "+ОбъектЭлемента);
					КонецЕсли; 
					ОбъектЭлемента.Записать();
					//Костенюк Александр-Старт 03.04.2013
					// Если объект модифицирован и установлен признак "Модифицируемый"
					Если НЕ ОбъектЭлемента.ЭтоГруппа Тогда
						Если ОбъектЭлемента.Модифицируемый Тогда
							МассивМодифицируемых.Добавить(ОбъектЭлемента.Ссылка);
						КонецЕсли;
					КонецЕсли;
					//Костенюк Александр-Финиш 03.04.2013
				КонецЕсли;
				
				Если НЕ ОбъектЭлемента.ЭтоГруппа Тогда
					УстановитьЦену(ОбъектЭлемента,Цена);
					//Костенюк Александр-Закомментировано 28.09.2012 ОбновитьВМеню(ОбъектЭлемента,ЕстьВМеню);
				КонецЕсли; 
				
				Если НадоЗарегистрироватьСсылку Тогда
					ДобавитьЗаписьВРегистрСинонимов(ОбъектЭлемента,Идентификатор,КодОбмена);
				КонецЕсли; 
				
			Исключение
				
				ВывестиСообщение(ОписаниеОшибки());
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если (СчетчикОбработаных%25)=0 Тогда
			//ВывестиСообщение("Обработано "+СчетчикОбработаных+" из " + СчетчикМаксимум + "...");
		КонецЕсли; 
		
		Если НЕ База.Следующая() Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если База.Открыта() Тогда
		База.ЗакрытьФайл();
	КонецЕсли;
	
КонецПроцедуры

//Процедура ЗагрузитьМодификаторы() Экспорт
//Костенюк Александр-Старт 01.10.2012
Процедура ЗагрузитьМодификаторы(Адрес) Экспорт
//Костенюк Александр-Финиш 01.10.2012

	Возврат;

	//База = Новый XBase(КаталогОбмена+"\"+ПрефиксФайлов+"modif.dbf","",Истина);
	//Костенюк Александр-Старт 01.10.2012
	// Получение из временного хранилища
	База = ПолучитьИзВременногоХранилища(Адрес);
	//Костенюк Александр-Финиш 01.10.2012
	Если НЕ База.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ База.Первая() Тогда
		Возврат;
	КонецЕсли;
	
	// Вынужденная мера - мы должны удалять регистр, чтобы если
	// что-то поменяют в бухгалтерии, оно не осталось здесь
	// Анализ того, что надо удалять а что оставлять не представляется возможным, так как мы не знаем
	// какие записи в регистре являются загруженными из бухгалтерии, а какие присвоили руками
	// хотя вопрос конечно открыт
	НаборРегистра				= РегистрыСведений.МодификаторыНоменклатуры.СоздатьНаборЗаписей();
	НаборРегистра.Записать();
	
	СчетчикМаксимум				= База.КоличествоЗаписей();
	СчетчикОбработаных			= 0;
	
	Пока Истина Цикл
		
		СчетчикОбработаных		= СчетчикОбработаных + 1;
		Идентификатор			= СОКРЛП(База.ELEMID);
		КодОбмена				= СОКРЛП(База.SYNC);
		КодГруппы				= СОКРЛП(База.PARNCODE); //Костенюк Александр 11.11.2014
		Наименование			= СОКРЛП(База.NAME);
		КодРодителя				= СОКРЛП(База.OWNERID);
		КодРодителяГруппы		= СОКРЛП(База.PARNTID);
		ПометкаУдаления			= ?(База.DELETE = 1, Истина, Ложь); //Костенюк Александр 06.03.2014
		
		Если База.GROUP=0 Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СинонимыОбъектов.Объект КАК Номенклатура,
			|	МодификаторыНоменклатуры.Ссылка КАК Модификатор
			|ИЗ
			|	РегистрСведений.СинонимыОбъектов КАК СинонимыОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МодификаторыНоменклатуры КАК МодификаторыНоменклатуры
			|		ПО СинонимыОбъектов.Объект = МодификаторыНоменклатуры.Номенклатура
			|ГДЕ
			|	СинонимыОбъектов.ИнформационнаяСистема = &ИнформационнаяСистема
			|	И СинонимыОбъектов.КодОбмена = &КодОбмена"
			);
			Запрос.УстановитьПараметр("ИнформационнаяСистема",ИнформационнаяСистема);
			Запрос.УстановитьПараметр("КодОбмена",КодОбмена);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйМодификатор	= Выборка.Модификатор;
				НайденнаяНоменклатура	= Выборка.Номенклатура;
				Если НЕ ЗначениеЗаполнено(НайденныйМодификатор) Тогда
					//Костенюк Александр-Старт 06.03.2014
					Если ПометкаУдаления Тогда
						База.Следующая();
						Продолжить;
					КонецЕсли;
					//Костенюк Александр-Финиш 06.03.2014
					ОбъектЭлемента = Справочники.МодификаторыНоменклатуры.СоздатьЭлемент();
					ОбъектЭлемента.Номенклатура = НайденнаяНоменклатура;
					ОбъектЭлемента.Актуальность = Истина;
					ОбъектЭлемента.Наименование = Наименование; // Вообще наименование должно присваиваться при записи, но были отзывы что не всегда
					//ОбъектЭлемента.Родитель		= НайтиСсылкуЭлемента(КодРодителяГруппы);
					
					//Костенюк Александр-Старт 10.11.2014
					Если РежимЗагрузки = 0 Тогда
						ОбъектЭлемента.Родитель = НайтиСсылкуЭлемента(КодРодителяГруппы);
					Иначе
						ОбъектЭлемента.Родитель = НайтиСсылкуПоКоду(КодГруппы);
					КонецЕсли;
					//Костенюк Александр-Финиш 10.11.2014
					
					Попытка
						ОбъектЭлемента.Записать();
						ВывестиСообщение("Создан модификатор: "+ОбъектЭлемента);
						НайденныйМодификатор = ОбъектЭлемента.Ссылка;
					Исключение
						ВывестиСообщение(ОписаниеОшибки());
					КонецПопытки; 
				КонецЕсли; 
				Если ЗначениеЗаполнено(НайденныйМодификатор) Тогда
					Набор = РегистрыСведений.МодификаторыНоменклатуры.СоздатьМенеджерЗаписи();
					Набор.Номенклатура	= НайтиСсылкуПоКоду(КодРодителя);
					Набор.Модификатор	= НайденныйМодификатор;
					Набор.Актуальность	= Истина;
					Попытка
						Набор.Записать(Истина);
					Исключение
						ВывестиСообщение(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли; 
			КонецЕсли;
			
		Иначе
			//РодительГруппы		= НайтиСсылкуЭлемента(КодРодителяГруппы);
			//НайденнаяСсылка		= НайтиСсылкуЭлемента(Идентификатор);
			
			//Костенюк Александр-Старт 10.11.2014
			// Режим загрузки
			Если РежимЗагрузки = 0 Тогда
				РодительГруппы = НайтиСсылкуЭлемента(КодРодителяГруппы);
				НайденнаяСсылка = НайтиСсылкуЭлемента(Идентификатор);
			Иначе
				РодительГруппы = НайтиСсылкуПоКоду(КодГруппы);
				НайденнаяСсылка = НайтиСсылкуПоКоду(КодОбмена);
			КонецЕсли;
			//Костенюк Александр-Финиш 10.11.2014
			
			ОбъектЭлемента		= Неопределено;
			НадоЗарегистрироватьСсылку = Ложь;
			Если НайденнаяСсылка=Неопределено Тогда
				//Костенюк Александр-Старт 06.03.2014
				Если ПометкаУдаления Тогда
					База.Следующая();
					Продолжить;
				КонецЕсли;
				//Костенюк Александр-Финиш 06.03.2014
				ОбъектЭлемента	= Справочники.МодификаторыНоменклатуры.СоздатьГруппу();
				ОбъектЭлемента.Актуальность = Истина;
				НадоЗарегистрироватьСсылку	= Истина;
			Иначе
				ОбъектЭлемента	= НайденнаяСсылка.ПолучитьОбъект();
				УстановитьРеквизит(ОбъектЭлемента, "ПометкаУдаления", ПометкаУдаления); //Костенюк Александр 06.03.2014
			КонецЕсли;
			УстановитьРеквизит(ОбъектЭлемента,"Родитель",РодительГруппы);
			УстановитьРеквизит(ОбъектЭлемента,"Наименование",Наименование);
			Попытка
				Если ОбъектЭлемента.Модифицированность() Тогда
					ОбъектЭлемента.Записать();
					ВывестиСообщение("Изменена группа модификаторов: "+ОбъектЭлемента);
				КонецЕсли; 
				Если НадоЗарегистрироватьСсылку Тогда
					ДобавитьЗаписьВРегистрСинонимов(ОбъектЭлемента,Идентификатор,КодОбмена);
				КонецЕсли; 
			Исключение
				ВывестиСообщение(ОписаниеОшибки());
			КонецПопытки; 
			
		КонецЕсли;
		
		Если (СчетчикОбработаных%25)=0 Тогда
			//Состояние("Обработано "+СчетчикОбработаных+" из " + СчетчикМаксимум + "...");
		КонецЕсли; 
		
		Если НЕ База.Следующая() Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

//Процедура ЗагрузитьВидыОплат() Экспорт
//Костенюк Александр-Старт 01.10.2012
Процедура ЗагрузитьВидыОплат(Адрес) Экспорт
//Костенюк Александр-Финиш 01.10.2012
	
	//База = Новый XBase(КаталогОбмена+"\"+ПрефиксФайлов+"payt.dbf","",Истина);
	//Костенюк Александр-Старт 01.10.2012
	// Получение из временного хранилища
	База = ПолучитьИзВременногоХранилища(Адрес);
	//Костенюк Александр-Финиш 01.10.2012
	Если НЕ База.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ База.Первая() Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикМаксимум				= База.КоличествоЗаписей();
	СчетчикОбработаных			= 0;
	
	Пока Истина Цикл
		
		СчетчикОбработаных		= СчетчикОбработаных + 1;
		
		Идентификатор			= СОКРЛП(База.ELEMID);
		ИдентификаторРодителя	= СОКРЛП(База.PARNTID);
		КодОбмена				= СОКРЛП(База.FULLKOD);
		Наименование			= СОКРЛП(База.NAME);
		
		НайденнаяСсылка			= НайтиСсылкуЭлемента(Идентификатор);
		
		ОбъектЭлемента			= Неопределено;
		Если НайденнаяСсылка=Неопределено Тогда
			Если База.GROUP=1 Тогда
				ОбъектЭлемента	= Справочники.ВидыОплатЧекаККМ.СоздатьГруппу();
			Иначе
				ОбъектЭлемента	= Справочники.ВидыОплатЧекаККМ.СоздатьЭлемент();
			КонецЕсли;
		Иначе
			ОбъектЭлемента = НайденнаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбъектЭлемента<>Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбъектЭлемента.Родитель) Тогда
				УстановитьРеквизит(ОбъектЭлемента,"Родитель",НайтиСсылкуЭлемента(ИдентификаторРодителя));
			КонецЕсли; 
			УстановитьРеквизит(ОбъектЭлемента,"Наименование",Наименование);
			
			Если Не ОбъектЭлемента.ЭтоГруппа Тогда
				//УстановитьРеквизит(ОбъектЭлемента,"ТипОплаты",Перечисления.ТипыОплатЧекаККМ.Наличные);
				Если НЕ ОбъектЭлемента.ОтражатьВБухгалтерскомУчете
					И НЕ ОбъектЭлемента.ОтражатьВНалоговомУчете
					И НЕ ОбъектЭлемента.ОтражатьВУправленческомУчете Тогда
					ОбъектЭлемента.ОтражатьВУправленческомУчете = Истина;
				КонецЕсли; 
			КонецЕсли;
			
			Попытка
				
				НадоЗарегистрироватьСсылку = ОбъектЭлемента.ЭтоНовый();
				
				Если ОбъектЭлемента.Модифицированность() Тогда
					Если ОбъектЭлемента.ЭтоНовый() Тогда
						ВывестиСообщение("Создан вид оплаты: "+ОбъектЭлемента);
					Иначе
						ВывестиСообщение("Изменен вид оплаты: "+ОбъектЭлемента);
					КонецЕсли; 
					ОбъектЭлемента.Записать();
				КонецЕсли;
				
				Если НадоЗарегистрироватьСсылку Тогда
					ДобавитьЗаписьВРегистрСинонимов(ОбъектЭлемента,Идентификатор,КодОбмена);
				КонецЕсли; 
				
			Исключение
				
				ВывестиСообщение(ОписаниеОшибки());
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ База.Следующая() Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если База.Открыта() Тогда
		База.ЗакрытьФайл();
	КонецЕсли; 
	
КонецПроцедуры

//Процедура ЗагрузитьРестораны() Экспорт
//Костенюк Александр-Старт 01.10.2012
Процедура ЗагрузитьРестораны(Адрес) Экспорт
//Костенюк Александр-Финиш 01.10.2012

	//База = Новый XBase(КаталогОбмена+"\"+ПрефиксФайлов+"rest.dbf","",Истина);
	//Костенюк Александр-Старт 01.10.2012
	// Получение из временного хранилища
	База = ПолучитьИзВременногоХранилища(Адрес);
	//Костенюк Александр-Финиш 01.10.2012
	Если НЕ База.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ База.Первая() Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикМаксимум				= База.КоличествоЗаписей();
	СчетчикОбработаных			= 0;
	
	Пока Истина Цикл
		
		СчетчикОбработаных		= СчетчикОбработаных + 1;
		
		Если База.GROUP=0 Тогда
			
			Идентификатор			= СОКРЛП(База.ELEMID);
			КодОбмена				= СОКРЛП(База.SYNC);
			Наименование			= СОКРЛП(База.NAME);
			
			//НайденнаяСсылка			= НайтиСсылкуЭлемента(Идентификатор);
			
			//Костенюк Александр-Старт 12.11.2014
			Если РежимЗагрузки = 0 Тогда
				НайденнаяСсылка = НайтиСсылкуЭлемента(Идентификатор);
			Иначе
				НайденнаяСсылка = НайтиСсылкуПоКоду(КодОбмена);
			КонецЕсли;
			//Костенюк Александр-Финиш 12.11.2014
			
			ОбъектЭлемента			= Неопределено;
			Если НайденнаяСсылка=Неопределено Тогда
				ОбъектЭлемента	= Справочники.Рестораны.СоздатьЭлемент();
				УстановитьРеквизит(ОбъектЭлемента,"Актуальность",Истина); //Костенюк Александр 05.08.2013
			Иначе
				ОбъектЭлемента = НайденнаяСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			Если ОбъектЭлемента<>Неопределено Тогда
				
				УстановитьРеквизит(ОбъектЭлемента,"Наименование",Наименование);
				
				Если НЕ ЗначениеЗаполнено(ОбъектЭлемента.НаименованиеПолное) Тогда
					УстановитьРеквизит(ОбъектЭлемента,"НаименованиеПолное",Наименование);
				КонецЕсли; 
				
				Попытка
					
					НадоЗарегистрироватьСсылку = ОбъектЭлемента.ЭтоНовый();
					
					Если ОбъектЭлемента.Модифицированность() Тогда
						Если ОбъектЭлемента.ЭтоНовый() Тогда
							ВывестиСообщение("Создан ресторан: "+ОбъектЭлемента);
						Иначе
							ВывестиСообщение("Изменен ресторан: "+ОбъектЭлемента);
						КонецЕсли; 
						ОбъектЭлемента.Записать();
					КонецЕсли;
					
					Если НадоЗарегистрироватьСсылку Тогда
						ДобавитьЗаписьВРегистрСинонимов(ОбъектЭлемента,Идентификатор,КодОбмена);
					КонецЕсли; 
					
				Исключение
					
					ВывестиСообщение(ОписаниеОшибки());
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если НЕ База.Следующая() Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если База.Открыта() Тогда
		База.ЗакрытьФайл();
	КонецЕсли;
	
КонецПроцедуры

//Процедура ЗагрузитьСотрудников() Экспорт
//Костенюк Александр-Старт 01.10.2012
Процедура ЗагрузитьСотрудников(Адрес) Экспорт
//Костенюк Александр-Финиш 01.10.2012

	Если НЕ ЗагружатьСотрудников Тогда
		Возврат;
	КонецЕсли; 
	
	//База = Новый XBase(КаталогОбмена+"\"+ПрефиксФайлов+"staf.dbf","",Истина);
	//Костенюк Александр-Старт 01.10.2012
	// Получение из временного хранилища
	База = ПолучитьИзВременногоХранилища(Адрес);
	//Костенюк Александр-Финиш 01.10.2012
	Если НЕ База.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ База.Первая() Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикМаксимум				= База.КоличествоЗаписей();
	СчетчикОбработаных			= 0;
	ОрганизазацияПоУмолчанию	= Константы.ОсновнаяОрганизация.Получить();
	ЗагруженныеСсылки			= Новый Соответствие;
	
	Пока Истина Цикл
		
		СчетчикОбработаных		= СчетчикОбработаных + 1;
		
		Идентификатор			= СОКРЛП(База.ELEMID);
		ИдентификаторРодителя	= СОКРЛП(База.PARNTID);
		КодОбмена				= СОКРЛП(База.SYNC);
		Наименование			= СОКРЛП(База.NAME);
		НаименованиеПолное		= СОКРЛП(База.NAMEF);
		НаименованиеОрганизации = СОКРЛП(База.NAMEO);
		ПометкаУдаления			= СОКРЛП(База.DELETE);
		
		Если ПометкаУдаления="0" Тогда
			
			// Администратор 04.07.2012 10:35:31 
			// при загрузке бухгалтерия ищет сотрудника по коду!!!!
			// причем использует только цифровую его часть, то есть префикс она подставляет сама
			// поэтому при выгрузке надо брать последние 4-5 цифр
			КодЭлемента				= СОКРЛП(База.KOD);
			
			НайденнаяСсылка			= НайтиСсылкуЭлемента(Идентификатор);
			ОбъектЭлемента			= Неопределено;
			Если НайденнаяСсылка=Неопределено Тогда
				Если База.GROUP=1 Тогда
					ОбъектЭлемента	= Справочники.СотрудникиОрганизаций.СоздатьГруппу();
					ОбъектЭлемента.УстановитьНовыйКод("БУ-");
				Иначе
					ОбъектЭлемента	= Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
					ОбъектЭлемента.Актуальность = Истина;
				КонецЕсли;
			Иначе
				ОбъектЭлемента = НайденнаяСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			Если ОбъектЭлемента<>Неопределено Тогда
				
				УстановитьРеквизит(ОбъектЭлемента,"Родитель",НайтиСсылкуЭлемента(ИдентификаторРодителя));
				УстановитьРеквизит(ОбъектЭлемента,"ПометкаУдаления",Ложь);
				УстановитьРеквизит(ОбъектЭлемента,"Актуальность",Истина);
				
				Если НЕ ЗначениеЗаполнено(ОбъектЭлемента.Наименование)
					ИЛИ НЕ НеОбновлятьНаименованиеНоменклатуры Тогда
					УстановитьРеквизит(ОбъектЭлемента,"Наименование",Наименование);
				КонецЕсли; 
				
				Если Не ОбъектЭлемента.ЭтоГруппа Тогда
					УстановитьРеквизит(ОбъектЭлемента,"Код",КодЭлемента);
					УстановитьРеквизит(ОбъектЭлемента,"Организация",ОрганизазацияПоУмолчанию);
				КонецЕсли; 
				
				Попытка
					
					НадоЗарегистрироватьСсылку = ОбъектЭлемента.ЭтоНовый();
					
					Если ОбъектЭлемента.Модифицированность() Тогда
						Если ОбъектЭлемента.ЭтоНовый() Тогда
							ВывестиСообщение("Создан сотрудник: "+ОбъектЭлемента);
						Иначе
							ВывестиСообщение("Изменен сотрудник: "+ОбъектЭлемента);
						КонецЕсли; 
						ОбъектЭлемента.Записать();
					КонецЕсли;
					
					ЗагруженныеСсылки.Вставить(ОбъектЭлемента.Ссылка,Истина);
					
					Если НадоЗарегистрироватьСсылку Тогда
						ДобавитьЗаписьВРегистрСинонимов(ОбъектЭлемента,Идентификатор,КодОбмена);
					КонецЕсли; 
					
				Исключение
					
					ВывестиСообщение(ОписаниеОшибки());
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если НЕ База.Следующая() Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если База.Открыта() Тогда
		База.ЗакрытьФайл();
	КонецЕсли;
	
	// Администратор 24.07.2012 14:06:02 
	// Если стоит эта галочка необходимо удалять сотрудников
	// не присутствующих в загрузке
	Если ПолностьюОбновлятьСотрудников Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ"
		);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗагруженныеСсылки[Выборка.Ссылка]=Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектЭлемента = Выборка.Ссылка.ПолучитьОбъект();
			УстановитьРеквизит(ОбъектЭлемента,"ПометкаУдаления",Истина);
			УстановитьРеквизит(ОбъектЭлемента,"Актуальность",Ложь);
			
			Если ОбъектЭлемента.Модифицированность() Тогда
				ВывестиСообщение("Удален сотрудник: "+ОбъектЭлемента);
				ОбъектЭлемента.Записать();
			КонецЕсли; 

		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

//Процедура ЗагрузитьСмены() Экспорт
//Костенюк Александр-Старт 01.10.2012
Процедура ЗагрузитьСмены(Адрес) Экспорт
//Костенюк Александр-Финиш 01.10.2012

	Если НЕ ЗагружатьСотрудников Тогда
		Возврат;
	КонецЕсли; 
	
	//База = Новый XBase(КаталогОбмена+"\"+ПрефиксФайлов+"smen.dbf","",Истина);
	//Костенюк Александр-Старт 01.10.2012
	// Получение из временного хранилища
	База = ПолучитьИзВременногоХранилища(Адрес);
	//Костенюк Александр-Финиш 01.10.2012
	Если НЕ База.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ База.Первая() Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикМаксимум				= База.КоличествоЗаписей();
	СчетчикОбработаных			= 0;
	
	Пока Истина Цикл
		
		СчетчикОбработаных		= СчетчикОбработаных + 1;
		
		Если База.GROUP=0 Тогда
			
			Идентификатор			= СОКРЛП(База.ELEMID);
			КодОбмена				= СОКРЛП(База.SYNC);
			Наименование			= СОКРЛП(База.NAME);
			
			НайденнаяСсылка			= НайтиСсылкуЭлемента(Идентификатор);
			ОбъектЭлемента			= Неопределено;
			Если НайденнаяСсылка=Неопределено Тогда
				ОбъектЭлемента	= Справочники.РабочиеСмены.СоздатьЭлемент();
			Иначе
				ОбъектЭлемента = НайденнаяСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			Если ОбъектЭлемента<>Неопределено Тогда
				
				УстановитьРеквизит(ОбъектЭлемента,"Наименование",Наименование);
				
				Попытка
					
					НадоЗарегистрироватьСсылку = ОбъектЭлемента.ЭтоНовый();
					
					Если ОбъектЭлемента.Модифицированность() Тогда
						Если ОбъектЭлемента.ЭтоНовый() Тогда
							ВывестиСообщение("Создана смена: "+ОбъектЭлемента);
						Иначе
							ВывестиСообщение("Изменена смена: "+ОбъектЭлемента);
						КонецЕсли; 
						ОбъектЭлемента.Записать();
					КонецЕсли;
					
					Если НадоЗарегистрироватьСсылку Тогда
						ДобавитьЗаписьВРегистрСинонимов(ОбъектЭлемента,Идентификатор,КодОбмена);
					КонецЕсли; 
					
				Исключение
					
					ВывестиСообщение(ОписаниеОшибки());
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если НЕ База.Следующая() Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если База.Открыта() Тогда
		База.ЗакрытьФайл();
	КонецЕсли;
	
КонецПроцедуры

////Костенюк Александр-Закомментировано 04.11.2014
//// Процедура перенесена ниже
//Процедура ВыполнитьВыгрузку() Экспорт
//	
//	ВыгрузитьРеализации();
//	ВыгрузитьРабочееВремя();
//	
//	ПеревестиРасширенияФайловВНижнийРегистр(КаталогОбмена); //Костенюк Александр 24.04.2012

//	ВыгрузитьНаFTP();
//	
//КонецПроцедуры

Процедура ВыполнитьЗагрузку() Экспорт
	
	ЗагрузитьСFTP();
	
	//Костенюк Александр-Старт 01.08.2013
	// Помещаем файлы во временное хранилище
	АдресМеню 			= ПоместитьФайлВоВременноеХранилище(КаталогОбмена+ПрефиксФайлов+"menu.dbf");
	АдресМодиф 			= ПоместитьФайлВоВременноеХранилище(КаталогОбмена+ПрефиксФайлов+"modif.dbf");
	АдресТипыЦен		= ПоместитьФайлВоВременноеХранилище(КаталогОбмена+ПрефиксФайлов+"price.dbf");
	АдресСебестоимость 	= ПоместитьФайлВоВременноеХранилище(КаталогОбмена+ПрефиксФайлов+"cost.dbf");
	АдресВидыОплат 		= ПоместитьФайлВоВременноеХранилище(КаталогОбмена+ПрефиксФайлов+"payt.dbf");
	АдресСмены 			= ПоместитьФайлВоВременноеХранилище(КаталогОбмена+ПрефиксФайлов+"smen.dbf");
	АдресСотрудники 	= ПоместитьФайлВоВременноеХранилище(КаталогОбмена+ПрефиксФайлов+"staf.dbf");
	АдресРестораны 		= ПоместитьФайлВоВременноеХранилище(КаталогОбмена+ПрефиксФайлов+"rest.dbf");
	//Костенюк Александр-Финиш 01.08.2013
	
	ИспользоватьАвтоматическоеМеню = Константы.ИспользоватьАвтоматическоеМеню.Получить(); //Костенюк Александр 18.10.2013
	
	Если ЗагружатьМеню Тогда
		//ЗагрузитьТовары();
		//ЗагрузитьМодификаторы();
		//Костенюк Александр-Старт 01.10.2012
		МассивМодифицируемых = Новый Массив;
		ЗагрузитьТовары(АдресМеню, МассивМодифицируемых);
		ЗагрузитьМодификаторы(АдресМодиф);
		УстановитьФлагиМодифицируемыхТоваров(МассивМодифицируемых);
		Если ИспользоватьАвтоматическоеМеню Тогда
			Справочники.Меню.ОбновитьАвтоматическоеМеню();
		КонецЕсли;
		//Костенюк Александр-Финиш 01.10.2012
	КонецЕсли;
	//Костенюк Александр-Старт 12.05.2014
	Если ЗагружатьТипыЦен Тогда
		ЗагрузитьТипыЦен(АдресТипыЦен);
	КонецЕсли;
	//Костенюк Александр-Финиш 12.05.2014
	Если ЗагружатьВидыОплат Тогда
		//ЗагрузитьВидыОплат();
		//Костенюк Александр-Старт 01.10.2012
		ЗагрузитьВидыОплат(АдресВидыОплат);
		//Костенюк Александр-Финиш 01.10.2012
	КонецЕсли; 
	Если ЗагружатьСотрудников Тогда
		//ЗагрузитьРестораны();
		//ЗагрузитьСмены();
		//ЗагрузитьСотрудников();
		//Костенюк Александр-Старт 01.10.2012
		ЗагрузитьСмены(АдресСмены);
		ЗагрузитьСотрудников(АдресСотрудники);
		//Костенюк Александр-Финиш 01.10.2012
	КонецЕсли;
	
	//Костенюк Александр-Старт 17.03.12
	Если ЗагружатьРестораны Тогда
		ЗагрузитьРестораны(АдресРестораны);
	КонецЕсли;
	//Костенюк Александр-Финиш 17.03.12
	
	ЗагрузитьСебестоимость(АдресСебестоимость); //Костенюк Александр 22.10.2014
	
КонецПроцедуры

//Костенюк Александр-Старт 24.04.2012
// Процедура переводит расширения файлов в нижний регистр
Процедура ПеревестиРасширенияФайловВНижнийРегистр(Каталог) Экспорт
	СписокФайлов = НайтиФайлы(СокрЛП(Каталог), "*.dbf");
	Для Каждого Файл ИЗ СписокФайлов Цикл
		// разберем имя файла на составляющие
		Путь 				= СокрЛП(Файл.Путь);
		ИмяБезРасширения 	= СокрЛП(Файл.ИмяБезРасширения);
		Расширение 			= СокрЛП(Файл.Расширение);
		НовоеИмяФайла 		= Путь + ИмяБезРасширения + НРег(Расширение);
		ПереместитьФайл(СокрЛП(Файл.ПолноеИмя), СокрЛП(НовоеИмяФайла)); 
	КонецЦикла;
КонецПроцедуры
//Костенюк Александр-Финиш 24.04.2012

//Костенюк Александр-Старт 01.10.2012
//
// Функция помещает данные файла во временное хранилище
//
// Параметры:
// Путь - Тип: Строка. Путь к файлу.
//
// Возвращаемое значение:
// Адрес - Тип: Строка. Адрес во временном хранилище.
//
Функция ПоместитьФайлВоВременноеХранилище(Путь) Экспорт
	
	Данные 	= Новый XBase(Путь, "", Истина);
	Адрес 	= ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции
//Костенюк Александр-Финиш 01.10.2012

//Костенюк Александр-Старт 03.04.2013
//
// Процедура установки флагов для модифицируемых товаров
//
// Параметры:
// МассивТоваров - Тип: Массив. Массив модифицируемых товаров
// 
Процедура УстановитьФлагиМодифицируемыхТоваров(МассивТоваров) Экспорт
	
	Если МассивТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаМассива Из МассивТоваров Цикл
		СправочникОбъект = СтрокаМассива.ПолучитьОбъект();
		СправочникОбъект.Модифицируемый = Истина;
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ВывестиСообщение(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры // УстановитьФлагиМодифицируемыхТоваров()
//Костенюк Александр-Финиш 03.04.2013

//Костенюк Александр-Старт 12.05.2014
//
// Процедура производит загрузку типов цен
//
// Параметры:
// Адрес - Тип: Строка. Путь к файлу.
// 
Процедура ЗагрузитьТипыЦен(Адрес) Экспорт
	
	Файл = ПолучитьИзВременногоХранилища(Адрес);
	
	Если НЕ Файл.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Файл.Первая() Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	Файл.Первая();
	
	Пока НЕ Файл.ВКонце() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ELEMID		= СокрЛП(Файл.ELEMID);
		KOD			= СокрЛП(Файл.KOD);
		NAME		= СокрЛП(Файл.NAME);
		COST_ID 	= СокрЛП(Файл.COST_ID);
		COST_KOD 	= СокрЛП(Файл.COST_KOD);
		COST_NAME 	= СокрЛП(Файл.COST_NAME);
		COST		= Файл.COST;
		SYNC		= СокрЛП(Файл.SYNC); // не используется
		
		// Тип цен
		Если РежимЗагрузки = 0 Тогда
			НайденнаяСсылка = НайтиСсылкуЭлемента(COST_ID);
		Иначе
			НайденнаяСсылка = НайтиСсылкуПоКоду(COST_KOD);
		КонецЕсли;
		
		ЭтоНовый = Ложь;
		Записывать = Ложь;
		Ошибка = Ложь;
		
		Если НайденнаяСсылка = Неопределено Тогда
			СправочникОбъект = Справочники.ТипыЦен.СоздатьЭлемент();
			СправочникОбъект.Наименование = COST_NAME;
			ЭтоНовый = Истина;
			Записывать = Истина;
			ТекстСообщения = "Создан тип цен";
		Иначе
			Если СокрЛП(НайденнаяСсылка.Наименование) <> COST_NAME Тогда
				СправочникОбъект = НайденнаяСсылка.ПолучитьОбъект();
				СправочникОбъект.Наименование = COST_NAME;
				Записывать = Истина;
				ТекстСообщения = "Изменен тип цен";
			КонецЕсли;
			ТипЦены = НайденнаяСсылка;
		КонецЕсли;
		
		Если Записывать Тогда
			Попытка
				СправочникОбъект.Записать();
				Если ЭтоНовый Тогда
					ДобавитьЗаписьВРегистрСинонимов(СправочникОбъект, COST_ID, COST_KOD);
				КонецЕсли;
				ТипЦены = СправочникОбъект.Ссылка;
				Сообщить(ТекстСообщения +" "+ СправочникОбъект);
			Исключение
				Ошибка = Истина;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		Если Ошибка Тогда
			Файл.Следующая();
			Продолжить;
		КонецЕсли;
		
		// Номенклатура
		Если РежимЗагрузки = 0 Тогда
			Номенклатура = НайтиСсылкуЭлемента(ELEMID);
		Иначе
			Номенклатура = НайтиСсылкуПоКоду(KOD);
		КонецЕсли;
		
		Если Номенклатура = Неопределено Тогда
			Сообщить("Не найден товар " +""""+ NAME +""""+ " пропуск");
			Файл.Следующая();
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи 				= РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 		= ТекущаяДата();
		МенеджерЗаписи.Номенклатура = Номенклатура;
		МенеджерЗаписи.ТипЦены 		= ТипЦены;
		МенеджерЗаписи.Цена 		= COST;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Файл.Следующая();
			Продолжить;
		КонецПопытки;
		
		Если НЕ Файл.Следующая() Тогда
			Прервать;
		КонецЕсли;
						
	КонецЦикла;
	
	Если Файл.Открыта() Тогда
		Файл.ЗакрытьФайл();
	КонецЕсли;
		
КонецПроцедуры
//Костенюк Александр-Финиш 12.05.2014

//Костенюк Александр-Старт 02.06.2014
Функция СформироватьЗапросПоПродажам(НачалоПериода, КонецПериода, Ресторан)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Заказы.Ресторан КАК Ресторан,
	               |	Заказы.Ссылка КАК Документ,
	               |	Заказы.Номенклатура,
	               |	Заказы.НоменклатурнаяГруппа,
	               |	Заказы.Организация,
	               |	Заказы.Оплата,
	               |	Чеки.РозничнаяТочка КАК Касса,
	               |	Заказы.Склад,
	               |	Заказы.НаВынос,
	               |	Заказы.Количество КАК Количество,
	               |	Заказы.КоличествоУточненное,
	               |	Заказы.Цена КАК Цена,
	               |	Заказы.Сумма КАК Сумма,
	               |	Заказы.СуммаБезСкидок КАК СуммаБезСкидок,
	               |	Заказы.СуммаСкидки КАК СуммаСкидки,
	               |	Заказы.СуммаНаценки КАК СуммаНаценки,
	               |	Заказы.СуммаАкцизногоНалога,
	               |	Заказы.СуммаСертификата,
	               |	Заказы.СуммаСкидкиНаСертификат
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	               |		РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	               |		РеализацияТоваровУслугТовары.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |		РеализацияТоваровУслугТовары.Организация КАК Организация,
	               |		РеализацияТоваровУслугТовары.Склад КАК Склад,
	               |		РеализацияТоваровУслугТовары.Ссылка.Оплата КАК Оплата,
	               |		РеализацияТоваровУслугТовары.Ссылка.Ресторан КАК Ресторан,
	               |		РеализацияТоваровУслугТовары.НаВынос КАК НаВынос,
	               |		СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	               |		СУММА(РеализацияТоваровУслугТовары.КоличествоУточненное) КАК КоличествоУточненное,
	               |		СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	               |		СУММА(РеализацияТоваровУслугТовары.СуммаБезСкидок) КАК СуммаБезСкидок,
	               |		СУММА(РеализацияТоваровУслугТовары.СуммаНаценки) КАК СуммаНаценки,
	               |		СУММА(РеализацияТоваровУслугТовары.СуммаСкидки) КАК СуммаСкидки,
	               |		РеализацияТоваровУслугТовары.Цена КАК Цена,
	               |		СУММА(РеализацияТоваровУслугТовары.СуммаАкцизногоНалога) КАК СуммаАкцизногоНалога,
	               |		СУММА(РеализацияТоваровУслугТовары.СуммаСертификата) КАК СуммаСертификата,
	               |		СУММА(РеализацияТоваровУслугТовары.СуммаСкидкиНаСертификат) КАК СуммаСкидкиНаСертификат
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |	ГДЕ
	               |		РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |		И РеализацияТоваровУслугТовары.Ссылка.Ресторан = &Ресторан
	               |		И РеализацияТоваровУслугТовары.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Закрытые)
	               |		И РеализацияТоваровУслугТовары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		РеализацияТоваровУслугТовары.Номенклатура,
	               |		РеализацияТоваровУслугТовары.Организация,
	               |		РеализацияТоваровУслугТовары.НоменклатурнаяГруппа,
	               |		РеализацияТоваровУслугТовары.Ссылка,
	               |		РеализацияТоваровУслугТовары.Склад,
	               |		РеализацияТоваровУслугТовары.Ссылка.Оплата,
	               |		РеализацияТоваровУслугТовары.Ссылка.Ресторан,
	               |		РеализацияТоваровУслугТовары.Цена,
	               |		РеализацияТоваровУслугТовары.НаВынос) КАК Заказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			РозничнаяВыручка.Регистратор КАК Регистратор,
	               |			РозничнаяВыручка.Регистратор.Сделка КАК Сделка,
	               |			РозничнаяВыручка.РозничнаяТочка КАК РозничнаяТочка,
	               |			РозничнаяВыручка.Ресторан КАК Ресторан,
	               |			РозничнаяВыручка.Организация КАК Организация,
	               |			РозничнаяВыручка.Оплата КАК Оплата
	               |		ИЗ
	               |			РегистрНакопления.РозничнаяВыручка КАК РозничнаяВыручка
	               |		ГДЕ
	               |			РозничнаяВыручка.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |			И РозничнаяВыручка.ВидРозничнойВыручки = ЗНАЧЕНИЕ(Перечисление.ВидыРозничнойВыручки.Продажа)) КАК Чеки
	               |		ПО Заказы.Ресторан = Чеки.Ресторан
	               |			И Заказы.Оплата = Чеки.Оплата
	               |			И Заказы.Ссылка = Чеки.Сделка
	               |			И Заказы.Организация = Чеки.РозничнаяТочка.Владелец
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Заказы.Ссылка.Дата
	               |ИТОГИ ПО
	               |	Ресторан";			   
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Если ЗначениеЗаполнено(Ресторан) Тогда
		Запрос.УстановитьПараметр("Ресторан", Ресторан);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслугТовары.Ссылка.Ресторан = &Ресторан", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции
//Костенюк Александр-Финиш 02.06.2014

//Костенюк Александр-Старт 02.06.2014
Функция СформироватьЗапросПоСписаниям(НачалоПериода, КонецПериода, Ресторан)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписаниеТоваров.Ресторан КАК Ресторан,
	               |	СписаниеТоваров.Ссылка КАК Документ,
	               |	СписаниеТоваровТовары.Номенклатура,
	               |	СписаниеТоваровТовары.НоменклатурнаяГруппа,
	               |	СписаниеТоваровТовары.Организация,
	               |	СписаниеТоваровТовары.Склад,
	               |	ЛОЖЬ КАК НаВынос,
	               |	СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
	               |	СУММА(СписаниеТоваровТовары.КоличествоУточненное) КАК КоличествоУточненное,
	               |	СписаниеТоваровТовары.Цена КАК Цена,
	               |	СУММА(СписаниеТоваровТовары.Сумма) КАК Сумма,
	               |	СУММА(СписаниеТоваровТовары.СуммаАкцизногоНалога) КАК СуммаАкцизногоНалога,
	               |	0 КАК СуммаСкидки
	               |ИЗ
	               |	Документ.СписаниеТоваров КАК СписаниеТоваров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	               |		ПО СписаниеТоваров.Ссылка = СписаниеТоваровТовары.Ссылка
	               |ГДЕ
	               |	СписаниеТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И СписаниеТоваров.Ресторан = &Ресторан
	               |	И СписаниеТоваров.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Закрытые)
	               |	И СписаниеТоваровТовары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СписаниеТоваров.Ссылка,
	               |	СписаниеТоваровТовары.Номенклатура,
	               |	СписаниеТоваровТовары.Организация,
	               |	СписаниеТоваровТовары.НоменклатурнаяГруппа,
	               |	СписаниеТоваровТовары.Склад,
	               |	СписаниеТоваровТовары.Цена,
	               |	СписаниеТоваров.Ресторан
	               |ИТОГИ ПО
	               |	Ресторан";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Если ЗначениеЗаполнено(Ресторан) Тогда
		Запрос.УстановитьПараметр("Ресторан", Ресторан);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписаниеТоваров.Ресторан = &Ресторан", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции
//Костенюк Александр-Финиш 02.06.2014

//Костенюк Александр-Старт 04.11.2014
Функция СформироватьЗапросПоТабелям(НачалоПериода, КонецПериода, Ресторан)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Табель.Ссылка.Ресторан КАК Ресторан,
	               	|	Табель.Ссылка КАК Документ,
	               	|	Табель.НомерСтроки,
	               	|	Табель.ВидВремени,
	               	|	Табель.ВнештатныйСотрудник,
	               	|	Табель.ДатаНачалаПериода КАК ДатаНачалаПериода,
	               	|	Табель.ДатаОкончанияПериода,
	               	|	Табель.Дней,
	               	|	Табель.Идентификатор,
	               	|	Табель.КодВнештатногоСотрудника,
	               	|	Табель.Организация,
	               	|	Табель.Сотрудник КАК Сотрудник,
	               	|	Табель.Часов
	               	|ИЗ
	               	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК Табель
	               	|ГДЕ
	               	|	Табель.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               	|	И Табель.Ссылка.Проведен
	               	|	И Табель.Ссылка.Ресторан = &Ресторан
	               	|
	               	|УПОРЯДОЧИТЬ ПО
	               	|	Документ,
	               	|	Сотрудник,
	               	|	ДатаНачалаПериода
	               	|ИТОГИ ПО
	               	|	Ресторан
	               	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Если ЗначениеЗаполнено(Ресторан) Тогда
		Запрос.УстановитьПараметр("Ресторан", Ресторан);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Табель.Ссылка.Ресторан = &Ресторан", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции
//Костенюк Александр-Финиш 04.11.2014 

//Костенюк Александр-Старт 22.10.2014
//
// Процедура производит загрузку себестоимости блюд
//
// Параметры:
// Адрес - Тип: Строка. Путь к файлу.
// 
Процедура ЗагрузитьСебестоимость(Адрес) Экспорт
	
	Если НЕ ЗагружатьСебестоимость Тогда
		Возврат;
	КонецЕсли;
	
	Файл = ПолучитьИзВременногоХранилища(Адрес);
	
	Если НЕ Файл.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Файл.Первая() Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	Файл.Первая();
	
	Пока НЕ Файл.ВКонце() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		DATE		= Файл.DATE;
		RESTID		= СокрЛП(Файл.RESTID);
		RESTCODE	= СокрЛП(Файл.RESTCODE);
		RESTNAME	= СокрЛП(Файл.RESTNAME);
		COSTID 		= СокрЛП(Файл.COSTID);
		COSTCODE 	= СокрЛП(Файл.COSTCODE);
		COSTNAME 	= СокрЛП(Файл.COSTNAME);
		ELEMID		= СокрЛП(Файл.ELEMID);
		ELEMCODE	= СокрЛП(Файл.ELEMCODE);
		ELEMNAME	= СокрЛП(Файл.ELEMNAME);
		FOODCOST	= Файл.FOODCOST;
		
		// Ресторан
		Если РежимЗагрузки = 0 Тогда
			Ресторан = НайтиСсылкуЭлемента(RESTID);
		Иначе
			Ресторан = НайтиСсылкуПоКоду(RESTCODE);
		КонецЕсли;
		
		Если Ресторан = Неопределено Тогда
			Сообщить("Не найден ресторан " +""""+ RESTNAME +""""+ " пропуск");
			Файл.Следующая();
			Продолжить;
		КонецЕсли;
		
		// Номенклатура
		Если РежимЗагрузки = 0 Тогда
			Номенклатура = НайтиСсылкуЭлемента(ELEMID);
		Иначе
			Номенклатура = НайтиСсылкуПоКоду(ELEMCODE);
		КонецЕсли;
		
		Если Номенклатура = Неопределено Тогда
			Сообщить("Не найден товар " +""""+ ELEMNAME +""""+ " пропуск");
			Файл.Следующая();
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи 					= РегистрыСведений.СебестоимостьНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= НачалоМесяца(DATE);
		МенеджерЗаписи.Номенклатура 	= Номенклатура;
		МенеджерЗаписи.Ресторан 		= Ресторан;
		МенеджерЗаписи.Себестоимость 	= FOODCOST;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Файл.Следующая();
			Продолжить;
		КонецПопытки;
		
		Если НЕ Файл.Следующая() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если Файл.Открыта() Тогда
		Файл.ЗакрытьФайл();
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 22.10.2014

//Костенюк Александр-Старт 04.11.2014
Процедура ВыполнитьВыгрузку(НачалоПериода = Неопределено, КонецПериода = Неопределено, Ресторан = Неопределено, Каталог = "", Адрес = "", Пользователь = "", Пароль = "", Выгружать = Истина, УдалятьФайлы = Истина, СекторнаяВерсия = Неопределено, ИнформационнаяСистема = Неопределено, РежимВыгрузки = 1) Экспорт
	
	ВремяНачала = ТекущаяДата();
	Сообщить("Время начала: " + ВремяНачала);
	
	РегламентноеЗадание 	= (НЕ ЗначениеЗаполнено(НачалоПериода)) И (НЕ ЗначениеЗаполнено(КонецПериода));
	НачалоПериода 			= ?(ЗначениеЗаполнено(НачалоПериода), НачалоПериода, НачалоДня(ТекущаяДата() - 86400));
	КонецПериода 			= ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, КонецДня(ТекущаяДата() - 86400));
	//НачалоПериода 			= НачалоДня('20150326');
	//КонецПериода 			= КонецДня('20150326');
	Каталог 				= ?(ЗначениеЗаполнено(Каталог), РаботаСФайлами.НормализоватьКаталог(Каталог), ПолучитьКаталог());
	Адрес 					= ?(ЗначениеЗаполнено(Адрес), Адрес, ПолучитьАдрес());
	Пользователь 			= ?(ЗначениеЗаполнено(Пользователь), Пользователь, ПолучитьПользователя());
	Пароль 					= ?(ЗначениеЗаполнено(Пароль), Пароль, ПолучитьПароль());
	СекторнаяВерсия 		= ?(ЗначениеЗаполнено(СекторнаяВерсия), СекторнаяВерсия, ПолучитьСекторнуюВерсию());
	ИнформационнаяСистема 	= ?(ЗначениеЗаполнено(ИнформационнаяСистема), ИнформационнаяСистема, ПолучитьИнформационнуюСистему());
	
	ВыгрузитьПродажи(НачалоПериода, КонецПериода, Ресторан, Каталог, СекторнаяВерсия, ИнформационнаяСистема, РегламентноеЗадание, РежимВыгрузки);
	ВыгрузитьСписания(НачалоПериода, КонецПериода, Ресторан, Каталог, СекторнаяВерсия, ИнформационнаяСистема, РегламентноеЗадание, РежимВыгрузки);
	ВыгрузитьТабели(НачалоПериода, КонецПериода, Ресторан, Каталог);
	ПеревестиРасширенияФайловВНижнийРегистр(Каталог);
	ВыгрузитьНаFTP(Адрес, Пользователь, Пароль, Каталог, Выгружать, УдалятьФайлы);
	
	ВремяОкончания 	= ТекущаяДата();
	ВремяОбработки	= ВремяОкончания - ВремяНачала; //в секундах
	Длительность 	= ОбщегоНазначения.ЧЧММСС(ВремяОбработки);
	Сообщить(                                                         
	"Время окончания : " + ВремяОкончания + Символы.ПС +
	"Длительность 	: " + Длительность 
	, СтатусСообщения.Информация);
	
КонецПроцедуры
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 04.11.2014
Функция ПолучитьАдрес() Экспорт
	Возврат СокрЛП(Константы.АдресСервераОбменаЧеками.Получить());
КонецФункции
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 04.11.2014
Функция ПолучитьПользователя() Экспорт
	Возврат СокрЛП(Константы.ПользовательСервераОбменаЧеками.Получить());
КонецФункции
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 04.11.2014
Функция ПолучитьПароль() Экспорт
	Возврат СокрЛП(Константы.ПарольСервераОбменаЧеками.Получить());
КонецФункции
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 04.11.2014
Функция ПолучитьКаталог() Экспорт
	Возврат РаботаСФайлами.НормализоватьКаталог(СокрЛП(Константы.КаталогОбмена.Получить()));
КонецФункции
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 24.11.2014
Функция ПолучитьСекторнуюВерсию() Экспорт
	Возврат Константы.СекторнаяВерсияБухгалтерии.Получить();
КонецФункции
//Костенюк Александр-Финиш 24.11.2014

//Костенюк Александр-Старт 24.11.2014
Функция ПолучитьИнформационнуюСистему() Экспорт
	Возврат Константы.ОсновнаяИнформационнаяСистема.Получить();
КонецФункции
//Костенюк Александр-Финиш 24.11.2014

//Костенюк Александр-Старт 04.11.2014
Процедура ВыгрузитьПродажи(НачалоПериода, КонецПериода, Ресторан, Каталог, СекторнаяВерсия, ИнформационнаяСистема, РегламентноеЗадание, РежимВыгрузки)
	
	// Формируем пустые файлы по ресторанам
	// Независимо от того были продажи/списания или нет
	// Это необходимо для Бухгалтерии
	Если ЗначениеЗаполнено(Ресторан) Тогда
		ПолноеИмяФайла = Каталог + СокрЛП(Ресторан.Префикс) + "real.dbf";
		Файл = Новый xBase();
		СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, "Продажи");
		Файл.СоздатьФайл(ПолноеИмяФайла); 
		Файл.Записать(); 
		Файл.ЗакрытьФайл(); 
		Файл = Неопределено;
	Иначе
		Если РежимВыгрузки = 0 Тогда 
			МассивРесторанов = Справочники.Рестораны.ПолучитьАктуальныеРестораны();
			Для Каждого СтрокаМассива Из МассивРесторанов Цикл
				ПолноеИмяФайла = Каталог + СокрЛП(СтрокаМассива.Префикс) + "real.dbf";
				Файл = Новый xBase();
				СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, "Продажи");
				Файл.СоздатьФайл(ПолноеИмяФайла);
				Файл.Записать();
				Файл.ЗакрытьФайл(); 
				Файл = Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Формируем таблицу состояний успешных обменов данными
	ТекущаяДата = ТекущаяДата();
	ТаблицаСостояниийУспешныхОбменовДанными = РегистрыСведений.СостоянияУспешныхОбменовДанными.ПолучитьТаблицуСостояниий(, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
	// Запрос по продажам
	РезультатЗапроса = СформироватьЗапросПоПродажам(НачалоПериода, КонецПериода, Ресторан);
	ВыборкаПоРесторанам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ресторан");
	
	Если РежимВыгрузки = 0 Тогда
		
		Пока ВыборкаПоРесторанам.Следующий() Цикл
			
			ТекущийРесторан = ВыборкаПоРесторанам.Ресторан;
			
			Если ТаблицаСостояниийУспешныхОбменовДанными.Количество() Тогда
				НайденнаяСтрока = ТаблицаСостояниийУспешныхОбменовДанными.Найти(ТекущийРесторан, "Ресторан");
				Если НайденнаяСтрока <> Неопределено Тогда
					РазностьДат = ОбщегоНазначения.ПолучитьРазностьДат(НайденнаяСтрока.ДатаОкончания, ?(РегламентноеЗадание, ТекущаяДата, КонецПериода), "ДЕНЬ");
					Если РазностьДат > 0 Тогда
						Сообщить("Файл выгрузки real.dbf по ресторану " +""""+ ТекущийРесторан +""""+ " не сформирован. Необходимо запустить обмен и выполнить выгрузку повторно.", СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПолноеИмяФайла = Каталог + СокрЛП(ТекущийРесторан.Префикс) + "real.dbf";
			Файл = Новый xBase();
			СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, "Продажи");
			Файл.СоздатьФайл(ПолноеИмяФайла);
			Файл.АвтоСохранение = Истина;
			
			ВыборкаПоДокументам = ВыборкаПоРесторанам.Выбрать();
			
			Пока ВыборкаПоДокументам.Следующий() Цикл
				
				ДобавитьСтрокуВФайл(ВыборкаПоДокументам, Файл, СекторнаяВерсия, ИнформационнаяСистема);
				
			КонецЦикла;
			
			Файл.ЗакрытьФайл();	Файл = Неопределено;
			
		КонецЦикла;
		
	Иначе
		
		ПолноеИмяФайла = Каталог + "real.dbf";
		Файл = Новый xBase();
		СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, "Продажи");
		Файл.СоздатьФайл(ПолноеИмяФайла);
		Файл.АвтоСохранение = Истина;
		
		Пока ВыборкаПоРесторанам.Следующий() Цикл
			
			ВыборкаПоДокументам = ВыборкаПоРесторанам.Выбрать();
			
			Пока ВыборкаПоДокументам.Следующий() Цикл
				
				ДобавитьСтрокуВФайл(ВыборкаПоДокументам, Файл, СекторнаяВерсия, ИнформационнаяСистема, "Продажи");
				
			КонецЦикла;
			
		КонецЦикла;
		
		Файл.ЗакрытьФайл();	Файл = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 04.11.2014
Процедура ВыгрузитьСписания(НачалоПериода, КонецПериода, Ресторан, Каталог, СекторнаяВерсия, ИнформационнаяСистема, РегламентноеЗадание, РежимВыгрузки)
	
	Если ЗначениеЗаполнено(Ресторан) Тогда
		ПолноеИмяФайла = Каталог + СокрЛП(Ресторан.Префикс) + "spis.dbf";
		Файл = Новый xBase();
		СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, "Списания");
		Файл.СоздатьФайл(ПолноеИмяФайла);
		Файл.Записать();
		Файл.ЗакрытьФайл(); 
		Файл = Неопределено;
	Иначе
		// Формируем пустые файлы по ресторанам
		// Независимо от того были продажи/списания или нет
		// Это необходимо для Бухгалтерии
		Если РежимВыгрузки = 0 Тогда
			МассивРесторанов = Справочники.Рестораны.ПолучитьАктуальныеРестораны();
			Для Каждого СтрокаМассива Из МассивРесторанов Цикл
				ПолноеИмяФайла = Каталог + СокрЛП(СтрокаМассива.Префикс) + "spis.dbf";
				Файл = Новый xBase();
				СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, "Списания");
				Файл.СоздатьФайл(ПолноеИмяФайла);
				Файл.Записать();
				Файл.ЗакрытьФайл(); 
				Файл = Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Формируем таблицу состояний успешных обменов данными
	ТекущаяДата = ТекущаяДата();
	ТаблицаСостояниийУспешныхОбменовДанными = РегистрыСведений.СостоянияУспешныхОбменовДанными.ПолучитьТаблицуСостояниий(, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
	// Запрос по списаниям
	РезультатЗапроса = СформироватьЗапросПоСписаниям(НачалоПериода, КонецПериода, Ресторан);
	ВыборкаПоРесторанам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ресторан");
	
	Если РежимВыгрузки = 0 Тогда
		
		Пока ВыборкаПоРесторанам.Следующий() Цикл
			
			ТекущийРесторан = ВыборкаПоРесторанам.Ресторан;
			
			Если ТаблицаСостояниийУспешныхОбменовДанными.Количество() Тогда
				НайденнаяСтрока = ТаблицаСостояниийУспешныхОбменовДанными.Найти(ТекущийРесторан, "Ресторан");
				Если НайденнаяСтрока <> Неопределено Тогда
					РазностьДат = ОбщегоНазначения.ПолучитьРазностьДат(НайденнаяСтрока.ДатаОкончания, ?(РегламентноеЗадание, ТекущаяДата, КонецПериода), "ДЕНЬ");
					Если РазностьДат > 0 Тогда
						Сообщить("Файл выгрузки spis.dbf по ресторану " +""""+ ТекущийРесторан +""""+ " не сформирован. Необходимо запустить обмен и выполнить выгрузку повторно.", СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПолноеИмяФайла = Каталог + СокрЛП(ТекущийРесторан.Префикс) + "spis.dbf";
			Файл = Новый xBase();
			СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, "Списания");
			Файл.СоздатьФайл(ПолноеИмяФайла);
			Файл.АвтоСохранение = Истина;
			
			ВыборкаПоДокументам = ВыборкаПоРесторанам.Выбрать();
			
			Пока ВыборкаПоДокументам.Следующий() Цикл
				
				ДобавитьСтрокуВФайл(ВыборкаПоДокументам, Файл, СекторнаяВерсия, ИнформационнаяСистема, "Списания");
				
			КонецЦикла;
			
			Файл.ЗакрытьФайл(); Файл = Неопределено;
			
		КонецЦикла;
		
	Иначе
		
		ПолноеИмяФайла = Каталог + "spis.dbf";
		Файл = Новый xBase();
		СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, "Списания");
		Файл.СоздатьФайл(ПолноеИмяФайла);
		Файл.АвтоСохранение = Истина;
		
		Пока ВыборкаПоРесторанам.Следующий() Цикл
			
			ВыборкаПоДокументам = ВыборкаПоРесторанам.Выбрать();
			
			Пока ВыборкаПоДокументам.Следующий() Цикл
				
				ДобавитьСтрокуВФайл(ВыборкаПоДокументам, Файл, СекторнаяВерсия, ИнформационнаяСистема, "Списания");
				
			КонецЦикла;
			
		КонецЦикла;
		
		Файл.ЗакрытьФайл();	Файл = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 04.11.2014
Процедура ВыгрузитьТабели(НачалоПериода, КонецПериода, Ресторан, Каталог) Экспорт
	
	РезультатЗапроса = СформироватьЗапросПоТабелям(НачалоПериода, КонецПериода, Ресторан);
	ВыборкаПоРесторанам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ресторан");
	
	Пока ВыборкаПоРесторанам.Следующий() Цикл
		
		Ресторан = ВыборкаПоРесторанам.Ресторан;
		ПолноеИмяФайла = Каталог + СокрЛП(Ресторан.Префикс) + "table.dbf";
		
		Файл = Новый xBase();
		Файл.Поля.Добавить("EMPLOYEE","S",10,0);
		Файл.Поля.Добавить("OUTOFSTAFF","S",16,);
		Файл.Поля.Добавить("INITALSTAT","S",16,);
		Файл.Поля.Добавить("INITALDATE","D",,);
		Файл.Поля.Добавить("INITALTIME","S",8,);
		Файл.Поля.Добавить("FINALSTAT","S",16,);
		Файл.Поля.Добавить("FINALDATE","D",,);
		Файл.Поля.Добавить("FINALTIME","S",8,);
		Файл.Поля.Добавить("DURATION","N",8,0);
		Файл.Поля.Добавить("SHIFT","S",10,);
		Файл.СоздатьФайл(ПолноеИмяФайла);
		Файл.АвтоСохранение = Истина;
		
		ВыборкаПоДокументам = ВыборкаПоРесторанам.Выбрать();
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			Документ = ВыборкаПоДокументам.Документ;
			
			Файл.Добавить();
			
			Файл.OUTOFSTAFF = ?(ВыборкаПоДокументам.ВнештатныйСотрудник, "1", "0");
			Файл.EMPLOYEE 	= ?(ВыборкаПоДокументам.ВнештатныйСотрудник, ВыборкаПоДокументам.КодВнештатногоСотрудника, Прав(СокрЛП(ВыборкаПоДокументам.Сотрудник.Код), 10));
			Файл.INITALSTAT	= "0"; 
			Файл.INITALDATE	= ВыборкаПоДокументам.ДатаНачалаПериода; 
			Файл.INITALTIME	= Формат(Дата(1 ,1, 1, Час(ВыборкаПоДокументам.ДатаНачалаПериода), Минута(ВыборкаПоДокументам.ДатаНачалаПериода), 0), "ДФ=HH:mm"); 
			Файл.FINALSTAT	= "0"; 
			Файл.FINALDATE	= ВыборкаПоДокументам.ДатаОкончанияПериода; 
			Файл.FINALTIME	= Формат(Дата(1, 1, 1, Час(ВыборкаПоДокументам.ДатаОкончанияПериода), Минута(ВыборкаПоДокументам.ДатаОкончанияПериода), 0), "ДФ=HH:mm"); 
			Файл.DURATION	= (ВыборкаПоДокументам.ДатаОкончанияПериода - ВыборкаПоДокументам.ДатаНачалаПериода)/60;
			//Файл.SHIFT 		= ?(ЗначениеЗаполнено(ВыборкаПоДокументам.РабочаяСмена), Прав(ВыборкаПоДокументам.РабочаяСмена.Код, 7), ""); //Костенюк Александр-Закомментировано 01.06.2016
			
			Файл.Записать();
			
		КонецЦикла;
		
		Файл.ЗакрытьФайл(); Файл = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 25.11.2014
Процедура СформироватьСтруктуруФайла(Файл, СекторнаяВерсия, ТипФайла = "Продажи")
	
	Если ТипФайла = "Продажи" Тогда
		Файл.Поля.Добавить("Date", 3,,);
		Файл.Поля.Добавить("SposOpl", 1, 1,);
		Файл.Поля.Добавить("KodSpos", 1, 5,);
		Файл.Поля.Добавить("IDKodSp", 2, 100,);
		Файл.Поля.Добавить("IDSpOpl", 2, 100,);
		Файл.Поля.Добавить("KodName", 2, 48,);
		Если СекторнаяВерсия Тогда
			Файл.Поля.Добавить("BlKod", 2, 11,);
		Иначе
			Файл.Поля.Добавить("BlKod", 1, 6,);
		КонецЕсли;
		Файл.Поля.Добавить("IDKod", 2, 100,);
		Файл.Поля.Добавить("BlName", 2, 50,); 
		Файл.Поля.Добавить("Kol", 1, 12, 3);
		Файл.Поля.Добавить("KolUt", 1, 12, 3);
		Файл.Поля.Добавить("Cena", 1, 10, 2);
		Файл.Поля.Добавить("Sum", 1, 10, 2);
		Файл.Поля.Добавить("SumExcise", "N", 10, 2);
		Файл.Поля.Добавить("SumSk", 1, 10, 2); 
		Файл.Поля.Добавить("SumOpl", 1, 10, 2);
		Файл.Поля.Добавить("DLT", 1, 1,); 
		Файл.Поля.Добавить("FRM", "S", 20, 0); 
		Файл.Поля.Добавить("DEPT", "S", 10);
		Файл.Поля.Добавить("IDDEPT", "S", 100);
		Файл.Поля.Добавить("CAT", 1, 5,);
		Файл.Поля.Добавить("nomStol", 2, 25,);
		Файл.Поля.Добавить("CrDate", 2, 8,);
		Файл.Поля.Добавить("Nom", "S", 11);
		Файл.Поля.Добавить("VidOpl", 2, 64,);
		Файл.Поля.Добавить("VidOplName", "S", 50);
		Файл.Поля.Добавить("Kassa", "S", 50);
		Файл.Поля.Добавить("FISCDATE", 3,,);
		Файл.Поля.Добавить("CHARGE", "L",,);
		Файл.Поля.Добавить("EMPLOYEE", "S", 11);
		Файл.Поля.Добавить("EMPLNAME", "S", 50);
		Файл.Поля.Добавить("OUTOFSTAFF", 2,16,);
		Файл.Поля.Добавить("WHS", "S", 10, 0);
		Файл.Поля.Добавить("REST", "S", 5, 0);
		Файл.Поля.Добавить("CATCODE", "S", 10);
		Файл.Поля.Добавить("CATNAME", "S", 50);
		Файл.Поля.Добавить("GUESTS", "N", 4);
	ИначеЕсли ТипФайла = "Списания" Тогда
		Файл.Поля.Добавить("Date", 3,,);
		Файл.Поля.Добавить("Nom", "S", 11);
		Если СекторнаяВерсия Тогда
			Файл.Поля.Добавить("BlKod", 2, 11,);
		Иначе
			Файл.Поля.Добавить("BlKod", 1, 6,);
		КонецЕсли;
		Файл.Поля.Добавить("IDKod", 2, 100,);
		Файл.Поля.Добавить("BlName", 2, 50,);
		Файл.Поля.Добавить("Failure", "S", 50);
		Файл.Поля.Добавить("Kol", 1, 12, 3);
		Файл.Поля.Добавить("KolUt", 1, 12, 3);
		Файл.Поля.Добавить("DLT", 1, 1,); 
		Файл.Поля.Добавить("FRM", "S", 20, 0);
		Файл.Поля.Добавить("DEPT", "S", 10);
		Файл.Поля.Добавить("IDDEPT", "S", 100);
		Файл.Поля.Добавить("CAT", 1, 5,);	
		Файл.Поля.Добавить("VidOpl", 2, 64,);
		Файл.Поля.Добавить("VidOplName", "S", 50);
		Файл.Поля.Добавить("EMPLOYEE", "S", 11);
		Файл.Поля.Добавить("EMPLNAME", "S", 50);
		Файл.Поля.Добавить("Cena", 1, 10, 2);
		Файл.Поля.Добавить("Sum", 1, 10, 2);
		Файл.Поля.Добавить("SumExcise", "N", 10, 2);
		Файл.Поля.Добавить("SumSk", 1, 10, 2); 
		Файл.Поля.Добавить("SumOpl", 1, 10, 2);
		Файл.Поля.Добавить("WHS", "S", 10, 0);
		Файл.Поля.Добавить("REST", "S", 5, 0);
		Файл.Поля.Добавить("CATCODE", "S", 10);
		Файл.Поля.Добавить("CATNAME", "S", 50);
	КонецЕсли;
		
КонецПроцедуры
//Костенюк Александр-Финиш 25.11.2014

//Костенюк Александр-Старт 04.11.2014
Процедура ВыгрузитьНаFTP(Адрес, Пользователь, Пароль, Каталог, Выгружать, УдалятьФайлы)
	
	Если НЕ Выгружать Тогда
		Возврат;
	КонецЕсли;
	
	Сервер 			= "";
	КаталогСервера 	= "";
	
	РазложитьСсылку(Адрес, Сервер, КаталогСервера);
	
	Попытка
		FTPСоединение = Новый FTPСоединение(Сервер, 21, Пользователь, Пароль, , Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	FTPСоединение.УстановитьТекущийКаталог(КаталогСервера);
	
	Если ЗначениеЗаполнено(Ресторан) Тогда
		Массивфайлов = НайтиФайлы(Каталог, СокрЛП(Ресторан.Префикс) + "*.dbf");
	Иначе
		Массивфайлов = НайтиФайлы(Каталог, "*.dbf");
	КонецЕсли;
	
	Для Каждого Файл Из Массивфайлов Цикл
		Попытка
			FTPСоединение.Записать(Файл.ПолноеИмя, Файл.Имя);
			Сообщить("Отправлен файл " + Файл.Имя);
			Если УдалятьФайлы Тогда
				УдалитьФайлы(Файл.ПолноеИмя);
			КонецЕсли;
		Исключение
			Сообщить("При отправке файла " + Файл.Имя + " произошла ошибка: " + ОписаниеОшибки());
		КонецПопытки; 
	КонецЦикла; 
	
КонецПроцедуры
//Костенюк Александр-Финиш 04.11.2014

//Костенюк Александр-Старт 31.03.2015
Процедура ДобавитьСтрокуВФайл(Выборка, Файл, СекторнаяВерсия, ИнформационнаяСистема, ТипФайла = "Продажи")
	
	Документ = Выборка.Документ;
	
	Файл.Добавить();
	Файл.Date = Документ.Дата; 
	Файл.Nom = Документ.Номер;
	
	Если СекторнаяВерсия Тогда
		Файл.BlKod = НайтиКодОбменаПоСсылке(Выборка.Номенклатура, ИнформационнаяСистема);
	Иначе
		Файл.IDKod = НайтиКодПоСсылке(Выборка.Номенклатура, ИнформационнаяСистема);
		Файл.BlKod = НайтиКодОбменаПоСсылке(Выборка.Номенклатура, ИнформационнаяСистема);
	КонецЕсли;
	
	//Костенюк Александр-Старт 01.12.2015
	// Для всех блюд с пометкой "НаВынос"
	// Устанавливаем категорию документа "С собой"
	// Это необходимо чтобы в БК все блюда, которые продавались не в ресторане
	// Попадали в категорию документа "С собой"
	Если Выборка.НаВынос Тогда
		СправочникСсылка = Справочники.КатегорииДокументов.НайтиПоКоду("0000000002");
		КатегорияДокументаКод = СокрЛП(СправочникСсылка.Код);
		КатегорияДокументаНаименование = СокрЛП(СправочникСсылка.Наименование);
	Иначе
		КатегорияДокументаКод = СокрЛП(Документ.КатегорияДокумента.Код);
		КатегорияДокументаНаименование = СокрЛП(Документ.КатегорияДокумента.Наименование);
	КонецЕсли;
	//Костенюк Александр-Финиш 01.12.2015
	
	// Заполнение общих полей
	Файл.BlName		= СокрЛП(Выборка.Номенклатура.Наименование);
	Файл.Kol		= Выборка.Количество;
	Файл.KolUt		= Выборка.КоличествоУточненное;
	Файл.Cena		= Выборка.Цена;
	Файл.Sum		= Выборка.Сумма;
	Файл.SumExcise	= Выборка.СуммаАкцизногоНалога;
	Файл.SumSK		= Выборка.СуммаСкидки;
	Файл.SumOpl		= Выборка.Сумма;
	Файл.DLT		= ?(Документ.Состояние = Перечисления.СостоянияДокументов.Удаленные, 1, 0);
	Файл.FRM 		= СокрЛП(Выборка.Организация.КодПоЕДРПОУ);
	Файл.CAT 		= Выборка.НоменклатурнаяГруппа.Код;
	//Файл.EMPLOYEE	= Прав(СокрЛП(Документ.Сотрудник.Код), 7);
	Файл.EMPLOYEE	= НайтиКодОбменаПоСсылке(Документ.Сотрудник, ИнформационнаяСистема); //Костенюк Александр 05.02.2016
	Файл.EMPLNAME	= СокрЛП(Документ.Сотрудник.Наименование);
	Файл.REST 		= ?(ЗначениеЗаполнено(Документ.Ресторан.КодКК), СокрЛП(Документ.Ресторан.КодКК), СокрЛП(Строка(Константы.КодРесторана.Получить())));
	//Файл.CATCODE 	= СокрЛП(Документ.КатегорияДокумента.Код);
	//Файл.CATNAME 	= СокрЛП(Документ.КатегорияДокумента.Наименование);
	//Костенюк Александр-Старт 01.12.2015
	Файл.CATCODE 	= КатегорияДокументаКод;
	Файл.CATNAME 	= КатегорияДокументаНаименование;
	//Костенюк Александр-Финиш 01.12.2015
	Файл.IDDEPT 	= НайтиКодПоСсылке(Документ.Ресторан, ИнформационнаяСистема);	
	Файл.DEPT 		= НайтиКодОбменаПоСсылке(Документ.Ресторан, ИнформационнаяСистема);
	Файл.WHS 		= ?(ЗначениеЗаполнено(Выборка.Склад), СокрЛП(Выборка.Склад.Код), "");
	
	// Заполнение полей файла "real.dbf"
	Если ТипФайла = "Продажи" Тогда
		
		Если ЗначениеЗаполнено(Документ.Оплата) Тогда
			Файл.SposOpl	= ПолучитьСпособОплаты(Документ);
			Файл.VidOpl		= НайтиКодОбменаПоСсылке(Документ.Оплата, ИнформационнаяСистема);
			Файл.VidOplName = СокрЛП(Документ.Оплата.Наименование);
			Файл.KodSpos	= Документ.Оплата.Код;							
			Файл.IDKodSp	= НайтиКодПоСсылке(Документ.Оплата, ИнформационнаяСистема);
			Если ЗначениеЗаполнено(Документ.Оплата.Родитель) Тогда  
				Файл.IDSpOpl = НайтиКодПоСсылке(Документ.Оплата.Родитель, ИнформационнаяСистема);		
			КонецЕсли;
		Иначе
			Файл.SposOpl = 0;
		КонецЕсли;
		
		Файл.Kassa = ?(ЗначениеЗаполнено(Выборка.Касса), СокрЛП(Выборка.Касса.Наименование), "");
		
		Файл.nomStol	= Документ.Стол.Код;
		Файл.CrDate		= Формат(Документ.Дата, "ДЛФ=T");
		Файл.FISCDATE 	= Документ.ДатаОкончанияПериода;
		Файл.GUESTS		= Документ.КоличествоКлиентов;
		
	// Заполнение полей файла "spis.dbf"
	ИначеЕсли ТипФайла = "Списания" Тогда
		
		Файл.Failure = СокрЛП(Документ.ПричинаОтказа.Наименование);
		
		Если ЗначениеЗаполнено(Документ.Оплата.Родитель) Тогда
			Файл.VidOpl = НайтиКодОбменаПоСсылке(Документ.Оплата, ИнформационнаяСистема);
		КонецЕсли;
		
		Файл.VidOplName = СокрЛП(Документ.Оплата.Наименование);
		
	КонецЕсли;
	
	Файл.Записать();
	
КонецПроцедуры
//Костенюк Александр-Финиш 31.03.2015
