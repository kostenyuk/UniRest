////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылка отчетов" (клиент, сервер)
// 
// Выполняется на клиенте и на сервере.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Разбирает строку FTP адреса на Логин, Пароль, Сервер, Порт и Каталог
//   Подробнее - см. RFC 1738 (http://tools.ietf.org/html/rfc1738#section-3.1)
//   Шаблон: ftp://<user>:<password>@<host>:<port>/<url-path>
//
// Параметры:
//   FTPАдрес (Строка)
//
// Возвращаемое значение: 
//   Результат (Структура)
//       |- Логин (Строка)
//       |- Пароль (Строка)
//       |- Сервер (Строка)
//       |- Порт (Число) - По умолчанию 21
//       |- Каталог (Строка) - Первый символ всегда "/"
//
Функция РазобратьFTPАдрес(ПолныйFTPАдрес) Экспорт
	Результат = Новый Структура("Логин, Пароль, Сервер, Порт, Каталог", "", "", "", 21, "/");
	FTPАдрес = ПолныйFTPАдрес;
	
	// Вырезать 'ftp://'
	Поз = Найти(FTPАдрес, "://");
	Если Поз > 0 Тогда
		FTPАдрес = Сред(FTPАдрес, Поз + 3);
	КонецЕсли;
	
	// Каталог
	Поз = Найти(FTPАдрес, "/");
	Если Поз > 0 Тогда
		Результат.Каталог = Сред(FTPАдрес, Поз);
		FTPАдрес = Лев(FTPАдрес, Поз - 1);
	КонецЕсли;
	
	// Логин и пароль
	Поз = Найти(FTPАдрес, "@");
	Если Поз > 0 Тогда
		ЛогинПароль = Лев(FTPАдрес, Поз - 1);
		FTPАдрес = Сред(FTPАдрес, Поз + 1);
		
		Поз = Найти(ЛогинПароль, ":");
		Если Поз > 0 Тогда
			Результат.Логин = Лев(ЛогинПароль, Поз - 1);
			Результат.Пароль = Сред(ЛогинПароль, Поз + 1);
		Иначе
			Результат.Логин = ЛогинПароль;
		КонецЕсли;
	КонецЕсли;
	
	// Сервер и порт
	Поз = Найти(FTPАдрес, ":");
	Если Поз > 0 Тогда
		Результат.Сервер = Лев(FTPАдрес, Поз - 1);
		Результат.Порт = СтрокуВЧисло(Сред(FTPАдрес, Поз + 1), Результат.Порт);
	Иначе
		Результат.Сервер = FTPАдрес;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Заполняет шаблон из структуры параметров, поддерживает форматирование, может оставлять обрамление шаблона
//   Ограничение: должны присутствовать и левый и правый элементы обрамления
//
// Параметры:
//   Шаблон (Строка) - Исходный шаблон
//   Параметры (Структура) - Набор параметров, которые необходимо подставить в шаблон
//   Левый (Строка)  - Начало обрамления параметра
//   Правый (Строка) - Конец  обрамления параметра
//   ФорматЛевый (Строка)  - Начало обрамления формата параметра
//   ФорматПравый (Строка) - Конец  обрамления формата параметра
//   ВырезатьОбрамление (Булево) - Ложь означает, что обрамление параметра будет убрано из результата
//
// Возвращаемое значение: 
//   Результат (Строка) - Результат заполнения
//
Функция ЗаполнитьШаблон(Шаблон, Параметры, Левый = "[", Правый = "]", ФорматЛевый = "(", ФорматПравый = ")", ВырезатьОбрамление = Истина) Экспорт
	Результат = Шаблон;
	Для Каждого КлючИЗначение Из Параметры Цикл
		// Замена [ключ] на [значение]
		Результат = СтрЗаменить(
			Результат,
			Левый + КлючИЗначение.Ключ + Правый, 
			?(ВырезатьОбрамление, "", Левый) + КлючИЗначение.Значение + ?(ВырезатьОбрамление, "", Правый)
		);
		ДлинаФорматЛевый = СтрДлина(Левый + КлючИЗначение.Ключ + ФорматЛевый);
		// Замена [ключ(формат)] на [значение] в формате
		Поз1 = Найти(Результат, Левый + КлючИЗначение.Ключ + ФорматЛевый);
		Пока Поз1 > 0 Цикл
			Поз2 = Найти(Результат, ФорматПравый + Правый);
			Если Поз2 = 0 Тогда
				Прервать;
			КонецЕсли;
			ФорматнаяСтрока = Сред(Результат, Поз1 + ДлинаФорматЛевый, Поз2 - Поз1 - ДлинаФорматЛевый);
			Попытка
				НаЧтоЗаменить = ?(ВырезатьОбрамление, "", Левый) + Формат(КлючИЗначение.Значение, ФорматнаяСтрока) + ?(ВырезатьОбрамление, "", Правый);
			Исключение
				НаЧтоЗаменить = ?(ВырезатьОбрамление, "", Левый) + КлючИЗначение.Значение + ?(ВырезатьОбрамление, "", Правый);
			КонецПопытки;
			Результат = СтрЗаменить(
				Результат,
				Левый + КлючИЗначение.Ключ + ФорматЛевый + ФорматнаяСтрока + ФорматПравый + Правый, 
				НаЧтоЗаменить
			);
			Поз1 = Найти(Результат, Левый + КлючИЗначение.Ключ + ФорматЛевый);
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Возвращает шаблон темы по умолчанию для доставки по электронной почте
//
Функция ШаблонТемы() Экспорт
	Возврат НСтр("ru = '[НаименованиеРассылки] от [ДатаВыполнения(ДЛФ=''D'')]'");
КонецФункции

// Возвращает шаблон тела сообщения по умолчанию для доставки по электронной почте
//
Функция ШаблонТекста() Экспорт
	Возврат НСтр(
		"ru = 'Сформированы отчеты:
		|
		|[СформированныеОтчеты]
		|
		|[СпособДоставки]
		|
		|[ЗаголовокСистемы]
		|[ДатаВыполнения(ДЛФ=''DD'')]'"
	);
КонецФункции

// Возвращает шаблон наименования архива по умолчанию
//
Функция ШаблонИмениАрхива() Экспорт
	Возврат НСтр("ru = '[НаименованиеРассылки]_[ДатаВыполнения(ДФ=''yyyy-MM-dd'')]'"); // Для формата даты локализация не требуется
КонецФункции

// Возвращает набор шаблонов заполнения расписаний регламентного задания
//
Функция СписокВариантовЗаполненияРасписаний() Экспорт
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить(1, НСтр("ru = 'Каждый день'"));
	СписокВариантов.Добавить(2, НСтр("ru = 'Каждый второй день'"));
	СписокВариантов.Добавить(3, НСтр("ru = 'Каждый четвертый день'"));
	СписокВариантов.Добавить(4, НСтр("ru = 'По будням'"));
	СписокВариантов.Добавить(5, НСтр("ru = 'По выходным'"));
	СписокВариантов.Добавить(6, НСтр("ru = 'По понедельникам'"));
	СписокВариантов.Добавить(7, НСтр("ru = 'По пятницам'"));
	СписокВариантов.Добавить(8, НСтр("ru = 'По воскресеньям'"));
	СписокВариантов.Добавить(9, НСтр("ru = 'В первый день месяца'"));
	СписокВариантов.Добавить(10, НСтр("ru = 'В последний день месяца'"));
	СписокВариантов.Добавить(11, НСтр("ru = 'Каждый квартал десятого числа'"));
	СписокВариантов.Добавить(12, НСтр("ru = 'Другое...'"));
	
	Возврат СписокВариантов;
КонецФункции

// Преобразует массив сообщений пользователю в одну строку
//
Функция СтрокаСообщенийПользователю(МассивОшибок = Неопределено, ДобавитьДежурнуюФразу = Истина) Экспорт
	Если МассивОшибок = Неопределено Тогда
		МассивОшибокПолучен = Ложь;
		#Если Сервер ИЛИ ТолстыйКлиент Тогда
			МассивОшибок = ПолучитьСообщенияПользователю(Истина);
			МассивОшибокПолучен = Истина;
		#КонецЕсли
		Если НЕ МассивОшибокПолучен Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Отступ = Символы.ПС + Символы.ПС;
	
	ВсеОшибки = "";
	Для Каждого Ошибка Из МассивОшибок Цикл
		ВсеОшибки = СокрЛП(ВсеОшибки + Отступ + ?(ТипЗнч(Ошибка) = Тип("Строка"), Ошибка, Ошибка.Текст));
	КонецЦикла;
	Если ВсеОшибки <> "" И ДобавитьДежурнуюФразу Тогда
		ВсеОшибки = ВсеОшибки + Отступ + "---" + Отступ + НСтр("ru = 'Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат ВсеОшибки;
КонецФункции

// Превращает строку в число без вызова исключений. Стандартная функция преобразования
//   Число() строго контролирует отсутствие каких либо символов кроме числовых.
//
Функция СтрокуВЧисло(ИсходнаяСтрока, ЗначениеПоУмолчанию = 0)
	СтрокаВЧисло = Новый Соответствие;
	Для Значение = 0 По 9 Цикл
		СтрокаВЧисло.Вставить(Строка(Значение), Значение);
	КонецЦикла;
	
	Результат = 0;
	Для Индекс = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ПоследнийРазряд = СтрокаВЧисло.Получить(Сред(ИсходнаяСтрока, Индекс, 1));
		Если ПоследнийРазряд <> Неопределено Тогда
			Результат = Результат * 10 + ПоследнийРазряд;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(Результат = 0, ЗначениеПоУмолчанию, Результат);
КонецФункции

// Получается индекс пиктограммы файла - индекс в картинке КоллекцияПиктограммФайлов
//
Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайлаТолькоТекст) Экспорт
	
	Если РасширениеФайлаТолькоТекст = Неопределено Тогда
		Возврат 0;
	КонецЕсли;		
	
	РасширениеФайлаБезТочки = РасширениеФайлаТолькоТекст;
	
	Если Лев(РасширениеФайлаБезТочки, 1) = "." Тогда
		РасширениеФайлаБезТочки = Сред(РасширениеФайлаБезТочки, 2);
	КонецЕсли;
	
	Расширение = "." + НРег(РасширениеФайлаБезТочки) + ";";
	
	Если Найти(".dt;.1cd;.cf;.cfu;",Расширение) <> 0 Тогда
		Возврат 6; //Файлы 1С
	ИначеЕсли Расширение = ".mxl;" Тогда
		Возврат 8; //Табличный Файл 
	ИначеЕсли Найти(".txt;.log;.ini;",Расширение) <> 0 Тогда
		Возврат 10; // Текстовый Файл
	ИначеЕсли Расширение = ".epf;" Тогда
		Возврат 12; //Внешние обработки
	ИначеЕсли Найти(".ico;.wmf;.emf;",Расширение) <> 0 Тогда
		Возврат 14; // Картинки
	ИначеЕсли Найти(".htm;.html;.url;.mht;.mhtml;",Расширение) <> 0 Тогда
		Возврат 16; // HTML
	ИначеЕсли Найти(".doc;.dot;.rtf;",Расширение) <> 0 Тогда
		Возврат 18; // Файл Microsoft Word 
	ИначеЕсли Найти(".xls;.xlw;",Расширение) <> 0 Тогда
		Возврат 20; // Файл Microsoft Excel
	ИначеЕсли Найти(".ppt;.pps;",Расширение) <> 0 Тогда
		Возврат 22; // Файл Microsoft PowerPoint
	ИначеЕсли Найти(".vsd;",Расширение) <> 0 Тогда
		Возврат 24; // Файл Microsoft Visio
	ИначеЕсли Найти(".mpp;",Расширение) <> 0 Тогда
		Возврат 26; // Файл Microsoft Visio
	ИначеЕсли Найти(".mdb;.adp;.mda;.mde;.ade;",Расширение) <> 0 Тогда
		Возврат 28; // База данных Microsoft Access
	ИначеЕсли Найти(".xml;",Расширение) <> 0 Тогда
		Возврат 30; // xml
	ИначеЕсли Найти(".msg;",Расширение) <> 0 Тогда
		Возврат 32; // Письмо электронной почты
	ИначеЕсли Найти(".zip;.rar;.arj;.cab;.lzh;.ace;",Расширение) <> 0 Тогда
		Возврат 34; // Архивы
	ИначеЕсли Найти(".exe;.com;.bat;.cmd;",Расширение) <> 0 Тогда
		Возврат 36; // Исполняемые файлы
	ИначеЕсли Найти(".grs;",Расширение) <> 0 Тогда
		Возврат 38; // Графическая схема
	ИначеЕсли Найти(".geo;",Расширение) <> 0 Тогда
		Возврат 40; // Географическая схема
	ИначеЕсли Найти(".jpg;.jpeg;.jp2;.jpe;",Расширение) <> 0 Тогда
		Возврат 42; // jpg
	ИначеЕсли Найти(".bmp;.dib;",Расширение) <> 0 Тогда
		Возврат 44; // bmp
	ИначеЕсли Найти(".tif;.tiff;",Расширение) <> 0 Тогда
		Возврат 46; // tif
	ИначеЕсли Найти(".gif;",Расширение) <> 0 Тогда
		Возврат 48; // gif
	ИначеЕсли Найти(".png;",Расширение) <> 0 Тогда
		Возврат 50; // png
	ИначеЕсли Найти(".pdf;",Расширение) <> 0 Тогда
		Возврат 52; // pdf
	ИначеЕсли Найти(".odt;",Расширение) <> 0 Тогда
		Возврат 54; // Open Office writer
	ИначеЕсли Найти(".odf;",Расширение) <> 0 Тогда
		Возврат 56; // Open Office math
	ИначеЕсли Найти(".odp;",Расширение) <> 0 Тогда
		Возврат 58; // Open Office Impress
	ИначеЕсли Найти(".odg;",Расширение) <> 0 Тогда
		Возврат 60; // Open Office draw
	ИначеЕсли Найти(".ods;",Расширение) <> 0 Тогда
		Возврат 62; // Open Office calc
	ИначеЕсли Найти(".mp3;",Расширение) <> 0 Тогда
		Возврат 64;
	ИначеЕсли Найти(".erf;",Расширение) <> 0 Тогда
		Возврат 66; // Внешние отчеты
	ИначеЕсли Найти(".docx;",Расширение) <> 0 Тогда
		Возврат 68; // Файл Microsoft Word docx
	ИначеЕсли Найти(".xlsx;",Расширение) <> 0 Тогда
		Возврат 70; // Файл Microsoft Excel xlsx
	ИначеЕсли Найти(".pptx;",Расширение) <> 0 Тогда
		Возврат 72; // Файл Microsoft PowerPoint pptx
	ИначеЕсли Найти(".p7s;",Расширение) <> 0 Тогда
		Возврат 74; // файл подписи
	ИначеЕсли Найти(".p7m;",Расширение) <> 0 Тогда
		Возврат 76; // зашифрованное сообщение
	Иначе
		Возврат 4;
	КонецЕсли;
	
КонецФункции // ()

// Получает строку из временного хранилища (передача с клиента на сервер,
// делается через временное хранилище)
//
Функция ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста) Экспорт
	
	Если ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресВременногоХранилищаТекста).Записать(ИмяВременногоФайла);
	
	ТекстовыйФайл = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Текст = ТекстовыйФайл.Прочитать();
	ТекстовыйФайл.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Текст;
	
КонецФункции

// Получает символ слэша "\" или "/"
Функция ПолучитьСлеш(ТипПлатформыТекущий) Экспорт
	
	Если ТипПлатформыТекущий = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыТекущий = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "\";
	Иначе	
		Возврат "/";
	КонецЕсли;			
	
КонецФункции

// Создает основные реквизиты и поля формы, необходимые для работы.
// Заполняет дополнительные реквизиты, если используются.
// Вызывается из обработчика ПриСозданииНаСервере формы объекта со свойствами
// 
// Параметры:
//  Форма       - УправляемаяФорма.
//
//  Объект      - Неопределено - взять объект из реквизита формы Объект.
//                ДанныеФормыСтруктура (по типу объекта).
//
//  ИмяЭлементаДляРазмещения - Строка - имя группы формы, в которой будут размещены свойства.
//
//  ПроизвольныйОбъект - Булево, если Истина, тогда в форме создается таблица описания дополнительных реквизитов
//                параметр Объект игнорируется, дополнительные реквизиты не создаются и не заполняются.
//
//                Это востребовано при последовательном использовании одной формы для просмотра или редактирования
//                дополнительных реквизитов разных объектов (в том числе разных типов).
//
//                После выполнения ПриСозданииНаСервере следует вызывать ЗаполнитьДополнительныеРеквизитыВФорме()
//                для добавления и заполнения дополнительных реквизитов.
//                Чтобы сохранить изменения следует вызвать ПеренестиЗначенияИзРеквизитовФормыВОбъект(),
//                а для обновления состава реквизитов вызвать ОбновитьЭлементыДополнительныхРеквизитов().
//
Процедура ПриСозданииНаСервере(Форма, Объект = Неопределено, ИмяЭлементаДляРазмещения = "", ПроизвольныйОбъект = Ложь) Экспорт
	
	Если ПроизвольныйОбъект Тогда
		СоздатьОписаниеДополнительныхРеквизитов = Истина;
	Иначе
		Если Объект = Неопределено Тогда
			ОписаниеОбъекта = Форма.Объект;
		Иначе
			ОписаниеОбъекта = Объект;
		КонецЕсли;
		СоздатьОписаниеДополнительныхРеквизитов = ИспользоватьДопРеквизиты(ОписаниеОбъекта.Ссылка);
	КонецЕсли;
	
	СоздатьОсновныеОбъектыФормы(Форма, ИмяЭлементаДляРазмещения, СоздатьОписаниеДополнительныхРеквизитов);
	
	Если НЕ ПроизвольныйОбъект Тогда
		ЗаполнитьДополнительныеРеквизитыВФорме(Форма, ОписаниеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

// Создает основные реквизиты, команды, элементы в форме владельца свойств.
Процедура СоздатьОсновныеОбъектыФормы(Форма, ИмяЭлементаДляРазмещения, СоздатьОписаниеДополнительныхРеквизитов)
	
	Реквизиты = Новый Массив;
	
	// Проверка значения функциональной опции "Использование свойств".
	ОпцияИспользоватьСвойства = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения");
	РеквизитИспользоватьСвойства = Новый РеквизитФормы("Свойства_ИспользоватьСвойства", Новый ОписаниеТипов("Булево"));
	Реквизиты.Добавить(РеквизитИспользоватьСвойства);
	
	Если ОпцияИспользоватьСвойства Тогда
		
		РеквизитИспользоватьДопРеквизиты = Новый РеквизитФормы("Свойства_ИспользоватьДопРеквизиты", Новый ОписаниеТипов("Булево"));
		Реквизиты.Добавить(РеквизитИспользоватьДопРеквизиты);
		
		Если СоздатьОписаниеДополнительныхРеквизитов Тогда
			
			// Добавление реквизита содержащего используемые наборы дополнительных реквизитов.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_НаборыДополнительныхРеквизитовОбъекта", Новый ОписаниеТипов("СписокЗначений")));
			
			// Добавление реквизита описания создаваемых реквизитов и элементов формы.
			ИмяОписания = "Свойства_ОписаниеДополнительныхРеквизитов";
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ИмяРеквизитаСвойство", Новый ОписаниеТипов("Строка"), ИмяОписания));
				
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
					ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Удалено", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ИмяОписания));
				
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Наименование", Новый ОписаниеТипов("Строка"), ИмяОписания));
			
			// Добавление реквизита содержащего элементы создаваемых групп дополнительных реквизитов.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_ЭлементыГруппДополнительныхРеквизитов", Новый ОписаниеТипов("СписокЗначений")));
			
			// Добавление реквизита с именем элемента в котором будут размещаться поля ввода.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_ИмяЭлементаДляРазмещения", Новый ОписаниеТипов("Строка")));
			
			// Добавление команды формы, если установлена роль "ДобавлениеИзменениеБазовойНСИ" или это полноправный пользователь.
			Если Пользователи.РолиДоступны("ДобавлениеИзменениеБазовойНСИ") Тогда
				// Добавление команды.
				Команда = Форма.Команды.Добавить("РедактироватьСоставДополнительныхРеквизитов");
				Команда.Заголовок = НСтр("ru = 'Изменить состав дополнительных реквизитов'");
				Команда.Действие = "Подключаемый_РедактироватьСоставСвойств";
				Команда.Подсказка = НСтр("ru = 'Изменить состав дополнительных реквизитов'");
				Команда.Картинка = БиблиотекаКартинок.НастройкаСписка;
				
				Кнопка = Форма.Элементы.Добавить("РедактироватьСоставДополнительныхРеквизитов", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
				Кнопка.ТолькоВоВсехДействиях = Истина;
				Кнопка.ИмяКоманды = "РедактироватьСоставДополнительныхРеквизитов";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	Форма.Свойства_ИспользоватьСвойства = ОпцияИспользоватьСвойства;
	
	Если ОпцияИспользоватьСвойства Тогда
		Форма.Свойства_ИспользоватьДопРеквизиты = СоздатьОписаниеДополнительныхРеквизитов;
	КонецЕсли;
	
	Если ОпцияИспользоватьСвойства И СоздатьОписаниеДополнительныхРеквизитов Тогда
		Форма.Свойства_ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, используется ли дополнительные реквизиты с объектом.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользоватьДопРеквизиты(ВладелецСвойств) Экспорт
	
	Возврат ВладелецСвойств.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено;
	
КонецФункции

// Создает/пересоздает дополнительные реквизиты и элементы в форме владельца свойств.
//
// Параметры:
//  Форма        - УправляемаяФорма, предварительно настроенная в процедуре
//                 УправлениеСвойствами.ПриСозданииНаСервере()
//  
//  Объект       - Неопределено - взять объект из реквизита формы Объект.
//                 Объект - СправочникОбъект, ДокументОбъект, ...
//                 ДанныеФормыСтруктура (по типу объекта).
//
Процедура ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект = Неопределено) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Объект;
	КонецЕсли;
	
	Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта = Новый СписокЗначений;
	НаборыСвойствОбъекта = ПолучитьНаборыСвойствОбъекта(ОписаниеОбъекта);
	
	Для каждого Строка Из НаборыСвойствОбъекта Цикл
		Если ВидыСвойствНабора(Строка.Набор).ДополнительныеРеквизиты Тогда
			
			Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта.Добавить(
				Строка.Набор, Строка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеСвойств = ПолучитьТаблицуЗначенийСвойств(
		ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить(),
		Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта,
		Ложь);
	
	ОписаниеСвойств.Колонки.Добавить("ИмяРеквизитаЗначение");
	ОписаниеСвойств.Колонки.Добавить("ИмяРеквизитаСвойство");
	ОписаниеСвойств.Колонки.Добавить("ИмяУникальнаяЧасть");
	ОписаниеСвойств.Колонки.Добавить("Булево");
	
	УдалитьСтарыеРеквизитыИЭлементы(Форма);
	
	// Создание реквизитов.
	ДобавляемыеРеквизиты = Новый Массив();
	Для каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		ТипЗначенияСвойства = ОписаниеСвойства.ТипЗначения;
		
		// Поддержка строк неограниченной длины.
		Если ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, ОписаниеСвойства.МногострочноеПолеВвода) Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		ОписаниеСвойства.ИмяУникальнаяЧасть = 
			СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Набор.УникальныйИдентификатор())), "-", "x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Свойство.УникальныйИдентификатор())), "-", "x");
		
		ОписаниеСвойства.ИмяРеквизитаЗначение =
			"ДополнительныйРеквизитЗначение_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
		
		Если ОписаниеСвойства.Удалено Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		Реквизит = Новый РеквизитФормы(ОписаниеСвойства.ИмяРеквизитаЗначение, ТипЗначенияСвойства, , ОписаниеСвойства.Наименование, Истина);
		
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		ОписаниеСвойства.ИмяРеквизитаСвойство = "";
		Если ТипЗначенияСодержитЗначенияСвойств(ТипЗначенияСвойства) Тогда
			
			ОписаниеСвойства.ИмяРеквизитаСвойство =
				"ДополнительныйРеквизитСвойство_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
			
			Реквизит = Новый РеквизитФормы(ОписаниеСвойства.ИмяРеквизитаСвойство, Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), , , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
		ОписаниеСвойства.Булево = ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначенияСвойства, Тип("Булево"));
		
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создание элементов формы.
	ИмяЭлементаДляРазмещения = Форма.Свойства_ИмяЭлементаДляРазмещения;
	ЭлементРазмещения = ?(ИмяЭлементаДляРазмещения = "", Неопределено, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	Для Каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		ЗаполнитьЗначенияСвойств(
			Форма.Свойства_ОписаниеДополнительныхРеквизитов.Добавить(), ОписаниеСвойства);
		
		Форма[ОписаниеСвойства.ИмяРеквизитаЗначение] = ОписаниеСвойства.Значение;
		
		Если НаборыСвойствОбъекта.Количество() > 1 Тогда
			
			ЭлементСписка = Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов.НайтиПоЗначению(
				ОписаниеСвойства.Набор);
			
			Если ЭлементСписка <> Неопределено Тогда
				Родитель = Форма.Элементы[ЭлементСписка.Представление];
			Иначе
				ОписаниеНабора = НаборыСвойствОбъекта.Найти(ОписаниеСвойства.Набор, "Набор");
				
				Если ОписаниеНабора = Неопределено Тогда
					ОписаниеНабора = НаборыСвойствОбъекта.Добавить();
					ОписаниеНабора.Набор     = ОписаниеСвойства.Набор;
					ОписаниеНабора.Заголовок = НСтр("ru = 'Удаленные реквизиты'")
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОписаниеНабора.Заголовок) Тогда
					ОписаниеНабора.Заголовок = Строка(ОписаниеСвойства.Набор);
				КонецЕсли;
				
				ИмяЭлементаНабора = "НаборДополнительныхРеквизитов" + ОписаниеСвойства.ИмяУникальнаяЧасть;
				
				Родитель = Форма.Элементы.Добавить(ИмяЭлементаНабора, Тип("ГруппаФормы"), ЭлементРазмещения);
				
				Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов.Добавить(
					ОписаниеСвойства.Набор, Родитель.Имя);
				
				Если ТипЗнч(ЭлементРазмещения) = Тип("ГруппаФормы")
				   И ЭлементРазмещения.Вид = ВидГруппыФормы.Страницы Тогда
					
					Родитель.Вид = ВидГруппыФормы.Страница;
				Иначе
					Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					Родитель.Отображение = ОтображениеОбычнойГруппы.Нет;
				КонецЕсли;
				Родитель.ОтображатьЗаголовок = Ложь;
				
				ЗаполненныеСвойстваГруппы = Новый Структура;
				Для каждого Колонка Из НаборыСвойствОбъекта.Колонки Цикл
					Если ОписаниеНабора[Колонка.Имя] <> Неопределено Тогда
						ЗаполненныеСвойстваГруппы.Вставить(Колонка.Имя, ОписаниеНабора[Колонка.Имя]);
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(Родитель, ЗаполненныеСвойстваГруппы);
			КонецЕсли;
		Иначе
			Родитель = ЭлементРазмещения;
		КонецЕсли;
		
		Элемент = Форма.Элементы.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение, Тип("ПолеФормы"), Родитель);
		
		Если ОписаниеСвойства.Булево И ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.АвтоОтметкаНезаполненного = ОписаниеСвойства.ЗаполнятьОбязательно;
		КонецЕсли;
		
		Элемент.ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
		Элемент.Подсказка   = ОписаниеСвойства.Свойство.Подсказка;
		
		Если ОписаниеСвойства.Свойство.МногострочноеПолеВвода > 0 Тогда
			Элемент.МногострочныйРежим = Истина;
			Элемент.Высота= ОписаниеСвойства.Свойство.МногострочноеПолеВвода;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			Элемент.Формат               = ОписаниеСвойства.ФорматСвойства;
			Элемент.ФорматРедактирования = ОписаниеСвойства.ФорматСвойства;
		КонецЕсли;
		
		Если ОписаниеСвойства.Удалено Тогда
			Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.НедоступныеДанныеЦвет;
			Элемент.ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
			Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				Элемент.КнопкаОчистки = Истина;
				Элемент.КнопкаВыбора = Ложь;
				Элемент.КнопкаОткрытия = Ложь;
				Элемент.КнопкаСпискаВыбора = Ложь;
				Элемент.РедактированиеТекста = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеСвойства.ИмяРеквизитаСвойство <> "" Тогда
			Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", ОписаниеСвойства.ИмяРеквизитаСвойство);
			Связи = Новый Массив;
			Связи.Добавить(Связь);
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
			Форма[ОписаниеСвойства.ИмяРеквизитаСвойство] = ОписаниеСвойства.Свойство;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу наборов доступных свойств владельца.
//
// Параметры:
//  ВладелецСвойств - Ссылка на владельца свойств.
//                    Объект владельца свойств.
//                    ДанныеФормыСтруктура (по типу объекта владельца свойств).
//
Функция ПолучитьНаборыСвойствОбъекта(ВладелецСвойств) Экспорт
	
	Если ТипЗнч(ВладелецСвойств) = Тип("ДанныеФормыСтруктура") Тогда
		ТипСсылки = ТипЗнч(ВладелецСвойств.Ссылка)
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ВладелецСвойств)) Тогда
		ТипСсылки = ТипЗнч(ВладелецСвойств);
	Иначе
		ТипСсылки = ТипЗнч(ВладелецСвойств.Ссылка)
	КонецЕсли;
	
	ПолучатьОсновнойНабор = Истина;
	
	НаборыСвойств = Новый ТаблицаЗначений;
	НаборыСвойств.Колонки.Добавить("Набор");
	НаборыСвойств.Колонки.Добавить("Высота");
	НаборыСвойств.Колонки.Добавить("Заголовок");
	НаборыСвойств.Колонки.Добавить("Подсказка");
	НаборыСвойств.Колонки.Добавить("РастягиватьПоВертикали");
	НаборыСвойств.Колонки.Добавить("РастягиватьПоГоризонтали");
	НаборыСвойств.Колонки.Добавить("ТолькоПросмотр");
	НаборыСвойств.Колонки.Добавить("ЦветТекстаЗаголовка");
	НаборыСвойств.Колонки.Добавить("Ширина");
	НаборыСвойств.Колонки.Добавить("ШрифтЗаголовка");
	НаборыСвойств.Колонки.Добавить("Группировка");
	НаборыСвойств.Колонки.Добавить("Отображение");
	НаборыСвойств.Колонки.Добавить("ШиринаПодчиненныхЭлементов");
	НаборыСвойств.Колонки.Добавить("Картинка");
	НаборыСвойств.Колонки.Добавить("ОтображатьЗаголовок");
	
	//УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта(ВладелецСвойств, ТипСсылки, НаборыСвойств, ПолучатьОсновнойНабор);
	
	//Если НаборыСвойств.Количество() = 0
	//   И ПолучатьОсновнойНабор = Истина Тогда
	//	
	//	ОсновнойНабор = ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств);
	//	
	//	Если ЗначениеЗаполнено(ОсновнойНабор) Тогда
	//		НаборыСвойств.Добавить().Набор = ОсновнойНабор;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат НаборыСвойств;
	
КонецФункции

// Возвращает заполненную таблицу значений свойств объекта.
Функция ПолучитьТаблицуЗначенийСвойств(ДополнительныеСвойстваОбъекта, Наборы, ЭтоДополнительноеСведение) Экспорт
	
	Свойства = ДополнительныеСвойстваОбъекта.ВыгрузитьКолонку("Свойство");
	
	НаборыСвойств = Новый ТаблицаЗначений;
	
	НаборыСвойств.Колонки.Добавить(
		"Набор", Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений"));
	
	НаборыСвойств.Колонки.Добавить(
		"ПорядокНабора", Новый ОписаниеТипов("Число"));
	
	Для каждого ЭлементСписка Из Наборы Цикл
		НоваяСтрока = НаборыСвойств.Добавить();
		НоваяСтрока.Набор         = ЭлементСписка.Значение;
		НоваяСтрока.ПорядокНабора = Наборы.Индекс(ЭлементСписка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойства",      Свойства);
	Запрос.УстановитьПараметр("НаборыСвойств", НаборыСвойств);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора
	|ПОМЕСТИТЬ НаборыСвойств
	|ИЗ
	|	&НаборыСвойств КАК НаборыСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	СвойстваНаборов.НомерСтроки КАК ПорядокСвойства
	|ПОМЕСТИТЬ СвойстваНаборов
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК СвойстваНаборов
	|		ПО (СвойстваНаборов.Ссылка = НаборыСвойств.Набор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|		ПО (СвойстваНаборов.Свойство = Свойства.Ссылка)
	|ГДЕ
	|	НЕ Свойства.ПометкаУдаления
	|	И НЕ Свойства.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Свойства.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ЗаполненныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.Ссылка В(&Свойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваНаборов.Набор,
	|	СвойстваНаборов.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ЗаполнятьОбязательно,
	|	СвойстваНаборов.ПорядокСвойства,
	|	ЛОЖЬ КАК Удалено
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	СвойстваНаборов КАК СвойстваНаборов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка),
	|	0,
	|	ЗаполненныеСвойства.Свойство,
	|	0,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	ЗаполненныеСвойства КАК ЗаполненныеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНаборов КАК СвойстваНаборов
	|		ПО ЗаполненныеСвойства.Свойство = СвойстваНаборов.Свойство
	|ГДЕ
	|	СвойстваНаборов.Свойство ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойства.Набор,
	|	ВсеСвойства.Свойство,
	|	ВЫБОР
	|		КОГДА ВсеСвойства.ЗаполнятьОбязательно = 0
	|			ТОГДА ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно
	|		КОГДА ВсеСвойства.ЗаполнятьОбязательно = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполнятьОбязательно,
	|	ДополнительныеРеквизитыИСведения.Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства,
	|	ДополнительныеРеквизитыИСведения.МногострочноеПолеВвода,
	|	ВсеСвойства.Удалено КАК Удалено
	|ИЗ
	|	ВсеСвойства КАК ВсеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВсеСвойства.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удалено,
	|	ВсеСвойства.ПорядокНабора,
	|	ВсеСвойства.ПорядокСвойства";
	
	Если ЭтоДополнительноеСведение Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты",
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СвойстваНаборов.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно",
			"0 КАК ЗаполнятьОбязательно");
	КонецЕсли;
	
	ОписаниеСвойств = Запрос.Выполнить().Выгрузить();
	ОписаниеСвойств.Индексы.Добавить("Свойство");
	ОписаниеСвойств.Колонки.Добавить("Значение");
	
	// Удаление дублей свойств в нижестоящих наборах свойств.
	Индекс = ОписаниеСвойств.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = ОписаниеСвойств[Индекс];
		НайденнаяСтрока = ОписаниеСвойств.Найти(Строка.Свойство);
		
		Если НайденнаяСтрока <> Неопределено
		   И НайденнаяСтрока <> Строка Тогда
			
			ОписаниеСвойств.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
	// Заполнение значений свойств.
	Для Каждого Строка Из ДополнительныеСвойстваОбъекта Цикл
		ОписаниеСвойства = ОписаниеСвойств.Найти(Строка.Свойство, "Свойство");
		Если ОписаниеСвойства <> Неопределено Тогда
			// Поддержка строк неограниченной длины.
			Если НЕ ЭтоДополнительноеСведение
			   И ИспользоватьНеограниченнуюСтроку(
			         ОписаниеСвойства.ТипЗначения, ОписаниеСвойства.МногострочноеПолеВвода)
			   И НЕ ПустаяСтрока(Строка.ТекстоваяСтрока) Тогда 
				
				ОписаниеСвойства.Значение = Строка.ТекстоваяСтрока;
			Иначе
				ОписаниеСвойства.Значение = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеСвойств;
	
КонецФункции

// Возвращает использование набором дополнительных сведений и реквизитов.
Функция ВидыСвойствНабора(Ссылка) Экспорт
	
	ВидыСвойствНабора = Новый Структура;
	ВидыСвойствНабора.Вставить("ДополнительныеРеквизиты", Ложь);
	ВидыСвойствНабора.Вставить("ДополнительныеСведения",  Ложь);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ВидыСвойствНабора;
	КонецЕсли;
	
	СвойстваСсылки = __ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(Ссылка, "ПометкаУдаления, ЭтоГруппа, Предопределенный, Родитель");
	
	Если СвойстваСсылки.ПометкаУдаления Тогда
		Возврат ВидыСвойствНабора;
	КонецЕсли;
	
	Если СвойстваСсылки.ЭтоГруппа Тогда
		СсылкаПредопределенного = Ссылка;
		
	//ИначеЕсли СвойстваСсылки.Предопределенный
	//		И СвойстваСсылки.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
	//	
	//	СсылкаПредопределенного = Ссылка;
	Иначе
		СсылкаПредопределенного = Ссылка.Родитель;
	КонецЕсли;
	
	ИмяПредопределенного = Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИмяПредопределенного(СсылкаПредопределенного);
	
	Если НЕ ЗначениеЗаполнено(ИмяПредопределенного) Тогда
		Возврат ВидыСвойствНабора;
	КонецЕсли;
	
	Позиция = Найти(ИмяПредопределенного, "_");
	
	ПерваяЧастьИмени =  Лев(ИмяПредопределенного, Позиция - 1);
	ВтораяЧастьИмени = Прав(ИмяПредопределенного, СтрДлина(ИмяПредопределенного) - Позиция);
	
	ВидыСвойствНабора = Новый Структура;
	
	// Проверка использования дополнительных реквизитов.
	МетаданныеВладельцаСвойств = Метаданные.НайтиПоПолномуИмени(ПерваяЧастьИмени + "." + ВтораяЧастьИмени);
	
	ВидыСвойствНабора.Вставить(
		"ДополнительныеРеквизиты",
		МетаданныеВладельцаСвойств <> Неопределено
		И МетаданныеВладельцаСвойств.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено );
	
	// Проверка использования дополнительных сведений.
	Тип = Тип(ПерваяЧастьИмени + "Ссылка." + ВтораяЧастьИмени);
	
	ВидыСвойствНабора.Вставить(
		"ДополнительныеСведения",
		      Метаданные.ОбщиеКоманды.Найти("ДополнительныеСведенияКоманднаяПанель") <> Неопределено
		    И Метаданные.ОбщиеКоманды.ДополнительныеСведенияКоманднаяПанель.ТипПараметраКоманды.СодержитТип(Тип)
		ИЛИ   Метаданные.ОбщиеКоманды.Найти("ДополнительныеСведенияПанельНавигации") <> Неопределено
		    И Метаданные.ОбщиеКоманды.ДополнительныеСведенияПанельНавигации.ТипПараметраКоманды.СодержитТип(Тип) );
	
	Возврат ВидыСвойствНабора;
	
КонецФункции

// Удаляет старые реквизиты и элементы формы.
// 
// Параметры:
//  Форма        - УправляемаяФорма, предварительно настроенная в процедуре
//                 УправлениеСвойствами.ПриСозданииНаСервере()
//  
Процедура УдалитьСтарыеРеквизитыИЭлементы(Форма) Экспорт
	
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого ОписаниеСвойства Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		
		УдаляемыеРеквизиты.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение);
		Если Не ПустаяСтрока(ОписаниеСвойства.ИмяРеквизитаСвойство) Тогда
			УдаляемыеРеквизиты.Добавить(ОписаниеСвойства.ИмяРеквизитаСвойство);
		КонецЕсли;
		
		Форма.Элементы.Удалить(Форма.Элементы[ОписаниеСвойства.ИмяРеквизитаЗначение]);
		
	КонецЦикла;
	
	Если УдаляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов Цикл
		Форма.Элементы.Удалить(Форма.Элементы[ЭлементСписка.Представление]);
	КонецЦикла;
	
	Форма.Свойства_ОписаниеДополнительныхРеквизитов.Очистить();
	Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов.Очистить();
	
КонецПроцедуры

// Проверяет возможность использования для свойства строки неограниченный длины.
Функция ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода)
	
	Если ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
	   И ТипЗначенияСвойства.Типы().Количество() = 1
	   И МногострочноеПолеВвода > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Определяет, что тип значения может быть СправочникСсылка.ЗначенияСвойствОбъектов.
Функция ТипЗначенияСодержитЗначенияСвойств(ТипЗначения)
	
	Возврат ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено;
	
КонецФункции

// Заполняет объект из реквизитов, созданных в форме.
// Вызывается из обработчика ПередЗаписьюНаСервере формы объекта со свойствами.
//
// Параметры:
//   Форма         - УправляемаяФорма.
//   ТекущийОбъект - <ВидОбъектаМетаданных>Объект.<ИмяОбъектаМетаданных>.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Структура = Новый Структура("Свойства_ИспользоватьСвойства");
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	
	Если ТипЗнч(Структура.Свойства_ИспользоватьСвойства) = Тип("Булево") Тогда
		ЗаполнитьДополнительныеРеквизитыВФорме(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект из реквизитов, созданных в форме.
// Вызывается из обработчика ПередЗаписьюНаСервере формы объекта со свойствами.
//
// Параметры:
//  Форма         - УправляемаяФорма, предварительно настроенная в процедуре
//                  УправлениеСвойствами.ПриСозданииНаСервере()
//  
//  ТекущийОбъект - Объект.
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, ТекущийОбъект);
	
КонецПроцедуры

// Переносит значения свойств из реквизитов формы в табличную часть объекта.
// 
// Параметры:
//  Форма        - УправляемаяФорма, предварительно настроенная в процедуре
//                 УправлениеСвойствами.ПриСозданииНаСервере()
//  
//  Объект       - Неопределено - взять объект из реквизита формы Объект.
//                 Объект - СправочникОбъект, ДокументОбъект, ...
//                 ДанныеФормыСтруктура (по типу объекта).
//
Процедура ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, Объект = Неопределено) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Объект;
	КонецЕсли;
	
	СтарыеЗначения = ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить();
	ОписаниеОбъекта.ДополнительныеРеквизиты.Очистить();
	
	Для каждого Строка Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		
		Значение = Форма[Строка.ИмяРеквизитаЗначение];
		
		Если ЗначениеЗаполнено(Значение) Тогда
			Если ТипЗнч(Значение) = Тип("Булево") И Значение = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Удалено Тогда
				ЗаполнитьЗначенияСвойств(
					ОписаниеОбъекта.ДополнительныеРеквизиты.Добавить(),
					СтарыеЗначения.Найти(Строка.Свойство, "Свойство"));
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ОписаниеОбъекта.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = Строка.Свойство;
			НоваяСтрока.Значение = Значение;
			
			// Поддержка строк неограниченной длины.
			Свойство = Строка.Свойство.ПолучитьОбъект();
			Если ИспользоватьНеограниченнуюСтроку(Свойство.ТипЗначения, Свойство.МногострочноеПолеВвода) Тогда
				НоваяСтрока.ТекстоваяСтрока = Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполненность реквизитов обязательных для заполнения.
// 
// Параметры:
//  Форма         - УправляемаяФорма, предварительно настроенная в процедуре
//                  УправлениеСвойствами.ПриСозданииНаСервере().
//
//  Отказ                - параметр обработчика ОбработкаПроверкиЗаполненияНаСервере().
//  ПроверяемыеРеквизиты - параметр обработчика ОбработкаПроверкиЗаполненияНаСервере().
//
Процедура ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Для каждого Строка Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		Если Строка.ЗаполнятьОбязательно Тогда
			Если НЕ ЗначениеЗаполнено(Форма[Строка.ИмяРеквизитаЗначение]) Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					Строка.ИмяРеквизитаЗначение,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Поле ""%1"" не заполнено.'"), Строка.Наименование));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

// Обновляет отображаемые данные на форме объекта со свойствами.
// 
// Параметры:
//  Форма        - УправляемаяФорма, предварительно настроенная в процедуре
//                 УправлениеСвойствами.ПриСозданииНаСервере()
//  
//  Объект       - Неопределено - взять объект из реквизита формы Объект.
//                 Объект - СправочникОбъект, ДокументОбъект, ...
//                 ДанныеФормыСтруктура (по типу объекта).
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов(Форма, Объект = Неопределено) Экспорт
	
	ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, Объект);
	
	ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

// Возвращает максимальный размер файла
//
Функция ПолучитьМаксимальныйРазмерФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	Если МаксимальныйРазмерФайла = Неопределено ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	
	//Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
	//	
	//	МаксимальныйРазмерФайлаОбластиДанных = Константы.МаксимальныйРазмерФайлаОбластиДанных.Получить();
	//	
	//	Если МаксимальныйРазмерФайлаОбластиДанных = Неопределено ИЛИ МаксимальныйРазмерФайлаОбластиДанных = 0 Тогда
	//		МаксимальныйРазмерФайлаОбластиДанных = 50*1024*1024; // 50 мб
	//		Константы.МаксимальныйРазмерФайлаОбластиДанных.Установить(МаксимальныйРазмерФайлаОбластиДанных);
	//	КонецЕсли;
	//	
	//	МаксимальныйРазмерФайла = Мин(МаксимальныйРазмерФайла, МаксимальныйРазмерФайлаОбластиДанных);
	//	
	//КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

// Возвращает имя с расширением- если расширение пусто - только имя
//
Функция ПолучитьИмяСРасширением(ПолноеНаименование, Расширение) Экспорт
	
	ИмяСРасширением = ПолноеНаименование;
	
	Если Расширение <> "" Тогда
		ИмяСРасширением = ИмяСРасширением + "." + Расширение;
	КонецЕсли;
	
	Возврат ИмяСРасширением;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// Работа с кодировками

// Функция возвращает таблицу имен кодировок
// Возвращаемое значение:
// Результат (СписокЗначений)
// - Значение (Строка) - например "ibm852"
// - Представление (Строка) - например "ibm852 (Центральноевропейская DOS)"
//
Функция ПолучитьСписокКодировок() Экспорт

	СписокКодировок = Новый СписокЗначений;
	
	СписокКодировок.Добавить("ibm852",			"IBM852 (Центральноевропейская DOS)");
	СписокКодировок.Добавить("ibm866",			"IBM866 (Кириллица DOS)");
	СписокКодировок.Добавить("iso-8859-1",		"ISO-8859-1 (Западноевропейская ISO)");
	СписокКодировок.Добавить("iso-8859-2",		"ISO-8859-2 (Центральноевропейская ISO)");
	СписокКодировок.Добавить("iso-8859-3",		"ISO-8859-3 (Латиница 3 ISO)");
	СписокКодировок.Добавить("iso-8859-4",		"ISO-8859-4 (Балтийская ISO)");
	СписокКодировок.Добавить("iso-8859-5",		"ISO-8859-5 (Кириллица ISO)");
	СписокКодировок.Добавить("iso-8859-7",		"ISO-8859-7 (Греческая ISO)");
	СписокКодировок.Добавить("iso-8859-9",		"ISO-8859-9 (Турецкая ISO)");
	СписокКодировок.Добавить("iso-8859-15",		"ISO-8859-15 (Латиница 9 ISO)");
	СписокКодировок.Добавить("koi8-r",			"KOI8-R (Кириллица KOI8-R)");
	СписокКодировок.Добавить("koi8-u",			"KOI8-U (Кириллица KOI8-U)");
	СписокКодировок.Добавить("us-ascii",		"US-ASCII США");
	СписокКодировок.Добавить("utf-8",			"UTF-8 (Юникод UTF-8)");
	СписокКодировок.Добавить("windows-1250",	"Windows-1250 (Центральноевропейская Windows)");
	СписокКодировок.Добавить("windows-1251",	"windows-1251 (Кириллица Windows)");
	СписокКодировок.Добавить("windows-1252",	"Windows-1252 (Западноевропейская Windows)");
	СписокКодировок.Добавить("windows-1253",	"Windows-1253 (Греческая Windows)");
	СписокКодировок.Добавить("windows-1254",	"Windows-1254 (Турецкая Windows)");
	СписокКодировок.Добавить("windows-1257",	"Windows-1257 (Балтийская Windows)");
	
	Возврат СписокКодировок;

КонецФункции
