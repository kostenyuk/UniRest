////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылка отчетов" (вызов сервера)
// 
// Выполняется на сервере, но может вызываться с клиента.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для внутреннего использования
//
Функция СформироватьСписокПолучателейРассылки(Знач Параметры) Экспорт
	ПараметрыЖурнала = Новый Структура("ИмяСобытия, Метаданные, Данные, МассивОшибок, БылиОшибки");
	ПараметрыЖурнала.ИмяСобытия   = НСтр("ru = 'Рассылка отчетов. Формирование списка получателей'");
	ПараметрыЖурнала.МассивОшибок = Новый Массив;
	ПараметрыЖурнала.БылиОшибки   = Ложь;
	ПараметрыЖурнала.Данные       = Параметры.Ссылка;
	ПараметрыЖурнала.Метаданные   = Метаданные.Справочники.РассылкиОтчетов;
	
	Результат = Новый Структура("Получатели, ТекстОшибок", , "");
	Результат.Получатели = РассылкаОтчетов.СформироватьСписокПолучателейРассылки(ПараметрыЖурнала, Параметры);
	
	Если ПараметрыЖурнала.БылиОшибки = Истина Тогда
		Результат.ТекстОшибок = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(ПараметрыЖурнала.МассивОшибок, Ложь);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Обновляет состояние фонового задания и получает результат его выполняния из
//   временного хранилища.
//
Функция ПроверитьВыполнениеФоновогоЗадания(ИдентификаторЗадания, АдресХранилища) Экспорт
	Результат = Новый Структура("Статус, Детали");
	Попытка
		Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Результат.Статус = "ВыполненоУспешно"; // Не локализуется
			Результат.Детали = ПолучитьИзВременногоХранилища(АдресХранилища);
		Иначе
			Результат.Статус = "Выполняется"; // Не локализуется
		КонецЕсли;
	Исключение
		Результат.Статус = "Исключение"; // Не локализуется
	КонецПопытки;
	Возврат Результат;
КонецФункции

//-----------------------------------------------------------------------------------------

// Создает карточку Файла в БД вместе с версией
// Параметры
// Владелец - владелец файла - будет установлен в реквизит ВладелецФайла у созданного файла
// ИмяБезРасширения  - Строка - имя файла без расширения
// РасширениеБезТочки - Строка - расширение файла
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// Размер - размер файла в байтах
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// Пользователь - СправочникССылка.Пользователи - ссылка на пользователя - автора файла
// Комментарий  - Строка - комментарий к файлу
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл
Функция СоздатьФайлСВерсией(
	ВладелецФайла,
	ИмяБезРасширения,
	РасширениеБезТочки,
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	Размер,
	АдресВременногоХранилищаФайла,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент,
	Пользователь = Неопределено,
	Комментарий = "",
	ЗаписатьВИсторию = Ложь,
	Кодировка = Неопределено) Экспорт
	
	//ЕстьПравоСохранения = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);

	НачатьТранзакцию();
	Попытка

		// Создадим карточку Файла в БД
		Док = СоздатьФайл(
			ВладелецФайла,
			Комментарий,
			ИмяБезРасширения,
			Истина,
			АдресВременногоХранилищаТекста,
			Пользователь);
		
		//// Создадим версию сохраняемого файла для сохранения в карточке Файла
		//Версия = СоздатьВерсию(
		//	ВремяИзменения,
		//	ВремяИзмененияУниверсальное,
		//	Док,
		//	ИмяБезРасширения,
		//	Размер,
		//	РасширениеБезТочки,
		//	АдресВременногоХранилищаФайла,
		//	АдресВременногоХранилищаТекста,
		//	ЭтоВебКлиент,
		//	Неопределено, // СсылкаНаВерсиюИсточник
		//	Неопределено, // НоваяВерсияДатаСоздания
		//	Пользователь);

		//// Подставим ссылку на версию в карточку Файла
		//ОбновитьВерсиюВФайле(Док, Версия, АдресВременногоХранилищаТекста);

		//Если Кодировка <> Неопределено Тогда
		//	ЗаписатьКодировкуВерсииФайла(Версия, Кодировка);
		//КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
		
		//Если ЗаписатьВИсторию И ЕстьПравоСохранения Тогда
		Если ЗаписатьВИсторию Тогда
			НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(Док);
			ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
		КонецЕсли;		
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ВызватьИсключение КраткоеПредставлениеОшибки(Инфо);
	КонецПопытки;

	//РаботаСФайламиВызовСервераПереопределяемый.ПриСозданииФайла(Док);
	
	Возврат Док;
КонецФункции

// Создает карточку Файла в БД
// Параметры
// Владелец - владелец файла - будет устанолвен в реквизит ВладелецФайла у созданного файла
// Комментарий  - Строка - комментарий к файлу
// ИмяБезРасширения  - Строка - имя файла без расширения
// ХранитьВерсии  - Булево - хранить версии
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// Пользователь - СправочникССылка.Пользователи - ссылка на пользователя - автора файла
// 
// Возвращаемое значение:
//   СправочникСсылка.Файлы - ссылка на созданный файл
Функция СоздатьФайл(Знач Владелец, Знач Комментарий, Знач ИмяБезРасширения, 
	Знач ХранитьВерсии, Знач АдресВременногоХранилищаТекста,
	Пользователь = Неопределено) Экспорт
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.ВладелецФайла = Владелец;
	Файл.Наименование = ИмяБезРасширения;
	Файл.ПолноеНаименование = ИмяБезРасширения;
	
	Если Пользователь = Неопределено Тогда
		Файл.Автор = Пользователи.ТекущийПользователь();
	Иначе	
		Файл.Автор = Пользователь;
	КонецЕсли;	
	
	Файл.ДатаСоздания = ТекущаяДатаСеанса();
	Файл.Описание = Комментарий;
	//Файл.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Неопределено);
	Файл.ИндексКартинки = РассылкаОтчетовКлиентСервер.ПолучитьИндексПиктограммыФайла(Неопределено);
	//Файл.ХранитьВерсии = ХранитьВерсии;
	
	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		Файл.ТекстХранилище = АдресВременногоХранилищаТекста;
	ИначеЕсли Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		//Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Текст = РассылкаОтчетовКлиентСервер.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Файл.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	КонецЕсли;
	
	Файл.Записать();
	Возврат Файл.Ссылка;
	
КонецФункции // СоздатьФайл()

// Получает синтетический рабочий каталог папки на диске (он может прийти от родительской папки)
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//
// Возвращаемое значение:
//   Строка  - рабочий каталог
Функция ПолучитьРабочийКаталог(СсылкаПапки) Экспорт
	
	Если ТипЗнч(СсылкаПапки) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат ""
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочийКаталог = "";
	
	// Подготовить структуру отбора по измерениям
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Папка", СсылкаПапки);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.РабочиеКаталогиФайлов.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	РабочийКаталог = СтруктураРесурсов.Путь;
	
	Если НЕ ПустаяСтрока(РабочийКаталог) Тогда
		// Добавляем слэш в конце, если его нет
		//РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог, ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог);
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции

// Сохраняет в регистре сведений рабочий каталог папки
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца
Процедура СохранитьРабочийКаталог(СсылкаПапки, РабочийКаталогВладельца) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Папка = СсылкаПапки;
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.Путь = РабочийКаталогВладельца;

	НаборЗаписей.Записать();
КонецПроцедуры

// Очищает в регистре сведений рабочий каталог папки
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
Процедура ОчиститьРабочийКаталог(СсылкаПапки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	
	// не добавляем записи в набор - чтобы все стереть
	НаборЗаписей.Записать();
	
	
	// для дочерних папок очищаем рабочие каталоги
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПапкиФайлов КАК ПапкиФайлов
		|ГДЕ
		|	ПапкиФайлов.Родитель = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчиститьРабочийКаталог(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры
