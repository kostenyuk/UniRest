
Процедура ПритворитсяВладельцем(СтрокаТаблицы, ТабличнаяЧасть, Владелец) Экспорт
	
	СтрокаТабличнойЧасти = ТабличнаяЧасть.Найти(Владелец, "Идентификатор");
	Если (Не СтрокаТабличнойЧасти = Неопределено) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТабличнойЧасти, "Номенклатура,НоменклатурнаяГруппа")
	КонецЕсли;
	
КонецПроцедуры // ПритворитсяВладельцем()


Функция ПроизводствоУправлениеИдентификаторами(ДокументОбъект, Идентификаторы, Распечатан = Неопределено, Выполненн = Неопределено)
	
	// Подготовка данных.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(ДокументОбъект.Товары); ТабличныеЧасти.Добавить(ДокументОбъект.Услуги);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если (Идентификаторы.Найти(СтрокаТабличнойЧасти.Идентификатор) = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (Не Распечатан = Неопределено) Тогда
				СтрокаТабличнойЧасти.Распечатан = Распечатан;
			КонецЕсли;
			Если (Не Выполненн = Неопределено) Тогда
				СтрокаТабличнойЧасти.Выполненн = Выполненн;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Результат.
	Возврат Истина;
		
КонецФункции // ПолучитьПроизводственныеГруппыИИдентификаторы()	

Функция ПроизводствоПолучитьСписокПроизводственныхГруппСИдентификаторами(ДокументОбъект, Распечатанные, Выполненные)
	
	Результат = Новый СписокЗначений;
	
	НоменклатурныеГруппы = Новый Массив;
	
	// Подготовка данных.
	ТабличныеЧасти = Новый Массив;
	
	Если (ДокументОбъект.Ссылка = ДокументОбъект) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РеализацияТоваровУслугТовары.Идентификатор,
		                      |	РеализацияТоваровУслугТовары.НоменклатурнаяГруппа,
		                      |	РеализацияТоваровУслугТовары.Распечатан,
		                      |	РеализацияТоваровУслугТовары.Выполненн
		                      |ИЗ
		                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                      |ГДЕ
		                      |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		                      |	И РеализацияТоваровУслугТовары.Распечатан = &Распечатан
		                      |	И РеализацияТоваровУслугТовары.Выполненн = &Выполненн
		                      |	И (НЕ РеализацияТоваровУслугТовары.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	РеализацияТоваровУслугУслуги.Идентификатор,
		                      |	РеализацияТоваровУслугУслуги.НоменклатурнаяГруппа,
		                      |	РеализацияТоваровУслугУслуги.Распечатан,
		                      |	РеализацияТоваровУслугУслуги.Выполненн
		                      |ИЗ
		                      |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		                      |ГДЕ
		                      |	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		                      |	И РеализацияТоваровУслугУслуги.Распечатан = &Распечатан
		                      |	И РеализацияТоваровУслугУслуги.Выполненн = &Выполненн
		                      |	И (НЕ РеализацияТоваровУслугУслуги.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))");
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("Распечатан", Распечатанные);
		Запрос.УстановитьПараметр("Выполненн", Выполненные);
		ТабличныеЧасти.Добавить(Запрос.Выполнить().Выгрузить());
		
		НоменклатурныеГруппы = ТабличныеЧасти[0].ВыгрузитьКолонку("НоменклатурнаяГруппа");
		
	Иначе
		
		ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(ДокументОбъект.Товары); ТабличныеЧасти.Добавить(ДокументОбъект.Услуги);
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				Если СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				Если (СтрокаТабличнойЧасти.Распечатан = Распечатанные) И (СтрокаТабличнойЧасти.Выполненн = Выполненные) Тогда
					НоменклатурныеГруппы.Добавить(СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Пустая выборка.
	Если Не Булево(НоменклатурныеГруппы.Количество()) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа,
	                      |	ПроизводственныеГруппы.Ссылка КАК ПроизводственнаяГруппа
	                      |ИЗ
	                      |	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеГруппы КАК ПроизводственныеГруппы
	                      |		ПО НоменклатурныеГруппы.ПроизводственнаяГруппа = ПроизводственныеГруппы.Ссылка
	                      |ГДЕ
	                      |	НоменклатурныеГруппы.Ссылка В(&НоменклатурныеГруппы)
	                      |	И ПроизводственныеГруппы.Актуальность");
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", НоменклатурныеГруппы);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПроизводственныеГруппыНайденные = Новый Соответствие; НоменклатурныеГруппыНайденные = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СтруктураПроизводственнойГруппы = ПроизводственныеГруппыНайденные[Выборка.ПроизводственнаяГруппа];
		
		Если (СтруктураПроизводственнойГруппы = Неопределено) Тогда
			СтруктураПроизводственнойГруппы = Новый Структура("ПроизводственнаяГруппа,Идентификаторы", Выборка.ПроизводственнаяГруппа, Новый Массив);
			
			ПроизводственныеГруппыНайденные[Выборка.ПроизводственнаяГруппа] = СтруктураПроизводственнойГруппы;
			Результат.Добавить(СтруктураПроизводственнойГруппы, Выборка.ПроизводственнаяГруппа);
		КонецЕсли;
		
		НоменклатурныеГруппыНайденные[Выборка.НоменклатурнаяГруппа] = СтруктураПроизводственнойГруппы;
	КонецЦикла;
	
	// Подбор идентификаторов.
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Если (СтрокаТабличнойЧасти.Распечатан = Распечатанные) И (СтрокаТабличнойЧасти.Выполненн = Выполненные) Тогда
				СтруктураПроизводственнойГруппы = НоменклатурныеГруппыНайденные[СтрокаТабличнойЧасти.НоменклатурнаяГруппа];
				Если (Не СтруктураПроизводственнойГруппы = Неопределено) Тогда
					СтруктураПроизводственнойГруппы.Идентификаторы.Добавить(СтрокаТабличнойЧасти.Идентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Результат.
	Возврат Результат;
		
КонецФункции // ПроизводствоПолучитьСписокПроизводственныхГруппСИдентификаторами()	



#Если Клиент Тогда

Функция ПроизводствоУправление(ДокументОбъект, ФормаДокумента, Завершение = Ложь, Отмена = Ложь, Идентификаторы = Неопределено, Автоматически = Ложь)
	
	// Выбор идентификаторов.
	Если (Идентификаторы = Неопределено) Тогда
		
		Распечатанные = Завершение; 
		Выполненные = Ложь;
		СпсиокПроизводственныхГруппы = ПроизводствоПолучитьСписокПроизводственныхГруппСИдентификаторами(ДокументОбъект, Распечатанные, Выполненные);
		
		Если Завершение Тогда
			СпсиокПроизводственныхГруппы.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		Иначе
			СпсиокПроизводственныхГруппы.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
		КонецЕсли; 
		
		Если СпсиокПроизводственныхГруппы.Количество() > 0 Тогда
			СпсиокПроизводственныхГруппы[0].Пометка = Истина;
		КонецЕсли;
	
		Если Не Автоматически Тогда
			Если Не РаботаСДиалогами.ВыбратьОтметкиСписка(СпсиокПроизводственныхГруппы, НСтр("ru='Выберите производственные гурппы';uk='Оберіть виробничі групи'")) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Идентификаторы = Новый Массив;
		Для Каждого ЭлементСписка Из СпсиокПроизводственныхГруппы Цикл
			Если Не ЭлементСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Идентификатор Из ЭлементСписка.Значение.Идентификаторы Цикл
				Идентификаторы.Добавить(Идентификатор);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка.
	Если Не Булево(Идентификаторы.Количество()) Тогда
		Возврат Ложь;
	КонецЕсли;
			
	// Управление.
	Если Не Завершение Тогда
		Распечатан = Истина;
		Выполненн = Неопределено;
	Иначе
		Если Не Отмена Тогда
			Распечатан = Истина;
			Выполненн = Истина;
		Иначе
			Распечатан = Ложь;
			Выполненн = Ложь;
		КонецЕсли;						  
	КонецЕсли;						  
	
	// Действие.
	Результат = РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, ФормаДокумента, Истина) И
				ПроизводствоУправлениеИдентификаторами(ДокументОбъект, Идентификаторы, Распечатан, Выполненн) И 
				РаботаСДиалогами.ДокументЗаписать(ДокументОбъект, ФормаДокумента);
				
	РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, ФормаДокумента);			
				
	Возврат	Результат;		
				
	
КонецФункции // ПроизводствоУправление()	

Функция ПроизводствоНачать(ДокументОбъект, ФормаДокумента, Идентификаторы = Неопределено, Автоматически = Ложь) Экспорт
	
	// Результат.
	Возврат ПроизводствоУправление(ДокументОбъект, ФормаДокумента, Ложь, Ложь, Идентификаторы, Автоматически);
	
КонецФункции // ПроизводствоНачать()	

Функция ПроизводствоЗавершить(ДокументОбъект, ФормаДокумента, Идентификаторы = Неопределено, Автоматически = Ложь) Экспорт
	
	// Результат.
	Возврат ПроизводствоУправление(ДокументОбъект, ФормаДокумента, Истина, Ложь, Идентификаторы, Автоматически);
	
КонецФункции // ПроизводствоЗавершить()	
	
Функция ПроизводствоОтменить(ДокументОбъект, ФормаДокумента, Идентификаторы = Неопределено, Автоматически = Ложь) Экспорт
	
	// Результат.
	Возврат ПроизводствоУправление(ДокументОбъект, ФормаДокумента, Истина, Истина, Идентификаторы, Автоматически);
	
КонецФункции // ПроизводствоОтменить()	

	
// Обработчик события РеализацияТоваровУслуг.ПередЗаписью формы документа.
//
Процедура ПередЗаписьюДокументаРеализацияТоваровУслуг(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Проверка.
	Если (Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Тогда
		Возврат;
	КонецЕсли;

	// ПометкаУдаления.
	ПередЗаписьюДокументаРеализацияТоваровУслугПометкаУдаления(ДокументОбъект, ФормаДокумента, Отказ);
	
	// РабочиеЦентры.
	ПередЗаписьюДокументаРеализацияТоваровУслугРабочиеЦентры(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры // ПередЗаписьюДокументаРеализацияТоваровУслуг()
	
// Обработчик события РеализацияТоваровУслуг.ПриЗаписи формы документа.
//
Процедура ПриЗаписиДокументаРеализацияТоваровУслуг(ДокументОбъект, ФормаДокумента, Отказ) Экспорт
	
	// Проверка.
	Если (Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Тогда
		Возврат;
	КонецЕсли;
	
	// ЧерныйСписокДобавление.
	ПриЗаписиДокументаРеализацияТоваровУслугЧерныйСписокДобавление(ДокументОбъект, ФормаДокумента, Отказ);

КонецПроцедуры // ПриЗаписиДокументаРеализацияТоваровУслуг()

// Обработчик события РеализацияТоваровУслуг.ПриПечати формы документа.
//
Процедура ПриПечатиДокументаРеализацияТоваровУслуг(ДокументОбъект, ФормаДокумента) Экспорт
	
	// Проверка.
	Если (Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Тогда
		Возврат;
	КонецЕсли;
	
	// Встречка.
	Если Булево(ДокументОбъект.РабочиеЦентры().Количество()) Тогда
		ДокументОбъект.Печать("Встречка", ,,, Истина);	
	КонецЕсли; 

КонецПроцедуры // ПриПечатиДокументаРеализацияТоваровУслуг()


// Обработчик события РеализацияТоваровУслуг.ПередЗаписью.ПометкаУдаления формы документа.
//
Процедура ПередЗаписьюДокументаРеализацияТоваровУслугПометкаУдаления(ДокументОбъект, ФормаДокумента, Отказ)
	
	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// ПометкаУдаления.
	Если Не Отказ Тогда
		Если Параметры.ОсновныеСобытия.Уадление Тогда
			Если ОбщегоНазначения.РежимFrontOffice() И (Не ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "НеОчищатьДокумент")) Тогда
				
				ДокументОбъект.Товары.Очистить();
				ДокументОбъект.Услуги.Очистить();
				
				Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Скидки Цикл
					СтрокаТабличнойЧасти.СуммаНаценки = Неопределено;
					СтрокаТабличнойЧасти.СуммаСкидки = Неопределено;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередЗаписьюДокументаРеализацияТоваровУслугПометкаУдаления()

// Обработчик события РеализацияТоваровУслуг.ПередЗаписью.РабочиеЦентры формы документа.
//
Процедура ПередЗаписьюДокументаРеализацияТоваровУслугРабочиеЦентры(ДокументОбъект, ФормаДокумента, Отказ, РежимЗаписи, РежимПроведения)
	           
	// РабочиеЦентры.
	Если Не Отказ Тогда
		Если ОбщегоНазначения.РежимFrontOffice() Тогда
			
			// Рабочие центры.
			ДокументОбъект.РабочиеЦентры().Очистить();
			
			// Получение оригинала.
			ДокументОригинал = ИсторияИзменений.ПолучитьОригиналОбъекта(ДокументОбъект);
			Обработка = Обработки.FrontOfficeМенеджерДокумента.Создать();
			Обработка.ПроверкаВстречки(ДокументОбъект, ДокументОригинал);
			
			// Игорь 05.10.2011 12:17:09 Так как полное гавно
			
			//	
		//	 Табличные части.
		//	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить("Товары"); ТабличныеЧасти.Добавить("Услуги");
		//	
		//	
		//	// -- Установка выполненного статуса распечатанных, но не напечатанных (I).
		//	Если Не Истина Тогда
		//	//Если Не ДокументПолучитьЗначениеНастройки(ТипДокумента, "ВыводитьВстречкуНаПечать") Тогда
		//		
		//		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		//			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
		//				Если СтрокаТабличнойЧасти.Распечатан Тогда
		//					СтрокаТабличнойЧасти.Выполненн = Истина;
		//				КонецЕсли;
		//			КонецЦикла;
		//		КонецЦикла;
		//		
		//		Возврат;	
		//		
		//	КонецЕсли;
		//	
		//	
		//	// -- Подготовка таблиц.    ДокументОбъект.Товары[2].Идентификатор
		////	ТаблицаПозиций = ДокументОбъект.Товары.Выгрузить(Новый Массив, "Идентификатор,Количество,Номенклатура,НоменклатурнаяГруппа");
		//	ТаблицаПозиций = ДокументОбъект.Товары.Выгрузить(Новый Массив, "Количество,Номенклатура,НоменклатурнаяГруппа");
		//	ТаблицаПозиций.Колонки.Добавить("Возврат", Новый ОписаниеТипов("Булево"));
		//	ТаблицаПозиций.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
		//	ТаблицаПозиций.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Строка"));
		//										 
		//	// ---- Выборка данных.
		//	ДокуметыПроверки = Новый Массив; // Именно в таком порядке добаления.
		//	ДокуметыПроверки.Добавить(Новый Структура("ДокументИсходный,ДокументПроверки", ДокументОбъект, ДокументОригинал));
		//	ДокуметыПроверки.Добавить(Новый Структура("ДокументИсходный,ДокументПроверки", ДокументОригинал, ДокументОбъект));
		//	
		//	Возвратная = Ложь; 
		//	
		//	Для Каждого Докуметы Из ДокуметыПроверки Цикл
		//		ДокументИсходный = Докуметы.ДокументИсходный; 
		//		ДокументПроверки = Докуметы.ДокументПроверки;
		//	
		//		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		//			Для Каждого СтрокаТабличнойЧасти Из ДокументИсходный[ТабличнаяЧасть] Цикл
		//				
		//				СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
		//				ПустойУИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 

		//				Если СтрокаТабличнойЧасти.Владелец = ПустойУИдентификатор тогда
		//					 
		//					 Если (Не СтрокаТабличнойЧасти.Распечатан) Или 
		//						 (Не Булево(СтрокаТабличнойЧасти.Количество)) Или
		//						 (Не СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар) Тогда
		//						Продолжить;
		//					КонецЕсли;
		//					
		//					СтрокаСравниваемойТабличнойЧасти = ДокументПроверки[ТабличнаяЧасть].Найти(СтрокаТабличнойЧасти.Идентификатор, "Идентификатор");
		//					Если (СтрокаСравниваемойТабличнойЧасти = Неопределено) Или (Не СтрокаСравниваемойТабличнойЧасти.Распечатан) Тогда
		//						Количество = СтрокаТабличнойЧасти.Количество;
		//					Иначе
		//						Если  СтрокаТабличнойЧасти.Номенклатура.весовой Тогда
		//							Продолжить;
		//						КонецЕсли;
		//						
		//						Если (СтрокаСравниваемойТабличнойЧасти.Количество >= СтрокаТабличнойЧасти.Количество) Тогда
		//							Продолжить;
		//						Иначе
		//							Количество = СтрокаТабличнойЧасти.Количество - СтрокаСравниваемойТабличнойЧасти.Количество;
		//						КонецЕсли;
		//					КонецЕсли;
		//					
		//				//Иначе 
		//					 
		//					КонецЕсли;
		//				СтрокаТаблицы = ТаблицаПозиций.Добавить();
		//				СтрокаТаблицы.Идентификатор = Строка(СтрокаТабличнойЧасти.Идентификатор);
		//				СтрокаТаблицы.Владелец = Строка(СтрокаТабличнойЧасти.Владелец);
		//				СтрокаТаблицы.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		//				СтрокаТаблицы.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
		//				СтрокаТаблицы.Количество = Количество;
		//				СтрокаТаблицы.Возврат = Возвратная;
		//				
		//			КонецЦикла;
		//		КонецЦикла;
		//		
		//		Возвратная = Истина; 
		//	КонецЦикла;
		//	
		//	
		//	// -- Распределение по рабочим центрам.
		//	Если Булево(ТаблицаПозиций.Количество()) Тогда
		//		//для каждого Позиция из ТаблицаПозиций Цикл
		//		//	позиция.Идентификатор = Строка(Позиция.ИДентификатор);
		//		//КонецЦикла;
		//		// -- Установка выполненного статуса распечатанных, но не напечатанных (II).
		//		МассивРаспечатываемыхИдентификаторов = ТаблицаПозиций.ВыгрузитьКолонку("Идентификатор"); 
		//		
		//		
		//		// ---- Выборка данных (I).
		//		Запрос = Новый Запрос("ВЫБРАТЬ
		//							  |	ТаблицаПозиций.Идентификатор,
		//							  | ТаблицаПозиций.Владелец,
		//							  |	ТаблицаПозиций.Номенклатура,
		//							  |	ТаблицаПозиций.НоменклатурнаяГруппа,
		//							  |	ТаблицаПозиций.Количество,
		//							  |	ТаблицаПозиций.Возврат
		//							  |ПОМЕСТИТЬ ТаблицаПозицийДокумента
		//							  |ИЗ
		//							  |	&ТаблицаПозиций КАК ТаблицаПозиций
		//							  |;
		//							  |
		//							  |////////////////////////////////////////////////////////////////////////////////
		//							  |ВЫБРАТЬ
		//							  |	РабочиеЦентры.Ссылка КАК РабочийЦентр,
		//							  |	ТаблицаПозиций.Идентификатор,
		//							  | ТаблицаПозиций.Владелец,
		//							  |	ТаблицаПозиций.Номенклатура,
		//							  |	ТаблицаПозиций.НоменклатурнаяГруппа,
		//							  |	ТаблицаПозиций.Количество,
		//							  |	ТаблицаПозиций.Возврат
		//							  |ПОМЕСТИТЬ ПозицииБезОтбора
		//							  |ИЗ
		//							  |	ВременнаяРабочиеЦентры КАК РабочиеЦентры,
		//							  |	ТаблицаПозицийДокумента КАК ТаблицаПозиций
		//							  |ГДЕ
		//							  |	РабочиеЦентры.Владелец = &Ресторан
		//							  |;
		//							  |
		//							  |////////////////////////////////////////////////////////////////////////////////
		//							  |ВЫБРАТЬ
		//							  |	ТаблицаПозиций.РабочийЦентр,
		//							  |	ТаблицаПозиций.Идентификатор,
		//							  | ТаблицаПозиций.Владелец,
		//							  |	ТаблицаПозиций.Количество,
		//							  |	ТаблицаПозиций.Возврат
		//							  |ИЗ
		//							  |	ПозицииБезОтбора КАК ТаблицаПозиций
		//							  |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПравилаИспользования КАК ПравилаИспользованияНоменклатурнойГруппы
		//							  |		ПО ТаблицаПозиций.НоменклатурнаяГруппа = ПравилаИспользованияНоменклатурнойГруппы.ОбъектИспользования
		//							  |			И ТаблицаПозиций.РабочийЦентр = ПравилаИспользованияНоменклатурнойГруппы.ВладелецПравилИспользования
		//							  |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПравилаИспользования КАК ПравилаИспользованияНоменклатуры
		//							  |		ПО ТаблицаПозиций.Номенклатура = ПравилаИспользованияНоменклатуры.ОбъектИспользования
		//							  |			И ТаблицаПозиций.РабочийЦентр = ПравилаИспользованияНоменклатуры.ВладелецПравилИспользования
		//							  |ГДЕ
		//							  |	(ПравилаИспользованияНоменклатурнойГруппы.Актуальность ЕСТЬ NULL 
		//							  |			ИЛИ ПравилаИспользованияНоменклатурнойГруппы.Актуальность)
		//							  |	И (ПравилаИспользованияНоменклатуры.Актуальность ЕСТЬ NULL 
		//							  |			ИЛИ ПравилаИспользованияНоменклатуры.Актуальность)");
		//		Запрос.УстановитьПараметр("Ресторан", ДокументОбъект.Ресторан);
		//		Запрос.УстановитьПараметр("ТаблицаПозиций", ТаблицаПозиций);
		//		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		//		РезультатЗапроса = Запрос.Выполнить();
		//		
		//		// ---- Выборка данных (II).
		//		Запрос.Текст = "УНИЧТОЖИТЬ ТаблицаПозицийДокумента; УНИЧТОЖИТЬ ПозицииБезОтбора;";
		//		Запрос.Выполнить();
		//			   
		//		// Перенос данных.
		//		ТаблицаПозиций = РезультатЗапроса.Выгрузить();
		//		
		//		Если Булево(ТаблицаПозиций.Количество()) Тогда
		//			
		//			Возвратная = Ложь; 
		//			
		//			Для Каждого Докуметы Из ДокуметыПроверки Цикл
		//				ДокументИсходный = Докуметы.ДокументИсходный;
		//			
		//				Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		//					МассивСтрокТаблицыПозиций = Неопределено;
		//					
		//					Для Каждого СтрокаТабличнойЧасти Из ДокументИсходный[ТабличнаяЧасть] Цикл
		//						
		//						Если (СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар) Тогда
		//							//квв
		//							МассивСтрокТаблицыПозиций = ТаблицаПозиций.НайтиСтроки(Новый Структура("Идентификатор,Возврат",Строка( СтрокаТабличнойЧасти.Идентификатор), Возвратная));
		//							КоличествоСтрокиТабличнойЧастиОтбора = СтрокаТабличнойЧасти.Количество;
		//						КонецЕсли;
		//						
		//						Если (МассивСтрокТаблицыПозиций = Неопределено) Тогда
		//							Продолжить;
		//						КонецЕсли;
		//						
		//						Для Каждого СтрокаТаблицыПозиций Из МассивСтрокТаблицыПозиций Цикл
		//							
		//							Если (СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар) Тогда
		//								Количество = СтрокаТаблицыПозиций.Количество;
		//							Иначе
		//								Если (КоличествоСтрокиТабличнойЧастиОтбора = СтрокаТаблицыПозиций.Количество) Тогда
		//									Количество = СтрокаТаблицыПозиций.Количество;
		//								Иначе
		//									Количество = СтрокаТабличнойЧасти.Количество * (СтрокаТаблицыПозиций.Количество / КоличествоСтрокиТабличнойЧастиОтбора); // На ноль проверять не нужно, нулевые строки были отброшены еще при подготовке данных для запроса.
		//								КонецЕсли;
		//							КонецЕсли;
		//							
		//							ДокументОбъект.РабочиеЦентры().Добавить(ДокументИсходный, СтрокаТабличнойЧасти, СтрокаТаблицыПозиций.РабочийЦентр, СтрокаТабличнойЧасти.Идентификатор, Возвратная, Количество);
		//							
		//						КонецЦикла;
		//						
		//					КонецЦикла;
		//				КонецЦикла;
		//				
		//				Возвратная = Истина; 
		//			КонецЦикла;
		//	
		//		КонецЕсли;
		//	КонецЕсли;
		//				 //ДокументОбъект.РабочиеЦентры().Позиции()
		//	
		//	// -- Установка выполненного статуса распечатанных, но не напечатанных (III).
		//	Если (Не МассивРаспечатываемыхИдентификаторов = Неопределено) Тогда
		//		МассивРаспечатанныхИдентификаторов = ТаблицаПозиций.ВыгрузитьКолонку("Идентификатор"); 
		//		
		//		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		//			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
		//				
		//				СтрокаТабличнойЧасти.Выполненн = СтрокаТабличнойЧасти.Выполненн Или
		//				//квв
		//				((Не МассивРаспечатываемыхИдентификаторов.Найти(Строка(СтрокаТабличнойЧасти.Идентификатор)) = Неопределено) И (МассивРаспечатанныхИдентификаторов.Найти(Строка(СтрокаТабличнойЧасти.Идентификатор)) = Неопределено));
		//				
		//			КонецЦикла;
		//		КонецЦикла;
		//	КонецЕсли;
		//	
		КонецЕсли;
	КонецЕсли;
	
	  //Обработка = Неопределено;
	  
  КонецПроцедуры // ПередЗаписьюДокументаРеализацияТоваровУслуг()
  
  Функция СоздатьТаблицуДействиеНадЗаказами() Экспорт 
	  Таблица = Новый ТаблицаЗначений;
	  Таблица.Колонки.Добавить("Действие",  Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНадЗаказами"));
	  Таблица.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
      Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));                  
	  Возврат Таблица;  
  КонецФункции
  
  Функция ЗаполнитьСтруктуруАнализаДействий(Таблица, Действие, Дата, Сотрудник) Экспорт
	  
	  Если Таблица <> Неопределено Тогда
		  Стр = Таблица.Добавить();                  
		  Стр.Действие = Действие; 
		  Стр.Дата = Дата;
		  Стр.Сотрудник = Сотрудник;	  
		  Возврат Таблица;
	  Иначе
		  Возврат Неопределено;
	  КонецЕсли;
	  
  КонецФункции
  
  

// Обработчик события РеализацияТоваровУслуг.ПриЗаписи.ЧерныйСписокДобавление формы документа.
//
Процедура ПриЗаписиДокументаРеализацияТоваровУслугЧерныйСписокДобавление(ДокументОбъект, ФормаДокумента, Отказ)
	
	// Параметры.
	Параметры = ДокументОбъект.ДополнительныеСвойства;
	
	// ЧерныйСписокДобавление.
	Если Не Отказ Тогда
		Если ОбщегоНазначения.ПолучитьБулевоеСвойство(Параметры, "ЧерныйСписокДобавление") Тогда
			Основание = Новый Структура("Ресторан,ВидСобытия,Контрагент,Основание,Комментарий", 
										ДокументОбъект.Ресторан,
										Перечисления.ВидыСобытий.ЧерныйСписокДобавление,
										ДокументОбъект.Контрагент,
										ДокументОбъект.Ссылка,
										Параметры.ЧерныйСписокКомментарий);
			СобытиеОбъект = Документы.Событие.ПустаяСсылка();
			
			Результат = РаботаСДиалогами.ДокументОткрыть(СобытиеОбъект, Неопределено, Ложь, РаботаСДиалогами.ДокументУстановитьДополнительныеСвойства(РаботаСДиалогами.ДокументУстановитьПредотвращениеПроверки(), ,, Основание)) И
						РаботаСДиалогами.ДокументЗаписать(СобытиеОбъект, Неопределено);
						
			РаботаСДиалогами.ДокументЗакрыть(СобытиеОбъект, Неопределено);
						
			Отказ = Не Результат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписиДокументаРеализацияТоваровУслугЧерныйСписокДобавление()

#КонецЕсли

