
# Если Клиент Тогда

// Процедура считывает настройки пользователя данного объекта.
//
Процедура ДеревоНастроекПрочитать(Ссылка, Элемент, Принудительно = Ложь) Экспорт
	
	// Проверка заполнялись ли уже данные.
	Если Не(ЗначениеЗаполнено(Принудительно) И Принудительно) И (Не ДеревоНастроек.Строки.Количество() = 0) И (ВладелецНастроекПользователей = Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецНастроекПользователей = Ссылка;
	
	// Добавление колонок.
	Если (ДеревоНастроек.Колонки.Найти("Наименование") = Неопределено) Тогда
		ДеревоНастроек.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"), "Наименование");
	КонецЕсли;	
	Если (ДеревоНастроек.Колонки.Найти("Значение") = Неопределено) Тогда
		ДеревоНастроек.Колонки.Добавить("Значение",Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.НастройкиПользователей.Тип), "Значение");// Характеристика.НастройкиПользователей
	КонецЕсли;
	
	// Перенос и настройка колонок.
	Элемент.СоздатьКолонки();
	Элемент.Колонки.Наименование.ТолькоПросмотр = Истина;
	Элемент.Колонки.Наименование.Ширина = 25;
	Элемент.Колонки.Значение.Ширина = 10;
	
	
	// Добавление служебных колонок.
	Если (ДеревоНастроек.Колонки.Найти("Настройка") = Неопределено) Тогда
		ДеревоНастроек.Колонки.Добавить("Настройка", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.НастройкиПользователей"), "Настройка");
	КонецЕсли;	
	Если (ДеревоНастроек.Колонки.Найти("ТипЗначения") = Неопределено) Тогда
		ДеревоНастроек.Колонки.Добавить("ТипЗначения");
	КонецЕсли;	
	Если (ДеревоНастроек.Колонки.Найти("ПоУмолчанию") = Неопределено) Тогда
		ДеревоНастроек.Колонки.Добавить("ПоУмолчанию");
	КонецЕсли;
	Если (ДеревоНастроек.Колонки.Найти("ЭтоГруппа") = Неопределено) Тогда
		ДеревоНастроек.Колонки.Добавить("ЭтоГруппа");
	КонецЕсли; 	
	Если (ДеревоНастроек.Колонки.Найти("ТолькоЧтение") = Неопределено) Тогда
		ДеревоНастроек.Колонки.Добавить("ТолькоЧтение");
	КонецЕсли; 	
	
	
	// Выборка данных из регистра.
	Если (Не ВладелецНастроекПользователей = Неопределено) И ВладелецНастроекПользователей.Пустая() Тогда
		ТаблицаРезультатаЗапроса = Новый ТаблицаЗначений();
		ТаблицаРезультатаЗапроса.Колонки.Добавить("Настройка");
	Иначе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Настройка,
			|	Значение
			|ИЗ
			|	РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
			|ГДЕ
			|	ЗначениеНастроек.Пользователь = &Пользователь
			|");
		Запрос.УстановитьПараметр("Пользователь", ВладелецНастроекПользователей);
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	
	// Заполнение данных.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Настройки.Ссылка,
		|	Настройки.Родитель,
		|	Настройки.Наименование,
		|	Настройки.ТипЗначения,
		|	Настройки.ПоУмолчанию,
		|	Настройки.ТолькоЧтение
		|ИЗ
		|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
		|ГДЕ
		|	(НЕ Настройки.ЭтоГруппа)
		|	И (НЕ Настройки.ПометкаУдаления)";
		
	// TODO: Разграничение по объектам применения.
		
	//Если (Не ВладелецНастроекПользователей = Неопределено) Тогда
	//	ТекстЗапроса = ТекстЗапроса + "И НЕ ТолькоЧтение И Настройки.Применение ПОДОБНО ""%" + ВладелецНастроекПользователей.Метаданные().Имя + "%""";
	//КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	// -- Обход запроса.
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// -- Поиск в регистре.
		СтрокаТаблицаРезультатаЗапроса = ТаблицаРезультатаЗапроса.Найти(Выборка.Ссылка, "Настройка");
		
		// -- Добавление в дерево родителей.
		СтрокаГруппы = ДеревоНастроек;
		
		СписокРодителей = Новый СписокЗначений;
		Родитель = Выборка.Родитель;
		Пока Не Родитель.Пустая() Цикл
			СписокРодителей.Вставить(0, Родитель);
			Родитель = Родитель.Родитель;
		КонецЦикла;
		
		Для Каждого Родитель Из СписокРодителей Цикл
			Родитель = Родитель.Значение;
			
			СтрокаЭлемент = ДеревоНастроек.Строки.Найти(Родитель, "Настройка", Истина);
			Если (СтрокаЭлемент = Неопределено) Тогда
				СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
				СтрокаЭлемент.Наименование = Родитель.Наименование;
				СтрокаЭлемент.Настройка = Родитель;
				СтрокаЭлемент.ЭтоГруппа = Истина;
			КонецЕсли;
			
			СтрокаГруппы = СтрокаЭлемент;
		КонецЦикла;
		
		// ---- Добавление в дерево элемента.
		СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
		СтрокаЭлемент.Наименование = Выборка.Наименование;
		СтрокаЭлемент.Настройка = Выборка.Ссылка;
		СтрокаЭлемент.ТипЗначения = Выборка.ТипЗначения;
		СтрокаЭлемент.ПоУмолчанию = Выборка.ПоУмолчанию;
		СтрокаЭлемент.ЭтоГруппа = Ложь;
		СтрокаЭлемент.ТолькоЧтение = Выборка.ТолькоЧтение;
		Если (Не СтрокаТаблицаРезультатаЗапроса = Неопределено) Тогда
			СтрокаЭлемент.Значение = Выборка.ТипЗначения.ПривестиЗначение(СтрокаТаблицаРезультатаЗапроса.Значение);
		Иначе
			СтрокаЭлемент.Значение = Выборка.ТипЗначения.ПривестиЗначение(Выборка.ПоУмолчанию);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортировка.
	ДеревоНастроек.Строки.Сортировать("ЭтоГруппа Убыв, Наименование", Истина);
	
КонецПроцедуры // ДеревоНастроекПрочитать()

// Процедура при необходимости изменяет настройки правил использования данного объекта.
//
Процедура ДеревоНастроекЗаписать(Ссылка, Отказ, Удалить = Ложь) Экспорт
	
	// Запись уже была прервана, продолжение не имеет смысла.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецНастроекПользователей = Ссылка;
	
	// Запись набора записей.
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Использование = Истина;
	НаборЗаписей.Отбор.Пользователь.Значение = ВладелецНастроекПользователей;
	
	// Нисходящий обход дерева.
	СписокПодчиненных = Новый СписокЗначений();
	СписокПодчиненных.Добавить(ДеревоНастроек);

	Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
		СтрокаВладелец = СтрокаВладелец.Значение;	// Наепка - друг чекиста ;)
		
		Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
			// -- Добавление данных в набор записей.
			Если (Не СтрокаВладельца.ЭтоГруппа) И (Не СтрокаВладельца.ТипЗначения.ПривестиЗначение(СтрокаВладельца.Значение) = СтрокаВладельца.ТипЗначения.ПривестиЗначение(СтрокаВладельца.ПоУмолчанию)) Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Пользователь = ВладелецНастроекПользователей;
				Запись.Настройка = СтрокаВладельца.Настройка;
				Запись.Значение = СтрокаВладельца.ТипЗначения.ПривестиЗначение(СтрокаВладельца.Значение);
			КонецЕсли;
					
			Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
				СписокПодчиненных.Добавить(СтрокаВладельца);
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;

	// Запись набора записей.
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, ,, НаборЗаписей, ВладелецНастроекПользователей);
	КонецПопытки;
	
КонецПроцедуры // ДеревоНастроекЗаписать()

// Обработчик события ДеревоНастроек.ПриВыводеСтроки элемента.
//
Процедура ДеревоНастроекВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Наименование.
	Если Элемент.Колонки.Наименование.Видимость Тогда
		ОформлениеСтроки.Ячейки.Наименование.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Наименование.ТолькоПросмотр = Истина;
		Если ДанныеСтроки.ЭтоГруппа Тогда
			ОформлениеСтроки.Ячейки.Наименование.Картинка = БиблиотекаКартинок.ГруппаСправочника;
		Иначе
			ОформлениеСтроки.Ячейки.Наименование.Картинка = БиблиотекаКартинок.ЭлементСправочника;
		КонецЕсли;
		Если Не ДанныеСтроки.ЭтоГруппа Тогда
			Если ДанныеСтроки.ТолькоЧтение Тогда
				ОформлениеСтроки.Ячейки.Наименование.ЦветФона = ЦветаСтиля.ЦветРамки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Значение.
	Если Элемент.Колонки.Значение.Видимость Тогда
		Если ДанныеСтроки.ЭтоГруппа Тогда
			ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
			ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст = Ложь;
		Иначе
			Если ДанныеСтроки.ТипЗначения.СодержитТип(Тип("Булево")) И (ДанныеСтроки.ТипЗначения.Типы().Количество() = 1) Тогда
				ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст = Ложь;
				ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Истина;
				ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.Значение.Флажок = ДанныеСтроки.ТипЗначения.ПривестиЗначение(ДанныеСтроки.Значение);
			КонецЕсли;	
			Если ДанныеСтроки.ТолькоЧтение Тогда
			    ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.Значение.ЦветФона = ЦветаСтиля.ЦветРамки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДеревоНастроекВывестиСтроку()

// Обработчик события ДеревоНастроек.ПриИзмененииФлажка элемента.
//
Процедура ДеревоНастроекИзменитьФлажок(Элемент, Колонка) Экспорт
	
	СтрокаДерева = Элемент.ТекущаяСтрока;
	Если Не СтрокаДерева.ТолькоЧтение Тогда
		СтрокаДерева.Значение = Не СтрокаДерева.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
	КонецЕсли;
	
КонецПроцедуры // ДеревоНастроекИзменитьФлажок()

#КонецЕсли
