
Функция ФормаРежимВыбора(Форма, Элемент, ЗависимыеЭлементы = Неопределено) Экспорт
	
	Перем РежимВыбора;
	
	Форма.Параметры.Свойство("РежимВыбора", РежимВыбора);
	Элемент.РежимВыбора = (РежимВыбора = Истина);
	
	Если (Не ЗависимыеЭлементы = Неопределено) Тогда
		Для Каждого ЗависимыйЭлемент Из Новый Структура(ЗависимыеЭлементы) Цикл
			Если (Не Форма.Элементы.Найти(ЗависимыйЭлемент.Ключ) = Неопределено) Тогда
				Форма.Элементы[ЗависимыйЭлемент.Ключ].Видимость = Не Элемент.РежимВыбора;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Элемент.РежимВыбора;
	
КонецФункции // ФормаРежимВыбора()



Функция ФормаТекущаяСтрокаНеЗаданна(Форма) Экспорт
	
	Перем ТекущаяСтрока;
	
	Возврат (Не Форма.Параметры.Свойство("ТекущаяСтрока", ТекущаяСтрока)) Или ОбщегоНазначения.ЗначениеНЕЗаполнено(ТекущаяСтрока);
	
КонецФункции // ФормаТекущаяСтрокаНеЗаданна()



Функция СтрокаГруппировкиДинамическогоСписка(ТекущаяСтрока) Экспорт
	
	Если (ТипЗнч(ТекущаяСтрока) = Тип("ТаблицаФормы")) Тогда
		Возврат (ТипЗнч(ТекущаяСтрока.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка"));
	КонецЕсли; 
	
	Возврат (ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка"));
	
КонецФункции // СтрокаГруппировкиДинамическогоСписка()


Функция ПолучитьИндексПиктограммыСправочника(Ссылка) Экспорт
	
	Возврат 1 + Число(Ссылка.ЭтоГруппа) + Число(Ссылка.ПометкаУдаления);
	
КонецФункции // ПолучитьИндексПиктограммыСправочника()


Функция ПолучитьРодителя(Элемент, Тип = Неопределено) Экспорт
	
	Если (Тип = Неопределено) Тогда
		Возврат Элемент.Родитель;
	КонецЕсли; 
	
	Если (ТипЗнч(Тип) = Тип("Тип")) Тогда
		ТипРодителя = Тип;
	Иначе
		ТипРодителя = Тип(Тип);
	КонецЕсли; 
	
	Родитель = Элемент.Родитель; Пока (Не Родитель = Неопределено) И (Не ТипЗнч(Родитель) = ТипРодителя) Цикл Родитель = Родитель.Родитель; КонецЦикла; 
	
	Возврат Родитель;
	
КонецФункции // ПолучитьРодителя()

Функция ПолучитьРодительскуюФорму(Элемент) Экспорт
	
	Если (ТипЗнч(Элемент) = Тип("УправляемаяФорма")) Тогда
		Возврат Элемент;
	КонецЕсли; 
	
	Возврат ПолучитьРодителя(Элемент, Тип("УправляемаяФорма"));
	
КонецФункции // ПолучитьРодительскуюФорму()







Функция ПолучитьВладелецаСписка(Список, Элемент = Неопределено) Экспорт
	
	// Поиск по параметрам.
	Если (Не Элемент = Неопределено) Тогда
		Форма = ПолучитьРодительскуюФорму(Элемент);
		Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство("Владелец") Тогда
				
			Возврат Форма.Параметры.Отбор.Владелец;
				
		КонецЕсли;
	КонецЕсли;
	
	Отбор = ПолучитьОтборСписка(Список);
	
	// Приоритеты поиска.
	РежимыОтображения = Новый Массив;
	РежимыОтображения.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	РежимыОтображения.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	РежимыОтображения.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	РежимыОтображения.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);

	// Поиск по отбору.
	ПолеКомпоновкиДанныхВладелец = Новый ПолеКомпоновкиДанных("Владелец");
	Для Каждого РежимОтображения Из РежимыОтображения Цикл
		Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование И 
				 (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДанныхВладелец) И 
				 (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно) И
				 (ЭлементОтбора.РежимОтображения = РежимОтображения) Тогда
				 
				Возврат ЭлементОтбора.ПравоеЗначение;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецФункции // ПолучитьВладелецаСписка()

Процедура УстановитьВладелецаСписка(Список, Значение, Элемент = Неопределено) Экспорт
	
	// При создании формы.
	Если (Не Элемент = Неопределено) Тогда
		Форма = ПолучитьРодительскуюФорму(Элемент);
		Если Форма.Параметры.Свойство("Отбор") Тогда
			
			Форма.Параметры.Отбор.Вставить("Владелец", Значение);
			Возврат;
				
		КонецЕсли;
	КонецЕсли;
	
	Отбор = ПолучитьОтборСписка(Список);
	
	// Приоритеты поиска.
	РежимыОтображения = Новый Массив;
	РежимыОтображения.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	РежимыОтображения.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	РежимыОтображения.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	РежимыОтображения.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);

	// Поиск отбора.
	ПолеКомпоновкиДанныхВладелец = Новый ПолеКомпоновкиДанных("Владелец");
	Для Каждого РежимОтображения Из РежимыОтображения Цикл
		Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
			Если (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДанныхВладелец) И 
				 (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно) И
				 (ЭлементОтбора.РежимОтображения = РежимОтображения) Тогда
				 
				 Если (Не ЭлементОтбора.Использование) Или (Не ЭлементОтбора.ПравоеЗначение = Значение) Тогда
					 ЭлементОтбора.Использование = Истина;
					 ЭлементОтбора.ПравоеЗначение = Значение;
				 КонецЕсли; 
				 Возврат;
				 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Установка отбора.
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДанныхВладелец;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

КонецПроцедуры // УстановитьВладелецаСписка()


Процедура ВладелецСпискаПриСоздании(Список, Элемент, ПоУмолчанию = Неопределено) Экспорт
	
	// Проверяем параметры и скрываем элемент владельца и его родителя.
	Форма = ПолучитьРодительскуюФорму(Элемент);
	Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство("Владелец") Тогда
		
		Элемент.Видимость = Ложь;
	    Родитель = ПолучитьРодителя(Элемент);
		Если (Не ТипЗнч(Родитель) = Тип("УправляемаяФорма")) Тогда
			Родитель.Видимость = Ложь; 
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;
	
	
	// Поиск по отбору.
	Владелец = ПолучитьВладелецаСписка(Список, Форма);
	
	// Поиск по текущей строке.
	Если Форма.Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Форма.Параметры.ТекущаяСтрока) Тогда
		
		Владелец = Форма.Параметры.ТекущаяСтрока.Владелец;
	
	КонецЕсли;
	
	// Поиск по умолчнию.
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		
		Владелец = ПоУмолчанию;
	
	КонецЕсли; 
	

	// Удаляем из параметров.
	Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство("Владелец") Тогда
			
		Форма.Параметры.Отбор.Удалить("Владелец");
			
	КонецЕсли;

	// Удаляем из отборов (меняем режим отображения).
	Отбор = ПолучитьОтборСписка(Список);
	
	ПолеКомпоновкиДанныхВладелец = Новый ПолеКомпоновкиДанных("Владелец"); МассивУдаяемых = Новый Массив;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДанныхВладелец) И 
			 (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно) Тогда
			 
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОтбора.ПравоеЗначение = Владелец;
			
		КонецЕсли;
	КонецЦикла;
	
	
	// Устанавливаем отбор.
	УстановитьВладелецаСписка(Список, Владелец);
	
	// Устанавливаем значение или текущую строку.
	Если (ТипЗнч(Элемент) = Тип("ТаблицаФормы")) Тогда
		Элемент.ТекущаяСтрока = Владелец;
	Иначе
		Форма[Элемент.ПутьКДанным] = Владелец;
	КонецЕсли;

КонецПроцедуры // ФормаОтборКомпоновкиДанныхрПриИзмененииВладельца()

Процедура ВладелецСпискаПриИзменении(Список, Элемент) Экспорт
	
	// Владелец.
	Если (ТипЗнч(Элемент) = Тип("ТаблицаФормы")) Тогда
		Если (ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")) Тогда
			Владелец = Неопределено;
		Иначе
			Владелец = Элемент.ТекущаяСтрока;
		КонецЕсли;
	Иначе
		Владелец = Элемент;
	КонецЕсли;
	
	// Устанавливаем отбор.
	УстановитьВладелецаСписка(Список, Владелец);
	
КонецПроцедуры // ВладелецСпискаПриИзменении()




Функция ПолучитьОтборСписка(Список) Экспорт
	
	Если (ТипЗнч(Список) = Тип("ОтборКомпоновкиДанных")) Тогда
		Возврат Список;
	КонецЕсли;
	
	Возврат Список.Отбор;

КонецФункции // ПолучитьОтборСписка()




Процедура ФормаНаименованиеАвтоматическоеФормированиеУстановитьПризнак(АвтоматическоеФормирование, ТекущееЗначение, АвтоматическоеЗначение = Неопределено, Элемент = Неопределено) Экспорт
	
	// Нормализация.
	ТекущееЗначениеПриведенное = ТекущееЗначение; АвтоматическоеЗначениеПриведенное = АвтоматическоеЗначение;
	Если (Не ТипЗнч(ТекущееЗначение) = Тип("Строка")) Тогда
	//Если (ТипЗнч(ТекущееЗначение) = Тип("ДанныеФормыСтруктура")) Тогда
		Если (АвтоматическоеЗначение = Неопределено) Тогда
			АвтоматическоеЗначениеПриведенное = ТекущееЗначение["Наименование"];
		КонецЕсли;
		ТекущееЗначениеПриведенное = ТекущееЗначение["НаименованиеПолное"];
	КонецЕсли;
	
	АвтоматическоеФормирование = ПустаяСтрока(ТекущееЗначениеПриведенное) Или (ТекущееЗначениеПриведенное = Строка(АвтоматическоеЗначениеПриведенное));
	
	// Формируем список выбора.
	Если (Не Элемент = Неопределено) Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(Строка(АвтоматическоеЗначениеПриведенное));
	КонецЕсли; 
	
КонецПроцедуры // ФормаУстановитьПризнакАвтоматическогоФормированияНаименования()

Процедура ФормаНаименованиеАвтоматическоеФормированиеСформировать(АвтоматическоеФормирование, ТекущееЗначение, АвтоматическоеЗначение = Неопределено, Элемент = Неопределено) Экспорт
	
	Если Не АвтоматическоеФормирование Тогда
		Возврат;
	КонецЕсли;
	
	// Нормализация.
	Если (Не ТипЗнч(ТекущееЗначение) = Тип("Строка")) Тогда
	//Если (ТипЗнч(ТекущееЗначение) = Тип("ДанныеФормыСтруктура")) Тогда
		Если (АвтоматическоеЗначение = Неопределено) Тогда
			АвтоматическоеЗначение = ТекущееЗначение["Наименование"];
		КонецЕсли;
		
		ФормаНаименованиеАвтоматическоеФормированиеСформировать(АвтоматическоеФормирование, ТекущееЗначение["НаименованиеПолное"], АвтоматическоеЗначение);
	Иначе
		ТекущееЗначение = Строка(АвтоматическоеЗначение);
	КонецЕсли;
	
	// Формируем список выбора.
	Если (Не Элемент = Неопределено) Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(Строка(АвтоматическоеЗначение));
	КонецЕсли; 
	
КонецПроцедуры // ФормаУстановитьПризнакАвтоматическогоФормированияНаименования()




Функция ПолучитьКартинкуПометки(Значение) Экспорт
	
	Если (Значение = Истина) Тогда
		Возврат БиблиотекаКартинок.ПометкаИстина;
	Иначе
		Возврат БиблиотекаКартинок.ПометкаЛожь;
	КонецЕсли; 
	
КонецФункции // ПолучитьКартинкуПометки()