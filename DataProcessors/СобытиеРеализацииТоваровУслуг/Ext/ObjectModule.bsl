
Перем мСобытие; // Событие владельца.

Перем мТолькоПросмотр; // Режим работы с событием.


// Функция возвращает режим только просмотра события связанного с владельцем.
//
Функция ТолькоПросмотр(Владелец) Экспорт
	
	// Результат.
	Возврат мТолькоПросмотр И ЗначениеЗаполнено(Владелец.Контрагент);
	
КонецФункции // ТолькоПросмотр()


// Процедура считывает требуемые реквизиты события связанного с владельцем.
//
Процедура Прочитать(Владелец) Экспорт
	
	// Поиск данных.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Событие.Ссылка,
	                      |	Событие.ГруппаСобытия,
	                      |	Событие.Комментарий,
	                      |	Событие.Проведен,
	                      |	Событие.ОснованиеЗавершения,
	                      |	Событие.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Документ.Событие КАК Событие
	                      |ГДЕ
	                      |	Событие.Основание = &Основание
	                      |	И Событие.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыСобытий.Прочее)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПометкаУдаления");
	Запрос.УстановитьПараметр("Основание", Владелец.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Выборка данных.
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(); Выборка.Следующий();
		
		мСобытие = Выборка.Ссылка;
		мТолькоПросмотр = Выборка.Проведен Или ЗначениеЗаполнено(Выборка.ОснованиеЗавершения);
		
		Если Не Выборка.ПометкаУдаления Тогда
			ГруппаСобытия = Выборка.ГруппаСобытия;
		КонецЕсли;
		Комментарий = Выборка.Комментарий;
	КонецЕсли;
	
КонецПроцедуры // Прочитать()

// Процедура записывает требуемые реквизиты события связанного с владельцем и при необходимости
// созадет новое событие.
//
Процедура Записать(Владелец, Отказ) Экспорт
	
	// Отказ.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Запись.
	Попытка
		// -- Проверка необходимости записи.
		Если мСобытие.Пустая() Тогда
			Если ЗначениеЗаполнено(Владелец.Контрагент) И ЗначениеЗаполнено(ГруппаСобытия) Тогда
				СобытиеОбъект = Документы.Событие.СоздатьДокумент();
				СобытиеОбъект.Заполнить(Владелец.Ссылка);
			КонецЕсли;
		Иначе
			Если (Не мСобытие.Проведен) И ((Не Владелец.Ссылка = мСобытие.Основание) Или (Не Владелец.Ресторан = мСобытие.Ресторан) Или (Не Владелец.Контрагент = мСобытие.Контрагент) Или (Не мСобытие.ВидСобытия = Перечисления.ВидыСобытий.Прочее) Или
										   ((Владелец.Контрагент.Пустая() Или ГруппаСобытия.Пустая()) И (Не мСобытие.ПометкаУдаления)) Или
										   (ЗначениеЗаполнено(ГруппаСобытия) И (Не мСобытие.ГруппаСобытия = ГруппаСобытия)) Или 
										   (Не мСобытие.Комментарий = Комментарий)) Тогда
				СобытиеОбъект = мСобытие.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		Если (СобытиеОбъект = Неопределено) Тогда
			Возврат;
		КонецЕсли;
		
		// -- Изменение объекта и запись.
		СобытиеОбъект.ПометкаУдаления = Владелец.Контрагент.Пустая() Или ГруппаСобытия.Пустая();
		СобытиеОбъект.ВидСобытия = Перечисления.ВидыСобытий.Прочее;
		СобытиеОбъект.Основание = Владелец.Ссылка;
		Если ЗначениеЗаполнено(ГруппаСобытия) Тогда
			СобытиеОбъект.ГруппаСобытия = ГруппаСобытия;
		КонецЕсли;
		СобытиеОбъект.Комментарий = Комментарий;
		СобытиеОбъект.Записать();
		
		мСобытие = СобытиеОбъект.Ссылка;
		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры // Записать()


// Инициализация переменных.
мСобытие = Документы.Событие.ПустаяСсылка();
мТолькоПросмотр = Ложь;

ГруппаСобытия = Справочники.ГруппыСобытий.ПустаяСсылка();
Комментарий = Строка(Неопределено);
