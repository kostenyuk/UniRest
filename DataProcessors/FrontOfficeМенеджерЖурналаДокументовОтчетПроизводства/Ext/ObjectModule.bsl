
#Если Клиент Тогда

Перем мРежимПоиска, мДанныеПоиска; // Переменные обслуживающие механизм поиска данных.

Перем мФорматнаяСтрока; // Форматная строка представления суммы документа.


// Процедура инициализация модуля отчет производства.
//
Процедура Инициализация() Экспорт
	
	// Проверка режима.
	Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Создание формы.
	Если (Форма = Неопределено) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
	
КонецПроцедуры // Инициализация()

// Процедура открытия формы отчета производства.
//
Процедура Открыть() Экспорт
	
	Если Форма = Неопределено Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
	КонецЕсли;
	
	// Открытие формы.
	ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	
КонецПроцедуры // Открыть()

// Процедура заполнения табличного поля открытых документов.
//
// Параметры:
//	ТабличноеПоле - TouchТабличноеПоле. Табличное поле;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов;
//	СписокИсключаемых - СписокЗначений. Список исключаемых документов;
//	Реализация - Булево. Сигнализирует о необходимости включения в вборку документов реализаций и нарядов;
//	Списание - Булево. Сигнализирует о необходимости включения в вборку документов списаний;
//	Открытые - Булево. Сигнализирует о необходимости формирования списка открытых или закрытых и удаленных документов.
//
Процедура ТаблицаОткрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаОткрытых", Открытые = Истина, ИерархическийПросмотр = Ложь) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		
		Данные = Новый ДеревоЗначений;
		Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.СписаниеТоваров,ДокументСсылка.ОтчетПроизводстваЗаСмену"));
		Данные.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"), "Документ");
		Данные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		Данные.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийОтчетПроизводстваЗаСмену"));
		Данные.Колонки.Добавить("ВидОперацииПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Вид операции';uk='Вид операції'") );
		Данные.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.МестаХранения"));
		Данные.Колонки.Добавить("СкладПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Склад';uk='Склад'") );
		Данные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
		Данные.Колонки.Добавить("СотрудникПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Сотрудник';uk='Працівник'"));
		Данные.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число"), НСтр("ru='Сумма';uk='Сума'") );
		Данные.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументов"));
		Данные.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
		
		ТабличноеПоле.Данные(Данные);
		ТабличноеПоле.СоздатьКолонки("Картинка,Номер,ВидОперацииПредставление,СкладПредставление,СотрудникПредставление,СуммаДокумента");
		ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("ВидОперацииПредставление").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("СкладПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.ОтчетПроизводстваЗаСмену.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.ОтчетПроизводстваЗаСмену.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
		
	Иначе
		
		Если (Не ТабличноеПоле.ТекущаяСтрока() = Неопределено) Тогда
			ТекущийДокумент = ТабличноеПоле.ТекущиеДанные().Ссылка;
		КонецЕсли;
		
		Данные.Строки.Очистить();
		
	КонецЕсли;
	
	
	// Выборка данных.
	ТекущаяКассоваяДата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
	ТекущийРесторан 	= ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущийСотрудник 	= УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
	
	// -- Документы.
	ДоступностьОтчетовПроизводства = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену"), ТребуемыеПолномочия);
	
	// -- Открытые документы.
	Если Открытые Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ОтчетПроизводстваЗаСмену.Ссылка,
		               |	ОтчетПроизводстваЗаСмену.Номер,
		               |	ОтчетПроизводстваЗаСмену.Дата,
		               |	ОтчетПроизводстваЗаСмену.ВидОперации,
		               |	ОтчетПроизводстваЗаСмену.Сотрудник,
		               |	ОтчетПроизводстваЗаСмену.Сотрудник.Представление,
		               |	ОтчетПроизводстваЗаСмену.Склад,
		               |	ОтчетПроизводстваЗаСмену.Склад.Представление,
		               |	ОтчетПроизводстваЗаСмену.ДатаНачалаПериода,
		               |	ОтчетПроизводстваЗаСмену.ДатаОкончанияПериода,
		               |	ОтчетПроизводстваЗаСмену.Состояние,
		               |	ОтчетПроизводстваЗаСмену.Ссылка КАК Документ,
		               |	ОтчетПроизводстваЗаСмену.СуммаДокумента
		               |ИЗ
		               |	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
		               |ГДЕ
		               |	ОтчетПроизводстваЗаСмену.Ресторан = &Ресторан
		               |	И ОтчетПроизводстваЗаСмену.Дата МЕЖДУ &ДатаНач И &ДатаКон
		               |	И НЕ ОтчетПроизводстваЗаСмену.ПометкаУдаления
		               |	И НЕ ОтчетПроизводстваЗаСмену.Распечатан";
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяКассоваяДата));
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяКассоваяДата));

	// -- Закрытые документы.
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВыпускПродукцииУслуг.Регистратор.Ссылка КАК Ссылка,
		               |	ВыпускПродукцииУслуг.Регистратор.Номер КАК Номер,
		               |	ВыпускПродукцииУслуг.Регистратор.Дата КАК Дата,
		               |	ВыпускПродукцииУслуг.ВидОперации,
		               |	ВыпускПродукцииУслуг.Сотрудник,
		               |	ВыпускПродукцииУслуг.Сотрудник.Представление,
		               |	ВыпускПродукцииУслуг.Склад,
		               |	ВыпускПродукцииУслуг.Склад.Представление,
		               |	ВыпускПродукцииУслуг.Регистратор.ДатаНачалаПериода КАК ДатаНачалаПериода,
		               |	ВыпускПродукцииУслуг.Регистратор.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		               |	ВыпускПродукцииУслуг.Регистратор.Состояние КАК Состояние,
		               |	ВыпускПродукцииУслуг.Регистратор.Ссылка КАК Документ,
		               |	ВыпускПродукцииУслуг.Регистратор.СуммаДокумента КАК СуммаДокумента
		               |ИЗ
		               |	РегистрНакопления.ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
		               |ГДЕ
		               |	ВыпускПродукцииУслуг.Ресторан = &Ресторан
		               |	И ВыпускПродукцииУслуг.Период МЕЖДУ &ДатаНач И &ДатаКон";
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяКассоваяДата));
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяКассоваяДата));
		
	КонецЕсли;
	
	Если ТекущийРесторан.Пустая() ИЛИ УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам) Тогда
		Если Открытые Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыпускПродукцииУслуг.Ресторан = &Ресторан", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыпускПродукцииУслуг.Ресторан = &Ресторан", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущийРесторан) Тогда
		Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Перенос данных в табличное поле.
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// -- Добавление в дерево элемента.
		СтрокаЭлемента 							= Данные;
		СтрокаДанных 							= СтрокаЭлемента.Строки.Добавить();
		СтрокаДанных.Ссылка 					= Выборка.Ссылка;
		СтрокаДанных.Номер 						= Выборка.Номер;
		СтрокаДанных.Дата 						= Выборка.Дата;
		СтрокаДанных.ВидОперации 				= Выборка.ВидОперации;
		СтрокаДанных.ВидОперацииПредставление 	= СокрЛП(Строка(Выборка.ВидОперации));
		СтрокаДанных.Склад 						= Выборка.Склад;
		СтрокаДанных.СкладПредставление 		= Выборка.СкладПредставление;
		СтрокаДанных.Сотрудник 					= Выборка.Сотрудник;
		СтрокаДанных.СотрудникПредставление 	= Выборка.СотрудникПредставление;
		СтрокаДанных.СуммаДокумента 			= Выборка.СуммаДокумента;
		СтрокаДанных.Состояние 					= Выборка.Состояние;
		
		Если (СтрокаДанных.Ссылка = ТекущийДокумент) Тогда
			ТекущаяСтрока = СтрокаДанных;
		КонецЕсли;
		
	КонецЦикла;
	
	// -- Текущая позиция (III).
	Если Не ТекущаяСтрока = Неопределено Тогда
		ТабличноеПоле.ТекущаяПозиция(ТекущаяСтрока);
	КонецЕсли;
	
	// Обновление.
	Если ТекущаяСтрока = Неопределено Тогда
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	
	Выборка = Неопределено;
	
КонецПроцедуры // ТаблицаОткрытыхДокументовПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля открытых документов.
//
Процедура ТаблицаОткрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Открытые = Истина) Экспорт
	
	// Оформление строки.
	ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка 				= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("Номер").ГиперСсылка 					= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("ВидОперацииПредставление").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("СкладПредставление").ГиперСсылка 		= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("СотрудникПредставление").ГиперСсылка 	= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("СуммаДокумента").ГиперСсылка 			= ДанныеСтроки.ЭтоГруппа;
	
	// Номер.
	ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
	
	Попытка
		СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
	Исключение
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Картинка")				, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Номер")					, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ВидОперацииПредставление"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СкладПредставление")		, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СотрудникПредставление")	, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента")			, СтруктураСтиля);
	
КонецПроцедуры // ТаблицаОткрытыхДокументовВывестиСтроку()

// Процедура осуществляет поиск данных табличного поля открытых документов.
//
Функция ТаблицаОткрытыхДокументовНайти(ТабличноеПоле) Экспорт
	
	Перем Значение;
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПоиска");
	
	// Выбор.
	ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
	Если (Не ТипЗнч(ПараметрЗакрытия) = Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Режим и данные поиска.
	мРежимПоиска = ПараметрЗакрытия; мДанныеПоиска = ТабличноеПоле.Данные(); 
	
	// Данные.
	Данные = Новый ТаблицаЗначений;
	Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
		Данные.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
	
	// Поиск.
	Если (мРежимПоиска = "Телефон") Тогда
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите телефон';uk='Введіть телефон'") , 12, ,,, "ЧЦ=12; ЧДЦ=0; ЧГ=", Данные, "Номер,ТелефонПредставление", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Адрес") Тогда
		Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите адрес';uk='Введіть адресу'") , ,,, Данные, "Номер,КонтрагентПредставление", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите сумму';uk='Введіть суму'") , Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ,,, Данные, "Номер,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите сотрудника';uk='Введіть працівника'") , ,,, Данные, "Номер,СотрудникПредставление,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	Иначе
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите номер документа';uk='Введіть номер документу'") , Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера, ,,, "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера + "; ЧДЦ=0; ЧГ=", Данные, "Номер", , ЭтотОбъект, "ПоискДокумента");
	КонецЕсли;
	
	// Позиционирование.
	Если Результат Тогда
		ТабличноеПоле.ТекущаяСтрока(ТабличноеПоле.Данные().Строки.Найти(Значение.Ссылка, "Ссылка", Истина));
	КонецЕсли;
	
	Данные = Неопределено;
	
	// Результат.
	Возврат Результат;
	
КонецФункции // ТаблицаОткрытыхДокументовНайти()

// Процедура заполнения табличного поля закрытых документов.
//
// Описания:
//	См. процедуру "ТаблицаОткрытыхДокументовПрочитать".
//
Процедура ТаблицаЗакрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаЗакрытых", Открытые = Ложь, ИерархическийПросмотр = Ложь) Экспорт
	
	ТаблицаОткрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия, Открытые, ИерархическийПросмотр);
	
КонецПроцедуры // ТаблицаЗакрытыхДокументовПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля закрырых документов.
//
Процедура ТаблицаЗакрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ТаблицаОткрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Ложь);
	
КонецПроцедуры // ТаблицаЗакрытыхДокументовВывестиСтроку()

// Процедура осуществляет поиск данных табличного поля закрытых документов.
//
// Описания:
//	См. процедуру "ТаблицаОткрытыхДокументовПрочитать".
//
Функция ТаблицаЗакрытыхДокументовНайти(ТабличноеПоле) Экспорт
	
	Возврат ТаблицаОткрытыхДокументовНайти(ТабличноеПоле);
	
КонецФункции // ТаблицаЗакрытыхДокументовНайти()

// Обработчик события ПоискДокумента.ПриИзмененииДанных элемента.
//
Процедура ПоискДокументаПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	
	ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.20;
	ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	Если (мРежимПоиска = "Сумма") Тогда
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	КонецЕсли;
	
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ПоискДокументаПриИзмененииДанных()

// Обработчик события ПоискДокумента.ПриПоискеЗначения элемента.
//
Процедура ПоискДокументаПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	// Даныне.
	Данные = Элемент.Данные(); Данные.Очистить();
	
	// Значение для поиска.
	Если (мРежимПоиска = "Сумма") Тогда
		ЗначениеДляПоиска = Формат(Значение, "ЧРД=,; ЧГ=");
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		ЗначениеДляПоиска = Нрег(СокрЛ(Значение));
	Иначе
		ЗначениеДляПоиска = Формат(Значение, "ЧГ=");
	КонецЕсли;
	Если ПустаяСтрока(ЗначениеДляПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	// Нисходящий обход дерева.
	СписокПодчиненных = Новый СписокЗначений();
	СписокПодчиненных.Добавить(мДанныеПоиска);
	
	Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
		СтрокаВладелец = СтрокаВладелец.Значение;	// Наепка - друг чекиста ;)
		
		Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
			Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
				СписокПодчиненных.Добавить(СтрокаВладельца);
			КонецЕсли;
			
			СтрокаТаблицыДанных = СтрокаВладельца;
			
			// Поиск.
			Если СтрокаТаблицыДанных.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Если (мРежимПоиска = "Сумма") Тогда
				Валидная = Булево(Найти(Формат(СтрокаТаблицыДанных.СуммаДокумента), ЗначениеДляПоиска));
			ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
				Валидная = Булево(Найти(НРег(СтрокаТаблицыДанных.СотрудникПредставление), ЗначениеДляПоиска));
			Иначе
				Валидная = Булево(Найти(FrontOffice.ПредставлениеНомера(СтрокаТаблицыДанных.Номер), ЗначениеДляПоиска));
			КонецЕсли;
			Если Не Валидная Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = Данные.Добавить();
			Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
				СтрокаТаблицы[Колонка.Имя] = СтрокаТаблицыДанных[Колонка.Имя];
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПоискКлиентаПриПоискеЗначения()

// Обработчик события ПоискДокумента.ПриВыводеСтроки элемента.
//
Процедура ПоискДокументаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
	
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Номер"), СтруктураСтиля);
	
	// Сумма.
	Если (мРежимПоиска = "Сумма") Тогда
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
	КонецЕсли;
	
	// Номер.
	ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
	
	
КонецПроцедуры // ПоискКлиентаПриВыводеСтроки()

// Процедура заполнения табличного поля открытых документов.
//
// Параметры:
//	ТабличноеПоле - TouchТабличноеПоле. Табличное поле;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов;
//	СписокИсключаемых - СписокЗначений. Список исключаемых документов;
//	Реализация - Булево. Сигнализирует о необходимости включения в вборку документов реализаций и нарядов;
//	Списание - Булево. Сигнализирует о необходимости включения в вборку документов списаний;
//	Открытые - Булево. Сигнализирует о необходимости формирования списка открытых или закрытых и удаленных документов.
//
Процедура ТаблицаСостояниеБлюдПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаСостоянияБлюд") Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	
	Если (Данные = Неопределено) Тогда
		
		Данные = Новый ДеревоЗначений;
		//Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.СписаниеТоваров,ДокументСсылка.ОтчетПроизводстваЗаСмену"));
		Данные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)), "N");
		Данные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
		Данные.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "Номенклатура");
		Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), Данные.Колонки.Номенклатура.Заголовок);
		Данные.Колонки.Добавить("Приготовлено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Неотрицательный)), "Приготовлено");
		Данные.Колонки.Добавить("Продано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Неотрицательный)), "Продано");
		Данные.Колонки.Добавить("Списано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Неотрицательный)), "Списано");
		Данные.Колонки.Добавить("Возврат", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Любой)), "Возврат");
		Данные.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Любой)), "Остаток");
		
		ТабличноеПоле.Данные(Данные);
		ТабличноеПоле.СоздатьКолонки("Картинка,НомерСтроки,НоменклатураКод,НоменклатураПредставление,Приготовлено,Продано,Списано,Возврат,Остаток");
		ТабличноеПоле.Колонки.Получить("НомерСтроки").Ширина = 400 * 0.05;
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("Приготовлено").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Продано").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Списано").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Возврат").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Остаток").Ширина = 400 * 0.10;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
		
	Иначе
		
		Данные.Строки.Очистить();
		
	КонецЕсли;
	
	// Выборка данных.
	ТекущаяКассоваяДата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
	ТекущийРесторан 	= ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущийСотрудник 	= УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
	
	// -- Документы.
	ДоступностьОтчетовПроизводства = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену"), ТребуемыеПолномочия);
	
	РезультатЗапроса = СформироватьЗапросПоСостояюниюБлюд();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Перенос данных в табличное поле.
	Выборка = РезультатЗапроса.Выбрать();
	
	НомерСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		// -- Добавление в дерево элемента.
		СтрокаЭлемент 							= Данные;
		СтрокаДанных 							= СтрокаЭлемент.Строки.Добавить();
		СтрокаДанных.НомерСтроки 				= НомерСтроки;
		СтрокаДанных.НоменклатураКод 			= СокрЛП(Выборка.Номенклатура.Код);
		СтрокаДанных.НоменклатураПредставление 	= СокрЛП(Строка(Выборка.Номенклатура));
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
		
	КонецЦикла;
	
	// Обновление.
	ТабличноеПоле.ОбновитьСтроки();
	
	Выборка = Неопределено;
	
КонецПроцедуры // ТаблицаОткрытыхДокументовПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля открытых документов.
//
Процедура ТаблицаСостояниеБлюдВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Открытые = Истина) Экспорт
	
	// Оформление строки.
	ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка 					= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("НомерСтроки").ГиперСсылка 					= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("НоменклатураКод").ГиперСсылка 				= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("НоменклатураПредставление").ГиперСсылка 	= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("Приготовлено").ГиперСсылка 				= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("Продано").ГиперСсылка 						= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("Возврат").ГиперСсылка 						= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("Списано").ГиперСсылка 						= ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("Остаток").ГиперСсылка 						= ДанныеСтроки.ЭтоГруппа;
	
	Попытка
		СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); 
		СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
	Исключение
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Картинка")					, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("НомерСтроки")					, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("НоменклатураКод")				, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("НоменклатураПредставление")	, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Приготовлено")				, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Продано")						, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Возврат")						, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Списано")						, СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Остаток")						, СтруктураСтиля);
	
КонецПроцедуры // ТаблицаОткрытыхДокументовВывестиСтроку()

// Процедура осуществляет поиск данных табличного поля открытых документов.
//
Функция ТаблицаСостояниеБлюдНайти(ТабличноеПоле) Экспорт
	
	Перем Значение;
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПоиска");
	
	// Выбор.
	ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
	Если (Не ТипЗнч(ПараметрЗакрытия) = Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Режим и данные поиска.
	мРежимПоиска = ПараметрЗакрытия; мДанныеПоиска = ТабличноеПоле.Данные(); 
	
	// Данные.
	Данные = Новый ТаблицаЗначений;
	Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
		Данные.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
	
	// Поиск.
	Если (мРежимПоиска = "Телефон") Тогда
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите телефон';uk='Введіть телефон'") , 12, ,,, "ЧЦ=12; ЧДЦ=0; ЧГ=", Данные, "Номер,ТелефонПредставление", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Адрес") Тогда
		Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите адрес';uk='Введіть адресу'") , ,,, Данные, "Номер,КонтрагентПредставление", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите сумму';uk='Введіть суму'") , Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ,,, Данные, "Номер,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите сотрудника';uk='Введіть працівника'") , ,,, Данные, "Номер,СотрудникПредставление,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	Иначе
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите номер документа';uk='Введіть номер документу'") , Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера, ,,, "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера + "; ЧДЦ=0; ЧГ=", Данные, "Номер", , ЭтотОбъект, "ПоискДокумента");
	КонецЕсли;
	
	// Позиционирование.
	Если Результат Тогда
		ТабличноеПоле.ТекущаяСтрока(ТабличноеПоле.Данные().Строки.Найти(Значение.Ссылка, "Ссылка", Истина));
	КонецЕсли;
	
	Данные = Неопределено;
	
	// Результат.
	Возврат Результат;
	
КонецФункции // ТаблицаОткрытыхДокументовНайти()

// Процедура осуществляет печать документа 
//
// Параметры:
//  ИмяМакета - строка, название макета.
//
Процедура Печать(ИмяМакета) Экспорт
	
	// Получить экземпляр документа на печать
	Если (ИмяМакета = "НакладнаяСостояние") Тогда
		ТабДокумент = ПечатьДокумента();
	ИначеЕсли (ИмяМакета = "СостояниеБлюд") Тогда
		ТабДокумент = ПечатьСостоянияБлюд();
	КонецЕсли;
	
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент);
	
КонецПроцедуры // Печать()

// Процедура осуществляет печать документа 
//
// Параметры:
//  Нет.
//
Функция ПечатьДокумента() Экспорт
	
	ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.Принтеры);
	Если (ПринтерПечати = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	РезультатЗапроса = СформироватьЗапросПоСостояюниюБлюд();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СостояниеБлюд";
	
	Макет = ПолучитьМакет("НакладнаяСостояние");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьМакетаЗаголовок				= Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаОтступ 				= Макет.ПолучитьОбласть("Отступ");
	ОбластьМакетаШапкаТаблицы			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаСтрокаКомментарий 		= Макет.ПолучитьОбласть("СтрокаКомментарий");
	ОбластьМакетаСтрока 				= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодчеркивание			= Макет.ПолучитьОбласть("Подчеркивание");
	
	// Заголовок.
	ОбластьМакетаЗаголовок.Параметры.Дата = ТекущаяДата();
	ТабДокумент.Вывести(ОбластьМакетаЗаголовок);

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;
	
	// Табличная часть.
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	// Перенос данных в табличное поле.
	Выборка = РезультатЗапроса.Выбрать();
	
	НомерСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.Товар   	= Выборка.Номенклатура;
		ОбластьМакета.Параметры.ОстатокУчет = ?(Выборка.Остаток <> 0, Выборка.Остаток, "-");
		ОбластьМакета.Параметры.ОстатокФакт = "";
		ОбластьМакета.Параметры.Подпись   	= "";
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = Выборка.КодАртикул;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаПодчеркивание);
	
	ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
	ТабДокумент = Неопределено;
	
КонецФункции

// Функция формирует запрос по состоянию блюд
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// РезультатЗапроса - Тип: РезультатЗапроса. Результат выполнения запроса.
//
Функция СформироватьЗапросПоСостояюниюБлюд() Экспорт
	
	// Выборка данных.
	ТекущаяКассоваяДата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
	ТекущийРесторан 	= ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущийСотрудник 	= УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыпускПродукцииУслуг.Номенклатура КАК Номенклатура,
	               |	СУММА(ВыпускПродукцииУслуг.Количество) КАК Приготовлено
	               |ПОМЕСТИТЬ ТаблицаПриготовлено
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	               |ГДЕ
	               |	ВыпускПродукцииУслуг.Ресторан = &Ресторан
	               |	И ВыпускПродукцииУслуг.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ВыпускПродукцииУслуг.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
	               |	И ВыпускПродукцииУслуг.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)
	               |	И ВыпускПродукцииУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетПроизводстваЗаСмену.Выдача)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукцииУслуг.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Продажи.Номенклатура КАК Номенклатура,
	               |	СУММА(Продажи.Количество) КАК Продано
	               |ПОМЕСТИТЬ ТаблицаПродано
	               |ИЗ
	               |	РегистрНакопления.Продажи КАК Продажи
	               |ГДЕ
	               |	Продажи.Ресторан = &Ресторан
	               |	И Продажи.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И Продажи.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
	               |	И Продажи.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Продажи.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписанияТоваров.Номенклатура КАК Номенклатура,
	               |	СУММА(СписанияТоваров.Количество) КАК Списано
	               |ПОМЕСТИТЬ ТаблицаСписано
	               |ИЗ
	               |	РегистрНакопления.СписанияТоваров КАК СписанияТоваров
	               |ГДЕ
	               |	СписанияТоваров.Ресторан = &Ресторан
	               |	И СписанияТоваров.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И СписанияТоваров.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
	               |	И СписанияТоваров.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СписанияТоваров.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыпускПродукцииУслуг.Номенклатура,
	               |	СУММА(ВыпускПродукцииУслуг.Количество) КАК Возврат
	               |ПОМЕСТИТЬ ТаблицаВозврат
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	               |ГДЕ
	               |	ВыпускПродукцииУслуг.Ресторан = &Ресторан
	               |	И ВыпускПродукцииУслуг.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ВыпускПродукцииУслуг.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор)
	               |	И ВыпускПродукцииУслуг.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Условие)
	               |	И ВыпускПродукцииУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетПроизводстваЗаСмену.Возврат)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукцииУслуг.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ЕСТЬNULL(ТаблицаПриготовлено.Номенклатура, ЕСТЬNULL(ТаблицаПродано.Номенклатура, ЕСТЬNULL(ТаблицаСписано.Номенклатура, ТаблицаВозврат.Номенклатура))) КАК Номенклатура,
	               |	СУММА(ЕСТЬNULL(ТаблицаПриготовлено.Приготовлено, 0)) КАК Приготовлено,
	               |	СУММА(ЕСТЬNULL(ТаблицаПродано.Продано, 0)) КАК Продано,
	               |	СУММА(ЕСТЬNULL(ТаблицаСписано.Списано, 0)) КАК Списано,
	               |	СУММА(ЕСТЬNULL(ТаблицаВозврат.Возврат, 0)) КАК Возврат,
	               |	СУММА(ЕСТЬNULL(ТаблицаПриготовлено.Приготовлено, 0) - ЕСТЬNULL(ТаблицаПродано.Продано, 0) - ЕСТЬNULL(ТаблицаСписано.Списано, 0) - ЕСТЬNULL(ТаблицаВозврат.Возврат, 0)) КАК Остаток,
	               |	ЕСТЬNULL(ТаблицаПриготовлено.Номенклатура.Наименование, ЕСТЬNULL(ТаблицаПродано.Номенклатура.Наименование, ЕСТЬNULL(ТаблицаСписано.Номенклатура.Наименование, ТаблицаВозврат.Номенклатура.Наименование))) КАК Наименование
	               |ИЗ
	               |	ТаблицаПриготовлено КАК ТаблицаПриготовлено
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПродано КАК ТаблицаПродано
	               |		ПО ТаблицаПриготовлено.Номенклатура = ТаблицаПродано.Номенклатура
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаСписано КАК ТаблицаСписано
	               |		ПО ТаблицаПриготовлено.Номенклатура = ТаблицаСписано.Номенклатура
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаВозврат КАК ТаблицаВозврат
	               |		ПО ТаблицаПриготовлено.Номенклатура = ТаблицаВозврат.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ТаблицаПриготовлено.Номенклатура, ЕСТЬNULL(ТаблицаПродано.Номенклатура, ЕСТЬNULL(ТаблицаСписано.Номенклатура, ТаблицаВозврат.Номенклатура))),
	               |	ЕСТЬNULL(ТаблицаПриготовлено.Номенклатура.Наименование, ЕСТЬNULL(ТаблицаПродано.Номенклатура.Наименование, ЕСТЬNULL(ТаблицаСписано.Номенклатура.Наименование, ТаблицаВозврат.Номенклатура.Наименование)))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПриготовлено
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПродано
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаСписано
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаВозврат";
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяКассоваяДата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяКассоваяДата));
	
	Если ТекущийРесторан.Пустая() ИЛИ УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыпускПродукцииУслуг.Ресторан = &Ресторан", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Продажи.Ресторан = &Ресторан", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписанияТоваров.Ресторан = &Ресторан", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущийРесторан) Тогда
		Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПечатьСостоянияБлюд() Экспорт
	
	ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.Принтеры);
	Если (ПринтерПечати = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЗапроса = СформироватьЗапросПоСостояюниюБлюд();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СостояниеБлюд";
	
	Макет = ПолучитьМакет("СостояниеБлюд");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ОбластьМакетаЗаголовок			= Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаОтступ 			= Макет.ПолучитьОбласть("Отступ");
	ОбластьМакетаШапкаТаблицы		= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаСтрокаКомментарий 	= Макет.ПолучитьОбласть("СтрокаКомментарий");
	ОбластьМакетаСтрока 			= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодчеркивание		= Макет.ПолучитьОбласть("Подчеркивание");
	
	// Заголовок.
	ОбластьМакетаЗаголовок.Параметры.Дата = ТекущаяДата();
	ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;
	
	// Табличная часть.
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	// Перенос данных в табличное поле.
	Выборка = РезультатЗапроса.Выбрать();
	
	НомерСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.Остаток 	= ?(Выборка.Остаток <> 0, Выборка.Остаток, "-");
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = Выборка.Номенклатура[ТекстКодАртикул];
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаПодчеркивание);
	
	ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
	
	//Возврат ТабДокумент;
	
КонецФункции


#КонецЕсли
