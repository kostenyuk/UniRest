
Функция ПолучитьСостояниеСтолов(НачалоПериода, ОкончаниеПериода, Ресторан = Неопределено, Родитель = Неопределено, РазмеченныеСтолы = Неопределено, ПараметрыРасчета = Неопределено) Экспорт
	
	Перем СтрокаТаблицыСостоянияСтоловПоЗаказам, СтрокаТаблицыСостояниеСтоловИтоговая;
	
	ПараметрыРасчетаСостоянияЗаказовПокупателей = ПолучитьПараметрыРасчетаСостоянияЗаказовПокупателей(ПараметрыРасчета);
	
	ТаблицаСостоянияСтоловПоЗаказам = ПолучитьСостояниеСтоловПоЗаказам(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета);
	ТаблицаСостояниеСтоловИтоговая = ПолучитьСостояниеСтоловИтоговая(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета);
	
	Для Каждого СтрокаТаблицыСостоянияСтоловПоЗаказам Из ТаблицаСостоянияСтоловПоЗаказам Цикл
		
		Если (СтрокаТаблицыСостояниеСтоловИтоговая = Неопределено) Или (Не СтрокаТаблицыСостоянияСтоловПоЗаказам.Стол = СтрокаТаблицыСостояниеСтоловИтоговая.Стол) Тогда
			СтрокаТаблицыСостояниеСтоловИтоговая = ТаблицаСостояниеСтоловИтоговая.Найти(СтрокаТаблицыСостоянияСтоловПоЗаказам.Стол, "Стол");
			Если (СтрокаТаблицыСостояниеСтоловИтоговая = Неопределено) Тогда
				СтрокаТаблицыСостояниеСтоловИтоговая = СтрокаТаблицыСостоянияСтоловПоЗаказам;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыСостоянияСтоловПоЗаказам, СтрокаТаблицыСостояниеСтоловИтоговая, "СостояниеСтола,СостояниеСтолаПересекающийся");
		
	КонецЦикла;
	
	Возврат ТаблицаСостоянияСтоловПоЗаказам;
	
КонецФункции // ПолучитьСостояниеСтолов()

Функция ПолучитьСостояниеСтоловПоЗаказам(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета)
	
	ТекущаяДата = ТекущаяДата(); ПараметрыРасчетаСостоянияЗаказовПокупателей = ПараметрыРасчета;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Столы.Ссылка КАК Стол,
	                      |	Столы.Номер КАК Номер,
	                      |	ЗНАЧЕНИЕ(Перечисление.СостояниеСтолов.Пустые) КАК СостояниеСтола,
	                      |	ЛОЖЬ КАК СостояниеСтолаПересекающийся,
	                      |	ЕСТЬNULL(СостояниеЗаказовПокупателей.Документ, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК Документ,
	                      |	ЕСТЬNULL(СостояниеЗаказовПокупателей.ДатаНачалаРезервирования, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаРезервирования,
	                      |	ЕСТЬNULL(СостояниеЗаказовПокупателей.КоличествоКлиентов, 0) КАК КоличествоКлиентов,
	                      |	ЕСТЬNULL(СостояниеЗаказовПокупателей.СледующийСтол.Номер, """") КАК СледующийНомер,
	                      |	ВЫБОР
	                      |		КОГДА СостояниеЗаказовПокупателей.Документ ЕСТЬ NULL 
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.ПустаяСсылка)
	                      |		КОГДА СостояниеЗаказовПокупателей.Пересекающийся
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Пересекающиеся)
	                      |		КОГДА ДОБАВИТЬКДАТЕ(СостояниеЗаказовПокупателей.ДатаНачалаРезервирования, СЕКУНДА, &ГраницаПросроченныхЗаказовПокупателейСекунд) < &ТекущаяДата
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Просроченные)
	                      |		КОГДА ДОБАВИТЬКДАТЕ(СостояниеЗаказовПокупателей.ДатаНачалаРезервирования, СЕКУНДА, -&ГраницаТекущихЗаказовПокупателейСекунд) < &ТекущаяДата
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Текущие)
	                      |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Открытые)
	                      |	КОНЕЦ КАК СостояниеДокумента
	                      |ИЗ
	                      |	Справочник.Столы КАК Столы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			СостояниеЗаказовПокупателей.Документ КАК Документ,
	                      |			СостояниеЗаказовПокупателей.Стол КАК Стол,
	                      |			СостояниеЗаказовПокупателей.ДатаНачалаРезервирования КАК ДатаНачалаРезервирования,
	                      |			СостояниеЗаказовПокупателей.КоличествоКлиентов КАК КоличествоКлиентов,
	                      |			СостояниеЗаказовПокупателей.СледующийСтол КАК СледующийСтол,
	                      |			МАКСИМУМ(ВЫБОР
	                      |					КОГДА СостояниеЗарезервированностиСтолов.Документ ЕСТЬ NULL 
	                      |						ТОГДА ЛОЖЬ
	                      |					ИНАЧЕ ИСТИНА
	                      |				КОНЕЦ) КАК Пересекающийся
	                      |		ИЗ
	                      |			РегистрСведений.СостояниеЗаказовПокупателей КАК СостояниеЗаказовПокупателей
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаказовПокупателей КАК СостояниеЗарезервированностиСтолов
	                      |				ПО СостояниеЗаказовПокупателей.Модуль = СостояниеЗарезервированностиСтолов.Модуль
	                      |					И СостояниеЗаказовПокупателей.Ресторан = СостояниеЗарезервированностиСтолов.Ресторан
	                      |					И СостояниеЗаказовПокупателей.Стол = СостояниеЗарезервированностиСтолов.Стол
	                      |					И (НЕ СостояниеЗаказовПокупателей.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка))
	                      |					И (НЕ СостояниеЗаказовПокупателей.Документ = СостояниеЗарезервированностиСтолов.Документ)
	                      |					И (СостояниеЗаказовПокупателей.ДатаНачалаРезервирования МЕЖДУ СостояниеЗарезервированностиСтолов.ДатаНачалаРезервирования И СостояниеЗарезервированностиСтолов.ДатаОкончанияРезервирования
	                      |						ИЛИ СостояниеЗаказовПокупателей.ДатаОкончанияРезервирования МЕЖДУ СостояниеЗарезервированностиСтолов.ДатаНачалаРезервирования И СостояниеЗарезервированностиСтолов.ДатаОкончанияРезервирования)
	                      |		ГДЕ
	                      |			СостояниеЗаказовПокупателей.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	                      |			И СостояниеЗаказовПокупателей.Ресторан = &Ресторан
	                      |			И НЕ СостояниеЗаказовПокупателей.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка)
	                      |			И (СостояниеЗаказовПокупателей.ДатаНачалаРезервирования МЕЖДУ &НачалоПолногоПериода И &ОкончаниеПолногоПериода
	                      |					ИЛИ СостояниеЗаказовПокупателей.ДатаОкончанияРезервирования МЕЖДУ &НачалоПолногоПериода И &ОкончаниеПолногоПериода)
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			СостояниеЗаказовПокупателей.Документ,
	                      |			СостояниеЗаказовПокупателей.Стол,
	                      |			СостояниеЗаказовПокупателей.СледующийСтол,
	                      |			СостояниеЗаказовПокупателей.ДатаНачалаРезервирования,
	                      |			СостояниеЗаказовПокупателей.КоличествоКлиентов) КАК СостояниеЗаказовПокупателей
	                      |		ПО (СостояниеЗаказовПокупателей.Стол = Столы.Ссылка)
	                      |ГДЕ
	                      |	Столы.Ссылка В ИЕРАРХИИ(&Родитель)
	                      |	И Столы.Номер В(&РазмеченныеСтолы)
	                      |	И Столы.Актуальность
	                      |	И НЕ Столы.ПометкаУдаления
	                      |	И НЕ Столы.ЭтоГруппа
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Номер,
	                      |	ДатаНачалаРезервирования
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	Если (Ресторан = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеЗаказовПокупателей.Ресторан = &Ресторан", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Ресторан", Ресторан);
	КонецЕсли;
	Если (Родитель = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Столы.Ссылка В ИЕРАРХИИ(&Родитель)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	Если (РазмеченныеСтолы = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Столы.Номер В(&РазмеченныеСтолы)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("РазмеченныеСтолы", РазмеченныеСтолы);
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПолногоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПолногоПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ГраницаТекущихЗаказовПокупателейСекунд", ПараметрыРасчетаСостоянияЗаказовПокупателей.ГраницаТекущихЗаказовПокупателейСекунд);
	Запрос.УстановитьПараметр("ГраницаПросроченныхЗаказовПокупателейСекунд", ПараметрыРасчетаСостоянияЗаказовПокупателей.ГраницаПросроченныхЗаказовПокупателейСекунд);
						  
	Возврат Запрос.Выполнить().Выгрузить();
						  
КонецФункции // ПолучитьСостояниеСтоловПоЗаказам()

Функция ПолучитьСостояниеСтоловИтоговая(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета)
	
	ТекущаяДата = ТекущаяДата(); ПараметрыРасчетаСостоянияЗаказовПокупателей = ПараметрыРасчета;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Столы.Ссылка КАК Стол,
	                      |	ВЫБОР
	                      |		КОГДА СостояниеСтолов.Распечатан
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСтолов.РеализацияТоваровУслугЗавершающиеся)
	                      |		КОГДА СостояниеСтолов.Открыт
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСтолов.РеализацияТоваровУслугНачинающиеся)
	                      |		КОГДА СостояниеСтолов.НачалоРезерва
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСтолов.ЗаказыПокупателейНачинающиеся)
	                      |		КОГДА СостояниеСтолов.ОкончаниеРезерва
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСтолов.ЗаказыПокупателейЗавершающиеся)
	                      |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеСтолов.Пустые)
	                      |	КОНЕЦ КАК СостояниеСтола,
	                      |	СостояниеСтолов.Пересекающийся КАК СостояниеСтолаПересекающийся
	                      |ИЗ
	                      |	Справочник.Столы КАК Столы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			СостояниеСтолов.Стол КАК Стол,
	                      |			МАКСИМУМ(СостояниеСтолов.Открыт) КАК Открыт,
	                      |			МАКСИМУМ(СостояниеСтолов.Распечатан) КАК Распечатан,
	                      |			МАКСИМУМ(СостояниеСтолов.Пересекающийся) КАК Пересекающийся,
	                      |			МАКСИМУМ(СостояниеСтолов.НачалоРезерва) КАК НачалоРезерва,
	                      |			МАКСИМУМ(СостояниеСтолов.ОкончаниеРезерва) КАК ОкончаниеРезерва
	                      |		ИЗ
	                      |			(ВЫБРАТЬ
	                      |				СостояниеЗаказовПокупателей.Стол КАК Стол,
	                      |				ЛОЖЬ КАК Открыт,
	                      |				ЛОЖЬ КАК Распечатан,
	                      |				СостояниеЗаказовПокупателей.Пересекающийся КАК Пересекающийся,
	                      |				СостояниеЗаказовПокупателей.НачалоРезерва КАК НачалоРезерва,
	                      |				СостояниеЗаказовПокупателей.ОкончаниеРезерва КАК ОкончаниеРезерва
	                      |			ИЗ
	                      |				(ВЫБРАТЬ
	                      |					СостояниеЗаказовПокупателей.Стол КАК Стол,
	                      |					МАКСИМУМ(ВЫБОР
	                      |							КОГДА СостояниеЗарезервированностиСтолов.Документ ЕСТЬ NULL 
	                      |								ТОГДА ЛОЖЬ
	                      |							ИНАЧЕ ИСТИНА
	                      |						КОНЕЦ) КАК Пересекающийся,
	                      |					МАКСИМУМ(ВЫБОР
	                      |							КОГДА СостояниеЗаказовПокупателей.ДатаНачалаРезервирования МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	                      |								ТОГДА ИСТИНА
	                      |							ИНАЧЕ ЛОЖЬ
	                      |						КОНЕЦ) КАК НачалоРезерва,
	                      |					МАКСИМУМ(ВЫБОР
	                      |							КОГДА СостояниеЗаказовПокупателей.ДатаОкончанияРезервирования МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	                      |								ТОГДА ИСТИНА
	                      |							ИНАЧЕ ЛОЖЬ
	                      |						КОНЕЦ) КАК ОкончаниеРезерва
	                      |				ИЗ
	                      |					РегистрСведений.СостояниеЗаказовПокупателей КАК СостояниеЗаказовПокупателей
	                      |						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаказовПокупателей КАК СостояниеЗарезервированностиСтолов
	                      |						ПО СостояниеЗаказовПокупателей.Модуль = СостояниеЗарезервированностиСтолов.Модуль
	                      |							И СостояниеЗаказовПокупателей.Ресторан = СостояниеЗарезервированностиСтолов.Ресторан
	                      |							И СостояниеЗаказовПокупателей.Стол = СостояниеЗарезервированностиСтолов.Стол
	                      |							И (НЕ СостояниеЗаказовПокупателей.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка))
	                      |							И (НЕ СостояниеЗаказовПокупателей.Документ = СостояниеЗарезервированностиСтолов.Документ)
	                      |							И (СостояниеЗаказовПокупателей.ДатаНачалаРезервирования МЕЖДУ СостояниеЗарезервированностиСтолов.ДатаНачалаРезервирования И СостояниеЗарезервированностиСтолов.ДатаОкончанияРезервирования
	                      |								ИЛИ СостояниеЗаказовПокупателей.ДатаОкончанияРезервирования МЕЖДУ СостояниеЗарезервированностиСтолов.ДатаНачалаРезервирования И СостояниеЗарезервированностиСтолов.ДатаОкончанияРезервирования)
	                      |				ГДЕ
	                      |					СостояниеЗаказовПокупателей.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	                      |					И СостояниеЗаказовПокупателей.Ресторан = &Ресторан
	                      |					И НЕ СостояниеЗаказовПокупателей.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка)
	                      |					И (СостояниеЗаказовПокупателей.ДатаНачалаРезервирования МЕЖДУ &НачалоПолногоПериода И &ОкончаниеПолногоПериода
	                      |							ИЛИ СостояниеЗаказовПокупателей.ДатаОкончанияРезервирования МЕЖДУ &НачалоПолногоПериода И &ОкончаниеПолногоПериода)
	                      |				
	                      |				СГРУППИРОВАТЬ ПО
	                      |					СостояниеЗаказовПокупателей.Стол) КАК СостояниеЗаказовПокупателей
	                      |			
	                      |			ОБЪЕДИНИТЬ ВСЕ
	                      |			
	                      |			ВЫБРАТЬ
	                      |				СостояниеДокументов.Стол,
	                      |				СостояниеДокументов.Открыт,
	                      |				СостояниеДокументов.Распечатан,
	                      |				ЛОЖЬ,
	                      |				ЛОЖЬ,
	                      |				ЛОЖЬ
	                      |			ИЗ
	                      |				(ВЫБРАТЬ
	                      |					СостояниеДокументов.Стол КАК Стол,
	                      |					МАКСИМУМ(СостояниеДокументов.Распечатан) КАК Распечатан,
	                      |					МАКСИМУМ(ИСТИНА) КАК Открыт
	                      |				ИЗ
	                      |					(ВЫБРАТЬ
	                      |						СостояниеДокументов.Стол КАК Стол,
	                      |						СостояниеДокументов.ДатаНачалаПериода КАК ДатаНачалаПериода,
	                      |						ВЫБОР
	                      |							КОГДА ДОБАВИТЬКДАТЕ(СостояниеДокументов.ДатаНачалаПериода, СЕКУНДА, ВЫБОР
	                      |										КОГДА ЕСТЬNULL(СостояниеДокументов.Стол.ТипСтола.ВремяРезервированияСекунд, 3600) = 0
	                      |											ТОГДА 3600
	                      |										ИНАЧЕ ЕСТЬNULL(СостояниеДокументов.Стол.ТипСтола.ВремяРезервированияСекунд, 3600)
	                      |									КОНЕЦ - 1) >= &ТекущаяДата
	                      |								ТОГДА ДОБАВИТЬКДАТЕ(СостояниеДокументов.ДатаНачалаПериода, СЕКУНДА, ВЫБОР
	                      |											КОГДА ЕСТЬNULL(СостояниеДокументов.Стол.ТипСтола.ВремяРезервированияСекунд, 3600) = 0
	                      |												ТОГДА 3600
	                      |											ИНАЧЕ ЕСТЬNULL(СостояниеДокументов.Стол.ТипСтола.ВремяРезервированияСекунд, 3600)
	                      |										КОНЕЦ - 1)
	                      |							ИНАЧЕ ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, 900)
	                      |						КОНЕЦ КАК ДатаОкончанияПериода,
	                      |						СостояниеДокументов.Распечатан КАК Распечатан
	                      |					ИЗ
	                      |						РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
	                      |					ГДЕ
	                      |						СостояниеДокументов.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	                      |						И СостояниеДокументов.Ресторан = &Ресторан
	                      |						И НЕ СостояниеДокументов.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка)) КАК СостояниеДокументов
	                      |				ГДЕ
	                      |					(&НачалоПериода МЕЖДУ СостояниеДокументов.ДатаНачалаПериода И СостояниеДокументов.ДатаОкончанияПериода
	                      |							ИЛИ &ОкончаниеПериода МЕЖДУ СостояниеДокументов.ДатаНачалаПериода И СостояниеДокументов.ДатаОкончанияПериода)
	                      |				
	                      |				СГРУППИРОВАТЬ ПО
	                      |					СостояниеДокументов.Стол) КАК СостояниеДокументов) КАК СостояниеСтолов
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			СостояниеСтолов.Стол) КАК СостояниеСтолов
	                      |		ПО Столы.Ссылка = СостояниеСтолов.Стол
	                      |ГДЕ
	                      |	Столы.Ссылка В ИЕРАРХИИ(&Родитель)
	                      |	И Столы.Номер В(&РазмеченныеСтолы)
	                      |	И Столы.Актуальность
	                      |	И НЕ Столы.ПометкаУдаления
	                      |	И НЕ Столы.ЭтоГруппа");
	Если (Ресторан = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеЗаказовПокупателей.Ресторан = &Ресторан", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеДокументов.Ресторан = &Ресторан", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Ресторан", Ресторан);
	КонецЕсли;
	Если (Родитель = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Столы.Ссылка В ИЕРАРХИИ(&Родитель)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	Если (РазмеченныеСтолы = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Столы.Номер В(&РазмеченныеСтолы)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("РазмеченныеСтолы", РазмеченныеСтолы);
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПолногоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПолногоПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
						  
	Возврат Запрос.Выполнить().Выгрузить();
						  
КонецФункции // ПолучитьСостояниеСтоловИтоговая()


Функция ПолучитьСостояниеРекомендации(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Нераспределенные", Ложь);
	Результат.Вставить("МинимальнаяДатаНераспределенных", '00010101');
	Результат.Вставить("Просроченные", Ложь);
	Результат.Вставить("МинимальнаяДатаПросроченных", '00010101');
	Результат.Вставить("Заголовок", Неопределено);
	
	
	ТекущаяДата = ТекущаяДата(); ПараметрыРасчетаСостоянияЗаказовПокупателей = ПараметрыРасчета;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(СУММА(ВЫБОР
	                      |				КОГДА ДОБАВИТЬКДАТЕ(СостояниеЗаказовПокупателей.ДатаНачалаРезервирования, СЕКУНДА, &ГраницаПросроченныхЗаказовПокупателейСекунд) < &ТекущаяДата
	                      |					ТОГДА 1
	                      |				ИНАЧЕ 0
	                      |			КОНЕЦ), 0) КАК Просроченные,
	                      |	ЕСТЬNULL(МИНИМУМ(ВЫБОР
	                      |				КОГДА ДОБАВИТЬКДАТЕ(СостояниеЗаказовПокупателей.ДатаНачалаРезервирования, СЕКУНДА, &ГраницаПросроченныхЗаказовПокупателейСекунд) < &ТекущаяДата
	                      |					ТОГДА СостояниеЗаказовПокупателей.ДатаНачалаРезервирования
	                      |				ИНАЧЕ NULL
	                      |			КОНЕЦ), ДАТАВРЕМЯ(1, 1, 1)) КАК МинимальнаяДатаПросроченных,
	                      |	ЕСТЬNULL(СУММА(ВЫБОР
	                      |				КОГДА ДОБАВИТЬКДАТЕ(СостояниеЗаказовПокупателей.ДатаНачалаРезервирования, СЕКУНДА, -&ГраницаПредупрежденияНераспределенныхСекунд) < &ТекущаяДата
	                      |						И СостояниеЗаказовПокупателей.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка)
	                      |					ТОГДА 1
	                      |				ИНАЧЕ 0
	                      |			КОНЕЦ), 0) КАК Нераспределенные,
	                      |	ЕСТЬNULL(МИНИМУМ(ВЫБОР
	                      |				КОГДА ДОБАВИТЬКДАТЕ(СостояниеЗаказовПокупателей.ДатаНачалаРезервирования, СЕКУНДА, -&ГраницаПредупрежденияНераспределенныхСекунд) < &ТекущаяДата
	                      |						И СостояниеЗаказовПокупателей.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка)
	                      |					ТОГДА СостояниеЗаказовПокупателей.ДатаНачалаРезервирования
	                      |				ИНАЧЕ NULL
	                      |			КОНЕЦ), ДАТАВРЕМЯ(1, 1, 1)) КАК МинимальнаяДатаНераспределенных
	                      |ИЗ
	                      |	РегистрСведений.СостояниеЗаказовПокупателей КАК СостояниеЗаказовПокупателей
	                      |ГДЕ
	                      |	СостояниеЗаказовПокупателей.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	                      |	И СостояниеЗаказовПокупателей.Ресторан = &Ресторан");
	Если (Ресторан = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеЗаказовПокупателей.Ресторан = &Ресторан", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Ресторан", Ресторан);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ГраницаПросроченныхЗаказовПокупателейСекунд", ПараметрыРасчетаСостоянияЗаказовПокупателей.ГраницаПросроченныхЗаказовПокупателейСекунд);
	Запрос.УстановитьПараметр("ГраницаПредупрежденияНераспределенныхСекунд", ПараметрыРасчетаСостоянияЗаказовПокупателей.ГраницаПредупрежденияНераспределенныхСекунд);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Нераспределенные = Булево(Выборка.Нераспределенные);
		Результат.МинимальнаяДатаНераспределенных = Выборка.МинимальнаяДатаНераспределенных;
		Результат.Просроченные = Булево(Выборка.Просроченные);
		Результат.МинимальнаяДатаПросроченных = Выборка.МинимальнаяДатаПросроченных;
	КонецЦикла;
	
	
	Если Результат.Нераспределенные Тогда
		Результат.Просроченные = Ложь;
	КонецЕсли;
	Если Результат.Просроченные Тогда
		Результат.Заголовок = СтрЗаменить(НСтр("ru = 'Просрочено [Количество] резервов'; uk = 'Прострочено [Количество] резервів'"), "[Количество]", Выборка.Просроченные);
	КонецЕсли;
	Если Результат.Нераспределенные Тогда
		Результат.Заголовок = СтрЗаменить(НСтр("ru = 'Не распределено [Количество] резервов'; uk = 'Не розподілено [Количество] резервів'"), "[Количество]", Выборка.Нераспределенные);
	КонецЕсли;
						  
	Возврат Результат;
						  
КонецФункции // ПолучитьСостояниеРекомендации()


Функция ПолучитьСостояниеРезервов(НачалоПериода, ОкончаниеПериода, Ресторан = Неопределено, Родитель = Неопределено, Состояние = Неопределено, Поиск = Неопределено, Сортировка = Неопределено, ПараметрыРасчета = Неопределено) Экспорт
	
	ТекущаяДата = ТекущаяДата(); ПараметрыРасчетаСостоянияЗаказовПокупателей = ПолучитьПараметрыРасчетаСостоянияЗаказовПокупателей(ПараметрыРасчета);
	
	Телефон = __УправлениеКонтактнойИнформациейКлиентСервер.ПолучитьТолькоЦифрыБезЛидирующихНулей(Поиск);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказПокупателя.Ссылка,
	                      |	ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
	                      |	ЗаказПокупателя.Номер,
	                      |	ЗаказПокупателя.Дата КАК Дата,
	                      |	ЗаказПокупателя.Проведен КАК Проведен,
	                      |	ЗаказПокупателя.КоличествоКлиентов,
	                      |	ЗаказПокупателя.Комментарий,
	                      |	ЗаказПокупателя.КонтрагентПредставление,
	                      |	ЗаказПокупателя.Модуль,
	                      |	ЗаказПокупателя.Ответственный,
	                      |	ЗаказПокупателя.ПричинаОтказа,
	                      |	ЗаказПокупателя.Распечатан,
	                      |	ЗаказПокупателя.Ресторан,
	                      |	ЗаказПокупателя.Состояние,
	                      |	ЗаказПокупателя.Сотрудник,
	                      |	ЗаказПокупателя.Стол,
	                      |	ЗаказПокупателя.СтолПредставление,
	                      |	ЗаказПокупателя.ТелефонДополнительныйПоиск,
	                      |	ЗаказПокупателя.ТелефонДополнительныйПредставление,
	                      |	ЗаказПокупателя.ТелефонПоиск,
	                      |	ЗаказПокупателя.ТелефонПредставление,
	                      |	ЗаказПокупателя.СостояниеДокумента,
	                      |	ЕСТЬNULL(СостояниеЗаказовПокупателей.Пересекающийся, ЛОЖЬ) КАК СостояниеДокументаПересекающийся,
	                      |	ВЫБОР
	                      |		КОГДА ЗаказПокупателя.Проведен
	                      |			ТОГДА 1
	                      |		КОГДА ЗаказПокупателя.ПометкаУдаления
	                      |			ТОГДА 2
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ИндексКартинки,
	                      |	0 КАК ИндексКартинкиДействия,
	                      |	ВЫБОР
	                      |		КОГДА НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) = ДОБАВИТЬКДАТЕ(&НачалоДня, СЕКУНДА, -172800)
	                      |			ТОГДА &Позавчера
	                      |		КОГДА НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) = ДОБАВИТЬКДАТЕ(&НачалоДня, СЕКУНДА, -86400)
	                      |			ТОГДА &Вчера
	                      |		КОГДА НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) = &НачалоДня
	                      |			ТОГДА &Сегодня
	                      |		КОГДА НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) = ДОБАВИТЬКДАТЕ(&НачалоДня, СЕКУНДА, 86400)
	                      |			ТОГДА &Завтра
	                      |		КОГДА НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) = ДОБАВИТЬКДАТЕ(&НачалоДня, СЕКУНДА, 172800)
	                      |			ТОГДА &Послезавтра
	                      |		ИНАЧЕ ЗаказПокупателя.Дата
	                      |	КОНЕЦ КАК ПериодДата,
	                      |	ЗаказПокупателя.Дата КАК ПериодВремя,
	                      |	ЛОЖЬ КАК Добавление,
	                      |	ЛОЖЬ КАК Изменение,
	                      |	ЛОЖЬ КАК Удаление,
	                      |	ЛОЖЬ КАК Проведение,
	                      |	НЕОПРЕДЕЛЕНО КАК Столы
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ЗаказПокупателя.Ссылка КАК Ссылка,
	                      |		ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
	                      |		ЗаказПокупателя.Номер КАК Номер,
	                      |		ЗаказПокупателя.Дата КАК Дата,
	                      |		ЗаказПокупателя.Проведен КАК Проведен,
	                      |		ЗаказПокупателя.КоличествоКлиентов КАК КоличествоКлиентов,
	                      |		ЗаказПокупателя.Комментарий КАК Комментарий,
	                      |		ЗаказПокупателя.КонтрагентПредставление КАК КонтрагентПредставление,
	                      |		ЗаказПокупателя.Модуль КАК Модуль,
	                      |		ЗаказПокупателя.Ответственный КАК Ответственный,
	                      |		ЗаказПокупателя.ПричинаОтказа КАК ПричинаОтказа,
	                      |		ЗаказПокупателя.Распечатан КАК Распечатан,
	                      |		ЗаказПокупателя.Ресторан КАК Ресторан,
	                      |		ЗаказПокупателя.Состояние КАК Состояние,
	                      |		ЗаказПокупателя.Сотрудник КАК Сотрудник,
	                      |		ЗаказПокупателя.Стол КАК Стол,
	                      |		ЗаказПокупателя.СтолПредставление КАК СтолПредставление,
	                      |		ЗаказПокупателя.ТелефонДополнительныйПоиск КАК ТелефонДополнительныйПоиск,
	                      |		ЗаказПокупателя.ТелефонДополнительныйПредставление КАК ТелефонДополнительныйПредставление,
	                      |		ЗаказПокупателя.ТелефонПоиск КАК ТелефонПоиск,
	                      |		ЗаказПокупателя.ТелефонПредставление КАК ТелефонПредставление,
	                      |		ВЫБОР
	                      |			КОГДА ЗаказПокупателя.ПометкаУдаления
	                      |				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Удаленные)
	                      |			КОГДА ЗаказПокупателя.Проведен
	                      |				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Закрытые)
	                      |			КОГДА ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаНачалаРезервирования, СЕКУНДА, &ГраницаПросроченныхЗаказовПокупателейСекунд) < &ТекущаяДата
	                      |				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Просроченные)
	                      |			КОГДА ДОБАВИТЬКДАТЕ(ЗаказПокупателя.ДатаНачалаРезервирования, СЕКУНДА, -&ГраницаТекущихЗаказовПокупателейСекунд) < &ТекущаяДата
	                      |				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Текущие)
	                      |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.Открытые)
	                      |		КОНЕЦ КАК СостояниеДокумента
	                      |	ИЗ
	                      |		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	                      |	ГДЕ
	                      |		ЗаказПокупателя.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПолногоПериода, СЕКУНДА, -&МаксимальноеВремяРезервированияСекунд) И ДОБАВИТЬКДАТЕ(&ОкончаниеПолногоПериода, СЕКУНДА, &МаксимальноеВремяРезервированияСекунд)
	                      |		И ЗаказПокупателя.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	                      |		И (ЗаказПокупателя.ДатаНачалаРезервирования МЕЖДУ &НачалоПолногоПериода И &ОкончаниеПолногоПериода
	                      |				ИЛИ ЗаказПокупателя.ДатаОкончанияРезервирования МЕЖДУ &НачалоПолногоПериода И &ОкончаниеПолногоПериода)
	                      |		И ЗаказПокупателя.Ресторан = &Ресторан
	                      |		И ЗаказПокупателя.Стол В ИЕРАРХИИ(&Родитель)) КАК ЗаказПокупателя
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			СостояниеЗаказовПокупателей.Документ КАК Документ,
	                      |			МАКСИМУМ(ВЫБОР
	                      |					КОГДА СостояниеЗарезервированностиСтолов.Документ ЕСТЬ NULL 
	                      |						ТОГДА ЛОЖЬ
	                      |					ИНАЧЕ ИСТИНА
	                      |				КОНЕЦ) КАК Пересекающийся
	                      |		ИЗ
	                      |			РегистрСведений.СостояниеЗаказовПокупателей КАК СостояниеЗаказовПокупателей
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаказовПокупателей КАК СостояниеЗарезервированностиСтолов
	                      |				ПО СостояниеЗаказовПокупателей.Модуль = СостояниеЗарезервированностиСтолов.Модуль
	                      |					И СостояниеЗаказовПокупателей.Ресторан = СостояниеЗарезервированностиСтолов.Ресторан
	                      |					И СостояниеЗаказовПокупателей.Стол = СостояниеЗарезервированностиСтолов.Стол
	                      |					И (НЕ СостояниеЗаказовПокупателей.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка))
	                      |					И (НЕ СостояниеЗаказовПокупателей.Документ = СостояниеЗарезервированностиСтолов.Документ)
	                      |					И (СостояниеЗаказовПокупателей.ДатаНачалаРезервирования МЕЖДУ СостояниеЗарезервированностиСтолов.ДатаНачалаРезервирования И СостояниеЗарезервированностиСтолов.ДатаОкончанияРезервирования
	                      |						ИЛИ СостояниеЗаказовПокупателей.ДатаОкончанияРезервирования МЕЖДУ СостояниеЗарезервированностиСтолов.ДатаНачалаРезервирования И СостояниеЗарезервированностиСтолов.ДатаОкончанияРезервирования)
	                      |		ГДЕ
	                      |			СостояниеЗаказовПокупателей.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	                      |			И СостояниеЗаказовПокупателей.Ресторан = &Ресторан
	                      |			И НЕ СостояниеЗаказовПокупателей.Стол = ЗНАЧЕНИЕ(Справочник.Столы.ПустаяСсылка)
	                      |			И (СостояниеЗаказовПокупателей.ДатаНачалаРезервирования МЕЖДУ &НачалоПолногоПериода И &ОкончаниеПолногоПериода
	                      |					ИЛИ СостояниеЗаказовПокупателей.ДатаОкончанияРезервирования МЕЖДУ &НачалоПолногоПериода И &ОкончаниеПолногоПериода)
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			СостояниеЗаказовПокупателей.Документ) КАК СостояниеЗаказовПокупателей
	                      |		ПО ЗаказПокупателя.Ссылка = СостояниеЗаказовПокупателей.Документ
	                      |ГДЕ
	                      |	ЗаказПокупателя.СостояниеДокумента В(&Состояние)
	                      |	И (ЗаказПокупателя.КонтрагентПредставление ПОДОБНО &Поиск
	                      |			ИЛИ ЗаказПокупателя.ТелефонПоиск ПОДОБНО &Телефон
	                      |			ИЛИ ЗаказПокупателя.ТелефонДополнительныйПоиск ПОДОБНО &Телефон
	                      |			ИЛИ ЗаказПокупателя.СтолПредставление ПОДОБНО &Телефон)
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	Если (Ресторан = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.Ресторан = &Ресторан", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеЗаказовПокупателей.Ресторан = &Ресторан", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Ресторан", Ресторан);
	КонецЕсли;
	Если (Родитель = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.Стол В ИЕРАРХИИ(&Родитель)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	Если (Состояние = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.СостояниеДокумента В(&Состояние)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Состояние", Состояние);
	КонецЕсли;
	Если ПустаяСтрока(Поиск) И ПустаяСтрока(Телефон) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.КонтрагентПредставление ПОДОБНО &Поиск", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.ТелефонПоиск ПОДОБНО &Телефон", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.ТелефонДополнительныйПоиск ПОДОБНО &Телефон", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.СтолПредставление ПОДОБНО &Телефон", "ИСТИНА");
	Иначе
		Если ПустаяСтрока(Поиск) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.КонтрагентПредставление ПОДОБНО &Поиск", "ЛОЖЬ");
		КонецЕсли;
		Если ПустаяСтрока(Телефон) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.ТелефонПоиск ПОДОБНО &Телефон", "ЛОЖЬ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.ТелефонДополнительныйПоиск ПОДОБНО &Телефон", "ЛОЖЬ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя.СтолПредставление ПОДОБНО &Телефон", "ЛОЖЬ");
		КонецЕсли;
		Запрос.УстановитьПараметр("Телефон", "%" + Телефон + "%");
		Запрос.УстановитьПараметр("Поиск", "%" + СтрЗаменить(Поиск, " ", "%") + "%");
	КонецЕсли;
	Если (Сортировка = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВТОУПОРЯДОЧИВАНИЕ", "УПОРЯДОЧИТЬ ПО Дата, Номер АВТОУПОРЯДОЧИВАНИЕ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВТОУПОРЯДОЧИВАНИЕ", "УПОРЯДОЧИТЬ ПО " + Сортировка + ", Дата, Номер АВТОУПОРЯДОЧИВАНИЕ");
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПолногоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПолногоПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("ГраницаТекущихЗаказовПокупателейСекунд", ПараметрыРасчетаСостоянияЗаказовПокупателей.ГраницаТекущихЗаказовПокупателейСекунд);
	Запрос.УстановитьПараметр("ГраницаПросроченныхЗаказовПокупателейСекунд", ПараметрыРасчетаСостоянияЗаказовПокупателей.ГраницаПросроченныхЗаказовПокупателейСекунд);
	Запрос.УстановитьПараметр("МаксимальноеВремяРезервированияСекунд", ПараметрыРасчетаСостоянияЗаказовПокупателей.МаксимальноеВремяРезервированияСекунд);
	
	Запрос.УстановитьПараметр("Позавчера", НСтр("ru = 'Позавчера'; uk = 'Позавчора'"));
	Запрос.УстановитьПараметр("Вчера", Строка(ВариантСтандартногоПериода.Вчера));
	Запрос.УстановитьПараметр("Сегодня", Строка(ВариантСтандартногоПериода.Сегодня));
	Запрос.УстановитьПараметр("Завтра", Строка(ВариантСтандартногоПериода.Завтра));
	Запрос.УстановитьПараметр("Послезавтра", НСтр("ru = 'Послезавтра'; uk = 'Післязавтра'"));
	
	Возврат Запрос.Выполнить().Выгрузить();
						  
КонецФункции // ПолучитьСостояниеРезервов()


Функция ПолучитьПараметрыРасчетаСостоянияЗаказовПокупателей(ПараметрыРасчета = Неопределено) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЗаказыПокупателейГраницаТекущихЗаказовПокупателейВремя", '00010101001500');
	Настройки.Вставить("ЗаказыПокупателейГраницаПросроченныхЗаказовПокупателейВремя", '00010101001500');
	Настройки.Вставить("ЗаказыПокупателейГраницаПредупрежденияНераспределенныхВремя", '00010101001500');
	
	Настройки = __ОбщегоНазначенияПовторно.ПолучитьНастройкиПользователеля(Неопределено, Настройки);
	
	ГраницаТекущихЗаказовПокупателейВремя = Настройки.ЗаказыПокупателейГраницаТекущихЗаказовПокупателейВремя;
	ГраницаПросроченныхЗаказовПокупателейВремя = Настройки.ЗаказыПокупателейГраницаПросроченныхЗаказовПокупателейВремя;
	ГраницаПредупрежденияНераспределенныхВремя = Настройки.ЗаказыПокупателейГраницаПредупрежденияНераспределенныхВремя;
	
	Если (ПараметрыРасчета = Неопределено) Тогда
	
		Результат = Новый Структура;
		
		Результат.Вставить("ГраницаТекущихЗаказовПокупателейСекунд", (ГраницаТекущихЗаказовПокупателейВремя - НачалоДня(ГраницаТекущихЗаказовПокупателейВремя)));
		Результат.Вставить("ГраницаПросроченныхЗаказовПокупателейСекунд", (ГраницаПросроченныхЗаказовПокупателейВремя - НачалоДня(ГраницаПросроченныхЗаказовПокупателейВремя)));
		Результат.Вставить("ГраницаПредупрежденияНераспределенныхСекунд", (ГраницаПредупрежденияНераспределенныхВремя - НачалоДня(ГраницаПредупрежденияНераспределенныхВремя)));
		Результат.Вставить("ГраницаТекущихЗаказовПокупателейВремя", ГраницаТекущихЗаказовПокупателейВремя);
		Результат.Вставить("ГраницаПросроченныхЗаказовПокупателейВремя", ГраницаПросроченныхЗаказовПокупателейВремя);
		Результат.Вставить("ГраницаПредупрежденияНераспределенныхВремя", ГраницаПредупрежденияНераспределенныхВремя);
		Результат.Вставить("МаксимальноеВремяРезервированияСекунд", Справочники.ТипыСтолов.ПолучитьМаксимальноеВремяРезервированияСекунд());
		
	Иначе
		Результат = ПараметрыРасчета;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // ПолучитьПараметрыРасчетаСостоянияЗаказовПокупателей()

Процедура УстановитьПараметрыРасчетаСостоянияЗаказовПокупателей(Отказ, Параметры) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЗаказыПокупателейГраницаТекущихЗаказовПокупателейВремя", Параметры.ГраницаТекущихЗаказовПокупателейВремя);
	Настройки.Вставить("ЗаказыПокупателейГраницаПросроченныхЗаказовПокупателейВремя", Параметры.ГраницаПросроченныхЗаказовПокупателейВремя);
	Настройки.Вставить("ЗаказыПокупателейГраницаПредупрежденияНераспределенныхВремя", Параметры.ГраницаПредупрежденияНераспределенныхВремя);
	
	__ОбщегоНазначенияСервер.УстановитьНастройкиПользователеля(Отказ, Неопределено, Настройки);
	
КонецПроцедуры // УстановитьПараметрыРасчетаСостоянияЗаказовПокупателей()
