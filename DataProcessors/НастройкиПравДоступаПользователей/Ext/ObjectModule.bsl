
# Если Клиент Тогда

// Процедура считывает настройки прав доступа данного объекта.
//
Процедура ДеревоПравДоступаПрочитать(Ссылка, ОписаниеТипов, Элемент, Принудительно = Ложь) Экспорт
	
	// Проверка заполнялись ли уже данные.
	Если Не(ЗначениеЗаполнено(Принудительно) И Принудительно) И (Не ДеревоПравДоступа.Строки.Количество() = 0) И (ВладелецПравДоступа = Ссылка) И (ДопустимыеТипыДоступа = ОписаниеТипов) Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПравДоступа = Ссылка;
	ДопустимыеТипыДоступа = ОписаниеТипов;
	
	// Очистка дерева.
	ДеревоПравДоступа.Строки.Очистить();
	
	// Добавление колонок.
	Если (ДеревоПравДоступа.Колонки.Найти("Актуальность") = Неопределено) Тогда
		ДеревоПравДоступа.Колонки.Добавить("Актуальность", Новый ОписаниеТипов("Булево"), "Объекты");
	КонецЕсли;
	
	// Перенос и настройка колонок.
	Элемент.СоздатьКолонки();
	Элемент.Колонки.Актуальность.ДанныеФлажка = Элемент.Колонки.Актуальность.Данные;
	Элемент.Колонки.Актуальность.Данные = Неопределено;
	Элемент.Колонки.Актуальность.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	Элемент.Колонки.Актуальность.Ширина = 10;
	
	
	// Добавление служебных колонок.
	Если (ДеревоПравДоступа.Колонки.Найти("Наименование") = Неопределено) Тогда
		ДеревоПравДоступа.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если (ДеревоПравДоступа.Колонки.Найти("ОбъектДоступа") = Неопределено) Тогда
		ДеревоПравДоступа.Колонки.Добавить("ОбъектДоступа");
	КонецЕсли;
	Если (ДеревоПравДоступа.Колонки.Найти("ЭтоТип") = Неопределено) Тогда
		ДеревоПравДоступа.Колонки.Добавить("ЭтоТип");
	КонецЕсли;
	Если (ДеревоПравДоступа.Колонки.Найти("ЭтоВладелец") = Неопределено) Тогда
		ДеревоПравДоступа.Колонки.Добавить("ЭтоВладелец");
	КонецЕсли;
	Если (ДеревоПравДоступа.Колонки.Найти("ЭтоГруппа") = Неопределено) Тогда
		ДеревоПравДоступа.Колонки.Добавить("ЭтоГруппа");
	КонецЕсли;
	
	
	// Выборка данных из регистра.
	Если ВладелецПравДоступа.Пустая() Тогда
		ТаблицаРезультатаЗапроса = Новый ТаблицаЗначений();
		ТаблицаРезультатаЗапроса.Колонки.Добавить("ОбъектДоступа");
	Иначе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОбъектДоступа,
			|	Актуальность
			|ИЗ
			|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
			|ГДЕ
			|	НастройкиПравДоступаПользователей.ВладелецПравДоступа = &ВладелецПравДоступа
			|");
		Запрос.УстановитьПараметр("ВладелецПравДоступа", ВладелецПравДоступа);
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	
	// Заполнение данных.
	Для Каждого ДопустимыйТипы Из ДопустимыеТипыДоступа.Типы() Цикл
		// -- Тип значения строкой.
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ДопустимыйТипы);
		Если Не Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		// -- Добавление в дерево типа.
		КорневаяСтрокаТипа = ДеревоПравДоступа.Строки.Добавить();
		КорневаяСтрокаТипа.Наименование = ОбъектМетаданных.Синоним;
		КорневаяСтрокаТипа.ОбъектДоступа = Справочники[ОбъектМетаданных.Имя].ПустаяСсылка();
		КорневаяСтрокаТипа.ЭтоТип = Истина;
		КорневаяСтрокаТипа.ЭтоВладелец = Ложь;
		КорневаяСтрокаТипа.ЭтоГруппа = Ложь;
		СтрокаТаблицыЗначений = ТаблицаРезультатаЗапроса.Найти(КорневаяСтрокаТипа.ОбъектДоступа, "ОбъектДоступа");
		КорневаяСтрокаТипа.Актуальность = (СтрокаТаблицыЗначений = Неопределено) Или СтрокаТаблицыЗначений.Актуальность;
		
		// -- Формирование запроса.
		Если (ОбъектМетаданных = Метаданные.Справочники.Меню) Тогда
			Наименование = "Номенклатура";
		Иначе
			Наименование = "Наименование";
		КонецЕсли;
		Если (ОбъектМетаданных.Владельцы.Количество() = 0) Тогда
			Если (ОбъектМетаданных.Иерархический) Тогда
				Если (ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов) Тогда
					ТекстЗапроса = "ВЫБРАТЬ ЛОЖЬ КАК ЭтоГруппа, Справочник.Ссылка, Справочник." + Наименование + " КАК Наименование, Справочник.Родитель ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник УПОРЯДОЧИТЬ ПО Ссылка ИЕРАРХИЯ, Наименование";
				Иначе
					ТекстЗапроса = "ВЫБРАТЬ Справочник.ЭтоГруппа, Справочник.Ссылка, Справочник." + Наименование + " КАК Наименование, Справочник.Родитель ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник УПОРЯДОЧИТЬ ПО ЭтоГруппа ИЕРАРХИЯ, Наименование";
				КонецЕсли;
			Иначе
				ТекстЗапроса = "ВЫБРАТЬ Справочник.Ссылка, Справочник." + Наименование + " КАК Наименование ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник УПОРЯДОЧИТЬ ПО Наименование";
			КонецЕсли;
		Иначе
			Если (ОбъектМетаданных.Иерархический) Тогда
				Если (ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов) Тогда
					ТекстЗапроса = "ВЫБРАТЬ ЛОЖЬ КАК ЭтоГруппа, Справочник.Ссылка, Справочник." + Наименование + " КАК Наименование, Справочник.Родитель, Справочник.Владелец ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник УПОРЯДОЧИТЬ ПО Владелец.Представление, Ссылка ИЕРАРХИЯ, Наименование";
				Иначе
					ТекстЗапроса = "ВЫБРАТЬ Справочник.ЭтоГруппа, Справочник.Ссылка, Справочник." + Наименование + " КАК Наименование, Справочник.Родитель, Справочник.Владелец ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник УПОРЯДОЧИТЬ ПО Владелец.Представление, ЭтоГруппа ИЕРАРХИЯ, Наименование";
				КонецЕсли;
			Иначе
				ТекстЗапроса = "ВЫБРАТЬ Справочник.Ссылка, Справочник." + Наименование + " КАК Наименование, Справочник.Владелец ИЗ Справочник." + ОбъектМетаданных.Имя + " КАК Справочник УПОРЯДОЧИТЬ ПО Владелец.Представление, Наименование";
			КонецЕсли;
		КонецЕсли;
	
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		// ---- Обход запроса.
		Выборка = РезультатЗапроса.Выбрать();
		Если (ОбъектМетаданных.Иерархический) Тогда
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Родитель.Пустая() Тогда
					СтрокаГруппы = КорневаяСтрокаТипа;
					// ------ Владелец.
					Если (Не ОбъектМетаданных.Владельцы.Количество() = 0) Тогда
						СтрокаГруппы = СтрокаГруппы.Строки.Найти(Выборка.Владелец, "ОбъектДоступа", Истина);
						Если (СтрокаГруппы = Неопределено) Тогда
							СтрокаЭлемент = КорневаяСтрокаТипа.Строки.Добавить();
							СтрокаЭлемент.Наименование = Строка(Выборка.Владелец);
							СтрокаЭлемент.ОбъектДоступа = Выборка.Владелец;
							СтрокаЭлемент.ЭтоТип = Ложь;
							СтрокаЭлемент.ЭтоВладелец = Истина;
							СтрокаЭлемент.ЭтоГруппа = Ложь;
							СтрокаЭлемент.Актуальность = Истина;
							СтрокаГруппы = СтрокаЭлемент;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтрокаГруппы = ДеревоПравДоступа.Строки.Найти(Выборка.Родитель, "ОбъектДоступа", Истина);
				КонецЕсли;		
				
				// ---- Добавление в дерево элемента.
				СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
				СтрокаЭлемент.Наименование = Выборка.Наименование;
				СтрокаЭлемент.ОбъектДоступа = Выборка.Ссылка;
				СтрокаЭлемент.ЭтоТип = Ложь;
				СтрокаЭлемент.ЭтоВладелец = Ложь;
				СтрокаЭлемент.ЭтоГруппа = Выборка.ЭтоГруппа;
				СтрокаТаблицыЗначений = ТаблицаРезультатаЗапроса.Найти(СтрокаЭлемент.ОбъектДоступа, "ОбъектДоступа");
				СтрокаЭлемент.Актуальность = (СтрокаТаблицыЗначений = Неопределено) Или СтрокаТаблицыЗначений.Актуальность;
			КонецЦикла;
			
		Иначе
			
			Пока Выборка.Следующий() Цикл
				СтрокаГруппы = КорневаяСтрокаТипа;
				// ------ Владелец.
				Если (Не ОбъектМетаданных.Владельцы.Количество() = 0) Тогда
					СтрокаГруппы = СтрокаГруппы.Строки.Найти(Выборка.Владелец, "ОбъектДоступа", Истина);
					Если (СтрокаГруппы = Неопределено) Тогда
						СтрокаЭлемент = КорневаяСтрокаТипа.Строки.Добавить();
						СтрокаЭлемент.Наименование = Строка(Выборка.Владелец);
						СтрокаЭлемент.ОбъектДоступа = Выборка.Владелец;
						СтрокаЭлемент.ЭтоТип = Ложь;
						СтрокаЭлемент.ЭтоВладелец = Истина;
						СтрокаЭлемент.ЭтоГруппа = Ложь;
						СтрокаЭлемент.Актуальность = Истина;
						СтрокаГруппы = СтрокаЭлемент;
					КонецЕсли;
				КонецЕсли;
					
				// ---- Добавление в дерево элемента.
				СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
				СтрокаЭлемент.Наименование = Выборка.Наименование;
				СтрокаЭлемент.ОбъектДоступа = Выборка.Ссылка;
				СтрокаЭлемент.ЭтоТип = Ложь;
				СтрокаЭлемент.ЭтоВладелец = Ложь;
				СтрокаЭлемент.ЭтоГруппа = Ложь;
				СтрокаТаблицыЗначений = ТаблицаРезультатаЗапроса.Найти(СтрокаЭлемент.ОбъектДоступа, "ОбъектДоступа");
				СтрокаЭлемент.Актуальность = (СтрокаТаблицыЗначений = Неопределено) Или СтрокаТаблицыЗначений.Актуальность;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ДеревоПравДоступаПрочитать()

// Процедура при необходимости изменяет настройки прав доступа объекта.
//
Процедура ДеревоПравДоступаЗаписать(Ссылка, Отказ, Удалить = Ложь) Экспорт
	
	// Запись уже была прервана, продолжение не имеет смысла.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПравДоступа = Ссылка;
	
	// Нормализация.
	Удалить = (Не Удалить = Неопределено) И Удалить;
	
	// Запись набора записей.
	НаборЗаписей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВладелецПравДоступа.Использование = Истина;
	НаборЗаписей.Отбор.ВладелецПравДоступа.Значение = ВладелецПравДоступа;
	
	// Нисходящий обход дерева.
	СписокПодчиненных = Новый СписокЗначений();
	СписокПодчиненных.Добавить(ДеревоПравДоступа);

	Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
		СтрокаВладелец = СтрокаВладелец.Значение;	// Наепка - друг чекиста ;)
		
		Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
			Если (Удалить) Тогда
				СтрокаВладельца.Актуальность = Истина;
			Иначе
				// -- Добавление данных в набор записей.
				Если (Не СтрокаВладельца.ЭтоВладелец) И (Не СтрокаВладельца.Актуальность) Тогда
					Запись = НаборЗаписей.Добавить();
					Запись.ОбъектДоступа = СтрокаВладельца.ОбъектДоступа;
					Запись.ВладелецПравДоступа = ВладелецПравДоступа;
					Запись.Актуальность = СтрокаВладельца.Актуальность;
				КонецЕсли;
			КонецЕсли;
					
			Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
				СписокПодчиненных.Добавить(СтрокаВладельца);
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;

	// Запись набора записей.
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, ,, НаборЗаписей, ВладелецПравДоступа);
	КонецПопытки;
	
КонецПроцедуры // ДеревоПравДоступаЗаписать()

// Обработчик события ДеревоПравДоступа.ПриВыводеСтроки элемента.
//
Процедура ДеревоПравДоступаВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Актуальность.
	Если Элемент.Колонки.Актуальность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Актуальность.ОтображатьКартинку = Истина;
		Если ДанныеСтроки.ЭтоТип Тогда
			ОформлениеСтроки.Ячейки.Актуальность.Картинка = БиблиотекаКартинок.СправочникОбъект;
			ОформлениеСтроки.Ячейки.Актуальность.ОтображатьФлажок = Ложь;
			ОформлениеСтроки.Ячейки.Актуальность.ТолькоПросмотр = Истина;
		ИначеЕсли ДанныеСтроки.ЭтоВладелец Тогда
			ОформлениеСтроки.Ячейки.Актуальность.Картинка = БиблиотекаКартинок.ВладелецСправочника;
			ОформлениеСтроки.Ячейки.Актуальность.ТолькоПросмотр = Истина;
		ИначеЕсли ДанныеСтроки.ЭтоГруппа Тогда
			ОформлениеСтроки.Ячейки.Актуальность.Картинка = БиблиотекаКартинок.ГруппаСправочника;
		Иначе
			ОформлениеСтроки.Ячейки.Актуальность.Картинка = БиблиотекаКартинок.ЭлементСправочника;
		КонецЕсли;
		ОформлениеСтроки.Ячейки.Актуальность.УстановитьТекст(ДанныеСтроки.Наименование);
	КонецЕсли;
	
КонецПроцедуры // ДеревоПравДоступаВывестиСтроку()

// Обработчик события ДеревоПравДоступа.ПриИзмененииФлажка элемента.
//
Процедура ДеревоПравДоступаИзменитьФлажок(Элемент, Колонка) Экспорт
	
	СтрокаДерева = Элемент.ТекущаяСтрока;
	
	// Изменение подчиненных.
	Если (Не СтрокаДерева.Строки.Количество() = 0) Тогда
		// -- Нисходящий обход дерева.
		СписокПодчиненных = Новый СписокЗначений();
		СписокПодчиненных.Добавить(СтрокаДерева);
	
		Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
			СтрокаВладелец = СтрокаВладелец.Значение;	// Наепка - друг чекиста ;)
			
			Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
				СтрокаВладельца.Актуальность = СтрокаДерева.Актуальность;
						
				Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
					СписокПодчиненных.Добавить(СтрокаВладельца);
				КонецЕсли;
			КонецЦикла;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДеревоПравДоступаИзменитьФлажок()

#КонецЕсли
