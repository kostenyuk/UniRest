
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда
		ОтражатьВБухгалтерскомУчете = Неопределено;
		ОтражатьВНалоговомУчете = Неопределено;
		ОтражатьВУправленческомУчете = Неопределено;
		ИспользоватьВРеализацияТоваровУслуг = Неопределено;
		ИспользоватьВСписаниеТоваров = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЭтоГруппа Тогда
		ОтражатьВБухгалтерскомУчете = Неопределено;
		ОтражатьВНалоговомУчете = Неопределено;
		ОтражатьВУправленческомУчете = Неопределено;
		ИспользоватьВРеализацияТоваровУслуг = Неопределено;
		ИспользоватьВСписаниеТоваров = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ)

	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Нормализация.
	Если Не ЭтоГруппа Тогда
		
		Если (Не ОтражатьВУправленческомУчете) И (Не ОтражатьВБухгалтерскомУчете) Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьУправленческийУчет") Тогда
				ОтражатьВУправленческомУчете = Истина;
			Иначе
				ОтражатьВБухгалтерскомУчете = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Костенюк Александр-Закомментировано 03.12.2012 ТипОплаты = __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(ТипОплаты, Перечисления.ТипыОплатЧекаККМ.Наличные);
		
		Если (Не ИспользоватьВРеализацияТоваровУслуг) И (Не ИспользоватьВСписаниеТоваров) Тогда
			ИспользоватьВРеализацияТоваровУслуг = Истина;
			ИспользоватьВСписаниеТоваров = Истина;
		КонецЕсли;
		
		//Костенюк Александр-Старт 05.12.2012
		// Кредиты не могут быть отражены в бух учете, т.е. на первую форму оплаты
		Если ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПустаяСсылка() Тогда
			Если ОтражатьВБухгалтерскомУчете Тогда
				Сообщить("Кредит не может быть отражен в бух. учете", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		//Костенюк Александр-Финиш 05.12.2012
		
	КонецЕсли;
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;
	
	// Оригинал.
	__ОбщегоНазначенияСервер.Оригинал(ЭтотОбъект);

КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)

	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Родители.
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыОплатЧекаККМ.Ссылка КАК Ссылка,
	                      |	ЕСТЬNULL(Реквизиты.ИспользоватьВРеализацияТоваровУслуг, ЛОЖЬ) КАК ИспользоватьВРеализацияТоваровУслуг,
	                      |	ЕСТЬNULL(Реквизиты.ИспользоватьВСписаниеТоваров, ЛОЖЬ) КАК ИспользоватьВСписаниеТоваров,
	                      |	ЕСТЬNULL(Реквизиты.ОтражатьВУправленческомУчете, ЛОЖЬ) КАК ОтражатьВУправленческомУчете,
	                      |	ЕСТЬNULL(Реквизиты.ОтражатьВБухгалтерскомУчете, ЛОЖЬ) КАК ОтражатьВБухгалтерскомУчете
	                      |ИЗ
	                      |	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			ВидыОплатЧекаККМ.Родитель КАК Родитель,
	                      |			МАКСИМУМ(ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг) КАК ИспользоватьВРеализацияТоваровУслуг,
	                      |			МАКСИМУМ(ВидыОплатЧекаККМ.ИспользоватьВСписаниеТоваров) КАК ИспользоватьВСписаниеТоваров,
	                      |			МАКСИМУМ(ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете) КАК ОтражатьВУправленческомУчете,
	                      |			МАКСИМУМ(ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете) КАК ОтражатьВБухгалтерскомУчете
	                      |		ИЗ
	                      |			Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	                      |		ГДЕ
	                      |			ВидыОплатЧекаККМ.Родитель = &РодительТеукущий
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			ВидыОплатЧекаККМ.Родитель
	                      |		
	                      |		ОБЪЕДИНИТЬ ВСЕ
	                      |		
	                      |		ВЫБРАТЬ
	                      |			ВидыОплатЧекаККМ.Родитель,
	                      |			МАКСИМУМ(ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг),
	                      |			МАКСИМУМ(ВидыОплатЧекаККМ.ИспользоватьВСписаниеТоваров),
	                      |			МАКСИМУМ(ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете),
	                      |			МАКСИМУМ(ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете)
	                      |		ИЗ
	                      |			Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	                      |		ГДЕ
	                      |			ВидыОплатЧекаККМ.Родитель = &РодительОригинал
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			ВидыОплатЧекаККМ.Родитель) КАК Реквизиты
	                      |		ПО (Реквизиты.Родитель = ВидыОплатЧекаККМ.Ссылка)
	                      |ГДЕ
	                      |	(ВидыОплатЧекаККМ.Ссылка = &РодительТеукущий
	                      |			ИЛИ ВидыОплатЧекаККМ.Ссылка = &РодительОригинал)
	                      |	И (ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг <> ЕСТЬNULL(Реквизиты.ИспользоватьВРеализацияТоваровУслуг, ЛОЖЬ)
	                      |			ИЛИ ВидыОплатЧекаККМ.ИспользоватьВСписаниеТоваров <> ЕСТЬNULL(Реквизиты.ИспользоватьВСписаниеТоваров, ЛОЖЬ)
	                      |			ИЛИ ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете <> ЕСТЬNULL(Реквизиты.ОтражатьВУправленческомУчете, ЛОЖЬ)
	                      |			ИЛИ ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете <> ЕСТЬNULL(Реквизиты.ОтражатьВБухгалтерскомУчете, ЛОЖЬ))");
	Запрос.УстановитьПараметр("РодительТеукущий", Родитель);
	Если (__ОбщегоНазначенияСервер.Оригинал(ЭтотОбъект).Родитель = Родитель) Тогда
		Запрос.УстановитьПараметр("РодительОригинал", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("РодительОригинал", __ОбщегоНазначенияСервер.Оригинал(ЭтотОбъект).Родитель);
	КонецЕсли; 
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		РодительОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(РодительОбъект, Выборка);
		Попытка
			РодительОбъект.Записать();
		Исключение
			Отказ = Истина; // TODO
			Прервать;
		КонецПопытки;
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПриЗаписи()
