
#Если Клиент Тогда

Перем мКешМеню,мКешПользователь;
Перем мТипТипа, мТипЧисла, мТипСтроки, мТипТаблицыЗначений;
Перем мВыводитьКартинкиПутиМеню, мВыводитьКартинкиГруппМеню, мВыводитьКартинкиЭлементовМеню, мВыводитьЦеныМеню, мКомпактноеПредставлениеМеню, мРазмерЭлементовМеню;
Перем мТабличноеПолеВнешнихДанных;


Процедура Инициализация() Экспорт
	
	// Проверка режима.
	Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Создание формы.
	Если (Форма = Неопределено) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
	
КонецПроцедуры // Инициализация()

Функция ПолучитьПредставлениеНоменклатуры(Номенклатура, Код = Неопределено) Экспорт
	
	НоменклатураОбъект = ПолучитьСерверFrontOffice().ПолучитьОбъект(Номенклатура, "НоменклатураМеню");
	
	Код = НоменклатураОбъект.Код;
	
	Возврат НоменклатураОбъект.Наименование;
	
КонецФункции // ПолучитьПредставлениеНоменклатуры()

Функция ВыборВидаОперации(Значение = Неопределено) Экспорт
	
	// Список видов операций
	ВидОперацииВыдача = Перечисления.ВидыОперацийОтчетПроизводстваЗаСмену.Выдача;
	ВидОперацииВозврат = Перечисления.ВидыОперацийОтчетПроизводстваЗаСмену.Возврат;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ВидОперацииВыдача, Строка(ВидОперацииВыдача));
	СписокЗначений.Добавить(ВидОперацииВозврат, Строка(ВидОперацииВозврат));
	
	СтрокаСписка = СписокЗначений.НайтиПоЗначению(Значение);
		
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзСпискаЗначений(СтрокаСписка, НСтр("ru='Выберите вид операции';uk='Виберіть вид операції'"), СписокЗначений, "Представление") Тогда
		Значение = СтрокаСписка.Значение;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборРесторана(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяРестораны ГДЕ Актуальность И (НЕ ПометкаУдаления)");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ТаблицыЗначений = Запрос.Выполнить().Выгрузить();
	СтрокаТаблицы = ТаблицыЗначений.Найти(Значение, "Ссылка");
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите ресторан';uk='Виберіть ресторан'") , ТаблицыЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаТаблицы.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	ТаблицыЗначений = Неопределено;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборРесторанаДляОдногоАктивного(Значение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|*,
	|	Рестораны.Представление КАК Наименование
	|ИЗ
	|	Справочник.Рестораны КАК Рестораны
	|ГДЕ
	|	(НЕ Рестораны.ПометкаУдаления)
	|	И Рестораны.Актуальность";
	Если не Запрос.Выполнить().Пустой() тогда
		ТаблицыЗначений = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицыЗначений.Количество() = 1  Тогда
			Значение=ТаблицыЗначений[0].ССылка;
			ТаблицыЗначений = Неопределено;
			Возврат Истина;
		иначе
			СтрокаТаблицы = ТаблицыЗначений.Найти(Значение, "Ссылка");
			Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите ресторан';uk='Виберіть ресторан'") , ТаблицыЗначений, "Картинка,Наименование") Тогда
				Значение = СтрокаТаблицы.Ссылка;
				ТаблицыЗначений = Неопределено;
				Возврат Истина;
			иначе
				ТаблицыЗначений = Неопределено;
				Возврат ложь;
				FrontOffice.СообщитьОбОшибке(НСтр("ru='Ресторан не выбран.';uk='Ресторан не вибраний.'"));   
			конецЕсли;
		КонецЕсли;                                                          
	Иначе
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Нет актуальных ресторанов!';uk='Немає актуальних ресторанів!'"));
		Возврат ложь;
	КонецЕсли;
	
КонецФункции

Функция ВыборСотрудника(Значение = Неопределено, ДокументОбъект = Неопределено) Экспорт
	
	// Вывод только тех сотрудников, которые в данный момент на смене
	Если ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ВыводитьСотрудниковНаСменеПриИзмененииСотрудника") Тогда
		Документ = Неопределено;
		ПолучитьСерверFrontOffice().МенеджерУчетаРабочегоВремени.НайтиДокументУчетаРабочегоВремени(Документ);
		// -- Актуальность.
		ТаблицаАктуальных = Новый ТаблицаЗначений;
		ТаблицаАктуальных.Колонки.Добавить("Ссылка", Метаданные.Документы.ТабельУчетаРабочегоВремениОрганизации.ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.Сотрудник.Тип);
		Для Каждого СтрокаТабличнойЧасти Из Документ.ОтработанноеВремяВЦеломЗаПериод Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаАктуальных.Добавить();
			СтрокаТаблицы.Ссылка = СтрокаТабличнойЧасти.Сотрудник;
		КонецЦикла;
		СтрокаТаблицы = ТаблицаАктуальных.Найти(Значение, "Ссылка");
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ТаблицаАктуальных, "Ссылка") Тогда
			Значение = СтрокаТаблицы.Ссылка;
			ТаблицаАктуальных = Неопределено;
			Возврат Истина;
		КонецЕсли;
	Иначе
		// Вывод всех сотрудников
		// Данные.
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяСотрудникиОрганизаций ГДЕ НЕ ПометкаУдаления");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
		СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ДеревоЗначений, "Картинка,Наименование") Тогда
			Значение = СтрокаДерева.Ссылка;
			ДеревоЗначений = Неопределено;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаАктуальных 	= Неопределено;
	ДеревоЗначений 		= Неопределено;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыборПозицийИзМеню(Владелец = Неопределено ,Ресторан = Неопределено) Экспорт
	
	// Открываем форму.
	Если Владелец <> Неопределено Тогда
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаМеню" , Владелец );
		ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
		
	Иначе
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаМеню");
	КонецЕсли;
	
	Если Ресторан <> Неопределено Тогда                      
		ФормаВыбора.ресторан = Ресторан;
	КонецЕсли;
	
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Активизировать();
	Иначе 
		ФормаВыбора.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры 

Процедура ВыборЧерногоСписка(Владелец = Неопределено, Ресторан = Неопределено) Экспорт
	
	// Открываем форму.  
	Если Владелец <> Неопределено Тогда
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаЧерногоСписка" , Владелец );
		ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
	Иначе
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаЧерногоСписка");
	КонецЕсли;
	
	Если Ресторан <> Неопределено Тогда
		ФормаВыбора.ресторан = Ресторан;
	КонецЕсли;		
	
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Активизировать();
	Иначе 
		ФормаВыбора.ОткрытьМодально();
	КонецЕсли;                                     
	
КонецПроцедуры 

Процедура ВыборБелогоСписка(Владелец = Неопределено, Ресторан = Неопределено) Экспорт
	
	// Открываем форму.
	Если Владелец <> Неопределено Тогда
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаБелогоСписка" , Владелец );
		ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
	Иначе
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаБелогоСписка");
	КонецЕсли;
	
	Если Ресторан <> Неопределено Тогда
		ФормаВыбора.ресторан = Ресторан;
	КонецЕсли;	
	
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Активизировать();
	Иначе 
		ФормаВыбора.ОткрытьМодально();
	КонецЕсли;                                     
	
КонецПроцедуры 

Функция ВыборМеню(Значение = Неопределено) Экспорт	
	
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВыбораМеню");	
	ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("ТаблицаЗначений")) Тогда
		Значение = ПараметрЗакрытия;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

Функция ВыборСклада(Значение) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяСклады ГДЕ НЕ ПометкаУдаления");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
	СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите склад';uk='Виберіть склад'") , ДеревоЗначений, "Наименование") Тогда
		Значение = СтрокаДерева.Ссылка;
		ДеревоЗначений = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
	ДеревоЗначений = Неопределено;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПоискКомментарияНоменклатурыПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	
	ТабличноеПоле.Шапка = Ложь;
	
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ПоискКомментарияНоменклатурыПриИзмененииДанных()

Процедура ПоискКомментарияНоменклатурыПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// Данные.
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 25
		|	КомментарииНоменклатуры.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.КомментарииНоменклатуры КАК КомментарииНоменклатуры
		|ГДЕ
		|	КомментарииНоменклатуры.Комментарий ПОДОБНО &Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Комментарий";
		Запрос.УстановитьПараметр("Комментарий", "%" + Значение + "%"); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы				= Данные.Добавить();	
			СтрокаТаблицы.Комментарий	= Выборка.Комментарий;
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ПоискКомментарияНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки("Комментарий").УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
	
КонецПроцедуры

Функция ВводКоличестваТовара(Значение = Неопределено, Номенклатура, Мин = Неопределено, Макс = Неопределено) Экспорт
	
	// Нормализация.
	Если (Значение = Неопределено) Тогда
		Значение = Число(Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) и Номенклатура.Штучный Тогда
		РазрядностьДробнойЧасти = 0;
	Иначе
		РазрядностьДробнойЧасти = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	КонецЕсли;
	
	// Ввод.
	Возврат FrontOffice.ВводЧисла(Значение, НСтр("ru='Введите количество';uk='Введіть кількість'") , Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность, РазрядностьДробнойЧасти, Мин, Макс);
	
КонецФункции // ВводКоличестваТовара()

// Процедура заполнения табличного поля ресторанов.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаРесторановПрочитать(Документ, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		
		// -- Дополнительные колонки.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПроизводственныеГруппы.Ссылка,
		               |	ПроизводственныеГруппы.Представление
		               |ИЗ
		               |	ВременнаяПроизводственныеГруппы КАК ПроизводственныеГруппы
		               |ГДЕ
		               |	ПроизводственныеГруппы.Актуальность";
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ТаблицаДополнительныхКолонок = Запрос.Выполнить().Выгрузить();
		СоответсвиеДополнительныхКолонок = Новый Соответствие;
		
		Данные = Новый ТаблицаЗначений;
		
		Данные.Колонки.Добавить("Ресторан", Новый ОписаниеТипов("СправочникСсылка.Рестораны"));
		Данные.Колонки.Добавить("РесторанПредставление", Новый ОписаниеТипов("Строка"), "Ресторан");
		Если Булево(ТаблицаДополнительныхКолонок.Количество()) Тогда
			ДополнительныеКолонки = Строка(Неопределено);
			Для Каждого СтрокаТаблицыДополнительныхКолонок Из ТаблицаДополнительныхКолонок Цикл
				ДополнительнаяКолонка = "Колонка" + Строка(ТаблицаДополнительныхКолонок.Индекс(СтрокаТаблицыДополнительныхКолонок));
				СоответсвиеДополнительныхКолонок.Вставить(СтрокаТаблицыДополнительныхКолонок.Ссылка, ДополнительнаяКолонка);
				Данные.Колонки.Добавить(ДополнительнаяКолонка, Новый ОписаниеТипов("Строка,Дата"), СтрокаТаблицыДополнительныхКолонок.Представление);
				ДополнительныеКолонки = ДополнительныеКолонки + "," + ДополнительнаяКолонка;
			КонецЦикла
		КонецЕсли;
		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("Картинка,РесторанПредставление" + ДополнительныеКолонки);
		ТабличноеПоле.Колонки.Получить("РесторанПредставление").Ширина = 400 * 0.50;
		Для Каждого ДополнительнаяКолонка Из СоответсвиеДополнительныхКолонок Цикл
			ДополнительнаяКолонка = ДополнительнаяКолонка.Значение; // Наепка :)
			ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).Ширина = 50;
			ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).Формат = "ДФ=HH:mm";
			ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		КонецЦикла;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		ТабличноеПоле.Тег = СоответсвиеДополнительныхКолонок;
		
		Возврат;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	Если (Документ = Неопределено) тогда
		Возврат;
	КонецЕсли;
	
	// -- Текущая позиция (I).
	ТекущийРесторан = Документ.Ресторан;
	
	// Выборка данных.
	РесторанДокумента = Новый ТаблицаЗначений;
	РесторанДокумента.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Рестораны"));
	РесторанДокумента.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Метаданные.Справочники.Рестораны.ДлинаНаименования)));
	Если ЗначениеЗаполнено(Документ.Ресторан) Тогда
		СтрокаТаблицы = РесторанДокумента.Добавить(); СтрокаТаблицы.Ссылка = Документ.Ресторан; СтрокаТаблицы.Представление = ПолучитьСерверFrontOffice().ПолучитьПредставление(Документ.Ресторан);
	КонецЕсли;
	
	Закреплен = Документ.Распечатан Или (Документ.Закреплен И (Не ДокументДоступностьДействия(Документ, "ИгнорироватьЗакрепленностьПриИзмененииРесторана")));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Рестораны.Ссылка,
	               |	Рестораны.Представление
	               |ПОМЕСТИТЬ ВременнаяРесторанДокумента
	               |ИЗ
	               |	&РесторанДокумента КАК Рестораны
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВложенныйЗапрос.Ресторан,
	               |	ВложенныйЗапрос.РесторанПредставление КАК РесторанПредставление,
	               |	ВложенныйЗапрос.ПроизводственнаяГруппа КАК ПроизводственнаяГруппа,
	               |	НастройкиПроизводства.ПродолжительностьВыполнения КАК ПродолжительностьВыполнения
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Рестораны.Ресторан КАК Ресторан,
	               |		Рестораны.РесторанПредставление КАК РесторанПредставление,
	               |		ПроизводственныеГруппы.Ссылка КАК ПроизводственнаяГруппа
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Рестораны.Ссылка КАК Ресторан,
	               |			Рестораны.Представление КАК РесторанПредставление
	               |		ИЗ
	               |			ВременнаяРесторанДокумента КАК Рестораны
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			Рестораны.Ссылка,
	               |			Рестораны.Представление
	               |		ИЗ
	               |			ВременнаяРестораны КАК Рестораны
	               |		ГДЕ
	               |			НЕ &Закреплен
	               |			И НЕ Рестораны.ПометкаУдаления
	               |			И Рестораны.Актуальность
	               |			И НЕ Рестораны.Ссылка = &Ресторан) КАК Рестораны,
	               |		ВременнаяПроизводственныеГруппы КАК ПроизводственныеГруппы
	               |	ГДЕ
	               |		ПроизводственныеГруппы.Актуальность) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПроизводства КАК НастройкиПроизводства
	               |		ПО ВложенныйЗапрос.Ресторан = НастройкиПроизводства.Ресторан
	               |			И ВложенныйЗапрос.ПроизводственнаяГруппа = НастройкиПроизводства.ПроизводственнаяГруппа
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РесторанПредставление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВременнаяРесторанДокумента";
	Запрос.УстановитьПараметр("РесторанДокумента", РесторанДокумента);
	Запрос.УстановитьПараметр("Ресторан", Документ.Ресторан);
	Запрос.УстановитьПараметр("Закреплен", Закреплен);
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Перенос данных в табличное поле.
	СоответсвиеДополнительныхКолонок = ТабличноеПоле.Тег;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДанных = Данные.Найти(Выборка.Ресторан, "Ресторан");
		Если (СтрокаДанных = Неопределено) Тогда
			СтрокаДанных = Данные.Добавить();
			СтрокаДанных.Ресторан = Выборка.Ресторан;
			СтрокаДанных.РесторанПредставление = Выборка.РесторанПредставление;
		КонецЕсли;
		
		ДополнительнаяКолонка = СоответсвиеДополнительныхКолонок.Получить(Выборка.ПроизводственнаяГруппа);
		Если (Не ДополнительнаяКолонка = Неопределено) Тогда
			СтрокаДанных[ДополнительнаяКолонка] = Выборка.ПродолжительностьВыполнения;
		КонецЕсли;
		
		// -- Текущая позиция (II).
		Если (СтрокаДанных.Ресторан = ТекущийРесторан) Тогда
			ТекущаяСтрока = СтрокаДанных;
		КонецЕсли;
	КонецЦикла;
	
	Данные.Сортировать("РесторанПредставление");
	
	// -- Текущая позиция (III).
	Если Закреплен Тогда
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	// Обновление.
	Если (Не ТабличноеПоле.ТекущаяСтрока() = ТекущаяСтрока) Тогда
		ТабличноеПоле.ТекущаяСтрока(ТекущаяСтрока);
	Иначе
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	
	РезультатЗапроса 	= Неопределено;
	Выборка 			= Неопределено;
	Данные 				= Неопределено;
	
КонецПроцедуры // ТаблицаРесторановПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля ресторанов.
//
Процедура ТаблицаРесторановВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	СоответсвиеДополнительныхКолонок = Элемент.Тег;
	
	// Оформление строки.
	ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("РесторанПредставление").ГиперСсылка = Истина;
	Для Каждого ДополнительнаяКолонка Из СоответсвиеДополнительныхКолонок Цикл
		ОформлениеСтроки.Ячейки(ДополнительнаяКолонка.Значение).ГиперСсылка = Истина;
	КонецЦикла;
	
	// Картинка.
	ОформлениеСтроки.Ячейки("Картинка").УстановитьКартинку(БиблиотекаКартинок.TouchИерархияЭлеменит);
	
КонецПроцедуры // ТаблицаРесторановВывестиСтроку()	

// Процедура заполнения табличного поля заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаПрочитать(Документ, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;
		
		Данные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)), "N");
		Для Каждого Реквизит Из Метаданные.Документы.ОтчетПроизводстваЗаСмену.ТабличныеЧасти.Товары.Реквизиты Цикл
			Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
		КонецЦикла;
		Данные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
		Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), Данные.Колонки.Номенклатура.Заголовок);
		Данные.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
		
		ТабличноеПоле.Данные(Данные);
		ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество");
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("НомерСтроки").Ширина = 400 * 0.05;
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("Количество").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("Количество").Формат = "ЧЦ=" + Метаданные.Документы.ОтчетПроизводстваЗаСмену.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.ОтчетПроизводстваЗаСмену.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	Если (Документ = Неопределено) тогда
		Возврат;
	КонецЕсли;
	
	Если (Документ = Документ.Ссылка) тогда
		Возврат;
	КонецЕсли;
	
	// Список реквизитов.
	// -- Товары.
	СписокРеквизитовТоваров = Новый СписокЗначений();
	Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
		Реквизит = Реквизит.Имя;
		Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
			СписокРеквизитовТоваров.Добавить(Реквизит);	
		КонецЕсли;
	КонецЦикла;
	
	// Выборка данных.
	// -- Товары.
	Для Каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
		
		СтрокаДанных = Данные.Добавить();
		
		СтрокаДанных.НомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
		Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
			Реквизит = Реквизит.Значение;
			СтрокаДанных[Реквизит] = СтрокаТабличнойЧасти[Реквизит];
		КонецЦикла;
		
		СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
		СтрокаДанных.Услуга = Ложь;
		
	КонецЦикла;
	
	// -- Сортировка.
	Данные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");
	
	
	// Обновление
	ТабличноеПоле.ОбновитьСтроки();
	
	Данные = Неопределено;
	
КонецПроцедуры // ТаблицаЗаказаПрочитать()

// Процедура актуализации табличного поля заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаЗаписать(Документ, ТабличноеПоле) Экспорт
	
	Данные = ТабличноеПоле.Данные();
	
	СписокРеквизитовТоваров = Новый СписокЗначений();
	Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
		Реквизит = Реквизит.Имя;
		Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
			СписокРеквизитовТоваров.Добавить(Реквизит);	
		КонецЕсли;
	КонецЦикла;
	
	// Перенос данных.
	Документ.Товары.Очистить();
	
	Для Каждого СтрокаДанных Из Данные Цикл
		
		// -- Товары.
		СтрокаТабличнойЧасти = Документ.Товары.Добавить();
		Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
			Реквизит = Реквизит.Значение;
			СтрокаТабличнойЧасти[Реквизит] = СтрокаДанных[Реквизит];
		КонецЦикла;
		
	КонецЦикла;
	
	Данные = Неопределено;
	
КонецПроцедуры // ТаблицаЗаказаЗаписать()

Функция ПолучитьУровненьПоВладельцу(Элемент, Знач Владелец)
	
	Уровень = 0;
	
	Данные	= Элемент.Данные();
	Пока Истина Цикл
		Строка = Данные.Найти(Владелец,"Идентификатор");
		Если Строка=Неопределено Тогда
			Возврат Уровень;
		КонецЕсли;
		Владелец	= Строка.Владелец;
		Уровень		= Уровень + 1;
	КонецЦикла;
	
	Возврат Уровень;
	
КонецФункции

// Процедура обработчик события ПриВыводеСтроки табличного поля заказ документа.
//
Процедура ТаблицаЗаказаВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	Если (ДанныеСтроки.Распечатан = Истина) Тогда
		ОформлениеСтроки.Ячейки("НомерСтроки").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("НоменклатураКод").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("НоменклатураПредставление").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("Количество").ЦветФона = WebЦвета.ВесеннеЗеленый;
	КонецЕсли;
	
	// НомерСтроки.
	ОформлениеСтроки.Ячейки("НомерСтроки").Текст = Строка(Элемент.Данные().Индекс(ДанныеСтроки) + 1);
	
	// НоменклатураКод.
	ОформлениеСтроки.Ячейки("НоменклатураКод").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.НоменклатураКод);
	
	НоменклатураПредставление = ОформлениеСтроки.Ячейки("НоменклатураПредставление");
	
	Уровень = ПолучитьУровненьПоВладельцу(Элемент,ДанныеСтроки.Владелец);
	Пока Уровень > 0 Цикл
		НоменклатураПредставление.Текст = "    " + НоменклатураПредставление.Текст;
		Уровень = Уровень - 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Комментарий) Тогда
		НоменклатураПредставление.Текст = НоменклатураПредставление.Текст + Символы.ПС + "    " + ДанныеСтроки.Комментарий;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЗаказаВывестиСтроку()

// Процедура добавления позиции в табличное поле заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаДобавитьПозицию(ТабличноеПоле, Номенклатура, Количество = Неопределено, Сворачивать = Истина, ДобавлениеЧерезМеню=Ложь, ТипНоменклатуры=Неопределено) Экспорт
	
	ЕстьСвязаные = Истина;
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	
	// Формирования набора значений.
	Если (Не ТипЗнч(Номенклатура) = мТипТаблицыЗначений) Тогда
		НаборПозиций = Новый Массив; 
		НаборПозиций.Добавить(Номенклатура);
	Иначе
		НаборПозиций = Номенклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура.Номенклатура.Связана) Тогда
		ЕстьСвязаные = Ложь;
		МассивПозицийСвязанных = Новый Массив;		
		
		Если Номенклатура.Номенклатура.Связана.ЭтоГруппа Тогда
			ПолучитьСвязаныеПозиции(Номенклатура.Номенклатура.Связана, МассивПозицийСвязанных);
		иначе
			МассивПозицийСвязанных.Добавить(Номенклатура.Номенклатура.Связана);
		КонецЕсли;		
		
		ин = 0;
		Пока ин <> МассивПозицийСвязанных.Количество()-1  Цикл
			Если Данные.Найти(МассивПозицийСвязанных[ин],"Номенклатура") <> Неопределено Тогда
				ЕстьСвязаные = Истина;
				Прервать;
			КонецЕсли;
			ин= ин + 1;	
		КонецЦикла; 		
		
	КонецЕсли;
	
	
	
	Если не ЕстьСвязаные Тогда	
		FrontOffice.ВывестиПредупреждение( НСтр("ru=""Для номенклатуры "+ Номенклатура.Номенклатура+" нет связной позиции!""; uk=""Для номенклатури "+ Номенклатура.Номенклатура+" немає зв'язної позиції!"""),,);
		Возврат;	
	КонецЕсли;
	
	НеОбъединятьОдинаковыетовары = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeНеОбъединятьОдинаковыетоварыПриДобавленииТовараЗаказа) И ДобавлениеЧерезМеню;
	
	Для Каждого Позиция Из НаборПозиций Цикл
		
		ТекущиеДанные = Неопределено;
		
		// Проверка совпадения с нераспечатанными позицциями.
		Если Сворачивать Тогда
			Для Каждого СтрокаДанных Из Данные Цикл
				Если (СтрокаДанных.Номенклатура = Позиция.Номенклатура)
					И (Не СтрокаДанных.Распечатан)
					И (Не ЗначениеЗаполнено(СтрокаДанных.Комментарий))
					И (Не НеОбъединятьОдинаковыетовары)
					И ТипНоменклатуры=Неопределено Тогда
					// Также поищем позиции, у которых есть модификатор, в этом случае надо добавить новую сторку
					СтруктураПоиска	= Новый Структура("Владелец",СтрокаДанных.Идентификатор);
					СтрокиНайденные	= Данные.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНайденные.Количество()=0 Тогда
						ТекущиеДанные = СтрокаДанных;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Проверки на модификаторы или условия
		Строка = ТабличноеПоле.ТекущаяСтрока();
		Если Строка<>Неопределено
			И ТипНоменклатуры<>Неопределено Тогда
			СтруктураПоиска	= Новый Структура("Владелец",Строка.Идентификатор);
			НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаНайденных Из НайденныеСтроки Цикл
				Если СтрокаНайденных.Номенклатура=Позиция.Номенклатура Тогда
					// Модификаторы нельзя добавлять
					Возврат;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		// Действие.
		Если (ТекущиеДанные = Неопределено) Тогда
			
			ЕдиницаИзмерения			= Позиция.ЕдиницаИзмерения;
			Цена						= Позиция.Цена; 
			ПлановаяСебестоимость		= Позиция.ПлановаяСебестоимость; 
			СтавкаНДС					= Позиция.СтавкаНДС; 
			НоменклатурнаяГруппа		= Позиция.НоменклатурнаяГруппа; 
			Организация					= Позиция.Организация; 
			
			Для Каждого СтрокаДанных Из Данные Цикл
				
				Если (СтрокаДанных.Номенклатура = Позиция.Номенклатура) Тогда
					
					ЕдиницаИзмерения	= СтрокаДанных.ЕдиницаИзмерения;
					Цена				= СтрокаДанных.Цена;
					ПлановаяСебестоимость	= СтрокаДанных.ПлановаяСебестоимость;
					СтавкаНДС			= СтрокаДанных.СтавкаНДС;
					НоменклатурнаяГруппа	= СтрокаДанных.НоменклатурнаяГруппа;
					Организация			= СтрокаДанных.Организация;
					Услуга				= СтрокаДанных.Услуга;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Надо добавить модификатор и условие
			// под соответствующей номенклатурой
			Если ТипНоменклатуры<>Неопределено Тогда
				
				Если (ТабличноеПоле.ТекущиеДанные() = Неопределено)
					ИЛИ ТабличноеПоле.ТекущиеДанные().Распечатан Тогда
					Возврат;
				Иначе
					ОригинальнаяСтрока			= ТабличноеПоле.ТекущиеДанные();
					ТекущиеДанные				= Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные())+1);
					ТекущиеДанные.Владелец		= ОригинальнаяСтрока.Идентификатор;
					ТекущиеДанные.ВидНоменклатуры = ТипНоменклатуры;
					// Количество должно совпадать с количеством родителя
					ТекущиеДанные.Количество	= ОригинальнаяСтрока.Количество;
				КонецЕсли;
				
			Иначе
				
				// Позиции добавляем всегда в конец
				ТекущиеДанные					= Данные.Добавить();
				ТекущиеДанные.ВидНоменклатуры	= Перечисления.ТипыСтрокЗаказов.Товар;
				
				Если (ТипЗнч(Номенклатура)<>мТипТаблицыЗначений) Тогда
					ТекущиеДанные.Количество	= Количество;
				Иначе
					ТекущиеДанные.Количество	= Позиция.Количество;
				КонецЕсли;
				
			КонецЕсли; 
			
			ТекущиеДанные.Идентификатор			= Новый УникальныйИдентификатор;
			ТекущиеДанные.Номенклатура			= Позиция.Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения		= ЕдиницаИзмерения;
			ТекущиеДанные.СтавкаНДС				= СтавкаНДС;
			ТекущиеДанные.Цена					= Цена;
			ТекущиеДанные.ПлановаяСебестоимость = ПлановаяСебестоимость;
			ТекущиеДанные.НоменклатурнаяГруппа	= НоменклатурнаяГруппа;
			ТекущиеДанные.Организация			= Организация;
			ТекущиеДанные.Услуга				= Услуга;
			ТекущиеДанные.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.НоменклатураКод);
			Попытка
				ТекущиеДанные.Комментарий		= Позиция.Комментарий;
			Исключение
			КонецПопытки; 
		Иначе
			// Изменение позиции.
			ТекущиеДанные.Количество	= ТекущиеДанные.Количество + Количество;
			// Изменим количество в подчиненных строках
			ТаблицаЗаказаИзменитьПозициюИзДерева(Данные, ТекущиеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	// TODO: Расчет скидок.
	Документ = ТабличноеПоле.Тег;
	ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, );//Документ.ДополнительныеСвойства.Скидки
	
	// Обновление.
	Если (Не ТабличноеПоле.ТекущиеДанные() = ТекущиеДанные) Тогда
		ТабличноеПоле.ТекущаяСтрока(ТекущиеДанные);
	Иначе
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	
	Данные = Неопределено;
	
КонецПроцедуры // ТаблицаЗаказаДобавитьПозицию()

Процедура ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле, СтрокаТаблицы)
	
	Структура		= Новый Структура("Владелец",СтрокаТаблицы.Идентификатор);
	СтрокиТаблицы	= ТабличноеПоле.НайтиСтроки(Структура);
	
	Для каждого Строка Из СтрокиТаблицы Цикл
		ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле,Строка);
	КонецЦикла;
	
	ТабличноеПоле.Удалить(СтрокаТаблицы);
	
КонецПроцедуры

Процедура ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле, СтрокаТаблицы)
	
	Структура		= Новый Структура("Владелец",СтрокаТаблицы.Идентификатор);
	СтрокиТаблицы	= ТабличноеПоле.НайтиСтроки(Структура);
	
	Для каждого Строка Из СтрокиТаблицы Цикл
		Строка.Количество	= СтрокаТаблицы.Количество;
		ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле,Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменение позиции в табличном поле заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаИзменитьПозицию(ТабличноеПоле, Количество) Экспорт
	
	// Действие.
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные();
	Если Булево(Макс(Количество,0)) Тогда
		// Изменение позиции.
		ТекущиеДанные.Количество = Количество;
		ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле.Данные(),ТекущиеДанные);
	Иначе
		// Уадлять надо рекурсивно с учетом модификаторов
		ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле.Данные(),ТекущиеДанные);
	КонецЕсли;
	
	// TODO: Расчет скидок.
	Документ = ТабличноеПоле.Тег;
	ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, ); //Документ.ДополнительныеСвойства.Скидки
	
	// Обновление.
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры // ТаблицаЗаказаИзменитьПозицию()

// Процедура удаления позиции в табличном поле заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаУдалитьПозицию(ТабличноеПоле) Экспорт
	
	// Удаление позиции.
	ТаблицаЗаказаИзменитьПозицию(ТабличноеПоле, 0);
	
КонецПроцедуры // ТаблицаЗаказаУдалитьПозицию()

// Процедура обработчик события ПриВыводеСтроки табличного поля меню.
//
Процедура ДеревоМенюВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Ресторан = Неопределено, ИзменятьТаблицу = ложь ) Экспорт
	
	//ОформлениеСтроки.ЦветФона
	// Меню.
	Если ИзменятьТаблицу и Элемент.Тег.данные <> Неопределено и Ресторан <> Неопределено Тогда	 
		
		МассивРезультата = Новый Массив;
		
		Если Элемент.Тег.ТаблицаЦвета<> Неопределено Тогда 
			Элемент.Тег.ТаблицаЦвета.Очистить(); 
		КонецЕсли;
		
		Элемент.Тег.ТаблицаЦвета= УправлениеНоменклатуройСервер.FrontOfficeПолучитьЧтоВЧерномЧтоВБеломСписке(МассивРезультата, Ресторан,,ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц);
		
	КонецЕсли; 
	
	ОформлениеСтрокиМеню =  ОформлениеСтроки.Ячейки("Меню");
	КоличествоОбрабЯчеек = ОформлениеСтрокиМеню.Ячейки(Неопределено);
	
	Если не КоличествоОбрабЯчеек > 0 тогда	
		ОформлениеСтрокиМеню.Текст = Элемент.Тег.ПустаяЯчейка;
	Иначе	  
		
		Для ИндексВложенныхДанных = 0 По КоличествоОбрабЯчеек - 1 Цикл
			
			ВложенныеДанные = ДанныеСтроки.Меню[ИндексВложенныхДанных];
			ВложеннаяЯчейка = ОформлениеСтрокиМеню.Ячейки(ИндексВложенныхДанных);
			ВложеннаяЯчейка.Текст = ВложенныеДанные.Представление;
			
			Если мВыводитьЦеныМеню И (Не Элемент.Тег.Элементы.Найти(ВложенныеДанные) = Неопределено) Тогда
				ВложеннаяЯчейка.Текст = ВложеннаяЯчейка.Текст+ " " + Строка(ВложенныеДанные.ПредставлениеЕдиницыИзмерения) + Символы.ПС + Формат(ВложенныеДанные.Цена, "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=") ;		
				
			КонецЕсли;
			
			Если (Не Элемент.Тег.Путь.Найти(ВложенныеДанные) = Неопределено) Тогда
				Если (Не мКомпактноеПредставлениеМеню) Тогда
					ОформлениеСтрокиМеню.ЦветФона = Элемент.ЦветФонаШапки;
				КонецЕсли;
				ВложеннаяЯчейка.ЦветФона = Элемент.ЦветФонаШапки;
				ВложеннаяЯчейка.Шрифт = Новый Шрифт(ВложеннаяЯчейка.Шрифт, ,, Истина); // Жирный.
				Если мВыводитьКартинкиПутиМеню Тогда
					ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияРодитель;
				КонецЕсли;
			ИначеЕсли (Не Элемент.Тег.Группы.Найти(ВложенныеДанные) = Неопределено) Тогда
				ВложеннаяЯчейка.ЦветТекста = ЦветаСтиля.ЦветФонаВыделенияПоля;
				ВложеннаяЯчейка.Шрифт = Новый Шрифт(ВложеннаяЯчейка.Шрифт, ,, Истина); // Жирный.
				Если мВыводитьКартинкиГруппМеню Тогда
					ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияГруппа;
				КонецЕсли;
			Иначе
				
				Если  Элемент.Тег.ТаблицаЦвета <> Неопределено  тогда    //and Элемент.Тег.ТаблицаЦвета.количество()>0
					СтрокаПоиска = Элемент.Тег.ТаблицаЦвета.Найти(ВложенныеДанные.Номенклатура,"Номенклатура");
					Если СтрокаПоиска <> Неопределено Тогда
						ВложеннаяЯчейка.ЦветФона = СтрокаПоиска.ЦветаФона.Получить();
						ВложеннаяЯчейка.Шрифт  = СтрокаПоиска.ШрифтыСтиля.Получить();
						ВложеннаяЯчейка.ЦветТекста =СтрокаПоиска.ЦветШрифта.Получить();
					КонецЕсли;
				КонецЕсли;
				
				Если мВыводитьКартинкиЭлементовМеню Тогда
					ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияЭлеменит;
				КонецЕсли;
			КонецЕсли;
			
			ВложеннаяЯчейка.ГиперСсылка = Истина;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДеревоМенюВывестиСтроку()

Процедура ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные, МассивСтрок,  Позиция, Количество) 
	
	Если МассивСтрок.Количество()= 0 Тогда
		
		Для каждого СтрТаблицы Из ИсточникДанные Цикл
			
			Если СтрТаблицы.Владелец = Позиция.Идентификатор Тогда
				
				МассивСтрок.Добавить(СтрТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрок.Количество()> 0 тогда
			
			ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные , МассивСтрок,  Позиция, Количество)  
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументПолучитьЗначениеНастройки(Документ, ТребуемаяНастройка, НастройкаНеНайдена = Ложь) Экспорт
	
	// Нормализация.
	Если (ТипЗнч(Документ) = мТипТипа) Тогда
		ТипДокумента = Документ;
	Иначе
		ТипДокумента = ТипЗнч(Документ.Ссылка);
	КонецЕсли;
	
	// Сопоставление.
	Если (ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Или (ТипДокумента = Тип("ДокументОбъект.ОтчетПроизводстваЗаСмену")) Тогда
		Попытка
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "ОтчетовПроизводства"];	
		Исключение
			Попытка
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "ОтчетаПроизводства"];	
			Исключение
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка];	
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
	// Сопоставление не выполнено.
	Если (Настройка = Неопределено) Тогда
		НастройкаНеНайдена = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Результат.
	НастройкаНеНайдена = Ложь;
	ЗначениеВозврата = УправлениеПользователями.ПолучитьЗначениеНастройки(Настройка);		
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ДокументПолучитьЗначениеПрава(Документ, ТребуемыеПолномочия, ПолномочиеНеНайдено = Ложь) Экспорт
	
	// Нормализация.
	Если (ТипЗнч(Документ) = мТипТипа) Тогда
		ТипДокумента = Документ;
	Иначе
		ТипДокумента = ТипЗнч(Документ.Ссылка);
	КонецЕсли;
	
	// Сопоставление.
	Если (ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Или (ТипДокумента = Тип("ДокументОбъект.ОтчетПроизводстваЗаСмену"))  Тогда
		Попытка
			Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "ОтчетовПроизводства"];	
		Исключение
			Попытка
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "ОтчетаПроизводства"];	
			Исключение
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия];	
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
	// Сопоставление не выполнено.
	Если (Полномочие = Неопределено) Тогда
		ПолномочиеНеНайдено = Истина; 
		Возврат Неопределено;
	КонецЕсли;
	
	// Результат.
	ПолномочиеНеНайдено = Ложь;
	
	Возврат УправлениеПользователями.УпроститьЗначениеПрава(УправлениеПользователями.ПолучитьЗначениеПрава(Полномочие));
	
КонецФункции

Функция ДокументДоступностьДействия(Документ, ТребуемыеПолномочия) Экспорт
	
	// Нормализация.
	Если (ТипЗнч(ТребуемыеПолномочия) = мТипСтроки) Тогда
		ЗначениеПрава = ДокументПолучитьЗначениеПрава(Документ, ТребуемыеПолномочия); 
	Иначе
		ЗначениеПрава = УправлениеПользователями.ПолучитьЗначениеПрава(ТребуемыеПолномочия);
	КонецЕсли;
	
	Если (Документ = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Изменение состава
	Если (ТипЗнч(ЗначениеПрава) = Тип("ПеречислениеСсылка.ПраваДоступаПользователей")) Тогда
		
		Если ЗначениеПрава = Перечисления.ПраваДоступаПользователей.Привилегированные Тогда
			Возврат Истина;
		ИначеЕсли  ЗначениеПрава = Перечисления.ПраваДоступаПользователей.Разрешить  Тогда 	
			Возврат Документ.Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
		Иначе 
			Возврат Ложь;
		КонецЕсли;
	Иначе	
		
		Возврат ЗначениеПрава;
		
	КонецЕсли;
	
КонецФункции

Функция ДокументДоступность(Документ,  ТолькоПросмотр = Неопределено, Форма = Неопределено ) Экспорт
	
	// Доступность.
	Если (Документ = Неопределено) Тогда
		ТолькоПросмотр = Ложь;
		Возврат Ложь;
	КонецЕсли;
	ТолькоПросмотр = Не Документ.Ссылка.Пустая();
	
	//Редактирование = ДокументДоступностьДействия(Документ, "Изменение"); 
	Редактирование = Истина;
	ТолькоПросмотр = (Не Редактирование) И ДокументДоступностьДействия(Документ, "Просмотр");
	
	
	Если Редактирование Тогда
		ТолькоПросмотр = не Редактирование;
		Возврат  Редактирование;			
	Иначе 		
		Возврат (Не ТолькоПросмотр = Ложь);
	КонецЕсли;
	
КонецФункции // ДокументДоступность()

// Функция открывает и блокирует требуемый документ (интерфейсная).
//
// Параметры:
//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Документ который требуется открыть, если не указан буедт создан новый документ переданного типа.
//	ДокументОснование - ПеречислениеСсылка.МодулиИПодсистемы, ДокументСсылка.РеализацияТоваровУслуг, СправочникСсылка.ИнформационныеКарты. Основание создания документа, в случае если будет создаваться новый документ;
//	ТаблицаПереноса - ТаблицаЗначений. Список переносимых позицый и их количество, в случае если будет создаваться новый документ.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументОткрыть(Документ, ДокументОснование = Неопределено) Экспорт
	
	Перем ТолькоПросмотр;
	
	// Права доступа.
	Если (Не ДокументДоступность(Документ, ТолькоПросмотр)) И (Не ТолькоПросмотр) Тогда
		FrontOffice.ВывестиОшибку(НСтр("ru='Недостаточно прав доступа для просмотра данного документа!';uk='Недостатньо прав для перегляду документа!'") );
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка.
	Если (Метаданные.НайтиПоТипу(ТипЗнч(Документ)) = Неопределено) Или (Документ = Документ.Ссылка) Тогда
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документ;
	КонецЕсли;
	
	
	// Получение и блокирование объекта.
	ПроверкаОткрытия =  ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект, ТолькоПросмотр, Истина);			
	
	Если ПроверкаОткрытия Тогда
		// АнализДействий
		Если НЕ ДокументОбъект.ЭтоНовый() Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Открыт, ДокументОбъект.Ссылка);
		КонецЕсли; 
	КонецЕсли;
	
	ФормаОбъекта = ЭтотОбъект.ПолучитьФорму("Форма");
	
	// Установка значений.
	ФормаОбъекта.ДокументОбъект = ДокументОбъект;
	ФормаОбъекта.ТолькоПросмотр = ТолькоПросмотр;
	
	// Открытие формы.
	ПолучитьСерверFrontOffice().__ОткрытьФорму(ФормаОбъекта);
	
	Возврат Истина;
	
КонецФункции // ДокументОткрыть()

// Функция создает требуемый документ переданного типа (интерфейсная).
//
// Параметры:
//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Тип документа который требуется создать;
//	ДокументОснование - ПеречислениеСсылка.МодулиИПодсистемы, ДокументСсылка.РеализацияТоваровУслуг, СправочникСсылка.ИнформационныеКарты. Основание создания документа;
//	ТаблицаПереноса - ТаблицаЗначений. Список переносимых позицый и их количество.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументСоздать(Документ, ДокументОснование, ТаблицаПереноса = Неопределено) Экспорт
	
	Перем ТолькоПросмотр;
	
	глПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Если ДокументОснование <> Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;	
	
	// Права доступа.
	Если Не ДокументПолучитьЗначениеПрава(Документ, "Создание") Тогда
		FrontOffice.НедостаточноПрав(НСтр("ru='для создания нового документа';uk='для створення нового документа'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Определение типов объектов.
	ТипДокумента = ТипЗнч(Документ); 
	Если (Не ДокументОснование = Неопределено) Тогда 
		ТипОснования = ТипЗнч(ДокументОснование); 
	КонецЕсли;
	МетаданныеДокумента = Документ.Метаданные();
	
	МетаданныеОснования = Неопределено;
	Если (Не ДокументОснование = Неопределено) Тогда
		Попытка
			МетаданныеОснования = ДокументОснование.Метаданные();
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
	КонецЕсли;
	
	Если МетаданныеОснования <> Неопределено Тогда
		ОснованиеДокумент = Метаданные.Документы.Содержит(МетаданныеОснования);
	КонецЕсли;
	
	// Ввод параметров.
	
	// -- Вид операции.
	ВидОперации = Неопределено;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		ЗапрашиватьВидОперации = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьВидОперацииОтчетаПроизводства);
		Если ЗапрашиватьВидОперации Тогда
			Если НЕ ВыборВидаОперации(ВидОперации) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийОтчетПроизводстваЗаСмену.Выдача;
		КонецЕсли;
	КонецЕсли;

	// -- Ответственный.
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глПользователь, "ОсновнойОтветственный");
	Если Ответственный.Пустая() Тогда
		Ответственный = глПользователь;
	КонецЕсли;
	
	// -- Ресторан.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеДокумента) Тогда
		Ресторан = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойРесторан);
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Ресторан) Тогда
			FrontOffice.ОперацияНеВыполнена("Не указан ресторан документа.");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// -- Сотрудник.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеДокумента) Тогда
		Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глПользователь);
	КонецЕсли;
	
	// -- Склад.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
		ТекущийРежимРаботы = ПараметрыСеанса.ТекущийРежимРаботы;
		Если ЗначениеЗаполнено(ТекущийРежимРаботы.Склад) Тогда
			Склад = ТекущийРежимРаботы.Склад;
		Иначе
			Если НЕ ВыборСклада(Склад) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Создание объекта и модификация основания.
	Попытка
		// -- Документ.	
		// ---- Создание.
		ДокументОбъект = Документ;
		Если Не РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// ---- Шапка.
		ДокументОбъект.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
		ДокументОбъект.Ответственный = Ответственный; 
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
			ДокументОбъект.ВидОперации = ВидОперации;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеДокумента) Тогда
			ДокументОбъект.Ресторан = Ресторан;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
			ДокументОбъект.Склад = Склад;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеДокумента) Тогда
			ДокументОбъект.Сотрудник = Сотрудник;
		КонецЕсли;
		
		// ---- Шапка + МнЧ.
		Если (Не ДокументОснование = Неопределено) И Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
			ДокументОбъект.Заполнить(ДокументОснование, ТаблицаПереноса);
		Иначе
			ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, глПользователь);
		КонецЕсли;
		
	Исключение
		РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено);
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно создать документ.';uk='Неможливо створити документ'")  + ОписаниеОшибки() + ".");
		Возврат Ложь;
	КонецПопытки;                                                 
	
	// Отрктие объекта.
	Если (Не ДокументОснование = Неопределено) И Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ДокументОткрыть(ДокументОбъект);
	
КонецФункции // ДокументСоздать()	

// Функция cчитывает данные из базы данных.
//
// Параметры:
//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументПрочитать(Документ) Экспорт
	
	// Выборка данных.
	Возврат ПолучитьСерверFrontOffice().ДокументПрочитать(Документ);
	
КонецФункции // ДокументПрочитать()

Функция ДокументЗаписать(Документ, РежимЗаписи = Неопределено) Экспорт
	
	Если Документ=Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ПодготовитьДокументКЗаписи(Документ,РежимЗаписи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Документ.Записать(РежимЗаписи);
	Исключение
		Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Возврат Печать(Документ);
	
КонецФункции

// Функция закрывает без записи и разблокирует требуемый документ.
//
// Параметры:
//	Документ - ДокументОбъект. Документ который требуется закрыть.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументЗакрыть(Документ) Экспорт
	
	// АнализДействий
	Если Документ <> Неопределено
		И Документ <> NULL Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Закрыт, Документ.Ссылка);
	КонецЕсли; 
	
	Возврат РаботаСДиалогами.ДокументЗакрыть(Документ, Неопределено);	
	
КонецФункции // ДокументЗакрыть()

Функция ВводКомментария(Значение = Неопределено) Экспорт	
	
	// Ввод.
	Возврат FrontOffice.ВводСтроки(Значение, НСтр("ru='Введите комментарий';uk='Введіть коментар'") , Метаданные.РегистрыСведений.КонтактнаяИнформацияРеализацииТоваровУслуг.Ресурсы.Комментарий.Тип.КвалификаторыСтроки.Длина);
	
КонецФункции // ВводКомментария()

Процедура ПоискНоменклатурыПриИзмененииДанных(Элемент) Экспорт
	
	ТабличноеПоле = Элемент; 
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры

Процедура ПоискНоменклатурыПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	Если Не ПустаяСтрока(Значение) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 25
		|	Меню.ЭтоГруппа КАК ЭтоГруппа,
		|	Меню.Номенклатура КАК Номенклатура,
		|	НоменклатураМеню.Код КАК Код,
		|	ПРЕДСТАВЛЕНИЕ(Меню.Номенклатура) КАК Наименование,
		|	НоменклатураМеню.Артикул КАК Артикул,
		|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураМеню.НоменклатурнаяГруппа,
		|	НоменклатураМеню.Организация,
		|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		|	НоменклатураМеню.СтавкаНДС,
		|	НоменклатураМеню.Услуга,
		|	НоменклатураМеню.Цена,
		|	0 КАК ПорядокПодачи
		|ИЗ
		|	Справочник.Меню КАК Меню
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Меню.ЭтоГруппа
		|				ТОГДА Меню.Наименование ПОДОБНО &Значение
		|			ИНАЧЕ Меню.Номенклатура.Наименование ПОДОБНО &Значение
		|		КОНЕЦ
		|	И Меню.Актуальность");
		Запрос.УстановитьПараметр("Значение", "%" + УправлениеКонтактнойИнформацией.ПолучитьСтрокуДляПоискаПоПодобию(Значение) + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ПоискНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоКодуВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоКодуПриИзмененииДанных(Элемент) Экспорт
	
	ТабличноеПоле = Элемент; 
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоКодуПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
		|	НоменклатураМеню.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	НоменклатураМеню.Номенклатура КАК Номенклатура,
		|	НоменклатураМеню.Наименование КАК Наименование,
		|	НоменклатураМеню.Артикул,
		|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураМеню.Код,
		|	НоменклатураМеню.НоменклатурнаяГруппа,
		|	НоменклатураМеню.Организация,
		|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		|	НоменклатураМеню.СтавкаНДС,
		|	НоменклатураМеню.Услуга,
		|	НоменклатураМеню.Цена,
		|	0 КАК ПорядокПодачи
		|ИЗ
		|	Справочник.Меню КАК Меню
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
		|ГДЕ
		|	НоменклатураМеню.Код ПОДОБНО &Значение
		|	И Меню.Актуальность";
		Запрос.УстановитьПараметр("Значение", "%" + Формат(Значение,"ЧН=0; ЧГ=") + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоКодуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоАртикулуВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоАртикулуПриИзмененииДанных(Элемент) Экспорт
	
	ТабличноеПоле = Элемент; 
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоАртикулуПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
		|	НоменклатураМеню.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	НоменклатураМеню.Номенклатура КАК Номенклатура,
		|	НоменклатураМеню.Наименование КАК Наименование,
		|	НоменклатураМеню.Артикул,
		|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураМеню.Код,
		|	НоменклатураМеню.НоменклатурнаяГруппа,
		|	НоменклатураМеню.Организация,
		|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		|	НоменклатураМеню.СтавкаНДС,
		|	НоменклатураМеню.Услуга,
		|	НоменклатураМеню.Цена,
		|	0 КАК ПорядокПодачи
		|ИЗ
		|	Справочник.Меню КАК Меню
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
		|ГДЕ
		|	Меню.Актуальность
		|	И НоменклатураМеню.Артикул ПОДОБНО &Значение";
		Запрос.УстановитьПараметр("Значение", "%" + Формат(Значение,"ЧН=0; ЧГ=") + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоАртикулуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
	
КонецПроцедуры

Процедура СделатьЗаписьРегистрСведенийЧерныйБелыйСписокНоменклатуры(ИмяРегистра, Номенклатура, Ресторан, Актуальность = Ложь) Экспорт
	
	Если  ИмяРегистра  = "ЧерныйСписокНоменклатуры" тогда                                   
		ИмяКонст = "ВремяЖизниЭлементовЧерногоСписка";
	ИначеЕсли  ИмяРегистра = "БелыйСписокНоменклатуры" тогда
		ИмяКонст = "ВремяЖизниЭлементовБелогоСписка";	
	КонецЕсли;
	
	ТаблицаФормы = Новый ТаблицаЗначений; 	
	УправлениеНоменклатуройСервер.ЗаполнитьПараметрыЗаписиДляЧорноБелогоСписка(ложь, Номенклатура, ИмяРегистра, ИмяКонст, ТаблицаФормы );
	
	Для каждого СтрТаблицы Из ТаблицаФормы Цикл
		Если СтрТаблицы.Ресторан <> Ресторан Тогда
			ТаблицаФормы.Удалить(СтрТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если  Актуальность Тогда 
		ТаблицаФормы[0].Актуальность = не Актуальность;
	Иначе 
		ТаблицаФормы[0].Актуальность = ?(ТаблицаФормы[0].Актуальность, ложь, Истина); 
	КонецЕсли;
	РаботаСКДДСписокСервер.СоздатьЗаписиВРегистреСведенийПострочно(ИмяРегистра, ТаблицаФормы ,,,Истина, Ложь);
	
	ТаблицаФормы = Неопределено;
	
КонецПроцедуры

Процедура FrontOfficeЗаполнитьТабличноеПолеМодификаторовУсловий(ИмяСправочника, Номенклатура, ТабличноеПоле,  Родитель= Неопределено)  Экспорт 
	
	Данные = ТабличноеПоле.Данные();
	
	Если Данные = Неопределено Тогда	
		мВыводитьКартинкиПутиМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиПутиМеню);
		мВыводитьКартинкиГруппМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиГруппМеню);
		мВыводитьКартинкиЭлементовМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиЭлементовМеню);
		мВыводитьЦеныМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьЦеныМеню);
		мКомпактноеПредставлениеМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.КомпактноеПредставлениеМеню);
		мРазмерЭлементовМеню = УправлениеПользователями.ПолучитьНастрокуРазмера(УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.РазмерЭлементовМеню));
		//
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Меню", Новый ОписаниеТипов("Массив"), "Меню");		
		ТабличноеПоле.Данные(Данные);
		ТабличноеПоле.СоздатьКолонки("Меню");
		ТабличноеПоле.Колонки.Получить("Меню").ОтображатьВложенныеДанные = Истина;
		ТабличноеПоле.Колонки.Получить("Меню").Ширина = Макс(мРазмерЭлементовМеню.Ширина, 160);
		ТабличноеПоле.Колонки.Получить("Меню").ШиринаЭлементаВложенныхДанных = ТабличноеПоле.Колонки.Получить("Меню").Ширина;
		ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(мРазмерЭлементовМеню.Высота, 40);
		ТабличноеПоле.Шапка = Ложь;
	Иначе
		Данные.Очистить();		
	КонецЕсли;
	
	// Выборка данных.
	Если (ТабличноеПоле.Тег = Неопределено) Тогда
		
		Дерево = УправлениеНоменклатуройСервер.FrontOfficeПолучитьДеревоОтображенияМеню(ИмяСправочника, Номенклатура);	
		ТабличноеПоле.Тег = Новый Структура();
		ТабличноеПоле.Тег.Вставить("Данные", Дерево); 		
		ТабличноеПоле.Тег.Вставить("ПустаяЯчейка", "Пусто");
		ТабличноеПоле.Тег.Вставить("Группы", Новый Массив);
		ТабличноеПоле.Тег.Вставить("Элементы", Новый Массив);
		ТабличноеПоле.Тег.Вставить("Путь", Новый Массив);
		ТабличноеПоле.Тег.Вставить("ТаблицаЦвета", Неопределено);
		
	КонецЕсли;
	
	ДеревоМеню = ТабличноеПоле.Тег.Данные;
	ТабличноеПоле.Тег.Элементы = Новый Массив;
	ТабличноеПоле.Тег.Группы = Новый Массив; 
	ТабличноеПоле.Тег.Путь = Новый Массив; 
	//
	Если (ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений")) Тогда
		РодительМеню = Родитель;
	Иначе                  
		РодительМеню = ДеревоМеню.Строки.Найти(Родитель, "Ссылка", Истина);
	КонецЕсли;
	//
	// Перенос данных.	
	// -- Родители.
	Если (Не РодительМеню = Неопределено) Тогда
		ДеревоМеню = РодительМеню;
		
		СтрокаДанных = Данные.Добавить();
		СтрокаДанных.Меню = Новый Массив;
		
		Пока (Не РодительМеню = Неопределено) Цикл
			ТабличноеПоле.Тег.Путь.Добавить(РодительМеню);
			СтрокаДанных.Меню.Вставить(0, РодительМеню);
			РодительМеню = РодительМеню.Родитель;	
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
		
		Если СтрокаДереваМеню.Строки.Количество()>0 тогда
			Если СтрокаДереваМеню.ССылка.ЭтоГруппа Тогда
				Если (СтрокаДанных = Неопределено) Тогда
					СтрокаДанных = Данные.Добавить();
					СтрокаДанных.Меню = Новый Массив;
				КонецЕсли;
				
				ТабличноеПоле.Тег.Группы.Добавить(СтрокаДереваМеню);
				СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
		
		Если Не СтрокаДереваМеню.Ссылка.ЭтоГруппа Тогда
			Если (СтрокаДанных = Неопределено) Тогда
				СтрокаДанных = Данные.Добавить();
				СтрокаДанных.Меню = Новый Массив;
			КонецЕсли;
			
			ТабличноеПоле.Тег.Элементы.Добавить(СтрокаДереваМеню);
			СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
			
		КонецЕсли;	
	КонецЦикла;
	
	// Обновление.
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ПереносПоискВерхнегоРодителя(ТаблицаИсточник, СтрокаПоиска, Ключ = "Идентификатор", ВозвратСтрока = Неопределено)  Экспорт
	
	Если ВозвратСтрока = Неопределено Тогда
		НайденаСтр =  ТаблицаИсточник.Найти(СтрокаПоиска.Владелец, Ключ);
		Если НайденаСтр <> Неопределено Тогда
			ПереносПоискВерхнегоРодителя(ТаблицаИсточник, НайденаСтр, Ключ, ВозвратСтрока);
		Иначе
			ВозвратСтрока = СтрокаПоиска;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДокументКЗаписи(Документ, РежимЗаписи = Неопределено) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	ОписаниеОшибки		= "";
	
	Попытка
		
		ТекущаяДата = ТекущаяДата();
		
		Если Документ.ЭтоНовый() Тогда
			ДокументОригинал = Документ.Ссылка;
			Документ.ДополнительныеСвойства.Вставить("Оригинал",Документ.Ссылка);
		Иначе
			ДокументОригинал = Документ.Ссылка.ПолучитьОбъект();
			Документ.ДополнительныеСвойства.Вставить("Оригинал",ДокументОригинал);
		КонецЕсли;		
		
		Если Документ.ПометкаУдаления Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе
			Если (РежимЗаписи = Неопределено) Тогда
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;
		КонецЕсли;
		
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		
		Документ.ПодготовитьШапку(РежимЗаписи, РежимПроведения);
		Документ.ПодготовитьТабличнуюЧасть(РежимЗаписи, РежимПроведения);
		
		Возврат Истина;
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		
		Попытка
			Если РежимЗаписи<>РежимЗаписиДокумента.Запись Тогда
				Если Документ.Проведен Тогда
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
				Иначе
					Документ.Записать(РежимЗаписиДокумента.Проведение);	
				КонецЕсли;
			КонецЕсли;
		Исключение
			____Сообщение(ОписаниеОшибки());
		КонецПопытки;
		
	КонецПопытки;
	
	Если Не Документ.ЭтоНовый() Тогда
		Документ.Номер	= ДокументОригинал.Номер;
		Документ.Дата	= ДокументОригинал.Дата;
	КонецЕсли;
	
	Документ.ПометкаУдаления 	= ДокументОригинал.ПометкаУдаления;
	Документ.Проведен			= ДокументОригинал.Проведен;
	Документ.Распечатан			= ДокументОригинал.Распечатан;
	Документ.Сотрудник			= ДокументОригинал.Сотрудник;
	
	ПолучитьСерверFrontOffice().АктивизироватьФорму();
	
	// Предупреждение.
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОписаниеОшибки = НСтр("ru=' Причина неопределенна';uk=' Причину помилки не визначено'") ;
	КонецЕсли;
	FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію'")  + ОписаниеОшибки + ".");
	
	Возврат Ложь;
	
КонецФункции

Функция Печать(Документ) Экспорт
	
	ОписаниеОшибки		= "";
	МетаданныеДокумента = Документ.Метаданные();
	ДокументОригинал	= Документ.ДополнительныеСвойства.Оригинал;
	Ответ				= Неопределено;
	
	Попытка
		
		Если Документ.Распечатан Тогда		
			//Документ.Печать("Накладная",,, Истина);	
			Документ.Печать("ЗаборныйЛист",,, Истина);
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		
		ПолучитьСерверFrontOffice().АктивизироватьФорму();
		
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = НСтр("ru=' Причина неопределенна';uk=' Причину помилки не визначено'") ;
		КонецЕсли;
		
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію'")  + ОписаниеОшибки + ".");
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

Процедура ПолучитьСвязаныеПозиции(Родитель, МассивПозиций) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Родитель);		
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель = &Родитель
	|	И НЕ Номенклатура.ПометкаУдаления";
	Результат = Запрос.Выполнить().Выгрузить();
	МассивПозиций = Результат.ВыгрузитьКолонку("Ссылка");			
КонецПроцедуры

Функция ВводКомментарияНоменклатуы(Значение = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Комментарий",Метаданные.РегистрыСведений.КонтактнаяИнформацияРеализацииТоваровУслуг.Ресурсы.Комментарий.Тип);
	
	Строкой = Значение;
	
	Если FrontOffice.ПоискСтроки(Строкой, НСтр("ru='Введите комментарий';uk='Введіть коментар'") , ,,, Таблица, "Комментарий", Ложь, ЭтотОбъект, "ПоискКомментарияНоменклатуры") Тогда
		
		Если ТипЗнч(Строкой)=Тип("Строка") Тогда
			Значение = Строкой;
		Иначе
			Значение = Строкой.Комментарий;
		КонецЕсли;
		
		Таблица = Неопределено;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Таблица = Неопределено;
	
	Возврат Ложь;
	
КонецФункции




///////////////////////////////////////////////////////////////////////////////////////////	
// Инициализация переменных.

мТипТипа 			= Тип("Тип");
мТипЧисла 			= Тип("Число");
мТипСтроки 			= Тип("Строка");
мТипТаблицыЗначений = Тип("ТаблицаЗначений");

мВыводитьКартинкиПутиМеню 		= Ложь;
мВыводитьКартинкиГруппМеню 		= Ложь;
мВыводитьКартинкиЭлементовМеню 	= Ложь;
мВыводитьЦеныМеню 				= Ложь;
мКомпактноеПредставлениеМеню 	= Ложь;
мРазмерЭлементовМеню 			= УправлениеПользователями.ПолучитьНастрокуРазмера("160x40");
мДисконтнаяКарта 				= Справочники.ИнформационныеКарты.ПустаяСсылка();


#КонецЕсли
