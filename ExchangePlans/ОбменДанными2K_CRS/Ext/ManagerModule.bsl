
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат НСтр("ru = 'Настройки синхронизации для ЦРС'");
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену() Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные между двумя программами 2K:Ресторан II. 
	|Особенностью данного вида синхронизации данных является отсутствие правил конвертации данных и требование идентичности конфигураций у синхронизирующихся программ.'");

	Возврат ПоясняющийТекст;

КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
//
Функция ПодробнаяИнформацияПоОбмену() Экспорт
	
	Возврат "http://www.1c.ua";

КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат "Добавить новую базу ресторана для синхронизации";
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Определяет использование механизма регистрации объектов
//
// Возвращаемое значение:
// Тип: Булево. Истина – механизм регистрации объектов необходимо использовать для текущего плана обмена;
// Ложь – механизм регистрации объектов использовать не требуется.
//
Функция ИспользоватьМеханизмРегистрацииОбъектов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена.РаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "ПланОбмена.ОбменДанными2K_CRS.Форма.ФормаСозданияНачальногоОбраза";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования плана обмена для организации обмена в модели сервиса.
//  Если признак установлен, то в сервисе можно включить обмен данными
//  с использованием этого плана обмена.
//  Если признак не установлен, то план обмена будет использоваться только 
//  для обмена в локальном режиме работы конфигурации.
// 
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий для обмена без использования правил обмена

// Определяет режим удаления объектов при загрузке данных.
//
// Возвращающее значение:
// Булево. Истина – при получении информации удаления объект будет физически удален из ИБ;
// Ложь – объект будет помечен на удаление.
//
Функция РазрешитьУдалениеОбъектов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы через внешнее соединение

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Константы и проверка параметров учета

Функция ОбщиеДанныеУзлов() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента() Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
	
	
КонецПроцедуры

#КонецЕсли

&НаСервере
//Функция ПолучитьТаблицуИерархииИдентификаторов() Экспорт 
Функция ПолучитьТаблицуИерархииИдентификаторов(ГруппаОбъекта = "") Экспорт //Костенюк Александр 24.12.2013

	ТабДок = ПолучитьМакет("НастройкиИсточниковОбъектов");
	ОТБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГрупп.Колонки.Добавить("ПП", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3));
	ТаблицаГрупп.Колонки.Добавить("ПолноеИмяОбъекта", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(430));
	ТаблицаГрупп.Колонки.Добавить("ГруппаОбъекта", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	ТаблицаГрупп.Колонки.Добавить("Доступность", ОТБулево);
    ТаблицаГрупп.Колонки.Добавить("ДоступностьЛБР", ОТБулево);
    ТаблицаГрупп.Колонки.Добавить("ДоступностьЦБРЦ", ОТБулево);
    ТаблицаГрупп.Колонки.Добавить("ДоступностьЦБР", ОТБулево);
    ТаблицаГрупп.Колонки.Добавить("ДоступностьЛБК", ОТБулево);
    ТаблицаГрупп.Колонки.Добавить("ДоступностьЦБК", ОТБулево);
    ТаблицаГрупп.Колонки.Добавить("Зависимость", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(430));
	ТаблицаГрупп.Колонки.Добавить("ЗначениеПоУмолчанию", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБазИсточниковПриОбменеЦРС"));
	
	нкИмяОбъекта = 4;
	нкПП = 3;
	нкГруппа = 2;
	нкД = 5;
	нкЦБР_Ц = 6;
	нкЦБК = 7;
	нкЛБР = 8;
	нкЦБР = 9;
	нкЛБК = 10;
	нкЗависимость = 11;
	нкЗнПоУм = 12;
	
	Для а = 3 по ТабДок.ВысотаТаблицы Цикл
		
		ИмяОбъекта = ТабДок.Область(а,нкИмяОбъекта,а,нкИмяОбъекта).Текст; 
		Группа = ТабДок.Область(а,нкГруппа,а,нкГруппа).Текст; 
		
		//Если Группа = "Не передавать" Или Группа = "Пустые" Тогда
		//	Продолжить;
		//КонецЕсли;
		
		//Костенюк Александр-Старт 24.12.2013
		// Фильтр по определенной группе, либо по всем предназначенным к передаче
		Если ГруппаОбъекта <> "Все" Тогда
			Если Группа = "Не передавать" Или Группа = "Пустые" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//Костенюк Александр-Финиш 24.12.2013
		
		Доступность	   = ТабДок.Область(а,нкД,а,нкД).Текст; 
		ДоступностьЦБРЦ= ТабДок.Область(а,нкЦБР_Ц,а,нкЦБР_Ц).Текст; 
		ДоступностьЛБР = ТабДок.Область(а,нкЛБР,а,нкЛБР).Текст; 
		ДоступностьЦБР = ТабДок.Область(а,нкЦБР,а,нкЦБР).Текст; 
		ДоступностьЛБК = ТабДок.Область(а,нкЛБК,а,нкЛБК).Текст; 
		ДоступностьЦБК = ТабДок.Область(а,нкЦБК,а,нкЦБК).Текст; 
		
		Если ПустаяСтрока(ИмяОбъекта) Тогда
			Прервать;
		КонецЕсли;
		
		нСтрока = ТаблицаГрупп.Добавить();
		
		нСтрока.ПолноеИмяОбъекта = ИмяОбъекта; 
		нСтрока.ГруппаОбъекта = Группа; 
		нСтрока.ПП = ТабДок.Область(а,нкПП,а,нкПП).Текст; 
		нСтрока.Зависимость = ТабДок.Область(а,нкЗависимость,а,нкЗависимость).Текст; 
		
		нСтрока.Доступность	   = Не ПустаяСтрока(Доступность); 
		нСтрока.ДоступностьЛБР = Не ПустаяСтрока(ДоступностьЛБР); 
		нСтрока.ДоступностьЦБРЦ= Не ПустаяСтрока(ДоступностьЦБРЦ); 
		нСтрока.ДоступностьЦБР = Не ПустаяСтрока(ДоступностьЦБР); 
		нСтрока.ДоступностьЛБК = Не ПустаяСтрока(ДоступностьЛБК); 
		нСтрока.ДоступностьЦБК = Не ПустаяСтрока(ДоступностьЦБК); 
		
		
		ТекстЗнПоУм = ТабДок.Область(а,нкЗнПоУм,а,нкЗнПоУм).Текст; 
		
		нСтрока.ЗначениеПоУмолчанию	 = ?(ПустаяСтрока(ТекстЗнПоУм), Перечисления.ВидыБазИсточниковПриОбменеЦРС.ПустаяСсылка(), Перечисления.ВидыБазИсточниковПриОбменеЦРС[ТекстЗнПоУм]);
		
	КонецЦикла;

	Возврат ТаблицаГрупп
	
КонецФункции // ПолучитьТаблицуИерархииИдентификаторов()

&НаСервере
Функция ПолучитьТаблицуСортировкиДерева() Экспорт 

	ТабДок = ПолучитьМакет("СортировкаДерева");
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГрупп.Колонки.Добавить("ГруппаОбъекта", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	ТаблицаГрупп.Колонки.Добавить("Порядок", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2));
	
	Для а = 1 по ТабДок.ВысотаТаблицы Цикл
		
		нСтрока = ТаблицаГрупп.Добавить();
		ГруппаОбъекта = ТабДок.Область(а,1,а,1).Текст; 
		Порядок = ТабДок.Область(а,2,а,2).Текст; 
		
		Если ПустаяСтрока(ГруппаОбъекта) Тогда
			Прервать;
		КонецЕсли;
		
		нСтрока.ГруппаОбъекта = ГруппаОбъекта; 
		нСтрока.Порядок = Порядок; 
		
	КонецЦикла;

	Возврат ТаблицаГрупп
	
КонецФункции // ПолучитьТаблицуСортировкиДерева()

&НаСервере
Функция ПолучитьСоответствиеДоступныхКолонокОбъектам() Экспорт 

	СоотвИсточников = Новый Соответствие;
	СоотвИсточников.Вставить("АвтономнаяРабота", 1);
	СоотвИсточников.Вставить("ЛокальнаяБазаБухгалтерии", 0);
	СоотвИсточников.Вставить("ЛокальнаяБазаРесторана", 1);
	СоотвИсточников.Вставить("ЦентральнаяБазаБухгалтерии", 2);
	СоотвИсточников.Вставить("ЦентральнаяБазаРестораннойСистемы", 3);

	ТабДок = ПолучитьМакет("СортировкаДерева");
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГрупп.Колонки.Добавить("Объект", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	ТаблицаГрупп.Колонки.Добавить("Источник", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2));
	
	Для а = 1 по ТабДок.ВысотаТаблицы Цикл
		
		нСтрока = ТаблицаГрупп.Добавить();
		ГруппаОбъекта = ТабДок.Область(а,1,а,1).Текст; 
		Порядок = ТабДок.Область(а,2,а,2).Текст; 
		
		Если ПустаяСтрока(ГруппаОбъекта) Тогда
			Прервать;
		КонецЕсли;
		
		нСтрока.ГруппаОбъекта = ГруппаОбъекта; 
		нСтрока.Порядок = Порядок; 
		
	КонецЦикла;

	Возврат ТаблицаГрупп
	
КонецФункции // ПолучитьТаблицуСортировкиДерева()

&НаСервере
Функция ПолучитьТаблицуЗависимостиОбъектовИВидовОбъектов() Экспорт 

	Возврат 0;
	
	ТабДок = ПолучитьМакет("ЗависимостиОбъектовИВидовОбъектов");
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГрупп.Колонки.Добавить("ПолноеИмяОбъекта", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(430));
	ТаблицаГрупп.Колонки.Добавить("ГруппаОбъекта", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	
	Для а = 1 по ТабДок.ВысотаТаблицы Цикл
		
		нСтрока = ТаблицаГрупп.Добавить();
		ИмяОбъекта = ТабДок.Область(а,1,а,1).Текст; 
		Группа = ТабДок.Область(а,2,а,2).Текст; 
		
		Если ПустаяСтрока(ИмяОбъекта) Тогда
			Прервать;
		КонецЕсли;
		
		нСтрока.ПолноеИмяОбъекта = ИмяОбъекта; 
		нСтрока.ГруппаОбъекта = Группа; 
		
	КонецЦикла;

	Возврат ТаблицаГрупп
	
КонецФункции // ПолучитьТаблицуИерархииИдентификаторов()
