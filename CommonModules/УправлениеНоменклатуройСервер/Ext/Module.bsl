//////////////////////////Модуль /////////////////////////////////
////УправлениеНоменклатуройСервер.
// 1. СписокРегистров Список имен регистров 
// Пример =  Метаданные.РегистрыСведений[СписокРегистров].Имя
//СписокРегистров = Новый СписокЗначений ;
// СписокРегистров.Добавить(Метаданные.РегистрыСведений.ЧерныйСписокКонтрагентов.Имя);
//2. ДатаЗаписи 
Процедура АктуализироватьСпискиНоменклатуры(СписокРегистров, ДатаЗаписи) Экспорт
	
	Для каждого СтрСписка Из СписокРегистров Цикл	
		
		Имя = СтрСписка.Значение;
		
		//Запрос = Новый Запрос;
		//Запрос.УстановитьПараметр("Дата", ДатаЗаписи);
		//
		//Запрос.Текст = "ВЫБРАТЬ *
		//|ИЗ
		//|	РегистрСведений."+Имя+" КАК РегистрСведений
		//| ГДЕ
		//| РегистрСведений.Дата >= &Дата";
		//
		//ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		//НаборЗаписей = РегистрыСведений[СтрСписка.Значение].СоздатьНаборЗаписей();
		//
		//Если  ТаблицаРезультат.Количество()> 0 Тогда
		//	НаборЗаписей.Загрузить(ТаблицаРезультат);
		//	НаборЗаписей.Записать();   
		//Иначе
		//	
		//	НаборЗаписей.Записать(); 
		//КонецЕсли; 
		
		//Костенюк Александр-Старт 12.04.2012
		Если Имя = "ЧерныйСписокНоменклатуры" Тогда
			КонстВремяЖизни = Константы.ВремяЖизниЭлементовЧерногоСписка.Получить();
		ИначеЕсли Имя = "БелыйСписокНоменклатуры" Тогда
			КонстВремяЖизни = Константы.ВремяЖизниЭлементовБелогоСписка.Получить();
		КонецЕсли;
		
		Если КонстВремяЖизни = "00.00-00" Тогда 
			Продолжить;
		КонецЕсли;
		
		КоличествоДней 	= РазделитьДатуНаПериоды(КонстВремяЖизни, "День" ); 
		КоличествоЧасов = РазделитьДатуНаПериоды(КонстВремяЖизни, "Час" ); 
		КоличествоМинут = РазделитьДатуНаПериоды(КонстВремяЖизни, "Минута" ); 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата());
		Запрос.УстановитьПараметр("КоличествоДней", 	КоличествоДней);
		Запрос.УстановитьПараметр("КоличествоЧасов", 	КоличествоЧасов);
		Запрос.УстановитьПараметр("КоличествоМинут", 	КоличествоМинут);
		Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	СписокНоменклатуры.Номенклатура,
		              |	СписокНоменклатуры.Ресторан,
					  |	СписокНоменклатуры.Дата,
		              |	СписокНоменклатуры.Количество
		              |ИЗ
		              |	РегистрСведений."+Имя+" КАК СписокНоменклатуры,
		              |	(ВЫБРАТЬ
		              |		ДОБАВИТЬКДАТЕ(ЗапросЧасов.Часы, МИНУТА, &КоличествоМинут) КАК ДатаОкончанияЖизни
		              |	ИЗ
		              |		(ВЫБРАТЬ
		              |			ДОБАВИТЬКДАТЕ(ЗапросДней.Дни, ЧАС, &КоличествоЧасов) КАК Часы
		              |		ИЗ                                                              
		              |			(ВЫБРАТЬ
		              |				ДОБАВИТЬКДАТЕ(СписокНоменклатуры.Дата, ДЕНЬ, &КоличествоДней) КАК Дни
		              |			ИЗ
		              |				РегистрСведений."+Имя+" КАК СписокНоменклатуры) КАК ЗапросДней) КАК ЗапросЧасов) КАК ВложенныйЗапрос
		              |ГДЕ
		              |	РАЗНОСТЬДАТ(&ТекущаяДата, ВложенныйЗапрос.ДатаОкончанияЖизни, МИНУТА) >= 0";
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		
		НаборЗаписей = РегистрыСведений[Имя].СоздатьНаборЗаписей();
		
		Если ТаблицаРезультат.Количество()> 0 Тогда
			НаборЗаписей.Загрузить(ТаблицаРезультат);
			НаборЗаписей.Записать();   
		Иначе
			НаборЗаписей.Записать(); 
		КонецЕсли; 
		//Костенюк Александр-Финиш 12.04.2012
		
	КонецЦикла;   
	
КонецПроцедуры

Процедура УдалениеНеАктуальныхЗаписей(ДатаЗаписи = Неопределено) Экспорт 
	Если ДатаЗаписи = Неопределено Тогда
		ДатаЗаписи = ТекущаяДата();
	КонецЕсли;
	СписокРегистров= Новый СписокЗначений();
	СписокРегистров.Добавить("ЧерныйСписокНоменклатуры");
	СписокРегистров.Добавить("БелыйСписокНоменклатуры");
	АктуализироватьСпискиНоменклатуры(СписокРегистров,  ДатаЗаписи);
КонецПроцедуры

Функция ПолучитьСписокОтборНоменклатурыДляМодификаторовИУсловий(ИмяСпр, ТипНоменклатуры) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры );		
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Спр.Номенклатура КАК Ссылка
	|	ИЗ
	|		Справочник."+ИмяСпр+" КАК Спр
	|	ГДЕ
	|		Спр.Номенклатура ЕСТЬ НЕ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Номенклатура.Ссылка
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		(Номенклатура.ТипНоменклатуры В (&ТипНоменклатуры))) КАК Номенклатура";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0   Тогда
		Возврат	Таблица.ВыгрузитьКолонку("Ссылка");	
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции

Функция ВремяЖизниПолучитьЗначениеПоУмолчанию(ИмяРегистра) Экспорт
	
	Если ИмяРегистра = "ЧерныйСписокНоменклатуры" Тогда
		ИмяПараметра  =  "ВремяЖизниЭлементовЧерногоСписка";
	ИначеЕсли ИмяРегистра = "БелыйСписокНоменклатуры"  Тогда 
		ИмяПараметра  =  "ВремяЖизниЭлементовБелогоСписка"                                                                                                
	КонецЕсли;
	
	Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), ИмяПараметра);	
	
КонецФункции

Функция ПроверитьНаМодификаторНоменклатуру(ЭлементЗначение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МодификаторыНоменклатуры.Модификатор
	|ИЗ
	|	РегистрСведений.МодификаторыНоменклатуры КАК МодификаторыНоменклатуры
	|ГДЕ
	|	МодификаторыНоменклатуры.Номенклатура В (&Номенклатура)");
	Запрос.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.ПолучитьСписокРодителейПоИерархии(ЭлементЗначение));
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПроверитьНаУсловиеНоменклатуру(ЭлементЗначение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МодификаторыНоменклатуры.Условия
	|ИЗ
	|	РегистрСведений.УсловияНоменклатуры КАК МодификаторыНоменклатуры
	|ГДЕ
	|	МодификаторыНоменклатуры.Номенклатура В(&Номенклатура)");
	Запрос.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.ПолучитьСписокРодителейПоИерархии(ЭлементЗначение));
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

//Добавление строк в дерево
// ЭтотОбъект
// ПроверкаНажатия
//ДеревоПозиции = ЭлементыФормы.Позиции.Значение;
//Строка = ЭлементыФормы.Позиции.ТекущаяСтрока;
// ЭлементыФормыДерево = ЭлементыФормы.Позиции
//
Процедура ДобавлениеСтрокПодчиненныхРодителюВДокументах(ЭтотОбъект, ЭтаФорма, ПроверкаНажатия, ЭлементыФормыДерево , Дерево, ТекущаяСтрока ) Экспорт	
	
	Если  ТекущаяСтрока <> Неопределено тогда
		СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
		УИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 	
		Если ТекущаяСтрока.Идентификатор <> УИдентификатор тогда
			
			Если ПроверкаНажатия = "Модификатор" тогда                              
				
				Количество=ТекущаяСтрока.Строки.Количество();
				НоваяСтрока  =  ТекущаяСтрока.Строки.Добавить();
				//Номер = Число(Строка(ТекущаяСтрока.НомерСтроки) + "." +Строка(Число(Количество+1)));
				НоваяСтрока.Владелец = ТекущаяСтрока.Идентификатор;
				//НоваяСтрока.НомерСтроки = Номер;                         
				//НоваяСтрока.ДатаНачалаПериода = ТекущаяДата();
				НоваяСтрока.Количество = ТекущаяСтрока.Количество;
				НоваяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор;
				ЭлементыФормыДерево.ТекущаяСтрока = НоваяСтрока;
				ЭлементыФормыДерево.ТекущаяКолонка = ЭлементыФормыДерево.Колонки.Номенклатура;
				ЭлементыФормыДерево.ИзменитьСтроку();
				
			ИначеЕсли ПроверкаНажатия  = "Условие" Тогда
				
				Если ТекущаяСтрока.ВидНоменклатуры <> Перечисления.ТипыСтрокЗаказов.Условие  Тогда	
					
					Количество=ТекущаяСтрока.Строки.Количество();
					НоваяСтрока  =  ТекущаяСтрока.Строки.Добавить();
					//Номер = Число(Строка(ТекущаяСтрока.НомерСтроки) + "." +Строка(Число(Количество+1)));
					НоваяСтрока.Владелец = ТекущаяСтрока.Идентификатор;
					//НоваяСтрока.НомерСтроки = Номер;                         
					//НоваяСтрока.ДатаНачалаПериода = ТекущаяДата();
					НоваяСтрока.Количество = ТекущаяСтрока.Количество;
					НоваяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Условие;
					ЭлементыФормыДерево.ТекущаяСтрока = НоваяСтрока;
					ЭлементыФормыДерево.ТекущаяКолонка = ЭлементыФормыДерево.Колонки.Номенклатура;
					ЭлементыФормыДерево.ИзменитьСтроку();
					
				иначе
					#Если Клиент Или ТонкийКлиент Тогда
						ПоказатьОповещениеПользователя("ВНИМАНИЕ", ,"Нельзя добавить условие на условие. Сделайте правильный выбор...");		
					#КонецЕсли
					Возврат;
				КонецЕсли;
				
			КонецЕсли;                                            
			
		Иначе
			#Если Клиент Или ТонкийКлиент Тогда
				ПоказатьОповещениеПользователя("ВНИМАНИЕ", , "В текущей строке не заполнен уникальный идентификатор.");
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементыФормыДерево.Значение);
	ОбработкаТабличныхЧастей.ПозицииПриАктивизацииЯчейки(ЭтаФорма, ЭлементыФормыДерево);
КонецПроцедуры 

Функция  СоздатьТаблицуГруппИЗРегистров(НоменклатураСписок, ИмяРегистра) Экспорт
	
	РегистрИзмерения = Метаданные.РегистрыСведений[ИмяРегистра].Измерения;
	Для каждого СтрокаИзмерения  Из РегистрИзмерения Цикл
		Если СтрокаИзмерения.Имя <> "Номенклатура" Тогда
			ИмяИзмерения = СтрокаИзмерения.Имя;
		КонецЕсли; 
	КонецЦикла;                                                                 
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСписок );
	
	Запрос.Текст = "ВЫБРАТЬ                    
	| Регистр."+ИмяИзмерения+",
	| Регистр.Актуальность                                            
	|ИЗ
	|	РегистрСведений."+ИмяРегистра+" КАК Регистр
	|ГДЕ
	//|	Регистр."+ИмяИзмерения+".ЭтоГруппа = ИСТИНА
	|	 Регистр.Номенклатура В иерархии(&Номенклатура)";         
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Возврат  РезультатЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Процедура ОбработкаДереваИУстановкаКартинок(ДеревоЗначений, ТаблицаПоиска = Неопределено, ИмяКолонкиПоиска)Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева[ИмяКолонкиПоиска].ЭтоГруппа Тогда 
			
			Если ТаблицаПоиска <> Неопределено Тогда
				
				СтрокаПоиска = ТаблицаПоиска.Найти(СтрокаДерева[ИмяКолонкиПоиска], ИмяКолонкиПоиска);		
				
				Если СтрокаПоиска <> Неопределено Тогда
					СтрокаДерева.Актуальность = СтрокаПоиска.Актуальность; 			
				Иначе
					СтрокаДерева.Актуальность = Ложь;	
				КонецЕсли; 
				
			Иначе 
				СтрокаДерева.Актуальность = Ложь;
			КонецЕсли; 
			
			СтрокаДерева.Картинка = БиблиотекаКартинок.TouchИерархияРодитель;
			
		Иначе
			
			Если ТаблицаПоиска <> Неопределено Тогда
				
				СтрокаПоиска = ТаблицаПоиска.Найти(СтрокаДерева[ИмяКолонкиПоиска], ИмяКолонкиПоиска);		
				
				Если СтрокаПоиска <> Неопределено Тогда
					СтрокаДерева.Актуальность = СтрокаПоиска.Актуальность; 
				Иначе
					СтрокаДерева.Актуальность = Ложь;	
				КонецЕсли; 
				
			Иначе 
				СтрокаДерева.Актуальность = Ложь;
			КонецЕсли; 
			СтрокаДерева.Картинка = БиблиотекаКартинок.TouchИерархияЭлеменит;
			
		КонецЕсли; 
		
		
		Если СтрокаДерева.Строки.Количество()>0 Тогда
			ОбработкаДереваИУстановкаКартинок(СтрокаДерева, ТаблицаПоиска, ИмяКолонкиПоиска );
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПроверкаГруппыМодификатора(Дерево, Имя, Модификатор, Актуальность, ТекущаяСтрока ) Экспорт
	
	ТекущиеДанные = Дерево.НайтиПоИдентификатору(ТекущаяСтрока);
	Если Актуальность Тогда
		ПолучитВсехРодителей(ТекущиеДанные, Актуальность); 
		УстановитьИстинаДляРодителей(ТекущиеДанные, Актуальность, "Модификатор");
	Иначе 
		УстановитьИстинаДляРодителей(ТекущиеДанные, Актуальность, "Модификатор");
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьИстинаДляРодителей(ТекущиеДанные, Актуальность, ИмяКолонки) 
	
	Колекция = ТекущиеДанные.ПолучитьЭлементы();
	
	Для каждого ЭлементыКоллекции Из Колекция Цикл
		Если ЭлементыКоллекции[ИмяКолонки].ЭтоГруппа Тогда
			
			ЭлементыКоллекции.Актуальность = Актуальность;
			УстановитьИстинаДляРодителей(ЭлементыКоллекции, Актуальность, ИмяКолонки); 
		Иначе 
			ЭлементыКоллекции.Актуальность = Актуальность;	
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитВсехРодителей(Данные, Актуальность) 
	
	Родитель =  Данные.ПолучитьРодителя() ;
	Если  Родитель <> Неопределено  Тогда
		Родитель.Актуальность  = Актуальность;
	Иначе 
		Возврат;
	КонецЕсли;
	ПолучитВсехРодителей(Родитель, Актуальность);
	
КонецПроцедуры

Функция НайтиПодчиненныйМодификаторИлиУсловие(Номенклатура, Имя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура );
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таб.Ссылка
	|ИЗ
	|	Справочник."+Имя+" КАК Таб
	|ГДЕ
	|	Таб.Номенклатура = &Номенклатура
	|	И Таб.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат	 Выборка.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;  
	
КонецФункции

Функция ВозвратПодчиненныйОбъектМодификаторИлиУсловие(Номенклатура, Имя) Экспорт
	
	Ссылка = НайтиПодчиненныйМодификаторИлиУсловие(Номенклатура, Имя);
	Если Ссылка <> Неопределено тогда
		Возврат  Ссылка;
	Иначе 
		Возврат  Справочники.МодификаторыНоменклатуры.ПустаяСсылка();
	КонецЕсли;                                                      
	
КонецФункции

Функция ПрибавитьКДатеДниЧасыМинуты(НаКакуюДату, КоличествоДней, КоличествоЧасов, КоличествоМИНУТ) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаТекущая", НаКакуюДату);
	Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
	Запрос.УстановитьПараметр("КоличествоЧасов",КоличествоЧасов);
	Запрос.УстановитьПараметр("КоличествоМИНУТ", КоличествоМИНУТ);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ЗапросЧасов.Часы, МИНУТА, &КоличествоМИНУТ) КАК ИтогоДата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДОБАВИТЬКДАТЕ(ЗапросДней.Дни, ЧАС, &КоличествоЧасов) КАК Часы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДОБАВИТЬКДАТЕ(&ДатаТекущая, ДЕНЬ, &КоличествоДней) КАК Дни) КАК ЗапросДней) КАК ЗапросЧасов";
	
	РезультатЗапроса = Запрос.Выполнить();
	Резулт = РезультатЗапроса.Выгрузить();
	Возврат Резулт[0].ИтогоДата;                          
КонецФункции

Функция РазделитьДатуНаПериоды(ТекСтрока, Переменная) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекСтрока", ТекСтрока);
	Запрос.УстановитьПараметр("Переменная", Переменная);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА основа.Переменная = ""День""
	|			ТОГДА ПОДСТРОКА(&ТекСтрока, 1, 2)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА основа.Переменная = ""Час""
	|					ТОГДА ПОДСТРОКА(&ТекСтрока, 4, 2)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА основа.Переменная = ""Минута""
	|							ТОГДА ПОДСТРОКА(&ТекСтрока, 7, 2)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Поле
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Переменная КАК Переменная) КАК основа";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат Число(РезультатЗапроса[0].Поле);
	
КонецФункции	

Функция ПолучитьВремяЖизни(НаКакуюДату, ВремяЖизниЭлементов) Экспорт
	
	Если  ВремяЖизниЭлементов  = "ВремяЖизниЭлементовЧерногоСписка" тогда
		КонстВремяЖизни = Константы.ВремяЖизниЭлементовЧерногоСписка.Получить();
	ИначеЕсли  ВремяЖизниЭлементов = "ВремяЖизниЭлементовБелогоСписка" тогда
		КонстВремяЖизни = Константы.ВремяЖизниЭлементовБелогоСписка.Получить();	
	КонецЕсли;
	
	Если  КонстВремяЖизни <> "00.00-00" Тогда 
		
		КоличествоДней = РазделитьДатуНаПериоды(КонстВремяЖизни, "День" ); 
		КоличествоЧасов = РазделитьДатуНаПериоды(КонстВремяЖизни, "Час" ); //Число(ОбщегоНазначенияРабочий.НайтиСтрокуМежду(КонстВремяЖизни," ", ":" ));
		КоличествоМИНУТ = РазделитьДатуНаПериоды(КонстВремяЖизни, "Минута" );//Число(ОбщегоНазначенияРабочий.НайтиСтрокуМежду(КонстВремяЖизни,":", ":" )); 
		ВремяЖизни = УправлениеНоменклатуройСервер.ПрибавитьКДатеДниЧасыМинуты(НаКакуюДату, КоличествоДней  , КоличествоЧасов, КоличествоМИНУТ);	
	Иначе 
		ВремяЖизни = НаКакуюДату + 86400;
	КонецЕсли;
	Возврат  ВремяЖизни;
КонецФункции

Функция ПолучитьРезультатЗапросаЧерныйБелыйСписок(Проверка = ложь, ИмяРегистра, Номенклатура, ВремяЖизни = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Рестораны.Ссылка КАК Ресторан,
	|	ВЫБОР
	|		КОГДА СписокНоменклатуры.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Актуальность,
	|	&ВремяЖизни КАК Дата,
	|	&Номенклатура КАК Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		Рестораны.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.Рестораны КАК Рестораны
	|	ГДЕ
	|		Рестораны.Актуальность = ИСТИНА
	|		И Рестораны.ПометкаУдаления = ЛОЖЬ) КАК Рестораны
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокНоменклатуры.Ресторан КАК Ресторан,
	|			СписокНоменклатуры.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрСведений."+ ИмяРегистра +" КАК СписокНоменклатуры
	|		ГДЕ
	|			СписокНоменклатуры.Номенклатура = &Номенклатура) КАК СписокНоменклатуры
	|		ПО Рестораны.Ссылка = СписокНоменклатуры.Ресторан
	|
	|УПОРЯДОЧИТЬ ПО
	|	Актуальность
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура ); 
	
	Если ВремяЖизни = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ВремяЖизни КАК Дата,","");
	Иначе 
		Запрос.УстановитьПараметр("ВремяЖизни", ВремяЖизни );	
	КонецЕсли; 
	
	Если Проверка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Номенклатура КАК Номенклатура","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КОНЕЦ КАК Актуальность,","КОНЕЦ КАК Актуальность");
	КонецЕсли;  
	
	РезультатЗапроса = Запрос.Выполнить(); //РезультатЗапроса.Выгрузить()
	Возврат  РезультатЗапроса;
КонецФункции

Процедура ЗаполнитьПараметрыЗаписиДляЧорноБелогоСписка(Проверка = ложь, Номенклатура, ИмяРегистра , ИмяКонстанты, ТаблицаФормы) Экспорт 
	
	Если ТаблицаФормы = Неопределено Тогда 
		ТаблицаФормы = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ВремяЖизни = УправлениеНоменклатуройСервер.ПолучитьВремяЖизни(ТекущаяДата(), ИмяКонстанты);
	
	РезультатЗапроса = Неопределено;
	//РезультатЗапроса = УправлениеНоменклатуройСервер.ПолучитьРезультатЗапросаЧерныйБелыйСписок(Проверка, ИмяРегистра, Номенклатура, ВремяЖизни);
	
	//Костенюк Александр-Старт 12.04.2012
	// ВремяЖизни определять не будем
	// При таком варианте запишется ТекущаяДата()
	РезультатЗапроса = УправлениеНоменклатуройСервер.ПолучитьРезультатЗапросаЧерныйБелыйСписок(Проверка, ИмяРегистра, Номенклатура);
	//Костенюк Александр-Финиш 12.04.2012
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаФормы = РезультатЗапроса.Выгрузить();       
	
КонецПроцедуры

Процедура ПроверкаПроверкаКоличестваАктуальнахЗаписейДляЧорноБелогоСписка(Проверка, ИмяРегистра, Номенклатура, Кнопка)Экспорт 
	
	РезультатЗапроса = Неопределено;	
	РезультатЗапроса = ПолучитьРезультатЗапросаЧерныйБелыйСписок(Проверка, ИмяРегистра, Номенклатура, ); 	
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);                    	 
	
	//ПроверкаКоличества 
	Если  Выборка.Количество()= 0  Тогда
		Кнопка.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Кнопка.Пометка =Ложь;
		
	ИначеЕсли Выборка.Количество()= 1 Тогда
		
		Если  Выборка.Следующий() Тогда 
			Кнопка.Картинка = ?(Выборка.Актуальность, БиблиотекаКартинок.УстановитьФлажки, БиблиотекаКартинок.СнятьФлажки) ;
			Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Кнопка.Пометка =Выборка.Актуальность;			
		КонецЕсли; 	
		
	ИначеЕсли Выборка.Количество()> 1 Тогда
		
		Кнопка.Отображение = ОтображениеКнопки.Текст;	
		Кнопка.Пометка = Выборка.НайтиСледующий(Истина ,"Актуальность");
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьЗначениеИзЧисла(Текст) Экспорт  
	
	СтрокаТекст ="";
	КоличествоДней = УправлениеНоменклатуройСервер.РазделитьДатуНаПериоды(Текст, "День" );
	КоличествоЧасов = УправлениеНоменклатуройСервер.РазделитьДатуНаПериоды(Текст, "Час" ); //Число(ОбщегоНазначенияРабочий.НайтиСтрокуМежду(КонстВремяЖизни," ", ":" ));
	КоличествоМИНУТ = УправлениеНоменклатуройСервер.РазделитьДатуНаПериоды(Текст, "Минута" );
	
	Если КоличествоДней < 10  Тогда
		СтрокаДней  = Строка("0"+КоличествоДней);
	ИначеЕсли КоличествоДней = 0 Тогда
		СтрокаДней =Строка("00");
	Иначе
		СтрокаДней =Строка(КоличествоДней);
	КонецЕсли; 	
	
	Если КоличествоЧасов> 23  Тогда
		СтрокаЧасов = Строка(23);
	ИначеЕсли КоличествоЧасов >= 10 и  КоличествоЧасов < 23 Тогда
		СтрокаЧасов = Строка(КоличествоЧасов);
	ИначеЕсли КоличествоЧасов < 10  Тогда
		СтрокаЧасов = Строка("0"+КоличествоЧасов);
	ИначеЕсли КоличествоЧасов = 0  Тогда
		СтрокаЧасов = Строка("00");
	Иначе
		СтрокаЧасов =Строка(КоличествоЧасов);
	КонецЕсли; 
	
	Если КоличествоМИНУТ> 59  Тогда
		СтрокаМИНУТ = Строка(59);
	ИначеЕсли КоличествоМИНУТ >= 10 и  КоличествоМИНУТ < 59 Тогда
		СтрокаМИНУТ = Строка(КоличествоМИНУТ);
	ИначеЕсли КоличествоМИНУТ < 10  Тогда
		СтрокаМИНУТ = Строка("0"+КоличествоМИНУТ);
	ИначеЕсли КоличествоМИНУТ = 0 Тогда
		СтрокаМИНУТ = Строка("00"); 
	Иначе
		СтрокаМИНУТ=Строка(КоличествоМИНУТ);
	КонецЕсли;
	
	Возврат СтрокаТекст + СтрокаДней + "." + СтрокаЧасов + ":" + СтрокаМИНУТ ;
	
КонецФункции

// Функция поиска аналогичной номенклатуры в пределах текущего вида меню."МодификаторыНоменклатуры"
//
Функция НоменклатураПроверка(ЭтотОбъект, Имя) Экспорт
	СущОбъект = ВозвратПодчиненныйОбъектМодификаторИлиУсловие(ЭтотОбъект.Номенклатура, Имя);
	Если не СущОбъект.Пустая()  Тогда
		ТекстНаим = СущОбъект.Наименование;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Элемент с такой номенклатурой "+ ТекстНаим +" уже существует !",);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции // НоменклатураПроверка()  

Процедура ПроверкаСуществованияМодификатораУсловияВНоменклатуре(ИмяРегистра,  Ссылка, СписокОтбора = Неопределено) Экспорт
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Номенклатура", Ссылка.Номенклатура );	
	
	Если  ИмяРегистра =  "МодификаторыНоменклатуры" тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ВсеМодификаторы.Номенклатура
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрСведений.Номенклатура КАК Номенклатура,
		|		РегистрСведений.Модификатор КАК Модификатор
		|	ИЗ
		|		РегистрСведений.МодификаторыНоменклатуры КАК РегистрСведений
		|	ГДЕ
		|		РегистрСведений.Актуальность = ИСТИНА
		|		И РегистрСведений.Номенклатура = &Номенклатура) КАК РегистрСведенийВложеный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МодификаторыНоменклатуры КАК ВсеМодификаторы
		|		ПО РегистрСведенийВложеный.Модификатор = ВсеМодификаторы.Модификатор";
		
	ИначеЕсли ИмяРегистра = "УсловияНоменклатуры" тогда 
		Запрос.Текст = "ВЫБРАТЬ
		|	УсловияНоменклатуры.Номенклатура
		|ИЗ
		|	(ВЫБРАТЬ
		|		УсловияРег.Номенклатура КАК Номенклатура,
		|		УсловияРег.Условия КАК Условия
		|	ИЗ
		|		РегистрСведений.УсловияНоменклатуры КАК УсловияРег
		|	ГДЕ
		|		УсловияРег.Номенклатура = &Номенклатура
		|		И УсловияРег.Актуальность = ИСТИНА) КАК РегистрСведенийВложеный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияНоменклатуры КАК УсловияНоменклатуры
		|		ПО РегистрСведенийВложеный.Условия = УсловияНоменклатуры.Условия";
		
	КонецЕсли;	                           
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда 
		СписокОтбора = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
	
КонецПроцедуры

Функция  FrontOfficeПолучитьЧтоВЧерномЧтоВБеломСписке(СписокНоменклатура = Неопределено, Ресторан = Неопределено, ВсюТаблицу = ложь ) Экспорт	
	
	Если ТипЗнч(СписокНоменклатура) = Тип("Строка") Тогда
		Возврат  Новый ТаблицаЗначений;
	КонецЕсли; 
	
	Если Ресторан = Неопределено Тогда
		Ресторан = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРесторан");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦветаСтиля.ЦветШрифтаЭлементовБелогоСписка,
	               |	ШрифтыСтиля.ШрифтЭлементовБелогоСписка,
	               |	ЦветаФонаСтиля.ЦветФонаЭлементовБелогоСписка,
	               |	БелыйСписок.Номенклатура КАК БелыйСписокНоменклатура
	               |ПОМЕСТИТЬ ЦветаБелогоСписка
	               |ИЗ
	               |	РегистрСведений.ЦветаСтиля КАК ЦветаСтиля,
	               |	РегистрСведений.ШрифтыСтиля КАК ШрифтыСтиля,
	               |	РегистрСведений.ЦветаФонаСтиля КАК ЦветаФонаСтиля,
	               |	РегистрСведений.БелыйСписокНоменклатуры КАК БелыйСписок
	               |ГДЕ
	               |	БелыйСписок.Ресторан = &Ресторан
	               |	И БелыйСписок.Номенклатура В(&Номенклатура)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦветаСтиля.ЦветШрифтаЭлементовЧорногоСписка,
	               |	ЦветаФонаСтиля.ЦветФонаЭлементовЧерногоСписка,
	               |	ШрифтыСтиля.ШрифтЭлементовЧерногоСписка,
	               |	ЧерныйСписок.Номенклатура КАК ЧерныйСписокНоменклатура
	               |ПОМЕСТИТЬ ЦветаЧерногоСписка
	               |ИЗ
	               |	РегистрСведений.ЦветаСтиля КАК ЦветаСтиля,
	               |	РегистрСведений.ШрифтыСтиля КАК ШрифтыСтиля,
	               |	РегистрСведений.ЦветаФонаСтиля КАК ЦветаФонаСтиля,
	               |	РегистрСведений.ЧерныйСписокНоменклатуры КАК ЧерныйСписок
	               |ГДЕ
	               |	ЧерныйСписок.Ресторан = &Ресторан
	               |	И ЧерныйСписок.Номенклатура В(&Номенклатура)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫБОР
	               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ NULL 
	               |			ТОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура
	               |		ИНАЧЕ ЦветаЧерногоСписка.ЧерныйСписокНоменклатура
	               |	КОНЕЦ КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК БелыйСписок,
	               |	ВЫБОР
	               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЧерныйСписок,
	               |	ВЫБОР
	               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ НЕ NULL 
	               |			ТОГДА ЦветаЧерногоСписка.ЦветШрифтаЭлементовЧорногоСписка
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ЦветШрифтаЭлементовЧорногоСписка,
	               |	ВЫБОР
	               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ НЕ NULL 
	               |			ТОГДА ЦветаЧерногоСписка.ЦветФонаЭлементовЧерногоСписка
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ЦветФонаЭлементовЧерногоСписка,
	               |	ВЫБОР
	               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ НЕ NULL 
	               |			ТОГДА ЦветаЧерногоСписка.ШрифтЭлементовЧерногоСписка
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ШрифтЭлементовЧерногоСписка,
	               |	ВЫБОР
	               |		КОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура ЕСТЬ НЕ NULL 
	               |			ТОГДА ЦветаБелогоСписка.ЦветШрифтаЭлементовБелогоСписка
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ЦветШрифтаЭлементовБелогоСписка,
	               |	ВЫБОР
	               |		КОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура ЕСТЬ НЕ NULL 
	               |			ТОГДА ЦветаБелогоСписка.ШрифтЭлементовБелогоСписка
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ШрифтЭлементовБелогоСписка,
	               |	ВЫБОР
	               |		КОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура ЕСТЬ НЕ NULL 
	               |			ТОГДА ЦветаБелогоСписка.ЦветФонаЭлементовБелогоСписка
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ЦветФонаЭлементовБелогоСписка
	               |ИЗ
	               |	ЦветаБелогоСписка КАК ЦветаБелогоСписка
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ЦветаЧерногоСписка КАК ЦветаЧерногоСписка
	               //|		ПО ЦветаБелогоСписка.БелыйСписокНоменклатура = ЦветаЧерногоСписка.ЧерныйСписокНоменклатура";
				   //Костенюк Александр-Старт 23.10.2012
				   |		ПО ЦветаБелогоСписка.БелыйСписокНоменклатура = ЦветаЧерногоСписка.ЧерныйСписокНоменклатура
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ ЦветаБелогоСписка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ ЦветаЧерногоСписка";
				   //Костенюк Александр-Финиш 23.10.2012
				   	
	Если СписокНоменклатура = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЧерныйСписок.Номенклатура В(&Номенклатура)", " " );
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БелыйСписок.Номенклатура В(&Номенклатура)", " " );
	Иначе 
		Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатура );	
	КонецЕсли;
	Запрос.УстановитьПараметр("Ресторан", Ресторан );		
	РезультатЗапроса = Запрос.Выполнить();				
	ТаблицаВыгрузки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);                    	    	
	//Если ВсюТаблицу Тогда	   
		Возврат ТаблицаВыгрузки;  
	//иначе	   
	//	Если ТаблицаВыгрузки.Количество() > 0 Тогда 		
	//		ТаблицаВозврата = ТаблицаВыгрузки.СкопироватьКолонки();
	//		ТаблицаВозврата.Очистить();		
	//		Для каждого СтрокаТаб Из ТаблицаВыгрузки Цикл		
	//			СтрокаПоиска = ТаблицаВозврата.Найти(СтрокаТаб.Номенклатура, "Номенклатура" );
	//			Если СтрокаПоиска = Неопределено Тогда
	//				ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), СтрокаТаб); 
	//			КонецЕсли;		
	//		КонецЦикла;	   
	//		Возврат ТаблицаВозврата;	   
	//	КонецЕсли;   
	//КонецЕсли;
КонецФункции

Процедура FrontOfficeДеревоЧБСписокПрочитать(ТабличноеПоле, ИмяРегистра, Ресторан, МенеджерВременныхТаблиц) Экспорт
	
	УправлениеНоменклатуройСервер.УдалениеНеАктуальныхЗаписей(ТекущаяДата());
	
	// Подготовка таблицы.
	Данные = ТабличноеПоле.Данные();
	
	Если Данные = Неопределено Тогда	
		мВыводитьКартинкиЭлементовМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиЭлементовМеню);
		мРазмерЭлементовМеню = УправлениеПользователями.ПолучитьНастрокуРазмера(УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.РазмерЭлементовМеню));
		//
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Меню", Новый ОписаниеТипов("Массив"), "Меню");		
		ТабличноеПоле.Данные(Данные);
		ТабличноеПоле.СоздатьКолонки("Меню");
		ТабличноеПоле.Колонки.Получить("Меню").ОтображатьВложенныеДанные = Истина;
		ТабличноеПоле.Колонки.Получить("Меню").Ширина = Макс(мРазмерЭлементовМеню.Ширина, 160);
		ТабличноеПоле.Колонки.Получить("Меню").ШиринаЭлементаВложенныхДанных = ТабличноеПоле.Колонки.Получить("Меню").Ширина;
		ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(мРазмерЭлементовМеню.Высота, 40);
		ТабличноеПоле.Шапка = Ложь;
	Иначе
		Данные.Очистить();		
	КонецЕсли;
	
	// Выборка данных.
	Если (ТабличноеПоле.Тег = Неопределено) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрСписок.Дата,
		|	РегистрСписок.Номенклатура КАК Ссылка,
		|	РегистрСписок.Номенклатура.Представление КАК Номенклатура
		|ИЗ
		|	РегистрСведений."+ИмяРегистра+" КАК РегистрСписок
		|ГДЕ
		|	РегистрСписок.Ресторан = &Ресторан
		|	И РегистрСписок.Номенклатура.Ссылка <> ЗНАЧЕНИЕ(Справочник.номенклатура.пустаяссылка)");
		
		
		Запрос.УстановитьПараметр("Ресторан",Ресторан);
		//Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		
		//МассивНоменклатур  = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");		
		ТаблицаЦвета = УправлениеНоменклатуройСервер.FrontOfficeПолучитьЧтоВЧерномЧтоВБеломСписке(, Ресторан,);
		
		ТабличноеПоле.Тег = Новый Структура;
		ТабличноеПоле.Тег.Вставить("Данные", Запрос.Выполнить().Выгрузить());
		ТабличноеПоле.Тег.Вставить("Элементы", Новый Массив);
		ТабличноеПоле.Тег.Вставить("ТаблицаЦвета", ТаблицаЦвета);
		ТабличноеПоле.Тег.Вставить("ПустаяЯчейка","Пусто");
		
	КонецЕсли;
	
	ТаблицаЗначений = ТабличноеПоле.Тег.Данные; 
	СтрокаДанных = Данные.Добавить();
	СтрокаДанных.Меню = Новый Массив;
	
	Для каждого СтрТаблицы Из ТаблицаЗначений Цикл
		//СтрокаДанных.Меню.Добавить(СтрТаблицы.Номенклатура + " " + Формат(СтрТаблицы.Дата , "ДФ='До dd.MM.yyyy HH.mm.ss'"));	
		//Костенюк Александр-Старт 12.04.2012
		// Выводим дату добавления блюда в черный/белый список 
		СтрокаДанных.Меню.Добавить(СтрТаблицы.Номенклатура + " " +"Добавлено " + Формат(СтрТаблицы.Дата , "ДФ='dd.MM.yyyy HH.mm.ss'"));
		//Костенюк Александр-Финиш 12.04.2012
		ТабличноеПоле.Тег.Элементы.Добавить(СтрТаблицы);		
	КонецЦикла;
	
	ТабличноеПоле.Обновить();
	
КонецПроцедуры // ДеревоМенюПрочитать()

Функция  FrontOfficeПолучитьДеревоОтображенияМеню(ИмяСправочника, Номенклатура) Экспорт
	Запрос = Новый Запрос;
	СписокНоменклатурыВИерархии = ОбщегоНазначенияСервер.ПолучитьСписокИерархииССылки(Номенклатура);
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатурыВИерархии);	
	Если ИмяСправочника ="МодификаторыНоменклатуры" Тогда                          
		Запрос.Текст =	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Данные.Ссылка КАК Ссылка,
		|	Данные.Номенклатура,
		|	ЕСТЬNULL(Данные.Представление, Данные.Ссылка.Наименование) КАК Представление,
		|	ЕСТЬNULL(Меню.Цена, 0) КАК Цена,
		|	Меню.СтавкаНДС,
		|	Меню.ТипНоменклатуры,
		|	Меню.Себестоимость КАК ПлановаяСебестоимость,
		|	Меню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Меню.НоменклатурнаяГруппа,
		|	Меню.Организация,
		|	Меню.Услуга,
		|	1 КАК ПорядокПодачи,
		|	ЛОЖЬ КАК НаВынос, //Костенюк Александр 23.11.2015
		|	ЕСТЬNULL(Меню.БазоваяЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.Штука)) КАК ЕдиницаИзмеренияПредставление,
		|	Данные.Родитель,
		|	Данные.ЭтоГруппа
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.МодификаторыНоменклатуры КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК Меню
		|		ПО Данные.Номенклатура = Меню.Номенклатура
		|ГДЕ
		|	Данные.Актуальность
		|	И (НЕ Данные.ПометкаУдаления)
		//Костенюк Александр-Старт 08.05.2012
		|	И &ПериодыДействия
		//Костенюк Александр-Финиш 08.05.2012
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Ссылка КАК Ссылка,
		|	Данные.Номенклатура,
		|	Данные.Представление,
		|	Данные.Цена,
		|	Данные.СтавкаНДС,
		|	Данные.ТипНоменклатуры,
		|	Данные.ПлановаяСебестоимость,
		|	Данные.ЕдиницаИзмерения,
		|	Данные.НоменклатурнаяГруппа,
		|	Данные.Организация,
		|	Данные.Услуга,
		|	Данные.ПорядокПодачи,
		|	Данные.НаВынос, //Костенюк Александр 23.11.2015 
		|	Данные.ЕдиницаИзмеренияПредставление,
		|	Данные.Родитель КАК Владелец,
		|	Данные.ЭтоГруппа
		|ИЗ
		|	Данные КАК Данные
		|ГДЕ
		|	Данные.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				МодификаторыНоменклатуры.Модификатор КАК Модификатор
		|			ИЗ
		|				РегистрСведений.МодификаторыНоменклатуры КАК МодификаторыНоменклатуры
		|			ГДЕ
		|				МодификаторыНоменклатуры.Номенклатура В (&Номенклатура)
		|				И МодификаторыНоменклатуры.Актуальность)
		|	И (НЕ Данные.Ссылка В ИЕРАРХИИ
		|				(ВЫБРАТЬ
		|					Результат.Модификатор
		|				ИЗ
		|					(ВЫБРАТЬ
		|						МодификаторыНоменклатуры.Модификатор КАК Модификатор,
		|						МАКСИМУМ(МодификаторыНоменклатуры.Актуальность) КАК Актуальность
		|					ИЗ
		|						РегистрСведений.МодификаторыНоменклатуры КАК МодификаторыНоменклатуры
		|					ГДЕ
		|						МодификаторыНоменклатуры.Номенклатура В (&Номенклатура)
		|					СГРУППИРОВАТЬ ПО
		|										МодификаторыНоменклатуры.Модификатор
		|					) КАК Результат
		|				ГДЕ
		|					(НЕ Результат.Актуальность)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	ИначеЕсли  ИмяСправочника ="УсловияНоменклатуры" Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Данные.Ссылка КАК Ссылка,
		               |	Данные.Номенклатура,
		               |	ЕСТЬNULL(Данные.Представление, Данные.Ссылка.Наименование) КАК Представление,
		               |	ЕСТЬNULL(Меню.Цена, 0) КАК Цена,
		               |	Меню.НоменклатурнаяГруппа,
		               |	Меню.Организация,
		               |	Меню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	Меню.Себестоимость КАК ПлановаяСебестоимость,
		               |	Меню.СтавкаНДС,
		               |	Меню.ТипНоменклатуры,
		               |	Меню.Услуга,
		               |	1 КАК ПорядокПодачи,
					   |	ЛОЖЬ КАК НаВынос, //Костенюк Александр 23.11.2015
		               |	ЕСТЬNULL(Меню.БазоваяЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.Штука)) КАК ЕдиницаИзмеренияПредставление,
		               |	Данные.Родитель КАК Родитель,
		               |	Данные.ЭтоГруппа
		               |ПОМЕСТИТЬ Данные
		               |ИЗ
		               |	Справочник.УсловияНоменклатуры КАК Данные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК Меню
		               |		ПО Данные.Номенклатура = Меню.Номенклатура
		               |ГДЕ
		               |	Данные.Актуальность
		               |	И (НЕ Данные.ПометкаУдаления)
					   //Костенюк Александр-Старт 08.05.2012
					   |	И &ПериодыДействия
					   //Костенюк Александр-Финиш 08.05.2012
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Данные.Ссылка КАК Ссылка,
		               |	Данные.Номенклатура,
		               |	Данные.Представление,
		               |	Данные.Цена,
		               |	Данные.НоменклатурнаяГруппа,
		               |	Данные.Организация,
		               |	Данные.ЕдиницаИзмерения,
		               |	Данные.ПлановаяСебестоимость,
		               |	Данные.СтавкаНДС,
		               |	Данные.ТипНоменклатуры,
		               |	Данные.Услуга,
		               |	Данные.ПорядокПодачи,
					   |	Данные.НаВынос, //Костенюк Александр 23.11.2015
		               |	Данные.ЕдиницаИзмеренияПредставление,
		               |	Данные.Родитель КАК Владелец,
		               |	Данные.ЭтоГруппа
		               |ИЗ
		               |	Данные КАК Данные
		               |ГДЕ
		               |	Данные.Ссылка В ИЕРАРХИИ
		               |			(ВЫБРАТЬ
		               |				УсловияНоменклатуры.Условия
		               |			ИЗ
		               |				РегистрСведений.УсловияНоменклатуры КАК УсловияНоменклатуры
		               |			ГДЕ
		               |				УсловияНоменклатуры.Номенклатура В (&Номенклатура)
		               |				И УсловияНоменклатуры.Актуальность)
		               |	И (НЕ Данные.Ссылка В ИЕРАРХИИ
		               |				(ВЫБРАТЬ
		               |					Результат.Условия
		               |				ИЗ
		               |					(ВЫБРАТЬ
		               |						УсловияНоменклатуры.Условия КАК Условия,
		               |						МАКСИМУМ(УсловияНоменклатуры.Актуальность) КАК Актуальность
		               |					ИЗ
		               |						РегистрСведений.УсловияНоменклатуры КАК УсловияНоменклатуры
		               |					ГДЕ
		               |						УсловияНоменклатуры.Номенклатура В (&Номенклатура)
		               |					СГРУППИРОВАТЬ ПО
		               |										УсловияНоменклатуры.Условия
		               |					) КАК Результат
		               |				ГДЕ
		               |					(НЕ Результат.Актуальность)))
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка ИЕРАРХИЯ
		               |АВТОУПОРЯДОЧИВАНИЕ";
	КонецЕсли;
	//Костенюк Александр-Старт 08.05.2012
	РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействия", "Данные");
	//Костенюк Александр-Финиш 08.05.2012
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
		Возврат ОбщегоНазначенияСервер.ВыгрузитьТаблицуЗначенийВДеревоЗначений(Результат.Выгрузить(), "Ссылка", "Владелец");
	Иначе 
		Возврат Неопределено;
	КонецЕсли;		  	
КонецФункции

//Костенюк Александр-Старт 25.05.2012
// Процедура заполнения табличного поля "Черный список"/"Белый список".
//
// Параметры:
//	ТабличноеПоле - ОбработкаОбъект.TouchТабличноеПоле.
//	ИмяРегистра - Строка, имя регистра сведений из которого будут прочитаны данные
//
Процедура ТаблицаЧерныйБелыйСписокПрочитать(ТабличноеПоле, ИмяРегистра, Ресторан) Экспорт
	
	УправлениеНоменклатуройСервер.УдалениеНеАктуальныхЗаписей(ТекущаяДата());
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Если ИмяРегистра = "ЧерныйСписокНоменклатуры" Тогда
			Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Черный список';uk='Чорний список'"));
		ИначеЕсли ИмяРегистра = "БелыйСписокНоменклатуры" Тогда
			Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Белый список';uk='Білий список'"));
		КонецЕсли;
		Данные.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"), НСтр("ru='Количество';uk='Кількість'") );
		
		ТабличноеПоле.Данные(Данные); 
		ТабличноеПоле.СоздатьКолонки("НоменклатураПредставление, Количество");
		ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 200 * 0.75;
		ТабличноеПоле.Колонки.Получить("Количество").Ширина = 200 * 0.20;
		
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегистрСписок.Номенклатура,
	               |	РегистрСписок.Номенклатура.Представление КАК НоменклатураПредставление,
	               |	РегистрСписок.Дата,
	               |	РегистрСписок.Количество
	               |ИЗ
	               |	РегистрСведений."+ИмяРегистра+" КАК РегистрСписок
	               |ГДЕ
	               |	РегистрСписок.Ресторан = &Ресторан
	               |	И РегистрСписок.Номенклатура.Ссылка <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Ресторан", Ресторан);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗначений = Результат; 
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаДанных 							= Данные.Добавить();
		СтрокаДанных.Номенклатура 				= СтрокаТаблицы.Номенклатура;
		СтрокаДанных.Количество 				= СтрокаТаблицы.Количество;
		СтрокаДанных.НоменклатураПредставление 	= СтрокаТаблицы.НоменклатураПредставление;
	КонецЦикла;
	
	ТабличноеПоле.Обновить();
	
КонецПроцедуры
//Костенюк Александр-Финиш 25.05.2012
