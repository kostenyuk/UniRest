

//Функция ПолучитьСортировку(КонтактнаяИнформация, Тип = Неопределено) Экспорт

//	Тип = __УправлениеКонтактнойИнформациейКлиентСервер.ПолучитьТип(КонтактнаяИнформация, Тип);
//	Если (Тип = Неопределено) Тогда
//		Результат = 0;
//	Иначе
//		Результат = Перечисления.ТипыКонтактнойИнформации.Индекс(Тип);
//		Если (Не Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) И (Не Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
//			Результат = Результат + 10;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Результат;

//КонецФункции // ПолучитьСортировку()

//Функция ПолучитьНомерКартинки(КонтактнаяИнформация, Тип = Неопределено) Экспорт

//	Тип = __УправлениеКонтактнойИнформациейКлиентСервер.ПолучитьТип(КонтактнаяИнформация, Тип);
//	Если (Тип = Неопределено) Тогда
//		Результат = -1;
//	Иначе
//		Результат = Перечисления.ТипыКонтактнойИнформации.Индекс(Тип);
//	КонецЕсли;
//	Результат = Результат + 2;
//	
//	Возврат Результат;

//КонецФункции // ПолучитьНомерКартинки()


Процедура НаименованиеСокращенноеПередЗаписью(Объект) Экспорт
	
	Объект.Наименование = Объект.НаименованиеСокращенное;
	Если (Не Объект.ЭтоГруппа) И (Не ПустаяСтрока(Объект.Наименование)) И ЗначениеЗаполнено(Объект.Тип) Тогда
		Объект.Наименование = Строка(Объект.Тип) + " " + Объект.Наименование;
	КонецЕсли;		
	
КонецПроцедуры // НаименованиеСокращенноеПередЗаписью()


Процедура ТелефонныеКодаОбработкаПроверкиЗаполнения(Объект, Отказ) Экспорт
	
	Если Не Отказ Тогда
	
		Если ПолучитьСвойство(Объект, "ЭтоГруппа", Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		// Удаление пустых и дубликатов.
		СписокКодов = Новый Массив;
		СписокКодов.Добавить(Строка(Неопределено));

		Индекс = 0; Пока (Индекс <= Объект.ТелефонныеКода.Количество() - 1) Цикл
			СтрокаТабличнойЧасти = Объект.ТелефонныеКода[Индекс];
			
			// Нормализация.
			Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.КлассификаторСтранМира") Тогда
				СтрокаТабличнойЧасти.Код = УправлениеКонтактнойИнформацией.ПривестиКодСтраныНомераТелефонаКШаблону(СтрокаТабличнойЧасти.Код);
			КонецЕсли;
			Если (ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.КлассификаторГородов")) Или 
				 (ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.КлассификаторОператоровСвязи")) Тогда
				СтрокаТабличнойЧасти.Код = УправлениеКонтактнойИнформацией.ПривестиКодГородаНомераТелефонаКШаблону(СтрокаТабличнойЧасти.Код);
			КонецЕсли;
			
			// Удаление пустых и дубликатов.
			Если (СписокКодов.Найти(СтрокаТабличнойЧасти.Код) = Неопределено) Тогда
				СписокКодов.Добавить(СтрокаТабличнойЧасти.Код);
			Иначе
				Объект.ТелефонныеКода.Удалить(СтрокаТабличнойЧасти);
				Продолжить;
			КонецЕсли;

			Индекс = Индекс + 1;
		КонецЦикла;
		
		Объект.ТелефонныеКода.Сортировать("Код");
		
		// Проверка уникальности.
		УстановитьПривилегированныйРежим(Истина);
		
		Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.КлассификаторСтранМира") Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
								  |	КлассификаторСтранМираТелефонныеКода.Код,
								  |	КлассификаторСтранМираТелефонныеКода.Ссылка
								  |ИЗ
								  |	Справочник.КлассификаторСтранМира.ТелефонныеКода КАК КлассификаторСтранМираТелефонныеКода
								  |ГДЕ
								  |	(НЕ КлассификаторСтранМираТелефонныеКода.Ссылка = &Ссылка)
								  |	И КлассификаторСтранМираТелефонныеКода.Код В(&СписокКодов)");
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ
								  |	КлассификаторГородовТелефонныеКода.Код,
								  |	КлассификаторГородовТелефонныеКода.Ссылка
								  |ИЗ
								  |	Справочник.КлассификаторГородов.ТелефонныеКода КАК КлассификаторГородовТелефонныеКода
								  |ГДЕ
								  |	(НЕ КлассификаторГородовТелефонныеКода.Ссылка = &Ссылка)
								  |	И КлассификаторГородовТелефонныеКода.Код В(&СписокКодов)
								  |
								  |ОБЪЕДИНИТЬ ВСЕ
								  |
								  |ВЫБРАТЬ
								  |	КлассификаторОператоровСвязиТелефонныеКода.Код,
								  |	КлассификаторОператоровСвязиТелефонныеКода.Ссылка
								  |ИЗ
								  |	Справочник.КлассификаторОператоровСвязи.ТелефонныеКода КАК КлассификаторОператоровСвязиТелефонныеКода
								  |ГДЕ
								  |	(НЕ КлассификаторОператоровСвязиТелефонныеКода.Ссылка = &Ссылка)
								  |	И КлассификаторОператоровСвязиТелефонныеКода.Код В(&СписокКодов)");
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = Шаблон(НСтр("ru = 'Телефонный код [Код] принадлежит элементу [Ссылка]. Повторное использование кода невозможно.'; uk = 'Телефонний код [Код] належить елементу [Ссылка]. Повторне використання коду неможливо.'"),
				Новый Структура("Код,Ссылка", Кавычки(Выборка.Код), Кавычки(Выборка.Ссылка)));
			__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Объект, "ТелефонныеКода", , Отказ);
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;

КонецПроцедуры // ТелефонныеКодаОбработкаПроверкиЗаполнения()

Процедура ТелефонныеКодаПриЗаписи(Отказ) Экспорт
	
	Если Не Отказ Тогда
		РегистрыСведений.ТелефонныеКодаСтранМира.СформироватьТелефонныеКода(Отказ);
	КонецЕсли;
	Если Не Отказ Тогда
		РегистрыСведений.ТелефонныеКодаОператоровСвязи.СформироватьТелефонныеКода(Отказ);
	КонецЕсли;
	
КонецПроцедуры // ТелефонныеКодаПриЗаписи()


//Функция СсылкаПолучитьСвязаннуюСсылку(КонтактнаяИнформация, Тип = Неопределено, СоздатьПриОтсутсвии = Ложь, Отказ = Ложь) Экспорт
//	
//	__УправлениеКонтактнойИнформациейКлиентСервер.ПолучитьТип(КонтактнаяИнформация, Тип);
//	
//	Если (Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) Тогда
//		Справочник = Справочники.Телефоны;
//	ИначеЕсли (Тип = Перечисления.ТипыКонтактнойИнформации.Адрес) Тогда
//		Справочник = Справочники.Адреса;
//	КонецЕсли;
//	Если (Справочник = Неопределено) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Возврат Справочник.ПолучитьСвязаннуюСсылку(КонтактнаяИнформация, СоздатьПриОтсутсвии, Отказ);
//	
//КонецФункции // СсылкаПолучитьСвязаннуюСсылку()

//Функция СсылкаПолучитьСвязанныйОбъект(КонтактнаяИнформация) Экспорт
//	
//	Если КонтактнаяИнформация.Ссылка.Пустая() Тогда
//		Возврат КонтактнаяИнформация;
//	КонецЕсли;
//	
//	Возврат КонтактнаяИнформация.ПолучитьОбъект();
//	
//КонецФункции // СсылкаПолучитьСвязанныйОбъект()

//Процедура СсылкаКоллекцияСсылокПередЗаписью(КонтактнаяИнформация, ТекущаяДата = Неопределено) Экспорт
//	
//	// Коллекция.
//	Коллекция = __УправлениеКонтактнойИнформациейКлиентСервер.ПолучитьКоллекцию(КонтактнаяИнформация);
//	
//	// Удаление пустых и дубликатов.
//	СоответсвиеСсылок = Новый Соответствие; МассивУдаляемых = Новый Массив;
//	
//	Для Каждого СтрокаТабличнойЧасти Из Коллекция Цикл
//		
//		Если СтрокаТабличнойЧасти.КонтактнаяИнформация.Пустая() Тогда
//			МассивУдаляемых.Добавить(СтрокаТабличнойЧасти);	Продолжить;
//		КонецЕсли;
//		
//		Найденная = СоответсвиеСсылок[СтрокаТабличнойЧасти.КонтактнаяИнформация];
//		Если (Найденная = Неопределено) Тогда
//			СоответсвиеСсылок.Вставить(СтрокаТабличнойЧасти.КонтактнаяИнформация, СтрокаТабличнойЧасти);
//			Если (Не ТекущаяДата = Неопределено) Тогда
//				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
//					СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(__УправлениеДаннымиКлиентСервер.ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаОкончанияПериода, ТекущаяДата), ТекущаяДата);
//				КонецЕсли;
//			КонецЕсли;
//		Иначе
//			МассивУдаляемых.Добавить(СтрокаТабличнойЧасти);
//			Если (Не ТекущаяДата = Неопределено) Тогда
//				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
//					Найденная.ДатаНачалаПериода = Мин(Найденная.ДатаНачалаПериода, СтрокаТабличнойЧасти.ДатаНачалаПериода);
//				КонецЕсли;
//				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
//					Найденная.ДатаОкончанияПериода = Макс(Найденная.ДатаОкончанияПериода, СтрокаТабличнойЧасти.ДатаОкончанияПериода);
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Для Каждого СтрокаТабличнойЧасти Из МассивУдаляемых Цикл
//		Коллекция.Удалить(СтрокаТабличнойЧасти);
//	КонецЦикла;
//	
//КонецПроцедуры // СсылкаКоллекцияСсылокПередЗаписью()


//Процедура КонтактнаяИнформацияПриЧтенииНаСервере(КонтактнаяИнформация, Объект, ТолькоПросмотр = Ложь) Экспорт
//	
//	// Коллекция.
//	Коллекция = __УправлениеКонтактнойИнформациейКлиентСервер.ПолучитьКоллекцию(КонтактнаяИнформация);
//	
//	// Контактная информация.
//	Если (Объект = Неопределено) Тогда
//		
//		Коллекция.Очистить();	
//		
//	Иначе
//		
//		Запрос = Новый Запрос("ВЫБРАТЬ
//							  |	КонтактнаяИнформация.Наименование,
//							  |	КонтактнаяИнформация.Тип,
//							  |	КонтактнаяИнформация.Вид,
//							  |	КонтактнаяИнформация.Поле1,
//							  |	КонтактнаяИнформация.Поле2,
//							  |	КонтактнаяИнформация.Поле3,
//							  |	КонтактнаяИнформация.Поле4,
//							  |	КонтактнаяИнформация.Поле6,
//							  |	КонтактнаяИнформация.Поле7,
//							  |	КонтактнаяИнформация.Поле8,
//							  |	КонтактнаяИнформация.Поле9,
//							  |	КонтактнаяИнформация.Поле10,
//							  |	КонтактнаяИнформация.Поле11,
//							  |	КонтактнаяИнформация.Поле12,
//							  |	КонтактнаяИнформация.Комментарий,
//							  |	КонтактнаяИнформация.ДатаНачалаПериода,
//							  |	КонтактнаяИнформация.ДатаОкончанияПериода,
//							  |	КонтактнаяИнформация.Основной,
//							  |	КонтактнаяИнформация.Дополнительный,
//							  |	КонтактнаяИнформация.Пустой КАК Пустой,
//							  |	ВЫБОР
//							  |		КОГДА ТипыКонтактнойИнформации.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
//							  |				ИЛИ ТипыКонтактнойИнформации.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
//							  |			ТОГДА ТипыКонтактнойИнформации.Порядок
//							  |		ИНАЧЕ 10 + ТипыКонтактнойИнформации.Порядок
//							  |	КОНЕЦ КАК Сортировка,
//							  |	ЕСТЬNULL(ТипыКонтактнойИнформации.Порядок, -1) + 2 КАК НомерКартинки
//							  |ИЗ
//							  |	(ВЫБРАТЬ
//							  |		КонтактнаяИнформацияТелефоны.КонтактнаяИнформация.Наименование КАК Наименование,
//							  |		КонтактнаяИнформацияТелефоны.КонтактнаяИнформация.Представление КАК Представление,
//							  |		&ТипТелефон КАК Тип,
//							  |		&ТипТелефон КАК Вид,
//							  |		КонтактнаяИнформацияТелефоны.КонтактнаяИнформация.Поле1 КАК Поле1,
//							  |		КонтактнаяИнформацияТелефоны.КонтактнаяИнформация.Поле2 КАК Поле2,
//							  |		КонтактнаяИнформацияТелефоны.КонтактнаяИнформация.Поле3 КАК Поле3,
//							  |		КонтактнаяИнформацияТелефоны.КонтактнаяИнформация.Поле4 КАК Поле4,
//							  |		NULL КАК Поле6,
//							  |		NULL КАК Поле7,
//							  |		NULL КАК Поле8,
//							  |		NULL КАК Поле9,
//							  |		NULL КАК Поле10,
//							  |		NULL КАК Поле11,
//							  |		NULL КАК Поле12,
//							  |		КонтактнаяИнформацияТелефоны.КонтактнаяИнформация.Комментарий КАК Комментарий,
//							  |		КонтактнаяИнформацияТелефоны.ДатаНачалаПериода КАК ДатаНачалаПериода,
//							  |		КонтактнаяИнформацияТелефоны.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
//							  |		ВЫБОР
//							  |			КОГДА КонтактнаяИнформацияТелефоны.КонтактнаяИнформация = КонтактнаяИнформацияТелефоны.Ссылка.Телефон
//							  |				ТОГДА ИСТИНА
//							  |			ИНАЧЕ ЛОЖЬ
//							  |		КОНЕЦ КАК Основной,
//							  |		ВЫБОР
//							  |			КОГДА КонтактнаяИнформацияТелефоны.КонтактнаяИнформация = КонтактнаяИнформацияТелефоны.Ссылка.ТелефонДополнительный
//							  |				ТОГДА ИСТИНА
//							  |			ИНАЧЕ ЛОЖЬ
//							  |		КОНЕЦ КАК Дополнительный,
//							  |		ЛОЖЬ КАК Пустой
//							  |	ИЗ
//							  |		Справочник.Контрагенты.КонтактнаяИнформацияТелефоны КАК КонтактнаяИнформацияТелефоны
//							  |	ГДЕ
//							  |		КонтактнаяИнформацияТелефоны.Ссылка = &Ссылка
//							  |	
//							  |	ОБЪЕДИНИТЬ ВСЕ
//							  |	
//							  |	ВЫБРАТЬ
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Наименование,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Представление,
//							  |		&ТипАдрес,
//							  |		&ТипАдрес,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Поле6,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Поле7,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Поле8,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Поле9,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Поле10,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Поле11,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Поле12,
//							  |		КонтактнаяИнформацияАдреса.КонтактнаяИнформация.Комментарий,
//							  |		КонтактнаяИнформацияАдреса.ДатаНачалаПериода,
//							  |		КонтактнаяИнформацияАдреса.ДатаОкончанияПериода,
//							  |		ВЫБОР
//							  |			КОГДА КонтактнаяИнформацияАдреса.КонтактнаяИнформация = КонтактнаяИнформацияАдреса.Ссылка.Адрес
//							  |				ТОГДА ИСТИНА
//							  |			ИНАЧЕ ЛОЖЬ
//							  |		КОНЕЦ,
//							  |		ЛОЖЬ,
//							  |		ЛОЖЬ
//							  |	ИЗ
//							  |		Справочник.Контрагенты.КонтактнаяИнформацияАдреса КАК КонтактнаяИнформацияАдреса
//							  |	ГДЕ
//							  |		КонтактнаяИнформацияАдреса.Ссылка = &Ссылка
//							  |	
//							  |	ОБЪЕДИНИТЬ ВСЕ
//							  |	
//							  |	ВЫБРАТЬ
//							  |		NULL,
//							  |		NULL,
//							  |		&ТипТелефон,
//							  |		&ТипТелефон,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		ЛОЖЬ,
//							  |		ЛОЖЬ,
//							  |		ИСТИНА
//							  |	ГДЕ
//							  |		&Редактирование
//							  |	
//							  |	ОБЪЕДИНИТЬ ВСЕ
//							  |	
//							  |	ВЫБРАТЬ
//							  |		NULL,
//							  |		NULL,
//							  |		&ТипАдрес,
//							  |		&ТипАдрес,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		NULL,
//							  |		ЛОЖЬ,
//							  |		ЛОЖЬ,
//							  |		ИСТИНА
//							  |	ГДЕ
//							  |		&Редактирование) КАК КонтактнаяИнформация
//							  |		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ТипыКонтактнойИнформации КАК ТипыКонтактнойИнформации
//							  |		ПО КонтактнаяИнформация.Тип = ТипыКонтактнойИнформации.Ссылка
//							  |
//							  |УПОРЯДОЧИТЬ ПО
//							  |	Сортировка,
//							  |	Пустой");
//		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
//		Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
//		Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
//		Запрос.УстановитьПараметр("Редактирование", Не ТолькоПросмотр);
//		
//		Коллекция.Загрузить(Запрос.Выполнить().Выгрузить());
//		
//	КонецЕсли;
//	
//КонецПроцедуры // КонтактнаяИнформацияПриЧтенииНаСервере()

//Процедура КонтактнаяИнформацияПередЗаписьюНаСервере(КонтактнаяИнформация, Отказ, Объект, ПараметрыЗаписи = Неопределено) Экспорт
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Коллекция.
//	Коллекция = __УправлениеКонтактнойИнформациейКлиентСервер.ПолучитьКоллекцию(КонтактнаяИнформация);
//	
//	// Контактная информация.
//	Объект.Телефон = Неопределено; Объект.ТелефонДополнительный = Неопределено; Объект.Адрес = Неопределено;
//	Объект.КонтактнаяИнформацияТелефоны.Очистить();
//	Объект.КонтактнаяИнформацияАдреса.Очистить();
//	Для Каждого Структура Из Коллекция Цикл
//		
//		Если Структура.Пустой Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если (Структура.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) Тогда
//			Ссылка = СсылкаПолучитьСвязаннуюСсылку(Структура, Структура.Тип, Истина, Отказ);
//			Если Не Отказ Тогда
//				СтрокаТабличнойЧасти = Объект.КонтактнаяИнформацияТелефоны.Добавить();
//				СтрокаТабличнойЧасти.КонтактнаяИнформация = Ссылка;	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Структура); 
//				Если Структура.Основной Тогда
//					Объект.Телефон = Ссылка;
//				КонецЕсли;
//				Если Структура.Дополнительный Тогда
//					Объект.ТелефонДополнительный = Ссылка;
//				КонецЕсли;
//			КонецЕсли;
//		ИначеЕсли (Структура.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес) Тогда
//			Ссылка = СсылкаПолучитьСвязаннуюСсылку(Структура, Структура.Тип, Истина, Отказ);
//			Если Не Отказ Тогда
//				СтрокаТабличнойЧасти = Объект.КонтактнаяИнформацияАдреса.Добавить();
//				СтрокаТабличнойЧасти.КонтактнаяИнформация = Ссылка;	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Структура); 
//				Если Структура.Основной Тогда
//					Объект.Адрес = Ссылка;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если Отказ Тогда
//			Возврат;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры // КонтактнаяИнформацияПередЗаписьюНаСервере()

