
Функция ПолучитьНаименование()

	Если (ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная) Тогда
		Возврат НСтр("ru = 'Регистрационная № '; uk = 'Реєстраційна № '") + КодКарты;
	КонецЕсли; 
	Если (ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная) Тогда
		Если ЗначениеЗаполнено(ВидДисконтнойКарты) И (Не ПустаяСтрока(КодКарты)) Тогда
			Возврат Шаблон("[ВидДисконтнойКарты] № [КодКарты]", 
				Новый Структура("ВидДисконтнойКарты,КодКарты", ВидДисконтнойКарты, КодКарты));
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат "№" + КодКарты; 
		
КонецФункции // ПолучитьНаименование()


Процедура ОбработкаЗаполнения(Основание)
	
	// Контрагенты.
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
		Если Основание.ЭтоГруппа Тогда
			ВладелецКарты = Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			ВладелецКарты = Основание.Ссылка;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка.
	Если Не ЭтоГруппа Тогда
		
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = ПолучитьНаименование();
		КонецЕсли; 
		
		Если Не __УправлениеДаннымиСервер.ПроверитьУникальностьРеквизитаСправочника(ЭтотОбъект, "КодКарты") Тогда
			__ОбщегоНазначенияСервер.СообщитьОбНеуникальностиРеквизитаСправочника(ЭтотОбъект, "КодКарты", , Отказ);
		КонецЕсли; 
		
		Если (ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная) Тогда
			
			__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, , "ВидДисконтнойКарты");
			Если (ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая) Тогда
				__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, "ТипШтрихкода");
			КонецЕсли; 
			Если ЗначениеЗаполнено(ВладелецКарты) Тогда
				__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, "ГруппаПользователей");
			КонецЕсли; 
			
		Иначе
			
			__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, , "ГруппаПользователей,ТипШтрихкода");
			
			__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, "ВладелецКарты,Пол,ДатаРождения,Телефон,Адресс,EMail,Ресторан"); //Костенюк Александр 18.03.2015
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	Если Не ЭтоГруппа Тогда
		КодКарты = Неопределено;
		ПоследнееПоздравление = Неопределено;
		ДатаНачалаПериода = Неопределено;
		ДатаОкончанияПериода = Неопределено;
		
		//Костенюк Александр-Старт 18.10.2012
		ОчиститьКонтактнуюИнформацию();
		//Костенюк Александр-Финиш 18.10.2012
		
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = ПолучитьНаименование();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ)
	    
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЭтоГруппа Тогда
		
		// Наименование.
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = ПолучитьНаименование();
		КонецЕсли; 
		
		// Зависимые.
		Если (ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная) Тогда
			ГруппаПользователей = Неопределено;
		КонецЕсли; 
		Если (ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная) Тогда
			ВидДисконтнойКарты = Неопределено;
			ПроцентУточняемый = Неопределено;
			ДатаРождения = Неопределено;
			ПоследнееПоздравление = Неопределено;
			Комментарий = Неопределено;
			Если ПометкаУдаления Тогда
				ВладелецКарты = Справочники.Пользователи.ПустаяСсылка();
				ГруппаПользователей = Неопределено;
			КонецЕсли; 
		КонецЕсли; 
		
		ДатаРегистрации = __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустуюДату(ДатаРегистрации); //Костенюк Александр 17.02.2015
		
		//// Период.
		//ДатаНачалаПериода = __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустуюДату(ДатаНачалаПериода);
		
		//Костенюк Александр-Старт 17.02.2015
		Если ПроверитьЗаполнение() Тогда
			ДатаНачалаПериода = __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустуюДату(ДатаНачалаПериода);
		КонецЕсли;
		//Костенюк Александр-Финиш 17.02.2015
		
		Если ПометкаУдаления Тогда
			ДатаОкончанияПериода = __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустуюДату(ДатаОкончанияПериода);
		Иначе
			ДатаОкончанияПериода = Неопределено;
		КонецЕсли; 
	
	КонецЕсли; 
		
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	    
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	// Штрих-код.
	Если (ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая) Тогда
		РегистрыСведений.Штрихкоды.УстановитьШтрихКод(ЭтотОбъект, ТипШтрихкода, КодКарты, Отказ);
	Иначе
		РегистрыСведений.Штрихкоды.УстановитьШтрихКод(ЭтотОбъект, Неопределено, Неопределено, Отказ);
	КонецЕсли;
		
	//Костенюк Александр-Старт 21.05.2013
	// Регистрационные карты связываем с регистром
	Если ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
		Если ПометкаУдаления Тогда
			РегистрыСведений.РегистрационныеКарты.УдалитьЗапись(Отказ, Ссылка);
		Иначе
			РегистрыСведений.РегистрационныеКарты.ДобавитьЗапись(Отказ, Ссылка);
		КонецЕсли;
	КонецЕсли;
	//Костенюк Александр-Финиш 21.05.2013
	
КонецПроцедуры // ПриЗаписи()

//Костенюк Александр-Старт 18.10.2012
// Процедура заполняет реквизиты, относящиеся к контактной информации
//
// Параметры:
// ВладелецКарты - Тип: СправочникСсылка.Контрагенты. Владелец карты
//
Процедура ЗаполнитьКонтактнуюИнформацию(ВладелецКарты) Экспорт
	
	ТабКонтактнаяИнформация = УправлениеКонтактнойИнформацией.ПрочитатьНаборЗаписейКонтактнойИнформации(ВладелецКарты);
	
	ТелефонКонтрагента 					= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	АдресЭлектроннойПочтыКонтрагента 	= Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагента;
	ФакттическийАдресКонтрагента 		= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	
	Для Каждого СтрокаТаблицы Из ТабКонтактнаяИнформация Цикл
		
		Если СтрокаТаблицы.Вид = ТелефонКонтрагента Тогда
			Телефон = СтрокаТаблицы.Представление;
		ИначеЕсли СтрокаТаблицы.Вид = АдресЭлектроннойПочтыКонтрагента Тогда
			EMail = СтрокаТаблицы.Представление;
		ИначеЕсли СтрокаТаблицы.Вид = ФакттическийАдресКонтрагента Тогда
			Адресс = СтрокаТаблицы.Представление;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//Костенюк Александр-Финиш 18.10.2012

//Костенюк Александр-Старт 18.10.2012
// Процедура очищает реквизиты, относящиеся к контактной информации
//
// Параметры:
// Нет.
//
Процедура ОчиститьКонтактнуюИнформацию() Экспорт
	
	Телефон = "";
	Адресс 	= "";
	EMail 	= "";
	
КонецПроцедуры
//Костенюк Александр-Финиш 18.10.2012



// Рефакторинг:
//	1. Удалить "ДатаРегистрации";
//	2. Контактная информация.