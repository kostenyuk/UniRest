////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции 
  
// Получает имя значения перечисления как объекта метаданных
//
// Параметры:
//  Значение - значение перечисления для которого необходимо получить имя перечисления
//
// Возвращаемое значение:
//  Строка - имя значения перечисления как объекта метаданных
//
Функция ИмяЗначенияПеречисления(Значение) Экспорт
	
	ОбъектМетаданных = Значение.Метаданные();
	
	ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(Значение);
	
	Возврат ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то в имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт

	Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1'"), 
			Строка(ТипЗнч(ИменаРеквизитов)));
	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;
КонецФункции

// Функция ПолучитьЗначениеРеквизита возвращает значение
// реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции 

Процедура УстановитьГлавныйУзел() Экспорт

	//ВключенОбмен = Константы.ИспользоватьОбменДанными.Получить();
	//Если Не ВключенОбмен Тогда
	//	Если Не ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
	//		ПланыОбмена.УстановитьГлавныйУзел()
	//	КонецЕсли;
	//	Возврат;	
	//КонецЕсли;
	//
	//ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	//
	//Если ЭтоЦентральнаяБаза(ЭтотУзел) Тогда
	//	ПланыОбмена.УстановитьГлавныйУзел()
	//Иначе
	//	мУзлов = ПолучитьМассивУзловДляРегистрации();
	//	Для каждого Узел Из мУзлов Цикл
	//		Если ЭтоЦентральнаяБаза(Узел) Тогда
	//			ПланыОбмена.УстановитьГлавныйУзел(Узел);
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЕБ СЕРВИСА

Функция WSПолучитьСообщение(СтрXML) Экспорт
	
	Если СтрXML = Неопределено Тогда
		//ЗафиксироватьВремяСобытия(ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах(), "Старт теста", Истина);	
		Возврат 1
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрXML);
	Чтение.ПерейтиКСодержимому();
	
	ПродолжатьЧтение = Чтение.Прочитать();
	
	УзелОбмена = Неопределено;
	Отказ = Ложь;
	МассивПолученныхДанных = Новый Массив;
	
	Пока ПродолжатьЧтение Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Чтение.Имя = "sender" Тогда
				//это узел отправитель
				
				ПродолжатьЧтение = Чтение.Прочитать();
				
				Если Не ПустаяСтрока(Чтение.Значение) Тогда
					УзелОбмена = ПланыОбмена.ОбменДанными2K_CRS.НайтиПоКоду(Чтение.Значение);
				КонецЕсли;
				
			ИначеЕсли Чтение.Имя = "acceptence" Тогда
			
				ПродолжатьЧтение = Чтение.Прочитать();
				
				Если Не ПустаяСтрока(Чтение.Значение) Тогда
					МассивПолученныхДанных = ЗначениеИзСтрокиВнутр(Чтение.Значение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		ПродолжатьЧтение = Чтение.Прочитать();
	КонецЦикла;

	Если Не (УзелОбмена = Неопределено Или УзелОбмена.Пустая()) Тогда
		Для каждого ЭлДанных Из МассивПолученныхДанных Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ЭлДанных);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураИзменений = ПроцедурыОбменаДаннымиFrontOffice_Restoran.ПолучитьИзмененияПоследовательно(УзелОбмена);
	СтруктураИзменений.Вставить("ЭтотУзел", ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел());
	
	//Для поочередной отправки данных фиксированными пакетами
	СтруктураИзменений.Вставить("КоличествоОбъектовДанныхКОтправке", СтруктураИзменений.ДанныеСправочники.Количество()
	+ СтруктураИзменений.ДанныеДокументы.Количество()
	+ СтруктураИзменений.КоличествоОбъектовДанныхКОтправкеРегистрыСведений);
	СтруктураИзменений.Вставить("КоличесвтоУжеОтправленные", 0);
	
	//ЗафиксироватьВремяСобытия(ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах(), "Получены данные", Истина);	
	
	Если СтруктураИзменений.КоличествоОбъектовДанныхКОтправке = 0 Тогда
		Возврат 100 //Отсутствуют объекты для передачи
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = "";
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("exch");
		Запись.ЗаписатьНачалоЭлемента("sender");
		Запись.ЗаписатьТекст(СтруктураИзменений.ЭтотУзел.Код);
		Запись.ЗаписатьКонецЭлемента();  //sender
		Запись.ЗаписатьНачалоЭлемента("catalog"); 
		
			мСоответствиеКолонокДвижений = Новый Соответствие;
			
			Для ИндексДанных = 0 По СтруктураИзменений.ДанныеСправочники.Количество()
									+ СтруктураИзменений.ДанныеДокументы.Количество() - 1 Цикл
									
				ИндексДанных2 = ИндексДанных - СтруктураИзменений.ДанныеСправочники.Количество();
				Если ИндексДанных < СтруктураИзменений.ДанныеСправочники.Количество() Тогда
					СсылкаНаИзменение = СтруктураИзменений.ДанныеСправочники[ИндексДанных];
				ИначеЕсли ИндексДанных2 < СтруктураИзменений.ДанныеДокументы.Количество() Тогда
					СсылкаНаИзменение = СтруктураИзменений.ДанныеДокументы[ИндексДанных2];
				КонецЕсли;
				
				Запись.ЗаписатьНачалоЭлемента("obj"); 
				
					КодУзелИсточник = ?(СсылкаНаИзменение.УзелИсточник.Пустая(), СтруктураИзменений.ЭтотУзел.Код, СсылкаНаИзменение.УзелИсточник.Код);
					Запись.ЗаписатьАтрибут("УзелИсточник", КодУзелИсточник);
					ОбъектКЗаписи = СсылкаНаИзменение.ПолучитьОбъект();
					ОбъектКЗаписи.УзелИсточник = Неопределено;
					
					ПодготовитьНеобновляемыеРеквизитыОбъекта(ОбъектКЗаписи, "Выгрузка", 1);
					
					ЗаписатьXML(Запись, ОбъектКЗаписи);
					
					ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаИзменение));
					Если ЭтоДокумент Тогда
						
						Запись.ЗаписатьНачалоЭлемента("rg"); 
						//ДвиженияКЗаписи = ОбъектКЗаписи.Движения;
						//ЗаписатьXML(Запись, ДвиженияКЗаписи);
						
						// выгрузка движений документа
						Для Каждого Движение Из ОбъектКЗаписи.Движения Цикл
							
							Движение.Прочитать();
							
							ЗаписатьXML(Запись, Движение);	
							
						КонецЦикла;
						
						Запись.ЗаписатьКонецЭлемента();  //rg
						
					КонецЕсли;
				
				Запись.ЗаписатьКонецЭлемента();  //obj
				
			КонецЦикла;	
			
		Запись.ЗаписатьКонецЭлемента();  //catalog
			
		Если СтруктураИзменений.КоличествоОбъектовДанныхКОтправкеРегистрыСведений Тогда
	
		Запись.ЗаписатьНачалоЭлемента("reg_changes"); 
		
		мСоответствиеКолонокДвижений = Новый Соответствие;
		
		Для ИндексДанных = 0 По СтруктураИзменений.КоличествоОбъектовДанныхКОтправкеРегистрыСведений - 1 Цикл
			
			ИндексСтроки = ИндексДанных;
			КоличествоВТекущемРегистре = 0;
			н = -1;
			Пока ИндексСтроки >= КоличествоВТекущемРегистре Цикл
				ИндексСтроки = ИндексСтроки - КоличествоВТекущемРегистре;
				н = н + 1;
			    Изменение = СтруктураИзменений.ДанныеРегистрыСведений[н];
				КоличествоВТекущемРегистре = Изменение.ТЗИзменений.Количество();
			КонецЦикла;
			
			Запись.ЗаписатьНачалоЭлемента("rg"); 
			
				НЗ = РегистрыСведений[Изменение.ИмяРегистра].СоздатьНаборЗаписей();
				
				СтрокаИзменений = Изменение.ТЗИзменений[ИндексСтроки];
				
				Для каждого КолонкаОтбора Из Изменение.мОтборы Цикл
					
					НЗ.Отбор[КолонкаОтбора].Установить(СтрокаИзменений[КолонкаОтбора]);
					
				КонецЦикла;
				
				НЗ.Прочитать();				
				
				ЗаписатьXML(Запись, НЗ);
				
				Если Истина Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(СтруктураИзменений.УзелОбмена, НЗ);	
				КонецЕсли;
			
			Запись.ЗаписатьКонецЭлемента();  //rg
			
		КонецЦикла;	
		
		Запись.ЗаписатьКонецЭлемента();  //reg_changes
		
	КонецЕсли;
	
	Запись.ЗаписатьКонецЭлемента();  //exch
	
	СтрXML = Запись.Закрыть();	
	
	Возврат СтрXML
	
КонецФункции

Функция WSОтправитьСообщение(СтрXML) Экспорт
	
	Если СтрXML = Неопределено Тогда
		//ЗафиксироватьВремяСобытия(ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах(), "Старт теста", Истина);	
		Возврат 1
	КонецЕсли;
	
	//ЗафиксироватьВремяСобытия(ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах(), "Получен ответ");	
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрXML);
	Чтение.ПерейтиКСодержимому();
	
	ПродолжатьЧтение = Чтение.Прочитать();
	
	Сообщение = "";
	Сообщение = Сообщение + "Переданы следующие данные:";
	
	УзелОтправитель = Неопределено;
	Отказ = Ложь;
	МассивПолученныхДанных = Новый Массив;
	ТекущийКодУзелИсточник = "";
	
	Пока ПродолжатьЧтение Цикл
		
		Если Не ВозможностьЧтенияXML(Чтение) Тогда
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "sender" Тогда
				//это узел отправитель
				
				ПродолжатьЧтение = Чтение.Прочитать();
				
				Если Не ПустаяСтрока(Чтение.Значение) Тогда
					УзелОтправитель = ПланыОбмена.ОбменДанными2K_CRS.НайтиПоКоду(Чтение.Значение);
				КонецЕсли;
				
				Если УзелОтправитель = Неопределено Или УзелОтправитель.Пустая() Тогда
					Отказ = Истина;	
					Сообщение = "Данный отправитель не обнаружен системой!"
				КонецЕсли;
				
			КонецЕсли;
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "obj" Тогда
				ТекущийКодУзелИсточник = Чтение.ПолучитьАтрибут("УзелИсточник");
			КонецЕсли;
			
			ПродолжатьЧтение = Чтение.Прочитать();
			
		КонецЕсли;
		
		КоличествоНаборовРегистров = 0;
		
		Если ВозможностьЧтенияXML(Чтение) Тогда
			
			УзелИсточник = ПланыОбмена.ОбменДанными2K_CRS.НайтиПоКоду(ТекущийКодУзелИсточник);
			Значение = ПрочитатьXML(Чтение);
			ЭтоРегистр = Метаданные.РегистрыНакопления.Содержит(Значение.Метаданные()) Или 
						Метаданные.РегистрыСведений.Содержит(Значение.Метаданные());
			Значение.ОбменДанными.Загрузка = Истина;
			Если Не ЭтоРегистр Тогда
				Значение.ОбменДанными.Отправитель = УзелОтправитель;
				Значение.УзелИсточник = УзелИсточник;
				Сообщение = Сообщение + Символы.ПС+" ::  "+Значение;
				
				Попытка
					Значение.Записать();
					МассивПолученныхДанных.Добавить(Значение.Ссылка);
				Исключение
					Сообщение = Сообщение+ Символы.ПС + ОписаниеОшибки()
				КонецПопытки;
			Иначе
				КоличествоНаборовРегистров = КоличествоНаборовРегистров + 1;
				Попытка
					Значение.Записать();
					//МассивПолученныхДанных.Добавить("РС"+Формат(КоличествоНаборовРегистров, "ЧГ=0"));
				Исключение
					Сообщение = Сообщение+ Символы.ПС + ОписаниеОшибки()
				КонецПопытки;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Если Не Отказ И МассивПолученныхДанных.Количество() Тогда
		//Необходимо отправить подтверждение о получении данных источнику
		
		СтрокаВнутр = ЗначениеВСтрокуВнутр(МассивПолученныхДанных);
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку("UTF-8");
		Запись.ЗаписатьОбъявлениеXML();
		Запись.ЗаписатьНачалоЭлемента("root");
			Запись.ЗаписатьНачалоЭлемента("acceptence");
			Запись.ЗаписатьТекст(СтрокаВнутр);
			Запись.ЗаписатьКонецЭлемента();  //acceptence
			Запись.ЗаписатьНачалоЭлемента("message");
			Запись.ЗаписатьТекст(Сообщение);
			Запись.ЗаписатьКонецЭлемента();  //message
		Запись.ЗаписатьКонецЭлемента();  //root
		
		СтрXML = Запись.Закрыть();
		
		Возврат СтрXML;

	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТестВебСервисаВремяПодключения.УниверсальноеВремяВМиллисекундах КАК УниверсальноеВремяВМиллисекундах,
	//|	ТестВебСервисаВремяПодключения.Событие,
	//|	ТестВебСервисаВремяПодключения.ПрошлоСПоследнего,
	//|	ТестВебСервисаВремяПодключения.ПрошлоСНачала
	//|ИЗ
	//|	РегистрСведений.ТестВебСервисаВремяПодключения КАК ТестВебСервисаВремяПодключения
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	УниверсальноеВремяВМиллисекундах";
	//
	//Результат = Запрос.Выполнить();
	//
	//ТЗ_Результат = Результат.Выгрузить();
	//
	//
	//Возврат ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_Результат, Сообщение", ТЗ_Результат, Сообщение));

	//ЗафиксироватьВремяСобытия(ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах(), "Сформирован пакет данных, отправка");	
	
	Возврат 0
	
КонецФункции

Функция WSПолучитьНастройки(СтрXML) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("exch");
	Если СтрXML = "1" Тогда
	 	Запись.ЗаписатьНачалоЭлемента("idObj");

			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИдентификаторыОбъектовМетаданных.Ссылка
			|ИЗ
			|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
			|ГДЕ
			|	ИдентификаторыОбъектовМетаданных.Предопределенный = ЛОЖЬ
			|	И ИдентификаторыОбъектовМетаданных.ПометкаУдаления = ЛОЖЬ";
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбъектКВыгрузке = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				ЗаписатьXML(Запись, ОбъектКВыгрузке);
			КонецЦикла;
		
		Запись.ЗаписатьКонецЭлемента();  //idObj
	КонецЕсли;
	
		Запись.ЗаписатьНачалоЭлемента("params");
		
			ОбъектКВыгрузке = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел().ПолучитьОбъект();
			ЗаписатьXML(Запись, ОбъектКВыгрузке);
			    
		Запись.ЗаписатьКонецЭлемента();  //params
	Запись.ЗаписатьКонецЭлемента();  //exch
	
	СтрXML = Запись.Закрыть();

	Возврат СтрXML;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ ПО ПЛАНУ ОБМЕНА

Функция ПолучитьУзлыДляРегистрации()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменДанными2K_CRS.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменДанными2K_CRS КАК ОбменДанными2K_CRS
	               |ГДЕ
	               |	ОбменДанными2K_CRS.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел());
	МассивУзловДляОбмена = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат МассивУзловДляОбмена
	
КонецФункции

 Функция ПолучитьМассивУзловДляРегистрации(ИзПараметровСеанса = Ложь) Экспорт
	
	МассивУзлов = Новый Массив();
	
	Если ИзПараметровСеанса Тогда
		//ВсеУзлыДляОбмена = ПараметрыСеанса.ВсеУзлыДляОбмена
	Иначе
		ВсеУзлыДляОбмена = ПолучитьУзлыДляРегистрации()
	КонецЕсли; 	
	
	Для Каждого Элемент Из ВсеУзлыДляОбмена Цикл
		МассивУзлов.Добавить(Элемент);
	КонецЦикла;	
	
	Возврат МассивУзлов;
	
КонецФункции

Процедура ОпределитьПараметрыСеансаДляОбменаДанными() Экспорт
	
	// обмен в сети центральной ресторанной системы
	МассивУзловДляОбмена = ПолучитьУзлыДляРегистрации();	
	//ПараметрыСеанса.ВсеУзлыДляОбменаССайтомТоварами = Новый ФиксированныйМассив(МассивУзловДляОбмена);
	ВсеУзлыДляОбмена = Новый ФиксированныйМассив(МассивУзловДляОбмена);
		
	//ПараметрыСеанса.НаличиеОбменаЦРС = МассивУзловДляОбмена.Количество() > 0;
	НаличиеОбменаЦРС = МассивУзловДляОбмена.Количество() > 0;

	//ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов = Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();	
	
КонецПроцедуры

Функция ЭтоЦентральнаяБаза(Узел) Экспорт 

	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Узел", Узел);
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ОбменДанными2K_CRS.Ссылка
	//|ИЗ
	//|	ПланОбмена.ОбменДанными2K_CRS КАК ОбменДанными2K_CRS
	//|ГДЕ
	//|	ОбменДанными2K_CRS.Ссылка <> &Узел";
	//
	//Результат = Запрос.Выполнить();
	//
	//Возврат Не Результат.Пустой() И Узел.Ресторан.Пустая();
	Возврат Узел.Ресторан.Пустая();
	//проверку на то что база центральная,
	// если у узла нет заданного текущего ресторана, то это ЦБ
	// + в настройке должно быть указано, что это ЦБ

КонецФункции // ЭтоЦентральнаяБаза()

Функция ДоступноНесколькоТиповЦен(Узел) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменДанными2K_CRS.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменДанными2K_CRS КАК ОбменДанными2K_CRS
	|ГДЕ
	|	ОбменДанными2K_CRS.Ссылка <> &Узел";
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой() И Узел.Ресторан.Пустая();

КонецФункции // ЭтоЦентральнаяБаза()

Функция ПолучитьНастройкиДляВидаОбъекта(Знач ПолныеИменаОбъектов, ЭтотУзел) Экспорт

	Если ТипЗнч(ПолныеИменаОбъектов) = Тип("Строка") Тогда
		ПолныеИменаОбъектов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолныеИменаОбъектов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя КАК ОбъектПолноеИмя,
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки,
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ВидЗначимостиОбъекта,
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта
		|ИЗ
		|	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС
		|ГДЕ
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.Ссылка = &Узел
		|	И ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя В(&ПолныеИменаОбъектов)";

	Запрос.УстановитьПараметр("Узел", ЭтотУзел);
    Запрос.УстановитьПараметр("ПолныеИменаОбъектов", ПолныеИменаОбъектов);

	НастройкиСвязейМеждуБазамиРС = Запрос.Выполнить().Выгрузить();

	Возврат НастройкиСвязейМеждуБазамиРС;

КонецФункции // ПолучитьНастройкиДляВидаОбъекта()

Функция ПолучитьСтруктуруПравилИсточниковДляРегистрацииЕслиЭтоЦБ() Экспорт

	ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	
	мУзловКРегистрации = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
	|ГДЕ
	|	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка <> &ЭтотУзел
	|	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя В(&ИдентификаторОбъектаНастройки)
	|	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии))";
	
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		мУзловКРегистрации.Добавить(ВыборкаДетальныеЗаписи.Ссылка)
	КонецЦикла;
	
	Возврат мУзловКРегистрации;

КонецФункции // ПолучитьНастройкиДляВидаОбъекта()

Функция УстановитьКешПравилРегистрацииПоИсточникам() Экспорт

	ПараметрыСеанса.ОбменДаннымиПравилаИсточников = Новый ФиксированнаяСтруктура();

КонецФункции // УстановитьКешПравилРегистрацииПоИсточникам()

Функция ПолучитьКешПравилРегистрацииПоИсточникам() Экспорт

	//Кеш = ПараметрыСеанса.ОбменДаннымиПравилаИсточников;
	//Новый ФиксированнаяСтруктура

КонецФункции // ПолучитьКешПравилРегистрацииПоИсточникам()

Функция ПолучитьМассивУзловДляРегистрацииПоПравиламИсточников(Знач ПолныеИменаОбъектов, ЭтотУзел) Экспорт

	//Если ТипЗнч(ПолныеИменаОбъектов) = Тип("Строка") Тогда
	//	ПолныеИменаОбъектов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолныеИменаОбъектов);
	//КонецЕсли;
	//
	//ЭтоЦБ = ЭтоЦентральнаяБаза(ЭтотУзел);
	//ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	//
	//мУзловКРегистрации = Новый Массив;
	//
	//Если ЭтоЦБ Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка
	//	|ИЗ
	//	|	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
	//	|ГДЕ
	//	|	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка <> &ЭтотУзел
	//	|	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя В(&ИдентификаторОбъектаНастройки)
	//	|	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии))";
	//	
	//	Запрос.УстановитьПараметр("ИдентификаторОбъектаНастройки", ПолныеИменаОбъектов);
	//	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	//	
	//	Результат = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//	
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		мУзловКРегистрации.Добавить(ВыборкаДетальныеЗаписи.Ссылка)
	//	КонецЦикла;
	//	
	//	//...
	//Иначе
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка
	//	|ИЗ
	//	|	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
	//	|ГДЕ
	//	|	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ГлавныйУзел
	//	|	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя В(&ИдентификаторОбъектаНастройки)
	//	|	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана))
	//	|	И 1 В
	//	|			(ВЫБРАТЬ
	//	|				КОЛИЧЕСТВО(ОбменДанными2K.Ссылка) КАК Ссылка
	//	|			ИЗ
	//	|				ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K
	//	|			ГДЕ
	//	|				ОбменДанными2K.Ссылка = &ЭтотУзел
	//	|				И ОбменДанными2K.ИдентификаторОбъектаНастройки.ПолноеИмя В (&ИдентификаторОбъектаНастройки)
	//	|				И ОбменДанными2K.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана)))";
	//	
	//	Запрос.УстановитьПараметр("ИдентификаторОбъектаНастройки", ПолныеИменаОбъектов);
	//	Запрос.УстановитьПараметр("ГлавныйУзел", ГлавныйУзел);
	//	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	//	
	//	Результат = Запрос.Выполнить();
	//	
	//	ВыборкаИтоги = Результат.Выбрать();
	//	
	//	Пока ВыборкаИтоги.Следующий() Цикл
	//		мУзловКРегистрации.Добавить(ВыборкаИтоги.Ссылка)			
	//	КонецЦикла;

	//КонецЕсли;
	
	//Костенюк Александр-Старт 11.12.2013
	// Проверка на ЦБ уже не имеет смысла, т.к. она перенесена в фунцкию СформироватьТаблицуНастроекРИБ()
	// в которой в зависимости от того на какой стороне(главный либо подчиненный узел)
	// выполняется один либо другой запрос и возвращается таблица настроек РИБ для текущего узла
	мУзловКРегистрации = Новый Массив;
	СтруктураПравил = ПараметрыСеанса.ОбменДаннымиПравилаИсточников.Получить();
	ТаблицаНастроекРИБ = СтруктураПравил.ТаблицаНастроекРИБ;
	НайденныеСтроки = ТаблицаНастроекРИБ.НайтиСтроки(Новый Структура("ПолноеИмя", ПолныеИменаОбъектов)); 		
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если (мУзловКРегистрации.Найти(НайденнаяСтрока.Ссылка) = Неопределено) Тогда
			мУзловКРегистрации.Добавить(НайденнаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	//Костенюк Александр-Финиш 11.12.2013
	
	Возврат мУзловКРегистрации;

КонецФункции // ПолучитьМассивУзловДляРегистрацииПоПравиламИсточников()

Функция ПолучитьМассивУзловДляРегистрацииПоПравиламРесурсов(Знач ПолныеИменаОбъектов, ЭтотУзел) Экспорт

	//Если ТипЗнч(ПолныеИменаОбъектов) = Тип("Строка") Тогда
	//	ПолныеИменаОбъектов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолныеИменаОбъектов);
	//КонецЕсли;
	//
	//ЭтоЦБ = ЭтоЦентральнаяБаза(ЭтотУзел);
	//ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	//ЭтотУзелБ = ПланыОбмена.ОбменДанными2K_CRSБухгалтерия.ЭтотУзел();
	//
	//мУзловКРегистрации = Новый Массив;
	//
	//Если ЭтоЦБ Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОбменДанными2K_CRSБухгалтерия.Ссылка
	//	|ИЗ
	//	|	ПланОбмена.ОбменДанными2K_CRSБухгалтерия КАК ОбменДанными2K_CRSБухгалтерия
	//	|ГДЕ
	//	|	ОбменДанными2K_CRSБухгалтерия.Ссылка <> &ЭтотУзелБ И 
	//	|	1 В
	//	|			(ВЫБРАТЬ
	//	|				КОЛИЧЕСТВО(ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка) КАК Ссылка
	//	|			ИЗ
	//	|				ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
	//	|			ГДЕ
	//	|				ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ЭтотУзел
	//	|				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя В (&ИдентификаторОбъектаНастройки)
	//	|				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаБухгалтерии)))";
	//	
	//	Запрос.УстановитьПараметр("ИдентификаторОбъектаНастройки", ПолныеИменаОбъектов);
	//	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	//	Запрос.УстановитьПараметр("ЭтотУзелБ", ЭтотУзелБ);
	//	
	//	Результат = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//	
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		мУзловКРегистрации.Добавить(ВыборкаДетальныеЗаписи.Ссылка)
	//	КонецЦикла;
	//	
	//	//...
	//Иначе
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОбменДанными2K_CRSБухгалтерияНастройкиСвязейМеждуБазамиРС.Ссылка
	//	|ИЗ
	//	|	ПланОбмена.ОбменДанными2K_CRSБухгалтерия.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSБухгалтерияНастройкиСвязейМеждуБазамиРС
	//	|ГДЕ
	//	|	1 В
	//	|			(ВЫБРАТЬ
	//	|				КОЛИЧЕСТВО(ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка) КАК Ссылка
	//	|			ИЗ
	//	|				ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
	//	|			ГДЕ
	//	|				ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ЭтотУзел
	//	|				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя В (&ИдентификаторОбъектаНастройки)
	//	|				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии)))
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка
	//	|ИЗ
	//	|	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
	//	|ГДЕ
	//	|	1 В
	//	|			(ВЫБРАТЬ
	//	|				КОЛИЧЕСТВО(ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка) КАК Ссылка
	//	|			ИЗ
	//	|				ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
	//	|			ГДЕ
	//	|				ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ЭтотУзел
	//	|				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя В (&ИдентификаторОбъектаНастройки)
	//	|				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы)))
	//	|	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ГлавныйУзел";
	//	
	//	Запрос.УстановитьПараметр("ИдентификаторОбъектаНастройки", ПолныеИменаОбъектов);
	//	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	//	Запрос.УстановитьПараметр("ГлавныйУзел", ГлавныйУзел);
	//	
	//	Результат = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//	
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		мУзловКРегистрации.Добавить(ВыборкаДетальныеЗаписи.Ссылка)
	//	КонецЦикла;

	//КонецЕсли;
	
	//Костенюк Александр-Старт 11.12.2013
	мУзловКРегистрации = Новый Массив;
	СтруктураПравил = ПараметрыСеанса.ОбменДаннымиПравилаИсточников.Получить();
	ТаблицаНастроекРИББух = СтруктураПравил.ТаблицаНастроекРИББух;
	НайденныеСтроки = ТаблицаНастроекРИББух.НайтиСтроки(Новый Структура("ПолноеИмя", ПолныеИменаОбъектов)); 		
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если (мУзловКРегистрации.Найти(НайденнаяСтрока.Ссылка) = Неопределено) Тогда
			мУзловКРегистрации.Добавить(НайденнаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	//Костенюк Александр-Финиш 11.12.2013
	
	Возврат мУзловКРегистрации;

КонецФункции // ПолучитьНастройкиДляВидаОбъекта()



Функция НеобходимоЗарегистрироватьИзмененияДляОбъекта(ИсточникОбъект, ПолноеИмяОбъекта, ЭтотУзел, УзелИсточник)
	
	Перем ИсточникДанных, ВидОбъекта; 
	
	Если ИсточникОбъект.ОбменДанными.Загрузка Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	НеобходимаРегистрация = Истина;
	
	УзелЦБ = ПланыОбмена.ОбменДанными2K_CRS.ПустаяСсылка();
	
	ЭтоЦБ = ЭтоЦентральнаяБаза(ЭтотУзел);
	
	НастройкиСвязейМеждуБазамиРС = ПолучитьНастройкиДляВидаОбъекта(ПолноеИмяОбъекта, ЭтотУзел);

	Если НастройкиСвязейМеждуБазамиРС.Количество() = 0 Тогда
		НеобходимаРегистрация = Ложь;	
	КонецЕсли;
	
	Если НеобходимаРегистрация Тогда
		
		Если ЭтоЦБ Тогда
		    // из центральной пока всегда Истина
			Если ИсточникДанных = "ЦРС" И ВидОбъекта = "Общеструктурный" Тогда
				НеобходимаРегистрация = Истина;
			ИначеЕсли ИсточникДанных = "ПРС" И ВидОбъекта = "Общеструктурный" Тогда
				НеобходимаРегистрация = Истина;
			ИначеЕсли ИсточникДанных = "ЦРС" И ВидОбъекта = "Локальный" Тогда
				НеобходимаРегистрация = Истина;
			ИначеЕсли ИсточникДанных = "ПРС" И ВидОбъекта = "Локальный" Тогда
				НеобходимаРегистрация = Истина;
			КонецЕсли;
			
			Если ИсточникДанных = "ЦРС" Тогда
				НеобходимаРегистрация = Истина;
			ИначеЕсли ИсточникДанных = "ПРС" Тогда
				НеобходимаРегистрация = Ложь;
			КонецЕсли;
		
		Иначе
		
			Если ИсточникДанных = "ЦРС" И ВидОбъекта = "Общеструктурный" Тогда
				НеобходимаРегистрация = Ложь;
			ИначеЕсли ИсточникДанных = "ПРС" И ВидОбъекта = "Общеструктурный" Тогда
				НеобходимаРегистрация = Ложь;
			ИначеЕсли ИсточникДанных = "ЦРС" И ВидОбъекта = "Локальный" Тогда
				НеобходимаРегистрация = Истина;
			ИначеЕсли ИсточникДанных = "ПРС" И ВидОбъекта = "Локальный" Тогда
				НеобходимаРегистрация = Истина;
			КонецЕсли;	
			
			Если ИсточникДанных = "ЦРС" Тогда
				НеобходимаРегистрация = Ложь;
			ИначеЕсли ИсточникДанных = "ПРС" Тогда
				НеобходимаРегистрация = Истина;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
			
	Возврат НеобходимаРегистрация;
	
КонецФункции

Процедура ЗарегистрироватьИзменения(Объект, ВидОбъектаИсточника, ЭтоНовыйОбъект, МетаданныеОбъекта, ЭтотУзел, УзелИсточник) Экспорт 
	
	//Если Не ПараметрыСеанса.НаличиеОбменаЦРС Тогда
	//	Возврат;
	//КонецЕсли;
	Если ВидОбъектаИсточника = "РегистрыСведений" Тогда
		Возврат
	КонецЕсли;
	
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	МассивУзлов = ПолучитьМассивУзловДляРегистрацииПоПравиламИсточников(ПолноеИмяОбъекта, ЭтотУзел);
	
	//Если Не НеобходимоЗарегистрироватьИзмененияДляОбъекта(Объект, ПолноеИмяОбъекта, ЭтотУзел, УзелИсточник) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//МассивУзлов = ПолучитьМассивУзловДляРегистрации();
	//
	Если МассивУзлов.Количество() Тогда   
		
		Если ЭтоНовыйОбъект Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор;
			Если ВидОбъектаИсточника = "Справочники" Тогда
				СсылкаНового = Справочники[МетаданныеОбъекта.Имя].ПолучитьСсылку(УникальныйИдентификатор);
            ИначеЕсли ВидОбъектаИсточника = "Документы" Тогда
				СсылкаНового = Документы[МетаданныеОбъекта.Имя].ПолучитьСсылку(УникальныйИдентификатор);
			КонецЕсли;	
			Объект.УстановитьСсылкуНового(СсылкаНового);
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.ПолучитьСсылкуНового());
		Иначе
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры	


// Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений
// 
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем набор записей регистра
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
КонецФункции

// Добавляет одну запись в регистр сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись
// 
Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	// добавляем только одну запись в новый набор записей
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет запись в регистр сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать менеджер записи и обновить запись
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо обновить запись
// 
Процедура ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем менеджер записи регистра
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			МенеджерЗаписи[Измерение.Имя] = СтруктураЗаписи[Измерение.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
	// считываем запись из базы данных
	МенеджерЗаписи.Прочитать();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи);
	
	// записываем менеджер записи
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии = Ложь)
	
	МассивКолонок = Новый Массив();
	Для Каждого КолонкаТаблицы Из ТаблицаДвижений.Колонки Цикл
		
		Если КолонкаТаблицы.Имя = "МоментВремени"
			ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоДт") = 1
			ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоКт") = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(КолонкаТаблицы.Имя, "СубконтоДт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоДт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоДт");	
			Конецесли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(КолонкаТаблицы.Имя, "СубконтоКт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоКт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоКт");	
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		МассивКолонок.Добавить(КолонкаТаблицы.Имя);
		
	КонецЦикла;
	
	Возврат МассивКолонок;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ПРОФИЛЯМИ (НАСТРОЙКАМИ)

Функция ОпределитьОтправкаВозможна(ОффЛайнВыгрузка = Ложь)
	
	Если ОффЛайнВыгрузка Тогда
		Возврат Истина
	КонецЕсли;
	
	Возврат Истина; // проверка доступности веб сервиса
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ НАСТРОЙКАМИ ОБМЕНА

Процедура ПолучитьНастройкиИзЦентральнойБазы(ПолучатьИдентификаторы = Ложь) Экспорт

	Если НЕ ОпределитьОтправкаВозможна() Тогда
		
		#Если Клиент Тогда
			Сообщить("Загрузка не произведена.");
		#КонецЕсли
		Возврат;
		
	КонецЕсли;
	
	ВебСервис = Неопределено;
	
	СтрокаСообщенияОбОшибке = "";
	СтруктураОбмена = Новый Структура;
	СтруктураОбмена.Вставить("ЭтотУзел", ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел());
	Если Не ПолученВебСервис(ВебСервис, СтруктураОбмена, СтрокаСообщенияОбОшибке) Тогда
		#Если Клиент Тогда
			Сообщить("Загрузка не произведена."+ Символы.ПС + СтрокаСообщенияОбОшибке);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Ответ = "0";
	Попытка
		Ответ = ВебСервис.ПолучитьНастройки(?(ПолучатьИдентификаторы, "1", ""));
	Исключение
		Ответ = "0";
	КонецПопытки;
	Если Ответ = "0" Тогда
		#Если Клиент Тогда
			Сообщить("Не удалось обратиться к веб сервису");
		#КонецЕсли
	КонецЕсли;
	
	Если Ответ = "0" Тогда //Ошибка
		ПродолжатьОбмен = Ложь
	ИначеЕсли Ответ = "100" Тогда //Отсутствуют объекты для передачи
		ПродолжатьОбмен = Ложь
	Иначе 
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(Ответ);
		Чтение.ПерейтиКСодержимому();
		
		ПродолжатьЧтение = Чтение.Прочитать();
		
		Сообщение = "";
		Сообщение = Сообщение + "Переданы следующие данные:";
		
		УзелОтправитель = Неопределено;
		Отказ = Ложь;
		
		Пока ПродолжатьЧтение И Не ВозможностьЧтенияXML(Чтение) Цикл
			ПродолжатьЧтение = Чтение.Прочитать()
		КонецЦикла;
		
		Пока ВозможностьЧтенияXML(Чтение) Цикл
			
			Значение = ПрочитатьXML(Чтение);
			
			Если ТипЗнч(Значение) = Тип("ПланОбменаОбъект.ОбменДанными2K_CRS") Тогда
				ЭтотУзел = СтруктураОбмена.ЭтотУзел.ПолучитьОбъект();
				ЭтотУзел.НастройкиСвязейМеждуБазамиРС.Загрузить(Значение.НастройкиСвязейМеждуБазамиРС.Выгрузить());
				
				Попытка
					ЭтотУзел.Записать();
				Исключение
					Сообщение = Сообщение+ Символы.ПС + ОписаниеОшибки()
				КонецПопытки;
			Иначе
				Попытка
					Значение.ОбменДанными.Загрузка = Истина;
					Значение.Записать();
				Исключение
					Сообщение = Сообщение+ Символы.ПС + ОписаниеОшибки()
				КонецПопытки;	
			КонецЕсли;
			
			
		КонецЦикла; 
		
		Чтение.Закрыть();

	КонецЕсли;
	
КонецПроцедуры

//Костенюк Александр-Старт 04.12.2013
// 
// Процедура формирует таблицу настроек РИБ
//
// Параметры:
// Нет.
// 
Функция СформироватьТаблицуНастроекРИБ() Экспорт
	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	ЭтоЦБ = ЭтоЦентральнаяБаза(ЭтотУзел);
	
	Если ЭтоЦБ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка,
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки,
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя КАК ПолноеИмя
		               |ИЗ
		               |	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
		               |ГДЕ
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка <> &ЭтотУзел
		               |	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы))";
		Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	Иначе
		СписокИмен = Новый СписокЗначений;
		СписокИмен.Добавить("Справочник.Пользователи");
		СписокИмен.Добавить("Справочник.ВидыСертификатов");
		СписокИмен.Добавить("Справочник.Сертификаты");
		СписокИмен.Добавить("Справочник.ТипыАкций");
		//СписокИмен.Добавить("Справочник.КатегорииДокументов");
		СписокИмен.Добавить("Справочник.Компьютеры");
		СписокИмен.Добавить("Справочник.МестаХранения");
		СписокИмен.Добавить("Справочник.РабочиеСмены");
		СписокИмен.Добавить("Справочник.Комнаты");
		СписокИмен.Добавить("Справочник.ТипыКомнат");
		СписокИмен.Добавить("Справочник.КассыККМ");
		СписокИмен.Добавить("Справочник.ИнформационныеКарты");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка,
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки,
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя КАК ПолноеИмя
		               |ИЗ
		               |	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
		               |ГДЕ
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ГлавныйУзел
		               |	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана))
		               |	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя В(&СписокИмен)";
		Запрос.УстановитьПараметр("ГлавныйУзел", ГлавныйУзел);
		Запрос.УстановитьПараметр("СписокИмен", СписокИмен);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции
//Костенюк Александр-Финиш 04.12.2013

//Костенюк Александр-Старт 05.12.2013
// 
// Процедура формирует таблицу настроек РИБ
//
// Параметры:
// Нет.
// 
Функция СформироватьТаблицуНастроекРИББух() Экспорт
	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	ЭтотУзелБух = ПланыОбмена.ОбменДанными2K_CRSБухгалтерия.ЭтотУзел();
	ЭтоЦБ = ЭтоЦентральнаяБаза(ЭтотУзел);
	
	Если ЭтоЦБ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбменДанными2K_CRSБухгалтерия.Ссылка,
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя КАК ПолноеИмя
		               |ИЗ
		               |	ПланОбмена.ОбменДанными2K_CRSБухгалтерия КАК ОбменДанными2K_CRSБухгалтерия,
		               |	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
		               |ГДЕ
		               |	ОбменДанными2K_CRSБухгалтерия.Ссылка <> &ЭтотУзелБух
		               |	И 1 В
		               |			(ВЫБРАТЬ
		               |				КОЛИЧЕСТВО(ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка) КАК Ссылка
		               |			ИЗ
		               |				ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
		               |			ГДЕ
		               |				ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ЭтотУзел
		               |				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаБухгалтерии)))";
		Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
		Запрос.УстановитьПараметр("ЭтотУзелБух", ЭтотУзелБух);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбменДанными2K_CRSБухгалтерияНастройкиСвязейМеждуБазамиРС.Ссылка,
		               |	ОбменДанными2K_CRSБухгалтерияНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя КАК ПолноеИмя
		               |ИЗ
		               |	ПланОбмена.ОбменДанными2K_CRSБухгалтерия.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSБухгалтерияНастройкиСвязейМеждуБазамиРС
		               |ГДЕ
		               |	1 В
		               |			(ВЫБРАТЬ
		               |				КОЛИЧЕСТВО(ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка) КАК Ссылка
		               |			ИЗ
		               |				ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
		               |			ГДЕ
		               |				ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ЭтотУзел
		               |				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии)))
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка,
		               |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя
		               |ИЗ
		               |	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
		               |ГДЕ
		               |	1 В
		               |			(ВЫБРАТЬ
		               |				КОЛИЧЕСТВО(ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка) КАК Ссылка
		               |			ИЗ
		               |				ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
		               |			ГДЕ
		               |				ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ЭтотУзел
		               |				И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта В (ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии), ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы)))
		               |	И ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ГлавныйУзел";
		Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
		Запрос.УстановитьПараметр("ГлавныйУзел", ГлавныйУзел);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
		
	Возврат Результат;
	
КонецФункции
//Костенюк Александр-Финиш 05.12.2013


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ЗАГРУЗКОЙ ДАННЫХ

Процедура ЗагрузитьДанные() Экспорт
	
	ОффЛайнЗагрузка = Ложь;
	
	мСтруктураИнформацииИсторииОбмена = ПолучитьСтруктуруИнформацииДляИстории();
	
	РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	
	мСтруктураИнформацииИсторииОбмена.Событие = "Старт выгрузки данных";
	мСтруктураИнформацииИсторииОбмена.УниверсальноеВремяВМиллисекундах = ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах();

	ЗафиксироватьВремяСобытия(мСтруктураИнформацииИсторииОбмена, Истина);	
	
	СтруктураОбмена = Новый Структура;
	СтруктураОбмена.Вставить("ЭтотУзел", ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел());
	
	ПолучитьОбъекты(мСтруктураИнформацииИсторииОбмена, СтруктураОбмена, РезультатВыполненияОбмена);
	
	мСтруктураИнформацииИсторииОбмена.Событие = "Финиш выгрузки данных";
	мСтруктураИнформацииИсторииОбмена.РезультатВыполненияОбмена = РезультатВыполненияОбмена;
	мСтруктураИнформацииИсторииОбмена.Комментарий = мСтруктураИнформацииИсторииОбмена.СообщениеПользователю + Символы.ПС + мСтруктураИнформацииИсторииОбмена.Комментарий;
	ЗафиксироватьВремяСобытия(мСтруктураИнформацииИсторииОбмена);	
	
КонецПроцедуры

Процедура ПолучитьОбъекты(мСтруктураИнформацииИсторииОбмена, СтруктураОбмена, РезультатВыполненияОбмена, ОффЛайнЗагрузка = Ложь)

	Если НЕ ОпределитьОтправкаВозможна(ОффЛайнЗагрузка) Тогда
		
		//СообщитьПользователю(мСтруктураИнформацииИсторииОбмена, "Загрузка не произведена.", Истина);
		мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Загрузка не произведена.");
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		Возврат;
		
	КонецЕсли;
	
	ВебСервис = Неопределено;
	
	СтрокаСообщенияОбОшибке = "";
	
	Если Не ОффЛайнЗагрузка И Не ПолученВебСервис(ВебСервис, СтруктураОбмена, СтрокаСообщенияОбОшибке) Тогда
		//СообщитьПользователю(мСтруктураИнформацииИсторииОбмена, "Загрузка не произведена."+ Символы.ПС + СтрокаСообщенияОбОшибке, Истина);
		мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Загрузка не произведена."+ Символы.ПС + СтрокаСообщенияОбОшибке);
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		Возврат;
	КонецЕсли;

	МассивПолученныхДанных = Новый Массив;
	ПродолжатьОбмен = Истина;
	
	Если ОффЛайнЗагрузка Тогда
		Ответ = "";
		#Если Клиент Тогда
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл...";
			Диалог.Фильтр = "xml документ (*.xml)|*.xml|";
			Если Не Диалог.Выбрать() Тогда
				Возврат;
			КонецЕсли;
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(Диалог.ПолноеИмяФайла);
			Ответ = Текст.ПолучитьТекст();	
		#Иначе
			Возврат;
		#КонецЕсли
		
		ПринятьИзмененияПолученныхОбъектов(Ответ, МассивПолученныхДанных, мСтруктураИнформацииИсторииОбмена);	
	Иначе
		н = 1;
		Пока ПродолжатьОбмен Цикл
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку("UTF-8");
			Запись.ЗаписатьОбъявлениеXML();
			Запись.ЗаписатьНачалоЭлемента("root");
			
				//Отправим XML с кодом этого узла, чтобы сервер прислал для него изменения
				Запись.ЗаписатьНачалоЭлемента("sender");
				Запись.ЗаписатьТекст(СтруктураОбмена.ЭтотУзел.Код);
				Запись.ЗаписатьКонецЭлемента();  //sender
			
				Если МассивПолученныхДанных.Количество() Тогда
					
					//Необходимо отправить подтверждение о получении данных источнику
					//Отправим XML с кодом этого узла, чтобы сервер прислал для него изменения
					
					МассивПолученныхДанныхВСтроку = ЗначениеВСтрокуВнутр(МассивПолученныхДанных);
					Запись.ЗаписатьНачалоЭлемента("acceptence");
					Запись.ЗаписатьТекст(МассивПолученныхДанныхВСтроку);
					Запись.ЗаписатьКонецЭлемента();  //acceptence
				
				КонецЕсли;
			
			Запись.ЗаписатьКонецЭлемента();  //root
			СтрXML = Запись.Закрыть();
			
			Ответ = ВебСервисПолучитьСообщение(ВебСервис, СтрXML, мСтруктураИнформацииИсторииОбмена);
			
			Если Ответ = "0" Тогда //Ошибка
				ПродолжатьОбмен = Ложь;
				мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Не удалось обратиться к веб сервису"); 
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			ИначеЕсли Ответ = "100" Тогда //Отсутствуют объекты для передачи
				ПродолжатьОбмен = Ложь;
				мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Отсутствуют объекты для передачи"); 
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
			Иначе 
				ПродолжатьОбмен = н < 4;
				ПринятьИзмененияПолученныхОбъектов(Ответ, МассивПолученныхДанных, мСтруктураИнформацииИсторииОбмена);	
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
			КонецЕсли;
			
			н = н + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВебСервисПолучитьСообщение(ВебСервис, СтрXML, мСтруктураИнформацииИсторииОбмена)

	Ответ = "0";
	Попытка
		Ответ = ВебСервис.ПолучитьСообщение(СтрXML);
	Исключение
		Ответ = "0";
	КонецПопытки;
	Если Ответ = "0" Тогда
		#Если Клиент Тогда
			Сообщить("Не удалось обратиться к веб сервису");
		#КонецЕсли
		мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Не удалось обратиться к веб сервису"); 
	КонецЕсли;
	
	Возврат Ответ
	
КонецФункции // ВебСервисПолучитьСообщение()

Процедура ПринятьИзмененияПолученныхОбъектов(СтрокаXML, МассивПолученныхДанных, мСтруктураИнформацииИсторииОбмена)

	Если ПустаяСтрока(СтрокаXML) Тогда
		Возврат
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаXML);
	Чтение.ПерейтиКСодержимому();
	
	ПродолжатьЧтение = Чтение.Прочитать();
	
	Сообщение = "";
	Сообщение = Сообщение + "Переданы следующие данные:";
	
	УзелОтправитель = Неопределено;
	Отказ = Ложь;
	
	Пока ПродолжатьЧтение И Не ВозможностьЧтенияXML(Чтение) Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "sender" Тогда
			//это узел отправитель
			
			ПродолжатьЧтение = Чтение.Прочитать();
			
			Если Не ПустаяСтрока(Чтение.Значение) Тогда
				УзелОтправитель = ПланыОбмена.ОбменДанными2K_CRS.НайтиПоКоду(Чтение.Значение);
			КонецЕсли;
			
			Если УзелОтправитель = Неопределено Или УзелОтправитель.Пустая() Тогда
				Отказ = Истина;	
				Сообщение = "Данный отправитель не обнаружен системой!"
			КонецЕсли;
			
		КонецЕсли;
		ПродолжатьЧтение = Чтение.Прочитать()
	КонецЦикла;
	
	Если Не Отказ Тогда
		Пока ПродолжатьЧтение Цикл
			
			Значение = ПрочитатьXML(Чтение);
			ЭтоРегистр = Метаданные.РегистрыНакопления.Содержит(Значение.Метаданные()) Или 
						Метаданные.РегистрыСведений.Содержит(Значение.Метаданные());
			Значение.ОбменДанными.Загрузка = Истина;
			Значение.ОбменДанными.Отправитель = УзелОтправитель;
			Если Не ЭтоРегистр Тогда
				
				Сообщение = Сообщение + Символы.ПС+" ::  "+Значение;
				
				Попытка
					Значение.Записать();
					МассивПолученныхДанных.Добавить(Значение.Ссылка);
				Исключение
					Сообщение = Сообщение+ Символы.ПС + ОписаниеОшибки()
				КонецПопытки;
			Иначе
				Попытка
					Значение.Записать();
				Исключение
					Сообщение = Сообщение+ Символы.ПС + ОписаниеОшибки()
				КонецПопытки;	
			КонецЕсли;

			Если Чтение.Имя = "rg" Тогда
		    	ПродолжатьЧтение = Чтение.Прочитать();
				ПродолжатьЧтение = Чтение.Прочитать()
			КонецЕсли;
			
			ПродолжатьЧтение = ВозможностьЧтенияXML(Чтение)
			
		КонецЦикла; 
	КонецЕсли;
	
	Чтение.Закрыть();

	мСтруктураИнформацииИсторииОбмена.Комментарий = Сообщение;
	
КонецПроцедуры

Процедура ПодготовитьНеобновляемыеРеквизитыОбъекта(Объект, ВидПодготовки, Направление, ОтправкаЭлемента = Неопределено) Экспорт 

	Перем ИсточникДанных, ВидОбъекта;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Если ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		Возврат	
	КонецЕсли;
	
	//Костенюк Александр-Старт 26.08.2014
	// При обмене очищаются ссылочные типы для новых объектов
	Если Объект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	//Костенюк Александр-Финиш 26.08.2014
	
	ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	ЭтоЦБ = ЭтоЦентральнаяБаза(ЭтотУзел);
	
	СоответствиеИмяРеквизитаПолноеИмяОбъекта = Новый Соответствие;
	
	СписокИменРеквизитовКОбработке = Новый Массив;
	
	Если ОбщегоНазначения.ЭтоКонстанта(МетаданныеОбъекта) Тогда
		
		ТипЗнчОбъектИмяРеквизита = ТипЗнч(Объект.Значение);
		Если ТипЗнчОбъектИмяРеквизита = Тип("Строка")      
			Или ТипЗнчОбъектИмяРеквизита = Тип("Булево")
			Или ТипЗнчОбъектИмяРеквизита = Тип("Неопределено")
			Или ТипЗнчОбъектИмяРеквизита = Тип("Null")
			Или ТипЗнчОбъектИмяРеквизита = Тип("Число")
			Или ТипЗнчОбъектИмяРеквизита = Тип("ХранилищеЗначения")
			Или ТипЗнчОбъектИмяРеквизита = Тип("Дата") 
			Или ТипЗнчОбъектИмяРеквизита = Тип("УникальныйИдентификатор") 
			Или Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнчОбъектИмяРеквизита)
			Или (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнчОбъектИмяРеквизита) И Объект.Значение.Предопределенный) Тогда
			
		Иначе
			
			ПолноеИмяОбъекта = Объект.Значение.Метаданные().ПолноеИмя();
			
			СписокИменРеквизитовКОбработке.Добавить(ПолноеИмяОбъекта);
			СоответствиеИмяРеквизитаПолноеИмяОбъекта.Вставить(ПолноеИмяОбъекта, МетаданныеОбъекта.Имя);
			
		КонецЕсли;
		
	Иначе
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			
			РеквизитИмя = Реквизит.Имя;               
			
			ТипЗнчОбъектИмяРеквизита = ТипЗнч(Объект[РеквизитИмя]);
			Если ТипЗнчОбъектИмяРеквизита = Тип("Строка")      
				Или ТипЗнчОбъектИмяРеквизита = Тип("Булево")
				Или ТипЗнчОбъектИмяРеквизита = Тип("Неопределено")
				Или ТипЗнчОбъектИмяРеквизита = Тип("Null")
				Или ТипЗнчОбъектИмяРеквизита = Тип("Число")
				Или ТипЗнчОбъектИмяРеквизита = Тип("ХранилищеЗначения")
				Или ТипЗнчОбъектИмяРеквизита = Тип("Дата") 
				Или ТипЗнчОбъектИмяРеквизита = Тип("УникальныйИдентификатор") 
				Или Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнчОбъектИмяРеквизита)
				Или (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнчОбъектИмяРеквизита) И Объект[РеквизитИмя].Предопределенный) Тогда
				Продолжить;		
			КонецЕсли;
			
			ПолноеИмяОбъекта = Объект[РеквизитИмя].Метаданные().ПолноеИмя();
			
			СписокИменРеквизитовКОбработке.Добавить(ПолноеИмяОбъекта);
			СоответствиеИмяРеквизитаПолноеИмяОбъекта.Вставить(ПолноеИмяОбъекта, РеквизитИмя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокИменРеквизитовКОбработке.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Направление", Направление);        // 1 - ЦРС => Ресторан; 0 - ЦРС <= Ресторан
	Запрос.УстановитьПараметр("УзелНастройки", ЭтотУзел);        
	Запрос.УстановитьПараметр("ЭтоЦБ", ЭтоЦБ);        
	Запрос.УстановитьПараметр("ТаблицаГрупп", ОбменДаннымиПовтИсп.ПолучитьТаблицуИерархииИдентификаторов());
	Запрос.УстановитьПараметр("СписокИменРеквизитовКОбработке", СписокИменРеквизитовКОбработке);

	Запрос.Текст = "ВЫБРАТЬ
				   |	ТаблицаГрупп.ПолноеИмяОбъекта,
				   |	ТаблицаГрупп.ГруппаОбъекта,
				   |	ТаблицаГрупп.ДоступностьЛБР,
				   |	ТаблицаГрупп.ДоступностьЦБР,
				   |	ТаблицаГрупп.ДоступностьЛБК,
				   |	ТаблицаГрупп.ДоступностьЦБК
				   |ПОМЕСТИТЬ ТаблицаГрупп
				   |ИЗ
				   |	&ТаблицаГрупп КАК ТаблицаГрупп
				   |ГДЕ
				   |	ТаблицаГрупп.ПолноеИмяОбъекта В(&СписокИменРеквизитовКОбработке)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТаблицаГрупп.ПолноеИмяОбъекта
				   |ИЗ
				   |	ТаблицаГрупп КАК ТаблицаГрупп
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
				   |		ПО ТаблицаГрупп.ПолноеИмяОбъекта = ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя
				   |			И (ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &УзелНастройки)
				   |ГДЕ
				   |	ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИсточникДанныхОбъекта <> ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы)
				   |	И &Направление = 1 И &ЭтоЦБ = Ложь
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ТаблицаГрупп.ПолноеИмяОбъекта
				   |ИЗ
				   |	ТаблицаГрупп КАК ТаблицаГрупп
				   |ГДЕ
				   |	ТаблицаГрупп.ГруппаОбъекта = ""Не передавать""";
	
	НастройкиСвязейМеждуБазамиРС = Запрос.Выполнить().Выгрузить();  
		                                                   
	Если ОбщегоНазначения.ЭтоКонстанта(МетаданныеОбъекта) И НастройкиСвязейМеждуБазамиРС.Количество() Тогда
		Если ВидПодготовки = "Выгрузка" Тогда
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать
		ИначеЕсли ВидПодготовки = "Загрузка" Тогда
			ОтправкаЭлемента = ПолучениеЭлементаДанных.Игнорировать
		КонецЕсли;			
	Иначе
		Для каждого НастройкаДляОбъекта Из НастройкиСвязейМеждуБазамиРС Цикл
			
			ИмяРеквизита = СоответствиеИмяРеквизитаПолноеИмяОбъекта.Получить(НастройкаДляОбъекта.ПолноеИмяОбъекта);	
			
			//Костенюк Александр-Старт 24.10.2014
			Если (ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура")) И (ИмяРеквизита = "НоменклатурнаяГруппа") Тогда
				Продолжить;
			КонецЕсли;
			//Костенюк Александр-Финиш 24.10.2014
			
			Если ВидПодготовки = "Выгрузка" Тогда
				Объект[ИмяРеквизита] = Неопределено
			ИначеЕсли ВидПодготовки = "Загрузка" Тогда
				Объект[ИмяРеквизита] = Объект.Ссылка[ИмяРеквизита]
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Костенюк Александр-Старт 19.12.2013
Процедура ПодготовитьНеобновляемыеРеквизитыРегистра(Объект, ВидПодготовки, Направление, ОтправкаЭлемента = Неопределено) Экспорт 

	Перем ИсточникДанных, ВидОбъекта;
	
	Если Объект.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	ЭтоЦБ = ЭтоЦентральнаяБаза(ЭтотУзел);
	
	СоответствиеИмяРеквизитаПолноеИмяОбъекта = Новый Соответствие;
	
	СписокИменРеквизитовКОбработке = Новый Массив;
	
	Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
		
		РесурсИмя = Ресурс.Имя;               
		
		ТипЗнчОбъектИмяРесурса = ТипЗнч(Объект[0][РесурсИмя]);
		Если ТипЗнчОбъектИмяРесурса = Тип("Строка")      
			Или ТипЗнчОбъектИмяРесурса = Тип("Булево")
			Или ТипЗнчОбъектИмяРесурса = Тип("Неопределено")
			Или ТипЗнчОбъектИмяРесурса = Тип("Null")
			Или ТипЗнчОбъектИмяРесурса = Тип("Число")
			Или ТипЗнчОбъектИмяРесурса = Тип("ХранилищеЗначения")
			Или ТипЗнчОбъектИмяРесурса = Тип("Дата") 
			Или ТипЗнчОбъектИмяРесурса = Тип("УникальныйИдентификатор") 
			Или Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнчОбъектИмяРесурса)
			Или (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнчОбъектИмяРесурса) И Объект[0][РесурсИмя].Предопределенный) Тогда
			Продолжить;		
		КонецЕсли;
		
		ПолноеИмяОбъекта = Объект[0][РесурсИмя].Метаданные().ПолноеИмя();
		
		СписокИменРеквизитовКОбработке.Добавить(ПолноеИмяОбъекта);
		СоответствиеИмяРеквизитаПолноеИмяОбъекта.Вставить(ПолноеИмяОбъекта, РесурсИмя);
		
	КонецЦикла;
		
	Если СписокИменРеквизитовКОбработке.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Направление", Направление);        // 1 - ЦРС => Ресторан; 0 - ЦРС <= Ресторан
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);        
	Запрос.УстановитьПараметр("ТаблицаГрупп", ОбменДаннымиПовтИсп.ПолучитьТаблицуИерархииИдентификаторов("Все"));
	Запрос.УстановитьПараметр("СписокИменРеквизитовКОбработке", СписокИменРеквизитовКОбработке);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаГрупп.ПолноеИмяОбъекта
	               |ПОМЕСТИТЬ ТаблицаГрупп
	               |ИЗ
	               |	&ТаблицаГрупп КАК ТаблицаГрупп
	               |ГДЕ
	               |	ТаблицаГрупп.ПолноеИмяОбъекта В(&СписокИменРеквизитовКОбработке)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаГрупп.ПолноеИмяОбъекта
	               |ИЗ
	               |	ТаблицаГрупп КАК ТаблицаГрупп
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС
	               |		ПО ТаблицаГрупп.ПолноеИмяОбъекта = ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки.ПолноеИмя
	               |			И (ОбменДанными2K_CRSНастройкиСвязейМеждуБазамиРС.Ссылка = &ЭтотУзел)
	               |ГДЕ
	               |	&Направление = 1";
	
	НастройкиСвязейМеждуБазамиРС = Запрос.Выполнить().Выгрузить();  
	
	Для каждого НастройкаДляОбъекта Из НастройкиСвязейМеждуБазамиРС Цикл
		
		ИмяРеквизита = СоответствиеИмяРеквизитаПолноеИмяОбъекта.Получить(НастройкаДляОбъекта.ПолноеИмяОбъекта);	
		
		Если ВидПодготовки = "Выгрузка" Тогда
			Если НастройкаДляОбъекта.ПолноеИмяОбъекта = "Справочник.Рестораны" Тогда
				Продолжить;
			КонецЕсли;
			Объект[0][ИмяРеквизита] = Неопределено;
		ИначеЕсли ВидПодготовки = "Загрузка" Тогда
			Если НастройкаДляОбъекта.ПолноеИмяОбъекта = "Справочник.Рестораны" Тогда
				Объект[0][ИмяРеквизита] = ЭтотУзел.Ресторан;
			Иначе
				Объект[0][ИмяРеквизита] = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//Костенюк Александр-Финиш 19.12.2013

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВЫГРУЗКОЙ ДАННЫХ

Процедура ВыгрузитьДанные() Экспорт
	
	ВыгружатьТолькоИзменения = Истина;
	ОффЛайнВыгрузка = Ложь;
	
	УзлыОбмена = ПолучитьУзлыДляРегистрации();	
	УзелОбмена = УзлыОбмена[0];
	
	РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	
	мСтруктураИнформацииИсторииОбмена = ПолучитьСтруктуруИнформацииДляИстории();
	
	мСтруктураИнформацииИсторииОбмена.Событие = "Старт выгрузки данных";
	мСтруктураИнформацииИсторииОбмена.УниверсальноеВремяВМиллисекундах = ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах();

	ЗафиксироватьВремяСобытия(мСтруктураИнформацииИсторииОбмена, Истина);	
	
	КоличествоПопыток = 5;
	ПродолжатьВыгружать = Истина;
	
	Пока ПродолжатьВыгружать Цикл
		
		ПродолжатьВыгружать = КоличествоПопыток > 0;
	    КоличествоПопыток = КоличествоПопыток - 1;
		
		Если ВыгружатьТолькоИзменения Тогда
			СтруктураИзменений = ПолучитьИзмененияПоследовательно(УзелОбмена);
			СтруктураИзменений.Вставить("ЭтотУзел", ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел());
			
			//Для поочередной отправки данных фиксированными пакетами
			СтруктураИзменений.Вставить("КоличествоОбъектовВПакете", СтруктураИзменений.ЭтотУзел.КоличествоОбъектовВПакете);
			СтруктураИзменений.Вставить("КоличествоОбъектовДанныхКОтправке", СтруктураИзменений.ДанныеСправочники.Количество()
																			 + СтруктураИзменений.ДанныеДокументы.Количество()
																			 + СтруктураИзменений.КоличествоОбъектовДанныхКОтправкеРегистрыСведений);
			СтруктураИзменений.Вставить("КоличесвтоУжеОтправленные", 0);
			
			ПродолжатьВыгружать = Мин(ПродолжатьВыгружать, 0 < СтруктураИзменений.КоличествоОбъектовДанныхКОтправке);
			
			Если СтруктураИзменений.КоличествоОбъектовВПакете = 0 Тогда
				СтруктураИзменений.КоличествоОбъектовВПакете = СтруктураИзменений.КоличествоОбъектовДанныхКОтправке
			КонецЕсли;
			
		КонецЕсли;
		
		мСтруктураИнформацииИсторииОбмена.Событие = "Определены объекты к выгрузке";
		ШаблонКомментария = "К отправке подготовлены ¤1¤ объектов.
		|Отправка производится пакетами не более ¤2¤ объектов в каждом пакете.";
		мСтруктураИнформацииИсторииОбмена.Комментарий = Локализация.СтрокаШаблон(ШаблонКомментария, СтруктураИзменений.КоличествоОбъектовДанныхКОтправке, СтруктураИзменений.КоличествоОбъектовВПакете);
		мСтруктураИнформацииИсторииОбмена.УниверсальноеВремяВМиллисекундах = ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ЗафиксироватьВремяСобытия(мСтруктураИнформацииИсторииОбмена);	
		
		Пока СтруктураИзменений.КоличествоОбъектовДанныхКОтправке > СтруктураИзменений.КоличесвтоУжеОтправленные Цикл
			
			СтруктураИзменений.Вставить("КоличествоОбъектовКОтправкеВЭтомПакете", Мин(СтруктураИзменений.КоличествоОбъектовВПакете, СтруктураИзменений.КоличествоОбъектовДанныхКОтправке - СтруктураИзменений.КоличесвтоУжеОтправленные));
			
			ОтправитьОбъекты(СтруктураИзменений, мСтруктураИнформацииИсторииОбмена, РезультатВыполненияОбмена, ОффЛайнВыгрузка);
			
			СтруктураИзменений.Вставить("КоличесвтоУжеОтправленные", СтруктураИзменений.КоличесвтоУжеОтправленные + СтруктураИзменений.КоличествоОбъектовКОтправкеВЭтомПакете);
			
		КонецЦикла;
		
		Если СтруктураИзменений.КоличествоОбъектовДанныхКОтправке = 0 И СтруктураИзменений.КоличесвтоУжеОтправленные = 0 Тогда
			РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
			мСтруктураИнформацииИсторииОбмена.Комментарий = "нет данны к отправке";
		Иначе
			мСтруктураИнформацииИсторииОбмена.Комментарий = мСтруктураИнформацииИсторииОбмена.СообщениеПользователю;
			мСтруктураИнформацииИсторииОбмена.СообщениеПользователю = "";
		КонецЕсли;
		
		мСтруктураИнформацииИсторииОбмена.Событие = "Закончен этап выгрузки данных";
		мСтруктураИнформацииИсторииОбмена.УниверсальноеВремяВМиллисекундах = ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах();
		мСтруктураИнформацииИсторииОбмена.РезультатВыполненияОбмена = РезультатВыполненияОбмена;
		
		ЗафиксироватьВремяСобытия(мСтруктураИнформацииИсторииОбмена);	
	
	КонецЦикла;
		
	мСтруктураИнформацииИсторииОбмена.Событие = "Финиш выгрузки данных";
	мСтруктураИнформацииИсторииОбмена.УниверсальноеВремяВМиллисекундах = ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах();
	мСтруктураИнформацииИсторииОбмена.РезультатВыполненияОбмена = РезультатВыполненияОбмена;
	
	ЗафиксироватьВремяСобытия(мСтруктураИнформацииИсторииОбмена);
	
	//ЗаписатьИнформациюВПротоколОбмена(мСтруктураИнформацииИсторииОбмена, УзелОбмена);

КонецПроцедуры

Процедура ОтправитьОбъекты(СтруктураИзменений, мСтруктураИнформацииИсторииОбмена, РезультатВыполненияОбмена, ОффЛайнВыгрузка = Ложь)

	Если НЕ ОпределитьОтправкаВозможна(ОффЛайнВыгрузка) Тогда
		
		//СообщитьПользователю(мСтруктураИнформацииИсторииОбмена, "Выгрузка не произведена.", Истина);
		мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Выгрузка не произведена.");
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		Возврат;
		
	КонецЕсли;

	Если 0 = СтруктураИзменений.ДанныеСправочники.Количество()
		+ СтруктураИзменений.ДанныеДокументы.Количество()
		+ СтруктураИзменений.КоличествоОбъектовДанныхКОтправкеРегистрыСведений Тогда
		Возврат;
	КонецЕсли;
	
	ВебСервис = Неопределено;
	
	СтрокаСообщенияОбОшибке = "";
	
	Если Не ОффЛайнВыгрузка И Не ПолученВебСервис(ВебСервис, СтруктураИзменений, СтрокаСообщенияОбОшибке) Тогда
		//СообщитьПользователю(мСтруктураИнформацииИсторииОбмена, "Выгрузка не произведена."+ Символы.ПС + СтрокаСообщенияОбОшибке, Истина);
		мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Выгрузка не произведена."+ Символы.ПС + СтрокаСообщенияОбОшибке);
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		Возврат;
	КонецЕсли;

	Если СтруктураИзменений.КоличествоОбъектовДанныхКОтправкеРегистрыСведений Тогда
	
				
		Запись = Новый ЗаписьXML;
		Если ОффЛайнВыгрузка Тогда
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			Запись.ОткрытьФайл(ИмяФайла);
		Иначе
			Запись.УстановитьСтроку("UTF-8");
		КонецЕсли;
		Запись.ЗаписатьОбъявлениеXML();
		Запись.ЗаписатьНачалоЭлемента("exch");
		Запись.ЗаписатьНачалоЭлемента("sender");
		Запись.ЗаписатьТекст(СтруктураИзменений.ЭтотУзел.Код);
		Запись.ЗаписатьКонецЭлемента();  //sender
		Запись.ЗаписатьНачалоЭлемента("catalog"); 
		
		Ограничение = СтруктураИзменений.КоличесвтоУжеОтправленные + СтруктураИзменений.КоличествоОбъектовКОтправкеВЭтомПакете - 1;
		мСоответствиеКолонокДвижений = Новый Соответствие;
		
		Для ИндексДанных = СтруктураИзменений.КоличесвтоУжеОтправленные По Ограничение Цикл
			
			ИндексСтроки = ИндексДанных;
			КоличествоВТекущемРегистре = 0;
			н = -1;
			Пока ИндексСтроки >= КоличествоВТекущемРегистре Цикл
				ИндексСтроки = ИндексСтроки - КоличествоВТекущемРегистре;
				н = н + 1;
			    Изменение = СтруктураИзменений.ДанныеРегистрыСведений[н];
				КоличествоВТекущемРегистре = Изменение.ТЗИзменений.Количество();
			КонецЦикла;
			
			Запись.ЗаписатьНачалоЭлемента("obj"); 
			
				НЗ = РегистрыСведений[Изменение.ИмяРегистра].СоздатьНаборЗаписей();
				СтрокаИзменений = Изменение.ТЗИзменений[ИндексСтроки];
				Для каждого КолонкаОтбора Из Изменение.мОтборы Цикл
					
					НЗ.Отбор[КолонкаОтбора].Установить(СтрокаИзменений[КолонкаОтбора]);
					
				КонецЦикла;
				НЗ.Прочитать();				
				ЗаписатьXML(Запись, НЗ);
				//Если ОффЛайнВыгрузка Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(СтруктураИзменений.УзелОбмена, НЗ);	
				//КонецЕсли;
				мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", мСтруктураИнформацииИсторииОбмена.СообщениеПользователю + Символы.ПС + Изменение.ИмяРегистра); 
				
			Запись.ЗаписатьКонецЭлемента();  //obj
			
		КонецЦикла;	
		Запись.ЗаписатьКонецЭлемента();  //catalog
		Запись.ЗаписатьКонецЭлемента();  //exch
		
		Если ОффЛайнВыгрузка Тогда
			Запись.Закрыть();
			#Если Клиент Тогда
				Сообщить("Запись завершена в файл: " + ИмяФайла);
			#КонецЕсли
			мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Запись завершена в файл: " + ИмяФайла); 
		Иначе
			
			СтрXML = Запись.Закрыть();
			
			Ответ = "0";
			Попытка
				Ответ = ВебСервис.ОтправитьСообщение(СтрXML);
			Исключение
				Ответ = "0";
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
			КонецПопытки;
			Если Ложь И Ответ = "0" Тогда
				#Если Клиент Тогда
					Сообщить("Не удалось обратиться к веб сервису");
				#КонецЕсли
				мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Не удалось обратиться к веб сервису"); 
				Возврат
			КонецЕсли;
			Если Ответ = "0" Тогда
				Возврат
			КонецЕсли;
			
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Ответ);
			Чтение.ПерейтиКСодержимому();
			
			ПродолжатьЧтение = Чтение.Прочитать();
			
			УзелОтправитель = Неопределено;
			Отказ = Ложь;
			
			Пока ПродолжатьЧтение Цикл
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "acceptence" Тогда
					
					ПродолжатьЧтение = Чтение.Прочитать();
					
					Если Не ПустаяСтрока(Чтение.Значение) Тогда
						МассивПолученныхДанных = ЗначениеИзСтрокиВнутр(Чтение.Значение);
						Для каждого ЭлДанных Из МассивПолученныхДанных Цикл
							Если ТипЗнч(ЭлДанных) = Тип("Строка") Тогда
								Продолжить;
							КонецЕсли;
							ПланыОбмена.УдалитьРегистрациюИзменений(СтруктураИзменений.УзелОбмена, ЭлДанных);
						КонецЦикла;
					КонецЕсли;
					
					РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
					
				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "message" Тогда
					ПродолжатьЧтение = Чтение.Прочитать();
					#Если Клиент Тогда
						Сообщить(Чтение.Значение);
					#КонецЕсли
					мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", мСтруктураИнформацииИсторииОбмена.СообщениеПользователю + Символы.ПС + Чтение.Значение); 
				КонецЕсли;
				ПродолжатьЧтение = Чтение.Прочитать()
			КонецЦикла;
			
			Чтение.Закрыть()
			
		КонецЕсли;
		Возврат
	КонецЕсли;
	
	Запись = Новый ЗаписьXML;
	Если ОффЛайнВыгрузка Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		Запись.ОткрытьФайл(ИмяФайла);
	Иначе
		Запись.УстановитьСтроку("UTF-8");
	КонецЕсли;
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("exch");
	Запись.ЗаписатьНачалоЭлемента("sender");
	Запись.ЗаписатьТекст(СтруктураИзменений.ЭтотУзел.Код);
	Запись.ЗаписатьКонецЭлемента();  //sender
	Запись.ЗаписатьНачалоЭлемента("catalog"); 
	
	Ограничение = СтруктураИзменений.КоличесвтоУжеОтправленные + СтруктураИзменений.КоличествоОбъектовКОтправкеВЭтомПакете - 1;
	мСоответствиеКолонокДвижений = Новый Соответствие;
	
	Для ИндексДанных = СтруктураИзменений.КоличесвтоУжеОтправленные По Ограничение Цикл
		
		Если СтруктураИзменений.ДанныеСправочники.Количество() Тогда
			СсылкаНаИзменение = СтруктураИзменений.ДанныеСправочники[ИндексДанных];
		ИначеЕсли СтруктураИзменений.ДанныеДокументы.Количество() Тогда
			СсылкаНаИзменение = СтруктураИзменений.ДанныеДокументы[ИндексДанных];
		КонецЕсли;
		
		Запись.ЗаписатьНачалоЭлемента("obj"); 
			КодУзелИсточник = ?(СсылкаНаИзменение.УзелИсточник.Пустая(), СтруктураИзменений.ЭтотУзел.Код, СсылкаНаИзменение.УзелИсточник.Код);
			Запись.ЗаписатьАтрибут("УзелИсточник", КодУзелИсточник);
			ОбъектКЗаписи = СсылкаНаИзменение.ПолучитьОбъект();
			ОбъектКЗаписи.УзелИсточник = Неопределено;
			
			ПодготовитьНеобновляемыеРеквизитыОбъекта(ОбъектКЗаписи, "Выгрузка", 1);
			
			ЗаписатьXML(Запись, ОбъектКЗаписи);
			
			ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаИзменение));
			Если ЭтоДокумент Тогда
			
				Запись.ЗаписатьНачалоЭлемента("rg"); 
				//ДвиженияКЗаписи = ОбъектКЗаписи.Движения;
				//ЗаписатьXML(Запись, ДвиженияКЗаписи);
			    
				// выгрузка движений документа
				Для Каждого Движение Из ОбъектКЗаписи.Движения Цикл
					
					Движение.Прочитать();
					
					ЗаписатьXML(Запись, Движение);	
					
				КонецЦикла;
				
				Запись.ЗаписатьКонецЭлемента();  //rg
				
			КонецЕсли;
			
		Запись.ЗаписатьКонецЭлемента();  //obj
		
	КонецЦикла;	
	Запись.ЗаписатьКонецЭлемента();  //catalog
	Запись.ЗаписатьКонецЭлемента();  //exch
	
	Если ОффЛайнВыгрузка Тогда
		Запись.Закрыть();
		Если СтруктураИзменений.ДанныеСправочники.Количество() Тогда
			Для каждого ЭлДанных Из СтруктураИзменений.ДанныеСправочники Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(СтруктураИзменений.УзелОбмена, ЭлДанных);
			КонецЦикла;
		ИначеЕсли СтруктураИзменений.ДанныеДокументы.Количество() Тогда
			Для каждого ЭлДанных Из СтруктураИзменений.ДанныеДокументы Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(СтруктураИзменений.УзелОбмена, ЭлДанных);
			КонецЦикла;
		КонецЕсли;
		#Если Клиент Тогда
			Сообщить("Запись завершена в файл: " + ИмяФайла);
		#КонецЕсли
		мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Запись завершена в файл: " + ИмяФайла); 
	Иначе
		
		СтрXML = Запись.Закрыть();
		
		Ответ = "0";
		Попытка
			Ответ = ВебСервис.ОтправитьСообщение(СтрXML);
		Исключение
			Ответ = "0";
			РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		КонецПопытки;
		Если Ответ = "0" Тогда
			#Если Клиент Тогда
				Сообщить("Не удалось обратиться к веб сервису");
			#КонецЕсли
			мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", "Не удалось обратиться к веб сервису"); 
			Возврат
		КонецЕсли;
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(Ответ);
		Чтение.ПерейтиКСодержимому();
		
		ПродолжатьЧтение = Чтение.Прочитать();
		
		УзелОтправитель = Неопределено;
		Отказ = Ложь;
		
		Пока ПродолжатьЧтение Цикл
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "acceptence" Тогда
				
				ПродолжатьЧтение = Чтение.Прочитать();
				
				Если Не ПустаяСтрока(Чтение.Значение) Тогда
					МассивПолученныхДанных = ЗначениеИзСтрокиВнутр(Чтение.Значение);
					Для каждого ЭлДанных Из МассивПолученныхДанных Цикл
						ПланыОбмена.УдалитьРегистрациюИзменений(СтруктураИзменений.УзелОбмена, ЭлДанных);
					КонецЦикла;
				КонецЕсли;
				
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
				
			ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "message" Тогда
				ПродолжатьЧтение = Чтение.Прочитать();
				#Если Клиент Тогда
					Сообщить(Чтение.Значение);
				#КонецЕсли
				мСтруктураИнформацииИсторииОбмена.Вставить("СообщениеПользователю", мСтруктураИнформацииИсторииОбмена.СообщениеПользователю + Символы.ПС + Чтение.Значение); 
			КонецЕсли;
			ПродолжатьЧтение = Чтение.Прочитать()
		КонецЦикла;
		
		Чтение.Закрыть()
		
	КонецЕсли;
	
	

	//СтрОтвет = ЗначениеИзСтрокиВнутр(Ответ);
	//
	//#Если Клиент Тогда
	//	Сообщить(СтрОтвет.Сообщение);
	//	Для каждого Стр Из СтрОтвет.ТЗ_Результат Цикл
	//		Сообщить("" + Символы.Таб + Стр.ПрошлоСПоследнего  + Символы.Таб + Стр.ПрошлоСНачала + " :: " + Стр.Событие);
	//	КонецЦикла;
	//#КонецЕсли

КонецПроцедуры

Функция ПолученВебСервис(WSПрокси, СтруктураОбмена, СтрокаСообщенияОбОшибке)

	Попытка
	
		WSПрокси = ПолучитьWSПрокси(СтруктураПараметровWS(СтруктураОбмена.ЭтотУзел), СтрокаСообщенияОбОшибке);
		Если WSПрокси = Неопределено Тогда
			Возврат Ложь
		КонецЕсли;
		
	Исключение
		#Если Клиент Тогда
			Сообщить("Не удалось инициализировать веб сервис");
		#КонецЕсли
		Возврат Ложь
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции

Функция ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке = "") Экспорт
	
	МестоположениеWSDL = "[URLВебСервиса]/ws/[ИмяСервиса]?wsdl";
	МестоположениеWSDL = СтрЗаменить(МестоположениеWSDL, "[URLВебСервиса]", СтруктураНастроек.WSURLВебСервиса);
	МестоположениеWSDL = СтрЗаменить(МестоположениеWSDL, "[ИмяСервиса]",    СтруктураНастроек.WSИмяСервиса);
	
	Попытка
		Определение = Новый WSОпределения(
			МестоположениеWSDL, 
			СтруктураНастроек.WSИмяПользователя,
			СтруктураНастроек.WSПароль);
		
		WSПрокси = Новый WSПрокси(
			Определение,
			СтруктураНастроек.WSURLПространстваИменСервиса,
			СтруктураНастроек.WSИмяСервиса,
			СтруктураНастроек.WSИмяСервиса + "Soap");
			
		WSПрокси.Пользователь = СтруктураНастроек.WSИмяПользователя;
		WSПрокси.Пароль       = СтруктураНастроек.WSПароль;
	Исключение
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат WSПрокси;
КонецФункции

Функция ПолучитьWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке = "") Экспорт
	Возврат ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке);
КонецФункции

Функция СтруктураПараметровWS(Узел) Экспорт
	
	WSПароль = "";
	
	СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(Узел);
	
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("WSURLВебСервиса", "http://10.1.1.4/testWSBase");
	//СтруктураПараметров.Вставить("WSИмяПользователя", "Администратор");
	//СтруктураПараметров.Вставить("WSПароль", WSПароль);
	//СтруктураПараметров.Вставить("WSURLПространстваИменСервиса", "Test2Exch");
	//СтруктураПараметров.Вставить("WSИмяСервиса",                 "TestExchange2");
		
	Возврат СтруктураНастроек
	
КонецФункции

Функция СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Установка подключения к web-сервису'");
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АНАЛИЗА ИЗМЕНЕНИЙ ДАННЫХ

Функция ВыбратьИзменения(Получатель, ВыборкаИзменения, СправочникиДокументы = "Справочники")

	СоставПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокОбъектовСоставаПланаОбмена("ОбменДанными2K_CRS", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Получатель);

	Если СправочникиДокументы = "Справочники" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаСправочники(СоставПланаОбмена);
		Результат = Запрос.Выполнить();
	ИначеЕсли СправочникиДокументы = "Документы" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаДокументы(СоставПланаОбмена);
		Результат = Запрос.Выполнить();
	КонецЕсли;
	
	Если ПустаяСтрока(Запрос.Текст) Или Результат.Пустой() Тогда
		Возврат Ложь
	КонецЕсли;
	
	ВыборкаИзменения = Результат.Выбрать();
	
	Возврат Истина;
	
КонецФункции // 

Функция ВыбратьИзмененияНезависимыхРегистровСведений(СтруктураВозврата)

	СписокСоставПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокОбъектовСоставаПланаОбмена("ОбменДанными2K_CRS", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", СтруктураВозврата.УзелОбмена);

	СтруктураПолученныхОтборов = ПолучитьОтборыДляПолученияИзмененийРегистрыСведений(СписокСоставПланаОбмена);
	Запрос.Текст = СтруктураПолученныхОтборов.ТекстЗапроса;
	мРезультаты = Запрос.ВыполнитьПакет();
	
	Для н = 0 По мРезультаты.ВГраница() Цикл
		
		Результат = мРезультаты[н];
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		ТЗИзменений = Результат.Выгрузить();
		СтруктураВозврата.Вставить("КоличествоОбъектовДанныхКОтправкеРегистрыСведений", СтруктураВозврата.КоличествоОбъектовДанныхКОтправкеРегистрыСведений + ТЗИзменений.Количество());
		СтруктураПолученныхОтборов.мСоответствиеЗапросаРегистру[н].Вставить("ТЗИзменений", ТЗИзменений);
		СтруктураВозврата.ДанныеРегистрыСведений.Добавить(СтруктураПолученныхОтборов.мСоответствиеЗапросаРегистру[н]);	
		
	КонецЦикла;
	
КонецФункции //

Функция ПолучитьТекстЗапросаСправочники(СоставПланаОбмена, ТекстЗапроса = "")

	ТекстШаблон = "ВЫБРАТЬ Изменения.Ссылка, Изменения.Узел, Изменения.НомерСообщения ИЗ ¤1¤ Как Изменения ГДЕ Изменения.Узел = &Узел";
	
	Для каждого ЭлСостава Из СоставПланаОбмена Цикл
		
		МД = ЭлСостава.Значение;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "Справочник.") = 0 Тогда
			Продолжить;		
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ПолноеИмяТаблицы = МД.ПолноеИмя()+".Изменения";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.СтрокаШаблон(ТекстШаблон, ПолноеИмяТаблицы);
	
	КонецЦикла;	
	
	Возврат ТекстЗапроса

КонецФункции // ПолучитьТекстЗапросаСправочники()

Функция ПолучитьТекстЗапросаДокументы(СоставПланаОбмена, ТекстЗапроса = "")

	ТекстШаблон = "ВЫБРАТЬ Изменения.Ссылка, Изменения.Узел, Изменения.НомерСообщения ИЗ ¤1¤ Как Изменения ГДЕ Изменения.Узел = &Узел";
	
	Для каждого ЭлСостава Из СоставПланаОбмена Цикл
		
		МД = ЭлСостава.Значение;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "Документ.") = 0 Тогда
			Продолжить;		
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ПолноеИмяТаблицы = МД.ПолноеИмя()+".Изменения";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.СтрокаШаблон(ТекстШаблон, ПолноеИмяТаблицы);
	
	КонецЦикла;	

	Возврат ТекстЗапроса

КонецФункции // ПолучитьТекстЗапросаДокументы()

Функция ПолучитьТекстЗапросаРегистрыСведений(СоставПланаОбмена, ТекстЗапроса = "")

	СвойствоРС_Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	ТекстШаблон = "
	|ВЫБРАТЬ
	|	¤1¤
	|	ТаблицаИзменения.Узел,
	|	ТаблицаИзменения.НомерСообщения
	|ИЗ
	|	¤2¤.Изменения КАК ТаблицаИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ¤2¤ КАК Таблица
	|		ПО ТаблицаИзменения.Узел = &Узел 
	|		¤3¤
	|";
                 
	Для каждого ЭлСостава Из СоставПланаОбмена Цикл
		
		МД = ЭлСостава.Значение;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "РегистрСведений.") = 0 Тогда
			Продолжить;		
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли;
		
		мПолейИзмерений = Новый Массив;
		мПолейРесурсовИРеквизитов = Новый Массив;
		Если Не СвойствоРС_Непериодический = МД.ПериодичностьРегистраСведений Тогда
			мПолейИзмерений.Добавить("Период")
		КонецЕсли;
		Для каждого Измерение Из МД.Измерения Цикл
			Если Измерение.ОсновнойОтбор Тогда
				мПолейИзмерений.Добавить(Измерение.Имя)
			Иначе
				мПолейРесурсовИРеквизитов.Добавить(Измерение.Имя)
			КонецЕсли;
		КонецЦикла;
		Для каждого Ресурс Из МД.Ресурсы Цикл
			мПолейРесурсовИРеквизитов.Добавить(Ресурс.Имя)
		КонецЦикла;
		Для каждого Реквизит Из МД.Реквизиты Цикл
			мПолейРесурсовИРеквизитов.Добавить(Реквизит.Имя)
		КонецЦикла;
		ПоляСтрокой = "";
		УсловияСтрокой = "";
		
		Для каждого ИмяПоля Из мПолейИзмерений Цикл
		
			ПоляСтрокой = ПоляСтрокой + "ТаблицаИзменения."+ИмяПоля+","+Символы.ПС;
		    УсловияСтрокой = УсловияСтрокой + Символы.ПС + 
			" И ТаблицаИзменения."+ИмяПоля+" = Таблица."+ИмяПоля;
		
		КонецЦикла;
		
		Для каждого ИмяПоля Из мПолейРесурсовИРеквизитов Цикл
		
			ПоляСтрокой = ПоляСтрокой + "Таблица."+ИмяПоля+","+Символы.ПС;
		
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.СтрокаШаблон(ТекстШаблон, ПоляСтрокой, МД.ПолноеИмя(), УсловияСтрокой);
	
	КонецЦикла;	

	Возврат ТекстЗапроса

КонецФункции // ПолучитьТекстЗапросаРегистрыСведений()

Функция ПолучитьОтборыДляПолученияИзмененийРегистрыСведений(СоставПланаОбмена, ТекстЗапроса = "")

	СвойствоРС_Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	ТекстШаблон = "
	|ВЫБРАТЬ
	|	¤1¤	ТаблицаИзменения.Узел,
	|	ТаблицаИзменения.НомерСообщения
	|ИЗ
	|	¤2¤.Изменения КАК ТаблицаИзменения
	|ГДЕ ТаблицаИзменения.Узел = &Узел
	|";
	
	мСоответствиеЗапросаРегистру = Новый Массив;
	
	Для каждого ЭлСостава Из СоставПланаОбмена Цикл
		
		МД = ЭлСостава.Значение;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "РегистрСведений.") = 0 Тогда
			Продолжить;		
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли;
		
		мПолейИзмерений = Новый Массив;
		
		Если Не СвойствоРС_Непериодический = МД.ПериодичностьРегистраСведений Тогда
			мПолейИзмерений.Добавить("Период")
		КонецЕсли;
		Для каждого Измерение Из МД.Измерения Цикл
			Если Измерение.ОсновнойОтбор Тогда
				мПолейИзмерений.Добавить(Измерение.Имя)
			КонецЕсли;
		КонецЦикла;
		
		ПоляСтрокой = "";
		мОтборы = Новый Массив;
		
		Для каждого ИмяПоля Из мПолейИзмерений Цикл
		
			ПоляСтрокой = ПоляСтрокой + "ТаблицаИзменения."+ИмяПоля+","+Символы.ПС;
		    мОтборы.Добавить(ИмяПоля);
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.СтрокаШаблон(ТекстШаблон, ПоляСтрокой, МД.ПолноеИмя());
	    мСоответствиеЗапросаРегистру.Добавить(Новый Структура("ИмяРегистра, мОтборы", МД.Имя, мОтборы));
		
	КонецЦикла;	

	Возврат Новый Структура("ТекстЗапроса, мСоответствиеЗапросаРегистру", ТекстЗапроса, мСоответствиеЗапросаРегистру)

КонецФункции // ПолучитьОтборыДляПолученияИзмененийРегистрыСведений()

Процедура ЗаполнитьСтруктуруИзмененийДляУзла(СтруктураВозврата)
	
	Перем ВыборкаИзменения;
	
	Если НЕ ЗначениеЗаполнено(СтруктураВозврата.УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение Изменений
	#Если Клиент Тогда
	ОтобразитьСостояние("Выбор изменений ...");
	Счетчик = 0;
	#КонецЕсли

	Если ВыбратьИзменения(СтруктураВозврата.УзелОбмена, ВыборкаИзменения, "Справочники") Тогда	
	
		Пока ВыборкаИзменения.Следующий() Цикл
			
			#Если Клиент Тогда
				Счетчик = Счетчик + 1;
				Если Счетчик % 100 = 0 Тогда
					ОтобразитьСостояние("Обработано объектов: " + Счетчик);
				КонецЕсли;
			#КонецЕсли
			
			СтруктураВозврата.ДанныеСправочники.Добавить(ВыборкаИзменения.Ссылка);
			
		КонецЦикла;	
		
	ИначеЕсли ВыбратьИзменения(СтруктураВозврата.УзелОбмена, ВыборкаИзменения, "Документы") Тогда	
	    СтруктураВозврата.ДанныеСправочники.Очистить();
		Пока ВыборкаИзменения.Следующий() Цикл
			
			#Если Клиент Тогда
				Счетчик = Счетчик + 1;
				Если Счетчик % 100 = 0 Тогда
					ОтобразитьСостояние("Обработано объектов: " + Счетчик);
				КонецЕсли;
			#КонецЕсли
			
			СтруктураВозврата.ДанныеДокументы.Добавить(ВыборкаИзменения.Ссылка);
			
		КонецЦикла;	
		
	Иначе
		СтруктураВозврата.ДанныеСправочники.Очистить();
		СтруктураВозврата.ДанныеДокументы.Очистить();
		//Проверим регистры сведений
		КоличествоОбъектов = 0;
		ВыбратьИзмененияНезависимыхРегистровСведений(СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИзмененияПоследовательно(УзелОбмена) Экспорт
	
	СтруктураВозврата = Новый Структура("УзелОбмена, ДанныеСправочники, ДанныеДокументы, ДанныеРегистрыСведений, КоличествоОбъектовДанныхКОтправкеРегистрыСведений", УзелОбмена, Новый Массив(), Новый Массив(), Новый Массив(), 0);
		
	ЗаполнитьСтруктуруИзмененийДляУзла(СтруктураВозврата);
		
	Возврат СтруктураВозврата; 
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОПИСАНИЯ И ВЫВОДА ОШИБОК И СООБЩЕНИЙ

Функция ПолучитьСтруктуруИнформацииДляИстории()
	
	СтруктураДляИстории = Новый Структура("УниверсальноеВремяВМиллисекундах,Событие,
		|ПрошлоСПоследнего,ПрошлоСНачала,РезультатВыполненияОбмена,
		|Комментарий, СообщениеПользователю");
		
	СтруктураДляИстории.Комментарий = "";
	СтруктураДляИстории.СообщениеПользователю = "";
	
	Возврат СтруктураДляИстории;
	
КонецФункции

Процедура ДобавитьТехническуюИнформацияВСообщение(СокращенноеСообщение, СообщениеСТехИнформацией)
	
	Если СокращенноеСообщение = СообщениеСТехИнформацией Тогда
		Возврат;
	КонецЕсли;
	
	СокращенноеСообщение = СокращенноеСообщение + Символы.ПС + Символы.ПС + "Техническая информация:" + Символы.ПС + СообщениеСТехИнформацией;	
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВПротоколОбмена(СтруктураИнформации, УзелОбмена)
	
	ДатаПоследнегоОбмена = ТекущаяДата();				
	
	НаборЗаписейИстории = РегистрыСведений.ИсторияОбменаДанными.СоздатьНаборЗаписей();
	НаборЗаписейИстории.Отбор.УзелИнформационнойБазы.Установить(УзелОбмена);
	НаборЗаписейИстории.Отбор.Период.Установить(ДатаПоследнегоОбмена);
	
	СтрокаИстории = НаборЗаписейИстории.Добавить();
	
	СтрокаИстории.Период = ДатаПоследнегоОбмена;
	СтрокаИстории.УзелИнформационнойБазы = УзелОбмена;
	
		
	Если ЗначениеЗаполнено(СтруктураИнформации.ДатаПоследнейЗагрузки) Тогда
		
		СтрокаИстории.ДатаПоследнейЗагрузки = СтруктураИнформации.ДатаПоследнейЗагрузки;	
		СтрокаИстории.ДатаНачалаПоследнейЗагрузки = СтруктураИнформации.ДатаНачалаПоследнейЗагрузки;
		СтрокаИстории.РезультатПоследнейЗагрузки = СтруктураИнформации.РезультатПоследнейЗагрузки;
				
		СтрокаИстории.КомментарийКЗагрузкеДанных = ОбщегоНазначения.СформироватьТекстСообщения(СокрЛП(СтруктураИнформации.КомментарийКЗагрузкеДанных));
			
		Если Не ПустаяСтрока(СтрокаИстории.КомментарийКЗагрузкеДанных) 
			И Не ПустаяСтрока(СтруктураИнформации.КомментарийКЗагрузкеДанных) Тогда
			
			ДобавитьТехническуюИнформацияВСообщение(СтрокаИстории.КомментарийКЗагрузкеДанных, СтруктураИнформации.КомментарийКЗагрузкеДанных);
							
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураИнформации.ДатаПоследнейВыгрузки) Тогда
		
		СтрокаИстории.ДатаПоследнейВыгрузки = СтруктураИнформации.ДатаПоследнейВыгрузки;	
		СтрокаИстории.ДатаНачалаПоследнейВыгрузки = СтруктураИнформации.ДатаНачалаПоследнейВыгрузки;
		СтрокаИстории.РезультатПоследнейВыгрузки = СтруктураИнформации.РезультатПоследнейВыгрузки;
		
		СтрокаИстории.КомментарийКВыгрузкеДанных = ОбщегоНазначения.СформироватьТекстСообщения(СокрЛП(СтруктураИнформации.КомментарийКВыгрузкеДанных));
			
		Если Не ПустаяСтрока(СтрокаИстории.КомментарийКВыгрузкеДанных) 
			И Не ПустаяСтрока(СтруктураИнформации.КомментарийКВыгрузкеДанных) Тогда
			
			ДобавитьТехническуюИнформацияВСообщение(СтрокаИстории.КомментарийКВыгрузкеДанных, СтруктураИнформации.КомментарийКВыгрузкеДанных);
							
		КонецЕсли;		
				
	КонецЕсли;	
						
	Попытка
		
		НаборЗаписейИстории.Записать();
		
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке("Возникла ошибка при записи истории обмена данными: " + ОписаниеОшибки());			
		
	КонецПопытки;	
	
КонецПроцедуры

Процедура ОтобразитьСостояние(ТекстСообщения)
	#Если Клиент Тогда
	Состояние(ТекстСообщения);
	#КонецЕсли	
КонецПроцедуры

Процедура ДобавитьТекстКСообщениюДляПользователя(ТекущееСообщение, ДобавляемоеСообщение)
	
	ТекущееСообщение = СокрЛП(ТекущееСообщение + Символы.ПС + ДобавляемоеСообщение);	
	
КонецПроцедуры

Процедура СообщитьПользователю(мСтруктураИнформацииИсторииОбмена, ТекстСообщения, ИнформацияОВыгрузке, Статус = Неопределено)
	
	//Если ИнформацияОВыгрузке Тогда
	//	ДобавитьТекстКСообщениюДляПользователя(мСтруктураИнформацииИсторииОбмена.КомментарийКВыгрузкеДанных, ТекстСообщения);
	//Иначе
	//	ДобавитьТекстКСообщениюДляПользователя(мСтруктураИнформацииИсторииОбмена.КомментарийКЗагрузкеДанных, ТекстСообщения);
	//КонецЕсли;
	
	#Если Клиент Тогда
		Если Статус = Неопределено Тогда
			Статус = СтатусСообщения.Обычное;	
		КонецЕсли;
		Сообщить(ТекстСообщения, Статус);	
	#КонецЕсли
	
КонецПроцедуры	

Функция ПолучитьСписокОбъектовСоставаПланаОбмена(ИмяПланаОбмена, ПолучитьМетаданные = Истина, СтруктураСоставПоПолномуИмени = Неопределено) Экспорт 

	Состав = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	СтруктураСоставПоПолномуИмени = Новый Структура;
	СоставПоПолномуИмени = Новый Массив;
	Для каждого ЭлСостава Из Состав Цикл
		МДЭлемента = ЭлСостава.Метаданные;
		Если ПолучитьМетаданные Тогда
			СтруктураСоставПоПолномуИмени.Вставить(МДЭлемента.Имя, МДЭлемента);
		КонецЕсли;
		СоставПоПолномуИмени.Добавить(МДЭлемента.ПолноеИмя());
	КонецЦикла;
	
	Возврат СоставПоПолномуИмени
	
КонецФункции // ПолучитьСписокОбъектовСоставаПланаОбмена()

Функция ПолучитьСписокОбъектовСРеквизитомУзелИсточник() Экспорт 

	Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	
	СоставПоПолномуИмени = Новый Соответствие;
		
	Для каждого ЭлСостава Из Метаданные.ОбщиеРеквизиты.УзелИсточник.Состав Цикл
		МДЭлемента = ЭлСостава.Метаданные;
		СоставПоПолномуИмени.Вставить(ЭлСостава.Метаданные.ПолноеИмя(), ЭлСостава.Использование = Использовать);
	КонецЦикла;

    Возврат СоставПоПолномуИмени
	
КонецФункции // ПолучитьСписокОбъектовСоставаПланаОбмена()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОПИСАНИЯ И регистрации процесса обмена

&НаСервере
Функция ВыделитьСлово(ИсходнаяСтрока, Разделитель = " ")
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, Разделитель);

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела - 1));
	ИсходнаяСтрока  = СокрЛП(Сред(ИсходнаяСтрока, ПозицияПослПробела + 1));
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция ПроверитьВерсию(ВерсияНеНиже)

	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	Разряд1 = Число(ВыделитьСлово(ВерсияПриложения, "."));
	Разряд2 = Число(ВыделитьСлово(ВерсияПриложения, "."));
	Разряд3 = Число(ВыделитьСлово(ВерсияПриложения, "."));
	Разряд4 = Число(ВыделитьСлово(ВерсияПриложения, "."));
	
	РазрядНеНиже1 = Число(ВыделитьСлово(ВерсияНеНиже, "."));
	РазрядНеНиже2 = Число(ВыделитьСлово(ВерсияНеНиже, "."));
	РазрядНеНиже3 = Число(ВыделитьСлово(ВерсияНеНиже, "."));
	РазрядНеНиже4 = Число(ВыделитьСлово(ВерсияНеНиже, "."));
	Если Разряд1 < РазрядНеНиже1
		Или ( Разряд1 = РазрядНеНиже1 И Разряд2 < РазрядНеНиже2 )
		Или ( Разряд1 = РазрядНеНиже1 И Разряд2 = РазрядНеНиже2 И Разряд3 < РазрядНеНиже3)
		Или ( Разряд1 = РазрядНеНиже1 И Разряд2 = РазрядНеНиже2 И Разряд3 = РазрядНеНиже3 И Разряд4 < РазрядНеНиже4)
		Тогда
		Возврат Истина
	Иначе 
		Возврат Ложь
	КонецЕсли;


КонецФункции // ()
 
&НаСервере
Функция ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах()
	
	Если ПроверитьВерсию("8.2.17.143") Тогда
		ТУД = ТекущаяУниверсальнаяДата() - Дата(1,1,1)
	Иначе 
		Выполнить ("ТУД = ТекущаяУниверсальнаяДатаВМиллисекундах()")
		
	КонецЕсли;
	
	Возврат ТУД

КонецФункции // ПолучитьТекущаяУниверсальнаяДатаВМиллисекундах()

Процедура ЗафиксироватьВремяСобытия(мСтруктураИнформацииИсторииОбмена, Очистить = Ложь)

	Если Очистить Тогда
		РегистрыСведений.ТестВебСервисаВремяПодключения.СоздатьНаборЗаписей().Записать()	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТестВебСервисаВремяПодключения.УниверсальноеВремяВМиллисекундах КАК ПредУДМ
		|ИЗ
		|	РегистрСведений.ТестВебСервисаВремяПодключения КАК ТестВебСервисаВремяПодключения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТестВебСервисаВремяПодключения.УниверсальноеВремяВМиллисекундах УБЫВ";

	Результат = Запрос.Выполнить();
	
	МЗ = РегистрыСведений.ТестВебСервисаВремяПодключения.СоздатьМенеджерЗаписи();
	МЗ.УниверсальноеВремяВМиллисекундах = мСтруктураИнформацииИсторииОбмена.УниверсальноеВремяВМиллисекундах;
	МЗ.Событие = мСтруктураИнформацииИсторииОбмена.Событие;
	МЗ.РезультатВыполненияОбмена = мСтруктураИнформацииИсторииОбмена.РезультатВыполненияОбмена;
	МЗ.Комментарий = мСтруктураИнформацииИсторииОбмена.Комментарий;

	Если Не Результат.Пустой() Тогда
		ТЗРезультат = Результат.Выгрузить();
		Последний = ТЗРезультат[0].ПредУДМ;
		Первый = ТЗРезультат[ТЗРезультат.Количество()-1].ПредУДМ;
		Если Последний = МЗ.УниверсальноеВремяВМиллисекундах Тогда
			МЗ.УниверсальноеВремяВМиллисекундах = МЗ.УниверсальноеВремяВМиллисекундах + 1	
		КонецЕсли;
		Если ПроверитьВерсию("8.2.17.143") Тогда
			МЗ.ПрошлоСПоследнего = РазницаМеждуДатамиВсекундахВФорматеmmss(Последний, МЗ.УниверсальноеВремяВМиллисекундах);		
			МЗ.ПрошлоСНачала = РазницаМеждуДатамиВсекундахВФорматеmmss(Первый, МЗ.УниверсальноеВремяВМиллисекундах);
		Иначе
			МЗ.ПрошлоСПоследнего = РазницаМеждуДатамиВМиллисекундахВФорматеmmssms(Последний, МЗ.УниверсальноеВремяВМиллисекундах);		
			МЗ.ПрошлоСНачала = РазницаМеждуДатамиВМиллисекундахВФорматеmmssms(Первый, МЗ.УниверсальноеВремяВМиллисекундах);
		КонецЕсли;
	КонецЕсли;
	
	МЗ.Записать();
	
КонецПроцедуры

Функция РазницаМеждуДатамиВМиллисекундахВФорматеmmssms(ПредУДМ, СледУДМ)

	//ПредУДМ = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//СледУДМ = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазницаМ= СледУДМ - ПредУДМ;
	
	Минут = Цел(РазницаМ / 1000 /60 );
	Секунд= (РазницаМ / 1000  - Минут * 60);
	Возврат ""+ Минут + " минут " + Секунд + " секунд"
	

КонецФункции // РазницаМеждуДатамиВМиллисекундахВФорматеmmssms()

Функция РазницаМеждуДатамиВсекундахВФорматеmmss(ПредУДМ, СледУДМ)

	РазницаМ = СледУДМ - ПредУДМ;
	
	Минут = Цел(РазницаМ /60 );
	Секунд= РазницаМ  - Минут * 60;
	Возврат ""+ Минут + " минут " + Секунд + " секунд"
	

КонецФункции // РазницаМеждуДатамиВМиллисекундахВФорматеmmssms()


