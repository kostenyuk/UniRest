
Функция ВсеРоли() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	
	Для каждого Роль Из Метаданные.Роли Цикл
		Таблица.Добавить().Имя = Роль.Имя;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ВсеРоли()


Процедура ЗаполнитьПодсистемыИРоли(КоллекцияСтрокДерева, Подсистемы = Неопределено, ТипПользователя)
	
	НедоступныеРоли = 
		ПользователиСерверПовторно.НедоступныеРолиПоТипуПользователя(ТипПользователя);
	
	Если Подсистемы = Неопределено Тогда
		Подсистемы = Метаданные.Подсистемы;
	КонецЕсли;
	
	Для каждого Подсистема Из Подсистемы Цикл
		
		ОписаниеПодсистемы = КоллекцияСтрокДерева.Добавить();
		ОписаниеПодсистемы.Имя           = Подсистема.Имя;
		Если ПустаяСтрока(Подсистема.Синоним) Тогда
			ОписаниеПодсистемы.Синоним   = Подсистема.Имя;
		Иначе
			ОписаниеПодсистемы.Синоним   = Подсистема.Синоним;
		КонецЕсли; 
		
		ЗаполнитьПодсистемыИРоли(ОписаниеПодсистемы.Строки, Подсистема.Подсистемы, ТипПользователя);
		
		Для каждого Роль Из Метаданные.Роли Цикл
			Если НедоступныеРоли.Получить(Роль) <> Неопределено
				ИЛИ ВРег(Лев(Роль.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
				
				Продолжить;
			КонецЕсли;
			
			Если Подсистема.Состав.Содержит(Роль) Тогда
				ОписаниеРоли = ОписаниеПодсистемы.Строки.Добавить();
				ОписаниеРоли.ЭтоРоль       = Истина;
				ОписаниеРоли.Имя           = Роль.Имя;
				Если ПустаяСтрока(Роль.Синоним) Тогда
					ОписаниеРоли.Синоним   = Роль.Имя;
				Иначе
					ОписаниеРоли.Синоним   = Роль.Синоним;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Если ОписаниеПодсистемы.Строки.НайтиСтроки(Новый Структура("ЭтоРоль", Истина), Истина).Количество() = 0 Тогда
			КоллекцияСтрокДерева.Удалить(ОписаниеПодсистемы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПодсистемыИРоли()


Функция ДеревоРолей(ПоПодсистемам = Истина, ТипПользователя = Неопределено) Экспорт
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ЭтоРоль", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Имя",     Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	
	Если ПоПодсистемам Тогда
		ЗаполнитьПодсистемыИРоли(Дерево.Строки, , ТипПользователя);
	КонецЕсли;
	
	НедоступныеРоли = ПользователиСерверПовторно.НедоступныеРолиПоТипуПользователя(ТипПользователя);
	
	// Добавление ненайденных ролей.
	Для каждого Роль Из Метаданные.Роли Цикл
		Если НедоступныеРоли.Получить(Роль) <> Неопределено
			Или ВРег(Лев(Роль.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, Роль.Имя), Истина).Количество() = 0 Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.ЭтоРоль       = Истина;
			СтрокаДерева.Имя           = Роль.Имя;
			Если ПустаяСтрока(Роль.Синоним) Тогда
				СтрокаДерева.Синоним   = Роль.Имя;
			Иначе
				СтрокаДерева.Синоним   = Роль.Синоним;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Дерево.Строки.Сортировать("ЭтоРоль Убыв, Синоним Возр", Истина);
	
	Возврат Дерево;
	
КонецФункции // ДеревоРолей()


Функция РазрешеноИзменениеОбщихДанных(ТипПользователя) Экспорт
	
	Возврат Истина;
	
КонецФункции // РазрешеноИзменениеОбщихДанных()

Функция ДоступноИзменениеОбщихДанных(ИмяРоли) Экспорт
	
	Возврат ПользователиСерверПовторно.ОбщиеДанныеДоступныеДляИзменения(ИмяРоли).Количество() > 0;
	
КонецФункции // ДоступноИзменениеОбщихДанных()

Функция ОбщиеДанныеДоступныеДляИзменения(ИмяРоли) Экспорт
	
	Роль = Метаданные.Роли[ИмяРоли];
	
	ВидыМетаданных = Новый Массив;
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыОбмена, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Константы, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Справочники, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Последовательности, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Документы, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыВидовХарактеристик, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыСчетов, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыВидовРасчета, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.БизнесПроцессы, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Задачи, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыСведений, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыНакопления, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыБухгалтерии, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыРасчета, Ложь));
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаОбъектов.Колонки.Добавить("Право", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	ПроверяемыеПрава = Новый Массив;
	ПроверяемыеПрава.Добавить(Новый Структура("Имя, Ссылочное", "Изменение", Ложь));
	ПроверяемыеПрава.Добавить(Новый Структура("Имя, Ссылочное", "Добавление", Истина));
	ПроверяемыеПрава.Добавить(Новый Структура("Имя, Ссылочное", "Удаление", Истина));
	
	РазделенныеОбъектыМетаданных = Новый Соответствие;
	
	Для Каждого ОписаниеВида Из ВидыМетаданных Цикл // По видам метаданных
		Для Каждого ОбъектМетаданных Из ОписаниеВида.Вид Цикл // По объектам вида
			ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
			Если РазделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъектаМетаданных) = Неопределено Тогда
				
				Для каждого ОписаниеПрава Из ПроверяемыеПрава Цикл
					Если НЕ ОписаниеПрава.Ссылочное
						ИЛИ ОписаниеВида.Ссылочный Тогда
						
						Если ПравоДоступа(ОписаниеПрава.Имя, ОбъектМетаданных, Роль) Тогда
							СтрокаПрава = ТаблицаОбъектов.Добавить();
							СтрокаПрава.Имя = ПолноеИмяОбъектаМетаданных;
							СтрокаПрава.Право = ОписаниеПрава.Имя;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаОбъектов;
	
КонецФункции // ОбщиеДанныеДоступныеДляИзменения()

Функция НедоступныеПраваПоТипуПользователя(ТипПользователя) Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // НедоступныеПраваПоТипуПользователя()

Функция НедоступныеРолиПоТипуПользователя(ТипПользователя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	НедоступныеПрава = НедоступныеПраваПоТипуПользователя(ТипПользователя);
		
	ПроверятьОбщиеДанные = НЕ РазрешеноИзменениеОбщихДанных(ТипПользователя);
	
	// Только доступные роли пользователю.
	НедоступныеРоли = Новый Массив;
	Если (Не РольДоступна(Метаданные.Роли.ПолныеПрава)) И Не РольДоступна(Пользователи.РольАдминистратораСистемы()) Тогда
		Для Каждого Роль Из ВсеРоли() Цикл
			
			Если Не РольДоступна(Роль.Имя) Тогда
				НедоступныеРоли.Добавить(Роль.Имя);
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли;
	
	Для каждого Роль Из Метаданные.Роли Цикл
		НайденыНедоступныеПрава = Ложь;
		Для каждого Право Из НедоступныеПрава Цикл
			Если ПравоДоступа(Право, Метаданные, Роль) Тогда
				НайденыНедоступныеПрава = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПроверятьОбщиеДанные
			И НЕ НайденыНедоступныеПрава Тогда
			
			НайденыНедоступныеПрава = ДоступноИзменениеОбщихДанных(Роль.Имя);
		КонецЕсли;
		
		Если НайденыНедоступныеПрава Тогда
			Результат.Вставить(Роль, Истина);
		Иначе
			
			Если (Роль.Имя = "Touch") Или
				 (Роль.Имя = "Server") Или
				 (Роль.Имя = "FrontOffice") Тогда
				Результат.Вставить(Роль, Истина);
			КонецЕсли;
			
			// Только доступные роли пользователю.
			Если (Не НедоступныеРоли.Найти(Роль.Имя) = Неопределено) Тогда
				Результат.Вставить(Роль, Истина);
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции // НедоступныеРолиПоТипуПользователя()

