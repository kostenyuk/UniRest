
Функция ПривестиНаименованиеСокращенное(НаименованиеСокращенное) Экспорт
	
	Результат = Строка(Неопределено); ПромежуточныйРезультат = СокрЛП(НаименованиеСокращенное);
	
	// Замена сиволов.
	Для Индекс = 1 По СтрДлина(ПромежуточныйРезультат) Цикл
		Символ = Сред(ПромежуточныйРезультат, Индекс, 1);
		Если Найти(" !""#$%&'()*+,-./0123456789:;<=>?@[\]^_`{|}~0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnmЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮёйцукенгшщзхъфывапролджэячсмитьбюЙЇІЄйїіє", Символ) Тогда
			Результат = Результат + Символ;
		Иначе
			Если (Символ = "№") Тогда
				Символ = "N";
			Иначе
				Символ = Неопределено;
			КонецЕсли; 
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	// Контроль.
	МаксимальнаяДлина = 32;
	
	Если ПолучитьПараметрыУчета().НоменклатураМаксимальноСокращатьНаименованиеСокращенное Тогда
	
		ПромежуточныйРезультат = СтрЗаменить(Результат, " ", "");
		Если (СтрДлина(ПромежуточныйРезультат) <= 32) Тогда
			Результат = ПромежуточныйРезультат;
		Иначе
			
			// Сокращение.
			Пока Найти(Результат, "  ") Цикл Результат = СтрЗаменить(Результат, "  ", " "); КонецЦикла;
			
			Массив = __ОбщегоНазначенияКлиентСервер.Парсинг(Результат, " "); Потери = Новый Соответствие; Для Индекс = 0 По Массив.ВГраница() Цикл Потери[Индекс] = 0; КонецЦикла; 
			Разница = СтрДлина(ПромежуточныйРезультат) - 32;
			Пока Разница Цикл
				ИндексМаксимума = 0; Максимум = 0; Предмаксимум = 0;
				
				Индекс = Массив.ВГраница(); Пока (Индекс + 1) Цикл 
					Длина = СтрДлина(Массив[Индекс]);
					
					Если (Длина > Максимум) Или ((Длина = Максимум) И (Потери[Индекс] < Потери[ИндексМаксимума])) Тогда
						Предмаксимум = Максимум; Максимум = Длина; ИндексМаксимума = Индекс;
					Иначе
						Предмаксимум = Макс(Предмаксимум, Длина);
					КонецЕсли; 
					
					Индекс = Индекс - 1;
				КонецЦикла;
				
				Корректировка = Мин(Макс(Максимум - Предмаксимум, 1), Разница);
				Массив[ИндексМаксимума] = Лев(Массив[ИндексМаксимума], Максимум - Корректировка);
				
				Потери[ИндексМаксимума] = Потери[ИндексМаксимума] + Корректировка;
			
				Разница = Разница - Корректировка;	
			КонецЦикла;
			
			Результат = __ОбщегоНазначенияКлиентСервер.Парсинг(Массив, "");
			
		КонецЕсли; 
	
	Иначе
		
		Результат = Лев(Результат, МаксимальнаяДлина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПривестиСостав()

Функция ПривестиСостав(Состав) Экспорт
	
	Результат = Строка(Неопределено); ТекстовыйДокумент = Новый ТекстовыйДокумент; ТекстовыйДокумент.УстановитьТекст(Состав);
	
	Для Индекс = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(Индекс));
		
		Пока Найти(Строка, "  ") Цикл Строка = СтрЗаменить(Результат, "  ", " "); КонецЦикла;
		
		Если (Индекс - 1) Тогда
			Результат = Результат + Символы.ВК + Символы.ПС + Строка;
		Иначе
			Результат = Строка;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ПривестиСостав()

Функция ПривестиВыход(Выход) Экспорт
	
	Результат = Строка(Неопределено);
	
	Для Индекс = 1 По СтрДлина(Выход) Цикл Символ = Сред(Выход, Индекс, 1); Если Найти("0123456789", Символ) Тогда Результат = Результат + Символ; Иначе Результат = Результат + " "; КонецЕсли; КонецЦикла;
	
	Результат = СтрЗаменить(СокрЛП(Результат), " ", "/"); Пока Найти(Результат, "//") Цикл Результат = СтрЗаменить(Результат, "//", "/"); КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПривестиВыход()


Функция ДоступностьКомплекта(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Комплект"));
	
КонецФункции // ДоступностьКомплекта()

Функция ДоступностьМодификаторов(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Модификатор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
КонецФункции // ДоступностьМодификаторов()

Функция ДоступностьУсловий(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Модификатор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
КонецФункции // ДоступностьУсловий()

Функция ДоступностьСопутствующих(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Комплект")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
КонецФункции // ДоступностьСопутствующих()


Функция ДоступностьЦенововго(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Депозит")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Комплект")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Модификатор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Сертификат")) Или //Костенюк Александр 10.12.2014
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
КонецФункции // ДоступностьЦенововго()

Функция ДоступностьЦены(Номенклатура) Экспорт
	
	Возврат Номенклатура.Ценовой И ДоступностьЦенововго(Номенклатура);
	
КонецФункции // ДоступностьЦены()


Функция ДоступностьШтучного(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Депозит")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Комплект")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Сертификат")) Или //Костенюк Александр 10.12.2014
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
КонецФункции // ДоступностьШтучного()

Функция ДоступностьВесового(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
КонецФункции // ДоступностьВесового()

Функция ДоступностьВременного(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
КонецФункции // ДоступностьВременного()


Функция ДоступностьПечатаемого(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Депозит")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Комплект")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Модификатор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Сертификат")) Или //Костенюк Александр 10.12.2014
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
КонецФункции // ДоступностьПечатаемого()


Функция ТолькоШтучный(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Депозит")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Комплект")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Сертификат")) Или //Костенюк Александр 10.12.2014
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	
КонецФункции // ДоступностьШтучного()


Функция ДоступностьСвязанности(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Комплект")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
КонецФункции // ДоступностьСвязанности()

Функция ДоступностьСоставаВыхода(Номенклатура) Экспорт
	
	Возврат (Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Модификатор")) Или
			(Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	
КонецФункции // ДоступностьСоставаВыхода()

