
//	1С:Touch. Touch-ориентированные элементы управления и диалоговые формы, 
//	построенные с использованием только стандартных элементов управления платформы.
//	Copyright (C) 2008-2010 Переверзев Александр Владимирович.
//
//	Это программа является свободным программным обеспечением. Вы можете 
//	распространять и/или модифицировать её согласно условиям Стандартной 
//	Общественной Лицензии GNU, опубликованной Фондом Свободного Программного 
//	Обеспечения, версии 3 или, по Вашему желанию, любой более поздней версии. 
//
//	Эта программа распространяется в надежде, что она будет полезной, но БЕЗ 
//	ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО СОСТОЯНИЯ ПРИ 
//	ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите Стандартную 
//	Общественную Лицензию GNU для получения дополнительной информации. 
//
//	Вы должны были получить копию Стандартной Общественной Лицензии GNU вместе 
//	с программой. В случае её отсутствия, посмотрите <http://www.gnu.org/licenses/>.


// Зависимости:
//	Обработки.TouchПредупреждение.

#Если Клиент Тогда
	
Перем мФорма;

// Функция возвращает/устанавливает значение вводимого значения в случае если обработка является обработкой обслуживания.
//
// Параметры:
//	ТекущееЗначение - Число, Дата, Строка. Устанавливаемое значение (тип зависит процедуры инициализировавшей обслуживание).
//
Функция ТекущееЗначение(ТекущееЗначение = Неопределено) Экспорт
	
	// Проверка режима работы.
	Если (мФорма = Неопределено) Тогда
// TODO: Вызов исключения.
		Возврат Неопределено;
	КонецЕсли;
	
// TODO: Проверка входных параметров.

	// Установка значения.
	Если (Не ТекущееЗначение = Неопределено) Тогда
		мФорма.Значение = мФорма.ОписаниеТипов.ПривестиЗначение(ТекущееЗначение);
		мФорма.ПриПовторномОткрытии(Ложь);
	КонецЕсли;
	
	// Результат.
	Возврат	мФорма.ТекущееЗначение();
	
КонецФункции // Значение()

// Функция обработчик события ________.Нажатие элемента.
//
// Описание:
//	Процедура является обработчиком события нажатия на элементы управления обслуживаемых данным объектом и должна 
//	вызываться пользователем непосредственно из процедуры формы элементы формы которой были переданы в качетсве параметра "ЭлементыФормы" 
//  в одну из процедур инициализации обслуживания.
//	Фактически данная процедура является точкой входа в объект обратной связи формы и объекта.
//
Функция Нажатие(Элемент) Экспорт
	
	// Проверка режима работы.
	Если (мФорма = Неопределено) Тогда
// TODO: Вызов исключения.
		Возврат Ложь;
	КонецЕсли;
	
	// Перенаправление.
	Возврат мФорма.КнопкаНажатие(Элемент);
	
КонецФункции // Нажатие()
	
#КонецЕсли

#Если Клиент Тогда

// Функция ввода числа через числовую экранную клавиатуру.
//
// Параметры:
//	Число - Число. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Длина - Число. Длина вводимого числа включая дробную часть;
//	Точность - Число. Количество знаков в дробной части вводимого числа;
//	Мин - Число. Минимальное допустимое значение;
//	Макс - Число. Максимальное допустимое значение;
//	Формат - Строка. Формат представления значения;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//
// Возвращаемое значение:
//	Булево, ОбработкаОбъект.TouchВводЗначения. Истина - если был осуществлен ввод значения;
//	Число - Число. Введенное значение.
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, функцияя перестает быть интерактивной, а 
//	обработка превращается в обработку обслуживания элементов переданной формы пользователя.
//	Предпологается, что все обслуживаемые элементы формы описаны согласно следующему правилу:
//		<CallBackФорма>.ЭлементыФормы.<CallBackПрефикс><Элемент>
//	В данном режиме вызова парметры Мин и Макс игнорируются, а в качестве возвращаемого значения функцией
//	возвращается обработка обслуживания.
//
Функция ВводЧисла(Число, Подсказка = "", Длина = 0, Точность = 0, Мин = Неопределено, Макс = Неопределено, Формат = "", CallBackФорма = Неопределено, CallBackПрефикс = "Кнопка") Экспорт
	
	// Проверка входных параметров.
	
	// TODO: 1. Проверка входных параметров.
	//		 2. Элементов CallBackФормы на предмет связи с данными.
	
	// Определение типа значения.
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Длина, Точность, ДопустимыйЗнак.Неотрицательный));
	
	// Открываем форму ввода.
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаЧисла");
	Форма.Значение = ОписаниеТипов.ПривестиЗначение(Число);
	Форма.ОписаниеТипов = ОписаниеТипов;
	Форма.Формат = Формат;
	Если Не ПустаяСтрока(Подсказка) Тогда
		Форма.Заголовок = Подсказка;
	КонецЕсли;
	Если ПустаяСтрока(Формат) Тогда
		ФорматнаяСтрока = "ЧЦ=" + Строка(ОписаниеТипов.КвалификаторыЧисла.Разрядность) +"; ЧДЦ=" + ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	Иначе
		ФорматнаяСтрока = Формат;
	КонецЕсли;
	Если (Не Мин = Неопределено) И Булево(Мин) И (Не Макс = Неопределено) И Булево(Макс) Тогда
		Форма.Заголовок = Форма.Заголовок + НСтр("ru=' (от ';uk=' (від '")  + Формат(Мин, ФорматнаяСтрока) + " до " + Формат(Макс, ФорматнаяСтрока) + ")";
	ИначеЕсли (Не Мин = Неопределено) И Булево(Мин) Тогда
		Форма.Заголовок = Форма.Заголовок + НСтр("ru=' (от ';uk=' (від '") + Формат(Мин, ФорматнаяСтрока) + ")";
	ИначеЕсли (Не Макс = Неопределено) И Булево(Макс) Тогда
		Форма.Заголовок = Форма.Заголовок + " (до " + Формат(Макс, ФорматнаяСтрока) + ")";
	КонецЕсли;
	Форма.Мин = ОписаниеТипов.ПривестиЗначение(Мин);
	Форма.Макс = ОписаниеТипов.ПривестиЗначение(Макс);
	
	// Режим обслуживания элементов другой формы.
	Если (Не CallBackФорма = Неопределено) Тогда
		Высвободить();
		мФорма = Форма;
		мФорма.CallBackФорма = CallBackФорма;
		мФорма.CallBackПрефикс = CallBackПрефикс;
		мФорма.ПриПовторномОткрытии(Истина);
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	// Ввод значения.
	ПараметрЗакрытия = Форма.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("Булево")) Тогда
		Число = ОписаниеТипов.ПривестиЗначение(Форма.Значение);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВводЧисла()

// Функция ввода числа через числовую экранную клавиатуру.
//
// Параметры:
//	Число - Дата. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	ЧастьДаты - ЧастиДаты. Часть вводимой даты;
//	Мин - Дата. Минимальное допустимое значение;
//	Макс - Дата. Максимальное допустимое значение;
//	Формат - Строка. Формат представления значения;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Дата - Дата. Введенное значение.
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, функцияя перестает быть интерактивной, а 
//	обработка превращается в обработку обслуживания элементов переданной формы пользователя.
//	Предпологается, что все обслуживаемые элементы формы описаны согласно следующему правилу:
//		<CallBackФорма>.ЭлементыФормы.<CallBackПрефикс><Элемент>
//	В данном режиме вызова парметры Мин и Макс игнорируются, а в качестве возвращаемого значения функцией
//	возвращается обработка обслуживания.
//
Функция ВводДаты(Дата, Подсказка = "", ЧастьДаты = Неопределено, Мин = Неопределено, Макс = Неопределено, Формат = "", CallBackФорма = Неопределено, CallBackПрефикс = "Кнопка") Экспорт
	
	// Проверка входных параметров.
	
	// TODO: 1. Проверка входных параметров.
	//		 2. Элементов CallBackФормы на предмет связи с данными.
	
	// Определение типа значения.
	ОписаниеТипов = Новый ОписаниеТипов("Дата", ,, Новый КвалификаторыДаты(ЧастьДаты));
	
	// Открываем форму ввода.
	Если (ЧастьДаты = ЧастиДаты.Время) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("ФормаВремени");
	Иначе
		Форма = ЭтотОбъект.ПолучитьФорму("ФормаДаты");
	КонецЕсли;
	Форма.Значение = ОписаниеТипов.ПривестиЗначение(Дата);
	Форма.ОписаниеТипов = ОписаниеТипов;
	Форма.Формат = Формат;
	Если Не ПустаяСтрока(Подсказка) Тогда
		Форма.Заголовок = Подсказка;
	КонецЕсли;
	Если ПустаяСтрока(Формат) Тогда
		Если (ЧастьДаты = ЧастиДаты.Время) Тогда
			ФорматнаяСтрока = "ДФ=HH:mm; ДП=";
		Иначе
			ФорматнаяСтрока = "ДЛФ=D; ДП=";
		КонецЕсли;
	Иначе
		ФорматнаяСтрока = Формат;
	КонецЕсли;
	Если (Не Мин = Неопределено) И ЗначениеЗаполнено(Мин) И (Не Макс = Неопределено) И ЗначениеЗаполнено(Макс) Тогда
		Форма.Заголовок = Форма.Заголовок + НСтр("ru=' (от ';uk=' (від '") + Формат(Мин, ФорматнаяСтрока) + " до " + Формат(Макс, ФорматнаяСтрока) + ")";
	ИначеЕсли (Не Мин = Неопределено) И ЗначениеЗаполнено(Мин) Тогда
		Форма.Заголовок = Форма.Заголовок + НСтр("ru=' (от ';uk=' (від '") + Формат(Мин, ФорматнаяСтрока) + ")";
	ИначеЕсли (Не Макс = Неопределено) И ЗначениеЗаполнено(Макс) Тогда
		Форма.Заголовок = Форма.Заголовок + " (до " + Формат(Макс, ФорматнаяСтрока) + ")";
	КонецЕсли;
	Форма.Мин = ОписаниеТипов.ПривестиЗначение(Мин);
	Форма.Макс = ОписаниеТипов.ПривестиЗначение(Макс);
	
	// Режим обслуживания элементов другой формы.
	Если (Не CallBackФорма = Неопределено) Тогда
		//Костенюк Александр-Старт 23.10.2012
		Высвободить();
		//Костенюк Александр-Финиш 23.10.2012
		мФорма = Форма;
		мФорма.CallBackФорма = CallBackФорма;
		мФорма.CallBackПрефикс = CallBackПрефикс;
		мФорма.ПриПовторномОткрытии(Истина);
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	// Ввод значения.
	ПараметрЗакрытия = Форма.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("Булево")) Тогда
		Дата = ОписаниеТипов.ПривестиЗначение(Форма.Значение);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВводДаты()

// Функция ввода строки через экранную клавиатуру.
//
// Параметры:
//	Строка - Строка. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Длина - Число. Длина вводимой строки;
//	Многострочность - Булево. Определяет режим ввода многострочного текста;
//	КодЯзыка - Строка. Указывает код языка, на котором будет вводится строка по умолчанию;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Строка - Строка. Введенное значение.
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, функцияя перестает быть интерактивной, а 
//	обработка превращается в обработку обслуживания элементов переданной формы пользователя.
//	Предпологается, что все обслуживаемые элементы формы описаны согласно следующему правилу:
//		<CallBackФорма>.ЭлементыФормы.<CallBackПрефикс><Элемент>
//	В данном режиме в качестве возвращаемого значения функцией возвращается обработка обслуживания.
//
Функция ВводСтроки(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, КодЯзыка = Неопределено, CallBackФорма = Неопределено, CallBackПрефикс = "Кнопка") Экспорт
	
	// Проверка входных параметров.
	
	// TODO: 1. Проверка входных параметров.
	//		 2. Элементов CallBackФормы на предмет связи с данными.
	
	// Определение типа значения.
	ОписаниеТипов = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(Длина));
	
	// Открываем форму ввода.
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаСтроки");
	Форма.Значение = ОписаниеТипов.ПривестиЗначение(Строка);
	Форма.ОписаниеТипов = ОписаниеТипов;
	Если Не ПустаяСтрока(Подсказка) Тогда
		Форма.Заголовок = Подсказка;
	КонецЕсли;
	Форма.Многострочность = Многострочность;
	Форма.КодЯзыка = КодЯзыка;
	
	// Режим обслуживания элементов другой формы.
	Если (Не CallBackФорма = Неопределено) Тогда
		//Костенюк Александр-Старт 23.10.2012
		Высвободить();
		//Костенюк Александр-Финиш 23.10.2012
		мФорма = Форма;
		мФорма.CallBackФорма = CallBackФорма;
		мФорма.CallBackПрефикс = CallBackПрефикс;
		мФорма.ПриПовторномОткрытии(Истина);
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	// Ввод значения.
	ПараметрЗакрытия = Форма.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("Булево")) Тогда
		Строка = ОписаниеТипов.ПривестиЗначение(Форма.Значение);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПоискСтроки()

// Функция ввода пароля через числовую экранную клавиатуру.
//
// Параметры:
//	Подсказка - Строка. Текст заголовка окна диалога ввода числа.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществления ввода значения;
//	Пароль - Строка. Введенный пароль.
//
Функция ВводПароля(Пароль, Подсказка = "") Экспорт
	
	// Определение типа значения.
	ОписаниеТипов = Новый ОписаниеТипов("Строка");
	
	// Открываем форму ввода.
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаПароля");
	Если Не ПустаяСтрока(Подсказка) Тогда
		Форма.Заголовок = Подсказка;
	КонецЕсли;
	
	// Ввод значения.
	ПараметрЗакрытия = Форма.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("Булево")) Тогда
		Пароль = ОписаниеТипов.ПривестиЗначение(Форма.Значение);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВводПароля()

//Костенюк Александр-Старт 05.09.2012
// Функция ввода строки через экранную клавиатуру.
//
// Параметры:
//	Строка - Строка. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Длина - Число. Длина вводимой строки;
//	Многострочность - Булево. Определяет режим ввода многострочного текста;
//	КодЯзыка - Строка. Указывает код языка, на котором будет вводится строка по умолчанию;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Строка - Строка. Введенное значение.
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, функцияя перестает быть интерактивной, а 
//	обработка превращается в обработку обслуживания элементов переданной формы пользователя.
//	Предпологается, что все обслуживаемые элементы формы описаны согласно следующему правилу:
//		<CallBackФорма>.ЭлементыФормы.<CallBackПрефикс><Элемент>
//	В данном режиме в качестве возвращаемого значения функцией возвращается обработка обслуживания.
//
Функция ВводСтрокиЧисла(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, КодЯзыка = Неопределено, CallBackФорма = Неопределено, CallBackПрефикс = "Кнопка") Экспорт
	
	// Проверка входных параметров.
	
	// TODO: 1. Проверка входных параметров.
	//		 2. Элементов CallBackФормы на предмет связи с данными.
	
	// Определение типа значения.
	ОписаниеТипов = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(Длина));
	
	// Открываем форму ввода.
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаСтрокиЧисла");
	Форма.Значение = ОписаниеТипов.ПривестиЗначение(Строка);
	Форма.ОписаниеТипов = ОписаниеТипов;
	Если Не ПустаяСтрока(Подсказка) Тогда
		Форма.Заголовок = Подсказка;
	КонецЕсли;
	Форма.Многострочность = Многострочность;
	Форма.КодЯзыка = КодЯзыка;
	
	// Режим обслуживания элементов другой формы.
	Если (Не CallBackФорма = Неопределено) Тогда
		Высвободить();
		мФорма = Форма;
		мФорма.CallBackФорма = CallBackФорма;
		мФорма.CallBackПрефикс = CallBackПрефикс;
		мФорма.ПриПовторномОткрытии(Истина);
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	// Ввод значения.
	ПараметрЗакрытия = Форма.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("Булево")) Тогда
		Строка = ОписаниеТипов.ПривестиЗначение(Форма.Значение);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПоискСтроки()
//Костенюк Александр-Финиш 05.09.2012

//Костенюк Александр-Старт 23.10.2012
Процедура Высвободить() Экспорт
	
	Если (мФорма = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Режим обслуживания элементов другой формы.
	мФорма.CallBackФорма = Неопределено;
	мФорма = Неопределено;
	
КонецПроцедуры // Высвободить()
//Костенюк Александр-Финиш 23.10.2012


#КонецЕсли

