
Перем мТаблицаПозиций;


// Процедура добавляет требуюмую позицию из указанного источника и связывает ее с требуемым рабочим центром.
//
Процедура Добавить(Владелец, Источник, РабочийЦентр, Идентификатор, Возвратная = Ложь, Количество = Неопределено) Экспорт
     // Добавление.
	МассивСтрокТаблицы = мТаблицаПозиций.НайтиСтроки(Новый Структура("РабочийЦентр,Идентификатор,Возврат", РабочийЦентр, Идентификатор, Возвратная));
	
	Если Булево(МассивСтрокТаблицы.Количество()) Тогда
		СтрокаТаблицы = МассивСтрокТаблицы[0];
		
		СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + Количество;
		
	Иначе
		СтрокаТаблицы = мТаблицаПозиций.Добавить();
		//СтрокаТаблицы.Владелец = Источник.Владелец; 
		СтрокаТаблицы.РабочийЦентр = РабочийЦентр;
		СтрокаТаблицы.Идентификатор = Идентификатор;
		Для Каждого Реквизит Из Метаданные.РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.Ресурсы Цикл
			Реквизит = Реквизит.Имя;
			СтрокаТаблицы[Реквизит] = Источник[Реквизит];
		КонецЦикла;
		Для Каждого Реквизит Из Метаданные.РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.Реквизиты Цикл
			Реквизит = Реквизит.Имя;
			Попытка СтрокаТаблицы[Реквизит] = Источник[Реквизит]; Исключение КонецПопытки;
		КонецЦикла;
		СтрокаТаблицы.Возврат = Возвратная;
		СтрокаТаблицы.Владелец = Строка(Источник["Владелец"]);
		СтрокаТаблицы.Количество = Количество;
		СтрокаТаблицы.НомерСтроки = Источник["НомерСтроки"]; //Костенюк Александр 07.07.2013
	КонецЕсли;
	
КонецПроцедуры // Добавить()

// Процедура удаляет требуюмую позицию связанную с требуемым рабочим центром.
//
Процедура Удалить(РабочийЦентр = Неопределено, Идентификатор = Неопределено, Возвратная = Неопределено, Количество = Неопределено) Экспорт

	// Полная очистка.
	Если (РабочийЦентр = Неопределено) И (Идентификатор = Неопределено) И (Возвратная = Неопределено) Тогда
		мТаблицаПозиций.Очистить();
	КонецЕсли;
	
	// Отбор.
	Отбор = Новый Структура;
	Если (Не РабочийЦентр = Неопределено) Тогда
		Отбор.Вставить("РабочийЦентр", РабочийЦентр);
	КонецЕсли;
	Если (Не Идентификатор = Неопределено) Тогда
		Отбор.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	Если (Не Возвратная = Неопределено) Тогда
		Отбор.Вставить("Возвратная", Возвратная);
	КонецЕсли;
	
	МассивУдаляемых = мТаблицаПозиций.НайтиСтроки(Отбор);
	
	// Удаление.
	Если (Количество = Неопределено) Тогда
		
		Для Каждого СтрокаТаблицы Из МассивУдаляемых Цикл
			мТаблицаПозиций.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из МассивУдаляемых Цикл
			Если (СтрокаТаблицы.Количество <= Количество) Тогда
				мТаблицаПозиций.Удалить(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - Количество;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // Добавить()

// Процедура данные по рабочим центрам.
//
Процедура Очистить() Экспорт

	// Полная очистка.
	мТаблицаПозиций.Очистить();
	
КонецПроцедуры // Очистить()

// Функция возвращает таблицу задествованных рабочих центров, в разрезе операции возврата или без.
//
Функция РабочиеЦентры(ВРазрезеОперацииВозврата = Ложь) Экспорт
	
	ТаблицаРабочихЦентров = мТаблицаПозиций.Скопировать(); 
	
	Если (ВРазрезеОперацииВозврата) Тогда
		ТаблицаРабочихЦентров.Свернуть("РабочийЦентр,Возврат");
	Иначе
		ТаблицаРабочихЦентров.Свернуть("РабочийЦентр");
	КонецЕсли;
	
	Возврат ТаблицаРабочихЦентров;
	
КонецФункции // РабочиеЦентры()

// Функция возвращает позиции согласно требуемого отбора.
//
Функция Отбор(РабочийЦентр = Неопределено, Идентификатор = Неопределено, Возвратная = Неопределено) Экспорт
	
	// Выборка без отбора.
	Если (РабочийЦентр = Неопределено) И (Идентификатор = Неопределено) И (Возвратная = Неопределено) Тогда
		Возврат мТаблицаПозиций.Скопировать();
	КонецЕсли;
	
	// Отбор.
	Отбор = Новый Структура;
	Если (Не РабочийЦентр = Неопределено) Тогда
		Отбор.Вставить("РабочийЦентр", РабочийЦентр);
	КонецЕсли;
	Если (Не Идентификатор = Неопределено) Тогда
		Отбор.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;	
	
	Если (Не Возвратная = Неопределено) Тогда
		Отбор.Вставить("Возврат", Возвратная);		
	КонецЕсли;
	
	Возврат мТаблицаПозиций.Скопировать(Отбор,);
	
КонецФункции // Отбор()

// Процедура упорядочивает данные по рабочим центрам для дальнейшей с ней работой.
//
Процедура Упорядочить() Экспорт

	//мТаблицаПозиций.Сортировать("Возврат,РабочийЦентр,НаВынос,ПорядокПодачи,ДатаНачалаПериода");
	мТаблицаПозиций.Сортировать("Возврат,РабочийЦентр,НаВынос,ПорядокПодачи,ДатаНачалаПериода,НомерСтроки");
	
КонецПроцедуры // Упорядочить()


// Функция возвращает таблицу позиций.
//
Функция Позиции() Экспорт
	
	Возврат мТаблицаПозиций;
	
КонецФункции // Позиции()

// Функция возвращает количество позиций.
//
Функция Количество() Экспорт
	
	Возврат мТаблицаПозиций.Количество();
	
КонецФункции // Количество()

//Костенюк Александр-Старт 10.10.2013
// Процедура загружает таблицу позиций
Процедура Загрузить(ТаблицаПозиций) Экспорт
	
	ТаблицаПозиций.Колонки.Добавить("Штрихкод");
	ТаблицаПозиций.Колонки.Добавить("ТипШтрихкода");

	мТаблицаПозиций = ТаблицаПозиций.Скопировать();
	
КонецПроцедуры
//Костенюк Александр-Финиш 10.10.2013


// Инициализация переменных.
мТаблицаПозиций = Новый ТаблицаЗначений;
Для Каждого Реквизит Из Метаданные.РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.Измерения Цикл
	мТаблицаПозиций.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
КонецЦикла;
Для Каждого Реквизит Из Метаданные.РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.Ресурсы Цикл
	мТаблицаПозиций.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
КонецЦикла;
Для Каждого Реквизит Из Метаданные.РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.Реквизиты Цикл
	мТаблицаПозиций.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
КонецЦикла;
мТаблицаПозиций.Колонки.Добавить("Возврат", Новый ОписаниеТипов("Булево"));
мТаблицаПозиций.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число")); //Костенюк Александр 07.07.2013
мТаблицаПозиций.Колонки.Удалить("Документ");

КолонкаИдентификатор = мТаблицаПозиций.Колонки.Найти("Идентификатор");
Если КолонкаИдентификатор = Неопределено  тогда
	мТаблицаПозиций.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
КонецЕсли;

КолонкаВладелец = мТаблицаПозиций.Колонки.Найти("Владелец");
Если КолонкаВладелец = Неопределено  тогда
	мТаблицаПозиций.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Строка"));
КонецЕсли;
  