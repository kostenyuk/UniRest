
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
    
	Если Не Константы.ИспользоватьСинхронизациюДанных.Получить() Тогда
		ТекстСообщения = НСтр("ru = 'Синхронизация данных отключена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	Если СписокПлановОбмена.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Возможность настройки синхронизации данных не предусмотрена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ЕстьПравоНаПросмотрЖурналаРегистрации = Пользователи.РолиДоступны("ПросмотрЖурналаРегистрации");
	
	РольДоступнаДобавлениеИзменениеОбменовДанными = Пользователи.РолиДоступны("НастройкаСинхронизацииДанных");
	Если РольДоступнаДобавлениеИзменениеОбменовДанными Тогда
		ДобавитьКомандыСозданияНовогоОбмена();
	Иначе
		Элементы.НастроитьСинхронизациюДанныхНеНастроена.Видимость = Ложь;
		Элементы.ГруппаНастройкаСинхронизации.Видимость = Ложь;
		Элементы.ИнформационнаяНадпись.ТекущаяСтраница = Элементы.НетПравНаСинхронизацию;
		Элементы.ГруппаСценарииСинхронизации.Видимость = Ложь;
		Элементы.ГруппаНастройкиСинхронизации.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьОбменСЛБК = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСЛокальнымиБухгалтерскимиКонфигурациями");
	
	ОбновитьСписокСостоянияУзлов();
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		Если ЕстьПравоНаПросмотрЖурналаРегистрации Тогда
			
			Элементы.ДатаУспешнойЗагрузки.Видимость = Истина;
			Элементы.ДатаУспешнойВыгрузки.Видимость = Истина;
			Элементы.НадписьДатаПолучения.Видимость = Ложь;
			Элементы.НадписьДатаОтправки.Видимость = Ложь;
			
		Иначе
			
			Элементы.ДатаУспешнойЗагрузки.Видимость = Ложь;
			Элементы.ДатаУспешнойВыгрузки.Видимость = Ложь;
			Элементы.НадписьДатаПолучения.Видимость = Истина;
			Элементы.НадписьДатаОтправки.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Истина Или Не РольДоступнаДобавлениеИзменениеОбменовДанными Или ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Элементы.ПрефиксСинхронизацияНеНастроена.Видимость = Ложь;
		Элементы.ПрефиксОднаСинхронизация.Видимость = Ложь;
		Элементы.ПрефиксИБ.Видимость = Ложь;
		
	Иначе
		
		ПрефиксИБ = ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
		
	КонецЕсли;
	
	//.. Начало изменения Dim)on  1 августа 2013 г. 22:13:38
	//
	//Если Не КоличествоСинхронизаций = 0 Тогда
	//Элементы.СинхронизацияДанных.ТекущаяСтраница = Элементы.СинхронизацияДанных.ПодчиненныеЭлементы.НастройкиСинхронизацииЦРС;
	//Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПНастройкиСинхронизацииЦРС;
	//
	////КонецЕсли;
	//ПроверитьРолевоеЗначениеЭтогоУзлаНаСервере();
	////ИнициализацияДереваНастройкиСправочниковИДокументов();
	//
	//.. Конец изменения Dim)on  1 августа 2013 г. 22:13:38
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
		
		Элементы.СинхронизацияДанных.ТекущаяСтраница = Элементы.СинхронизацияДанных.ПодчиненныеЭлементы.НастройкиСинхронизацииЦРС;
		Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПНастройкиСинхронизацииЦРС;
		
		ПроверитьРолевоеЗначениеЭтогоУзлаНаСервере();
		
		РолевоеЗначениеЭтогоУзлаПриИзмененииНаКлиенте();
		
	Иначе
		Элементы.СинхронизацияДанных.ТекущаяСтраница = Элементы.СинхронизацияДанных.ПодчиненныеЭлементы.НесколькоСинхронизаций;
		Элементы.СтраницаНавигацииГотово.Видимость = Ложь;
		ПодключитьОбработчикОжидания("ОбновитьДанныеМонитора", 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УзелПланаОбмена" 
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСозданияОбменаДанными"
		ИЛИ ИмяСобытия = "ЗакрытаФормаРасписанияСинхронизаций"
		Тогда
		ПроверитьРолевоеЗначениеЭтогоУзлаНаСервере();	
		РолевоеЗначениеЭтогоУзлаПриИзмененииНаКлиенте();
	КонецЕсли;
	
	Если    ИмяСобытия = "ВыполненОбменДанными"
		ИЛИ ИмяСобытия = "Запись_СценарииОбменовДанными"
		ИЛИ ИмяСобытия = "Запись_УзелПланаОбмена"
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСопоставленияОбъектов"
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСозданияОбменаДанными"
		ИЛИ ИмяСобытия = "ЗакрытаФормаРезультатовОбменаДанными" Тогда
		
		// обновляем данные монитора
		ОбновитьДанныеМонитора();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НастроитьСинхронизациюДанных(Элемент)
	
	ЗаписатьВУзлыНаСервере();
		
	Если ТипЗнч(НастраиваемыеСинхронизации) = Тип("СписокЗначений") И НастраиваемыеСинхронизации.Количество() = 1 Тогда
	 	ВыбраннаяСинхронизация = НастраиваемыеСинхронизации[0]
	Иначе
		ВыбраннаяСинхронизация = ВыбратьИзМеню(НастраиваемыеСинхронизации, Элемент);
	КонецЕсли;
		
	Если ВыбраннаяСинхронизация <> Неопределено Тогда
		
		ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными(ВыбраннаяСинхронизация.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокСостоянияУзлов

&НаКлиенте
Процедура СписокСостоянияУзловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//.. Начало изменения Dim)on  5 августа 2013 г. 0:30:31
	//
	Если Поле.Имя = "СписокСостоянияУзловРасписаниеНастроено" Тогда
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		//Если ТипЗнч(ТекущиеДанные.УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ОбменДанными2K_CRS") Тогда
		//	Возврат
		//КонецЕсли;
		//ОбменДаннымиКлиент.ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
		ПараметрыФормы = Новый Структура("ИмяПланаОбмена", "Расписание");
		ПараметрыФормы.Вставить("УзелИнформационнойБазы", ТекущиеДанные.УзелИнформационнойБазы);
		РезультатМодальногоОкна = ОткрытьФормуМодально("Обработка.ПомощникСозданияОбменаДанными.Форма.Форма", ПараметрыФормы);
	КонецЕсли;
	
	Возврат;
	//
	//.. Конец изменения Dim)on  5 августа 2013 г. 0:30:31
	Ответ = Вопрос(НСтр("ru = 'Выполнить синхронизацию данных?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(Элементы.СписокСостоянияУзлов.ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСостоянияУзловПриАктивизацииСтроки(Элемент)
	
	ЗаданыТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные <> Неопределено;
	
	Элементы.Настройка.Доступность = ЗаданыТекущиеДанные;
	Элементы.СписокСостоянияУзловИзменитьУзелИнформационнойБазы.Доступность = ЗаданыТекущиеДанные;
	
	Элементы.ГруппаКнопокВыполненияОбменаДанными.Доступность = ЗаданыТекущиеДанные;
	Элементы.КонтекстноеМенюСписокСостоянияДиагностика.Доступность = ЗаданыТекущиеДанные;
	Элементы.ГруппаКнопокНастройкиРасписания.Доступность = ЗаданыТекущиеДанные;
	
	Элементы.СписокСостоянияУзловОбщаяКомандаНастроитьПараметрыТранспортаСообщенийОбмена.Доступность = ЗаданыТекущиеДанные;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		
	КонецЕсли;
	
	ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(УзелОбмена, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменДаннымиИнтерактивно(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	ОбменДаннымиКлиент.ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(УзелОбмена, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСценарииОбменаДанными(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	ОбменДаннымиКлиент.ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	ОбновитьДанныеМонитора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУзелИнформационнойБазы(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено Тогда
			УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьЗначение(УзелОбмена);
	//Элементы.СинхронизацияДанных.ТекущаяСтраница = Элементы.СинхронизацияДанных.ПодчиненныеЭлементы.НастройкиСинхронизацииЦРС;
	//Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПНастройкиСинхронизацииЦРС;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиСинхронизации(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено Тогда
			УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СинхронизацияДанных.ТекущаяСтраница = Элементы.СинхронизацияДанных.ПодчиненныеЭлементы.НастройкиСинхронизацииЦРС;
	Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПНастройкиСинхронизацииЦРС;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		
	КонецЕсли;
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелОбмена, ЭтаФорма, "ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		
	КонецЕсли;
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелОбмена, ЭтаФорма, "ВыгрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникНастройкиОбменаДанными(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбновление(Команда)
//{{MRG[ <-> ]
	ОбменДаннымиКлиент.ОбновитьКонфигурацию();
	Закрыть();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ОбменДаннымиКлиент.ВыполнитьОбновлениеИнформационнойБазы();
//}}MRG[ <-> ]
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюДанныхОдна(Команда)
	
	НастроитьСинхронизациюДанных(Элементы.НастроитьСинхронизациюДанныхОдна);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюДанныхНеНастроена(Команда)
	
	НастроитьСинхронизациюДанных(Элементы.НастроитьСинхронизациюДанныхНеНастроена);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСценарииОбменаДаннымиОдна(Команда)
	
	УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
	
	СценарийСинхронизации = СценарийСинхронизацииПоУзлу(УзелОбмена);
	ПараметрыФормы = Новый Структура;
	
	Если СценарийСинхронизации = Неопределено Тогда
		
		ПараметрыФормы.Вставить("УзелИнформационнойБазы", УзелОбмена);
		
	Иначе
		
		ПараметрыФормы.Вставить("Ключ", СценарийСинхронизации);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СценарииОбменовДанными.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьУспешные(Команда)
	
	СкрыватьУспешные = Не СкрыватьУспешные;
	
	Элементы.СписокСостоянияУзловСкрыватьУспешные.Пометка = СкрыватьУспешные;
	
	ОбновитьСписокСостоянияУзлов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоОбмену(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		
	КонецЕсли;
	
	СсылкаНаПодробноеОписание = ПодробнаяИнформацияНаСервере(УзелОбмена);
	
	ОбменДаннымиКлиент.ОткрытьПодробноеОписаниеСинхронизации(СсылкаНаПодробноеОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатыОднаСинхронизация(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УзлыОбмена", МассивИспользуемыхУзлов(СписокСостоянияУзлов));
	ОткрытьФорму("РегистрСведений.РезультатыОбменаДанными.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОтправляемыхДанных(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		
	КонецЕсли;
	
	ОбменДаннымиКлиент.ОткрытьСоставОтправляемыхДанных(УзелОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкуСинхронизации(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		
	КонецЕсли;
	
	ОбменДаннымиКлиент.УдалитьНастройкуСинхронизации(УзелОбмена);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьДанныеМонитора()
	
	Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ИндексСтрокиСписокСостоянияУзлов = ПолучитьТекущийИндексСтроки("СписокСостоянияУзлов");
	
	// выполняем обновление таблиц монитора на сервере
	ОбновитьСписокСостоянияУзлов(Истина);
	
	// выполняем позиционирование курсора
	ВыполнитьПозиционированиеКурсора("СписокСостоянияУзлов", ИндексСтрокиСписокСостоянияУзлов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСостоянияУзлов(ТолькоОбновлениеСписка = Ложь)
	
	// обновляем данные в списке состояния узлов
	СписокСостоянияУзлов.Загрузить(ОбменДаннымиСервер.ТаблицаМонитораОбменаДанными(ОбменДаннымиПовтИсп.ПланыОбменаБСП(), "Код", СкрыватьУспешные));
	
	Если Не ТолькоОбновлениеСписка Тогда
		
		ПроверитьСостояниеОбменаСГлавнымУзлом();
		
		Если КоличествоСинхронизаций <> СписокСостоянияУзлов.Количество() Тогда
			
			ОбновитьКоличествоСинхронизаций();
			
		ИначеЕсли КоличествоСинхронизаций = 1 Тогда
			
			УстановитьЭлементыОднойСинхронизации();
			
		КонецЕсли;
		
		ОбновитьКомандыРезультатовСинхронизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоСинхронизаций(ПереходСтраниц = Ложь)
	
	КоличествоСинхронизаций = СписокСостоянияУзлов.Количество();
	ПанельСинхронизации = Элементы.СинхронизацияДанных;
	ЕстьПравоОбновления = ПравоДоступа("ОбновлениеКонфигурацииБазыДанных", Метаданные);
	
	Если ПереходСтраниц = Ложь Тогда
		Возврат
	КонецЕсли;
	
	Если КоличествоСинхронизаций = 0 И Не ПанельСинхронизации.ТекущаяСтраница = ПанельСинхронизации.ПодчиненныеЭлементы.НастройкиСинхронизацииЦРС Тогда
		
		//ПанельСинхронизации.ТекущаяСтраница = ПанельСинхронизации.ПодчиненныеЭлементы.СинхронизацияНеНастроена;
		//.. Начало изменения Dim)on  19 августа 2013 г. 11:49:39
		//
		ПанельСинхронизации.ТекущаяСтраница = ПанельСинхронизации.ПодчиненныеЭлементы.НастройкиСинхронизацииЦРС;
		Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПНастройкиСинхронизацииЦРС;
		//
		//.. Конец изменения Dim)on  19 августа 2013 г. 11:49:39
		Заголовок = НСтр("ru = 'Синхронизация данных'");
		
	ИначеЕсли Ложь И КоличествоСинхронизаций = 1 Тогда
		
		Элементы.ПравоОбновленияСтраницы.ТекущаяСтраница = ?(ЕстьПравоОбновления, 
			Элементы.ПравоОбновленияСтраницы.ПодчиненныеЭлементы.ИнформацияОбменДаннымиПриостановленЕстьПравоОбновления1,
			Элементы.ПравоОбновленияСтраницы.ПодчиненныеЭлементы.ИнформацияОбменДаннымиПриостановленНетПраваОбновления1);
			
		УстановитьЭлементыОднойСинхронизации();
		
		ПанельСинхронизации.ТекущаяСтраница = ПанельСинхронизации.ПодчиненныеЭлементы.ОднаСинхронизация;
		//.. Начало изменения Dim)on  22 августа 2013 г. 16:57:43
		//
		//Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПСинхронизация;
		//
		//.. Конец изменения Dim)on  22 августа 2013 г. 16:57:43
	Иначе
	//ИначеЕсли Не Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПСинхронизация Тогда
	
		ПанельСинхронизации.ТекущаяСтраница = ПанельСинхронизации.ПодчиненныеЭлементы.НесколькоСинхронизаций;
		
		Элементы.СписокСостоянияУзловИзменитьУзелИнформационнойБазы.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
		Элементы.НастроитьРасписаниеВыполненияОбмена.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
		Элементы.НастроитьРасписаниеВыполненияОбмена1.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
		
		Элементы.ИнформацияОбменДаннымиПриостановленЕстьПравоОбновления.Видимость = ЕстьПравоОбновления;
		Элементы.ИнформацияОбменДаннымиПриостановленНетПраваОбновления.Видимость = Не ЕстьПравоОбновления;
		
		НадписьОбменДаннымиПриостановлен = ?(ЕстьПравоОбновления,
		Элементы.НадписьОбменДаннымиПриостановленЕстьПравоОбновления,
		Элементы.НадписьОбменДаннымиПриостановленНетПраваОбновления);
		
		НадписьОбменДаннымиПриостановлен.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НадписьОбменДаннымиПриостановлен.Заголовок, ОбменДаннымиСервер.ГлавныйУзел());
		
		//.. Начало изменения Dim)on  22 августа 2013 г. 16:57:51
		//
		//Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПСинхронизация;
		//
		//.. Конец изменения Dim)on  22 августа 2013 г. 16:57:51
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыРезультатовСинхронизации()
	
	Если КоличествоСинхронизаций <> 0 Тогда
		
		СтруктураЗаголовка = ОбменДаннымиСервер.СтруктураЗаголовкаГиперссылкиМонитораПроблем(МассивИспользуемыхУзлов(СписокСостоянияУзлов));
		
		Если КоличествоСинхронизаций = 1 Тогда
			
			Элемент = Элементы.ОткрытьРезультатыОднаСинхронизация;
			
		ИначеЕсли КоличествоСинхронизаций > 1 Тогда
			
			Элемент = Элементы.ОткрытьРезультатыСинхронизацииДанных;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Элемент, СтруктураЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивИспользуемыхУзлов(СписокСостоянияУзлов)
	
	УзлыОбмена = Новый Массив;
	
	Для Каждого СтрокаУзла Из СписокСостоянияУзлов Цикл
		УзлыОбмена.Добавить(СтрокаУзла.УзелИнформационнойБазы);
	КонецЦикла;
	
	Возврат УзлыОбмена;
	
КонецФункции

&НаСервере
Процедура УстановитьЭлементыОднойСинхронизации()
	
	НастроеннаяСинхронизация = СписокСостоянияУзлов[0];
	
	Если НастроеннаяСинхронизация.УзелИнформационнойБазы = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Работа монитора синхронизации данных в неразделенном сеансе не поддерживается'");
		
	КонецЕсли;
	
	ЗаголовокФормы = НСтр("ru = 'Синхронизация данных с ""%Программа%""'");
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%Программа%", НастроеннаяСинхронизация.УзелИнформационнойБазы.Наименование);
		Заголовок = ЗаголовокФормы;
		
	Если ЕстьПравоНаПросмотрЖурналаРегистрации Тогда
			
		Элементы.ДатаУспешнойЗагрузки.Заголовок = НастроеннаяСинхронизация.ПредставлениеДатыПоследнейУспешнойЗагрузки;
		Элементы.ДатаУспешнойВыгрузки.Заголовок = НастроеннаяСинхронизация.ПредставлениеДатыПоследнейУспешнойВыгрузки;
		
	Иначе
		
		Элементы.НадписьДатаПолучения.Заголовок = НастроеннаяСинхронизация.ПредставлениеДатыПоследнейУспешнойЗагрузки;
		Элементы.НадписьДатаОтправки.Заголовок = НастроеннаяСинхронизация.ПредставлениеДатыПоследнейУспешнойВыгрузки;
		
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	
	Если НастроеннаяСинхронизация.ДатаПоследнейУспешнойВыгрузки <> НастроеннаяСинхронизация.ДатаПоследнейВыгрузки
		Или НастроеннаяСинхронизация.ДатаПоследнейВыгрузки <> ПустаяДата
		Или НастроеннаяСинхронизация.РезультатПоследнейВыгрузкиДанных <> 0 Тогда
		
		ПодсказкаВыгрузки = НСтр("ru = 'Данные отправлены: %ДатаОтправки%
										|Последняя попытка: %ДатаПопытки%'");
		ПодсказкаВыгрузки = СтрЗаменить(ПодсказкаВыгрузки, "%ДатаОтправки%", НастроеннаяСинхронизация.ПредставлениеДатыПоследнейУспешнойВыгрузки);
		ПодсказкаВыгрузки = СтрЗаменить(ПодсказкаВыгрузки, "%ДатаПопытки%", НастроеннаяСинхронизация.ПредставлениеДатыПоследнейВыгрузки);
		
	Иначе
		
		ПодсказкаВыгрузки = "";
		
	КонецЕсли;
	
	Если НастроеннаяСинхронизация.ДатаПоследнейУспешнойЗагрузки <> НастроеннаяСинхронизация.ДатаПоследнейЗагрузки
		Или НастроеннаяСинхронизация.ДатаПоследнейЗагрузки <> ПустаяДата
		Или НастроеннаяСинхронизация.РезультатПоследнейЗагрузкиДанных <> 0 Тогда
		
		ПодсказкаЗагрузки = НСтр("ru = 'Данные получены: %ДатаПолучения%
										|Последняя попытка: %ДатаПопытки%'");
		ПодсказкаЗагрузки = СтрЗаменить(ПодсказкаЗагрузки, "%ДатаПолучения%", НастроеннаяСинхронизация.ПредставлениеДатыПоследнейУспешнойЗагрузки);
		ПодсказкаЗагрузки = СтрЗаменить(ПодсказкаЗагрузки, "%ДатаПопытки%", НастроеннаяСинхронизация.ПредставлениеДатыПоследнейЗагрузки);
		
	Иначе
		
		ПодсказкаЗагрузки = "";
		
	КонецЕсли;
	
	Элементы.ДекорацияСтатусПустой.Видимость = Истина;
	Если НастроеннаяСинхронизация.РезультатПоследнейЗагрузкиДанных =2 Тогда
		НастроеннаяСинхронизация.РезультатПоследнейЗагрузкиДанных = ?(ОбменДаннымиСервер.ОбменДаннымиВыполненСПредупреждениями(НастроеннаяСинхронизация.УзелИнформационнойБазы), 2, 0);
	КонецЕсли;
	
	КартинкаСтатуса(Элементы.ДекорацияСтатусЗагрузки, НастроеннаяСинхронизация.РезультатПоследнейЗагрузкиДанных, ПодсказкаЗагрузки);
	КартинкаСтатуса(Элементы.ДекорацияСтатусВыгрузки, НастроеннаяСинхронизация.РезультатПоследнейВыгрузкиДанных, ПодсказкаВыгрузки);
	
	Если НастроеннаяСинхронизация.РезультатПоследнейЗагрузкиДанных <> 0
		Или (НастроеннаяСинхронизация.РезультатПоследнейЗагрузкиДанных = 0
		И НастроеннаяСинхронизация.РезультатПоследнейВыгрузкиДанных = 0) Тогда
		
		Элементы.ДекорацияСтатусПустой.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ДекорацияУспешнаяЗагрузка.Подсказка = Элементы.ДекорацияСтатусЗагрузки.Подсказка;
	Элементы.ДекорацияУспешнаяВыгрузка.Подсказка = Элементы.ДекорацияСтатусВыгрузки.Подсказка;
	
	Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(НастроеннаяСинхронизация.УзелИнформационнойБазы) Тогда
		
		Элементы.ВыполнитьОбменДаннымиИнтерактивно2.Видимость = Ложь;
		
	КонецЕсли;
	
	ОписаниеПравилСинхронизацииДанных = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанных(НастроеннаяСинхронизация.УзелИнформационнойБазы);
	Элементы.ОписаниеПравилСинхронизацииДанных.Высота = СтрЧислоСтрок(ОписаниеПравилСинхронизацииДанных);
	
	РасписаниеУзлаИнформационнойБазы = РасписаниеУзлаИнформационнойБазы(НастроеннаяСинхронизация.УзелИнформационнойБазы);
	
	Если РасписаниеУзлаИнформационнойБазы <> Неопределено Тогда
		
		РасписаниеСинхронизацииДанных = РасписаниеУзлаИнформационнойБазы;
		
	Иначе
		
		РасписаниеСинхронизацииДанных = НСтр("ru = 'Расписание синхронизации не настроено'");;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандыСозданияНовогоОбмена()
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
		
		ИмяПланаОбмена = Элемент.Значение;
		
		МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
		
		Если МенеджерПланаОбмена.ИспользоватьПомощникСозданияОбменаДанными() 
			И ОбменДаннымиПовтИсп.ДоступноИспользованиеПланаОбмена(ИмяПланаОбмена) Тогда
			
			ЗаголовокКоманды = МенеджерПланаОбмена.ЗаголовокКомандыДляСозданияНовогоОбменаДанными();
			
			Команды.Добавить(ИмяПланаОбмена);
			Команды[ИмяПланаОбмена].Заголовок = ЗаголовокКоманды + "...";
			Команды[ИмяПланаОбмена].Действие  = "ОткрытьПомощникНастройкиОбменаДанными";
			
			Если Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза Тогда
				
				Элементы.Добавить(ИмяПланаОбмена, Тип("КнопкаФормы"), Элементы.ПодменюРиб);
				Элементы[ИмяПланаОбмена].ИмяКоманды = ИмяПланаОбмена;
				
				НастраиваемыеСинхронизации.Добавить(ИмяПланаОбмена, Команды[ИмяПланаОбмена].Заголовок);
				
			Иначе
				
				Элементы.Добавить(ИмяПланаОбмена, Тип("КнопкаФормы"), Элементы.ПодменюПрочее);
				Элементы[ИмяПланаОбмена].ИмяКоманды = ИмяПланаОбмена;
				
				НастраиваемыеСинхронизации.Добавить(ИмяПланаОбмена, Команды[ИмяПланаОбмена].Заголовок);
				
				Если МенеджерПланаОбмена.КорреспондентВМоделиСервиса() Тогда
					
					ИмяКоманды = "[ИмяПланаОбмена]КорреспондентВМоделиСервиса";
					ИмяКоманды = СтрЗаменить(ИмяКоманды, "[ИмяПланаОбмена]", ИмяПланаОбмена);
					
					Команды.Добавить(ИмяКоманды);
					Команды[ИмяКоманды].Заголовок = ЗаголовокКоманды + НСтр("ru = ' (в сервисе)...'");
					Команды[ИмяКоманды].Действие  = "ОткрытьПомощникНастройкиОбменаДанными";
					
					Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.ПодменюПрочее);
					Элементы[ИмяКоманды].ИмяКоманды = ИмяКоманды;
					
					НастраиваемыеСинхронизации.Добавить(ИмяКоманды, Команды[ИмяКоманды].Заголовок);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийИндексСтроки(ИмяТаблицы)
	
	// возвращаемое значение функции
	ИндексСтроки = Неопределено;
	
	// при обновлении монитора выполняем позиционирование курсора
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИндексСтроки = ЭтаФорма[ИмяТаблицы].Индекс(ТекущиеДанные);
		
	КонецЕсли;
	
	Возврат ИндексСтроки;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПозиционированиеКурсора(ИмяТаблицы, ИндексСтроки)
	
	Если ИндексСтроки <> Неопределено Тогда
		
		// выполняем проверки позиционирования курсора после получения новых данных
		Если ЭтаФорма[ИмяТаблицы].Количество() <> 0 Тогда
			
			Если ИндексСтроки > ЭтаФорма[ИмяТаблицы].Количество() - 1 Тогда
				
				ИндексСтроки = ЭтаФорма[ИмяТаблицы].Количество() - 1;
				
			КонецЕсли;
			
			// позиционируем курсор
			Элементы[ИмяТаблицы].ТекущаяСтрока = ЭтаФорма[ИмяТаблицы][ИндексСтроки].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если спозиционировать строку не удалось, то устанавливаем текущей первую строку
	Если Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено
		И ЭтаФорма[ИмяТаблицы].Количество() <> 0 Тогда
		
		Элементы[ИмяТаблицы].ТекущаяСтрока = ЭтаФорма[ИмяТаблицы][0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеОбменаСГлавнымУзлом()
	
	ТребуетсяОбновление = ОбменДаннымиВызовСервера.ТребуетсяУстановкаОбновления();
	
	Элементы.ИнформационнаяПанельТребуетсяОбновление1.Видимость = ТребуетсяОбновление;
	Элементы.ИнформационнаяПанельТребуетсяОбновление.Видимость = ТребуетсяОбновление;
	
	Элементы.ВыполнитьОбменДанными2.Видимость = Не ТребуетсяОбновление;
	
КонецПроцедуры

&НаСервере
Функция СценарийСинхронизацииПоУзлу (УзелИнформационнойБазы)
	
	НастроенныйСценарий = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СценарииОбменовДанными.Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|	СценарииОбменовДанными.НастройкиОбмена.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СценарииОбменовДанными.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НастроенныйСценарий = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат НастроенныйСценарий;
	
КонецФункции

&НаСервере
Функция РасписаниеУзлаИнформационнойБазы(УзелИнформационнойБазы)
	
	РасписаниеРегламентногоЗадания = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СценарииОбменовДанными.РегламентноеЗаданиеGUID
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|	СценарииОбменовДанными.ИспользоватьРегламентноеЗадание = ИСТИНА
	|	И СценарииОбменовДанными.НастройкиОбмена.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СценарииОбменовДанными.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		РегламентноеЗаданиеОбъект = ОбменДаннымиВызовСервера.НайтиРегламентноеЗаданиеПоПараметру(Выборка.РегламентноеЗаданиеGUID);
		Если РегламентноеЗаданиеОбъект <> Неопределено Тогда
			РасписаниеРегламентногоЗадания = РегламентноеЗаданиеОбъект.Расписание;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасписаниеРегламентногоЗадания;
	
КонецФункции

&НаСервере
Процедура КартинкаСтатуса(ЭлементУправления, ВидСобытия, Подсказка)

	Если ВидСобытия = 1 Тогда
		ЭлементУправления.Картинка = БиблиотекаКартинок.СостояниеОбменаДаннымиОшибка;
		ЭлементУправления.Видимость = Истина;
	ИначеЕсли ВидСобытия = 2 Тогда
		ЭлементУправления.Картинка = БиблиотекаКартинок.Предупреждение;
		ЭлементУправления.Видимость = Истина;
	Иначе
		ЭлементУправления.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементУправления.Подсказка = Подсказка;
	
КонецПроцедуры

&НаСервере
Функция ПодробнаяИнформацияНаСервере(УзелОбмена)
	
	МенеджерПланаОбмена = ПланыОбмена[УзелОбмена.Метаданные().Имя];
	СсылкаНаПодробноеОписание = МенеджерПланаОбмена.ПодробнаяИнформацияПоОбмену();
	
	Возврат СсылкаНаПодробноеОписание;
	
КонецФункции

//.. Начало изменения Dim)on  1 августа 2013 г. 11:55:55
//

&НаСервере
Функция ПолучитьРезультатЗапросаПоСоставуОбмена(УзелОбмена, ИмяРодителя)

	СписокСоставаПоПолномуИмени = ПроцедурыОбменаДаннымиFrontOffice_Restoran.ПолучитьСписокОбъектовСоставаПланаОбмена("ОбменДанными2K_CRS", Ложь);
	
	СписокРодителей = Новый СписокЗначений;
	
	Если ПустаяСтрока(ИмяРодителя) Тогда
		СписокРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Справочники);
		СписокРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.РегистрыСведений);
		СписокРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.ПланыВидовХарактеристик);
	Иначе	
		СписокРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Документы);
	КонецЕсли;
	
	////Костенюк Александр-Закомментировано 14.05.2014
	//// эти регистры должны мигрировать в ЦБ
	//ИскомыйЭлемент = СписокСоставаПоПолномуИмени.Найти("РегистрСведений.АнализДействий");
	//Если Не ИскомыйЭлемент = Неопределено Тогда
	//	СписокСоставаПоПолномуИмени.Удалить(ИскомыйЭлемент)
	//КонецЕсли;
	//ИскомыйЭлемент = СписокСоставаПоПолномуИмени.Найти("РегистрСведений.СомнительныеСитуации");
	//Если Не ИскомыйЭлемент = Неопределено Тогда
	//	СписокСоставаПоПолномуИмени.Удалить(ИскомыйЭлемент)
	//КонецЕсли;
	//ИскомыйЭлемент = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСоставаПоПолномуИмени", СписокСоставаПоПолномуИмени);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.УстановитьПараметр("Родитель", СписокРодителей);
	Запрос.УстановитьПараметр("ТаблицаГрупп", ОбменДаннымиПовтИсп.ПолучитьТаблицуИерархииИдентификаторов());
	Запрос.УстановитьПараметр("СортировкаДерева", ПланыОбмена.ОбменДанными2K_CRS.ПолучитьТаблицуСортировкиДерева());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СортировкаДерева.ГруппаОбъекта,
		|	СортировкаДерева.Порядок
		|ПОМЕСТИТЬ СортировкаДерева
		|ИЗ
		|	&СортировкаДерева КАК СортировкаДерева
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаГрупп.ПолноеИмяОбъекта,
		|	ТаблицаГрупп.ГруппаОбъекта,
		|	ТаблицаГрупп.ПП,
		|	ТаблицаГрупп.Зависимость,
		|	ТаблицаГрупп.Доступность,
		|	ТаблицаГрупп.ДоступностьЛБР,
		|	ТаблицаГрупп.ДоступностьЦБРЦ,
		|	ТаблицаГрупп.ДоступностьЦБР,
		|	ТаблицаГрупп.ДоступностьЛБК,
		|	ТаблицаГрупп.ДоступностьЦБК
		|ПОМЕСТИТЬ ТаблицаГрупп
		|ИЗ
		|	&ТаблицаГрупп КАК ТаблицаГрупп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаГрупп.ПолноеИмяОбъекта,
		|	ТаблицаГрупп.ГруппаОбъекта,
		|	ТаблицаГрупп.Доступность,
		|	ТаблицаГрупп.ДоступностьЛБР,
		|	ТаблицаГрупп.ДоступностьЦБРЦ,
		|	ТаблицаГрупп.ДоступностьЦБР,
		|	ТаблицаГрупп.ДоступностьЛБК,
		|	ТаблицаГрупп.ДоступностьЦБК,
		|	СортировкаДерева.Порядок,
		|	ТаблицаГрупп.ПП,
		|	ТаблицаГрупп.Зависимость
		|ПОМЕСТИТЬ ТаблицаГруппСортировка
		|ИЗ
		|	ТаблицаГрупп КАК ТаблицаГрупп
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СортировкаДерева КАК СортировкаДерева
		|		ПО ТаблицаГрупп.ГруппаОбъекта = СортировкаДерева.ГруппаОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбменДанными.ИдентификаторОбъектаНастройки КАК ИдентификаторОбъектаНастройки,
		|	ОбменДанными.Ссылка КАК УзелОбмена,
		|	ОбменДанными.ИсточникДанныхОбъекта КАК ИсточникДанных,
		|	ОбменДанными.ВидЗначимостиОбъекта,
		|	ОбменДанными.ИдентификаторОбъектаНастройки.ПолноеИмя КАК ИдентификаторПолноеИмя
		|ПОМЕСТИТЬ ВТ_УзлыОбмена
		|ИЗ
		|	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.ИдентификаторОбъектаНастройки.Родитель В(&Родитель)
		|	И ОбменДанными.ИдентификаторОбъектаНастройки.ПолноеИмя В(&СписокСоставаПоПолномуИмени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка,
		|	ИдентификаторыОбъектовМетаданных.Родитель,
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя
		|ПОМЕСТИТЬ ИдентификаторыМД
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя В(&СписокСоставаПоПолномуИмени)
		|	И ИдентификаторыОбъектовМетаданных.Родитель В(&Родитель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыМД.Ссылка КАК Ссылка,
		|	ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки,
		|	ИдентификаторыМД.Родитель КАК Родитель,
		|	ЕСТЬNULL(ВТ_УзлыОбмена.УзелОбмена, &УзелОбмена) КАК УзелОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота) КАК ИсточникДанных,
		|	0 КАК ВидЗначимостиОбъекта,
		|	ВТ_УзлыОбмена.УзелОбмена.Код КАК УзелОбменаКод,
		|	ТаблицаГруппСортировка.ГруппаОбъекта КАК ГруппаОбъекта,
		|	ТаблицаГруппСортировка.Порядок КАК Порядок,
		|	ТаблицаГруппСортировка.Доступность,
		|	ТаблицаГруппСортировка.ДоступностьЛБР,
		|	ТаблицаГруппСортировка.ДоступностьЦБРЦ,
		|	ТаблицаГруппСортировка.ДоступностьЦБР,
		|	ТаблицаГруппСортировка.ДоступностьЛБК,
		|	ТаблицаГруппСортировка.ДоступностьЦБК,
		|	ТаблицаГруппСортировка.ПП КАК ПП,
		|	ИдентификаторыЗависимости.Ссылка КАК Зависимость
		|ИЗ
		|	ИдентификаторыМД КАК ИдентификаторыМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УзлыОбмена КАК ВТ_УзлыОбмена
		|		ПО ИдентификаторыМД.Ссылка = ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГруппСортировка КАК ТаблицаГруппСортировка
		|			ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыМД КАК ИдентификаторыЗависимости
		|			ПО (ИдентификаторыЗависимости.ПолноеИмя = ТаблицаГруппСортировка.Зависимость)
		|		ПО ИдентификаторыМД.ПолноеИмя = ТаблицаГруппСортировка.ПолноеИмяОбъекта
		|ГДЕ
		|	ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки ЕСТЬ NULL 
		|	И ТаблицаГруппСортировка.ДоступностьЦБК = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки,
		|	NULL,
		|	ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки.Родитель,
		|	ЕСТЬNULL(ВТ_УзлыОбмена.УзелОбмена, &УзелОбмена),
		|	ВТ_УзлыОбмена.ИсточникДанных,
		|	ВТ_УзлыОбмена.ВидЗначимостиОбъекта,
		|	ВТ_УзлыОбмена.УзелОбмена.Код,
		|	ТаблицаГруппСортировка.ГруппаОбъекта,
		|	ТаблицаГруппСортировка.Порядок,
		|	ТаблицаГруппСортировка.Доступность,
		|	ТаблицаГруппСортировка.ДоступностьЛБР,
		|	ТаблицаГруппСортировка.ДоступностьЦБРЦ,
		|	ТаблицаГруппСортировка.ДоступностьЦБР,
		|	ТаблицаГруппСортировка.ДоступностьЛБК,
		|	ТаблицаГруппСортировка.ДоступностьЦБК,
		|	ТаблицаГруппСортировка.ПП,
		|	ИдентификаторыМД.Ссылка
		|ИЗ
		|	ВТ_УзлыОбмена КАК ВТ_УзлыОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГруппСортировка КАК ТаблицаГруппСортировка
		|			ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыМД КАК ИдентификаторыМД
		|			ПО (ИдентификаторыМД.ПолноеИмя = ТаблицаГруппСортировка.Зависимость)
		|		ПО ВТ_УзлыОбмена.ИдентификаторПолноеИмя = ТаблицаГруппСортировка.ПолноеИмяОбъекта
		|ГДЕ
		|	ТаблицаГруппСортировка.ДоступностьЦБК = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	УзелОбменаКод,
		|	Порядок,
		|	ПП
		|ИТОГИ ПО
		|	УзелОбмена,
		|	Порядок,
		|	ГруппаОбъекта КАК Родитель";

		Если РолевоеЗначениеЭтогоУзла <> 1 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаГруппСортировка.ДоступностьЦБК = ИСТИНА", "ИСТИНА");
		КонецЕсли;
		Возврат Запрос.Выполнить();

КонецФункции // ПолучитьРезультатЗапросаПоСоставуОбмена()

&НаСервере
Процедура ИнициализацияДереваНастройкиСправочниковИДокументов(ОчищатьДерево = Ложь)
	
	ЭтотУзелЦРС = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	
	спТаблиц = Новый СписокЗначений;
	спТаблиц.Добавить("ДеревоНастроекДокументов", "Д");
	спТаблиц.Добавить("ДеревоНастроекСправочников", "С");
	
	Если ОчищатьДерево Тогда
		ДеревоНастроекСправочников.ПолучитьЭлементы().Очистить();
		ДеревоНастроекДокументов.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	УзлыОбменаВНастройках.Очистить();
	
	УдалениеЛишнихКолонокНастройки();
	
	СоотвИсточников = Новый Соответствие;
	СоотвИсточников.Вставить(null, 0);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ПустаяСсылка(), 0);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота, 1);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии, 2);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана, 1);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаБухгалтерии, 2);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы, 3);
	
	СоотвСтрокРодителей = Новый Соответствие;
	СоотвСтрок = Новый Соответствие;
	
	ТипОбъектов = "";

	Результат = ПолучитьРезультатЗапросаПоСоставуОбмена(ЭтотУзелЦРС, ТипОбъектов);
		
	ВыборкаУзелОбмена = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаУзелОбмена.Следующий() Цикл
			
			ВыборкаПорядок = ВыборкаУзелОбмена.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаПорядок.Следующий() Тогда
				
				Если ВыборкаПорядок.УзелОбмена = Null Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ВыборкаПорядок.УзелОбмена) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не УзлыОбменаВНастройках.НайтиПоЗначению(ВыборкаПорядок.УзелОбмена) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				УзлыОбменаВНастройках.Добавить(ВыборкаПорядок.УзелОбмена);
				
				Для каждого ДеревоОбъектов Из спТаблиц Цикл
					
					мНовыхРеквизитов = Новый Массив;
					
					ПриставкаУзла = "_Ресторан"+ВыборкаПорядок.УзелОбмена.Код;
					
					НоваяКолонкаУзел = Новый РеквизитФормы("Узел"+ПриставкаУзла, Новый ОписаниеТипов("ПланОбменаСсылка.ОбменДанными2K_CRS"), ДеревоОбъектов.Значение);
					НоваяКолонкаАВТ = Новый РеквизитФормы("ИсточникЗнач1"+ПриставкаУзла, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1), ДеревоОбъектов.Значение, "Авт");
					НоваяКолонкаЦБ = Новый РеквизитФормы("ИсточникЗнач3"+ПриставкаУзла, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1), ДеревоОбъектов.Значение, "ЦРС");
					НоваяКолонкаБух = Новый РеквизитФормы("ИсточникЗнач2"+ПриставкаУзла, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1), ДеревоОбъектов.Значение, "ЛБК");
					
					мНовыхРеквизитов.Добавить(НоваяКолонкаУзел);
					мНовыхРеквизитов.Добавить(НоваяКолонкаАВТ);
					мНовыхРеквизитов.Добавить(НоваяКолонкаЦБ);
					мНовыхРеквизитов.Добавить(НоваяКолонкаБух);
					
					ЭтаФорма.ИзменитьРеквизиты(мНовыхРеквизитов);
					                                                                                                                                    
					ГруппаКолонок                = Элементы.Добавить(ДеревоОбъектов.Представление+"Группа"+ПриставкаУзла, Тип("ГруппаФормы") , Элементы[ДеревоОбъектов.Значение]);    //"ДеревоЗначений"+?(ДеревоОбъектов.Значение = ДеревоНастроекСправочников,"Спр","Док")+"ГруппаРестораны"
					ГруппаКолонок.Вид            = ВидГруппыФормы.ГруппаКолонок;
					ГруппаКолонок.ТолькоПросмотр = Ложь;
					ГруппаКолонок.ОтображатьВШапке = Истина;
					ГруппаКолонок.ОтображатьЗаголовок = Истина;
					ГруппаКолонок.Группировка = ГруппировкаКолонок.Горизонтальная;
					ГруппаКолонок.Заголовок = "Ресторан " + ВыборкаПорядок.УзелОбмена;// + " (" + (ВыборкаПорядок.УзелОбмена.Код) + ")";
					ГруппаКолонок.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
					        
					НовыйЭлемент = Элементы.Добавить(ДеревоОбъектов.Представление+"Узел"+ПриставкаУзла,Тип("ПолеФормы"), ГруппаКолонок); 
					НовыйЭлемент.Видимость = Ложь;
					НовыйЭлемент.ПутьКДанным = ДеревоОбъектов.Значение+".Узел"; 
					
					НовыйЭлемент = Элементы.Добавить(ДеревоОбъектов.Представление+"ИсточникЗнач1"+ПриставкаУзла, Тип("ПолеФормы"), ГруппаКолонок); 
					НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоЗначенийИсточникЗначПриИзменении");
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
					НовыйЭлемент.ТриСостояния = Истина; 
					НовыйЭлемент.ПутьКДанным = ДеревоОбъектов.Значение+".ИсточникЗнач1"+ПриставкаУзла; 
					НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
					НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
					НовыйЭлемент = Элементы.Добавить(ДеревоОбъектов.Представление+"ИсточникЗнач3"+ПриставкаУзла, Тип("ПолеФормы"), ГруппаКолонок); 
					НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоЗначенийИсточникЗначПриИзменении");
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
					НовыйЭлемент.ТриСостояния = Истина; 
					НовыйЭлемент.ПутьКДанным = ДеревоОбъектов.Значение+".ИсточникЗнач3"+ПриставкаУзла; 
					НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
					НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
					НовыйЭлемент = Элементы.Добавить(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла, Тип("ПолеФормы"), ГруппаКолонок); 
					НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоЗначенийИсточникЗначПриИзменении");
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
					НовыйЭлемент.ТриСостояния = Истина; 
					НовыйЭлемент.ПутьКДанным = ДеревоОбъектов.Значение+".ИсточникЗнач2"+ПриставкаУзла; 
					НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
					НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;	
					НовыйЭлемент.Видимость = ИспользоватьОбменСЛБК;
					
					Если ДеревоОбъектов.Значение = "ДеревоНастроекСправочников" Тогда
						//ДеревоЗначенийСправочникиИсточникЗнач1  ДеревоОбъектов.Значение+".ИсточникЗнач1"+ПриставкаУзла
						ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(0).Поля.Элементы;
						ЭлементУО = ЭлементыУО.Добавить();
						ЭлементУО.Использование = Истина;
						ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач1"+ПриставкаУзла);
						
						ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(2).Поля.Элементы;
						ЭлементУО = ЭлементыУО.Добавить();
						ЭлементУО.Использование = Истина;
						ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла);
						ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(3).Поля.Элементы;
						ЭлементУО = ЭлементыУО.Добавить();
						ЭлементУО.Использование = Истина;
						ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла);
						
						ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(1).Поля.Элементы;
						ЭлементУО = ЭлементыУО.Добавить();
						ЭлементУО.Использование = Истина;
						ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач3"+ПриставкаУзла);
						
					ИначеЕсли ДеревоОбъектов.Значение = "ДеревоНастроекДокументов" Тогда
						
						ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(4).Поля.Элементы;
						ЭлементУО = ЭлементыУО.Добавить();
						ЭлементУО.Использование = Истина;
						ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач1"+ПриставкаУзла);
						
						ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(6).Поля.Элементы;
						ЭлементУО = ЭлементыУО.Добавить();
						ЭлементУО.Использование = Истина;
						ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла);
						ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(7).Поля.Элементы;
						ЭлементУО = ЭлементыУО.Добавить();
						ЭлементУО.Использование = Истина;
						ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла);
						
						ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(5).Поля.Элементы;
						ЭлементУО = ЭлементыУО.Добавить();
						ЭлементУО.Использование = Истина;
						ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач3"+ПриставкаУзла);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;

	ЗначениеДеревоНастроекОбъектовРесторана = ДанныеФормыВЗначение(ДеревоНастроекСправочников, Тип("ДеревоЗначений"));
	
	Если Не ОчищатьДерево Тогда
		Возврат	
	КонецЕсли;
	
	Если УзлыОбменаВНастройках.НайтиПоЗначению(ЭтотУзелЦРС) = Неопределено Тогда
		УзлыОбменаВНастройках.Добавить(ЭтотУзелЦРС)
	КонецЕсли;
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	Если Не ГлавныйУзел = Неопределено И УзлыОбменаВНастройках.НайтиПоЗначению(ГлавныйУзел) = Неопределено Тогда
		УзлыОбменаВНастройках.Добавить(ГлавныйУзел)
	КонецЕсли;
	
	ВыборкаУзелОбмена.Сбросить();
	
	Пока ВыборкаУзелОбмена.Следующий() Цикл
		
		ВыборкаПорядок = ВыборкаУзелОбмена.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПорядок.Следующий() Цикл
			
			Если ВыборкаПорядок.УзелОбмена = Null Тогда
				Продолжить;
			КонецЕсли;
			ПриставкаУзла = "_Ресторан"+ВыборкаПорядок.УзелОбмена.Код;
			
			ВыборкаРодитель = ВыборкаПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЭтотУзел = ЭтотУзелЦРС = ВыборкаПорядок.УзелОбмена;
			
			Пока ВыборкаРодитель.Следующий() Цикл
				
				НС_Родитель = СоотвСтрокРодителей.Получить(ВыборкаРодитель.ГруппаОбъекта);
				Если НС_Родитель = Неопределено Тогда
					НС_Родитель = ЗначениеДеревоНастроекОбъектовРесторана.Строки.Добавить();
					НС_Родитель.ИдентификаторОбъектаНастройки = ВыборкаРодитель.ГруппаОбъекта; 	
					НС_Родитель.Узел = ВыборкаПорядок.УзелОбмена; 	
					СоотвСтрокРодителей.Вставить(ВыборкаРодитель.ГруппаОбъекта, НС_Родитель);
				КонецЕсли;
				
				ВыборкаДетальныеЗаписи = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				НС_Родитель.Скрытый = ВыборкаДетальныеЗаписи.Количество() = 1;
				НС_Родитель.ИндексКартинки = 4;	
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Зависимость) Тогда
						НС = НастройкиЗависимыхОбъектов.Добавить();
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						НС.ИдентификаторГлавногоОбъекта = ВыборкаДетальныеЗаписи.Зависимость;
						НС.Узел = ВыборкаПорядок.УзелОбмена; 	
						Если Не ВыборкаДетальныеЗаписи.Доступность Тогда 
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					НС = СоотвСтрокРодителей.Получить(ВыборкаДетальныеЗаписи.Ссылка);
					Если НС = Неопределено Тогда
						НС = НС_Родитель.Строки.Добавить();
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						СоотвСтрокРодителей.Вставить(ВыборкаДетальныеЗаписи.Ссылка, НС);
					КонецЕсли;
					Если ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ВыборкаПорядок.УзелОбмена) Тогда
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						НС.Узел = ВыборкаПорядок.УзелОбмена;
						Если ВыборкаДетальныеЗаписи.ИсточникДанных = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии Тогда
							НС["ИсточникЗнач2"] = Истина;
							НС["ИсточникЗнач3"] = Истина;
						Иначе
							ИсточникДанных = СоотвИсточников.Получить(ВыборкаДетальныеЗаписи.ИсточникДанных);
							Если ИсточникДанных <= 0 Тогда
								ИсточникДанных = 3;
							КонецЕсли;
							//Костенюк Александр-Старт 16.12.2013
							// В ЦРС колонка "Авт" должна принимать значение "Истина" для всех справочников
							// до того момента, пока не будет реализован обмен с БК
							Если ИсточникДанных <> 2 Тогда
								НС["ИсточникЗнач1"] = Истина;
							КонецЕсли;
							//Костенюк Александр-Финиш 16.12.2013
							НС["ИсточникЗнач"+ИсточникДанных] = Истина;
						КонецЕсли;
					Иначе	
						НС["Узел"+ПриставкаУзла] = ВыборкаПорядок.УзелОбмена;
						Если ВыборкаДетальныеЗаписи.ИсточникДанных = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии Тогда
							НС["ИсточникЗнач2"+ПриставкаУзла] = Истина;
							НС["ИсточникЗнач3"+ПриставкаУзла] = Истина;
						Иначе
							ИсточникДанных = СоотвИсточников.Получить(ВыборкаДетальныеЗаписи.ИсточникДанных);
							Если ИсточникДанных <= 0 Тогда
								ИсточникДанных = 3;
							КонецЕсли; 	
							НС["ИсточникЗнач"+ИсточникДанных+ПриставкаУзла] = Истина;
						КонецЕсли;
					КонецЕсли;
					
					НС.ДоступностьЛБР = ВыборкаДетальныеЗаписи.ДоступностьЛБР; 
					НС.ДоступностьЦБРЦ= ВыборкаДетальныеЗаписи.ДоступностьЦБРЦ; 
					НС.ДоступностьЦБР = ВыборкаДетальныеЗаписи.ДоступностьЦБР; 
					НС.ДоступностьЛБК = ВыборкаДетальныеЗаписи.ДоступностьЛБК; 
					НС.ДоступностьЦБК = ВыборкаДетальныеЗаписи.ДоступностьЦБК; 
					
					НС.ИндексКартинки = 3;	
				
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Узел Из УзлыОбменаВНастройках Цикл
		
		ПриставкаУзла = ?(ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(Узел.Значение), "", "_Ресторан" + Узел.Значение.Код);
	
		Для каждого СтрокаРодитель Из ЗначениеДеревоНастроекОбъектовРесторана.Строки Цикл
			
			Дочерние = СтрокаРодитель.Строки;
			Для н = 1 По 3 Цикл
				
				ТекЗначение = Дочерние[0]["ИсточникЗнач"+н+ПриставкаУзла];
				с = 0;
				ЗначениеМеняется = Ложь;
				
				ЕстьДоступностьЛБР = Ложь;
				ЕстьДоступностьЦБРЦ = Ложь;
				ЕстьДоступностьЦБР = Ложь;
				ЕстьДоступностьЛБК = Ложь;
				ЕстьДоступностьЦБК = Ложь;
				
				Пока с < Дочерние.Количество() Цикл
					дСтрока = Дочерние[с];
					Если ТекЗначение <> дСтрока["ИсточникЗнач"+н+ПриставкаУзла] Тогда
						ЗначениеМеняется = Истина
					КонецЕсли; 
					Если дСтрока["ДоступностьЛБР"] Тогда
						ЕстьДоступностьЛБР = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБРЦ"] Тогда
						ЕстьДоступностьЦБРЦ = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБР"] Тогда
						ЕстьДоступностьЦБР = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЛБК"] Тогда
						ЕстьДоступностьЛБК = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБК"] Тогда
						ЕстьДоступностьЦБК = Истина
					КонецЕсли;
					с = с + 1;
				КонецЦикла;
				Если ЗначениеМеняется Тогда
					СтрокаРодитель["ИсточникЗнач"+н+ПриставкаУзла] = 2;	
				Иначе
					СтрокаРодитель["ИсточникЗнач"+н+ПриставкаУзла] = Дочерние[0]["ИсточникЗнач"+н+ПриставкаУзла];	
				КонецЕсли;	
				
				Если ЕстьДоступностьЛБР Тогда
					СтрокаРодитель["ДоступностьЛБР"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЦБРЦ Тогда
					СтрокаРодитель["ДоступностьЦБРЦ"] = Истина
				КонецЕсли;
				Если ЕстьДоступностьЦБР Тогда
					СтрокаРодитель["ДоступностьЦБР"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЛБК Тогда
					СтрокаРодитель["ДоступностьЛБК"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЦБК Тогда
					СтрокаРодитель["ДоступностьЦБК"] = Истина
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;

	ЗначениеВДанныеФормы(ЗначениеДеревоНастроекОбъектовРесторана, Этаформа.ДеревоНастроекСправочников); 
	
	ТипОбъектов = "Документы";

	Результат = ПолучитьРезультатЗапросаПоСоставуОбмена(ЭтотУзелЦРС, ТипОбъектов);
	
	ВыборкаУзелОбмена = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗначениеДеревоНастроекОбъектовРесторана = ДанныеФормыВЗначение(ДеревоНастроекДокументов, Тип("ДеревоЗначений"));
	
	Пока ВыборкаУзелОбмена.Следующий() Цикл
		
		ВыборкаПорядок = ВыборкаУзелОбмена.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПорядок.Следующий() Цикл
			
			Если ВыборкаПорядок.УзелОбмена = Null Тогда
				Продолжить;
			КонецЕсли;
			
			ПриставкаУзла = "_Ресторан"+ВыборкаПорядок.УзелОбмена.Код;
			
			ВыборкаРодитель = ВыборкаПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЭтотУзел = ЭтотУзелЦРС = ВыборкаПорядок.УзелОбмена;
			
			Пока ВыборкаРодитель.Следующий() Цикл
				
				НС_Родитель = СоотвСтрокРодителей.Получить(ВыборкаРодитель.ГруппаОбъекта);
				Если НС_Родитель = Неопределено Тогда
					НС_Родитель = ЗначениеДеревоНастроекОбъектовРесторана.Строки.Добавить();
					НС_Родитель.ИдентификаторОбъектаНастройки = ВыборкаРодитель.ГруппаОбъекта; 	
					НС_Родитель.Узел = ВыборкаПорядок.УзелОбмена; 	
					СоотвСтрокРодителей.Вставить(ВыборкаРодитель.ГруппаОбъекта, НС_Родитель);
				КонецЕсли;
				
				НС_Родитель.ИндексКартинки = 7;	
				
				ВыборкаДетальныеЗаписи = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Зависимость) Тогда
						НС = НастройкиЗависимыхОбъектов.Добавить();
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						НС.ИдентификаторГлавногоОбъекта = ВыборкаДетальныеЗаписи.Зависимость;
						НС.Узел = ВыборкаПорядок.УзелОбмена; 	
						Продолжить;
					КонецЕсли;
					
					НС = СоотвСтрокРодителей.Получить(ВыборкаДетальныеЗаписи.Ссылка);
					Если НС = Неопределено Тогда
						НС = НС_Родитель.Строки.Добавить();
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						СоотвСтрокРодителей.Вставить(ВыборкаДетальныеЗаписи.Ссылка, НС);
					КонецЕсли;
					Если ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ВыборкаПорядок.УзелОбмена) Тогда
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						НС.Узел = ВыборкаПорядок.УзелОбмена;
						Если ВыборкаДетальныеЗаписи.ИсточникДанных = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии Тогда
							НС["ИсточникЗнач2"] = Истина;
							НС["ИсточникЗнач3"] = Истина;
						Иначе
							ИсточникДанных = СоотвИсточников.Получить(ВыборкаДетальныеЗаписи.ИсточникДанных);
							Если ИсточникДанных <= 0 Тогда
								ИсточникДанных = 3;
							КонецЕсли; 	
							
							НС["ИсточникЗнач"+ИсточникДанных] = Истина;
						КонецЕсли;
					Иначе	
						НС["Узел"+ПриставкаУзла] = ВыборкаПорядок.УзелОбмена;
						Если ВыборкаДетальныеЗаписи.ИсточникДанных = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии Тогда
							НС["ИсточникЗнач2"+ПриставкаУзла] = Истина;
							НС["ИсточникЗнач3"+ПриставкаУзла] = Истина;
						Иначе
							ИсточникДанных = СоотвИсточников.Получить(ВыборкаДетальныеЗаписи.ИсточникДанных);
							Если ИсточникДанных <= 0 Тогда
								ИсточникДанных = 3;
							КонецЕсли; 	
							НС["ИсточникЗнач"+ИсточникДанных+ПриставкаУзла] = Истина;
						КонецЕсли;
					КонецЕсли;
					
					НС.ДоступностьЛБР = ВыборкаДетальныеЗаписи.ДоступностьЛБР; 
					НС.ДоступностьЦБРЦ = ВыборкаДетальныеЗаписи.ДоступностьЦБРЦ; 
					НС.ДоступностьЦБР = ВыборкаДетальныеЗаписи.ДоступностьЦБР; 
					НС.ДоступностьЛБК = ВыборкаДетальныеЗаписи.ДоступностьЛБК; 
					НС.ДоступностьЦБК = ВыборкаДетальныеЗаписи.ДоступностьЦБК; 
					
					НС.ИндексКартинки = 3;	
				
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Узел Из УзлыОбменаВНастройках Цикл
		
		ПриставкаУзла = ?(ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(Узел.Значение), "", "_Ресторан" + Узел.Значение.Код);
		
		Для каждого СтрокаРодитель Из ЗначениеДеревоНастроекОбъектовРесторана.Строки Цикл
			
			Дочерние = СтрокаРодитель.Строки;
			Для н = 1 По 3 Цикл
				
				ТекЗначение = Дочерние[0]["ИсточникЗнач"+н+ПриставкаУзла];
				с = 0;
				ЗначениеМеняется = Ложь;
				
				ЕстьДоступностьЛБР = Ложь;
				ЕстьДоступностьЦБРЦ = Ложь;
				ЕстьДоступностьЦБР = Ложь;
				ЕстьДоступностьЛБК = Ложь;
				ЕстьДоступностьЦБК = Ложь;
				
				Пока с < Дочерние.Количество() Цикл
					дСтрока = Дочерние[с];
					Если ТекЗначение <> дСтрока["ИсточникЗнач"+н+ПриставкаУзла] Тогда
						ЗначениеМеняется = Истина
					КонецЕсли; 
					Если дСтрока["ДоступностьЛБР"] Тогда
						ЕстьДоступностьЛБР = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБРЦ"] Тогда
						ЕстьДоступностьЦБРЦ = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБР"] Тогда
						ЕстьДоступностьЦБР = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЛБК"] Тогда
						ЕстьДоступностьЛБК = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБК"] Тогда
						ЕстьДоступностьЦБК = Истина
					КонецЕсли;
					с = с + 1;
				КонецЦикла;
				Если ЗначениеМеняется Тогда
					СтрокаРодитель["ИсточникЗнач"+н+ПриставкаУзла] = 2;	
				Иначе
					СтрокаРодитель["ИсточникЗнач"+н+ПриставкаУзла] = Дочерние[0]["ИсточникЗнач"+н+ПриставкаУзла];	
				КонецЕсли;	
				
				Если ЕстьДоступностьЛБР Тогда
					СтрокаРодитель["ДоступностьЛБР"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЦБРЦ Тогда
					СтрокаРодитель["ДоступностьЦБРЦ"] = Истина
				КонецЕсли;
				Если ЕстьДоступностьЦБР Тогда
					СтрокаРодитель["ДоступностьЦБР"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЛБК Тогда
					СтрокаРодитель["ДоступностьЛБК"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЦБК Тогда
					СтрокаРодитель["ДоступностьЦБК"] = Истина
				КонецЕсли;

			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;
	

	ЗначениеВДанныеФормы(ЗначениеДеревоНастроекОбъектовРесторана, Этаформа.ДеревоНастроекДокументов); 
	
КонецПроцедуры

&НаКлиенте
Процедура РолевоеЗначениеЭтогоУзлаПриИзменении()
	
	Модифицированность = Истина;
	СпроситьОСозданииУзла = Ложь;
	РолевоеЗначениеЭтогоУзлаПриИзмененииНаКлиенте();
	
	Если РолевоеЗначениеЭтогоУзлаТекущее <> 1 И РолевоеЗначениеЭтогоУзла = 1 Тогда
		
		ЗаписатьВУзлыНаСервере();
		
		Для каждого УзелОбмена Из УзлыОбменаВНастройках Цикл
			Если ЭтотУзелЦРС = УзелОбмена.Значение Тогда
				Продолжить;
			КонецЕсли;
			ОбменДаннымиКлиент.УдалитьНастройкуСинхронизации(УзелОбмена.Значение, Истина);
		КонецЦикла;
			
		ОбновитьДанныеМонитора();
		
	КонецЕсли;
	
	Если РолевоеЗначениеЭтогоУзлаТекущее <> 3 И РолевоеЗначениеЭтогоУзла = 3 Тогда
		
		//Кнопки = Новый СписокЗначений;
		//Кнопки.Добавить(КодВозвратаДиалога.Да, "Добавить ресторан");
		//
		//Если Вопрос("Начинаем настройку центральной ресторанной системы.
		//	|Необходимо добавить первый ресторан.", Кнопки) = КодВозвратаДиалога.Да Тогда
		// 	ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными("ОбменДанными2K_CRS")
		//КонецЕсли;
		Результат = Ложь;
		ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными("ОбменДанными2K_CRS", , Истина, Результат)
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РолевоеЗначениеЭтогоУзлаПриИзмененииНаКлиенте()

	Если РолевоеЗначениеЭтогоУзла = РолевоеЗначениеЭтогоУзлаТекущее Тогда
	ИначеЕсли РолевоеЗначениеЭтогоУзлаТекущее = 1 И РолевоеЗначениеЭтогоУзла = 2 Тогда
		Предупреждение("Базу ресторана нельзя перевести из автономного режима в режим периферийной базы Центральной ресторанной системы.
		|Периферийная база ресторана создается из центральной базы распределенной ресторанной системы.");
		РолевоеЗначениеЭтогоУзла = РолевоеЗначениеЭтогоУзлаТекущее
	ИначеЕсли РолевоеЗначениеЭтогоУзлаТекущее = 1 И РолевоеЗначениеЭтогоУзла = 3 Тогда
		
		Если Не Вопрос("Вы собираетесь перевести текущую автономную базу в режим работы центральной базы сети ресторанов. 
		|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
		 	РолевоеЗначениеЭтогоУзла = РолевоеЗначениеЭтогоУзлаТекущее;
		КонецЕсли;
		
	ИначеЕсли РолевоеЗначениеЭтогоУзлаТекущее = 2 И РолевоеЗначениеЭтогоУзла = 1 Тогда
		//удалить колонки ресторанов оставить только ЦРС
		Если Не Вопрос("Вы собираетесь перевести текущую периферийную базу ресторана в режим работы автономной базы ресторана.
			|Будет произведено отключение текущей базы от работы в сети ресторанов и центральной ресторанной системы.
			|Все настройки обменов будут утрачены.
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
		 	РолевоеЗначениеЭтогоУзла = РолевоеЗначениеЭтогоУзлаТекущее;
		КонецЕсли;
	ИначеЕсли РолевоеЗначениеЭтогоУзлаТекущее = 2 И РолевоеЗначениеЭтогоУзла = 3 Тогда
		//удалить колонки ресторанов оставить только ЦРС
		//добавить колонку нового ресторана
		Если Не Вопрос("Вы собираетесь перевести текущую периферийную базу в сети ресторанов в режим работы центральной базы новой сети ресторанов. 
			|Будет произведено отключение текущей базы от работы в сети ресторанов и центральной ресторанной системы.
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
		 	РолевоеЗначениеЭтогоУзла = РолевоеЗначениеЭтогоУзлаТекущее;
		КонецЕсли;
	ИначеЕсли РолевоеЗначениеЭтогоУзлаТекущее = 3 И РолевоеЗначениеЭтогоУзла = 1 Тогда
		//удалить колонки ресторанов оставить только ЦРС
		Если Не Вопрос("Вы собираетесь перевести текущую центральную базу сети ресторанов в режим работы автономной базы ресторана.
			|Все настройки обменов будут утрачены.
			|Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
		 	РолевоеЗначениеЭтогоУзла = РолевоеЗначениеЭтогоУзлаТекущее;
		КонецЕсли;
	ИначеЕсли РолевоеЗначениеЭтогоУзлаТекущее = 3 И РолевоеЗначениеЭтогоУзла = 2 Тогда
		Предупреждение("Базу ресторана нельзя перевести из автономного режима в режим периферийной базы Центральной ресторанной системы.");
		РолевоеЗначениеЭтогоУзла = РолевоеЗначениеЭтогоУзлаТекущее
	КонецЕсли;	
	
	Если РолевоеЗначениеЭтогоУзла = 1 Тогда
		Элементы.СтраницыПоРолиЭтойБазы.ТекущаяСтраница = Элементы.СтраницыПоРолиЭтойБазы.ПодчиненныеЭлементы.ЭтаБазаАвтономная;
		Элементы.КартинкиПлановОбменов.ТекущаяСтраница = Элементы.СКартинкаПланаОбменовАВТ;
		Если ЕстьБухгалтерскаяБазаДляОбмена Тогда
			Элементы.КартинкиПлановОбменов.ТекущаяСтраница = Элементы.СКартинкаПланаОбменовЛБК;
		КонецЕсли;
	ИначеЕсли РолевоеЗначениеЭтогоУзла = 2 Тогда
		Элементы.СтраницыПоРолиЭтойБазы.ТекущаяСтраница = Элементы.СтраницыПоРолиЭтойБазы.ПодчиненныеЭлементы.ЭтаБазаПериферийная;
		Элементы.КартинкиПлановОбменов.ТекущаяСтраница = Элементы.СКартинкаПланаОбменовЦРС;
	ИначеЕсли РолевоеЗначениеЭтогоУзла = 3 Тогда
		Элементы.СтраницыПоРолиЭтойБазы.ТекущаяСтраница = Элементы.СтраницыПоРолиЭтойБазы.ПодчиненныеЭлементы.ЭтаБазаЦентральная;
		Элементы.КартинкиПлановОбменов.ТекущаяСтраница = Элементы.СКартинкаПланаОбменовЦРС;
	КонецЕсли;	
	УстановитьДоступностьЭлементовПоВидуБазы();

КонецПроцедуры

&НаСервере
Процедура ПроверитьРолевоеЗначениеЭтогоУзлаНаСервере()

	ЭтотУзелЦРС = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменДанными2K_CRS.Ссылка 
		|ИЗ
		|	ПланОбмена.ОбменДанными2K_CRS КАК ОбменДанными2K_CRS
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбменДанными2K_CRSБухгалтерия.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменДанными2K_CRSБухгалтерия КАК ОбменДанными2K_CRSБухгалтерия";

	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	КоличествоУзловОбмена = Выборка.Количество();

	Если КоличествоУзловОбмена = 1 Тогда
		РолевоеЗначениеЭтогоУзла = 1
	ИначеЕсли Не ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ЭтотУзелЦРС) Тогда
		РолевоеЗначениеЭтогоУзла = 2
	Иначе
		РолевоеЗначениеЭтогоУзла = 3
	КонецЕсли;
	
	РолевоеЗначениеЭтогоУзлаТекущее = РолевоеЗначениеЭтогоУзла;
	
	Выборка = Результат[1].Выбрать();
	КоличествоУзловОбмена = Выборка.Количество();

	ЕстьБухгалтерскаяБазаДляОбмена = КоличествоУзловОбмена > 1;
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Ссылка = ПланыОбмена.ОбменДанными2K_CRSБухгалтерия.ЭтотУзел() Тогда
			УзелБухгалтерскойКонфигурации = Выборка.Ссылка
		КонецЕсли; 
	КонецЦикла;
	
	Элементы.НастройкиСинхронизацииДанных1.Доступность = ЕстьБухгалтерскаяБазаДляОбмена Или РолевоеЗначениеЭтогоУзла > 1
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовПоВидуБазы()

	Если РолевоеЗначениеЭтогоУзла = 1 Тогда
		
		Элементы.ИнформацияОСинхронизации.ТолькоПросмотр = Ложь;
		Элементы.СписокСостоянияУзловИзменитьУзелИнформационнойБазы.Видимость = Истина;
		Элементы.СписокСостоянияУзловГруппа4.Доступность = Истина;
		
		Элементы.НастроитьСинхронизациюДанных1.Доступность = Ложь;
		Элементы.УдалитьСинхронизациюДанных1.Доступность = Ложь;
		ДеревоЗначенийЦРСЗаголовок = "Локальная РС";
		Элементы.ДеревоЗначенийСправочникиИсточникЗнач2.Заголовок = "ЛБК";
		Элементы.ДеревоЗначенийСпрЦРС.Заголовок = ДеревоЗначенийЦРСЗаголовок;
		Элементы.ДеревоНастроекДокументовИсточникЗнач2.Заголовок = "ЛБК";
		Элементы.ДеревоЗначенийДокЦРС.Заголовок = ДеревоЗначенийЦРСЗаголовок;
		Элементы.НадписьРолевоеЗначениеЭтогоУзла.Заголовок = "Данный режим работы подразумевает ведение учёта в автономном независимом ресторане.
															|Однако существует возможность настроить обмен данными с Локальной Бухгалтерской Конфигурацией.";
		//Элементы.НадписьРолевоеЗначениеЭтогоУзла.Заголовок = "Автономная база ресторана - эта настройка соответствует варианту ведения учета в отдельно взятом ресторане 
		//													|без синхронизации с разветвленной сетью ресторанов и центральной базой.
		//													|Поддерживается синхронизация данных с локальной 1С:Бухгалтерией.";
	ИначеЕсли РолевоеЗначениеЭтогоУзла = 2 Тогда
		
		Элементы.ИнформацияОСинхронизации.ТолькоПросмотр = Истина;
		Элементы.СписокСостоянияУзловИзменитьУзелИнформационнойБазы.Видимость = Ложь;
		Элементы.СписокСостоянияУзловГруппа4.Доступность = Ложь;
		
		Элементы.НастроитьСинхронизациюДанных1.Доступность = Ложь;
		Элементы.УдалитьСинхронизациюДанных1.Доступность = Ложь;
		ДеревоЗначенийЦРСЗаголовок = "Центральная РС";
		Элементы.ДеревоЗначенийСправочникиИсточникЗнач2.Заголовок = "ЦБК";
		Элементы.ДеревоЗначенийСпрЦРС.Заголовок = ДеревоЗначенийЦРСЗаголовок;
		Элементы.ДеревоНастроекДокументовИсточникЗнач2.Заголовок = "ЦБК";
		Элементы.ДеревоЗначенийДокЦРС.Заголовок = ДеревоЗначенийЦРСЗаголовок;
		Элементы.НадписьРолевоеЗначениеЭтогоУзла.Заголовок = "Данный режим работы подразумевает ведение учёта в одном из ресторанов сети.
													        |При этом производится синхронизация данных с Центральной Ресторанной Системой.
		                                                    |Поддерживается возможность настроить обмен данными с Локальной Бухгалтерской Конфигурацией.";
		//Элементы.НадписьРолевоеЗначениеЭтогоУзла.Заголовок = "   Периферийная база ресторана - эта настройка соответствует варианту ведения учета в отдельно взятом ресторане 
		//													|с синхронизацией данных с центральной базой и разветвленной сетью ресторанов.
		//													|Поддерживается синхронизация данных с локальной 1С:Бухгалтерией.";
	ИначеЕсли РолевоеЗначениеЭтогоУзла = 3 Тогда
		
		Элементы.ИнформацияОСинхронизации.ТолькоПросмотр = Ложь;
		Элементы.СписокСостоянияУзловИзменитьУзелИнформационнойБазы.Видимость = Истина;
		Элементы.СписокСостоянияУзловГруппа4.Доступность = Истина;
		
		Элементы.НастроитьСинхронизациюДанных1.Доступность = Истина;
		Элементы.УдалитьСинхронизациюДанных1.Доступность = Истина;
		ДеревоЗначенийЦРСЗаголовок = "Центральная РС";
		Элементы.ДеревоЗначенийСправочникиИсточникЗнач2.Заголовок = "ЦБК";
		Элементы.ДеревоЗначенийСпрЦРС.Заголовок = ДеревоЗначенийЦРСЗаголовок;
		Элементы.ДеревоНастроекДокументовИсточникЗнач2.Заголовок = "ЦБК";
		Элементы.ДеревоЗначенийДокЦРС.Заголовок = ДеревоЗначенийЦРСЗаголовок;
		Элементы.НадписьРолевоеЗначениеЭтогоУзла.Заголовок = "Данный режим работы подразумевает ведение учёта в Центральной Рестораной Системе.
													        |При этом производится синхронизация данных со всеми ресторанами сети.
		                                                    |Поддерживается возможность настроить обмен данными с Центральной Бухгалтерской Конфигурацией.";
		//Элементы.НадписьРолевоеЗначениеЭтогоУзла.Заголовок = "   Центральная база ресторана - эта настройка соответствует варианту центральной базы,
		//													|которая накапливает данные всех ресторанов сети при синхронизации данных с разветвленной сетью ресторанов.
		//													|Поддерживается синхронизация данных с центральной 1С:Бухгалтерией.";
	КонецЕсли;	
	
	Элементы.СоздатьНачальныйОбразРИБ.Видимость = РолевоеЗначениеЭтогоУзла = 3;
	Элементы.СписокСостоянияУзловСоздатьНачальныйОбразРИБ.Видимость = РолевоеЗначениеЭтогоУзла = 3;
	
	ИнициализацияДереваНастройкиСправочниковИДокументов(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКолонкиРесторанов()

	Если РолевоеЗначениеЭтогоУзла = 1 Тогда
		УдалениеЛишнихКолонокНастройки()
	ИначеЕсли РолевоеЗначениеЭтогоУзла = 3 Тогда
		ДобавлениеДанныхНовогоРесторана()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийИсточникЗначПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ДеревоЗначений = Элемент.Родитель.Родитель;
	ТД = ДеревоЗначений.ТекущиеДанные;
	ЭлементИмя = Элемент.Имя;
	Приставка = ?(Найти(ЭлементИмя, "ИсточникЗнач") = 1, "", Лев(ЭлементИмя, 1));
	Суффикс = ?(Найти(ЭлементИмя, "_") = 0, "", Сред(ЭлементИмя, Найти(ЭлементИмя, "_")));
	
	ТекИндекс = Число(Прав(Сред(Элемент.Имя, Найти(Элемент.Имя, "ИсточникЗнач"), Стрдлина("ИсточникЗнач") + 1), 1));
	
	Если Элемент.Родитель.Родитель.Имя = "ДеревоНастроекДокументов" Тогда
		ОбработкаВыбораГалочкойДокументы(ТД, ТекИндекс, Приставка, Суффикс)
	Иначе
		ОбработкаВыбораГалочкой(ТД, ТекИндекс, Приставка, Суффикс)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГалочкойДокументы(ТД, ТекИндекс, Приставка, Суффикс)

	Если ТекИндекс = 1 Тогда
		Если Не ТД["ИсточникЗнач"+ТекИндекс+Суффикс] = Истина Тогда
			ТД["ИсточникЗнач"+ТекИндекс+Суффикс] = Истина
		КонецЕсли;
		Для н = 1 По 3 Цикл
			Если ТекИндекс = н Тогда
				Продолжить;
			КонецЕсли;
			ТД["ИсточникЗнач"+н+Суффикс] = Ложь;	
		КонецЦикла;
	Иначе
		Если Не ТД["ИсточникЗнач"+ТекИндекс+Суффикс] = 1 Тогда
			ТД["ИсточникЗнач"+ТекИндекс+Суффикс] = 0
		КонецЕсли;
		Если ТД["ИсточникЗнач2"+Суффикс] = Ложь И ТД["ИсточникЗнач3"+Суффикс] = Ложь Тогда
			ТД["ИсточникЗнач1"+Суффикс] = Истина
		Иначе
			ТД["ИсточникЗнач1"+Суффикс] = Ложь
		КонецЕсли;
		
	КонецЕсли;
			
	Родитель = ТД.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		
		//Заполнить все подчиненные
		Дочерние = ТД.ПолучитьЭлементы();
		Для каждого дСтрока Из Дочерние Цикл
			
			ЭтоКолонкаЦРС = ПустаяСтрока(Суффикс);
			
			Если ТекИндекс = 1 Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЛБР	
			ИначеЕсли ТекИндекс = 3 Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЦБР	
			ИначеЕсли ТекИндекс = 2 И Не ЭтоКолонкаЦРС Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЛБК	
			ИначеЕсли ТекИндекс = 2 И ЭтоКолонкаЦРС Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЦБК	
			КонецЕсли;
			
			Если ДоступностьКолонки Тогда
				Если ТекИндекс = 1 Тогда
					дСтрока["ИсточникЗнач2"+Суффикс] = ТД["ИсточникЗнач2"+Суффикс];	
					дСтрока["ИсточникЗнач3"+Суффикс] = ТД["ИсточникЗнач3"+Суффикс];	
				Иначе
					дСтрока["ИсточникЗнач1"+Суффикс] = ТД["ИсточникЗнач1"+Суффикс];	
				КонецЕсли;
				дСтрока["ИсточникЗнач"+ТекИндекс+Суффикс] = ТД["ИсточникЗнач"+ТекИндекс+Суффикс];	
			КонецЕсли;
			
		КонецЦикла;
		
		Для н = 1 По 3 Цикл
			ТекЗначение = Дочерние[0]["ИсточникЗнач"+н+Суффикс];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+н+Суффикс];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				ТД["ИсточникЗнач"+н+Суффикс] = 2;	
			Иначе
				ТД["ИсточникЗнач"+н+Суффикс] = Дочерние[0]["ИсточникЗнач"+н+Суффикс];	
			КонецЕсли;
		КонецЦикла;

	Иначе
		//Отразим в родителе
		Дочерние = Родитель.ПолучитьЭлементы();
		Для н = 1 По 3 Цикл
			ТекЗначение = ТД["ИсточникЗнач"+н+Суффикс];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+н+Суффикс];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				//Родитель["ИсточникЗнач"+н] = 2;	
				Родитель["ИсточникЗнач"+н+Суффикс] = 2;	
			Иначе
				//Родитель["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
				Родитель["ИсточникЗнач"+н+Суффикс] = ТД["ИсточникЗнач"+н+Суффикс];	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГалочкой(ТД, ТекИндекс, Приставка, Суффикс)

	Если Не ТД["ИсточникЗнач"+ТекИндекс+Суффикс] = Истина Тогда
		Если ТД["ИсточникЗнач1"+Суффикс] = 0 И ПустаяСтрока(Суффикс) И ТД.ДоступностьЦБРЦ Тогда
			ТекИндекс = 1;
		ИначеЕсли ТД["ИсточникЗнач1"+Суффикс] = 0 И Не ПустаяСтрока(Суффикс) И ТД.ДоступностьЛБР Тогда
			ТекИндекс = 1;
		КонецЕсли;
		ТД["ИсточникЗнач"+ТекИндекс+Суффикс] = Истина
	КонецЕсли;
	Для н = 1 По 3 Цикл
		Если ТекИндекс = н Тогда
		    Продолжить;
		КонецЕсли;
		ТД["ИсточникЗнач"+н+Суффикс] = Ложь;	
	КонецЦикла;

	Родитель = ТД.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
	    //Заполнить все подчиненные
		Дочерние = ТД.ПолучитьЭлементы();
		Для каждого дСтрока Из Дочерние Цикл
			
			ЭтоКолонкаЦРС = ПустаяСтрока(Суффикс);
			
			Если ТекИндекс = 1 Тогда
				ДоступностьКолонки = ?(ЭтоКолонкаЦРС, дСтрока.ДоступностьЦБРЦ, дСтрока.ДоступностьЛБР)
			ИначеЕсли ТекИндекс = 3 Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЦБР	
			ИначеЕсли ТекИндекс = 2 И Не ЭтоКолонкаЦРС Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЛБК	
			ИначеЕсли ТекИндекс = 2 И ЭтоКолонкаЦРС Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЦБК	
			КонецЕсли;
			
			Если ДоступностьКолонки Тогда
				Для н = 1 По 3 Цикл
					//дСтрока["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
					дСтрока["ИсточникЗнач"+н+Суффикс] = ТД["ИсточникЗнач"+н+Суффикс];	
				КонецЦикла;
			Иначе
				Если Не ТекИндекс = 1 Тогда
					Для н = 1 По 3 Цикл
						//дСтрока["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
						дСтрока["ИсточникЗнач"+н+Суффикс] = Ложь;	
					КонецЦикла;
					дСтрока["ИсточникЗнач1"+Суффикс] = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для н = 1 По 3 Цикл
			ТекЗначение = Дочерние[0]["ИсточникЗнач"+н+Суффикс];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+н+Суффикс];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				//Родитель["ИсточникЗнач"+н] = 2;	
				ТД["ИсточникЗнач"+н+Суффикс] = 2;	
			Иначе
				//Родитель["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
				ТД["ИсточникЗнач"+н+Суффикс] = ТД["ИсточникЗнач"+н+Суффикс];	
			КонецЕсли;
		КонецЦикла;

	Иначе
		//Отразим в родителе
		Дочерние = Родитель.ПолучитьЭлементы();
		Для н = 1 По 3 Цикл
			ТекЗначение = ТД["ИсточникЗнач"+н+Суффикс];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+н+Суффикс];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				//Родитель["ИсточникЗнач"+н] = 2;	
				Родитель["ИсточникЗнач"+н+Суффикс] = 2;	
			Иначе
				//Родитель["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
				Родитель["ИсточникЗнач"+н+Суффикс] = Дочерние[0]["ИсточникЗнач"+н+Суффикс];	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
	//проверка доступности колонок
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	ОтключатьДоступность = Не ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	//ТекГруппаРесторан = Элементы.ДеревоСправочников.ПодчиненныеЭлементы.ДеревоНастроекСправочников.ТекущийЭлемент. Элемент.ТекущиеДанные.ПолучитьРодителя() 
		
	Для каждого ГруппаРесторан Из Элемент.ПодчиненныеЭлементы Цикл
		Если Элемент.Имя = "ДеревоНастроекСправочников" Тогда
			Если Элемент.ПодчиненныеЭлементы.ДеревоЗначенийСпрГруппаРестораны = ГруппаРесторан
				Или ТипЗнч(ГруппаРесторан) <> Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если Элемент.ПодчиненныеЭлементы.ДеревоЗначенийДокГруппаРестораны = ГруппаРесторан
				Или ТипЗнч(ГруппаРесторан) <> Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Для каждого Колонка Из ГруппаРесторан.ПодчиненныеЭлементы Цикл
			
			Ин = Найти(Колонка.Имя, "ИсточникЗнач");
			Если Ин = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтключатьДоступность Тогда
				
				ЭтоКолонкаЦРС = Колонка.Родитель.Имя = "ДеревоЗначенийСпрЦРС" Или Колонка.Родитель.Имя = "ДеревоЗначенийДокЦРС";
				ТекИндекс = Число(Прав(Сред(Колонка.Имя, Найти(Колонка.Имя, "ИсточникЗнач"), Стрдлина("ИсточникЗнач") + 1), 1));
				
				Если ТекИндекс = 1 Тогда
					ДоступностьКолонки = ТекущиеДанные.ДоступностьЛБР	
				КонецЕсли;
				
				Если ТекИндекс = 3 Тогда
					ДоступностьКолонки = ТекущиеДанные.ДоступностьЦБР	
				КонецЕсли;
				
				Если ТекИндекс = 2 И Не ЭтоКолонкаЦРС Тогда
					ДоступностьКолонки = ТекущиеДанные.ДоступностьЛБК	
				КонецЕсли;
				
				Если ТекИндекс = 2 И ЭтоКолонкаЦРС Тогда
					ДоступностьКолонки = ТекущиеДанные.ДоступностьЦБК	
				КонецЕсли;
				
				Колонка.Доступность = ДоступностьКолонки	
				
			Иначе
				Колонка.Доступность = Истина	
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекСправочниковПриАктивизацииСтроки(Элемент)
	
	//ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекДокументовПриАктивизацииСтроки(Элемент)

	//ДеревоНастроекПриАктивизацииСтроки(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииДанных(Команда)
	Если Модифицированность И Вопрос("Сохранить изменения настроек?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
		ЗаписатьВУзлыНаСервере();
		// процедура обновления параметров сеанса
		ОбменДаннымиВызовСервера.ОбновитьКэшМеханизмаРегистрацииОбъектов(); //Костенюк Александр 29.05.2014
	КонецЕсли;
	ОткрытьФормуМодально("ОбщаяФорма.ОбменыДанными", , ЭтаФорма);
	//ОбновитьКоличествоСинхронизаций(Истина);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВУзлыНаСервере()
	
	Модифицированность = Ложь;
	
	УзелЦБ = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	Если Не ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(УзелЦБ) Тогда
		Возврат
	КонецЕсли;

	Если УзлыОбменаВНастройках.НайтиПоЗначению(ЭтотУзелЦРС) = Неопределено Тогда
		УзлыОбменаВНастройках.Добавить(ЭтотУзелЦРС)
	КонецЕсли;
	
	Для каждого Узел Из УзлыОбменаВНастройках Цикл
		
		УзелОбъект = Узел.Значение.ПолучитьОбъект();
		НастройкиСвязейМеждуБазамиРС = УзелОбъект.НастройкиСвязейМеждуБазамиРС;
		НастройкиСвязейМеждуБазамиРС.Очистить();
		
		Приставка = "";
		Суффикс = ?(УзелЦБ = Узел.Значение, "", "_Ресторан" + Узел.Значение.Код);
		
		ЭтоНастройкиЦБ = ПустаяСтрока(Суффикс);
		
		Для каждого СтрДерева Из ДеревоНастроекСправочников.ПолучитьЭлементы() Цикл
			
			Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
				
				НСтр = НастройкиСвязейМеждуБазамиРС.Добавить();	
				НСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				Если СтрИдентификатор["ИсточникЗнач"+Приставка+"2"+Суффикс]
					И СтрИдентификатор["ИсточникЗнач"+Приставка+"3"+Суффикс] Тогда
					НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии
				ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"1"+Суффикс] Тогда	
					НСтр.ИсточникДанныхОбъекта = ?(ЭтоНастройкиЦБ, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана, Перечисления.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота)
				ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"2"+Суффикс] Тогда	
					НСтр.ИсточникДанныхОбъекта = ?(ЭтоНастройкиЦБ, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаБухгалтерии, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии)
				ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"3"+Суффикс] Тогда	
					НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы
				Иначе
					НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;
		
		Для каждого СтрДерева Из ДеревоНастроекДокументов.ПолучитьЭлементы() Цикл
			
			Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
				
				НСтр = НастройкиСвязейМеждуБазамиРС.Добавить();	
				НСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				Если СтрИдентификатор["ИсточникЗнач"+Приставка+"2"+Суффикс]
					И СтрИдентификатор["ИсточникЗнач"+Приставка+"3"+Суффикс] Тогда
					НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии
				ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"1"+Суффикс] Тогда	
					НСтр.ИсточникДанныхОбъекта = ?(ЭтоНастройкиЦБ, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана, Перечисления.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота)
				ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"2"+Суффикс] Тогда	
					НСтр.ИсточникДанныхОбъекта = ?(ЭтоНастройкиЦБ, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаБухгалтерии, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии)
				ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"3"+Суффикс] Тогда	
					НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы
				Иначе
					НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;
		
		Отбор = Новый Структура("Узел", Узел.Значение);
		НастройкиЗависимыхОбъектовУзла = НастройкиЗависимыхОбъектов.НайтиСтроки(Отбор);
		
		Для каждого СтрИдентификатор Из НастройкиЗависимыхОбъектовУзла Цикл
			СтрГлавного = НастройкиСвязейМеждуБазамиРС.Найти(СтрИдентификатор.ИдентификаторГлавногоОбъекта, "ИдентификаторОбъектаНастройки");
			Если СтрГлавного = Неопределено Тогда
				Продолжить;			
			КонецЕсли;
			НСтр = НастройкиСвязейМеждуБазамиРС.Найти(СтрИдентификатор.ИдентификаторОбъектаНастройки, "ИдентификаторОбъектаНастройки");
			Если НСтр = Неопределено Тогда
				НСтр = НастройкиСвязейМеждуБазамиРС.Добавить();	
			КонецЕсли;
			НСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
			НСтр.ИсточникДанныхОбъекта = СтрГлавного.ИсточникДанныхОбъекта;
		КонецЦикла;
		
		Попытка
			
			УзелОбъект.Записать();
			
		Исключение
			ВызватьИсключение ОписаниеОшибки()
		КонецПопытки;
	
	КонецЦикла;
	

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСинхронизациюДанных(Команда)
		
	ЗаписатьВУзлыНаСервере();
	
	СписокУзлов = Новый СписокЗначений;
	Для каждого Стр Из УзлыОбменаВНастройках Цикл
		Если ЭтотУзелЦРС = Стр.Значение Тогда
			Продолжить;
		КонецЕсли;
		СписокУзлов.Добавить(Стр.Значение)
	КонецЦикла;
	
	
	Если СписокУзлов.Количество() = 1 Тогда
		
		УзелОбмена = СписокУзлов[0].Значение;
		
	Иначе
		
		элУзелОбмена = СписокУзлов.ВыбратьЭлемент("Выберите удаляемый узел...", СписокУзлов[0]);
		
		Если элУзелОбмена = Неопределено Тогда Возврат КонецЕсли;
		
		УзелОбмена = элУзелОбмена.Значение
		
	КонецЕсли;
	
	ОбменДаннымиКлиент.УдалитьНастройкуСинхронизации(УзелОбмена);
	
	ОбменДаннымиВызовСервера.ОбновитьКэшМеханизмаРегистрацииОбъектов(); //Костенюк Александр 05.05.2014
	
	ОбновитьДанныеМонитора();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекСправочниковПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Строка = 0 Тогда Возврат КонецЕсли;
	
	Элемент.ТекущаяСтрока = Строка;
	Если Элемент.ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	Отказ = Элемент.ТекущиеДанные.Скрытый;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ЗакрытаФормаРасписанияСинхронизаций");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНачальныйОбразРИБ(Команда)
	
	//ЗаписатьВУзлыНаСервере();
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			
			СписокУзлов = Новый СписокЗначений;
			Для каждого Стр Из СписокСостоянияУзлов Цикл
				СписокУзлов.Добавить(Стр.УзелИнформационнойБазы)
			КонецЦикла;
			
			УзелОбмена = СписокУзлов.ВыбратьЭлемент("Выберите узел...", СписокУзлов[0]);
			
			Если УзелОбмена = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			УзелОбмена = УзелОбмена.Значение
			
		Иначе
			УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		КонецЕсли;
		
	КонецЕсли;
	
	#Если НЕ ТонкийКлиент Тогда //Костенюк Александр 27.12.2013
	Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелОбмена) Тогда
		ПараметрыФормы = Новый Структура("Ключ, Узел", УзелОбмена, УзелОбмена);
		ОткрытьФормуМодально("ПланОбмена.ОбменДанными2K_CRS.Форма.ФормаСозданияНачальногоОбраза", ПараметрыФормы);
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПоРолиЭтойБазыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыПоРолиЭтойБазы.ТекущаяСтраница = Элементы.СтраницыПоРолиЭтойБазы.ПодчиненныеЭлементы.ЭтаБазаАвтономная Тогда
		РолевоеЗначениеЭтогоУзла = 1	
	ИначеЕсли Элементы.СтраницыПоРолиЭтойБазы.ТекущаяСтраница = Элементы.СтраницыПоРолиЭтойБазы.ПодчиненныеЭлементы.ЭтаБазаПериферийная Тогда
		РолевоеЗначениеЭтогоУзла = 2
	ИначеЕсли Элементы.СтраницыПоРолиЭтойБазы.ТекущаяСтраница = Элементы.СтраницыПоРолиЭтойБазы.ПодчиненныеЭлементы.ЭтаБазаЦентральная Тогда
		РолевоеЗначениеЭтогоУзла = 3
	КонецЕсли;	
	УстановитьДоступностьЭлементовПоВидуБазы();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНовыйПрефиксРесторана()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбменДанными2K_CRS.Код КАК Код
		|ИЗ
		|	ПланОбмена.ОбменДанными2K_CRS КАК ОбменДанными2K_CRS
		|ГДЕ
		|	ОбменДанными2K_CRS.Код ПОДОБНО ""Р%""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код УБЫВ";

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат "Р01"	
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();
	
	Индекс = Число(Сред(ВыборкаДетальныеЗаписи.Код, 2));
	
	Возврат "Р" + Формат(Индекс + 1, "ЧЦ=2; ЧВН=; ЧГ=") 	

КонецФункции

&НаСервере
Процедура ДобавлениеДанныхНовогоРесторана(НовыйРесторан = Неопределено)

	//НовыйУзелОбмена = ПланыОбмена.ОбменДанными2K_CRS.СоздатьУзел();
	//НовыйУзелОбмена.Ресторан = НовыйРесторан;
	//НовыйУзелОбмена.Наименование = Строка(НовыйРесторан); 
	//НовыйУзелОбмена.Код = ПолучитьНовыйПрефиксРесторана(); 
	
	ПриставкаУзла = "_РесторанНовый";
	
	спТаблиц = Новый СписокЗначений;
	спТаблиц.Добавить("ДеревоНастроекДокументов", "Д");
	спТаблиц.Добавить("ДеревоНастроекСправочников", "С");
	ЕстьКолонкаНовогоРесторана = Ложь;
	Для каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты("ДеревоНастроекСправочников") Цикл
		Если Найти(Реквизит.Имя, ПриставкаУзла) > 0 Тогда
			ЕстьКолонкаНовогоРесторана = Истина;
		КонецЕсли;
		Если ЕстьКолонкаНовогоРесторана Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьКолонкаНовогоРесторана Тогда
		Возврат
	КонецЕсли;
	
	Для каждого ДеревоОбъектов Из спТаблиц Цикл
					
		мНовыхРеквизитов = Новый Массив;
		
		НоваяКолонкаУзел = Новый РеквизитФормы("Узел"+ПриставкаУзла, Новый ОписаниеТипов("ПланОбменаСсылка.ОбменДанными2K_CRS"), ДеревоОбъектов.Значение);
		НоваяКолонкаАВТ = Новый РеквизитФормы("ИсточникЗнач1"+ПриставкаУзла, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1), ДеревоОбъектов.Значение, "Авт");
		НоваяКолонкаЦБ = Новый РеквизитФормы("ИсточникЗнач3"+ПриставкаУзла, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1), ДеревоОбъектов.Значение, "ЦРС");
		НоваяКолонкаБух = Новый РеквизитФормы("ИсточникЗнач2"+ПриставкаУзла, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1), ДеревоОбъектов.Значение, "ЛБК");
		
		мНовыхРеквизитов.Добавить(НоваяКолонкаУзел);
		мНовыхРеквизитов.Добавить(НоваяКолонкаАВТ);
		мНовыхРеквизитов.Добавить(НоваяКолонкаЦБ);
		мНовыхРеквизитов.Добавить(НоваяКолонкаБух);
		
		ЭтаФорма.ИзменитьРеквизиты(мНовыхРеквизитов);
					                                                                                                                                    
		ГруппаКолонок                = Элементы.Добавить(ДеревоОбъектов.Представление+"Группа"+ПриставкаУзла, Тип("ГруппаФормы") , Элементы[ДеревоОбъектов.Значение]);   
		ГруппаКолонок.Вид            = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонок.ТолькоПросмотр = Ложь;
		ГруппаКолонок.ОтображатьВШапке = Истина;
		ГруппаКолонок.ОтображатьЗаголовок = Истина;
		ГруппаКолонок.Группировка = ГруппировкаКолонок.Горизонтальная;
		ГруппаКолонок.Заголовок = "Ресторан " + Строка(НовыйРесторан);
		ГруппаКолонок.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
					        
		НовыйЭлемент = Элементы.Добавить(ДеревоОбъектов.Представление+"Узел"+ПриставкаУзла,Тип("ПолеФормы"), ГруппаКолонок); 
		НовыйЭлемент.Видимость = Ложь;
		НовыйЭлемент.ПутьКДанным = ДеревоОбъектов.Значение+".Узел"; 
		
		НовыйЭлемент = Элементы.Добавить(ДеревоОбъектов.Представление+"ИсточникЗнач1"+ПриставкаУзла, Тип("ПолеФормы"), ГруппаКолонок); 
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоЗначенийИсточникЗначПриИзменении");
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
		НовыйЭлемент.ТриСостояния = Истина; 
		НовыйЭлемент.ПутьКДанным = ДеревоОбъектов.Значение+".ИсточникЗнач1"+ПриставкаУзла; 
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент = Элементы.Добавить(ДеревоОбъектов.Представление+"ИсточникЗнач3"+ПриставкаУзла, Тип("ПолеФормы"), ГруппаКолонок); 
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоЗначенийИсточникЗначПриИзменении");
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
		НовыйЭлемент.ТриСостояния = Истина; 
		НовыйЭлемент.ПутьКДанным = ДеревоОбъектов.Значение+".ИсточникЗнач3"+ПриставкаУзла; 
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент = Элементы.Добавить(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла, Тип("ПолеФормы"), ГруппаКолонок); 
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ДеревоЗначенийИсточникЗначПриИзменении");
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
		НовыйЭлемент.ТриСостояния = Истина; 
		НовыйЭлемент.ПутьКДанным = ДеревоОбъектов.Значение+".ИсточникЗнач2"+ПриставкаУзла; 
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;	
					
		Если ДеревоОбъектов.Значение = "ДеревоНастроекСправочников" Тогда
			//ДеревоЗначенийСправочникиИсточникЗнач1  ДеревоОбъектов.Значение+".ИсточникЗнач1"+ПриставкаУзла
			ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(0).Поля.Элементы;
			ЭлементУО = ЭлементыУО.Добавить();
			ЭлементУО.Использование = Истина;
			ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач1"+ПриставкаУзла);
			
			ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(2).Поля.Элементы;
			ЭлементУО = ЭлементыУО.Добавить();
			ЭлементУО.Использование = Истина;
			ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла);
			ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(3).Поля.Элементы;
			ЭлементУО = ЭлементыУО.Добавить();
			ЭлементУО.Использование = Истина;
			ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла);
			
			ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(1).Поля.Элементы;
			ЭлементУО = ЭлементыУО.Добавить();
			ЭлементУО.Использование = Истина;
			ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач3"+ПриставкаУзла);
			
		ИначеЕсли ДеревоОбъектов.Значение = "ДеревоНастроекДокументов" Тогда
			
			ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(4).Поля.Элементы;
			ЭлементУО = ЭлементыУО.Добавить();
			ЭлементУО.Использование = Истина;
			ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач1"+ПриставкаУзла);
			
			ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(6).Поля.Элементы;
			ЭлементУО = ЭлементыУО.Добавить();
			ЭлементУО.Использование = Истина;
			ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла);
			ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(7).Поля.Элементы;
			ЭлементУО = ЭлементыУО.Добавить();
			ЭлементУО.Использование = Истина;
			ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач2"+ПриставкаУзла);
			
			ЭлементыУО = ЭтаФорма.УсловноеОформление.Элементы.Получить(5).Поля.Элементы;
			ЭлементУО = ЭлементыУО.Добавить();
			ЭлементУО.Использование = Истина;
			ЭлементУО.Поле = Новый ПолеКомпоновкиДанных(ДеревоОбъектов.Представление+"ИсточникЗнач3"+ПриставкаУзла);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалениеЛишнихКолонокНастройки()

	спТаблиц = Новый СписокЗначений;
	спТаблиц.Добавить("ДеревоНастроекДокументов", "Д");
	спТаблиц.Добавить("ДеревоНастроекСправочников", "С");
	
	Для каждого ДеревоОбъектов Из спТаблиц Цикл
		
		мРеквизитов = Новый Массив;
		ЕстьУзлы = Новый Соответствие;
		
		Для каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты(ДеревоОбъектов.Значение) Цикл
			Если Найти(Реквизит.Имя, "_Ресторан") > 0 Тогда
				КодРесторана = Сред(Реквизит.Имя, Найти(Реквизит.Имя, "_Ресторан") + 9, 2);
				Узел = ЕстьУзлы.Получить(КодРесторана);
				Если Узел = Неопределено Тогда
					Узел = ПланыОбмена.ОбменДанными2K_CRS.НайтиПоКоду(КодРесторана);
					Если Узел.Пустая() Тогда
						мРеквизитов.Добавить(""+ДеревоОбъектов.Значение+"."+Реквизит.Имя);
						Для каждого Элемент Из Элементы Цикл
							Если Найти(Элемент.Имя, "_Ресторан"+КодРесторана) > 0 Тогда
								Попытка
									
									Элементы.Удалить(Элемент);	
									
								Исключение
									
								КонецПопытки;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ДеревоОбъектов.Значение = "ДеревоНастроекСправочников" Тогда
						ЕстьУзлы.Вставить(КодРесторана, Узел);
						УзлыОбменаВНастройках.Добавить(Узел)
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		ЭтаФорма.ИзменитьРеквизиты(,мРеквизитов);
		
		//Если мРеквизитов.Количество() Тогда
		//	Для каждого Элемент Из Элементы Цикл
		//		Если Найти(Элемент.Имя, "_Ресторан") > 0 Тогда
		//			Попытка
		//			
		//				Элементы.Удалить(Элемент);	
		//				
		//			Исключение
		//			
		//			КонецПопытки;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРесторан(Команда)
	//Перем НовыйРесторан;
	//Если ВвестиЗначение(НовыйРесторан, "Выберите ресторан...", Новый ОписаниеТипов("СправочникСсылка.Рестораны")) Тогда
	//	ДобавлениеДанныхНовогоРесторана(НовыйРесторан);
	//КонецЕсли;
	//ЗаписатьВУзлыНаСервере();
	
	Результат = Ложь;
	ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными("ОбменДанными2K_CRS", , Истина, Результат);
	//Костенюк Александр-Старт 28.04.2014
	// Признак того что ресторан добавлен успешно
	Если Результат Тогда
		// процедура обновления параметров сеанса
		ОбменДаннымиВызовСервера.ОбновитьКэшМеханизмаРегистрацииОбъектов();
		Модифицированность = Истина;
	КонецЕсли;
	//Костенюк Александр-Финиш 28.04.2014
КонецПроцедуры

//
//.. Конец изменения Dim)on  1 августа 2013 г. 11:55:55

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ОчиститьСообщения();
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Да");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Нет");
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	
	Если Модифицированность И Вопрос("Сохранить изменения настроек?", Кнопки) = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьВУзлыНаСервере();
		
		// процедура обновления параметров сеанса
		ОбменДаннымиВызовСервера.ОбновитьКэшМеханизмаРегистрацииОбъектов(); //Костенюк Александр 04.12.2013
		
	КонецЕсли;
	
	ЗакрыватьОкно = Истина;
	
	НастройкиСинхронизацииЦРС(ЗакрыватьОкно);
	НастройкиСинхронизацииЛБР(ЗакрыватьОкно);
	
	//ПроверитьРолевоеЗначениеЭтогоУзлаНаСервере();
	//РолевоеЗначениеЭтогоУзлаПриИзмененииНаКлиенте();
	//
	//ОбновитьКоличествоСинхронизаций();
	//ОбновитьДанныеМонитора();	
	
	Если ЗакрыватьОкно Тогда
		Закрыть()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Да, отменить и выйти");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Нет, можно продолжить настройку");
	
	Если Не Модифицированность Или Вопрос("Отменить изменения и выйти?", Кнопки) = КодВозвратаДиалога.Да Тогда
		Закрыть()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПолучитьПриставкуЭтогоУзла()

	Возврат "_Ресторан"+ЭтотУзелЦРС.Код

КонецФункции // ПолучитьКодЭтогоУзла()

&НаКлиенте
Функция НастройкиСинхронизацииЛБР(ЕстьРезультат)
	
	ЕстьНастройкаОбменСБухгалтерией = Ложь;
	
	Если РолевоеЗначениеЭтогоУзла = 2 Тогда
		ПриставкаЭтогоУзла = ПолучитьПриставкуЭтогоУзла()
	Иначе
		ПриставкаЭтогоУзла = ""
	КонецЕсли;
	
	Для каждого СтрДерева Из ДеревоНастроекСправочников.ПолучитьЭлементы() Цикл
		
		Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
			
			Если СтрИдентификатор["ИсточникЗнач2"+ПриставкаЭтогоУзла] Тогда
				ЕстьНастройкаОбменСБухгалтерией = Истина;	
			КонецЕсли;	
			Если ЕстьНастройкаОбменСБухгалтерией Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		Если ЕстьНастройкаОбменСБухгалтерией Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ЕстьБухгалтерскаяБазаДляОбмена И Не ЕстьНастройкаОбменСБухгалтерией Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Удалить обмен данными ЛРС <=> ЛБК");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		Если Вопрос("Вы убрали все отметки об обмене данными ЛРС <=> ЛБК.
			|Настройка обмена будет удалена.", Кнопки) = КодВозвратаДиалога.Да Тогда
			ОбменДаннымиКлиент.УдалитьНастройкуСинхронизации(УзелБухгалтерскойКонфигурации, Истина);
			ЕстьБухгалтерскаяБазаДляОбмена = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не ЕстьБухгалтерскаяБазаДляОбмена И ЕстьНастройкаОбменСБухгалтерией Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Задать настройки");
		//Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		Если Ложь И Вопрос("Вы указали, что есть данные, которые будут участвовать 
			|в обмене с бухгалтерской конфигурацией.
			|Необходимо задать настройки обмена с базой данных бухгалтерии.", Кнопки) = КодВозвратаДиалога.Нет Тогда
			Возврат 0
		КонецЕсли;
		
		ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными("ОбменДанными2K_CRSБухгалтерия", , Истина, ЕстьРезультат)
		
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция НастройкиСинхронизацииЦРС(Результат)
	
	Если РолевоеЗначениеЭтогоУзла = 3 Тогда
		
		ЕстьНастройкаРесторана = Ложь;
		
		НастройкиСинхронизацииЦРС_НаСервере(ЕстьНастройкаРесторана);	
		
		Если Не ЕстьНастройкаРесторана Тогда
			ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными("ОбменДанными2K_CRS", , Истина, Результат)
		КонецЕсли;
	//	Кнопки = Новый СписокЗначений;
	//	Кнопки.Добавить(КодВозвратаДиалога.Да, "Добавить ресторан");
	//	
	//	Если Не ЕстьНастройкаРесторана И Вопрос("Настройка центральной ресторанной системы.
	//		|Необходимо добавить первый ресторан.", Кнопки) = КодВозвратаДиалога.Да Тогда
	//		ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными("ОбменДанными2K_CRS");
	//	КонецЕсли;	

	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура НастройкиСинхронизацииЦРС_НаСервере(ЕстьНастройкаРесторана)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбменДанными2K_CRS.Ссылка) КАК Ссылка
		|ИЗ
		|	ПланОбмена.ОбменДанными2K_CRS КАК ОбменДанными2K_CRS";

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ВыборкаДетальныеЗаписи.Следующий();
	
	ЕстьНастройкаРесторана = ВыборкаДетальныеЗаписи.Ссылка > 1
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуНастроекСинхронизацииИнформационнойБазы(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено Тогда
			УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СинхронизацияДанных.ТекущаяСтраница = Элементы.СинхронизацияДанных.ПодчиненныеЭлементы.НастройкиСинхронизацииЦРС;
	Элементы.СтраницыКПСинхронизации.ТекущаяСтраница = Элементы.СтраницыКПСинхронизации.ПодчиненныеЭлементы.СтраницаКПНастройкиСинхронизацииЦРС;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыТранспорта(Команда)
	
	Если КоличествоСинхронизаций = 1 Тогда
		
		УзелОбмена = СписокСостоянияУзлов[0].УзелИнформационнойБазы;
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено Тогда
			УзелОбмена = ТекущиеДанные.УзелИнформационнойБазы;
		КонецЕсли;
	КонецЕсли;
	
	Отбор              = Новый Структура("Узел", УзелОбмена);
	ЗначенияЗаполнения = Новый Структура("Узел", УзелОбмена);
	
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "НастройкиТранспортаОбмена", ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтключитьВключитьАвтоматическийОбмен(Команда)
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	ОтключитьВключитьАвтоматическийОбменНаСервереБезКонтекста(ТекущиеДанные.УзелИнформационнойБазы)
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтключитьВключитьАвтоматическийОбменНаСервереБезКонтекста(Узел)
	Сценарий = Справочники.СценарииОбменовДанными.ПолучитьСценарий(Узел);
	Если Сценарий.Пустая() Тогда
		Возврат
	КонецЕсли;
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.ИспользоватьРегламентноеЗадание = Не СценарийОбъект.ИспользоватьРегламентноеЗадание;
	СценарийОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИспользоватьОбменСЛБК(Значение)
	
	Константы.ИспользоватьОбменСЛокальнымиБухгалтерскимиКонфигурациями.Установить(Значение)
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменСЛБК(Команда)
	Если ИспользоватьОбменСЛБК Тогда
		Возврат
	КонецЕсли;
	ИспользоватьОбменСЛБК = Истина;	
	УстановитьИспользоватьОбменСЛБК(ИспользоватьОбменСЛБК);
	ИнициализацияДереваНастройкиСправочниковИДокументов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьОбменСЛБК(Команда)
	Если Не ИспользоватьОбменСЛБК Тогда
		Возврат
	КонецЕсли;
	ИспользоватьОбменСЛБК = Ложь;	
	УстановитьИспользоватьОбменСЛБК(ИспользоватьОбменСЛБК);
	ИнициализацияДереваНастройкиСправочниковИДокументов(Истина);
КонецПроцедуры


