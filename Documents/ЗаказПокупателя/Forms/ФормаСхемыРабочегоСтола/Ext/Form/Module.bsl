
&НаКлиенте
Функция ПроверитьЭлементHTML(element)
	
	Возврат (Не element = Неопределено) И (Не element = Null);
	
КонецФункции // ПроверитьЭлементHTML()

&НаКлиенте
Функция ПолучитьIDЭлементаHTML(Тип, Подтип, Значение)
	
	Результат = "scheme";
	
	Если (Не Тип = Неопределено) Тогда
		Результат = Результат + "-" + Тип;
		Если (Не Подтип = Неопределено) Тогда
			Результат = Результат + "-" + Подтип;
			Если (Не Значение = Неопределено) Тогда
				Результат = Результат + "-" + Формат(Значение, "ЧН=; ЧГ=");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьIDЭлементаHTML()

&НаКлиенте
Функция ПолучитьТипЭлементаHTML(element)
	
	Результат = Новый Структура;
	Результат.Вставить("Тип");
	Результат.Вставить("Подтип");
	Результат.Вставить("Значение");
	
	Если ПроверитьЭлементHTML(element) Тогда
		
		ID = element.id;
		
		Индекс = Найти(ID, "-"); Если Индекс Тогда
			Если (Лев(ID, Индекс - 1) = "scheme") Тогда
				ID = Сред(ID, Индекс + 1);
			Иначе
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		Индекс = Найти(ID, "-"); Если Индекс Тогда
			Результат.Тип = Лев(ID, Индекс - 1); ID = Сред(ID, Индекс + 1);
		КонецЕсли;
		Индекс = Найти(ID, "-"); Если Индекс Тогда
			Результат.Подтип = Лев(ID, Индекс - 1); ID = Сред(ID, Индекс + 1);
		КонецЕсли;
		Результат.Значение = ID;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТипЭлементаHTML()

&НаКлиенте
Процедура ДобавитьКлассЭлементаHTML(element, class)
	
	Если ПроверитьЭлементHTML(element) Тогда
		
		className = element.className; originaClassName = className;
		
		Для Каждого Класс Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(class) Цикл
			
			Если Не Найти(className, Класс) Тогда
				Если ПустаяСтрока(className) Тогда
					className = Класс;
				Иначе
					className = className + " " + Класс;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если (Не className = originaClassName) Тогда
			element.className = className;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКлассЭлементаHTML()

&НаКлиенте
Процедура УдалитьКлассЭлементаHTML(element, class)
	
	Если ПроверитьЭлементHTML(element) Тогда
		
		className = element.className; originaClassName = className;
		
		Для Каждого Класс Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(class) Цикл
			
			Если Найти(className, Класс) Тогда
				className = СокрЛП(СтрЗаменить(СтрЗаменить(className, Класс, ""), "  ", " "));
			КонецЕсли;
			
		КонецЦикла;
		
		Если (Не className = originaClassName) Тогда
			element.className = className;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьКлассЭлементаHTML()

&НаКлиенте
Процедура ДобавитьУдалитьКлассЭлементаHTML(element, addedClass, removedClass)
	
	Если ПроверитьЭлементHTML(element) Тогда
		
		className = element.className; originaClassName = className;
		
		class = removedClass;
		Для Каждого Класс Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(class) Цикл
			
			Если Найти(className, Класс) Тогда
				className = СокрЛП(СтрЗаменить(СтрЗаменить(className, Класс, ""), "  ", " "));
			КонецЕсли;
			
		КонецЦикла;
		
		class = addedClass;
		Для Каждого Класс Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(class) Цикл
			
			Если Не Найти(className, Класс) Тогда
				Если ПустаяСтрока(className) Тогда
					className = Класс;
				Иначе
					className = className + " " + Класс;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если (Не className = originaClassName) Тогда
			element.className = className;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьУдалитьКлассЭлементаHTML()
			


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМинимальноеЗначениеПолосыРегулирования(ИнтервалВыбораВремени)
	
	Результат = (ИнтервалВыбораВремени.МинимальныйЧас * 4);
	
	Возврат Результат;
	
КонецФункции // ПолучитьМинимальноеЗначениеПолосыРегулирования()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМаксимальноеЗначениеПолосыРегулирования(ИнтервалВыбораВремени)
	
	Результат = (ИнтервалВыбораВремени.МаксимальныйЧас * 4 + 3);
	
	Возврат Результат;
	
КонецФункции // ПолучитьМаксимальноеЗначениеПолосыРегулирования()

&НаКлиенте
Функция ПреобразоватьЗначениеПолосыРегулированияВДату(Значение, ИнтервалВыбораВремени)
	
	Результат = '00010101' + 
				Макс(Мин(Цел(Значение / 4), ИнтервалВыбораВремени.МаксимальныйЧас), ИнтервалВыбораВремени.МинимальныйЧас) * 3600 +
				(Значение % 4) * 900;
	
	Возврат Результат;
	
КонецФункции // ПреобразоватьЗначениеПолосыРегулированияВДату()

&НаКлиенте
Функция ПреобразоватьДатуВЗначениеПолосыРегулирования(Дата, ИнтервалВыбораВремени)
	
	ОкругленнаяДата = __ОбщегоНазначенияКлиентСервер.ОкрВремя('00010101' + (Дата - НачалоДня(Дата)), 900);
	СекундОтНачалаДня = (ОкругленнаяДата - НачалоДня(Дата));
	СекундОтНачалаЧаса = (ОкругленнаяДата - НачалоЧаса(ОкругленнаяДата));
	
	Результат = Цел(СекундОтНачалаДня / 3600) * 4;
	Если (СекундОтНачалаЧаса < 450) Тогда
		Результат = Результат + 0;
	ИначеЕсли (СекундОтНачалаЧаса < 1350) Тогда
		Результат = Результат + 1;
	ИначеЕсли (СекундОтНачалаЧаса < 2250) Тогда
		Результат = Результат + 2;
	ИначеЕсли (СекундОтНачалаЧаса < 3150) Тогда
		Результат = Результат + 3;
	ИначеЕсли (СекундОтНачалаЧаса < 450) Тогда
		Результат = Результат + 4;
	КонецЕсли;
	
	Результат = Макс(Мин(Результат, ПолучитьМаксимальноеЗначениеПолосыРегулирования(ИнтервалВыбораВремени)), ПолучитьМинимальноеЗначениеПолосыРегулирования(ИнтервалВыбораВремени));
	
	Возврат Результат;
	
КонецФункции // ПреобразоватьДатуВЗначениеПолосыРегулирования()


&НаКлиенте
Процедура УстановитьОбновление(ПриОткрытии = Ложь, ПриСменеРежимаПодтверждения = Ложь)
	
	Перем СостояниеДанных;
	
	// Текущая дата.
	ТекущаяДата = ТекущаяДата();
	
	// Дата.
	Если УпрощенныеДатаПериодКлиентСервер.НаДень(Период) Тогда
		УпрощенныеДатаПериодКлиентСервер.УстановитьТолькоВремя(Период, УпрощенныеДатаПериодКлиентСервер.ПолучитьИнтервалВыбораВремени(Период).МинимальноеВремя);
	КонецЕсли;
	
	// Настройка формы.
	Если РежимНазначенияСписка Тогда
		Элементы.ГруппаТекущаяДатаСейчас.ТекущаяСтраница = Элементы.ГруппаСейчас;
	Иначе
		Если УпрощенныеДатаПериодКлиентСервер.НаСейчас(Период) Тогда
			Элементы.ГруппаТекущаяДатаСейчас.ТекущаяСтраница = Элементы.ГруппаТекущаяДата;
		Иначе
			Элементы.ГруппаТекущаяДатаСейчас.ТекущаяСтраница = Элементы.ГруппаСейчас;
		КонецЕсли;
	КонецЕсли;
	ПолосаРегулирования = ПреобразоватьДатуВЗначениеПолосыРегулирования(УпрощенныеДатаПериодКлиентСервер.ПолучитьТолькоВремя(Период), ИнтервалВыбораВремени);
	
	
	// Данные.
	Если СхемаДоступна Тогда
		Если ПриОткрытии Тогда
		Иначе
			УстановитьОбновлениеНаСервере(УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(Период), Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета, СостояниеДанных);
			
			// Схема.
			СостояниекСхемы = СостояниеДанных.СостояниеСхемы;
			
			document = Элементы.Схема.document;
			Для Каждого ЭлементСостояниекСхемы Из СостояниекСхемы Цикл
				item = ЭлементСостояниекСхемы.Значение;
				
				// Стол.
				ID = item.tableID;
				
				element = document.getElementById(ID);
				ДобавитьУдалитьКлассЭлементаHTML(element, item.tableAddedClass, item.tableRemovedClass);
				
				// Документ.
				ID = item.reserveID;
				
				element = document.getElementById(ID);
				Если ПроверитьЭлементHTML(element) Тогда
					element.innerHTML = item.reserveInnerHTML;
				КонецЕсли;
			
			КонецЦикла;
			
			// Рекомендация.
			Если Не РежимНазначения Тогда
				СостояниеРекомендации = СостояниеДанных.СостояниеРекомендации;
				ПараметрыРекомендации = СостояниеРекомендации;
				
				Если ПараметрыРекомендации.Просроченные Или ПараметрыРекомендации.Нераспределенные Тогда
					Рекомендация = ПараметрыРекомендации.Заголовок;
					Элементы.ГруппаПредупреждение.ТекущаяСтраница = Элементы.ГруппаПредупреждениеСтраницаРекомендация;
				Иначе
					Элементы.ГруппаПредупреждение.ТекущаяСтраница = Элементы.ГруппаПредупреждениеСтраницаПустая;
					Рекомендация = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Если ПриСменеРежимаПодтверждения Тогда
			Если РежимНазначения Тогда
				
				document = Элементы.Схема.document;
				Для Каждого ЭлементСоответствияСтолов Из СоответствияСтолов Цикл
					item = ЭлементСоответствияСтолов.Ключ; ID = ПолучитьIDЭлементаHTML("table", "number", item);
					
					element = document.getElementById(ID);
					Если (ОбъектСтолы.НайтиПоЗначению(ЭлементСоответствияСтолов.Значение) = Неопределено) Тогда
						ДобавитьКлассЭлементаHTML(element, "checkbox-mode");
					Иначе
						ДобавитьКлассЭлементаHTML(element, "checkbox-mode,checked");
					КонецЕсли;
				
				КонецЦикла;
				
			Иначе
				
				document = Элементы.Схема.document;
				Для Каждого ЭлементСоответствияСтолов Из СоответствияСтолов Цикл
					item = ЭлементСоответствияСтолов.Ключ; ID = ПолучитьIDЭлементаHTML("table", "number", item);
					
					element = document.getElementById(ID);
					УдалитьКлассЭлементаHTML(element, "checkbox-mode,checked");
				
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Автообновление.
	ОтключитьОбработчикОжидания("ОбработчикОжидания");
	ПодключитьОбработчикОжидания("ОбработчикОжидания", 60);
	
КонецПроцедуры // УстановитьОбновление()

&НаСервереБезКонтекста
Процедура УстановитьОбновлениеНаСервере(Период, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета, СостояниеДанных)
	
	// Дата.
	НачалоПериода = (Период);
	ОкончаниеПериода = (Период + 3600 - 1);
	
	// Данные.
	СостояниеДанных = РегистрыСведений.СхемыСтолов.ПолучитьСостояниекСхемыHTML(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета);
	
КонецПроцедуры // УстановитьОбновлениеНаСервере()


&НаКлиенте
Процедура Переход(Команда, АлтернативныеПараметры = Неопределено)
	
	Перем Параметры;
	
	ОчиститьСообщения();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Период", УпрощенныеДатаПериодКлиентСервер.ПолучитьУпрощенныйПериод(Период));
	Параметры.Вставить("Ресторан", Ресторан);
	Параметры.Вставить("Родитель", Родитель);
	Параметры.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.СостояниеЗаказовПокупателей.Открытые"));
	Параметры.Вставить("Поиск", Неопределено);
	Параметры.Вставить("Сортировка", Неопределено);
	Параметры.Вставить("РежимНазначенияСписка", ДанныеРежимаНазначенияСписка);
	
	Если (Не АлтернативныеПараметры = Неопределено) Тогда
		ЗаполнитьЗначенияСвойств(Параметры, АлтернативныеПараметры);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЖурналаРабочегоСтола", Параметры, ВладелецФормы, , __УправляемыеФормыКлиент.ПолучитьОкно(Окно));
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Закрыть();
	#КонецЕсли
	
КонецПроцедуры // Переход()

&НаКлиенте
Процедура Сейчас(Команда)

	УпрощенныеДатаПериодКлиентСервер.УстановитьМоментВремени(Период, "Сейчас");
	УстановитьОбновление();
	
КонецПроцедуры // Сейчас()


&НаКлиенте
Процедура РесторанПриИзменении(Элемент)
	
	// Настройка формы.
	УстановитьОбновление();
	
КонецПроцедуры // РесторанПриИзменении()

&НаКлиенте
Процедура РесторанОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // РесторанОчистка()

&НаКлиенте
Процедура РесторанОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // РесторанОткрытие()

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	// Схема.
	РодительПриИзмененииНаСервере();
	
	// Настройка формы.
	УстановитьОбновление(Ложь, РежимНазначения);
	
КонецПроцедуры // РодительПриИзменении()

&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	// Схема.
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РегистрыСведений.СхемыСтолов.ПолучитьСхемуHTML(Родитель));
	
КонецПроцедуры // РодительПриИзменении()

&НаКлиенте
Процедура РодительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // РодительОчистка()

&НаКлиенте
Процедура РодительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РодительОткрытие()

&НаКлиенте
Процедура ПериодДатаПриИзменении(Элемент)
	
	УпрощенныеДатаПериодКлиентСервер.ДатаПриИзменении(Период, Элемент);
	УстановитьОбновление();
	
КонецПроцедуры // ПериодДатаПриИзменении()

&НаКлиенте
Процедура ПериодДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УпрощенныеДатаПериодКлиентСервер.ДатаНачалоВыбора(Период, Элемент, ДанныеВыбора, СтандартнаяОбработка) Тогда
		УстановитьОбновление();
	КонецЕсли;
	
КонецПроцедуры // ПериодДатаНачалоВыбора()

&НаКлиенте
Процедура ПериодДатаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УпрощенныеДатаПериодКлиентСервер.ДатаНачалоВыбораИзСписка(Период, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ПериодДатаНачалоВыбораИзСписка()

&НаКлиенте
Процедура ПериодВремяПриИзменении(Элемент)
	
	УпрощенныеДатаПериодКлиентСервер.ВремяПриИзменении(Период, Элемент);
	УстановитьОбновление();
	
КонецПроцедуры // ПериодВремяПриИзменении()

&НаКлиенте
Процедура ПериодВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УпрощенныеДатаПериодКлиентСервер.ВремяНачалоВыбора(Период, Элемент, ДанныеВыбора, СтандартнаяОбработка) Тогда
		УстановитьОбновление();
	КонецЕсли;
	
КонецПроцедуры // ПериодВремяНачалоВыбора()

&НаКлиенте
Процедура ПериодВремяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УпрощенныеДатаПериодКлиентСервер.ВремяНачалоВыбораИзСписка(Период, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ПериодВремяНачалоВыбораИзСписка()

&НаКлиенте
Процедура ПолосаРегулированияПриИзменении(Элемент)
	
	УпрощенныеДатаПериодКлиентСервер.УстановитьТолькоВремя(Период, ПреобразоватьЗначениеПолосыРегулированияВДату(ПолосаРегулирования, ИнтервалВыбораВремени));
	УстановитьОбновление(Истина);
	
	ПодключитьОбработчикОжидания("ОбработчикОжидания", 0.2, Истина);
	
КонецПроцедуры // ПолосаРегулированияПриИзменении()

&НаКлиенте
Процедура РекомендацияНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	Перем Параметры, Период, Состояние;
	
	СтандартнаяОбработка = Ложь;

	Если ПараметрыРекомендации.Просроченные Тогда
		Период = ПараметрыРекомендации.МинимальнаяДатаПросроченных;
		Состояние = ПредопределенноеЗначение("Перечисление.СостояниеЗаказовПокупателей.Просроченные");
		Сортировка = "Дата";
	КонецЕсли;
	Если ПараметрыРекомендации.Нераспределенные Тогда
		Период = ПараметрыРекомендации.МинимальнаяДатаНераспределенных;
		Состояние = ПредопределенноеЗначение("Перечисление.СостояниеЗаказовПокупателей.Открытые");
		Сортировка = "СтолПредставление";
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Период", Период);
	Параметры.Вставить("Родитель", Неопределено);
	Параметры.Вставить("Состояние", Состояние);
	Параметры.Вставить("Сортировка", Сортировка);
	
	Переход(Неопределено, Параметры);
	
КонецПроцедуры // РекомендацияНадписьНажатие()

&НаКлиенте
Процедура ДекорацияНастройкаНажатие(Элемент)
	
	Закрыть();
	
	ОткрытьФорму("РегистрСведений.СхемыСтолов.ФормаСписка", , ВладелецФормы, , __УправляемыеФормыКлиент.ПолучитьОкно(Окно));

КонецПроцедуры // ДекорацияНастройкаНажатие()


&НаКлиенте
Процедура СхемаДокументСформирован(Элемент)
	
	// Настройка формы.
	УстановитьОбновление(Ложь, РежимНазначения);
	
КонецПроцедуры // СхемаДокументСформирован()

&НаКлиенте
Процедура СхемаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Перем Параметры;
	
	СтандартнаяОбработка = Ложь;
	
	element = ДанныеСобытия.Element;
	ТипЭлемента = ПолучитьТипЭлементаHTML(element);
	
	Если (ТипЭлемента.Тип = "table") Тогда
		Если (ТипЭлемента.Подтип = "number") Тогда
			Если РежимНазначения Тогда
				
				Стол = СоответствияСтолов[ТипЭлемента.Значение]; ЭлементСпискаСтолов = ОбъектСтолы.НайтиПоЗначению(Стол);
				Если (ЭлементСпискаСтолов = Неопределено) Тогда
					ОбъектСтолы.Добавить(Стол);
					ДобавитьКлассЭлементаHTML(element, "checked");
				Иначе
					ОбъектСтолы.Удалить(ЭлементСпискаСтолов);
					УдалитьКлассЭлементаHTML(element, "checked");
				КонецЕсли;
				
				// Настройка формы.
				УстановитьПредставлениеСтоловОбъекта();
				
			Иначе
				
				Параметры = Новый Структура;
				Параметры.Вставить("Поиск", ТипЭлемента.Значение);
				Параметры.Вставить("Сортировка", "СтолПредставление");
				
				Переход(Неопределено, Параметры);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипЭлемента.Тип = "reserve") Тогда
		Если РежимНазначения Тогда
		Иначе
			ПрочитатьОбъект(ТипЭлемента.Значение);	
			УстановитьРежимОбъекта("Запись");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СхемаПриНажатии()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Параметры.
	Если (Параметры.РежимНазначенияСписка = Неопределено) Тогда
		РежимНазначенияСписка = Ложь;
	Иначе
		РежимНазначенияСписка = Истина;
		ДанныеРежимаНазначенияСписка = Параметры.РежимНазначенияСписка;
    КонецЕсли;
	УпрощенныеДатаПериодКлиентСервер.УстановитьУпрощенныйПериод(Период, ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(Параметры.Период, "Сейчас"));
	Ресторан = ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(Параметры.Ресторан, Справочники.Рестораны.ОсновнойРесторан());
	Родитель = ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(Параметры.Родитель, РегистрыСведений.СхемыСтолов.ОсновнаяСхема());
	
	// Переменные.
	ПараметрыРасчета = РегистрыСведений.СостояниеЗаказовПокупателей.ПолучитьПараметрыРасчетаСостоянияЗаказовПокупателей();
	ИнтервалВыбораВремени = РегистрыСведений.СхемыСтолов.ПолучитьИнтервалВыбораВремени();
	
	// Дата.
	УпрощенныеДатаПериодКлиентСервер.УстановитьИнтервалВыбораВремени(Период, ИнтервалВыбораВремени.МинимальныйЧас, ИнтервалВыбораВремени.МаксимальныйЧас);
	
	// Схема.
	СхемаДоступна = РегистрыСведений.СхемыСтолов.КоличествоНастроенныхОднаИБолее();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РегистрыСведений.СхемыСтолов.ПолучитьСхемуHTML(Родитель));
	
	// Настройка формы.
	Элементы.Ресторан.Видимость = Справочники.Рестораны.КоличествоАктуальныхРесторановБолееОдного();
	Если РегистрыСведений.СхемыСтолов.КоличествоНастроенныхСхемБолееОдной() Тогда
		Элементы.Родитель.СписокВыбора.ЗагрузитьЗначения(РегистрыСведений.СхемыСтолов.ПолучитьНастроенныеСхемы());
		УстановитьСвойство(Элементы.Родитель.СписокВыбора.НайтиПоЗначению(Справочники.Столы.ПустаяСсылка()), "Представление", НСтр("ru = 'Столы'; uk = 'Столи'"));
	Иначе
		Элементы.Родитель.Видимость = Ложь;
	КонецЕсли;
	Элементы.ПолосаРегулирования.МинимальноеЗначение = ПолучитьМинимальноеЗначениеПолосыРегулирования(ИнтервалВыбораВремени);
	Элементы.ПолосаРегулирования.МаксимальноеЗначение = ПолучитьМаксимальноеЗначениеПолосыРегулирования(ИнтервалВыбораВремени);
	Элементы.Схема.Видимость = СхемаДоступна;
	Элементы.ГруппаПредупреждение.Видимость = СхемаДоступна;
	Элементы.ДекорацияНастройка.Видимость = Не СхемаДоступна;
	
	
	// Объект.
	Если РежимНазначенияСписка Тогда
		
		ТекущиеДанные = ДанныеРежимаНазначенияСписка.Данные.Список.НайтиПоИдентификатору(ДанныеРежимаНазначенияСписка.ТекущаяСтрока);
		
		Если (ТекущиеДанные.Столы = Неопределено) Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
				ПрочитатьОбъектНаСервереБезКонтекста(ТекущиеДанные.Ссылка.УникальныйИдентификатор(), Объект, ОбъектСтолы);
			КонецЕсли;
		Иначе
			ОбъектСтолы.ЗагрузитьЗначения(ТекущиеДанные.Столы.ВыгрузитьЗначения());
		КонецЕсли;
		
		КопироватьДанныеФормы(ТекущиеДанные, Объект);
		
		// Настройка формы.
		УстановитьРежимНазначенияСпискаНаСервере();
		
	Иначе
		
		// Проверяемые реквизиты.
		ОбъектМетаданные = Метаданные.Документы.ЗаказПокупателя;
		ПроверяемыеРеквизыты = Новый Массив;
		
		ПроверяемыйРеквизыт = Новый Структура;
		ПроверяемыйРеквизыт.Вставить("Имя", "КонтрагентПредставление");
		ПроверяемыйРеквизыт.Вставить("Синоним", ОбъектМетаданные.Реквизиты[ПроверяемыйРеквизыт.Имя].Синоним);
		ПроверяемыйРеквизыт.Вставить("Поле", "КонтрагентПредставление");
		ПроверяемыйРеквизыт.Вставить("Распечатан", Ложь);
		ПроверяемыеРеквизыты.Добавить(ПроверяемыйРеквизыт);
		
		ПроверяемыйРеквизыт = Новый Структура;
		ПроверяемыйРеквизыт.Вставить("Имя", "ТелефонПредставление");
		ПроверяемыйРеквизыт.Вставить("Синоним", ОбъектМетаданные.Реквизиты[ПроверяемыйРеквизыт.Имя].Синоним);
		ПроверяемыйРеквизыт.Вставить("Поле", "ТелефонПредставление");
		ПроверяемыйРеквизыт.Вставить("Распечатан", Ложь);
		ПроверяемыеРеквизыты.Добавить(ПроверяемыйРеквизыт);
		
		ПроверяемыйРеквизыт = Новый Структура;
		ПроверяемыйРеквизыт.Вставить("Имя", "Стол");
		ПроверяемыйРеквизыт.Вставить("Синоним", ОбъектМетаданные.Реквизиты[ПроверяемыйРеквизыт.Имя].Синоним);
		ПроверяемыйРеквизыт.Вставить("Поле", "СтолПредставление");
		ПроверяемыйРеквизыт.Вставить("Распечатан", Истина);
		ПроверяемыеРеквизыты.Добавить(ПроверяемыйРеквизыт);
		
		ОбъектПроверяемыеРеквизыты = ОбщегоНазначения.ФиксированныеДанные(ПроверяемыеРеквизыты);
		
		// Настройка формы.
		ОбъектВыборСписокВыбора.Добавить("Записать", НСтр("ru = 'Записать'; uk = 'Записати'"), , БиблиотекаКартинок.Записать);
		ОбъектВыборСписокВыбора.Добавить("Провести", НСтр("ru = 'Принять'; uk = 'Прийняти'"), , БиблиотекаКартинок.ЗаказПокупателяРаспечатан);
		ОбъектВыборСписокВыбора.Добавить("Удалить", НСтр("ru = 'Удалить'; uk = 'Видалити'"), , БиблиотекаКартинок.ПометитьНаУдаление);
		
	КонецЕсли;
	
	// Автокорректировка наименования.
	ОбъектАвтокорректировкаНаименованийКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьАвтокорректировкуНаименованийКонтрагентов");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Настройка формы.
	УстановитьОбновление(СхемаДоступна);
	

	// Объект.
	Если РежимНазначенияСписка Тогда
		УстановитьПредставлениеСтоловОбъекта();
	Иначе
		ОчиститьОбъект();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// Объект.
	Если __УправлениеДаннымиКлиентСервер.ОповещениеИзмененияЗаказаПокупателя(ИмяСобытия) Тогда
		ОбъектОчистить(Неопределено);
		УстановитьОбновление();
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработчикОжидания()
	
	// Настройка формы.
	УстановитьОбновление();
	
КонецПроцедуры // ОбработчикОжидания()



&НаКлиенте
Процедура УстановитьРежимОбъекта(Режим)
	
	Режим = НРег(Режим);
	
	Если (Режим = "подтверждение") Тогда
		РежимНазначения = Истина;
		Элементы.ГруппаОбъектДействиястРежимы.ТекущаяСтраница = Элементы.ГруппаОбъектДействиястРежимПодтверждение;
	ИначеЕсли (Режим = "запись") Тогда
		РежимНазначения = Ложь;
		Элементы.ГруппаОбъектДействиястРежимы.ТекущаяСтраница = Элементы.ГруппаОбъектДействиястРежимЗапись;
	Иначе
		РежимНазначения = Ложь;
		Элементы.ГруппаОбъектДействиястРежимы.ТекущаяСтраница = Элементы.ГруппаОбъектДействиястРежимСоздание;
	КонецЕсли;
	
КонецПроцедуры // УстановитьРежимОбъекта()

&НаСервере
Процедура УстановитьРежимНазначенияСпискаНаСервере()
	
	РежимНазначения = Истина;
	
	Заголовок = НСтр("ru = 'Резервирование — назначение стола'; uk = 'Резервирование — призначення столу'");
	Элементы.ГруппаТекущаяДатаСейчас.ТекущаяСтраница = Элементы.ГруппаСейчас;
	Элементы.Сейчас.Доступность = Ложь;
	Элементы.Сейчас.Картинка = БиблиотекаКартинок.ПустаяКартинка;
	Элементы.Сейчас.КнопкаПоУмолчанию = Ложь;
	Элементы.Сейчас.Отображение = ОтображениеКнопки.Картинка;
	Элементы.Разделитель.Видимость = Истина;
	Элементы.Переход.Видимость = Ложь;
	Элементы.ОбъектИзменить.Видимость = Ложь;
	Элементы.ОбъектИзменитьКартинка.Видимость = Истина;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ОбъектИзменитьКартинка.Картинка = БиблиотекаКартинок.Изменить;
	Иначе
		Элементы.ОбъектИзменитьКартинка.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	КонецЕсли;
	Элементы.ГруппаОбъектДействиястРежимы.ТекущаяСтраница = Элементы.ГруппаОбъектДействиястРежимПодтверждение;
	Элементы.ОбъектПодтвердить.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // УстановитьРежимОбъекта()

&НаКлиенте
Процедура УстановитьСостояниеДействияОбъекта(ТекущиеДанные)
	
	// Индекс картинки действия.
	Если ТекущиеДанные.Добавление Тогда
		ТекущиеДанные.ИндексКартинкиДействия = 6;
	ИначеЕсли ТекущиеДанные.Проведение Тогда
		Если ТекущиеДанные.Проведен Тогда
			ТекущиеДанные.ИндексКартинкиДействия = 4;
		Иначе
			ТекущиеДанные.ИндексКартинкиДействия = 5;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Удаление Тогда
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ТекущиеДанные.ИндексКартинкиДействия = 3;
		Иначе
			ТекущиеДанные.ИндексКартинкиДействия = 2;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Изменение Тогда
		ТекущиеДанные.ИндексКартинкиДействия = 1;
	Иначе	
		ТекущиеДанные.ИндексКартинкиДействия = 0;
	КонецЕсли;

КонецПроцедуры // ИзменитьПервоночальноеСостоянияДанных()

&НаКлиенте
Процедура УстановитьПредставлениеСтоловОбъекта()
	
	Если ОбъектСтолы.Количество() Тогда
		Если РежимНазначения Тогда
			Объект.СтолПредставление = СтрЗаменить(ОбъектСтолы, ";", ",");
		Иначе
			Объект.СтолПредставление = СтрЗаменить(ОбъектСтолы, ";", ",") + " — " + НСтр("ru = 'изменить'; uk = 'змінити'");
		КонецЕсли;
	Иначе
		Если РежимНазначения Тогда
			Объект.СтолПредставление = НСтр("ru = 'Не выбран'; uk = 'Не обран'");
		Иначе
			Объект.СтолПредставление = НСтр("ru = 'Назначить'; uk = 'Призначити'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПредставлениеСтоловОбъекта()


&НаКлиенте
Процедура ПрочитатьОбъект(Идентификатор)
	
	Копия = Объект;
	ПрочитатьОбъектНаСервереБезКонтекста(Идентификатор, Копия, ОбъектСтолы);
	КопироватьДанныеФормы(Копия, Объект);
	
	// Дата.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УпрощенныеДатаПериодКлиентСервер.УстановитьМоментВремени(Период, Объект.Дата);
	КонецЕсли;
	
	// Настройка формы.
	УстановитьПредставлениеСтоловОбъекта();
	УстановитьОбновление();
	
КонецПроцедуры // ПрочитатьОбъект()

&НаКлиенте
Процедура ИзменитьОбъект(РежимПодтверждения)
	
	Перем Параметры;
	
	Если Не РежимНазначения Тогда
		
		ОчиститьСообщения();
		
		Отказ = Ложь;
		
		// Объект.
		Объект.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(Период);
		Объект.Ресторан = Ресторан;
		
		// Проверяемые реквизиты.
		Если РежимПодтверждения Тогда
			Для Каждого ПроверяемыйРеквизыт Из ОбъектПроверяемыеРеквизыты Цикл
				Если (ПроверяемыйРеквизыт.Распечатан = Объект.Распечатан) Или (Не ПроверяемыйРеквизыт.Распечатан) Тогда
					Если Не ЗначениеЗаполнено(Объект[ПроверяемыйРеквизыт.Имя]) Тогда
						
						ТекстСообщения = НСтр("ru = 'Поле ""[Синоним]"" не заполнено'; uk = 'Поле ""[Синоним]"" не заповнене'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Синоним]", ПроверяемыйРеквизыт.Синоним);
						__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , ПроверяемыйРеквизыт.Поле, "Объект", Отказ);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не Отказ Тогда
			
			// Форма.
			Параметры = Новый Структура;
			Параметры.Вставить("Ключ", Объект.Ссылка);
			Параметры.Вставить("РежимПодтверждения", РежимПодтверждения);
			
			Форма = ПолучитьФорму("Документ.ЗаказПокупателя.Форма.ФормаДокументаРабочегоСтола", Параметры, ЭтаФорма);
			
			КопироватьДанныеФормы(Объект, Форма.Объект);
			
			Форма.Открыть();
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ИзменитьОбъект()

&НаКлиенте
Процедура УдалитьОбъект()
	
	Перем Отказ;
	
	Ссылка = Объект.Ссылка; ПометкаУдаления = Объект.ПометкаУдаления;
	
	// Подтверждение.
	Если ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Восстановить резерв?'; uk = 'Відновити резерв?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить резерв?'; uk = 'Видалити резерв?'");
	КонецЕсли;
	Если (Не Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;
	
	// Причина отказа.
	Если ПометкаУдаления Тогда
	Иначе
		Объект.ПричинаОтказа = ОткрытьФормуМодально("Справочник.ПричиныОтказов.Форма.ФормаВыбораРабочегоСтола", , ЭтаФорма);
		Если Не ЗначениеЗаполнено(Объект.ПричинаОтказа) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	// Удаление.
	Отказ = Ложь; Копия = Объект; УдалитьОбъектНаСервереБезКонтекста(Копия, ОбъектСтолы, Отказ);
	
	Если Не Отказ Тогда
		КопироватьДанныеФормы(Копия, Объект);
		ОбъектОчистить(Неопределено);
	КонецЕсли;

	Если Не Отказ Тогда
		УстановитьОбновление();
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'Пометка удаления снята'; uk = 'Позначка видалення знята'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Пометка удаления установлена'; uk = 'Позначка видалення встановлена'");
		КонецЕсли;
		ПоказатьОповещениеПользователя(
			ТекстСообщения,
			ПолучитьНавигационнуюСсылку(Ссылка),
			Ссылка,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

КонецПроцедуры // УдалитьОбъект()

&НаКлиенте
Процедура ОчиститьОбъект()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПрочитатьОбъект(Неопределено);
	КонецЕсли;

	Объект.Дата = Неопределено;
	Объект.Ресторан = Ресторан;
	Объект.КонтрагентПредставление = Неопределено;
	Объект.КоличествоКлиентов = 2;
	Объект.ТелефонПредставление = Неопределено;
	Объект.ТелефонПоиск = Неопределено;
	Объект.Стол = Неопределено;
	Объект.Комментарий = Неопределено;
	
	ОбъектСтолы.Очистить();
	
	// Настройка формы.
	УстановитьПредставлениеСтоловОбъекта();
	
КонецПроцедуры // ПрочитатьОбъект()

&НаСервереБезКонтекста
Процедура ПрочитатьОбъектНаСервереБезКонтекста(Идентификатор, Объект, Столы)
	
	Если ПустаяСтрока(Идентификатор) Тогда
		ТекущийОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	Иначе
		ТекущийОбъект = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)).ПолучитьОбъект();
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ТекущийОбъект, Объект);
	
	// Столы.
	Столы.ЗагрузитьЗначения(ТекущийОбъект.Столы.ВыгрузитьКолонку("Стол"));
	Если ЗначениеЗаполнено(ТекущийОбъект.Стол) И (Столы.НайтиПоЗначению(ТекущийОбъект.Стол) = Неопределено) Тогда
		Столы.Добавить(ТекущийОбъект.Стол);
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьОбъектНаСервереБезКонтекста()

&НаСервереБезКонтекста
Процедура УдалитьОбъектНаСервереБезКонтекста(Объект, Столы, Отказ)
	
	ПометкаУдаления = Объект.ПометкаУдаления;
	
	ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ЗаказПокупателя"));
	
	Если ТекущийОбъект.Модифицированность() Тогда
		
		Если ТекущийОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ТекущийОбъект.ПометкаУдаления = Не ТекущийОбъект.ПометкаУдаления;
		
		Попытка
			ТекущийОбъект.Записать(РежимЗаписи);
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
	Иначе
		Попытка
			ТекущийОбъект.УстановитьПометкуУдаления(Не ТекущийОбъект.ПометкаУдаления);
		Исключение
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
		
	Если Не Отказ Тогда
		ТекущийОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
		ЗначениеВДанныеФормы(ТекущийОбъект, Объект);
	КонецЕсли;
	
	// Столы.
	Если Не Отказ Тогда
		Столы.Очистить();
	КонецЕсли;
	
	Если Не Отказ Тогда
	Иначе
		Если ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось восстановить документ'; uk = 'Не вдалося відновити документ'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось удалить документ'; uk = 'Не вдалося видалити документ'");
		КонецЕсли;
		__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , "КонтрагентПредставление", "Объект");
	КонецЕсли;

КонецПроцедуры // УдалитьОбъектНаСервереБезКонтекста()


&НаКлиенте
Процедура ОбъектВыбрать(Команда)
	
	СписокВыбора = ОбъектВыборСписокВыбора;
	
	ЭлементСпискаВыбора = ВыбратьИзМеню(СписокВыбора);
	
	Если (ЭлементСпискаВыбора = Неопределено) Тогда
	Иначе
		
		Действие = НРег(ЭлементСпискаВыбора.Значение);
		
		Если (Действие = "удалить") Тогда
			ОбъектУдалить(Команда);
		ИначеЕсли (Действие = "провести") Тогда
			ОбъектПровести(Команда);
		Иначе
			ОбъектЗаписать(Команда);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбъектВыбрать()

&НаКлиенте
Процедура ОбъектЗаписать(Команда)
	
	ИзменитьОбъект(Истина);
	
КонецПроцедуры // ОбъектЗаписать()

&НаКлиенте
Процедура ОбъектИзменить(Команда)
	
	ИзменитьОбъект(Ложь);
	
КонецПроцедуры // Изменить()

&НаКлиенте
Процедура ОбъектОчистить(Команда)
	
	// Режим назначения списка.
	Если РежимНазначенияСписка Тогда
		Переход(Неопределено);
		Возврат;
	КонецЕсли;
	
	
	// Столы и объект.
	Если РежимНазначения Тогда
		
		ОбъектСтолы.Очистить();
		Для Каждого ЭлеменСтолов Из Объект.Столы Цикл
			ОбъектСтолы.Добавить(ЭлеменСтолов.Стол);
		КонецЦикла;
		
	Иначе
		ОчиститьОбъект();
	КонецЕсли;
	
	// Настройка формы.
	Если РежимНазначения Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			УстановитьРежимОбъекта("Запись");
		Иначе
			УстановитьРежимОбъекта("Создание");
		КонецЕсли;
		УстановитьПредставлениеСтоловОбъекта();
		УстановитьОбновление(Ложь, Истина);
		
	Иначе
		УстановитьРежимОбъекта("Создание");
	КонецЕсли;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОбъектПодтвердить(Команда)
	
	// Режим назначения списка.
	Если РежимНазначенияСписка Тогда
		
		ТекущиеДанные = ДанныеРежимаНазначенияСписка.Данные.Список.НайтиПоИдентификатору(ДанныеРежимаНазначенияСписка.ТекущаяСтрока);
		
		Объект.Дата = УпрощенныеДатаПериодКлиентСервер.ПолучитьМоментВремени(Период);
		Объект.Ресторан = Ресторан;
		Объект.СтолПредставление = СтрЗаменить(ОбъектСтолы, ";", ",");
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект);
		
		ТекущиеДанные.Столы = Новый СписокЗначений;
		ТекущиеДанные.Столы.ЗагрузитьЗначения(ОбъектСтолы.ВыгрузитьЗначения());
		ТекущиеДанные.Изменение = Истина;
		
		УстановитьСостояниеДействияОбъекта(ТекущиеДанные);
		
		Переход(Неопределено);
		Возврат;
	КонецЕсли;
	
	
	// Столы.
	Объект.Столы.Очистить();
	Для Каждого ЭлеменСтолов Из ОбъектСтолы Цикл
		Объект.Столы.Добавить().Стол = ЭлеменСтолов.Значение;
	КонецЦикла;
	Если Объект.Столы.Количество() Тогда
		Объект.Стол = Объект.Столы[0].Стол;
	Иначе
		Объект.Стол = Неопределено;
	КонецЕсли;
	
	// Настройка формы.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьРежимОбъекта("Запись");
	Иначе
		УстановитьРежимОбъекта("Создание");
	КонецЕсли;
	УстановитьПредставлениеСтоловОбъекта();
	УстановитьОбновление(Ложь, Истина);

КонецПроцедуры // ОбъектПодтвердить()

&НаКлиенте
Процедура ОбъектПровести(Команда)
	
	Объект.Распечатан = Истина;
	
	ИзменитьОбъект(Истина);
	
КонецПроцедуры // ОбъектПровести()

&НаКлиенте
Процедура ОбъектСоздать(Команда)
	
	ИзменитьОбъект(Истина);
	
КонецПроцедуры // Создать()

&НаКлиенте
Процедура ОбъектУдалить(Команда)
	
	УдалитьОбъект();
	
КонецПроцедуры // ОбъектУдалить()


&НаКлиенте
Процедура ОбъектКонтрагентПредставлениеПриИзменении(Элемент)
	
	// Автокорректировка наименования.
	УправлениеКонтрагентамиКлиентСервер.НаименованиеПриИзменении(Объект.КонтрагентПредставление, ОбъектАвтокорректировкаНаименованийКонтрагентов);
	
КонецПроцедуры // ОбъектКонтрагентПредставлениеПриИзменении()

&НаКлиенте
Процедура ОбъектКоличествоКлиентовПриИзменении(Элемент)
	
	Объект.КоличествоКлиентов = Макс(Объект.КоличествоКлиентов, 1);
	
КонецПроцедуры // ОбъектКоличествоКлиентовПриИзменении()

&НаКлиенте
Процедура ОбъектТелефонПредставлениеПриИзменении(Элемент)
	
	СтруктураТелефона = УправлениеКонтрагентамиКлиентСервер.ПолучитьПустуюСтруктуруТелефона();
	УправлениеКонтрагентамиКлиентСервер.РазложитьТелефонПоПолям(Объект.ТелефонПредставление, СтруктураТелефона);
	
	Объект.ТелефонПредставление = СтруктураТелефона.Представление;
	Объект.ТелефонПоиск = СтруктураТелефона.Поиск;
	
	Если ПустаяСтрока(Объект.ТелефонПредставление) Тогда
		Объект.ТелефонПредставление = Объект.ТелефонДополнительныйПредставление;
		Объект.ТелефонПоиск = Объект.ТелефонДополнительныйПоиск;
		Объект.ТелефонДополнительныйПредставление = Неопределено;
		Объект.ТелефонДополнительныйПоиск = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОбъектТелефонПредставлениеПриИзменении()

&НаКлиенте
Процедура ОбъектСтолПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	Перем Параметры;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не РежимНазначения Тогда
		Если СхемаДоступна Тогда
			
			РежимНазначения = Истина;
			
			// Настройка формы.
			УстановитьРежимОбъекта("Подтверждение");
			УстановитьПредставлениеСтоловОбъекта();
			УстановитьОбновление(Ложь, Истина);
			
		Иначе
			
			Параметры = Новый Структура;
			Параметры.Вставить("МножественныйВыбор", Истина);
			Если (ОбъектСтолы.Количество() = 1) Тогда
				Параметры.Вставить("ТекущаяСтрока", ОбъектСтолы[0].Значение);
			ИначеЕсли (ОбъектСтолы.Количество() > 1) Тогда
				Параметры.Вставить("ВыбранныеЗначения", ОбъектСтолы.ВыгрузитьЗначения());
			КонецЕсли;

			ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.Столы.Форма.ФормаВыбораРабочегоСтола", Параметры, Элемент);
			Если (ВыбранноеЗначение = Неопределено) Тогда
				Возврат;
			КонецЕсли;
	
			Если (ТипЗнч(ВыбранноеЗначение) = Тип("Массив")) Тогда
				ОбъектСтолы.ЗагрузитьЗначения(ВыбранноеЗначение);
			Иначе
				ОбъектСтолы.Очистить();
				Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
					ОбъектСтолы.Добавить(ВыбранноеЗначение);
				КонецЕсли;
			КонецЕсли;
			
			// Столы.
			Объект.Столы.Очистить();
			Для Каждого ЭлеменСтолов Из ОбъектСтолы Цикл
				Объект.Столы.Добавить().Стол = ЭлеменСтолов.Значение;
			КонецЦикла;
			Если Объект.Столы.Количество() Тогда
				Объект.Стол = Объект.Столы[0].Стол;
			Иначе
				Объект.Стол = Неопределено;
			КонецЕсли;
			
			// Настройка формы.
			УстановитьПредставлениеСтоловОбъекта();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбъектСтолНажатие()
	
