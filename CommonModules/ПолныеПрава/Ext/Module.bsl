
// Процедура устанавливает параметры сеанса.
// 
Процедура УстановитьПараметрыСеанса() Экспорт
	
	УстановитьИзменяемыеПараметрыСеансаПользователя();
	
КонецПроцедуры // УстановитьПараметрыСеанса()

// Процедура устанавливает параметры сеанса, которые зависят от данных в ИБ (пользователь).
// 
Процедура УстановитьИзменяемыеПараметрыСеансаПользователя(ТекущийПользователь = Неопределено, ТекущаяГруппаПользователей = Неопределено, ТекущийРежимРаботы = Неопределено) Экспорт
	
	Если (ТекущийПользователь = Неопределено) Тогда
		ТекущийПользователь = УправлениеПользователями.ОпределитьТекущегоПользователя();	
	КонецЕсли;
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	
	ПараметрыСеанса.ТекущийСотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(ТекущийПользователь);
	
	УстановитьГруппуТекущегоПользователя(ТекущаяГруппаПользователей);
	
	УстановитьРежимРаботыТекущегоПользователя(ТекущийРежимРаботы);
		
	// Настройки и права доступа пользователя.	
	УправлениеПользователями.СоздатьКЭШНастроекПользователя();	

КонецПроцедуры // УстановитьИзменяемыеПараметрыСеансаПользователя()

// Процедура устанавливает параметры сеанса, которые зависят от данных в ИБ (группа пользователей).
// 
Процедура УстановитьГруппуТекущегоПользователя(ТекущаяГруппаПользователей = Неопределено) Экспорт
	
	Если (ТекущаяГруппаПользователей = Неопределено) Тогда		
		ТекущаяГруппаПользователей = УправлениеПользователями.ОпределитьТекущуюГруппуПользователей();			
	КонецЕсли;
	ПараметрыСеанса.ТекущаяГруппаПользователей = ТекущаяГруппаПользователей;  	
	
КонецПроцедуры // УстановитьГруппуТекущегоПользователя()

// Процедура устанавливает параметры сеанса, которые зависят от данных в ИБ (режим работы).
// 
Процедура УстановитьРежимРаботыТекущегоПользователя(ТекущийРежимРаботы = Неопределено) Экспорт
	
	Если (ТекущийРежимРаботы = Неопределено) Тогда
		ТекущийРежимРаботы = УправлениеПользователями.ОпределитьТекущийРежимРаботы();
	КонецЕсли;
	ПараметрыСеанса.ТекущийРежимРаботы = ТекущийРежимРаботы;	
	
	ПараметрыСеанса.ТекущийРесторан = УправлениеПользователями.ОпределитьРесторанПоРежимуРаботы(ТекущийРежимРаботы);
	
	ПараметрыСеанса.МассивРесторанов = Новый ФиксированныйМассив(Справочники.Рестораны.ПолучитьМассивРесторановДоступныхПользователю(ПараметрыСеанса.ТекущийПользователь)); //Костенюк Александр 21.05.2014
	
КонецПроцедуры // УстановитьРежимРаботыТекущегоПользователя()


Функция ЕстьДоступныеПраваДляЗапускаКонфигурации() Экспорт

	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("Пользователь");
	
КонецФункции




// Процедура устанавливает параметры сеанса при выполнении запросов web-сервиса.
// 
Процедура __УстановитьПараметрыСеансаВебСервиса(Сеанс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Устновка параметров.
	ПараметрыСеанса.ТекущаяГруппаПользователей = Сеанс.ГруппаПользователей;
	ПараметрыСеанса.ТекущийКомпьютер = Сеанс.Компьютер;
	ПараметрыСеанса.ТекущийПользователь = Сеанс.Пользователь;
	ПараметрыСеанса.ТекущийРежимРаботы = Сеанс.РежимРаботы;
	ПараметрыСеанса.ТекущийСотрудник = Сеанс.Сотрудник;
	ПараметрыСеанса.ТекущийРесторан = Сеанс.Ресторан; //Костенюк Александр 27.04.2015
	
	// Совместимость - нужен рефакторинг.
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	УправлениеПользователями.СоздатьКЭШНастроекПользователя();	

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // __УстановитьПараметрыСеансаВебСервиса()


// WiseAdvice: Защита конфигураций 2 -------------------------------------------------------

Функция GetUSBKeyComponentLocation()
	
	Перем Постфикс; СистемнаяИнформация = Новый СистемнаяИнформация;
    
    Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) тогда
        Постфикс = "Пользовательская";
    ИначеЕсли (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) тогда
        Постфикс = "Системная";
	Иначе
    	ВызватьИсключение(НСтр("ru = 'Работа программы на платформе Linux не поддерживается.'; uk = 'Робота програми на платформі Linux не підтримується.'"));
	КонецЕсли;
	
	Макет = Метаданные.ОбщиеМакеты.Найти("БиблиотекаКартинок" + Постфикс);
    Если (Макет = Неопределено) тогда
        ВызватьИсключение(НСтр("ru = 'Не найдена компонента защиты.'; uk = 'Не знайдено компонента захисту.'"));
    КонецЕсли;

    Возврат Макет.ПолноеИмя();
	
КонецФункции // GetUSBKeyComponentLocation()

// WiseAdvice: Защита конфигураций 2 -------------------------------------------------------

