#Если Клиент Тогда
	
// Процедура инициализация модуля рабочего места.
//
Процедура Инициализация() Экспорт
	
	// Проверка режима.
	Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Создание формы.
	Если (Форма = Неопределено) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
		
КонецПроцедуры // Инициализация()

// Процедура открытия формы рабочего места.
//
Процедура Открыть() Экспорт
	
	// Открытие формы.
	ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		
КонецПроцедуры // Открыть()

Функция ВыборОрганизации(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяОрганизации ГДЕ НЕ ПометкаУдаления");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Ссылка");
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите организацию';uk='Виберіть організацію'") , ТаблицаЗначений, "Картинка,Наименование") И (Не Значение = СтрокаТаблицы.Ссылка) Тогда
		Значение = СтрокаТаблицы.Ссылка;
		ТаблицаЗначений = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборКассыККМ(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, Владелец КАК Родитель, ЛОЖЬ КАК ЭтоГруппа, Представление КАК Наименование ИЗ ВременнаяКассыККМ КАК КассыККМ ГДЕ НЕ ПометкаУдаления
						  |ОБЪЕДИНИТЬ ВСЕ
						  |ВЫБРАТЬ Ссылка, NULL, ИСТИНА КАК ЭтоГруппа, Представление КАК Наименование ИЗ ВременнаяОрганизации КАК Организации");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
	СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите кассу';uk='Виберіть касу'") , ДеревоЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаДерева.Ссылка;
		ДеревоЗначений = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборСотрудника(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяСотрудникиОрганизаций ГДЕ НЕ ПометкаУдаления");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
	СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ДеревоЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаДерева.Ссылка;
		ДеревоЗначений = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура заполнения табличного поля ККМ.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаККМПрочитать(ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Идентификатор", Метаданные.РегистрыСведений.ТорговоеОборудование.Измерения.Идентификатор.Тип);
		Данные.Колонки.Добавить("КассаККМ", Метаданные.РегистрыСведений.ТорговоеОборудование.Ресурсы.КассаККМ.Тип);
		Данные.Колонки.Добавить("КассаККМПредставление", Новый ОписаниеТипов("Строка"), Метаданные.РегистрыСведений.ТорговоеОборудование.Ресурсы.КассаККМ.Синоним);
		Данные.Колонки.Добавить("Организация", Метаданные.Справочники.СотрудникиОрганизаций.Реквизиты.Организация.Тип);
		Данные.Колонки.Добавить("ОрганизацияПредставление", Новый ОписаниеТипов("Строка"), Метаданные.Справочники.СотрудникиОрганизаций.Реквизиты.Организация.Синоним);
		Данные.Колонки.Добавить("МодельПредставление", Новый ОписаниеТипов("Строка"), Метаданные.РегистрыСведений.ТорговоеОборудование.Ресурсы.Модель.Синоним);
		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("КассаККМПредставление,ОрганизацияПредставление,МодельПредставление");
		ТабличноеПоле.Колонки.Получить("КассаККМПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("ОрганизацияПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("МодельПредставление").Ширина = 400 * 0.20;
		//Костенюк Александр-Старт 06.06.2012
		ТабличноеПоле.Колонки.Получить("КассаККМПредставление").ТекстШапки = НСтр("ru='Касса';uk='Каса'");
		ТабличноеПоле.Колонки.Получить("ОрганизацияПредставление").ТекстШапки = НСтр("ru='Организация';uk='Організація'");
		ТабличноеПоле.Колонки.Получить("МодельПредставление").ТекстШапки = НСтр("ru='Модель';uk='Модель'");
		//Костенюк Александр-Финиш 06.06.2012
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		Возврат;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	// Выборка данных.
	
	// -- Организации.
	ТаблицаОрганизаций = ПолучитьСерверFrontOffice().ПолучитьТаблицуОбъектов(Метаданные.Справочники.Организации);
	
	// -- Кассы ККМ.
	ТаблицаКассККМ = ПолучитьСерверFrontOffice().ПолучитьТаблицуОбъектов(Метаданные.Справочники.КассыККМ);
	
	// -- Торговое оборудование.
	Запрос = Новый Запрос("ВЫБРАТЬ Идентификатор, МодельПредставление, КассаККМ, Организация ИЗ ВременнаяТорговоеОборудование КАК ТорговоеОборудование ГДЕ Компьютер = &Компьютер И Вид = ЗНАЧЕНИЕ(Перечисление.ВидыТорговогоОборудования.ФискальныйРегистратор)");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Компьютер", ПараметрыСеанса.ТекущийКомпьютер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = Данные.Добавить();
		
		СтрокаДанных.Идентификатор = Выборка.Идентификатор;
		СтрокаДанных.КассаККМ = Выборка.КассаККМ;
		СтрокаДанных.КассаККМПредставление = ПолучитьСерверFrontOffice().ПолучитьПредставление(СтрокаДанных.КассаККМ, ТаблицаКассККМ);
		СтрокаДанных.Организация = Выборка.Организация;
		СтрокаДанных.ОрганизацияПредставление = ПолучитьСерверFrontOffice().ПолучитьПредставление(СтрокаДанных.Организация, ТаблицаОрганизаций);
		СтрокаДанных.МодельПредставление = Выборка.МодельПредставление;
		
	КонецЦикла;
	
	// Обновление
	ТабличноеПоле.ОбновитьСтроки();
	
	Выборка = Неопределено;

КонецПроцедуры // ТаблицаККМПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля ККМ.
//
Процедура ТаблицаККМВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
КонецПроцедуры	// ТаблицаККМВывестиСтроку()

// Процедура заполнения табличного поля кассовых дат.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаКассовыхДатПрочитать(ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("КассоваяДата", Метаданные.РегистрыСведений.КассовыеДаты.Измерения.КассоваяДата.Тип);
		Данные.Колонки.Добавить("КассоваяДатаПредставление", Новый ОписаниеТипов("Строка"), Метаданные.РегистрыСведений.КассовыеДаты.Измерения.КассоваяДата.Синоним);
		Данные.Колонки.Добавить("Дата", Метаданные.РегистрыСведений.КассовыеДаты.Ресурсы.Дата.Тип, Метаданные.РегистрыСведений.КассовыеДаты.Ресурсы.Дата.Синоним);
		Данные.Колонки.Добавить("АстрономическаяДата", Метаданные.РегистрыСведений.КассовыеДаты.Ресурсы.АстрономическаяДата.Тип, НСтр("ru='Время последнего изменения';uk='Част останньої зміни'") );
		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("КассоваяДатаПредставление,Дата,АстрономическаяДата");
		ТабличноеПоле.Колонки.Получить("КассоваяДатаПредставление").Ширина = 400 * 0.50;
		ТабличноеПоле.Колонки.Получить("Дата").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("Дата").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("Дата").Формат = "ДЛФ=DD";
		ТабличноеПоле.Колонки.Получить("АстрономическаяДата").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("АстрономическаяДата").Ширина = 400 * 0.35;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		Возврат;
	Иначе
		// -- Текущая позиция (I).
		Если (Не ТабличноеПоле.ТекущаяСтрока() = Неопределено) Тогда
			ТекущаяКассоваяДата = ТабличноеПоле.ТекущиеДанные().КассоваяДата;
		КонецЕсли;
		
		Данные.Очистить();
	КонецЕсли;
	
	// Выборка данных.
	ОсновнаяКассоваяДата = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнаяКассоваяДата);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РегистрКассовыеДаты.КассоваяДата КАК КассоваяДата,
	                      |	РегистрКассовыеДаты.Дата КАК Дата,
	                      |	РегистрКассовыеДаты.АстрономическаяДата КАК АстрономическаяДата,
	                      |	СправочникКассовыеДаты.Представление КАК КассоваяДатаПредставление
	                      |ИЗ
	                      |	РегистрСведений.КассовыеДаты КАК РегистрКассовыеДаты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяКассовыеДаты КАК СправочникКассовыеДаты
	                      |		ПО РегистрКассовыеДаты.КассоваяДата = СправочникКассовыеДаты.Ссылка
	                      |ГДЕ
	                      |	РегистрКассовыеДаты.КассоваяДата = &КассоваяДата");
	Если (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИзменениеДатыКассовыхДат) = Перечисления.ПраваДоступаПользователей.Привилегированные) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрКассовыеДаты.КассоваяДата = &КассоваяДата", "ИСТИНА");					  
	КонецЕсли;
	Запрос.УстановитьПараметр("КассоваяДата", ОсновнаяКассоваяДата);
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = Данные.Добавить();
		
		Для Каждого Колонка Из Данные.Колонки Цикл
			СтрокаДанных[Колонка.Имя] = Выборка[Колонка.Имя];
		КонецЦикла;
		
		// -- Текущая позиция (II).
		Если (СтрокаДанных.КассоваяДата = ТекущаяКассоваяДата) Тогда
			ТекущаяСтрока = СтрокаДанных;
		КонецЕсли;
	КонецЦикла;
	
	// -- Текущая позиция (II).
	Если (Не ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ТекущаяСтрока(ТекущаяСтрока);
	КонецЕсли;
	
	// Обновление.
	Если (ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	
	Выборка = Неопределено;

КонецПроцедуры // ТаблицаКассовыхДатПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля кассовых дат.
//
Процедура ТаблицаКассовыхДатВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// ОформлениеСтроки.
	Если (Не ЗначениеЗаполнено(ДанныеСтроки.АстрономическаяДата)) Или (ТекущаяДата() - ДанныеСтроки.АстрономическаяДата >= 86400) Тогда
		ОформлениеСтроки.Ячейки("КассоваяДатаПредставление").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("Дата").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("АстрономическаяДата").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ОформлениеСтроки.Ячейки("КассоваяДатаПредставление").ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ОформлениеСтроки.Ячейки("Дата").ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ОформлениеСтроки.Ячейки("АстрономическаяДата").ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли;
	
	// АстрономическаяДата.
	ОформлениеСтроки.Ячейки("АстрономическаяДата").ОтображатьТекст = ЗначениеЗаполнено(ДанныеСтроки.АстрономическаяДата);

КонецПроцедуры	// ТаблицаКассовыхДатВывестиСтроку()

// Процедура заполнения табличного поля сводки.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаСводкиПрочитать(Настройки, ТабличноеПоле) Экспорт
		
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ДеревоЗначений;
		Данные.Колонки.Добавить("Группировка", Новый ОписаниеТипов("Строка"), НСтр("ru='Вид оплаты';uk='Вид оплати'") );
		Данные.Колонки.Добавить("Гостей", Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.КоличествоКлиентов.Тип, НСтр("ru='Гостей';uk='Гостей'"));
		Данные.Колонки.Добавить("Продажа", Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип, НСтр("ru='Продажа';uk='Продаж'") );
		Данные.Колонки.Добавить("Возврат", Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип, НСтр("ru='Возврат';uk='Повернення'") );
		//Костенюк Александр-Старт 06.06.2012
		Данные.Колонки.Добавить("Касса", Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип, НСтр("ru='Касса';uk='Каса'"));
		//Костенюк Александр-Финиш 06.06.2012
		
		ТабличноеПоле.Данные(Данные); 
		//ТабличноеПоле.СоздатьКолонки("Группировка,Гостей,Продажа,Возврат");
		//Костенюк Александр-Старт 06.06.2012
		ТабличноеПоле.СоздатьКолонки("Группировка,Гостей,Продажа,Возврат,Касса");
		//Костенюк Александр-Финиш 06.06.2012
		ТабличноеПоле.Колонки.Получить("Группировка").ОтображатьИерархию = Истина;
		ТабличноеПоле.Колонки.Получить("Группировка").Ширина = 400 * 0.55;
		ТабличноеПоле.Колонки.Получить("Гостей").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.КоличествоКлиентов.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=0";
		ТабличноеПоле.Колонки.Получить("Гостей").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("Продажа").Формат = "ЧЦ=" + Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		ТабличноеПоле.Колонки.Получить("Продажа").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("Возврат").Формат = "ЧЦ=" + Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		ТабличноеПоле.Колонки.Получить("Возврат").Ширина = 400 * 0.15;
		//Костенюк Александр-Старт 06.06.2012
		ТабличноеПоле.Колонки.Получить("Касса").Формат = "ЧЦ=" + Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		ТабличноеПоле.Колонки.Получить("Касса").Ширина = 400 * 0.15;
		//Костенюк Александр-Финиш 06.06.2012
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		ТабличноеПоле.Подвал = Истина;
		Возврат;
	Иначе
		Данные.Строки.Очистить();
	КонецЕсли;  	
	
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	
	Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыОплат.Ссылка КАК Группировка,
	|	Обороты.Продажа КАК Продажа,
	|	Обороты.Возврат КАК Возврат,
	//Костенюк Александр-Старт 06.06.12
	|	Обороты.Продажа - Обороты.Возврат КАК Касса,
	//Костенюк Александр-Финиш 06.06.12
	|	Обороты.Гостей КАК Гостей,
	|	ВидыОплат.Родитель
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РозничнаяВыручка.Оплата КАК Группировка,
	|			СУММА(ВЫБОР
	|					КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Возврат
	|						ТОГДА -1 * РозничнаяВыручка.СуммаОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Возврат,
	|			СУММА(ВЫБОР
	|					КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Продажа
	|						ТОГДА РозничнаяВыручка.СуммаОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Продажа,
	|			СУММА(РозничнаяВыручка.Регистратор.Сделка.КоличествоКлиентов) КАК Гостей
	|		ИЗ
	|			РегистрНакопления.РозничнаяВыручка.Обороты(
	|					&НачДата,
	|					&КонДата,
	|					Регистратор,
	|					ИСТИНА
	|						И Организация = &Организация
	|						И Ресторан = &Ресторан
	|						И РозничнаяТочка = &РозничнаяТочка
	|						И Сотрудник = &Сотрудник) КАК РозничнаяВыручка
	|		{ГДЕ
	|			РозничнаяВыручка.Ресторан.*}
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РозничнаяВыручка.Оплата) КАК Обороты
	|		ПО ВидыОплат.Ссылка = Обороты.Группировка
	|ГДЕ
	|	(НЕ ВидыОплат.ЭтоГруппа)
	//Костенюк Александр-Старт 02.07.2012
	|	И НЕ ВидыОплат.ПометкаУдаления
	//Костенюк Александр-Финиш 02.07.2012
	|	И ВидыОплат.ОтражатьВНалоговомУчете
	|
	|УПОРЯДОЧИТЬ ПО
	|	Группировка
	|ИТОГИ
	|	СУММА(Продажа),
	|	СУММА(Возврат),
	//Костенюк Александр-Старт 30.08.2012
	|	СУММА(Касса),
	//Костенюк Александр-Финиш 30.08.2012
	|	СУММА(Гостей)
	|ПО
	|	Группировка ТОЛЬКО ИЕРАРХИЯ";

	Запрос = Новый Запрос;
	Если Настройки.Ответственный.Группировка Тогда
		Запрос.УстановитьПараметр("Сотрудник",Настройки.Ответственный.Отбор);
	Иначе
		Текст = СтрЗаменить(Текст,"И Сотрудник = &Сотрудник","");
	КонецЕсли;
	
	Если Настройки.Организация.Группировка Тогда
		Запрос.УстановитьПараметр("Организация",Настройки.Организация.Отбор);
	Иначе
		Текст = СтрЗаменить(Текст,"И Организация = &Организация","");
	КонецЕсли;
	
	//Если Настройки.КассаККМ.Группировка Тогда
	//	Запрос.Параметры.Вставить("Касса",Настройки.КассаККМ.Отбор);
	//Иначе
	//	Текст = СтрЗаменить(Текст,"И РозничнаяТочка = &РозничнаяТочка","");
	//КонецЕсли;
	
	//Костенюк Александр-Старт 11.10.2012
	Если Настройки.КассаККМ.Группировка Тогда
		Запрос.Параметры.Вставить("РозничнаяТочка", Настройки.КассаККМ.Отбор);
	Иначе
		Текст = СтрЗаменить(Текст,"И РозничнаяТочка = &РозничнаяТочка","");
	КонецЕсли;
	//Костенюк Александр-Финиш 11.10.2012
	
	Если НЕ (ТекущийРесторан.Пустая()
		Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам)) Тогда
		Запрос.Параметры.Вставить("Ресторан", ТекущийРесторан);
	Иначе
		Текст = СтрЗаменить(Текст,"И Ресторан = &Ресторан","");
	КонецЕсли;
	
	Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
		Текст = СтрЗаменить(Текст,"И ВидыОплат.ОтражатьВНалоговомУчете","");
	КонецЕсли; 
	
	Запрос.Текст = Текст;
	Запрос.Параметры.Вставить("Продажа",Перечисления.ВидыРозничнойВыручки.Продажа);
	Запрос.Параметры.Вставить("Возврат",Перечисления.ВидыРозничнойВыручки.Возврат);
	//Запрос.Параметры.Вставить("НачДата",Настройки.Дата);
	//Запрос.Параметры.Вставить("КонДата",КонецДня(Настройки.Дата));
	
	//Костенюк Александр-Старт 13.08.2013
	Если Настройки.ДатаККМ.Группировка Тогда
		НачДата = ?(Настройки.ДатаККМ.Отбор = Неопределено, Настройки.Дата, Настройки.ДатаККМ.Отбор);
		КонДата = ?(Настройки.ДатаККМ.Отбор = Неопределено, КонецДня(Настройки.Дата), КонецДня(Настройки.ДатаККМ.Отбор));
	Иначе
		НачДата = Настройки.Дата;
		КонДата = КонецДня(Настройки.Дата);
	КонецЕсли;
	Запрос.Параметры.Вставить("НачДата", НачДата);
	Запрос.Параметры.Вставить("КонДата", КонДата);
	//Костенюк Александр-Финиш 13.08.2013
	
	тзДанных = Запрос.Выполнить().Выгрузить();
	МассивУдаления = Новый Массив;
	Для каждого Строка Из тзДанных Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Группировка) Тогда
			МассивУдаления.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла;
	Для каждого Строка Из МассивУдаления Цикл
		тзДанных.Удалить(Строка);
	КонецЦикла; 
	тзДанных.Сортировать("Родитель Убыв");
	ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(тзДанных, "Группировка", "Родитель", ТабличноеПоле.Данные());
	
	ТабличноеПоле.Обновить();
	
	тзДанных = Неопределено;

КонецПроцедуры

// Процедура обработчик события ПриВыводеСтроки табличного поля сводки.
//
Процедура ТаблицаСводкиВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	ОформлениеСтроки.Ячейки("Группировка").ГиперСсылка = Истина;
	
КонецПроцедуры	// ТаблицаСводкиВывестиСтроку()

Функция КассаККМОтчетСГашением(Идентификатор) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ОтчетСГашением(Идентификатор, Неопределено);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМОтчетСГашением()

Функция КассаККМОтчетБезГашения(Идентификатор) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ОтчетБезГашения(Идентификатор, Неопределено);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМОтчетБезГашения()

Функция КассаККМОтчетПоНомерам(Идентификатор, НомерНачала, НомерОкончания) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ОтчетПоНомерам(Идентификатор, Неопределено, НомерНачала, НомерОкончания);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМОтчетПоНомерам()

Функция КассаККМОтчетПоАртикулам(Идентификатор) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ОтчетПоАртикулам(Идентификатор, Неопределено);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМОтчетПоАртикулам()

Функция КассаККМОтчетЗаПериодКраткий(Идентификатор, ДатаНачала, ДатаОкончания) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ОтчетЗаПериод(Идентификатор, Неопределено, ДатаНачала, ДатаОкончания, Истина);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМОтчетЗаПериодКраткий()

Функция КассаККМОтчетЗаПериодПолный(Идентификатор, ДатаНачала, ДатаОкончания) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ОтчетЗаПериод(Идентификатор, Неопределено, ДатаНачала, ДатаОкончания, Ложь);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМОтчетЗаПериодПолный()

Функция КассаККМСлужебныйВынос(Идентификатор, Сумма) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ВнестиСумму(Идентификатор, Неопределено, -Сумма);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМСлужебныйВынос()

Функция КассаККМСлужебныйВнос(Идентификатор, Сумма) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ВнестиСумму(Идентификатор, Неопределено, +Сумма);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМСлужебныйВнос()

Функция КассаККМДатаВремя(Идентификатор, Дата = Неопределено, Время = Неопределено) Экспорт

	// Действие.
	//Попытка
		Результат = ПолучитьСерверТО().ДатаВремя(Идентификатор, Неопределено, Дата, Время);
		Если ЗначениеЗаполнено(Результат) Тогда
			Если (Не Дата = Неопределено) Или (Не Время = Неопределено) Тогда
				FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	//Исключение
		//Если (Не Дата = Неопределено) Или (Не Время = Неопределено) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		//КонецЕсли;
		//Возврат Ложь;
	//КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМДатаВремя()

Функция КассаККМПечатьНулевогоЧека(Идентификатор) Экспорт
	
	Перем НомерЧека, НомерСмены;

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().ПечатьЧекаНулевого(Идентификатор, Неопределено, НомерЧека, НомерСмены);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМПечатьНулевогоЧека()

// Функция изменяет дату требуемой кассовой даты.
//
// Параметры:
//	КассоваяДата - СправочникСсылка.КассовыеДаты. Кассовая дата дату которой необходимо изменить;
//	Дата - Дата. Устанавливаемая дата кассовой даты.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция КассоваяДатаИзменить(КассоваяДата, Дата) Экспорт
	
	// Действие.
	Попытка
		Запись = РегистрыСведений.КассовыеДаты.СоздатьМенеджерЗаписи();
		Запись.КассоваяДата = КассоваяДата;
		Запись.Дата = Дата;
		Запись.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), ,,, РегистрыСведений.КассовыеДаты.СоздатьНаборЗаписей(), КассоваяДата);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассоваяДатаИзменить()

// Процедура формирующая сводку по продажам и возвратам за требуемый кассовый день (интерфейсная).
//
// Параметры:
//	Дата - Дата. Кассовый день за который необходимо сформировать сводку.
//
//Процедура КассоваяДатаСформироватьСводку(Дата) Экспорт
//Костенюк Александр-Старт 19.02.2013
Процедура КассоваяДатаСформироватьСводку(Дата, ТекущийККМ) Экспорт
//Костенюк Александр-Финиш 19.02.2013
	
	// Открытие формы.
	ФормаСводка = ЭтотОбъект.ПолучитьФорму("ФормаСводка");
	ФормаСводка.Заголовок = ФормаСводка.Заголовок + " " + Формат(Дата, "ДЛФ=DD");
	ФормаСводка.Дата = Дата;
	ФормаСводка.ТекущийККМ = ТекущийККМ; //Костенюк Александр 19.02.2013
	ФормаСводка.ОткрытьМодально();
	
КонецПроцедуры // КассоваяДатаСформироватьСводку()

//Костенюк Александр-Старт 15.11.2012
// Функция регистрирует кассира на смену
Функция КассаККМРегистрацияКассира(Идентификатор) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().РегистрацияКассира(Идентификатор);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМОтчетПоАртикулам()
//Костенюк Александр-Финиш 15.11.2012

//Костенюк Александр-Старт 15.11.2012
// Функция резрегистрирует кассира на смену
Функция КассаККМРазрегистрацияКассира(Идентификатор) Экспорт

	// Действие.
	Попытка
		Результат = ПолучитьСерверТО().РазрегистрацияКассира(Идентификатор);
		Если ЗначениеЗаполнено(Результат) Тогда
			FrontOffice.ОперацияНеВыполнена(ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат));
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // КассаККМОтчетПоАртикулам()
//Костенюк Александр-Финиш 15.11.2012

//Костенюк Александр-Старт 28.11.2012
// Процедура производит заполнение табличного поля сводки по типам оплат
//
// Параметры:
// Настройки - Тип: Структура. Параметры для подстановки в запрос.
// ТабличноеПоле - Тип: ОбработкаОбъект.TouchТабличноеПоле. Табличное поле сводки.
//
Процедура ТаблицаСводкиПоТипамОплатПрочитать(Настройки, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Оплата", Новый ОписаниеТипов("Строка"), НСтр("ru='Тип оплаты';uk='Тип оплати'"));
		Данные.Колонки.Добавить("Сумма", Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип, НСтр("ru='Сумма';uk='Сума'"));
		Данные.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
		Данные.Колонки.Добавить("ТипОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплатЧекаККМ"));
		Данные.Колонки.Добавить("ТипОплатыСтрока", Новый ОписаниеТипов("Строка"));
		
		ТабличноеПоле.Данные(Данные); 
		ТабличноеПоле.СоздатьКолонки("Оплата,Сумма");
		ТабличноеПоле.Колонки.Получить("Оплата").Ширина = 400 * 0.55;
		ТабличноеПоле.Колонки.Получить("Сумма").Формат = "ЧЦ=" + Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.ЧекККМ.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		ТабличноеПоле.Колонки.Получить("Сумма").Ширина = 400 * 0.15;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		ТабличноеПоле.Подвал = Истина;
		
		Возврат;
		
	Иначе
		Данные.Очистить();
	КонецЕсли;  	
	
	Результат 		= СформироватьЗапросПоТипамОплат(Настройки);
	Выборка 		= Результат.Выбрать();
	ТаблицаСводка 	= Результат.Выгрузить();
	
	// Формирование таблицы
	Для Каждого СтрокаТаблицы Из ТаблицаСводка Цикл
		
		Если (НЕ ЗначениеЗаполнено(СтрокаТаблицы.Родитель)) И (НЕ ЗначениеЗаполнено(СтрокаТаблицы.Оплата)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Группа типов оплат
		Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Оплата) Тогда 
			СтрокаТаблицы.Оплата = СтрокаТаблицы.Родитель;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЭтоГруппа) Тогда
			СтрокаТаблицы.ЭтоГруппа = Истина;
		КонецЕсли;
		
		// Развертка только по типам оплат "Наличные" и "Платежная карта"
		Если НЕ СтрокаТаблицы.ЭтоГруппа Тогда
			Если (СтрокаТаблицы.Оплата.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные)
				И (СтрокаТаблицы.Оплата.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта) Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
				
		НоваяСтрока = ТабличноеПоле.Данные().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Если (СтрокаТаблицы.Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные) И (НЕ СтрокаТаблицы.ЭтоГруппа) Тогда
			НоваяСтрока.Оплата = СтрокаТаблицы.ТипОплатыСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличноеПоле.Обновить();

КонецПроцедуры
//Костенюк Александр-Финиш 28.11.2012

//Костенюк Александр-Старт 28.11.2012
// Процедура обработчик события ПриВыводеСтроки табличного поля сводки.
//
Процедура ТаблицаСводкиПоТипамОплатВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	ОформлениеСтроки.Ячейки("Оплата").ГиперСсылка = Истина;
	
	ЦветФона = Новый Цвет(46, 139, 87); 
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки("Оплата").ЦветФона = ЦветФона;
		ОформлениеСтроки.Ячейки("Сумма").ЦветФона = ЦветФона;
	КонецЕсли;
	
КонецПроцедуры	// ТаблицаСводкиВывестиСтроку()
//Костенюк Александр-Финиш 28.11.2012

//Костенюк Александр-Старт 05.12.2012
// Функция формирует запрос по типам оплат
// 
// Параметры:
// Настройки - Тип: Структура. Настройки, которые подставляются в запрос.
//
// Возвращаемое значение:
// Результат - Тип: РезультатЗапроса. Результат выполнения запроса.
//
Функция СформироватьЗапросПоТипамОплат(Настройки) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РозничнаяВыручка.Оплата КАК Оплата,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Продажа
	               |			ТОГДА РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Продажа,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Возврат
	               |			ТОГДА -1 * РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Возврат,
	               |	РозничнаяВыручка.Регистратор.Сделка.КоличествоКлиентов КАК Гостей,
	               |	РозничнаяВыручка.Оплата.ТипОплаты КАК ТипОплаты,
	               |	""Первая форма"" КАК ТипОплатыСтрока
	               |ПОМЕСТИТЬ ПерваяФорма
	               |ИЗ
	               |	РегистрНакопления.РозничнаяВыручка.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Оплата.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	               |				И Оплата.ОтражатьВБухгалтерскомУчете
	               |				И Оплата.ОтражатьВНалоговомУчете
	               |				И Организация = &Организация
	               |				И Ресторан = &Ресторан
	               |				И РозничнаяТочка = &РозничнаяТочка
	               |				И Сотрудник = &Сотрудник) КАК РозничнаяВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РозничнаяВыручка.Оплата КАК Оплата,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Продажа
	               |			ТОГДА РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Продажа,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Возврат
	               |			ТОГДА -1 * РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Возврат,
	               |	РозничнаяВыручка.Регистратор.Сделка.КоличествоКлиентов КАК Гостей,
	               |	РозничнаяВыручка.Оплата.ТипОплаты КАК ТипОплаты,
	               |	""Вторая форма"" КАК ТипОплатыСтрока
	               |ПОМЕСТИТЬ ВтораяФорма
	               |ИЗ
	               |	РегистрНакопления.РозничнаяВыручка.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Оплата.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	               |				И НЕ Оплата.ОтражатьВБухгалтерскомУчете
	               |				И Оплата.ОтражатьВУправленческомУчете
	               |				И Оплата.ОтражатьВНалоговомУчете
	               |				И Организация = &Организация
	               |				И Ресторан = &Ресторан
	               |				И РозничнаяТочка = &РозничнаяТочка
	               |				И Сотрудник = &Сотрудник) КАК РозничнаяВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РозничнаяВыручка.Оплата КАК Оплата,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Продажа
	               |			ТОГДА РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Продажа,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Возврат
	               |			ТОГДА -1 * РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Возврат,
	               |	РозничнаяВыручка.Регистратор.Сделка.КоличествоКлиентов КАК Гостей,
	               |	РозничнаяВыручка.Оплата.ТипОплаты КАК ТипОплаты,
	               |	""Платежные карты"" КАК ТипОплатыСтрока
	               |ПОМЕСТИТЬ ПлатежнаяКарта
	               |ИЗ
	               |	РегистрНакопления.РозничнаяВыручка.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Оплата.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	               |				И Оплата.ОтражатьВНалоговомУчете
	               |				И Организация = &Организация
	               |				И Ресторан = &Ресторан
	               |				И РозничнаяТочка = &РозничнаяТочка
	               |				И Сотрудник = &Сотрудник) КАК РозничнаяВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РозничнаяВыручка.Оплата КАК Оплата,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Продажа
	               |			ТОГДА РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Продажа,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Возврат
	               |			ТОГДА -1 * РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Возврат,
	               |	РозничнаяВыручка.Регистратор.Сделка.КоличествоКлиентов КАК Гостей,
	               |	РозничнаяВыручка.Оплата.ТипОплаты КАК ТипОплаты,
	               |	""Банковский кредит"" КАК ТипОплатыСтрока
	               |ПОМЕСТИТЬ БанковскийКредит
	               |ИЗ
	               |	РегистрНакопления.РозничнаяВыручка.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Оплата.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	               |				И Оплата.ОтражатьВНалоговомУчете
	               |				И Организация = &Организация
	               |				И Ресторан = &Ресторан
	               |				И РозничнаяТочка = &РозничнаяТочка
	               |				И Сотрудник = &Сотрудник) КАК РозничнаяВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РозничнаяВыручка.Оплата КАК Оплата,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Продажа
	               |			ТОГДА РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Продажа,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Возврат
	               |			ТОГДА -1 * РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Возврат,
	               |	РозничнаяВыручка.Регистратор.Сделка.КоличествоКлиентов КАК Гостей,
	               |	РозничнаяВыручка.Оплата.ТипОплаты КАК ТипОплаты,
	               |	""Чек"" КАК ТипОплатыСтрока
	               |ПОМЕСТИТЬ Чек
	               |ИЗ
	               |	РегистрНакопления.РозничнаяВыручка.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Оплата.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Чек)
	               |				И Оплата.ОтражатьВНалоговомУчете
	               |				И Организация = &Организация
	               |				И Ресторан = &Ресторан
	               |				И РозничнаяТочка = &РозничнаяТочка
	               |				И Сотрудник = &Сотрудник) КАК РозничнаяВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РозничнаяВыручка.Оплата КАК Оплата,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Продажа
	               |			ТОГДА РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Продажа,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Возврат
	               |			ТОГДА -1 * РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Возврат,
	               |	РозничнаяВыручка.Регистратор.Сделка.КоличествоКлиентов КАК Гостей,
	               |	РозничнаяВыручка.Оплата.ТипОплаты КАК ТипОплаты,
	               |	""Безналичный расчет"" КАК ТипОплатыСтрока
	               |ПОМЕСТИТЬ БезналичныйРасчет
	               |ИЗ
	               |	РегистрНакопления.РозничнаяВыручка.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Оплата.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БезналичныйРасчет)
	               |				И Оплата.ОтражатьВНалоговомУчете
	               |				И Организация = &Организация
	               |				И Ресторан = &Ресторан
	               |				И РозничнаяТочка = &РозничнаяТочка
	               |				И Сотрудник = &Сотрудник) КАК РозничнаяВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РозничнаяВыручка.Оплата КАК Оплата,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Продажа
	               |			ТОГДА РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Продажа,
	               |	ВЫБОР
	               |		КОГДА РозничнаяВыручка.ВидРозничнойВыручки = &Возврат
	               |			ТОГДА -1 * РозничнаяВыручка.СуммаОборот
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Возврат,
	               |	РозничнаяВыручка.Регистратор.Сделка.КоличествоКлиентов КАК Гостей,
	               |	РозничнаяВыручка.Оплата.ТипОплаты КАК ТипОплаты,
	               |	""Кредиты"" КАК ТипОплатыСтрока
	               |ПОМЕСТИТЬ Кредиты
	               |ИЗ
	               |	РегистрНакопления.РозничнаяВыручка.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			Оплата.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПустаяСсылка)
	               |				И Оплата.ОтражатьВНалоговомУчете
	               |				И Организация = &Организация
	               |				И Ресторан = &Ресторан
	               |				И РозничнаяТочка = &РозничнаяТочка
	               |				И Сотрудник = &Сотрудник) КАК РозничнаяВыручка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ПерваяФорма.Оплата.Родитель, ЕСТЬNULL(ВтораяФорма.Оплата.Родитель, ЕСТЬNULL(КредитныеКарты.Оплата.Родитель, ЕСТЬNULL(БанковскийКредит.Оплата.Родитель, ЕСТЬNULL(Чек.Оплата.Родитель, ЕСТЬNULL(БезналичныйРасчет.Оплата.Родитель, Кредиты.Оплата.Родитель)))))) КАК Родитель,
	               |	ЕСТЬNULL(ПерваяФорма.Оплата, ЕСТЬNULL(ВтораяФорма.Оплата, ЕСТЬNULL(КредитныеКарты.Оплата, ЕСТЬNULL(БанковскийКредит.Оплата, ЕСТЬNULL(Чек.Оплата, ЕСТЬNULL(БезналичныйРасчет.Оплата, Кредиты.Оплата)))))) КАК Оплата,
	               |	СУММА(ЕСТЬNULL(ПерваяФорма.Продажа - ПерваяФорма.Возврат, ЕСТЬNULL(ВтораяФорма.Продажа - ВтораяФорма.Возврат, ЕСТЬNULL(КредитныеКарты.Продажа - КредитныеКарты.Возврат, ЕСТЬNULL(БанковскийКредит.Продажа - БанковскийКредит.Возврат, ЕСТЬNULL(Чек.Продажа - Чек.Возврат, ЕСТЬNULL(БезналичныйРасчет.Продажа - БезналичныйРасчет.Возврат, Кредиты.Продажа - Кредиты.Возврат))))))) КАК Сумма,
	               |	ЕСТЬNULL(ПерваяФорма.Оплата.ЭтоГруппа, ЕСТЬNULL(ВтораяФорма.Оплата.ЭтоГруппа, ЕСТЬNULL(КредитныеКарты.Оплата.ЭтоГруппа, ЕСТЬNULL(БанковскийКредит.Оплата.ЭтоГруппа, ЕСТЬNULL(Чек.Оплата.ЭтоГруппа, ЕСТЬNULL(БезналичныйРасчет.Оплата.ЭтоГруппа, Кредиты.Оплата.ЭтоГруппа)))))) КАК ЭтоГруппа,
	               |	СУММА(ЕСТЬNULL(ПерваяФорма.Гостей, ЕСТЬNULL(ВтораяФорма.Гостей, ЕСТЬNULL(КредитныеКарты.Гостей, ЕСТЬNULL(БанковскийКредит.Гостей, ЕСТЬNULL(Чек.Гостей, ЕСТЬNULL(БезналичныйРасчет.Гостей, Кредиты.Гостей))))))) КАК Гостей,
	               |	ЕСТЬNULL(ПерваяФорма.ТипОплаты, ЕСТЬNULL(ВтораяФорма.ТипОплаты, ЕСТЬNULL(КредитныеКарты.ТипОплаты, ЕСТЬNULL(БанковскийКредит.ТипОплаты, ЕСТЬNULL(Чек.ТипОплаты, ЕСТЬNULL(БезналичныйРасчет.ТипОплаты, Кредиты.ТипОплаты)))))) КАК ТипОплаты,
	               |	ЕСТЬNULL(ПерваяФорма.ТипОплатыСтрока, ЕСТЬNULL(ВтораяФорма.ТипОплатыСтрока, ЕСТЬNULL(КредитныеКарты.ТипОплатыСтрока, ЕСТЬNULL(БанковскийКредит.ТипОплатыСтрока, ЕСТЬNULL(Чек.ТипОплатыСтрока, ЕСТЬNULL(БезналичныйРасчет.ТипОплатыСтрока, Кредиты.ТипОплатыСтрока)))))) КАК ТипОплатыСтрока
	               |ИЗ
	               |	ПерваяФорма КАК ПерваяФорма
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВтораяФорма КАК ВтораяФорма
	               |		ПО ПерваяФорма.Оплата = ВтораяФорма.Оплата
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ПлатежнаяКарта КАК КредитныеКарты
	               |		ПО ПерваяФорма.Оплата = КредитныеКарты.Оплата
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ПлатежнаяКарта КАК ПлатежнаяКарта
	               |		ПО ПерваяФорма.Оплата = ПлатежнаяКарта.Оплата
	               |		ПОЛНОЕ СОЕДИНЕНИЕ БанковскийКредит КАК БанковскийКредит
	               |		ПО ПерваяФорма.Оплата = БанковскийКредит.Оплата
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Чек КАК Чек
	               |		ПО ПерваяФорма.Оплата = Чек.Оплата
	               |		ПОЛНОЕ СОЕДИНЕНИЕ БезналичныйРасчет КАК БезналичныйРасчет
	               |		ПО ПерваяФорма.Оплата = БезналичныйРасчет.Оплата
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Кредиты КАК Кредиты
	               |		ПО ПерваяФорма.Оплата = Кредиты.Оплата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ПерваяФорма.Оплата.Родитель, ЕСТЬNULL(ВтораяФорма.Оплата.Родитель, ЕСТЬNULL(КредитныеКарты.Оплата.Родитель, ЕСТЬNULL(БанковскийКредит.Оплата.Родитель, ЕСТЬNULL(Чек.Оплата.Родитель, ЕСТЬNULL(БезналичныйРасчет.Оплата.Родитель, Кредиты.Оплата.Родитель)))))),
	               |	ЕСТЬNULL(ПерваяФорма.Оплата, ЕСТЬNULL(ВтораяФорма.Оплата, ЕСТЬNULL(КредитныеКарты.Оплата, ЕСТЬNULL(БанковскийКредит.Оплата, ЕСТЬNULL(Чек.Оплата, ЕСТЬNULL(БезналичныйРасчет.Оплата, Кредиты.Оплата)))))),
	               |	ЕСТЬNULL(ПерваяФорма.Оплата.ЭтоГруппа, ЕСТЬNULL(ВтораяФорма.Оплата.ЭтоГруппа, ЕСТЬNULL(КредитныеКарты.Оплата.ЭтоГруппа, ЕСТЬNULL(БанковскийКредит.Оплата.ЭтоГруппа, ЕСТЬNULL(Чек.Оплата.ЭтоГруппа, ЕСТЬNULL(БезналичныйРасчет.Оплата.ЭтоГруппа, Кредиты.Оплата.ЭтоГруппа)))))),
	               |	ЕСТЬNULL(ПерваяФорма.ТипОплаты, ЕСТЬNULL(ВтораяФорма.ТипОплаты, ЕСТЬNULL(КредитныеКарты.ТипОплаты, ЕСТЬNULL(БанковскийКредит.ТипОплаты, ЕСТЬNULL(Чек.ТипОплаты, ЕСТЬNULL(БезналичныйРасчет.ТипОплаты, Кредиты.ТипОплаты)))))),
	               |	ЕСТЬNULL(ПерваяФорма.ТипОплатыСтрока, ЕСТЬNULL(ВтораяФорма.ТипОплатыСтрока, ЕСТЬNULL(КредитныеКарты.ТипОплатыСтрока, ЕСТЬNULL(БанковскийКредит.ТипОплатыСтрока, ЕСТЬNULL(Чек.ТипОплатыСтрока, ЕСТЬNULL(БезналичныйРасчет.ТипОплатыСтрока, Кредиты.ТипОплатыСтрока))))))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Родитель
	               |ИТОГИ
	               |	СУММА(Сумма),
	               |	СУММА(Гостей)
	               |ПО
	               |	Родитель ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПерваяФорма
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВтораяФорма
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПлатежнаяКарта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ БанковскийКредит
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Чек
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ БезналичныйРасчет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Кредиты";
	
	Запрос = Новый Запрос;
	
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	
	// Установка параметров запроса
	Если Настройки.Организация.Группировка Тогда
		Запрос.УстановитьПараметр("Организация", Настройки.Организация.Отбор);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Организация = &Организация","");
	КонецЕсли;
	
	Если НЕ (ТекущийРесторан.Пустая()
		Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам)) Тогда
		Запрос.Параметры.Вставить("Ресторан", ТекущийРесторан);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Ресторан = &Ресторан","");
	КонецЕсли;
	
	Если Настройки.КассаККМ.Группировка Тогда
		Запрос.Параметры.Вставить("РозничнаяТочка", Настройки.КассаККМ.Отбор);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РозничнаяТочка = &РозничнаяТочка","");
	КонецЕсли;
	
	Если Настройки.Ответственный.Группировка Тогда
		Запрос.УстановитьПараметр("Сотрудник", Настройки.Ответственный.Отбор);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Сотрудник = &Сотрудник","");
	КонецЕсли;
	
	Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Оплата.ОтражатьВНалоговомУчете","");
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Продажа", Перечисления.ВидыРозничнойВыручки.Продажа);
	Запрос.Параметры.Вставить("Возврат", Перечисления.ВидыРозничнойВыручки.Возврат);
	//Запрос.Параметры.Вставить("ДатаНач", Настройки.Дата);
	//Запрос.Параметры.Вставить("ДатаКон", КонецДня(Настройки.Дата));
	
	Если Настройки.ДатаККМ.Группировка Тогда
		ДатаНач = ?(Настройки.ДатаККМ.Отбор = Неопределено, Настройки.Дата, Настройки.ДатаККМ.Отбор);
		ДатаКон = ?(Настройки.ДатаККМ.Отбор = Неопределено, КонецДня(Настройки.Дата), КонецДня(Настройки.ДатаККМ.Отбор));
	Иначе
		ДатаНач = Настройки.Дата;
		ДатаКон = КонецДня(Настройки.Дата);
	КонецЕсли;
	Запрос.Параметры.Вставить("ДатаНач", ДатаНач);
	Запрос.Параметры.Вставить("ДатаКон", ДатаКон);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции
//Костенюк Александр-Финиш 05.12.2012

//Костенюк Александр-Старт 06.12.2012
// Функция формирует запрос по открытым(закрытым) столам
// 
// Параметры:
// Настройки - Тип: Структура. Настройки, которые подставляются в запрос.
// Открытые - Тип: Булево. Признак формирования запроса.
//
// Возвращаемое значение:
// Результат - Тип: РезультатЗапроса. Результат выполнения запроса.
//
Функция СформироватьЗапросПоСтолам(Настройки, Открытые = Истина) Экспорт
	
	Если Открытые Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК Ссылка,
		               |	СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК Сумма,
		               |	СУММА(РеализацияТоваровУслуг.КоличествоКлиентов) КАК Гостей
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |ГДЕ
		               |	НЕ РеализацияТоваровУслуг.Проведен
		               |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК Ссылка,
		               |	СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК Сумма,
		               |	СУММА(РеализацияТоваровУслуг.КоличествоКлиентов) КАК Гостей
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |ГДЕ
		               |	РеализацияТоваровУслуг.Проведен
		               |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		               |	И РеализацияТоваровУслуг.Оплата.ОтражатьВНалоговомУчете
		               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон";
		Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РеализацияТоваровУслуг.Оплата.ОтражатьВНалоговомУчете","");
		КонецЕсли; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Настройки.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Настройки.Дата));
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции
//Костенюк Александр-Финиш 06.12.2012

//Костенюк Александр-Старт 05.12.2012
// Процедура производит печать свокдки
// 
// Параметры:
// Настройки - Тип: Структура. Настройки, которые подставляются в запрос.
// Принтер = Тип: УникальныйИдентификатор. Идентификатор принтера, на который производится печать документа.
// 
Процедура ПечатьСводкиПоТипамОплат(Настройки, Принтер) Экспорт
	
	Результат = СформироватьЗапросПоТипамОплат(Настройки);
	Таблица = Результат.Выгрузить();
	РезультатЗапросаПоСтолам = СформироватьЗапросПоСтолам(Настройки);
	ВыборкаПоСтолам = РезультатЗапросаПоСтолам.Выбрать();
	ВыборкаПоСтолам.Следующий();
	
	Макет = ЭтотОбъект.ПолучитьМакет("СводкаПоТипамОплат");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СводкаПоТипамОплат";
	
	// Печать производится на языке, указанном в настройках пользователя.
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Наличные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.Наличные);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	КвоГостейПерваяФорма 	= 0;
	КвоГостейВтораяФорма 	= 0;
	СуммаПерваяФорма 		= 0;
	СуммаВтораяФорма 		= 0;
	СуммаНалИтог 			= 0;
	Если НайденныеСтроки.Количество() Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			// Первая форма
			Если НайденнаяСтрока.Оплата.ОтражатьВБухгалтерскомУчете Тогда
				КвоГостейПерваяФорма = КвоГостейПерваяФорма + НайденнаяСтрока.Гостей; 
				СуммаПерваяФорма = СуммаПерваяФорма + НайденнаяСтрока.Сумма;
			// Вторая форма
			ИначеЕсли (НайденнаяСтрока.Оплата.ОтражатьВУправленческомУчете) И (НЕ НайденнаяСтрока.Оплата.ОтражатьВБухгалтерскомУчете) Тогда
				КвоГостейВтораяФорма = КвоГостейВтораяФорма + НайденнаяСтрока.Гостей;
				СуммаВтораяФорма = СуммаВтораяФорма + НайденнаяСтрока.Сумма;
			КонецЕсли;
			// Итого наличные
			СуммаНалИтог = СуммаНалИтог + НайденнаяСтрока.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	// Платежные карты
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	КвоГостейПлатежныеКарты = 0;
	СуммаПлатежныеКарты 	= 0;
	Если НайденныеСтроки.Количество() Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КвоГостейПлатежныеКарты = КвоГостейПлатежныеКарты + НайденнаяСтрока.Гостей;
			СуммаПлатежныеКарты 	= СуммаПлатежныеКарты + НайденнаяСтрока.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	// Безналичный расчет
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.БезналичныйРасчет);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	КвоГостейБезналичныйРасчет 	= 0;
	СуммаБезналичныйРасчет 		= 0;
	Если НайденныеСтроки.Количество() Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КвоГостейБезналичныйРасчет 	= КвоГостейБезналичныйРасчет + НайденнаяСтрока.Гостей;
			СуммаБезналичныйРасчет 		= СуммаБезналичныйРасчет + НайденнаяСтрока.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	// Банковский кредит
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	КвоГостейБанковскийКредит 	= 0;
	СуммаБанковскийКредит 		= 0;
	Если НайденныеСтроки.Количество() Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КвоГостейБанковскийКредит 	= КвоГостейБанковскийКредит + НайденнаяСтрока.Гостей;
			СуммаБанковскийКредит 		= СуммаБанковскийКредит + НайденнаяСтрока.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	// Чек
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.Чек);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	КвоГостейЧек 	= 0;
	СуммаЧек 		= 0;
	Если НайденныеСтроки.Количество() Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КвоГостейЧек 	= КвоГостейЧек + НайденнаяСтрока.Гостей;
			СуммаЧек 		= СуммаЧек + НайденнаяСтрока.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	// Кредит
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПустаяСсылка());
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	КвоГостейКредит = 0;
	СуммаКредит 	= 0;
	Если НайденныеСтроки.Количество() Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КвоГостейКредит = КвоГостейКредит + НайденнаяСтрока.Гостей;
			СуммаКредит 	= СуммаКредит + НайденнаяСтрока.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	ВсегоГостей = КвоГостейПерваяФорма + КвоГостейВтораяФорма + КвоГостейПлатежныеКарты + КвоГостейБезналичныйРасчет + КвоГостейБанковскийКредит + КвоГостейЧек + КвоГостейКредит;
	СуммаБезКредитаИтог = СуммаНалИтог + СуммаПлатежныеКарты + СуммаБезналичныйРасчет + СуммаБанковскийКредит + СуммаЧек;
	
	// Шапка
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.КассаККМ 				= Настройки.КассаККМ.Отбор;
	ОбластьМакета.Параметры.Дата 					= ТекущаяДата();
	ОбластьМакета.Параметры.КассоваяДата 			= Формат(Настройки.Дата, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Организация 			= Настройки.Организация.Отбор;
	
	// Наличные
	ОбластьМакета.Параметры.СуммаНалИтог 			= Формат(СуммаНалИтог, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаПерваяФорма 		= Формат(СуммаПерваяФорма, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаВтораяФорма 		= Формат(СуммаВтораяФорма, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаПлатежныеКарты 	= Формат(СуммаПлатежныеКарты, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаБезналичныйРасчет 	= Формат(СуммаБезналичныйРасчет, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаБанковскийКредит 	= Формат(СуммаБанковскийКредит, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаЧек 				= Формат(СуммаЧек, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаБезКредитаИтог 	= Формат(СуммаБезКредитаИтог, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаКредит 			= Формат(СуммаКредит, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.СуммаВсегоИтог 			= Формат(СуммаБезКредитаИтог + СуммаКредит, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.Гостей 					= ВсегоГостей;
	ОбластьМакета.Параметры.СуммаСреднийЧек 		= Формат((СуммаБезКредитаИтог + СуммаКредит)/ВсегоГостей, "ЧЦ=12; ЧДЦ=2");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Незакрытые столы
	ОбластьМакета = Макет.ПолучитьОбласть("Дно");
	ОбластьМакета.Параметры.СуммаНезакрытыеСтолы 	= Формат(ВыборкаПоСтолам.Сумма, "ЧЦ=12; ЧДЦ=2");
	ОбластьМакета.Параметры.ГостейНезакрытыеСтолы 	= ВыборкаПоСтолам.Гостей;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ПолучитьСерверТО().ПечатьДокумента(Принтер, ТабДокумент);
	
КонецПроцедуры
//Костенюк Александр-Финиш 05.12.2012

//Костенюк Александр-Старт 13.08.2013
// Функция ввода даты
// 
// Параметры:
// Настройки - Тип: Структура. Настройки сводки.
// Значение - Тип: Дата. Дата сводки.
//
// Возвращаемое значение:
// Истина, Ложь - Тип: Булево. Признак ввода даты.
//
Функция ВыборДаты(Настройки, Значение = Неопределено) Экспорт
	
	Мин = Настройки.Дата - 86400; // КассоваяДата - 1 день
	Макс = Настройки.Дата;
	
	// Действие.
	Если FrontOffice.ВводДаты(Значение, , ЧастиДаты.Дата, Мин, Макс) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//Костенюк Александр-Финиш 13.08.2013


#КонецЕсли