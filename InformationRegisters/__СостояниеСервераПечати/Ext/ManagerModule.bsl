
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// Перенаправление.
	СтандартнаяОбработка = Ложь;
	ВыбраннаяФорма = "ФормаЗаписи";
	
КонецПроцедуры // ОбработкаПолученияФормы()


Функция ПолучитьАктивностьСервера() Экспорт
	
	// Проверка активности сервера печати.
	Возврат (Не ПолучитьСеансСервера() = Неопределено);
	
КонецФункции // ЗавершитьРаботу()

Функция ПолучитьПриостановленностьСервера() Экспорт
	
	// Анализ.
	Результат = (Не ПолучитьФункциональнуюОпцию("ИспользоватьВебСервис")) Или 
				РегистрыСведений.__НастройкиВебСервиса.Получить().СерверПечатиПриостановить Или
				КонфигурацияИзменена() Или
				ПолучитьБлокировкуСеансов().Установлена;
	
	// Результат.
	Возврат Результат;
	
КонецФункции // ПолучитьПриостановленностьСервера()

Функция ПолучитьВозможностьЗапускаСервера() Экспорт
	
	// Анализ.
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьВебСервис") И 
				(Не КонфигурацияИзменена()) И
				(Не ПолучитьБлокировкуСеансов().Установлена) И
				(Не КоличествоСеансовСервераБолееОдного());
	
	// Результат.
	Возврат Результат;
	
КонецФункции // ПолучитьВозможностьЗапускаСервера()

Функция ПолучитьНеобходимостьПерезапускаСервера() Экспорт
	
	// Анализ.
	Результат = КонфигурацияБазыДанныхИзмененаДинамически() Или
				НеобходимостьЗавершенияСоединения().НеобходимоЗавершить;
	
	// Результат.
	Возврат Результат;
	
КонецФункции // ПолучитьПриостановленностьСервера()

Функция ПолучитьИнтервалПечатиЗаданий() Экспорт
	
	// Получение параметров.
	СерверПечатиПериодИнтервалаПечати = РегистрыСведений.__НастройкиВебСервиса.Получить().СерверПечатиПериодИнтервалаПечати;

	// Расчет.
	Результат = Макс(СерверПечатиПериодИнтервалаПечати - НачалоДня(СерверПечатиПериодИнтервалаПечати), 5);
	
	// Результат.
	Возврат Результат;
	
КонецФункции // ПолучитьИнтервалПечатиЗаданий()

Функция ПолучитьИспользованиеРегламентногоЗадания() Экспорт
	
	Результат = Неопределено;
	
	// Поиск регламентного задания и проверка фонового задания.
	УстановитьПривилегированныйРежим(Истина);
	
	Регламентное = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.СерверПечати);
	
	Результат = Регламентное.Использование;
	Если Результат Тогда
		Попытка
			ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Регламентное.УникальныйИдентификатор);
		Исключение
			Результат = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	// Безовапасный режим.
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;
	
КонецФункции // ПолучитьИспользованиеРегламентногоЗадания()


Функция КоличествоСеансовСервераБолееОдного() Экспорт
	
	// Привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка сеанса сервера печати.
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы(); Количество = 0;
	Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл Если (НРег(Сеанс.Пользователь.Имя) = __СерверПечатиСервер.НастройкаИмяПользователя()) И (Сеанс.ИмяПриложения = "1CV8C") Тогда Количество = Количество + 1; КонецЕсли; КонецЦикла;
	
	// Безовапасный режим.
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Булево(Макс(Количество - 1, 0));
	
КонецФункции // КоличествоСеансовСервераБолееОдного()


Функция ПолучитьСеансСервера() Экспорт
	
	Результат = Неопределено;
	
	// Привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка сеанса сервера печати.
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл Если (НРег(Сеанс.Пользователь.Имя) = __СерверПечатиСервер.НастройкаИмяПользователя()) И (Сеанс.ИмяПриложения = "1CV8C") Тогда Результат = Сеанс; Прервать; КонецЕсли; КонецЦикла;
	
	// Безовапасный режим.
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // ПолучитьСеансСервера()


Процедура УстановитьСостояниеНачалаРаботы(АвтоматическийРежим = Неопределено) Экспорт 

	// Начало работы.
	Запись = РегистрыСведений.__СостояниеСервераПечати.СоздатьМенеджерЗаписи();
	Запись.АвтоматическийРежим = АвтоматическийРежим;
	Запись.ДатаНачалаПериода = Неопределено;
	Запись.ДатаОкончанияПериода = Неопределено;
	Запись.КоличествоВыполненныхЗаданий = Неопределено;
	Попытка
		Запись.Записать();
	Исключение КонецПопытки; // Не критическая ошибка.
	
	// Признак приостановленности.
	Запись = РегистрыСведений.__НастройкиВебСервиса.СоздатьМенеджерЗаписи();
	Попытка
		Запись.Прочитать();
		Если Запись.СерверПечатиПриостановить Тогда
			Запись.СерверПечатиПриостановить = Ложь;
			Запись.Записать();
		КонецЕсли;
	Исключение КонецПопытки; // Не критическая ошибка.
	
КонецПроцедуры // УстановитьСостояниеНачалаРаботы()

Процедура УстановитьСостояниеПродолженияРаботы() Экспорт 
	
	// Продолжение работы.
	Запись = РегистрыСведений.__СостояниеСервераПечати.СоздатьМенеджерЗаписи();
	Попытка
		Запись.Прочитать();
		Запись.Записать();
	Исключение КонецПопытки; // Не критическая ошибка.
	
КонецПроцедуры // УстановитьСостояниеПродолженияРаботы()

Процедура УстановитьСостояниеЗавершенияРаботы() Экспорт 
	
	// Завершение работы.
	Запись = РегистрыСведений.__СостояниеСервераПечати.СоздатьМенеджерЗаписи();
	Попытка
		Запись.Прочитать();
		Запись.Записать();
	Исключение КонецПопытки; // Не критическая ошибка.
	
	// Признак приостановленности.
	Запись = РегистрыСведений.__НастройкиВебСервиса.СоздатьМенеджерЗаписи();
	Попытка
		Запись.Прочитать();
		Если Не Запись.СерверПечатиПриостановить Тогда
			Запись.СерверПечатиПриостановить = Истина;
			Запись.Записать();
		КонецЕсли;
	Исключение КонецПопытки; // Не критическая ошибка.
	
КонецПроцедуры // УстановитьСостояниеЗавершенияРаботы()




