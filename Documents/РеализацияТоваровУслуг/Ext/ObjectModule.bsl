Перем мВестиУчетСебестоимости Экспорт; // Учет себестоимости.
Перем мСтруктураДокументОригинал; // Хранит реквизиты документа до изменения.
Перем мТекущаяДата; // Используется при подготовке реквизитов документа, обеспечивая синхронность даты.
Перем мЗаголовок; // Заголовок служебных сообщений.
Перем мКонтрагент, мКонтактнаяИнформация, мСобытие, мРабочиеЦентры, мНастройкиПроизводства; // Связанные объекты.
Перем мНоменклатурныеГруппы, мНоменклатурныеГруппыПроизводства; // Состав номенклатурных групп.
Перем мПроизводственныеГруппы, мПроизводственныеГруппыПроизводства; // Состав производственных групп производства.
Перем мВалютаРегламентированногоУчета Экспорт; // Валюта.
Перем мТекущаяНоменклатура Экспорт; // Хранит текущую номенклатуру - для проверки реальности изменения номенклатуры.
Перем мМожноМенятьСостояниеНоменклатурыВДокументе Экспорт; // Признак доступности колонок распечатаноости и выполненности для редактирования.

#Если Клиент Тогда
	
	// Функция формирует табличный документ с требуемой печатной формой документа.
	//
	// Возвращаемое значение:
	//  ТабличныйДокумент. Печатная форма документа.
	//
	Функция ПечатьДокумента(FrontOfficeРежим = Ложь, ОтложеннаяПечатьДиспетчер = Неопределено)
		
		СписокСтрок = Новый СписокЗначений;
		
		Если FrontOfficeРежим Тогда
			ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.Принтеры);
			Если (ПринтерПечати = Неопределено) Тогда
				Возврат Неопределено;
			КонецЕсли;		
		КонецЕсли;
		
		УчитыватьНДС = Ложь;	
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Артикул";
			ТекстКодАртикул = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		Иначе
			ВыводитьКоды    = Ложь;
			Колонка         = "";
			ТекстКодАртикул = "Код";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.НомерСокращенный,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Сделка,
		|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
		|	РеализацияТоваровУслуг.Ресторан,
		|	РеализацияТоваровУслуг.Ресторан КАК Поставщик,
		|	РеализацияТоваровУслуг.Сотрудник КАК Отпустил,
		|	РеализацияТоваровУслуг.АдресДоставкиДом,
		|	РеализацияТоваровУслуг.АдресДоставкиПредставление КАК АдресДоставки,
		|	РеализацияТоваровУслуг.АдресДоставкиКомментарий КАК АдресДоставкиКомментарий,
		|	РеализацияТоваровУслуг.АдресДоставкиУлица,
		|	РеализацияТоваровУслуг.ТелефонПредставление КАК Телефоны,
		|	РеализацияТоваровУслуг.ТелефонДополнительныйПредставление КАК ТелефоныДоп,
		|	РеализацияТоваровУслуг.Комментарий,
		|	РеализацияТоваровУслуг.СуммаДокумента,
		|	РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	РеализацияТоваровУслуг.ТребуемаяДатаОкончанияПериода КАК ТребуемаяДатаОкончанияПериода,
		|	РеализацияТоваровУслуг.ФиксированнаяТребуемаяДатаОкончанияПериода КАК ФиксированнаяТребуемаяДатаОкончанияПериода,
		|	НакладнаяНаДоставку.Сотрудник КАК Экспедитор
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			НакладнаяНаДоставкуДокументыОснования.Сотрудник КАК Сотрудник
		|		ИЗ
		|			Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
		|		ГДЕ
		|			НакладнаяНаДоставкуДокументыОснования.ДокументОснование = &ТекущийДокумент
		|		
		|		УПОРЯДОЧИТЬ ПО
		|			НакладнаяНаДоставкуДокументыОснования.Ссылка УБЫВ) КАК НакладнаяНаДоставку
		|		ПО (ИСТИНА)
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Если Не Модуль = Перечисления.МодулиИПодсистемы.Доставка Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НакладнаяНаДоставкуДокументыОснования.ДокументОснование = &ТекущийДокумент", "ЛОЖЬ");
		КонецЕсли;
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		//Запрос.Текст = 
		//
		//
		//"ВЫБРАТЬ
		//|	ВложенныйЗапросПоТоварам.НомерТЧ КАК НомерТЧ,
		//|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		//|	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
		//|	ВложенныйЗапросПоТоварам.Номенклатура,
		//|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		//|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		//|	ВложенныйЗапросПоТоварам.Количество,
		//|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
		//|	ВложенныйЗапросПоТоварам.Комментарий КАК Комментарий,
		//|	ВложенныйЗапросПоТоварам.ДатаНачалаПериода КАК ДатаНачалаПериода,
		//|	ВложенныйЗапросПоТоварам.Цена,
		//|	ВложенныйЗапросПоТоварам.Сумма,
		//|	ВложенныйЗапросПоТоварам.СуммаБезСкидок,
		//|	ВложенныйЗапросПоТоварам.СуммаНаценки,
		//|	ВложенныйЗапросПоТоварам.СуммаСкидки,
		//|	ВложенныйЗапросПоТоварам.СуммаНДС,
		//|	ВложенныйЗапросПоТоварам.Владелец КАК Владелец,
		//|	ВложенныйЗапросПоТоварам.Идентификатор КАК Идентификатор
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		1 КАК НомерТЧ,
		//|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
		//|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
		//|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//|		РеализацияТоваровУслуг.Цена КАК Цена,
		//|		РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		//|		РеализацияТоваровУслуг.Комментарий КАК Комментарий,
		//|		РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
		//|		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
		//|		СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
		//|		СУММА(РеализацияТоваровУслуг.СуммаБезСкидок) КАК СуммаБезСкидок,
		//|		СУММА(РеализацияТоваровУслуг.СуммаНаценки) КАК СуммаНаценки,
		//|		СУММА(РеализацияТоваровУслуг.СуммаСкидки) КАК СуммаСкидки,
		//|		СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
		//|		РеализацияТоваровУслуг.Владелец КАК Владелец,
		//|		РеализацияТоваровУслуг.Идентификатор КАК Идентификатор
		//|	ИЗ
		//|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		//|	ГДЕ
		//|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		РеализацияТоваровУслуг.ДатаНачалаПериода,
		//|		РеализацияТоваровУслуг.Номенклатура,
		//|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
		//|		РеализацияТоваровУслуг.Цена,
		//|		РеализацияТоваровУслуг.СтавкаНДС,
		//|		РеализацияТоваровУслуг.Комментарий,
		//|		РеализацияТоваровУслуг.Владелец,
		//|		РеализацияТоваровУслуг.Идентификатор) КАК ВложенныйЗапросПоТоварам
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	2,
		//|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		//|	РеализацияТоваровУслуг.НомерСтроки,
		//|	РеализацияТоваровУслуг.Номенклатура,
		//|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		//|	РеализацияТоваровУслуг.Номенклатура.Код,
		//|	РеализацияТоваровУслуг.Количество,
		//|	NULL,
		//|	РеализацияТоваровУслуг.Комментарий,
		//|	РеализацияТоваровУслуг.ДатаНачалаПериода,
		//|	РеализацияТоваровУслуг.Цена,
		//|	РеализацияТоваровУслуг.Сумма,
		//|	РеализацияТоваровУслуг.СуммаБезСкидок,
		//|	РеализацияТоваровУслуг.СуммаНаценки,
		//|	РеализацияТоваровУслуг.СуммаСкидки,
		//|	РеализацияТоваровУслуг.СуммаНДС,
		//|	РеализацияТоваровУслуг.Владелец,
		//|	РеализацияТоваровУслуг.Идентификатор
		//|ИЗ
		//|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		//|ГДЕ
		//|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	НомерТЧ,
		//|	НомерСтрокиТЧ
		//|АВТОУПОРЯДОЧИВАНИЕ";
		
		
		
		// И РеализацияТоваровУслуг.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Товар)
		//|     и ВЫБОР
		//|			КОГДА РеализацияТоваровУслугТовары.Номенклатура.Печатаемый = ИСТИНА
		//|		ТОГДА РеализацияТоваровУслугТовары.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Модификатор)
		//| 		  иначе Ложь
		//|	   КОНЕЦ
		
		//Костенюк Александр-Старт 20.05.2013
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВложенныйЗапросПоТоварам.НомерТЧ КАК НомерТЧ,
		               |	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК КодАртикул,
		               |	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
		               |	ВложенныйЗапросПоТоварам.Номенклатура,
		               |	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		               |	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		               |	ВложенныйЗапросПоТоварам.Количество,
		               |	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
		               |	ВложенныйЗапросПоТоварам.Комментарий КАК Комментарий,
		               |	ВложенныйЗапросПоТоварам.ДатаНачалаПериода КАК ДатаНачалаПериода,
		               |	ВложенныйЗапросПоТоварам.Цена,
		               |	ВложенныйЗапросПоТоварам.Сумма,
		               |	ВложенныйЗапросПоТоварам.СуммаБезСкидок,
		               |	ВложенныйЗапросПоТоварам.СуммаНаценки,
		               |	ВложенныйЗапросПоТоварам.СуммаСкидки,
		               |	ВложенныйЗапросПоТоварам.СуммаНДС,
		               |	ВложенныйЗапросПоТоварам.Владелец КАК Владелец,
		               |	ВложенныйЗапросПоТоварам.Идентификатор КАК Идентификатор
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		1 КАК НомерТЧ,
		               |		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
		               |		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
		               |		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |		РеализацияТоваровУслуг.Цена КАК Цена,
		               |		РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		               |		РеализацияТоваровУслуг.Комментарий КАК Комментарий,
		               |		РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
		               |		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
		               |		СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
		               |		СУММА(РеализацияТоваровУслуг.СуммаБезСкидок) КАК СуммаБезСкидок,
		               |		СУММА(РеализацияТоваровУслуг.СуммаНаценки) КАК СуммаНаценки,
		               |		СУММА(РеализацияТоваровУслуг.СуммаСкидки) КАК СуммаСкидки,
		               |		СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
		               |		РеализацияТоваровУслуг.Владелец КАК Владелец,
		               |		РеализацияТоваровУслуг.Идентификатор КАК Идентификатор
		               |	ИЗ
		               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		               |	ГДЕ
		               |		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		РеализацияТоваровУслуг.ДатаНачалаПериода,
		               |		РеализацияТоваровУслуг.Номенклатура,
		               |		РеализацияТоваровУслуг.ЕдиницаИзмерения,
		               |		РеализацияТоваровУслуг.Цена,
		               |		РеализацияТоваровУслуг.СтавкаНДС,
		               |		РеализацияТоваровУслуг.Комментарий,
		               |		РеализацияТоваровУслуг.Владелец,
		               |		РеализацияТоваровУслуг.Идентификатор) КАК ВложенныйЗапросПоТоварам
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерТЧ,
		               |	НомерСтрокиТЧ
		               |АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВложенныйЗапросПоТоварам.Номенклатура.Код КАК КодАртикул", "ВложенныйЗапросПоТоварам.Номенклатура."+ТекстКодАртикул+" КАК КодАртикул");
		//Костенюк Александр-Финиш 20.05.2013
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
		//Инга 27,03,2012
		//Макет = ПолучитьМакет("Накладная");
		МакетПоУмолчанию = ПолучитьМакет("Накладная");
		Макет = ПолучитьСерверТО().ПечатьПолучитьМакет(ПринтерПечати, "Макет", МакетПоУмолчанию);
		///Инга 27,03,2012
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		// Выводим шапку нкладной
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		
		//Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		//	НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		//	Банк       = БанковскийСчетОрганизации.Банк;
		//	МФО		   = БанковскийСчетОрганизации.Банк.Код;
		//	
		//	СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		//	СведенияОПоставщике.Вставить("Банк",             Банк);
		//	СведенияОПоставщике.Вставить("МФО",              МФО);
		//КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,/,Телефоны,Факсы,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);	
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		//ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "АдресДоставкиПредставление,/,Телефоны,ТелефонДополнительныйПредставление,/,Комментарий",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ?(Шапка.АдресДоставки="","",Шапка.АдресДоставки)+
		?(Шапка.Телефоны="","",Символы.ПС + Шапка.Телефоны)+
		?(Шапка.ТелефоныДоп="","",", " + Шапка.ТелефоныДоп);
		ОбластьМакета.Параметры.РеквизитыПокупателяКомментарий = Шапка.АдресДоставкиКомментарий;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Модуль = Перечисления.МодулиИПодсистемы.Доставка Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Экспедитор");
			ОбластьМакета.Параметры.Заполнить(Шапка);	
			ОбластьМакета.Параметры.ПредставлениеЭкспедитора = " " + Строка(Шапка.Экспедитор);
			ОбластьМакета.Параметры.ДатаНачалаПериода = Формат(Шапка.ДатаНачалаПериода, "ДФ='dd.MM.yyyy HH:mm'");
			ОбластьМакета.Параметры.ТребуемаяДатаОкончанияПериода = Формат(Шапка.ТребуемаяДатаОкончанияПериода, "ДФ='dd.MM.yyyy HH:mm'");
			Если Шапка.ФиксированнаяТребуемаяДатаОкончанияПериода Тогда
				ОбластьМакета.Параметры.ТребуемаяДатаОкончанияПериода = ОбластьМакета.Параметры.ТребуемаяДатаОкончанияПериода + " V";
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		
		СписокДополнительныхПараметров="";
		
		МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;		
		
		ЕстьСкидки = ЗапросТовары.Итог("СуммаСкидки") <> 0;
		ЕстьНаценки = ЗапросТовары.Итог("СуммаНаценки") <> 0;
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		Конецесли;
		
		Если ЕстьСкидки Тогда
			ОбластьШапки  = ОбластьШапки  + "Скидка";
			ОбластьСтроки = ОбластьСтроки + "Скидка";
		КонецЕсли; 
		
		Если ЕстьНаценки Тогда
			ОбластьШапки  = ОбластьШапки  + "Наценка";
			ОбластьСтроки = ОбластьСтроки + "Наценка";
		КонецЕсли; 
		
		// Вывести табличную часть (товары и услуги)
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;                        	
		
		Суффикс = "";
		
		//Если Шапка.УчитыватьНДС Тогда
		//	Если Шапка.СуммаВключаетНДС Тогда
		//		Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		//	Иначе	
		//		Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		//	КонецЕсли;
		//	Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		//КонецЕсли;
		
		ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Чистяков Павел 03.09.2010 14:38:41 
		ОбластьМакетаСтроки			= Макет.ПолучитьОбласть(ОбластьСтроки);
		ОбластьМакетаКомментарий	= Макет.ПолучитьОбласть(ОбластьСтроки+"Комментарий");
		ОбластьМакетаДозаказа		= Макет.ПолучитьОбласть("Дозаказ");
		
		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		ВсегоНаценок    = 0;
		
		ПечДатаНачалаПериода = Неопределено;
		
		//Игорь
		//Проверка на Дереве
		ЭтоДерево = Ложь; 
		
		СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
		ПустойУИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 
		
		Для каждого стр Из ЗапросТовары Цикл
			Если стр.Владелец <> ПустойУИдентификатор тогда
				ЭтоДерево =Истина;		
			КонецЕсли;	
		КонецЦикла;
		
		Если ЭтоДерево Тогда
			
			Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ЗапросТовары, "Идентификатор", "Владелец");
			РаспечататьДеревоПечатьДокумента(ТабДокумент, ОбластьМакета ,Дерево ,ВыводитьКоды ,ОбластьМакетаКомментарий, ОбластьМакетаСтроки, ОбластьМакетаДозаказа ,ПечДатаНачалаПериода,			
			ЕстьСкидки, ЕстьНаценки,  Сумма , СуммаНДС ,ВсегоСкидок ,ВсегоНаценок ,ВсегоБезСкидок, ПустойУИдентификатор);
			
			
		Иначе	
			
			Для каждого ВыборкаСтрокДерева из ЗапросТовары Цикл 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
					Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				
				Если ПечДатаНачалаПериода = Неопределено Тогда
					ПечДатаНачалаПериода = НачалоМинуты(ВыборкаСтрокДерева.ДатаНачалаПериода);
				КонецЕсли;
				
				Если ПечДатаНачалаПериода < ВыборкаСтрокДерева.ДатаНачалаПериода - 60 Тогда
					ТабДокумент.Вывести(ОбластьМакетаДозаказа);
				КонецЕсли;
				
				ПечДатаНачалаПериода = ВыборкаСтрокДерева.ДатаНачалаПериода;
				
				Если ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
					ОбластьМакета = ОбластьМакетаСтроки;
				Иначе
					ОбластьМакета = ОбластьМакетаКомментарий;
				КонецЕсли; 
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
				ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокДерева) + 1;
				ОбластьМакета.Параметры.Товар  =  СокрЛП(ВыборкаСтрокДерева.Товар);
				
				
				// Чистяков Павел 03.09.2010 14:41:54 
				Если НЕ ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
					ОбластьМакета.Параметры.Комментарий = СокрЛП(ВыборкаСтрокДерева.Комментарий);
				КонецЕсли;
				
				Если ВыводитьКоды Тогда
					ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокДерева.КодАртикул;
				КонецЕсли;
				
				// Скидка может быть NULL
				СуммаСкидки		= ВыборкаСтрокДерева.СуммаСкидки;
				СуммаНаценки	= ВыборкаСтрокДерева.СуммаНаценки;
				
				Если ЕстьСкидки Тогда
					ОбластьМакета.Параметры.СуммаСкидки         = СуммаСкидки;			
				КонецЕсли;
				
				Если ЕстьНаценки Тогда
					ОбластьМакета.Параметры.СуммаНаценки        = СуммаНаценки;			
				КонецЕсли;
				
				Если (ЕстьСкидки)ИЛИ(ЕстьНаценки) Тогда
					ОбластьМакета.Параметры.СуммаБезСкидок 		= ВыборкаСтрокДерева.СуммаБезСкидок;		
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
				Сумма    = Сумма    + ВыборкаСтрокДерева.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаСтрокДерева.СуммаНДС;          
				
				ВсегоСкидок    = ВсегоСкидок 	+ СуммаСкидки;
				ВсегоНаценок   = ВсегоНаценок   + СуммаНаценки;
				
				ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаСтрокДерева.СуммаБезСкидок;
				
			КонецЦикла;
			
		КонецЕсли;	
		
		
		ОбластьИтого = "Итого";
		Если ЕстьСкидки Тогда
			ОбластьИтого  = ОбластьИтого + "Скидка";
		КонецЕсли; 
		Если ЕстьНаценки Тогда
			ОбластьИтого  = ОбластьИтого + "Наценка";
		КонецЕсли;	
		
		// Вывести Итого
		ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		Если ЕстьСкидки Тогда
			ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
			ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
		КонецЕсли; 
		Если ЕстьНаценки Тогда
			ОбластьМакета.Параметры.ВсегоНаценок	= ОбщегоНазначения.ФорматСумм(ВсегоНаценок);
		КонецЕсли;	
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если УчитыватьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
				ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;	
		
		// Вывести Сумму прописью
		СуммаВключаетНДС = Истина;
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
		НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить()) + ".";
		
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить(),КодЯзыкаПечать)
		+ ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если FrontOfficeРежим Тогда
			ТабДокумент.ИспользуемоеИмяФайла = Строка(Шапка.Поставщик) + "\" + ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'", КодЯзыкаПечать), КодЯзыкаПечать, Истина, Ложь);
			
			ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
			
			ТабДокумент = Неопределено;
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьДокумента()
	
	Процедура РаспечататьДеревоПечатьДокумента(ТабДокумент, ОбластьМакета, Дерево ,ВыводитьКоды ,ОбластьМакетаКомментарий, ОбластьМакетаСтроки, ОбластьМакетаДозаказа ,ПечДатаНачалаПериода,
		ЕстьСкидки, ЕстьНаценки, Сумма , СуммаНДС ,ВсегоСкидок ,ВсегоНаценок ,ВсегоБезСкидок ,ПустойУИдентификатор, НомерСтр = 0,  СтрОтступа = "" ) 
		
		
		Для каждого ВыборкаСтрокДерева из Дерево.Строки Цикл
			
			Если ВыборкаСтрокДерева.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Условие Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаСтрокДерева.Владелец = ПустойУИдентификатор Тогда
				
				СтрОтступа="";
				
				Если ПечДатаНачалаПериода = Неопределено Тогда
					ПечДатаНачалаПериода = НачалоМинуты(ВыборкаСтрокДерева.ДатаНачалаПериода);
				КонецЕсли;
				
				Если ПечДатаНачалаПериода < ВыборкаСтрокДерева.ДатаНачалаПериода - 60 Тогда
					ТабДокумент.Вывести(ОбластьМакетаДозаказа);
				КонецЕсли;
				
				ПечДатаНачалаПериода = ВыборкаСтрокДерева.ДатаНачалаПериода;
				Если ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
					ОбластьМакета = ОбластьМакетаСтроки;
				Иначе
					ОбластьМакета = ОбластьМакетаКомментарий;
				КонецЕсли; 
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
				НомерСтр = НомерСтр + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтр;// ВыборкаСтрокДерева.НомерСтрокиТЧ; // ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
				ОбластьМакета.Параметры.Товар  = СтрОтступа +  СокрЛП(ВыборкаСтрокДерева.Товар);
				
			Иначе
				
				Если ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
					ОбластьМакета = ОбластьМакетаСтроки;
				Иначе
					ОбластьМакета = ОбластьМакетаКомментарий;
				КонецЕсли; 
				НомерСтр = НомерСтр + 1;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
				ОбластьМакета.Параметры.НомерСтроки = НомерСтр; //ВыборкаСтрокДерева.НомерСтрокиТЧ; // ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
				ОбластьМакета.Параметры.Товар  = СтрОтступа +  СокрЛП(ВыборкаСтрокДерева.Товар);
				
				
			КонецЕсли;
			
			
			//КонецЕсли;
			
			// Чистяков Павел 03.09.2010 14:41:54 
			Если НЕ ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
				ОбластьМакета.Параметры.Комментарий = СокрЛП(ВыборкаСтрокДерева.Комментарий);
			КонецЕсли;
			
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокДерева.КодАртикул;
			КонецЕсли;
			
			// Скидка может быть NULL
			СуммаСкидки		= ВыборкаСтрокДерева.СуммаСкидки;
			СуммаНаценки	= ВыборкаСтрокДерева.СуммаНаценки;
			
			Если ЕстьСкидки Тогда
				ОбластьМакета.Параметры.СуммаСкидки         = СуммаСкидки;			
			КонецЕсли;
			
			Если ЕстьНаценки Тогда
				ОбластьМакета.Параметры.СуммаНаценки        = СуммаНаценки;			
			КонецЕсли;
			
			Если (ЕстьСкидки)ИЛИ(ЕстьНаценки) Тогда
				ОбластьМакета.Параметры.СуммаБезСкидок 		= ВыборкаСтрокДерева.СуммаБезСкидок;		
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Сумма    = Сумма    + ВыборкаСтрокДерева.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокДерева.СуммаНДС;          
			
			ВсегоСкидок    = ВсегоСкидок 	+ СуммаСкидки;
			ВсегоНаценок   = ВсегоНаценок   + СуммаНаценки;
			
			ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаСтрокДерева.СуммаБезСкидок;
			
			Если ВыборкаСтрокДерева.Строки.Количество() > 0 Тогда
				СтрОтступа= СтрОтступа + "     ";
				РаспечататьДеревоПечатьДокумента(ТабДокумент, ОбластьМакета ,ВыборкаСтрокДерева ,ВыводитьКоды ,ОбластьМакетаКомментарий, ОбластьМакетаСтроки, ОбластьМакетаДозаказа ,ПечДатаНачалаПериода,			
				ЕстьСкидки, ЕстьНаценки, Сумма , СуммаНДС ,ВсегоСкидок ,ВсегоНаценок ,ВсегоБезСкидок , ПустойУИдентификатор, НомерСтр ,СтрОтступа);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	//Функция ПечатьПречека(АвтоопределениеПринтера = Ложь, ОтложеннаяПечатьДиспетчер = Неопределено)
	//Костенюк Александр-Старт 21.02.2013
	Функция ПечатьПречекаСтарая(АвтоопределениеПринтера = Ложь, ОтложеннаяПечатьДиспетчер = Неопределено)
	//Костенюк Александр-Финиш 21.02.2013
		
		Если АвтоопределениеПринтера Тогда
			ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.ПринтерыПречеков);
			//Если (ПринтерПечати = Неопределено) Тогда
			//	Возврат ПечатьДокумента(АвтоопределениеПринтера, ОтложеннаяПечатьДиспетчер);
			//КонецЕсли;		
		КонецЕсли;
		
		УчитыватьНДС = Ложь;	
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.НомерСокращенный,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Ресторан,
		|	РеализацияТоваровУслуг.Ресторан КАК Поставщик,
		|	ЕСТЬNULL(Пользователи.Ссылка, РеализацияТоваровУслуг.Сотрудник) КАК Отпустил,
		|	РеализацияТоваровУслуг.Стол,
		|	РеализацияТоваровУслуг.ПолныйНомерСтола КАК ПолныйНомерСтола,
		|	РеализацияТоваровУслуг.КоличествоКлиентов,
		|	РеализацияТоваровУслуг.РучноеУправлениеСкидками,
		|	РеализацияТоваровУслуг.СуммаНаценкиДокумента - РеализацияТоваровУслуг.СуммаСкидкиДокумента КАК СуммаСкидкиНаценкиДокумента,
		|	РеализацияТоваровУслуг.СуммаДокумента,
		|	РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	&ТекущаяДата КАК ДатаРазделенияПериода
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(Пользователи.Ссылка) КАК Ссылка,
		|			Пользователи.Сотрудник КАК Сотрудник
		|		ИЗ
		|			Справочник.Пользователи КАК Пользователи
		|		ГДЕ
		|			(НЕ Пользователи.ПометкаУдаления)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Пользователи.Сотрудник) КАК Пользователи
		|		ПО РеализацияТоваровУслуг.Сотрудник = Пользователи.Сотрудник
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент");
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.ЕдиницаЦены КАК ЕдиницаЦены,
		|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
		|	МАКСИМУМ(РеализацияТоваровУслуг.Цена) КАК Цена,
		|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
		|	РеализацияТоваровУслуг.Комментарий КАК Комментарий,
		|	РеализацияТоваровУслуг.Владелец,
		|	РеализацияТоваровУслуг.Идентификатор,
		|	РеализацияТоваровУслуг.Организация,
		|	СУММА(РеализацияТоваровУслуг.СуммаСоСкидкой) КАК СуммаСоСкидкой
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
		|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		РеализацияТоваровУслуг.ЕдиницаЦены КАК ЕдиницаЦены,
		|		РеализацияТоваровУслуг.Количество КАК Количество,
		|		РеализацияТоваровУслуг.Цена КАК Цена,
		|		РеализацияТоваровУслуг.Сумма КАК Сумма,
		|		РеализацияТоваровУслуг.Комментарий КАК Комментарий,
		|		РеализацияТоваровУслуг.Владелец КАК Владелец,
		|		РеализацияТоваровУслуг.Идентификатор КАК Идентификатор,
		|		РеализацияТоваровУслуг.Организация КАК Организация,
		|		РеализацияТоваровУслуг.НоменклатураНаименованиеПолное КАК Товар,
		|		РеализацияТоваровУслуг.СуммаСоСкидкой КАК СуммаСоСкидкой
		|	ИЗ
		|		(ВЫБРАТЬ
		|			РеализацияТоваровУслугТовары.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|			РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|			РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
		|			РеализацияТоваровУслугТовары.Количество КАК Количество,
		|			РеализацияТоваровУслугТовары.Цена КАК Цена,
		|			РеализацияТоваровУслугТовары.СуммаБезСкидок КАК Сумма,
		|			РеализацияТоваровУслугТовары.Комментарий КАК Комментарий,
		|			РеализацияТоваровУслугТовары.Владелец КАК Владелец,
		|			РеализацияТоваровУслугТовары.Идентификатор КАК Идентификатор,
		|			РеализацияТоваровУслугТовары.Организация КАК Организация,
		|			РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|			РеализацияТоваровУслугТовары.Сумма КАК СуммаСоСкидкой
		|		ИЗ
		|			Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ГДЕ
		|			РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
		|			И (РеализацияТоваровУслугТовары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Модификатор)
		|					ИЛИ РеализацияТоваровУслугТовары.Цена <> 0)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			РеализацияТоваровУслугУслуги.ДатаНачалаПериода,
		|			РеализацияТоваровУслугУслуги.Номенклатура,
		|			NULL,
		|			NULL,
		|			РеализацияТоваровУслугУслуги.Количество,
		|			РеализацияТоваровУслугУслуги.Цена,
		|			РеализацияТоваровУслугУслуги.СуммаБезСкидок,
		|			РеализацияТоваровУслугУслуги.Комментарий,
		|			РеализацияТоваровУслугУслуги.Владелец,
		|			РеализацияТоваровУслугУслуги.Идентификатор,
		|			NULL,
		|			РеализацияТоваровУслугУслуги.Номенклатура.НаименованиеПолное,
		|			РеализацияТоваровУслугУслуги.Сумма
		|		ИЗ
		|			Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|		ГДЕ
		|			РеализацияТоваровУслугУслуги.Ссылка = &ТекущийДокумент) КАК РеализацияТоваровУслуг) КАК РеализацияТоваровУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслуг.Номенклатура,
		|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.ЕдиницаЦены,
		|	РеализацияТоваровУслуг.Комментарий,
		|	РеализацияТоваровУслуг.Владелец,
		|	РеализацияТоваровУслуг.Идентификатор,
		|	РеализацияТоваровУслуг.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура");
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугСкидки.СкидкаНаценка,
		|	РеализацияТоваровУслугСкидки.СкидкаНаценка.Представление КАК Скидка,
		|	РеализацияТоваровУслугСкидки.Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслугСкидки.СкидкаНаценка КАК СкидкаНаценка,
		|		СУММА(РеализацияТоваровУслугСкидки.СуммаНаценки - РеализацияТоваровУслугСкидки.СуммаСкидки) КАК Сумма
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг.Скидки КАК РеализацияТоваровУслугСкидки
		|	ГДЕ
		|		РеализацияТоваровУслугСкидки.Ссылка = &ТекущийДокумент
		|		И РеализацияТоваровУслугСкидки.Актуальность
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслугСкидки.СкидкаНаценка) КАК РеализацияТоваровУслугСкидки
		|ГДЕ
		|	(НЕ РеализацияТоваровУслугСкидки.Сумма = 0)");
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросСкидки = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Пречек";
		//Инга 27,03,2012
		//Макет = ПолучитьМакет("Пречек");
		МакетПоУмолчанию = ПолучитьМакет("Пречек");
		Макет = ПолучитьСерверТО().ПечатьПолучитьМакет(ПринтерПечати, "Макет", МакетПоУмолчанию);
		///Инга 27,03,2012
		// Печать производится на языке, указанном в настройках пользователя.
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		// Заголовок.
		Если НЕ УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeСкрыватьВПречекеСтрокуСНомеромЧека) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Чек';uk='Чек'",КодЯзыкаПечать),КодЯзыкаПечать,Истина);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Поставщик.
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,/,Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Стол");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеСтола = "Стіл № " + Шапка.ПолныйНомерСтола;
		РеквизитыСтола = ""+Формат(Шапка.Дата,"ДФ=dd.MM.yyyy")+", відкрит: "+Формат(Шапка.ДатаНачалаПериода,"ДФ=HH:mm");
		Если Булево(Шапка.КоличествоКлиентов) Тогда
			РеквизитыСтола = РеквизитыСтола + Символы.ПС + "Гостей: " + Шапка.КоличествоКлиентов;
		КонецЕсли;
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + "Офiциант: " + Шапка.Отпустил;
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + "Роздрукував: " + ПараметрыСеанса.ТекущийПользователь;
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + "Друк: " + Формат(Шапка.ДатаРазделенияПериода,"ДФ='dd.MM.yyyy HH:mm'");
		ОбластьМакета.Параметры.РеквизитыСтола = РеквизитыСтола;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Товары и услуги.
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакетаСтроки			= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаКомментарий	= Макет.ПолучитьОбласть("СтрокаКомментарий");
		// Александр Переверзев 12.03.2012 18:55:13 
		ОбластьМакетаОтсутп			= Макет.ПолучитьОбласть("Отступ");

		ИспользоватьОтступПослеНоменклатуры = (УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ПечатьИспользоватьОтступПослеНоменклатуры) = Истина);
		
		//Игорь
		//Проверка на Дереве
		ЭтоДерево = Ложь;  
		
		Если ЗапросТовары.Колонки.Найти("Товар") = Неопределено Тогда
			ЗапросТовары.Колонки.Добавить("Товар", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		КонецЕсли; 
		СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
		УИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 
		
		Для каждого стр Из ЗапросТовары Цикл
			стр.Товар = стр.Номенклатура.НаименованиеПолное;
			Если стр.Владелец <> УИдентификатор тогда
				ЭтоДерево = Истина;		
			КонецЕсли;		
		КонецЦикла;
		
		ТаблицаВременная = новый ТаблицаЗначений;
		ТаблицаВременная = ЗапросТовары.СкопироватьКолонки("Номенклатура,Товар,ЕдиницаИзмерения,Количество,Цена,Сумма,Комментарий,Организация");	
		ТаблицаВременная.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
		ТаблицаВременная.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));  
		ТаблицаВременная.Колонки.Добавить("ЕдиницаЦены", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));  
		
		Для каждого стр Из ЗапросТовары Цикл
			Временная = ТаблицаВременная.Добавить();
			Временная.Товар = стр.Номенклатура.НаименованиеПолное;
			Временная.Номенклатура = стр.Номенклатура;
			Временная.Идентификатор = Строка(стр.Идентификатор); 
			Временная.Владелец = Строка(стр.Владелец); 
			Временная.ЕдиницаИзмерения = стр.ЕдиницаИзмерения; 
			Временная.Количество = стр.Количество;
			Временная.Цена  = стр.Цена;
			Временная.Сумма =  стр.Сумма;
			Временная.Комментарий =  стр.Комментарий;
			Временная.Организация =  стр.Организация;
			Временная.ЕдиницаЦены =  стр.ЕдиницаЦены;
		КонецЦикла;
		
		ГруппироватьНоменклатуру = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeГруппироватьНоменклатуруВПречеке);
		
		Если ЭтоДерево  Тогда
			
			Если ГруппироватьНоменклатуру Тогда
				ДЗ =  ГруппировкаНоменклатуры(ТаблицаВременная, "Дерево");
				РаспечататьДеревоПечатьПречека(ТабДокумент, ОбластьМакета, ДЗ, ОбластьМакетаСтроки, УИдентификатор, "");	
			Иначе 	
				Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ЗапросТовары, "Идентификатор", "Владелец");
				РаспечататьДеревоПечатьПречека(ТабДокумент, ОбластьМакета ,Дерево ,ОбластьМакетаСтроки, УИдентификатор, "");
			КонецЕсли;
			
		Иначе			
			Если ГруппироватьНоменклатуру Тогда 		
				ДЗ =  ГруппировкаНоменклатуры(ТаблицаВременная);		
				Для каждого ВыборкаСтрокДерева из ДЗ Цикл 
					
					Если Не ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(не ВыборкаСтрокДерева.Номенклатура.Печатаемый) Тогда
						Продолжить;
					КонецЕсли;
					
			        // Александр Переверзев 11.03.2012 21:41:17 
					//Если ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
					//	ОбластьМакета = ОбластьМакетаСтроки;
					//Иначе
					//	ОбластьМакета = ОбластьМакетаКомментарий;
					//КонецЕсли; 
					ОбластьМакета = ОбластьМакетаСтроки;
					
					ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
					
					ОбластьМакета.Параметры.Товар = СокрЛП(ОбластьМакета.Параметры.Номенклатура.НаименованиеПолное);
					
			        // Александр Переверзев 11.03.2012 21:41:17 
					//Если Не ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
					//	ОбластьМакета.Параметры.Комментарий = СокрЛП(ОбластьМакета.Параметры.Комментарий);
					//КонецЕсли;
					
					ТабДокумент.Вывести(ОбластьМакета);
					
					// Александр Переверзев 12.03.2012 18:59:33 
					Если ИспользоватьОтступПослеНоменклатуры Тогда
						ТабДокумент.Вывести(ОбластьМакетаОтсутп);		
					КонецЕсли; 
					
				КонецЦикла;
				
			Иначе
				
				Для каждого ВыборкаСтрокДерева из ЗапросТовары Цикл 
					
					Если Не ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(не ВыборкаСтрокДерева.Номенклатура.Печатаемый) Тогда
						Продолжить;
					КонецЕсли;
					
			        // Александр Переверзев 11.03.2012 21:41:17 
					//Если ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
					//	ОбластьМакета = ОбластьМакетаСтроки;
					//Иначе
					//	ОбластьМакета = ОбластьМакетаКомментарий;
					//КонецЕсли; 
					ОбластьМакета = ОбластьМакетаСтроки;
					
					ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);		
					ОбластьМакета.Параметры.Товар = СокрЛП(ОбластьМакета.Параметры.Номенклатура.НаименованиеПолное);
			        // Александр Переверзев 11.03.2012 21:41:17 
					//Если Не ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
					//	ОбластьМакета.Параметры.Комментарий = СокрЛП(ОбластьМакета.Параметры.Комментарий);
					//КонецЕсли;
					ТабДокумент.Вывести(ОбластьМакета);		
					
					// Александр Переверзев 12.03.2012 18:59:33 
					Если ИспользоватьОтступПослеНоменклатуры Тогда
						ТабДокумент.Вывести(ОбластьМакетаОтсутп);		
					КонецЕсли; 
					
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
		
		// Скидки. 
		
		Если Булево(Шапка.СуммаСкидкиНаценкиДокумента) Тогда	
			//  Видимость строки скидок
			Если УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПечатьВЗаказеСтрокуСоСкидками) Тогда	
				// Чистяков Павел 16.02.2012 16:20:30 Сумма без знижок
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСкидки");
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСкидка");
				ОбластьМакета.Параметры.Скидка = "Сумма без знижок";
				ОбластьМакета.Параметры.Сумма = Формат(ЗапросТовары.Итог("Сумма"),"ЧДЦ=2; ЧН=; ЧГ=");
				ТабДокумент.Вывести(ОбластьМакета);			
			КонецЕсли;
			
			// Наепка друг чекиста :)
			Если Шапка.РучноеУправлениеСкидками Или (Не Булево(ЗапросСкидки.Количество())) Тогда
				Если (Шапка.СуммаСкидкиНаценкиДокумента < 0) Тогда
					ВыборкаСтрокСкидки = Новый Структура("СкидкаНаценка,Скидка,Сумма", Справочники.ТипыСкидокНаценок.ПустаяСсылка(), "Скидка", Шапка.СуммаСкидкиНаценкиДокумента);	
				Иначе
					ВыборкаСтрокСкидки = Новый Структура("СкидкаНаценка,Скидка,Сумма", Справочники.ТипыСкидокНаценок.ПустаяСсылка(), "Надбавка", Шапка.СуммаСкидкиНаценкиДокумента);	
				КонецЕсли;
				ЗапросСкидки = Новый Массив;
				ЗапросСкидки.Добавить(ВыборкаСтрокСкидки);
			КонецЕсли;				
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСкидки");
			ТабДокумент.Вывести(ОбластьМакета);	
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСкидка");		
			Для Каждого ВыборкаСтрокСкидки из ЗапросСкидки Цикл 		
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокСкидки);
				Если (ОбластьМакета.Параметры.Сумма > 0) Тогда
					ОбластьМакета.Параметры.Сумма = "+" + Формат(ОбластьМакета.Параметры.Сумма, "ЧДЦ=2; ЧН=; ЧГ=");
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);			
			КонецЦикла;		
		КонецЕсли;
				
		// Игорь 19.10.2011 17:25:58
		//Итог по организациям
		ПечатьПречекаПоОрганизациям = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПечатьПречекаПоОрганизациям);
		Если ПечатьПречекаПоОрганизациям Тогда	
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоПоОрганизациям");
			ЗапросТовары.Свернуть("Организация","СуммаСоСкидкой"); 	
			Для каждого Стр Из ЗапросТовары Цикл
				ОбластьМакета.Параметры.Заполнить(Стр);
				ОбластьМакета.Параметры.Сумма = Стр.СуммаСоСкидкой;
				Если (ОбластьМакета.Параметры.Сумма > 0) Тогда
					ОбластьМакета.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(ОбластьМакета.Параметры.Сумма, мВалютаРегламентированногоУчета);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;					                  
		КонецЕсли;
		
		// Итого.     
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета) + ".";
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Александр Переверзев 03.03.2012 16:33:06 
		Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДисконтнаяКарта");
			ОбластьМакета.Параметры.ДисконтнаяКарта = ДисконтнаяКарта;
			ОбластьМакета.Параметры.ПредставлениеДисконтнойКарты = Строка(ДисконтнаяКарта.ВидДисконтнойКарты) + " " + ДисконтнаяКарта.Наименование;
			ТабДокумент.Вывести(ОбластьМакета);		
		КонецЕсли; 
		
		СтрокаПодвала = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПодвалПречекаЗаказа);
		Если не ПустаяСтрока(СтрокаПодвала) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.ПодвалТекст = СтрокаПодвала;
			ТабДокумент.Вывести(ОбластьМакета);		
		КонецЕсли;
		
		Если АвтоопределениеПринтера Тогда                         
			ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
			ТабДокумент = Неопределено;
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьДокумента()
		
	Функция  ГруппировкаНоменклатуры(ТаблицыТоваров, Признак = Неопределено) 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Товары", ТаблицыТоваров);	
		//Костенюк Александр-Старт 17.12.2014
		Запрос.Текст = "ВЫБРАТЬ
		               |	Товары.Идентификатор КАК Идентификатор,
		               |	Товары.НомерСтроки КАК НомерСтроки,
		               |	Товары.Количество КАК Количество,
		               |	Товары.Номенклатура КАК Номенклатура,
		               |	Товары.Организация КАК Организация,
		               |	Товары.Сумма КАК Сумма,
		               |	Товары.СуммаБезСкидок КАК СуммаБезСкидок,
		               |	Товары.СуммаСкидки КАК СуммаСкидки,
		               |	Товары.СуммаНаценки КАК СуммаНаценки,
		               |	Товары.СуммаСертификата КАК СуммаСертификата,
		               |	Товары.ЕдиницаЦены КАК ЕдиницаЦены,
		               |	Товары.Цена КАК Цена,
		               |	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	Товары.Комментарий КАК Комментарий,
		               |	Товары.Товар КАК Товар,
		               |	Товары.Владелец КАК Владелец
		               |ПОМЕСТИТЬ ТЗ
		               |ИЗ
		               |	&Товары КАК Товары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ТЗ.Идентификатор) КАК Идентификатор,
		               |	ТЗ.Номенклатура КАК Номенклатура,
		               |	ТЗ.Товар КАК Товар,
		               |	МАКСИМУМ(ТЗ.Владелец) КАК Владелец,
		               |	ТЗ.Организация КАК Организация,
		               |	ТЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ТЗ.ЕдиницаЦены КАК ЕдиницаЦены,
		               |	ТЗ.НомерСтроки КАК НомерСтроки,
		               |	СУММА(ТЗ.Количество) КАК Количество,
		               |	МИНИМУМ(ТЗ.Цена) КАК Цена,
		               |	СУММА(ТЗ.СуммаБезСкидок) КАК СуммаБезСкидок,
		               |	СУММА(ТЗ.СуммаСкидки) КАК СуммаСкидки,
		               |	СУММА(ТЗ.СуммаНаценки) КАК СуммаНаценки,
		               |	СУММА(ТЗ.СуммаСертификата) КАК СуммаСертификата,
		               |	СУММА(ТЗ.Сумма) КАК Сумма
		               |ИЗ
		               |	ТЗ КАК ТЗ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТЗ.Номенклатура,
		               |	ТЗ.Организация,
		               |	ТЗ.ЕдиницаЦены,
		               |	ТЗ.ЕдиницаИзмерения,
		               |	ТЗ.Товар,
		               |	ТЗ.НомерСтроки";
		//Костенюк Александр-Финиш 17.12.2014
		Если Признак = "Дерево" Тогда
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();			
			Возврат ОбщегоНазначенияСервер.ВыгрузитьТаблицуЗначенийВДеревоЗначений(РезультатЗапроса,  "Идентификатор",  "Владелец");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТЗ.НомерСтроки", "ИСТИНА");
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		Возврат  РезультатЗапроса;
		
	КонецФункции
	
	Процедура РаспечататьДеревоПечатьПречека(ТабДокумент, ОбластьМакета, Дерево, ОбластьМакетаСтроки, ПустойУИдентификатор, СтрОтступа)
		
		Для каждого ВыборкаСтрокДерева из Дерево.Строки Цикл 
			
			Если ВыборкаСтрокДерева.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Условие Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			//Если НЕ ВыборкаСтрокДерева.Номенклатура.Печатаемый Тогда
			//	Продолжить;
			//КонецЕсли;
			
			ОбластьМакета = ОбластьМакетаСтроки;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
			Если ВыборкаСтрокДерева.Владелец = ПустойУИдентификатор Тогда
				СтрОтступа ="";
			КонецЕсли;
			
			ОбластьМакета.Параметры.Товар =СтрОтступа + СокрЛП(ОбластьМакета.Параметры.Товар);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ВыборкаСтрокДерева.Строки.Количество() > 0 Тогда
				СтрОтступа = СтрОтступа + "     ";
				РаспечататьДеревоПечатьПречека(ТабДокумент, ОбластьМакета ,ВыборкаСтрокДерева ,ОбластьМакетаСтроки, ПустойУИдентификатор, СтрОтступа);			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
#КонецЕсли

	Функция ПечатьВстречки(FrontOfficeРежим)
		
		Перем КомпонентШК,ЭтоПовтор;
		
		ТабДокумент = Неопределено;
		
		// Распределение по рабочим центрам.
		Если Не Булево(РабочиеЦентры().Количество()) Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		
		ИспользоватьНомераСокращенные = (УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПечатьИспользоватьНомераСокращенные") = Истина);
		
		ПечатьВстречекПоПодачам = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПечатьВстречекПоПодачам); //Костенюк Александр 20.02.2013
		
		РабочиеЦентры().Упорядочить();                                                                
		
		ТаблицаРабочихЦентров = РабочиеЦентры().РабочиеЦентры(Истина); // В разрезе операции возврата.
		ПроверкаНаВозврат 	= ТаблицаРабочихЦентров.Найти(Истина, "Возврат");
		ДополнительныеСвойства.Свойство("ПовторВстречки", ЭтоПовтор);
		//Костенюк Александр-Старт 27.04.2012
		ПричинаОтказаДокумент = Неопределено;
		ДополнительныеСвойства.Свойство("ПричинаОтказа", ПричинаОтказаДокумент);
		//Костенюк Александр-Финиш 27.04.2012
		
		Для Каждого СтрокаТаблицаРабочихЦентров Из ТаблицаРабочихЦентров  Цикл		
			
			ЭтоВозврат		= СтрокаТаблицаРабочихЦентров.Возврат;
			
			Если ЗначениеЗаполнено(СтрокаТаблицаРабочихЦентров.РабочийЦентр.Оборудование) Тогда
				
				Если __ВебСервисСервер.РежимЗапускаПриложенияВебСервис() Тогда
					ПринтерПечати = __РаботаСТорговымОборудованиемСервер.ВернутьМодельОборудованияПоИдентификатору(СтрокаТаблицаРабочихЦентров.РабочийЦентр.Оборудование);
				Иначе
					#Если Клиент Тогда
					ПринтерПечати = РаботаСТорговымОборудованием.ВернутьМодельОборудованияПоИдентификатору(СтрокаТаблицаРабочихЦентров.РабочийЦентр.Оборудование);
					#КонецЕсли
				КонецЕсли;
				
				Если ПринтерПечати <> Неопределено Тогда
					
					ТаблицаПечати	= Неопределено;
					ТаблицаПечати	= РабочиеЦентры().Отбор(СтрокаТаблицаРабочихЦентров.РабочийЦентр,,СтрокаТаблицаРабочихЦентров.Возврат);
					ОбластьСтроки	= "Строка";
					ОбластьИтого	= "Итого";	
					
					ТабДокумент		= Новый ТабличныйДокумент;
					ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Встречка";
					//Инга 27,03,2012
					//Макет = ПолучитьМакет("Встречка");
					Идентификатор = СтрокаТаблицаРабочихЦентров.РабочийЦентр.Оборудование;
					МакетПоУмолчанию = ПолучитьМакет("Встречка");
					
					Если __ВебСервисСервер.РежимЗапускаПриложенияВебСервис() Тогда
						Макет = МакетПоУмолчанию;
					Иначе
						#Если Клиент Тогда
						Макет = ПолучитьСерверТО().ПечатьПолучитьМакет(Идентификатор, "Макет", МакетПоУмолчанию);
						#КонецЕсли
					КонецЕсли;
					
					///Инга 27,03,2012
					// печать производится на языке, указанном в настройках пользователя
					КодЯзыкаПечать	= Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
					Макет.КодЯзыкаМакета = КодЯзыкаПечать;
					
					//Костенюк Александр-Старт 20.02.2013
					// Печать встречек по подачам
					Если ПечатьВстречекПоПодачам Тогда
						
						ОбластьМакетаЗаголовок 			= Макет.ПолучитьОбласть("Заголовок");
						ОбластьМакетаПовтор 			= Макет.ПолучитьОбласть("Повтор");
						ОбластьМакетаСтол 				= Макет.ПолучитьОбласть("Стол");
						ОбластьМакетаОтветственный 		= Макет.ПолучитьОбласть("Ответственный");
						ОбластьМакетаКоличествоГостей 	= Макет.ПолучитьОбласть("КоличествоГостей");
						ОбластьМакетаШапка 				= Макет.ПолучитьОбласть("Шапка");
						ОбластьМакетаШтрихКодВстречки 	= Макет.ПолучитьОбласть("ШтрихКодВстречки");
						ОбластьМакетаШапкаСтроки 		= Макет.ПолучитьОбласть("ШапкаСтроки");
						ОбластьМакетаЗаголовокОтказа 	= Макет.ПолучитьОбласть("ОбластьЗаголовокОтказа");
						ОбластьМакетаОтказаУдалил 		= Макет.ПолучитьОбласть("ОбластьОтказаУдалил");
						ОбластьМакетаШапкаОтказа 		= Макет.ПолучитьОбласть("ОбластьШапкаОтказа");
						
						ТаблицаПодач = ТаблицаПечати.Скопировать();
						ТаблицаПодач.Свернуть("ПорядокПодачи");
						
						Для Каждого СтрокаТаблицыПодач Из ТаблицаПодач Цикл
							
							ПорядокПодачи = СтрокаТаблицыПодач.ПорядокПодачи;
							
							ПараметрыОтбора = Новый Структура;
							ПараметрыОтбора.Вставить("ПорядокПодачи", ПорядокПодачи);
							ТаблицаПечатиПоПодачам = ТаблицаПечати.Скопировать(ПараметрыОтбора);
							
							Если НЕ ЭтоВозврат Тогда
								
								ОбластьМакета = ОбластьМакетаЗаголовок;
								ОбластьМакета.Параметры.РабочийЦентр = СтрокаТаблицаРабочихЦентров.РабочийЦентр;				
								ОбластьМакета.Параметры.ДатаВремяПечати = ТекущаяДата();						
								ТабДокумент.Вывести(ОбластьМакета);
								
								Если ЭтоПовтор Тогда
									ОбластьМакета = ОбластьМакетаПовтор;
									ТабДокумент.Вывести(ОбластьМакета);
								КонецЕсли; 		
								
								Если Модуль = Перечисления.МодулиИПодсистемы.Ресторан Тогда
									ОбластьМакета = ОбластьМакетаСтол;
									ОбластьМакета.Параметры.Стол = "Стол № "+СокрЛП(ПолныйНомерСтола);
									ТабДокумент.Вывести(ОбластьМакета);
									ОбластьМакета = ОбластьМакетаОтветственный;
									ОбластьМакета.Параметры.Ответственный = СокрЛП(Сотрудник);
									ТабДокумент.Вывести(ОбластьМакета);
									ОбластьМакета = ОбластьМакетаКоличествоГостей;
									ОбластьМакета.Параметры.КоличествоГостей = НСтр("ru='Количество гостей: ';uk='Кількість гостей: '") + КоличествоКлиентов;
									ТабДокумент.Вывести(ОбластьМакета);
								КонецЕсли;	
								
								ОбластьМакета = ОбластьМакетаШапка;
								ПечатьНомер = Номер;
								// удаление ведущих нулей
								Пока Лев(ПечатьНомер, 1)="0" Цикл
									ПечатьНомер = Сред(ПечатьНомер, 2);
								КонецЦикла;
								
								ОбластьМакета.Параметры.Ном = СокрЛП(ПечатьНомер);						
								ОбластьМакета.Параметры.ДатаДока = Формат(Дата, "ДЛФ=Д");						
								Если ИспользоватьНомераСокращенные Тогда
									ОбластьМакета.Параметры.НомерСокращенный = НомерСокращенный;
								КонецЕсли;
								ТабДокумент.Вывести(ОбластьМакета);
								
								Если Модуль=Перечисления.МодулиИПодсистемы.Доставка
									И ФиксированнаяТребуемаяДатаОкончанияПериода Тогда
									Попытка
										ОбластьМакета = Макет.ПолучитьОбласть("ФиксированнаяТребуемаяДатаОкончанияПериода");
										ОбластьМакета.Параметры.ТребуемаяДатаОкончанияПериода = FrontOffice.ПредставлениеДаты(ТребуемаяДатаОкончанияПериода);
										ТабДокумент.Вывести(ОбластьМакета);
									Исключение
										// Пока так.
									КонецПопытки;
								КонецЕсли; 
								
								Если НЕ УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(
									ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeНеПечататьШтрихкодВПречеке) Тогда
									
									Если ТаблицаПечати[0].Штрихкод<>"" Тогда
										Попытка
											КомпонентШК = Новый COMОбъект("V8.Barcod");
										Исключение
											КомпонентШК = Неопределено;
										КонецПопытки;
										Если КомпонентШК <> Неопределено Тогда
											Попытка
												//0	(соответствует EAN8)	
												//1	(соответствует EAN13)	
												//2	(соответствует EAN128)	
												//3	(соответствует CODE39)	
												//4	(соответствует CODE128)	
												//5	(соответствует CODE16K)	
												//6	(соответствует PDF 417)	
												//7	(соответствует Industrial 2 of 5)	
												//8	(соответствует Interleaved 2 of 5)	
												//9	(соответствует ASCII-расширению CODE39)	
												//10	(соответствует CODE93)	
												//11	(соответствует ITF14)	
												//12	(Соответствует RSS 14)	
												//13	(Соответствует CodaBar)	
												//14	(Соответствует EAN13 AddOn 2)	
												//15	(Соответствует EAN13 AddOn 5)							
												КомпонентШК.ТипКода = Число(ТаблицаПечати[0].ТипШтрихКода.Код);
												КомпонентШК.Сообщение = ТаблицаПечати[0].Штрихкод; 
												КомпонентШК.ТекстКода = "";
												Если НЕ(ЭтоВозврат) Тогда				
													//ОбластьМакета = Макет.ПолучитьОбласть("ШтрихКодВстречки");				
													ОбластьМакета = ОбластьМакетаШтрихКодВстречки;
													ОбластьМакета.Рисунки.Штрихкод.Объект.Сообщение = ТаблицаПечати[0].Штрихкод;
													ТабДокумент.Вывести(ОбластьМакета);
												КонецЕсли;						
											Исключение
												// Ошибка
											КонецПопытки;
										КонецЕсли;
									КонецЕсли;
									
								КонецЕсли;
								
								ОбластьМакета = ОбластьМакетаШапкаСтроки;
								ТабДокумент.Вывести(ОбластьМакета);
								
								//Выводим порядок подачи
								ТаблицаПечатиПоПодачам.Сортировать("ДатаОкончанияПериода Убыв");
								
								Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ТаблицаПечатиПоПодачам, "Идентификатор", "Владелец");
								ПечатьДеревоВстречки(Дерево, Макет, ТабДокумент, ЭтоВозврат, , КодЯзыкаПечать);
								
								Если ТаблицаПечати[0].Штрихкод<>"" Тогда
									Если КомпонентШК <> Неопределено Тогда
										Попытка
											КомпонентШК.ТипКода = Число(ТаблицаПечати[0].ТипШтрихКода.Код);
											КомпонентШК.Сообщение = ТаблицаПечати[0].Штрихкод; 
											Если НЕ ЭтоВозврат Тогда				
												ОбластьМакета = ОбластьМакетаШтрихКодВстречки;
												ОбластьМакета.Рисунки.Штрихкод.Объект.Сообщение = ТаблицаПечати[0].Штрихкод;
												ТабДокумент.Вывести(ОбластьМакета);
											КонецЕсли;						
										Исключение
											// Ошибка
										КонецПопытки;
									КонецЕсли; 
								КонецЕсли; 
								
								// Вывести дно
								ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
								
							Иначе 
								
								ПечатьНомер = ОбщегоНазначенияСервер.УдалениеВедущихНулей(Номер);
								ОбластьЗаголовокОтказа = ОбластьМакетаЗаголовокОтказа;
								ОбластьЗаголовокОтказа.Параметры.РабочийЦентр = СтрокаТаблицаРабочихЦентров.РабочийЦентр;
								ТабДокумент.Вывести(ОбластьЗаголовокОтказа);
								
								ОбластьОтказаУдалил = ОбластьМакетаОтказаУдалил;
								ОбластьОтказаУдалил.Параметры.Пользователь = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
								ОбластьОтказаУдалил.Параметры.Дата = ТекущаяДата();
								ОбластьОтказаУдалил.Параметры.Сотрудник = Сотрудник;
								ОбластьОтказаУдалил.Параметры.НомерСчета = СокрЛП(ПечатьНомер);
								ОбластьОтказаУдалил.Параметры.НомерСтола = Стол;
								ТабДокумент.Вывести(ОбластьОтказаУдалил);
								
								ОбластьШапкаОтказа = ОбластьМакетаШапкаОтказа;
								ОбластьШапкаОтказа.Параметры.ПричинаОтказа = СокрЛП(Строка(ПричинаОтказаДокумент));
								ОбластьШапкаОтказа.Параметры.Ном = СокрЛП(ПечатьНомер);
								ОбластьШапкаОтказа.Параметры.ДатаДока=	Формат(Дата, "ДЛФ=Д");
								ТабДокумент.Вывести(ОбластьШапкаОтказа);
								
								НоваяТаблицаПечати = ТаблицаПечати;
								НоваяТаблицаПечати.Сортировать("ДатаОкончанияПериода Убыв");
								
								Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(НоваяТаблицаПечати, "Идентификатор", "Владелец");
								ПечатьДеревоВстречки(Дерево, Макет, ТабДокумент, ЭтоВозврат, , КодЯзыкаПечать);
								
							КонецЕсли;
							
						КонецЦикла;
												
					Иначе
					//Костенюк Александр-Финиш 20.02.2013
						
						Если не ЭтоВозврат Тогда
							ОбластьМакета	= Макет.ПолучитьОбласть("Заголовок");
							ОбластьМакета.Параметры.РабочийЦентр = СтрокаТаблицаРабочихЦентров.РабочийЦентр;				
							ОбластьМакета.Параметры.ДатаВремяПечати = ТекущаяДата();						
							ТабДокумент.Вывести(ОбластьМакета);
							
							// Чистяков Павел 17.10.2011 9:20:26 
							Если ЭтоПовтор = Истина Тогда
								ОбластьМакета = Макет.ПолучитьОбласть("Повтор");
								ТабДокумент.Вывести(ОбластьМакета);
							КонецЕсли; 		
							
							Если Модуль = Перечисления.МодулиИПодсистемы.Ресторан Тогда
								ОбластьМакета = Макет.ПолучитьОбласть("Стол");					
								// Чистяков Павел 09.09.2011 14:54:46 
								//ОбластьМакета.Параметры.Стол = СокрЛП(Стол);
								ОбластьМакета.Параметры.Стол = "Стол № "+СокрЛП(ПолныйНомерСтола);
								ТабДокумент.Вывести(ОбластьМакета);
								// Чистяков Павел 05.10.2011 16:20:47 
								ОбластьМакета = Макет.ПолучитьОбласть("Ответственный");
								//ОбластьМакета.Параметры.Ответственный = СокрЛп(Ответственный);
								//Костенюк Александр-Старт 05.04.2012
								ОбластьМакета.Параметры.Ответственный = СокрЛП(Сотрудник);
								ТабДокумент.Вывести(ОбластьМакета);
								ОбластьМакета = Макет.ПолучитьОбласть("КоличествоГостей");
								ОбластьМакета.Параметры.КоличествоГостей = НСтр("ru='Количество гостей: ';uk='Кількість гостей: '") + КоличествоКлиентов;
								ТабДокумент.Вывести(ОбластьМакета);
								//Костенюк Александр-Финиш 05.04.2012
							КонецЕсли;	
							
							ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
							ПечатьНомер = Номер;
							// удаление ведущих нулей
							Пока Лев(ПечатьНомер, 1)="0" Цикл
								ПечатьНомер = Сред(ПечатьНомер, 2);
							КонецЦикла;
							
							ОбластьМакета.Параметры.Ном = СокрЛП(ПечатьНомер);						
							ОбластьМакета.Параметры.ДатаДока = Формат(Дата, "ДЛФ=Д");						
							Если ИспользоватьНомераСокращенные Тогда
								ОбластьМакета.Параметры.НомерСокращенный = НомерСокращенный;
							КонецЕсли;
							ТабДокумент.Вывести(ОбластьМакета);
							
							// Чистяков Павел 13.09.2010 8:55:16 
							Если Модуль=Перечисления.МодулиИПодсистемы.Доставка
								И ФиксированнаяТребуемаяДатаОкончанияПериода Тогда
								Попытка
									ОбластьМакета = Макет.ПолучитьОбласть("ФиксированнаяТребуемаяДатаОкончанияПериода");
									ОбластьМакета.Параметры.ТребуемаяДатаОкончанияПериода = FrontOffice.ПредставлениеДаты(ТребуемаяДатаОкончанияПериода);
									ТабДокумент.Вывести(ОбластьМакета);
								Исключение
									// Пока так.
								КонецПопытки;
							КонецЕсли; 
							
							Если НЕ УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(
								ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeНеПечататьШтрихкодВПречеке) Тогда
								
								Если ТаблицаПечати[0].Штрихкод<>"" Тогда
									Попытка
										КомпонентШК = Новый COMОбъект("V8.Barcod");
									Исключение
										КомпонентШК = Неопределено;
									КонецПопытки;
									Если КомпонентШК <> Неопределено Тогда
										Попытка
											//0	(соответствует EAN8)	
											//1	(соответствует EAN13)	
											//2	(соответствует EAN128)	
											//3	(соответствует CODE39)	
											//4	(соответствует CODE128)	
											//5	(соответствует CODE16K)	
											//6	(соответствует PDF 417)	
											//7	(соответствует Industrial 2 of 5)	
											//8	(соответствует Interleaved 2 of 5)	
											//9	(соответствует ASCII-расширению CODE39)	
											//10	(соответствует CODE93)	
											//11	(соответствует ITF14)	
											//12	(Соответствует RSS 14)	
											//13	(Соответствует CodaBar)	
											//14	(Соответствует EAN13 AddOn 2)	
											//15	(Соответствует EAN13 AddOn 5)							
											КомпонентШК.ТипКода = Число(ТаблицаПечати[0].ТипШтрихКода.Код);
											КомпонентШК.Сообщение = ТаблицаПечати[0].Штрихкод; 
											КомпонентШК.ТекстКода = "";
											Если НЕ(ЭтоВозврат) Тогда				
												ОбластьМакета = Макет.ПолучитьОбласть("ШтрихКодВстречки");				
												ОбластьМакета.Рисунки.Штрихкод.Объект.Сообщение = ТаблицаПечати[0].Штрихкод;
												ТабДокумент.Вывести(ОбластьМакета);
											КонецЕсли;						
										Исключение
											// Ошибка
										КонецПопытки;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
							ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСтроки");				
							ТабДокумент.Вывести(ОбластьМакета);
							
							//Выводим порядок подачи
							// Чистяков Павел 26.08.2011 12:57:45 
							// Было как закоменчено. А надо как написано
							// НоваяТаблицаПечати = РабочиеЦентры().Позиции();
							НоваяТаблицаПечати = ТаблицаПечати;
							НоваяТаблицаПечати.Сортировать("ДатаОкончанияПериода Убыв");
							
							Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(НоваяТаблицаПечати, "Идентификатор", "Владелец");
							ПечатьДеревоВстречки(Дерево,Макет, ТабДокумент, ЭтоВозврат, , КодЯзыкаПечать);
							
							Если ТаблицаПечати[0].Штрихкод<>"" Тогда
								Если КомпонентШК <> Неопределено Тогда
									Попытка
										КомпонентШК.ТипКода = Число(ТаблицаПечати[0].ТипШтрихКода.Код);
										КомпонентШК.Сообщение = ТаблицаПечати[0].Штрихкод; 
										Если НЕ(ЭтоВозврат) Тогда				
											ОбластьМакета = Макет.ПолучитьОбласть("ШтрихКодВстречки");				
											ОбластьМакета.Рисунки.Штрихкод.Объект.Сообщение = ТаблицаПечати[0].Штрихкод;
											ТабДокумент.Вывести(ОбластьМакета);
										КонецЕсли;						
									Исключение
										// Ошибка
									КонецПопытки;
								КонецЕсли; 
							КонецЕсли; 
							
							// Вывести дно
							ОбластьМакета = Макет.ПолучитьОбласть("Отрыв");
							ТабДокумент.Вывести(ОбластьМакета);
							
							ОбластьМакета = Макет.ПолучитьОбласть("ОтступВстречки");
							ТабДокумент.Вывести(ОбластьМакета);                     				
						Иначе 
							ПечатьНомер = ОбщегоНазначенияСервер.УдалениеВедущихНулей(Номер);
							ОбластьЗаголовокОтказа = Макет.ПолучитьОбласть("ОбластьЗаголовокОтказа");
							ОбластьЗаголовокОтказа.Параметры.РабочийЦентр = СтрокаТаблицаРабочихЦентров.РабочийЦентр;
							ТабДокумент.Вывести(ОбластьЗаголовокОтказа);
							
							ОбластьОтказаУдалил = Макет.ПолучитьОбласть("ОбластьОтказаУдалил");
							ОбластьОтказаУдалил.Параметры.Пользователь = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
							//ОбластьОтказаУдалил.Параметры.Дата = Дата;
							//Костенюк Александр-Старт 05.11.2012
							ОбластьОтказаУдалил.Параметры.Дата = ТекущаяДата();
							//Костенюк Александр-Финиш 05.11.2012
							ОбластьОтказаУдалил.Параметры.Сотрудник = Сотрудник;
							ОбластьОтказаУдалил.Параметры.НомерСчета = СокрЛП(ПечатьНомер);
							ОбластьОтказаУдалил.Параметры.НомерСтола = Стол;
							ТабДокумент.Вывести(ОбластьОтказаУдалил);
							
							ОбластьШапкаОтказа = Макет.ПолучитьОбласть("ОбластьШапкаОтказа");
							//Костенюк Александр-Старт 27.04.2012
							ОбластьШапкаОтказа.Параметры.ПричинаОтказа = СокрЛП(Строка(ПричинаОтказаДокумент));
							//Костенюк Александр-Финиш 27.04.2012
							ОбластьШапкаОтказа.Параметры.Ном = СокрЛП(ПечатьНомер);
							ОбластьШапкаОтказа.Параметры.ДатаДока=	Формат(Дата, "ДЛФ=Д");
							ТабДокумент.Вывести(ОбластьШапкаОтказа);
							
							НоваяТаблицаПечати = ТаблицаПечати;
							НоваяТаблицаПечати.Сортировать("ДатаОкончанияПериода Убыв");
							
							Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(НоваяТаблицаПечати, "Идентификатор", "Владелец");
							ПечатьДеревоВстречки(Дерево, Макет, ТабДокумент, ЭтоВозврат, , КодЯзыкаПечать);
							
						КонецЕсли;
						
					//Костенюк Александр-Старт 20.02.2013
					КонецЕсли;
					//Костенюк Александр-Финиш 20.02.2013
					
					Если __ВебСервисСервер.РежимЗапускаПриложенияВебСервис() Тогда
						__РаботаСТорговымОборудованиемСервер.ПечатьВстречки(СтрокаТаблицаРабочихЦентров.РабочийЦентр.Оборудование, ТабДокумент);
					Иначе
						#Если Клиент Тогда
						ОшибкаТО = ПолучитьСерверТО().ПечатьВстречки(СтрокаТаблицаРабочихЦентров.РабочийЦентр.Оборудование, ТабДокумент);
						#КонецЕсли
					КонецЕсли;

					ТабДокумент = Неопределено;
					
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
		//Если FrontOfficeРежим Тогда
		//	
		//	ОшибкаТО	= ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
		//	ТабДокумент = Неопределено;
		//	
		//КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции
	
	Процедура ПечатьДеревоВстречкиУдалить(Дерево, Макет, ТабДокумент, ЭтоВозврат, ПодачаВынос=0, КодЯзыкаПечать, ВывелиНаВынос = Ложь, СтрОтступа="" )
		
		Если НЕ ЭтоВозврат Тогда
			
			Для Каждого СтрТЗ Из Дерево.Строки Цикл
				
				Если СтрТЗ.ПорядокПодачи<>0
					ИЛИ ((СтрТЗ.ПорядокПодачи=0) и (НЕ СтрТЗ.НаВынос)) Тогда
					
					Если ПодачаВынос
						<> Макс(СтрТЗ.ПорядокПодачи, 1) Тогда
						
						ПодачаВынос		= СтрТЗ.ПорядокПодачи;
						ОбластьМакета	= Макет.ПолучитьОбласть("ПодачаВынос");				
						ОбластьМакета.Параметры.ПодачаВынос = НСтр("ru='Подача №';uk='Подача №'",КодЯзыкаПечать)+СОКРЛП(СтрТЗ.ПорядокПодачи);						
						ТабДокумент.Вывести(ОбластьМакета);						
						
					КонецЕсли;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");				
					
					Если СтрТЗ.Владелец = "00000000-0000-0000-0000-000000000000"  Тогда				
						СтрОтступа	= "";
					КонецЕсли;
					
					ОбластьМакета.Параметры.Номенклатура	= СтрОтступа + СокрЛП(СтрТЗ.Номенклатура);
					ОбластьМакета.Параметры.Кво				= ?(СтрТЗ.Номенклатура.ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Условие,СтрТЗ.Количество,"");;
					
					ТабДокумент.Вывести(ОбластьМакета);
					
					// Чистяков Павел 03.09.2010 13:23:24 
					// Работал вслепую, поэтому пока так
					
					Попытка
						Если ЗначениеЗаполнено(СтрТЗ.Комментарий) Тогда
							ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКомментарий");				
							ОбластьМакета.Параметры.Комментарий = СтрТЗ.Комментарий;
							ТабДокумент.Вывести(ОбластьМакета);						
						КонецЕсли; 
					Исключение
						// Ничего не делать
					КонецПопытки; 
					
					// Игорь 15.08.2011 11:38:40
					
				ИначеЕсли СтрТЗ.НаВынос Тогда
					
					Если НЕ ВывелиНаВынос Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ПодачаВынос");				
						ОбластьМакета.Параметры.ПодачаВынос = НСтр("ru='На вынос';uk='На виніс'",КодЯзыкаПечать);						
						ТабДокумент.Вывести(ОбластьМакета);	
						ВывелиНаВынос = Истина;
					КонецЕсли;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					
					Если СтрТЗ.Владелец = "00000000-0000-0000-0000-000000000000"  Тогда				
						СтрОтступа="";
					КонецЕсли;
					
					ОбластьМакета.Параметры.Номенклатура	= СтрОтступа + СокрЛП(СтрТЗ.Номенклатура);
					ОбластьМакета.Параметры.Кво				= ?(СтрТЗ.Номенклатура.ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Условие,СтрТЗ.Количество,"");
					ТабДокумент.Вывести(ОбластьМакета);
					
					// Чистяков Павел 03.09.2010 13:23:24 
					// Работал вслепую, поэтом пока так
					Попытка
						Если ЗначениеЗаполнено(СтрТЗ.Комментарий) Тогда
							ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКомментарий");
							ОбластьМакета.Параметры.Комментарий = СтрТЗ.Комментарий;
							ТабДокумент.Вывести(ОбластьМакета);
						КонецЕсли; 
					Исключение
						// Пока ничего не делать
					КонецПопытки;
					
				КонецЕсли;
				
				Если СтрТЗ.Строки.Количество() > 0 Тогда
					
					СтрОтступа= СтрОтступа + "     ";
					ПечатьДеревоВстречки(СтрТЗ, Макет, ТабДокумент, ЭтоВозврат, ПодачаВынос, КодЯзыкаПечать,ВывелиНаВынос, СтрОтступа);
					
				КонецЕсли;
				
			КонецЦикла;	
			
		Иначе
			
			Для Каждого СтрТЗ Из Дерево.Строки Цикл
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				
				Если СтрТЗ.Владелец = "00000000-0000-0000-0000-000000000000"  Тогда				
					СтрОтступа="";
				КонецЕсли;
				
				ОбластьМакета.Параметры.Номенклатура	= СтрОтступа + СокрЛП(СтрТЗ.Номенклатура);
				ОбластьМакета.Параметры.Кво				= ?(СтрТЗ.Номенклатура.ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Условие,СтрТЗ.Количество,"");
				ТабДокумент.Вывести(ОбластьМакета);
				// Чистяков Павел 03.09.2010 13:23:24 
				// Работал вслепую, поэтому пока в попытке
				Попытка
					Если ЗначениеЗаполнено(СтрТЗ.Комментарий) Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКомментарий");
						ОбластьМакета.Параметры.Комментарий = СтрТЗ.Комментарий;
						ТабДокумент.Вывести(ОбластьМакета);						
					КонецЕсли; 
				Исключение
					// Ничего не делать
				КонецПопытки;
				
				Если СтрТЗ.Строки.Количество() > 0 Тогда
					СтрОтступа= СтрОтступа + "     ";		
					ПечатьДеревоВстречки(СтрТЗ,Макет,ТабДокумент, ЭтоВозврат, ПодачаВынос, КодЯзыкаПечать, ВывелиНаВынос ,  СтрОтступа);			
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	// Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	// НазваниеМакета - строка, название макета.
	//
	Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь, FrontOfficeРежим = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "Накладная" Тогда
			#Если Клиент Тогда
			ТабДокумент = ПечатьДокумента(FrontOfficeРежим);
			#КонецЕсли
		ИначеЕсли ИмяМакета = "Пречек" Тогда
			#Если Клиент Тогда
			ТабДокумент = ПечатьПречека(FrontOfficeРежим);
			#КонецЕсли
		ИначеЕсли ИмяМакета = "Встречка" Тогда
			ТабДокумент = ПечатьВстречки(FrontOfficeРежим);
		КонецЕсли;
		
		#Если Клиент Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		#КонецЕсли
		
		Возврат Истина;
		
	КонецФункции // Печать
	

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();
	
	СтруктураМакетов.Вставить("Накладная"    , "Расходная накладная");
	СтруктураМакетов.Вставить("Пречек"     , "Пречек");
	//СтруктураМакетов.Вставить("Встречка"     , "Встречка");
	
	Возврат СтруктураМакетов;                        
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция возвращает связанный объект соответсвующего типа.
//
Функция Контрагент() Экспорт
	
	// При обмене данными ничего не выполняем.
	Если (Не ОбменДанными = Неопределено) И ОбменДанными.Загрузка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выборка информации.
	Если (мКонтрагент = Неопределено) Тогда
		мКонтрагент = Обработки.КонтрагентРеализацииТоваровУслуг.Создать();
		мКонтрагент.Прочитать(ЭтотОбъект);
	КонецЕсли;
	
	Возврат мКонтрагент;
	
КонецФункции // Контрагент()

// Функция возвращает связанный объект соответсвующего типа.
//
Функция КонтактнаяИнформация(ОбъектКопирования = Неопределено) Экспорт
	
	// При обмене данными ничего не выполняем.
	Если (Не ОбменДанными = Неопределено) И ОбменДанными.Загрузка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выборка контактной информации.
	Если (мКонтактнаяИнформация = Неопределено) Тогда
		мКонтактнаяИнформация = Обработки.КонтактнаяИнформацияРеализацииТоваровУслуг.Создать();
		мКонтактнаяИнформация.Прочитать(ЭтотОбъект, ОбъектКопирования);
	КонецЕсли;
	
	Возврат мКонтактнаяИнформация;
	
КонецФункции // КонтактнаяИнформация()

// Функция возвращает связанный объект соответсвующего типа.
//
Функция Событие() Экспорт
	
	// При обмене данными ничего не выполняем.
	Если (Не ОбменДанными = Неопределено) И ОбменДанными.Загрузка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выборка информации.
	Если (мСобытие = Неопределено) Тогда
		мСобытие = Обработки.СобытиеРеализацииТоваровУслуг.Создать();
		мСобытие.Прочитать(ЭтотОбъект);
	КонецЕсли;
	
	Возврат мСобытие;
	
КонецФункции // Событие()

// Функция возвращает связанный объект соответсвующего типа.
//
Функция РабочиеЦентры() Экспорт
	
	// При обмене данными ничего не выполняем.
	Если (Не ОбменДанными = Неопределено) И ОбменДанными.Загрузка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выборка контактной информации.
	Если (мРабочиеЦентры = Неопределено) Тогда
		мРабочиеЦентры = Обработки.РабочиеЦентрыРеализацииТоваровУслуг.Создать();
	КонецЕсли;
	
	Возврат мРабочиеЦентры;
	
КонецФункции // РабочиеЦентры()

// Функция возвращает связанный объект соответсвующего типа.
//
Функция НастройкиПроизводства() Экспорт
	
	// При обмене данными ничего не выполняем.
	Если (Не ОбменДанными = Неопределено) И ОбменДанными.Загрузка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выборка контактной информации.
	Если (мНастройкиПроизводства = Неопределено) Тогда
		мНастройкиПроизводства = Обработки.НастройкиПроизводстваРеализацииТоваровУслуг.Создать();
		мНастройкиПроизводства.Прочитать(ЭтотОбъект);
	КонецЕсли;
	
	Возврат мНастройкиПроизводства;
	
КонецФункции // НастройкиПроизводства()

// Функция возвращает либо переданную дату, либубо текущую если переданное значение не заполнено.
//
Функция ПолучитьНеПустуюДату(Значение, Алетернатива = Неопределено)
	
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Значение) Тогда
		Если (Алетернатива = Неопределено) Тогда
			Возврат мТекущаяДата;
		Иначе
			Возврат Алетернатива;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьНеПустуюДату()

// Процедура сохраняет реквизиты документа до изменения.
//
Процедура ПолучитьСтруктуруДокументаОригинала()
	
	// Структура.
	мСтруктураДокументОригинал = Новый Структура("Проведен,ПометкаУдаления,Модуль,Ресторан,Стол");
	
	// Реквизиты.
	Если ЭтоНовый() Тогда
		мСтруктураДокументОригинал.Проведен = Ложь;
		мСтруктураДокументОригинал.ПометкаУдаления = Ложь;
		мСтруктураДокументОригинал.Модуль = Перечисления.МодулиИПодсистемы.ПустаяСсылка();
		мСтруктураДокументОригинал.Ресторан = Справочники.Рестораны.ПустаяСсылка();
		мСтруктураДокументОригинал.Стол = Справочники.Столы.ПустаяСсылка();
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Проведен,
		|	РеализацияТоваровУслуг.ПометкаУдаления,
		|	РеализацияТоваровУслуг.Модуль,
		|	РеализацияТоваровУслуг.Ресторан,
		|	РеализацияТоваровУслуг.Стол
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);					  
		Выборка = Запрос.Выполнить().Выбрать(); Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(мСтруктураДокументОригинал, Выборка);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСтруктуруДокументаОригинала()

// Процедура получает набор номенклатурных и производственных групп.
//
Процедура ПолучитьПроизводственныеГруппы()
	
	Если (Не Модуль = Перечисления.МодулиИПодсистемы.Ресторан) И (Не Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Возврат;
	КонецЕсли;
	
	мНоменклатурныеГруппы = Новый Массив; мНоменклатурныеГруппыПроизводства = Новый Массив;
	
	мПроизводственныеГруппы = Новый Массив; мПроизводственныеГруппыПроизводства = Новый Массив;
	
	// Табличные части.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(Товары); //Костенюк Александр-Закомментировано 18.05.2013 ТабличныеЧасти.Добавить(Услуги);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			мНоменклатурныеГруппы.Добавить(СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
			Если Не СтрокаТабличнойЧасти.Выполненн Тогда
				мПроизводственныеГруппыПроизводства.Добавить(СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа,
	|	ПроизводственныеГруппы.Ссылка КАК ПроизводственнаяГруппа
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеГруппы КАК ПроизводственныеГруппы
	|		ПО НоменклатурныеГруппы.ПроизводственнаяГруппа = ПроизводственныеГруппы.Ссылка
	|ГДЕ
	|	НоменклатурныеГруппы.Ссылка В(&НоменклатурныеГруппы)
	|	И ПроизводственныеГруппы.Актуальность");
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", мНоменклатурныеГруппы);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		мПроизводственныеГруппы.Добавить(Выборка.ПроизводственнаяГруппа);
		Если (Не мНоменклатурныеГруппыПроизводства.Найти(Выборка.НоменклатурнаяГруппа) = Неопределено) Тогда
			мПроизводственныеГруппыПроизводства.Добавить(Выборка.ПроизводственнаяГруппа);
		КонецЕсли;
	КонецЦикла;
	мНоменклатурныеГруппыПроизводства = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("НоменклатурнаяГруппа");
	
КонецПроцедуры // ПолучитьПроизводственныеГруппы()

// Функция возвращает очередной постфикс стола.
//
Функция ПолчитьОчереднойПостфиксСтола() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Выборка данных.
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ СостояниеДокументов.ПостфиксСтола КАК ПостфиксСтола ИЗ РегистрСведений.СостояниеДокументов КАК СостояниеДокументов ГДЕ СостояниеДокументов.Стол = &Стол И СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг");
	
	//Костенюк Александр-Старт 02.08.2012
	// Учет ресторана, для которого формируем постфикс
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостояниеДокументов.ПостфиксСтола КАК ПостфиксСтола
	               |ИЗ
	               |	РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
	               |ГДЕ
	               |	СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	               |	И СостояниеДокументов.Стол = &Стол
	               |	И СостояниеДокументов.Ресторан = &Ресторан";
	Запрос.УстановитьПараметр("Ресторан", Ресторан);
	//Костенюк Александр-Финиш 02.08.2012
	
	Запрос.УстановитьПараметр("Стол", Стол);
	ТаблицаПостфиксовСтола = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Перебор постфиксов.
	Если Булево(ТаблицаПостфиксовСтола.Количество()) Тогда
		Для Индекс = 0 По Pow(10, Метаданные().Реквизиты.ПостфиксСтола.Тип.КвалификаторыЧисла.Разрядность) - 1 Цикл
			Если (ТаблицаПостфиксовСтола.Найти(Индекс, "ПостфиксСтола") = Неопределено) Тогда
				Возврат Индекс;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Последний вариант.
	Возврат Число(Ложь);
	
КонецФункции // ПолчитьОчереднойПостфиксСтола()

// Функция возвращает строковое представление полного номера стола.
//
//Функция ПолчитьПолныйНомерСтола()
//Костенюк Александр-Старт 11.04.2012
Функция ПолчитьПолныйНомерСтола() Экспорт 
//Костенюк Александр-Финиш 11.04.2012
	
	// Полный номер.
	Если Не ЗначениеЗаполнено(Стол)  Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Формат(Стол.Код, "ЧН=; ЧГ=");
	Если Булево(ПостфиксСтола) Тогда
		Результат = Результат + "." + Формат(ПостфиксСтола, "ЧЦ=" + Метаданные().Реквизиты.ПостфиксСтола.Тип.КвалификаторыЧисла.Разрядность + "; ЧН=; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолчитьПолныйНомерСтола()

// Функция возвращает сумму документа.
//
Функция ПолучитьСуммуСНДС() Экспорт
	
	Возврат Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") +
	Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
КонецФункции // ПолучитьСуммуСНДС()

// Функция возвращает сумму НДС документа.
//
Функция ПолучитьСуммуНДС() Экспорт
	
	Возврат Ценообразование.ПолучитьНДСДокумента(ЭтотОбъект, "Товары") +
	Ценообразование.ПолучитьНДСДокумента(ЭтотОбъект, "Услуги");
	
КонецФункции // ПолучитьСуммуНДС()

// Функция возвращает сумму наценки документа.
//
Функция ПолучитьСуммуНаценки() Экспорт
	
	Возврат Ценообразование.ПолучитьСуммуНаценкиДокумента(ЭтотОбъект, "Товары") +
	Ценообразование.ПолучитьСуммуНаценкиДокумента(ЭтотОбъект, "Услуги");
	
КонецФункции // ПолучитьСуммуНаценки()

// Функция возвращает сумму скидки документа.
//
Функция ПолучитьСуммуСкидки() Экспорт
	
	Возврат Ценообразование.ПолучитьСуммуСкидкиДокумента(ЭтотОбъект, "Товары") +
	Ценообразование.ПолучитьСуммуСкидкиДокумента(ЭтотОбъект, "Услуги");
	
КонецФункции // ПолучитьСуммуСкидки()

// Функция возвращает сумму документа.
//
Функция ПолучитьСуммуБезСкидки() Экспорт
	
	Возврат Ценообразование.ПолучитьСуммуДокументаБезСкидки(ЭтотОбъект, "Товары") +
	Ценообразование.ПолучитьСуммуДокументаБезСкидки(ЭтотОбъект, "Услуги");
	
КонецФункции // ПолучитьСуммуСНДС()

//Костенюк Александр-Старт 16.04.2013
// Функция получает сумма по колонке табличной части документа
//
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг. Документ, для которого необходимо получить сумму.
// ИмяТабличнойЧасти - Тип: Строка. Имя табличной части документа, по которой будет расчитан итог по колонке.
// ИмяКолонки - Тип: Строка. Имя колонки, по которой будет расчитан итог.
// 
Функция ПолучитьСуммуДокумента(ДокументОбъект, ИмяТабличнойЧасти = "Товары", ИмяКолонки = "Сумма") Экспорт
	
	Возврат Ценообразование.ПолучитьПроизвольнуюСуммуДокумента(ДокументОбъект, ИмяТабличнойЧасти, ИмяКолонки);
	
КонецФункции
//Костенюк Александр-Финиш 16.04.2013

// Функция возвращает сводную таблицу по исполнителям.
//
Функция ПолучитьСводнуюТаблицуИсполнителей()
	
	// Проверка.
	Если (Не Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Запрос.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НакладнаяНаДоставкуДокументыОснования.Сотрудник,
	|	НакладнаяНаДоставкуДокументыОснования.Ссылка КАК ДокументИсполнения,
	|	НакладнаяНаДоставкуДокументыОснования.Ресторан
	|ИЗ
	|	Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
	|ГДЕ
	|	НакладнаяНаДоставкуДокументыОснования.ДокументОснование = &ДокументОснование
	|	И НакладнаяНаДоставкуДокументыОснования.Проведен");
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	// Результат.
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСводнуюТаблицуИсполнителей()

// Подготавливает (автоматически заполнениет) шапку документа.
//
Процедура ПодготовитьШапку(РежимЗаписи, РежимПроведения) Экспорт
	
	// Текущая дата.
	мТекущаяДата = ТекущаяДата();
	
	// Оригинальные значение реквизитов.
	ПолучитьСтруктуруДокументаОригинала();
	
	// Выборка данных.
	ПолучитьПроизводственныеГруппы();
	
	// Номер, НомерСокращенный.
	Если ПустаяСтрока(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	Если ПустаяСтрока(НомерСокращенный) Тогда
		НомерСокращенный = УправлениеДокументами.ПолучитьНомерСокращенный(Номер);
	КонецЕсли;
	
	// Оплачен.
	Оплачен = (Проведен Или (РежимЗаписи = РежимЗаписиДокумента.Проведение)) И (Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	
	// Распечатан.
	Распечатан = (Распечатан Или Оплачен) И (Не ПометкаУдаления);
	
	// АдресДоставки.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Если (Не мКонтактнаяИнформация = Неопределено) Тогда
			АдресДоставкиПредставление = КонтактнаяИнформация().АдресДоставки.Представление;
			Если УправлениеКонтактнойИнформацией.ОпределитьДляОбъектаУкраинскийАдрес(КонтактнаяИнформация().АдресДоставки) Тогда
				АдресДоставкиУлица = КонтактнаяИнформация().АдресДоставки.Поле6;
				АдресДоставкиДом = КонтактнаяИнформация().АдресДоставки.Поле7;
			КонецЕсли;
			АдресДоставкиКомментарий = КонтактнаяИнформация().АдресДоставки.Комментарий;
		КонецЕсли;
	Иначе
		АдресДоставкиДом = Неопределено;
		АдресДоставкиПредставление = Неопределено;
		АдресДоставкиУлица = Неопределено;
		АдресДоставкиКомментарий = Неопределено;
	КонецЕсли;
	
	// ДатаНачалаПериода.
	//Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДатаНачалаПериода) Тогда
	Если НЕ ЗначениеЗаполнено(ДатаНачалаПериода) Тогда //Костенюк Александр 16.04.2013
		ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(ДатаОкончанияПериода), мТекущаяДата);
	КонецЕсли;
	
	// ДатаОкончанияПериода.
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		//Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДатаОкончанияПериода) Тогда
		Если НЕ ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда //Костенюк Александр 16.04.2013
			ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(ДатаНачалаПериода), мТекущаяДата);
		КонецЕсли;
	КонецЕсли;
	
	// КоличествоКлиентов.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		КоличествоКлиентов = 1;
	КонецЕсли;
	
	// КраткийСоставДокумента, КраткийСоставПроизводства.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		КраткийСоставДокумента = УправлениеЗаказами.ЗаполнитьКраткийСоставДокумента(Модуль, мПроизводственныеГруппы);
		КраткийСоставПроизводства = УправлениеЗаказами.ЗаполнитьКраткийСоставДокумента(Модуль, мПроизводственныеГруппыПроизводства);
	Иначе
		КраткийСоставДокумента = УправлениеЗаказами.ЗаполнитьКраткийСоставДокумента(Модуль, мПроизводственныеГруппы);
		КраткийСоставПроизводства = Неопределено;
	КонецЕсли;
	
	// ПостфиксСтола.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Тогда
		Если ЗначениеЗаполнено(Стол) И (Не Стол = мСтруктураДокументОригинал.Стол) Тогда
			ПостфиксСтола = ПолчитьОчереднойПостфиксСтола();
		КонецЕсли;
	Иначе
		ПостфиксСтола = Неопределено;
	КонецЕсли;
	
	// ПолныйНомерСтола.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Тогда
		ПолныйНомерСтола = ПолчитьПолныйНомерСтола();
	Иначе
		ПолныйНомерСтола = Неопределено;
	КонецЕсли;
	
	// ПродолжительностьПроизводства и ПродолжительностьДоставки.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		ПродолжительностьПроизводства = Макс(ПродолжительностьПроизводства, '00010101000500');
		ПродолжительностьДоставки = Макс(ПродолжительностьДоставки, '00010101000500');
	Иначе
		ПродолжительностьПроизводства = Неопределено;
		ПродолжительностьДоставки = Неопределено;
	КонецЕсли;
	
	//// СуммаДокументаБезСкидок, СуммаНаценкиДокумента, СуммаСкидкиДокумента и СуммаДокумента.
	//СуммаДокументаБезСкидок = ПолучитьСуммуБезСкидки();
	//СуммаНаценкиДокумента = ПолучитьСуммуНаценки();
	//СуммаСкидкиДокумента = ПолучитьСуммуСкидки();
	//СуммаДокумента = ПолучитьСуммуСНДС();
	
	//Костенюк Александр-Старт 16.04.2013
	// Получение сумм по документу
	СуммаДокументаБезСкидок 			= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаБезСкидок");
	СуммаСкидкиДокумента 				= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаСкидки");
	СуммаНаценкиДокумента 				= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаНаценки");
	СуммаДепозитаДокумента 				= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаДепозита");
	СуммаСертификатаДокумента 			= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаСертификата"); //Костенюк Александр 11.12.2014
	СуммаСкидкиНаСертификатДокумента 	= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "СуммаСкидкиНаСертификат"); //Костенюк Александр 11.12.2014
	СуммаДокумента 						= ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "Сумма");
	//Костенюк Александр-Финиш 16.04.2013
	
	// Телефон, ТелефонДополнительный.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Если (Не мКонтактнаяИнформация = Неопределено) Тогда
			ТелефонДополнительныйПредставление = КонтактнаяИнформация().ТелефонДополнительный.Представление;
			ТелефонПредставление = КонтактнаяИнформация().Телефон.Представление;
		КонецЕсли;
	Иначе
		ТелефонДополнительныйПредставление = Неопределено;
		ТелефонПредставление = Неопределено;
	КонецЕсли;
	
	// ТребуемаяДатаНачалаПериода, ТребуемаяДатаРазделенияПериода, ТребуемаяДатаОкончанияПериода.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ТребуемаяДатаОкончанияПериода) Тогда
			ТребуемаяДатаОкончанияПериода = ПолучитьНеПустуюДату(ДатаНачалаПериода) + ОбщегоНазначения.ПолучитьЧисло(ПродолжительностьПроизводства) + ОбщегоНазначения.ПолучитьЧисло(ПродолжительностьДоставки);
		КонецЕсли;
		ТребуемаяДатаРазделенияПериода = ТребуемаяДатаОкончанияПериода - ОбщегоНазначения.ПолучитьЧисло(ПродолжительностьДоставки);
		ТребуемаяДатаНачалаПериода = ТребуемаяДатаРазделенияПериода - ОбщегоНазначения.ПолучитьЧисло(ПродолжительностьПроизводства);
	Иначе
		ТребуемаяДатаОкончанияПериода = Неопределено;
		ТребуемаяДатаРазделенияПериода = Неопределено;
		ТребуемаяДатаНачалаПериода = Неопределено;
	КонецЕсли;
	
	// ФактическаяДатаНачалаПериода.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Если Распечатан Тогда
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ФактическаяДатаНачалаПериода) Тогда
				ФактическаяДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(ФактическаяДатаОкончанияПериода), мТекущаяДата);
			КонецЕсли;
		Иначе
			ФактическаяДатаНачалаПериода = Неопределено;
		КонецЕсли;
	Иначе
		ФактическаяДатаНачалаПериода = Неопределено;
	КонецЕсли;
	
	// ФактическаяДатаОкончанияПериода.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ФактическаяДатаОкончанияПериода) Тогда
				ФактическаяДатаОкончанияПериода = ФактическаяДатаНачалаПериода + (Макс(ПолучитьНеПустуюДату(ФактическаяДатаНачалаПериода), мТекущаяДата) - ФактическаяДатаНачалаПериода) / 2 + 0.1;
			КонецЕсли;
		Иначе
			Если Не Распечатан Тогда
				ФактическаяДатаОкончанияПериода = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ФактическаяДатаОкончанияПериода = Неопределено;
	КонецЕсли;
	
	// ПричинаОтказа.
	Если Не ПометкаУдаления Тогда
		ПричинаОтказа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьШапку()

// Игорь
Процедура  УстановитьРаспечатанВыполненнДляПодчиненных(ТекущаяСтрока,  Распечатан, Выполненн )	
	
	Если  ТекущаяСтрока.Строки.Количество() > 0 Тогда 
		
		Для Каждого СтрокаДерева из ТекущаяСтрока.Строки Цикл
			
			СтрокаДерева.Распечатан =Распечатан;
			СтрокаДерева.Выполненн= Выполненн;
			
			Если  СтрокаДерева.Строки.Количество() > 0 Тогда 
				УстановитьРаспечатанВыполненнДляПодчиненных(СтрокаДерева, Распечатан, Выполненн);                       
			КонецЕсли;		
			
		КонецЦикла;    	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодготовитьТабличнуюЧастьТоварыИУслуги(РежимЗаписи, РежимПроведения) Экспорт
	
	// Состояния.
	ОдинОжидает = Ложь;
	ОдинВыполняется = Ложь;
	ОдинВыполнен = Ложь;
	ВсеВыполненны = Истина;
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			
			СкладПоУмолчанию = СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Склад;
			Если НЕ ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
				#Если не Сервер Тогда
					//Костенюк Александр-Старт 25.05.2012
					Если ОбщегоНазначения.РежимFrontOffice() Тогда
					//Костенюк Александр-Финиш 25.05.2012
						ТекущийРежимРаботы = ПолучитьСерверFrontOffice().ТекущийРежимРаботы();
						Если ЗначениеЗаполнено(ТекущийРежимРаботы) Тогда
							СкладПоУмолчанию = ТекущийРежимРаботы.Склад;
						КонецЕсли;
					//Костенюк Александр-Старт 25.05.2012
					КонецЕсли;
					//Костенюк Александр-Финиш 25.05.2012
				#КонецЕсли	
			КонецЕсли;
			СтрокаТабличнойЧасти.Склад = СкладПоУмолчанию;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	// Режим.
	ИнтернетРежим = ОбщегоНазначения.ПолучитьБулевоеСвойство(ДополнительныеСвойства, "ИнтернетРежим");
	
	// Табличные части.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(Товары); //Костенюк Александр-Закомментировано 18.05.2013 ТабличныеЧасти.Добавить(Услуги);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ПерваяСтрока = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			//Участие в производстве.
			Если СтрокаТабличнойЧасти.ВидНоменклатуры <> Перечисления.ТипыСтрокЗаказов.Товар  Тогда
				//Идентификатор.
				Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Идентификатор) Тогда
					СтрокаТабличнойЧасти.Идентификатор = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				НАйденаСтр = ТабличнаяЧасть.Найти(СтрокаТабличнойЧасти.Владелец, "Идентификатор");
				
				Если НАйденаСтр <> Неопределено Тогда
					СтрокаТабличнойЧасти.Распечатан = НАйденаСтр.Распечатан или Распечатан;
				ИНаче
					СтрокаТабличнойЧасти.Распечатан = Распечатан;
				КонецЕсли;
				
			Иначе
				УчаствуетВПроизводсте = (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Или 
				ИнтернетРежим Или (Не мНоменклатурныеГруппыПроизводства.Найти(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) = Неопределено);
				// Распечатан.
				СтрокаТабличнойЧасти.Распечатан = СтрокаТабличнойЧасти.Распечатан Или Распечатан Или 
				СтрокаТабличнойЧасти.Выполненн Или
				ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Или
				(Не УчаствуетВПроизводсте);
				Если Модуль=Перечисления.МодулиИПодсистемы.Ресторан
					И Не СтрокаТабличнойЧасти.Распечатан Тогда
					СтрокаТабличнойЧасти.Распечатан = СтрокаТабличнойЧасти.ПорядокПодачи>0
					ИЛИ (НЕ СтрокаТабличнойЧасти.Номенклатура.Услуга И СтрокаТабличнойЧасти.НаВынос);
				КонецЕсли;
				//Костенюк Александр-Старт 24.07.2012
				// Раздельная печать предчеков по гостям
				Если СтрокаТабличнойЧасти.НомерКлиента = 0 Тогда
					СтрокаТабличнойЧасти.ПречекРаспечатан = Истина;
				Иначе
					НайденнаяСтрока = Клиенты.Найти(СтрокаТабличнойЧасти.НомерКлиента, "НомерКлиента");
					Если НайденнаяСтрока <> Неопределено Тогда
						СтрокаТабличнойЧасти.ПречекРаспечатан = НайденнаяСтрока.ПречекРаспечатан;
					КонецЕсли;
				КонецЕсли;
				//Костенюк Александр-Финиш 24.07.2012
			КонецЕсли;
			
			// Чистяков Павел 03.09.2010 11:13:21 
			СтрокаТабличнойЧасти.Комментарий = СокрЛ(СтрокаТабличнойЧасти.Комментарий);
			
			// ВидНоменклатуры.
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ВидНоменклатуры) Тогда
				Если ПерваяСтрока Или (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.Цена)) Тогда
					СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар;
				Иначе
					СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор;
				КонецЕсли;
			КонецЕсли;
			
			// Выполненн и Выполняется.
			СтрокаТабличнойЧасти.Выполненн = СтрокаТабличнойЧасти.Выполненн Или Распечатан Или
			ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Или
			(Не УчаствуетВПроизводсте);
			
			// ДатаНачалаПериода.
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
				СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаОкончанияПериода), мТекущаяДата);
			КонецЕсли;
			
			// ДатаОкончанияПериода.
			Если СтрокаТабличнойЧасти.Выполненн Тогда
				Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
					СтрокаТабличнойЧасти.ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаНачалаПериода), мТекущаяДата);
				КонецЕсли;
			КонецЕсли;
			
			// НаВынос.
			Если (ТабличнаяЧасть = Товары) Тогда
				Если Модуль = Перечисления.МодулиИПодсистемы.Доставка Тогда
					СтрокаТабличнойЧасти.НаВынос = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// ПорядокПодачи.
			Если Модуль = Перечисления.МодулиИПодсистемы.Доставка Тогда
				СтрокаТабличнойЧасти.ПорядокПодачи = Неопределено;
			КонецЕсли;
			
			ОдинОжидает = ОдинОжидает Или (УчаствуетВПроизводсте И (Не СтрокаТабличнойЧасти.Распечатан) И (Не СтрокаТабличнойЧасти.Выполненн));
			ОдинВыполняется = ОдинВыполняется Или (УчаствуетВПроизводсте И СтрокаТабличнойЧасти.Распечатан И (Не СтрокаТабличнойЧасти.Выполненн));
			ОдинВыполнен = ОдинВыполнен Или (УчаствуетВПроизводсте И СтрокаТабличнойЧасти.Выполненн);
			ВсеВыполненны = ВсеВыполненны И СтрокаТабличнойЧасти.Выполненн;
			
			ПерваяСтрока = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// Шапка.
	Ожидает = ОдинОжидает И (ОдинВыполняется Или ОдинВыполнен);
	Выполняется = ОдинВыполняется;
	Выполненн = ВсеВыполненны;
	
КонецПроцедуры // ПодготовитьТабличнуюЧастьТоварыИУслуги()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, Заголовок)
	
	// Режим.
	Если ОбщегоНазначения.ПолучитьБулевоеСвойство(ДополнительныеСвойства, "ИнтернетРежим") Тогда
		Возврат;
	КонецЕсли;
	
	//// Обязательные.
	//Если (СтруктураОбязательныхПолей = Неопределено) Тогда
	//	СтруктураОбязательныхПолей = Новый Структура;
	//КонецЕсли;
	//СтруктураОбязательныхПолей.Вставить("Ответственный");
	//СтруктураОбязательныхПолей.Вставить("Ресторан");
	//СтруктураОбязательныхПолей.Вставить("ДатаНачалаПериода");
	
	//// Вызовем общую процедуру проверки.
	//ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	//
	//// Дополнительная проверка булевых типов.
	//Если СтруктураОбязательныхПолей.Свойство("Распечатан") Тогда
	//	Если Не Распечатан Тогда
	//		ОбщегоНазначения.СообщитьОбНезаполненомРеквизитеДокумента(ЭтотОбъект, "Распечатан", Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЕсли;
	
	//// Дополнительная проверка кореляции значений.
	//Если Не Отказ Тогда
	//	Если ЗначениеЗаполнено(ДатаНачалаПериода) И ЗначениеЗаполнено(ДатаОкончанияПериода) И (ДатаНачалаПериода > ДатаОкончанияПериода) Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().Реквизиты.ДатаНачалаПериода.Синоним + "» документа «" + Метаданные().Синоним + "» не может быть больше значения реквизита «" + Метаданные().Реквизиты.ДатаОкончанияПериода.Синоним + "».", Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части товары и услуги.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыИУслуги(СтруктураОбязательныхПолей, Отказ, Заголовок)
	
	// Режим.
	Если ОбщегоНазначения.ПолучитьБулевоеСвойство(ДополнительныеСвойства, "ИнтернетРежим") Тогда
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыИУслуги()

// Выполняет движения документа по регистрам состояний.
//
Процедура ДвиженияПоРегистрамСостояний(РежимПроведения, Отказ, Заголовок)
	
	//Костенюк Александр-Старт 14.05.2012
	ПравоИзменениеКонтактнойИнформацииЗаказов = УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИзменениеКонтактнойИнформацииЗаказов);
	//Костенюк Александр-Финиш 14.05.2012
	
	// Состояние документа.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не Проведен) И (Не ПометкаУдаления) Тогда
			НаборЗаписей.Прочитать();
			Если Булево(НаборЗаписей.Количество()) Тогда
				Запись = НаборЗаписей[0];
				
				// -- Изменение состояний.
				ИзмененРесторан = (Не Запись.Ресторан = Ресторан) Или (Не Запись.Модуль = Модуль);
				ИзмененаКонтактнаяИнформация = (Не мКонтактнаяИнформация = Неопределено);
				ИзмененАдресДоставки = ИзмененРесторан Или (ИзмененаКонтактнаяИнформация И (Не Запись.АдресДоставкиПоиск = КонтактнаяИнформация().АдресДоставки.Поиск));
				ИзмененМаршрутДоставки = ИзмененРесторан Или (ИзмененаКонтактнаяИнформация И ((Не Запись.АдресДоставкиУлица = АдресДоставкиУлица) Или (Не Запись.АдресДоставкиДом = АдресДоставкиДом)));
				ИзмененаСортировкаДата = ИзмененРесторан Или (Не Запись.ДатаНачалаПериода = ДатаНачалаПериода);
				ИзмененаСортировкаТребуемаяДатаНачалаПериода = ИзмененРесторан Или (Не Запись.ТребуемаяДатаНачалаПериода = ТребуемаяДатаНачалаПериода);
				ИзмененаСортировкаТребуемаяДатаОкончанияПериода = ИзмененРесторан Или (Не Запись.ТребуемаяДатаОкончанияПериода = ТребуемаяДатаОкончанияПериода);
				ИзмененаСортировкаТребуемаяДатаРазделенияПериода = ИзмененРесторан Или (Не Запись.ТребуемаяДатаРазделенияПериода = ТребуемаяДатаРазделенияПериода);
			Иначе
				Запись = НаборЗаписей.Добавить();
				
				// -- Изменение состояний.
				ИзмененРесторан = Истина;
				ИзмененаКонтактнаяИнформация = Истина;
				ИзмененАдресДоставки = Истина;
				ИзмененМаршрутДоставки = Истина;
				ИзмененаСортировкаДата = Истина;
				ИзмененаСортировкаТребуемаяДатаНачалаПериода = Истина;
				ИзмененаСортировкаТребуемаяДатаОкончанияПериода = Истина;
				ИзмененаСортировкаТребуемаяДатаРазделенияПериода = Истина;
			КонецЕсли;
			
			Запись.Документ = Ссылка;
			Запись.Модуль = Модуль;
			Запись.Ресторан = Ресторан;
			Запись.Сотрудник = Сотрудник;
			//Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
			//Костенюк Александр-Старт 14.05.2012
			Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) ИЛИ 
				(ПравоИзменениеКонтактнойИнформацииЗаказов = Перечисления.ПраваДоступаПользователей.Разрешить) ИЛИ
				(ПравоИзменениеКонтактнойИнформацииЗаказов = Перечисления.ПраваДоступаПользователей.Привилегированные)
				Тогда
			//Костенюк Александр-Финиш 14.05.2012
				Если ИзмененаКонтактнаяИнформация Тогда
					Запись.АдресДоставкиПоиск = КонтактнаяИнформация().АдресДоставки.Поиск;
					Запись.АдресДоставкиПредставление = АдресДоставкиПредставление;
					Запись.АдресДоставкиДом = АдресДоставкиДом;
					Запись.АдресДоставкиУлица = АдресДоставкиУлица;
					Запись.АдресДоставкиКомментарий = АдресДоставкиКомментарий;
				КонецЕсли;
			Иначе
				Запись.АдресДоставкиПоиск = Неопределено;
				Запись.АдресДоставкиПредставление = Неопределено;
				Запись.АдресДоставкиДом = Неопределено;
				Запись.АдресДоставкиУлица = Неопределено;
			КонецЕсли;
			Запись.Выполненн = Выполненн;
			Запись.Выполняется = Выполняется;
			Запись.Дата = Дата;
			Запись.ДатаНачалаПериода = ДатаНачалаПериода;
			Запись.ДатаОкончанияПериода = ДатаОкончанияПериода;
			Запись.Интернет = Интернет;
			Запись.КатегорияДокумента = КатегорияДокумента;
			Запись.КатегорияКонтрагента = КатегорияКонтрагента;
			Запись.КоличествоКлиентов = КоличествоКлиентов;
			Запись.Контрагент = Контрагент;
			Запись.КраткийСоставДокумента = КраткийСоставДокумента;
			Запись.КраткийСоставПроизводства = КраткийСоставПроизводства;
			//Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
			//Костенюк Александр-Старт 14.05.2012
			Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) ИЛИ 
				(ПравоИзменениеКонтактнойИнформацииЗаказов = Перечисления.ПраваДоступаПользователей.Разрешить) ИЛИ
				(ПравоИзменениеКонтактнойИнформацииЗаказов = Перечисления.ПраваДоступаПользователей.Привилегированные)
				Тогда
			//Костенюк Александр-Финиш 14.05.2012
				Если ИзмененМаршрутДоставки Тогда
					//Запись.МаршрутДоставки = УправлениеЗаказами.ПолучитьМаршрутДоставки(Ресторан, АдресДоставкиУлица, АдресДоставкиДом);
					//Костенюк Александр-Старт 14.05.2012
					Запись.МаршрутДоставки = МаршрутДоставки;
					//Костенюк Александр-Финиш 14.05.2012
				КонецЕсли;
			Иначе
				Запись.МаршрутДоставки = Неопределено;
			КонецЕсли;
			Запись.Номер = Номер;
			Запись.ПолныйНомерСтола = ПолныйНомерСтола;
			Запись.ПостфиксСтола = ПостфиксСтола;
			Запись.Распечатан = Распечатан;
			Запись.Состояние = Состояние;
			Запись.Стол = Стол;
			Запись.СуммаДокумента = СуммаДокумента;
			Запись.СуммаДокументаБезСкидок = СуммаДокументаБезСкидок;
			Запись.СуммаНаценкиДокумента = СуммаНаценкиДокумента;
			Запись.СуммаСкидкиДокумента = СуммаСкидкиДокумента;
			//Костенюк Александр-Старт 19.07.2012
			Запись.СуммаДепозитаДокумента = СуммаДепозитаДокумента;
			//Костенюк Александр-Финиш 19.07.2012
			//Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
			//Костенюк Александр-Старт 14.05.2012
			Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) ИЛИ 
				(ПравоИзменениеКонтактнойИнформацииЗаказов = Перечисления.ПраваДоступаПользователей.Разрешить) ИЛИ
				(ПравоИзменениеКонтактнойИнформацииЗаказов = Перечисления.ПраваДоступаПользователей.Привилегированные)
				Тогда
			//Костенюк Александр-Финиш 14.05.2012
				Если ИзмененаКонтактнаяИнформация Тогда
					Запись.ТелефонДополнительныйПоиск = КонтактнаяИнформация().ТелефонДополнительный.Поиск;
					Запись.ТелефонДополнительныйПредставление = ТелефонДополнительныйПредставление;
					Запись.ТелефонПоиск = КонтактнаяИнформация().Телефон.Поиск;
					Запись.ТелефонПредставление = ТелефонПредставление;
				КонецЕсли;
			Иначе
				Запись.ТелефонДополнительныйПоиск = Неопределено;
				Запись.ТелефонДополнительныйПредставление = Неопределено;
				Запись.ТелефонПоиск = Неопределено;
				Запись.ТелефонПредставление = Неопределено;
			КонецЕсли;
			Запись.ТребуемаяДатаНачалаПериода = ТребуемаяДатаНачалаПериода;
			Запись.ТребуемаяДатаОкончанияПериода = ТребуемаяДатаОкончанияПериода;
			Запись.ТребуемаяДатаРазделенияПериода = ТребуемаяДатаРазделенияПериода;
			Запись.ФактическаяДатаНачалаПериода = ФактическаяДатаНачалаПериода;
			Запись.ФактическаяДатаОкончанияПериода = ФактическаяДатаОкончанияПериода;
			Запись.ФиксированнаяТребуемаяДатаОкончанияПериода = ФиксированнаяТребуемаяДатаОкончанияПериода;
			Запись.Комментарий = Комментарий;
			// -- Компьютер.
			Если ДополнительныеСвойства.Свойство("Компьютер") Тогда
				Запись.Компьютер = ДополнительныеСвойства.Компьютер;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
	// Состояние сортировки документа.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеСортировкиДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не Проведен) И (Не ПометкаУдаления) Тогда
			НаборЗаписей.Прочитать();
			Если Булево(НаборЗаписей.Количество()) Тогда
				Запись = НаборЗаписей[0];
			Иначе
				Запись = НаборЗаписей.Добавить();
				
				// -- Изменение состояний.
				ИзмененаСортировкаДата = Истина;
				ИзмененаСортировкаТребуемаяДатаНачалаПериода = Истина;
				ИзмененаСортировкаТребуемаяДатаОкончанияПериода = Истина;
				ИзмененаСортировкаТребуемаяДатаРазделенияПериода = Истина;
			КонецЕсли;
			
			Запись.Документ = Ссылка;
			
			АлтернативнаяДатаДляСортировки = ПолучитьНеПустуюДату(ДатаНачалаПериода, Дата);
			Если (ИзмененаСортировкаДата = Истина) Тогда
				Запись.СортировкаДата = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоДате(АлтернативнаяДатаДляСортировки);
			КонецЕсли;
			Если (ИзмененаСортировкаТребуемаяДатаНачалаПериода = Истина) Тогда
				Запись.СортировкаТребуемаяДатаНачалаПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоДате(ПолучитьНеПустуюДату(ТребуемаяДатаНачалаПериода, АлтернативнаяДатаДляСортировки));
			КонецЕсли;
			Если (ИзмененаСортировкаТребуемаяДатаОкончанияПериода = Истина) Тогда
				Запись.СортировкаТребуемаяДатаОкончанияПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоДате(ПолучитьНеПустуюДату(ТребуемаяДатаОкончанияПериода, АлтернативнаяДатаДляСортировки));
			КонецЕсли;
			Если (ИзмененаСортировкаТребуемаяДатаРазделенияПериода = Истина) Тогда
				Запись.СортировкаТребуемаяДатаРазделенияПериода = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоДате(ПолучитьНеПустуюДату(ТребуемаяДатаРазделенияПериода, АлтернативнаяДатаДляСортировки));
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
	// Состояние товаров и услуг.
	Если (мРабочиеЦентры = Неопределено) Тогда
		МассивНоменклатурыТребующейПродолжительностьиПроизводства = Новый Массив;
	Иначе
		МассивНоменклатурыТребующейПродолжительностьиПроизводства = мРабочиеЦентры.Позиции().ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
	МассивИдентификаторовНеВПроизводстве = Новый Массив;
	
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеНоменклатурыРеализацийТоваровУслуг.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не Распечатан) И (Не Проведен) И (Не ПометкаУдаления) Тогда
			
			// -- Табличные части.
			ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(Товары); //Костенюк Александр-Закомментировано 22.04.2013 ТабличныеЧасти.Добавить(Услуги);
			
			// ---- Настройки производства.
			ТаблицаПроизводственныеНастройки = НастройкиПроизводства().ПроизводственныеНастройки(мПроизводственныеГруппы);
			
			// ---- Продолжительность производства.
			Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					Если Не СтрокаТабличнойЧасти.Распечатан Тогда
						МассивНоменклатурыТребующейПродолжительностьиПроизводства.Добавить(СтрокаТабличнойЧасти.Номенклатура);
					КонецЕсли;
					Если (Не СтрокаТабличнойЧасти.Распечатан) Или СтрокаТабличнойЧасти.Выполненн Тогда
						МассивИдентификаторовНеВПроизводстве.Добавить(СтрокаТабличнойЧасти.Идентификатор);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если Булево(МассивНоменклатурыТребующейПродолжительностьиПроизводства.Количество()) Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Номенклатура.Ссылка,
				|	Номенклатура.ПродолжительностьПроизводства
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Ссылка В(&МассивНоменклатурыТребующейПродолжительностьиПроизводства)");
				Запрос.УстановитьПараметр("МассивНоменклатурыТребующейПродолжительностьиПроизводства", МассивНоменклатурыТребующейПродолжительностьиПроизводства);
				ТаблицаПродолжительностиПроизводства = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
			
			// -- Перенос данных.
			Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					
					Запись = НаборЗаписей.Добавить();
					Запись.Документ = Ссылка;
					Запись.Идентификатор = СтрокаТабличнойЧасти.Идентификатор;
					Запись.Ресторан = Ресторан;
					Запись.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
					Запись.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
					Запись.ВидНоменклатуры = СтрокаТабличнойЧасти.ВидНоменклатуры;
					Запись.Выполненн = СтрокаТабличнойЧасти.Выполненн;
					Запись.Дата = Дата;
					Запись.ДатаНачалаПериода = СтрокаТабличнойЧасти.ДатаНачалаПериода;
					Запись.ДатаОкончанияПериода = СтрокаТабличнойЧасти.ДатаОкончанияПериода;
					
					// Единица измерения.									
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", Ссылка.Метаданные(), ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти)) Тогда						
						Запись.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
					КонецЕсли;	
					
					Запись.Количество		= СтрокаТабличнойЧасти.Количество;
					Запись.Модуль			= Модуль;
					Запись.НаВынос			= НЕ СтрокаТабличнойЧасти.Номенклатура.Услуга
					И СтрокаТабличнойЧасти.НаВынос;
					Запись.Номер			= Номер;
					Запись.ПолныйНомерСтола = ПолныйНомерСтола;
					Запись.ПорядокПодачи	= СтрокаТабличнойЧасти.ПорядокПодачи;
					Запись.ПостфиксСтола	= ПостфиксСтола;
					Запись.Распечатан		= СтрокаТабличнойЧасти.Распечатан;
					Запись.Стол				= Стол;
					Запись.Комментарий		= СтрокаТабличнойЧасти.Комментарий;
					//Костенюк Александр-Старт 31.07.2012
					Запись.ПречекРаспечатан	= СтрокаТабличнойЧасти.ПречекРаспечатан;
					//Костенюк Александр-Финиш 31.07.2012
					
					Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
						
						// ---- Настройки производства.
						СтрокаТаблицы = ТаблицаПроизводственныеНастройки.Найти(СтрокаТабличнойЧасти.НоменклатурнаяГруппа, "НоменклатурнаяГруппа");
						Если (Не СтрокаТаблицы = Неопределено) Тогда
							Запись.ТребуемаяДатаОкончанияПериода = СтрокаТаблицы.ТребуемаяДатаОкончанияПериода;
							Запись.ТребуемаяДатаРазделенияПериода = СтрокаТаблицы.ТребуемаяДатаРазделенияПериода;
							Запись.ТребуемаяДатаНачалаПериода = СтрокаТаблицы.ТребуемаяДатаНачалаПериода;
						Иначе
							Запись.ТребуемаяДатаОкончанияПериода = ТребуемаяДатаРазделенияПериода;
							Запись.ТребуемаяДатаРазделенияПериода = Запись.ТребуемаяДатаОкончанияПериода - ОбщегоНазначения.ПолучитьЧисло('00010101000500');
							Запись.ТребуемаяДатаНачалаПериода = Запись.ТребуемаяДатаРазделенияПериода;
						КонецЕсли;
						
						// ---- Продолжительность производства и доставки.
						Если Не СтрокаТабличнойЧасти.Распечатан Тогда
							СтрокаТаблицы = ТаблицаПродолжительностиПроизводства.Найти(СтрокаТабличнойЧасти.Номенклатура, "Ссылка");
							Если (Не СтрокаТаблицы = Неопределено) Тогда
								Запись.ПродолжительностьПроизводства = СтрокаТаблицы.ПродолжительностьПроизводства;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
	// Состояние рабочих центров.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		МассивИдентификаторовЧерныйБелыйСписок = Новый Массив; //Костенюк Александр 01.07.2013
		
		Если (Не Распечатан) И (Не Проведен) И (Не ПометкаУдаления) Тогда
			
			// -- Удаляемые позиции.
			МассивУдаляемых = Новый Массив;
			
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если (Не МассивИдентификаторовНеВПроизводстве.Найти(Запись.Идентификатор) = Неопределено) Тогда
					МассивУдаляемых.Добавить(Запись);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Запись Из МассивУдаляемых Цикл
				НаборЗаписей.Удалить(Запись);
			КонецЦикла;
			
			// -- Добавляемые позиции.
			Если (Не мРабочиеЦентры = Неопределено) Тогда
				
				СоответсвиеШтрихкодов = Новый Соответствие; МассивШтрихКодовНеВРегистре = Новый Массив; ПрефиксВстречки = Константы.ПрефиксВстречки.Получить();
				
				Для Каждого ПозицияРабочегоЦентра Из РабочиеЦентры().Позиции() Цикл
					
					Если ПозицияРабочегоЦентра.Возврат Тогда
						Продолжить;
					КонецЕсли;
					
					Если (Не МассивИдентификаторовНеВПроизводстве.Найти(ПозицияРабочегоЦентра.Идентификатор) = Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					
					#Если Клиент Тогда
						
						// ---- Штрихкод.
						Если ЗначениеЗаполнено(ПрефиксВстречки) Тогда
							СтруктураШтрихкода = СоответсвиеШтрихкодов[ПозицияРабочегоЦентра.РабочийЦентр];
							Если (СтруктураШтрихкода = Неопределено) Тогда
								
								ПрефиксШтрихкода = ПрефиксВстречки + Формат(Цел((мТекущаяДата - НачалоГода(мТекущаяДата)) / 60) + 100000, "ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ="); // Префикс штрих-кода = ПрефиксВстречки и количество минут прошедшее с начала года + 100 000.
								
								СтруктураШтрихкода = Новый Структура("Штрихкод,ТипШтрихкода",
								РаботаСТорговымОборудованием.СформироватьПроизвольныйШтрихКодEAN(ПрефиксШтрихкода, ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13, "СостояниеРабочихЦентровРеализацийТоваровУслуг", МассивШтрихКодовНеВРегистре),
								ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
								
								СоответсвиеШтрихкодов[ПозицияРабочегоЦентра.РабочийЦентр] = СтруктураШтрихкода;	
								
								МассивШтрихКодовНеВРегистре.Добавить(СтруктураШтрихкода.Штрихкод);	
								
							КонецЕсли;
							ПозицияРабочегоЦентра.Штрихкод = СтруктураШтрихкода.Штрихкод;
							ПозицияРабочегоЦентра.ТипШтрихкода = СтруктураШтрихкода.ТипШтрихкода;
						КонецЕсли;
						
					#КонецЕсли
					
					Запись = НаборЗаписей.Добавить();
					Запись.Документ = Ссылка;
					Запись.РабочийЦентр = ПозицияРабочегоЦентра.РабочийЦентр;
					Запись.Штрихкод = ПозицияРабочегоЦентра.Штрихкод;
					Запись.ТипШтрихкода = ПозицияРабочегоЦентра.ТипШтрихкода;
					Запись.Идентификатор = ПозицияРабочегоЦентра.Идентификатор;
					Запись.Ресторан = Ресторан;
					Запись.Номенклатура = ПозицияРабочегоЦентра.Номенклатура;
					Запись.НоменклатурнаяГруппа = ПозицияРабочегоЦентра.НоменклатурнаяГруппа;
					Запись.ВидНоменклатуры = ПозицияРабочегоЦентра.ВидНоменклатуры;
					Запись.Дата = Дата;
					Запись.ДатаНачалаПериода = ПозицияРабочегоЦентра.ДатаНачалаПериода;
					Запись.ДатаОкончанияПериода = ПозицияРабочегоЦентра.ДатаОкончанияПериода;
					Запись.ЕдиницаИзмерения = ПозицияРабочегоЦентра.ЕдиницаИзмерения;
					Запись.Количество = ПозицияРабочегоЦентра.Количество;
					Запись.Модуль = Модуль;
					Запись.НаВынос = ПозицияРабочегоЦентра.НаВынос;
					Запись.Номер = Номер;
					Запись.ПолныйНомерСтола = ПолныйНомерСтола;
					Запись.ПорядокПодачи = ПозицияРабочегоЦентра.ПорядокПодачи;
					Запись.ПостфиксСтола = ПостфиксСтола;
					Запись.Стол = Стол;
					Запись.Комментарий = ПозицияРабочегоЦентра.Комментарий;
					
					//Костенюк Александр-Старт 01.07.2013
					// Автоматическое изменение количества блюда в черном/белом списке при сохранении заказа
					// Каждое блюдо может принадлежать нескольким рабочим центрам, поэтому блюда, которые уже обработаны пропускаем 
					Индекс = МассивИдентификаторовЧерныйБелыйСписок.Найти(ПозицияРабочегоЦентра.Идентификатор);
					Если Индекс = Неопределено Тогда
						РегистрыСведений.ЧерныйСписокНоменклатуры.ИзменитьКоличествоЧерныйБелыйСписок(Ресторан, ПозицияРабочегоЦентра.Номенклатура, ПозицияРабочегоЦентра.Количество, "ЧерныйСписокНоменклатуры");
						РегистрыСведений.ЧерныйСписокНоменклатуры.ИзменитьКоличествоЧерныйБелыйСписок(Ресторан, ПозицияРабочегоЦентра.Номенклатура, ПозицияРабочегоЦентра.Количество, "БелыйСписокНоменклатуры");
						МассивИдентификаторовЧерныйБелыйСписок.Добавить(ПозицияРабочегоЦентра.Идентификатор);
					КонецЕсли;
					//Костенюк Александр-Финиш 01.07.2013
					
					Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
						
						// ---- Настройки производства.
						Запись.ТребуемаяДатаНачалаПериода = мТекущаяДата;
						
						// ---- Продолжительность производства и доставки.
						СтрокаТаблицы = ТаблицаПродолжительностиПроизводства.Найти(ПозицияРабочегоЦентра.Номенклатура, "Ссылка");
						Если (Не СтрокаТаблицы = Неопределено) Тогда
							Запись.ПродолжительностьПроизводства = СтрокаТаблицы.ПродолжительностьПроизводства;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
		//Костенюк Александр-Старт 12.10.2012
		// Печать пречека непосредственно, без предварительного сохранения
		Если Распечатан И (НЕ Проведен) И (НЕ ПометкаУдаления) Тогда
			// -- Добавляемые позиции.
			Если (НЕ мРабочиеЦентры = Неопределено) Тогда
				
				Для Каждого ПозицияРабочегоЦентра Из РабочиеЦентры().Позиции() Цикл
					
					Если ПозицияРабочегоЦентра.Возврат Тогда
						Продолжить;
					КонецЕсли;
					
					Если (НЕ МассивИдентификаторовНеВПроизводстве.Найти(ПозицияРабочегоЦентра.Идентификатор) = Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					
					//Костенюк Александр-Старт 01.07.2013
					// Автоматическое изменение количества блюда в черном/белом списке при сохранении заказа
					// Каждое блюдо может принадлежать нескольким рабочим центрам, поэтому блюда, которые уже обработаны пропускаем 
					Индекс = МассивИдентификаторовЧерныйБелыйСписок.Найти(ПозицияРабочегоЦентра.Идентификатор);
					Если Индекс = Неопределено Тогда
						РегистрыСведений.ЧерныйСписокНоменклатуры.ИзменитьКоличествоЧерныйБелыйСписок(Ресторан, ПозицияРабочегоЦентра.Номенклатура, ПозицияРабочегоЦентра.Количество, "ЧерныйСписокНоменклатуры");
						РегистрыСведений.ЧерныйСписокНоменклатуры.ИзменитьКоличествоЧерныйБелыйСписок(Ресторан, ПозицияРабочегоЦентра.Номенклатура, ПозицияРабочегоЦентра.Количество, "БелыйСписокНоменклатуры");
						МассивИдентификаторовЧерныйБелыйСписок.Добавить(ПозицияРабочегоЦентра.Идентификатор);
					КонецЕсли;
					//Костенюк Александр-Финиш 01.07.2013
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		//Костенюк Александр-Финиш 12.10.2012
		
	КонецЕсли;
	
	// Состояние документов оснований накладны на доставку.
	Если Не Отказ Тогда
		
		Востановить = Ложь; Стереть = Ложь;
		
		
		НаборЗаписей = РегистрыСведений.СостояниеДокументовОснованийНакладныхНаДоставку.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(Ссылка);
		
		Если Проведен Или ПометкаУдаления Тогда
			НаборЗаписей.Загрузить(УправлениеЗаказами.ПолучитьНакладныеНаДоставку(Ссылка, Ложь));
		Иначе
			НаборЗаписей.Загрузить(УправлениеЗаказами.ПолучитьНакладныеНаДоставку(Ссылка, Неопределено));
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамСостояний()

// Выполняет движения документа по регистрам сведений.
//
Процедура ДвиженияПоРегистрамСведений(РежимПроведения, Отказ, Заголовок)
	
	Перем СинонимОбъекта;
	
	// Комментарии номенклатуры.
	Если Не Отказ Тогда
		
		Массив			= Новый Массив;
		ТабличныеЧасти	= Новый Массив;
		ТабличныеЧасти.Добавить(Товары);
		//ТабличныеЧасти.Добавить(Услуги); //Костенюк Александр-Закомментировано 22.04.2013
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				//Строка = СокрЛ(СтрокаТабличнойЧасти.Комментарий);
				Строка = НРег(СокрЛП(СтрокаТабличнойЧасти.Комментарий)); //Костенюк Александр 21.11.2013
				Если НЕ ПустаяСтрока(Строка)
					И Массив.Найти(Строка)=Неопределено Тогда
					Массив.Добавить(Строка);
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
		
		Если Массив.Количество()>0 Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КомментарииНоменклатуры.Комментарий
			|ИЗ
			|	РегистрСведений.КомментарииНоменклатуры КАК КомментарииНоменклатуры
			|ГДЕ
			|	КомментарииНоменклатуры.Комментарий В (&Комментарий)"
			);
			Запрос.УстановитьПараметр("Комментарий",Массив);
			
			Существующие = Запрос.Выполнить().Выгрузить();
			
			Для каждого Строка Из Существующие Цикл
				//НайденныйИндекс = Массив.Найти(Строка.Комментарий);
				НайденныйИндекс = Массив.Найти(НРег(СокрЛП(Строка.Комментарий))); //Костенюк Александр 16.10.2013
				Если НайденныйИндекс<>Неопределено Тогда
					Массив.Удалить(НайденныйИндекс);
				КонецЕсли; 
			КонецЦикла;
			
			НаборЗаписей = РегистрыСведений.КомментарииНоменклатуры.СоздатьНаборЗаписей();
			Для каждого Строка Из Массив Цикл
				Запись = НаборЗаписей.Добавить();
				//Запись.Комментарий = Строка;
				Запись.Комментарий = СокрЛП(Строка); //Костенюк Александр 21.11.2013
			КонецЦикла;
			//НаборЗаписей.Записать(Ложь);
			
			//Костенюк Александр-Старт 14.11.2012
			Попытка
				НаборЗаписей.Записать(Ложь);
			Исключение
				Если ОбщегоНазначения.РежимFrontOffice() Тогда
					FrontOffice.ВывестиПредупреждение(ОписаниеОшибки());
				Иначе
					Сообщить(ОписаниеОшибки());
				КонецЕсли;
			КонецПопытки;
			//Костенюк Александр-Финиш 14.11.2012
			
		КонецЕсли; 
		
	КонецЕсли;
	
	// Синонимы объектов.
	Если Не Отказ Тогда
		Если ДополнительныеСвойства.Свойство("СинонимОбъекта", СинонимОбъекта) Тогда
			
			Запись = РегистрыСведений.СинонимыОбъектов.СоздатьМенеджерЗаписи();
			Запись.ИнформационнаяСистема = СинонимОбъекта.ИнформационнаяСистема;
			Запись.Объект = Ссылка;
			Запись.Идентификатор = СинонимОбъекта.Идентификатор;
			
			Попытка
				Запись.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , РегистрыСведений.СинонимыОбъектов.СоздатьНаборЗаписей(), ЭтотОбъект);
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамСведений()

// Выполняет движения документа по регистрам учета.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
	
	// Табличные части.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить("Товары"); //Костенюк Александр-Закомментировано 30.04.2013 ТабличныеЧасти.Добавить("Услуги");
	
	// Рассчет.
	Если Не Отказ Тогда
		
		Если ЗначениеЗаполнено(Сделка) Тогда
			СделкаВДвижениях = Сделка;
		Иначе
			СделкаВДвижениях = Ссылка;
		КонецЕсли;
		
		ВладелецДисконтнойКарты = ДисконтнаяКарта.ВладелецКарты;
		Если (Не ТипЗнч(ВладелецДисконтнойКарты) = Тип("СправочникСсылка.Контрагенты")) Тогда
			ВладелецДисконтнойКарты = Неопределено;
		КонецЕсли;
		
		//СводнаяТаблица = ОбработкаТабличныхЧастей.ПолучитьСводнуюТаблицуТабличныхЧастей(ЭтотОбъект, ТабличныеЧасти, "Номенклатура,НоменклатурнаяГруппа,Организация,Количество,Цена,ПлановаяСебестоимость,СтавкаНДС,ПенсионныйФонд,СуммаБезСкидок,СуммаНаценки,СуммаСкидки,Сумма,СуммаНДС");
		СводнаяТаблица = ОбработкаТабличныхЧастей.ПолучитьСводнуюТаблицуТабличныхЧастей(ЭтотОбъект, ТабличныеЧасти, "Номенклатура,НоменклатурнаяГруппа,ГруппаБлюда,Организация,ТипАкции,Компьютер,НомерКлиента,НаВынос,Количество,КоличествоУточненное,Цена,ПлановаяСебестоимость,СтавкаНДС,ПенсионныйФонд,СуммаБезСкидок,СуммаНаценки,СуммаСкидки,СуммаСертификата,СуммаСкидкиНаСертификат,Сумма,СуммаНДС,СуммаАкцизногоНалога"); //Костенюк Александр 17.01.2017
		
		СводнаяТаблица.Колонки.Добавить("ТипКонтрагента"); СоответсвиеТиповКонтрагентов = Новый Соответствие;
		Для Каждого СтрокаТабличнойЧасти Из Клиенты Цикл СоответсвиеТиповКонтрагентов[СтрокаТабличнойЧасти.НомерКлиента] = СтрокаТабличнойЧасти.ТипКонтрагента; КонецЦикла; 
		Для Каждого СтрокаТаблицы Из СводнаяТаблица Цикл СтрокаТаблицы.ТипКонтрагента = СоответсвиеТиповКонтрагентов[СтрокаТаблицы.НомерКлиента]; КонецЦикла; 
		
		
		
		СводнаяТаблицаВзаиморасчетовСКонтрагентом = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(СводнаяТаблица, "Организация", "Сумма");
		
		//СводнаяТаблицаПродажи = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(СводнаяТаблица, "Номенклатура,НоменклатурнаяГруппа,Организация,СтавкаНДС,ПенсионныйФонд", "Количество,СуммаБезСкидок,СуммаНаценки,СуммаСкидки,Сумма,СуммаНДС");
		СводнаяТаблицаПродажи = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(СводнаяТаблица, "Номенклатура,НоменклатурнаяГруппа,ГруппаБлюда,Организация,СтавкаНДС,ПенсионныйФонд,ТипАкции,ТипКонтрагента,Компьютер,НаВынос", "Количество,КоличествоУточненное,СуммаБезСкидок,СуммаНаценки,СуммаСкидки,СуммаСертификата,СуммаСкидкиНаСертификат,Сумма,СуммаНДС,СуммаАкцизногоНалога"); //Костенюк Александр 17.01.2017
		
		//СводнаяТаблицаПродажиСебестоимость = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(СводнаяТаблица, "Номенклатура,НоменклатурнаяГруппа,Организация,СтавкаНДС,ПенсионныйФонд,ПлановаяСебестоимость", "Количество,СуммаБезСкидок");
		СводнаяТаблицаПродажиСебестоимость = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(СводнаяТаблица, "Номенклатура,НоменклатурнаяГруппа,ГруппаБлюда,Организация,СтавкаНДС,ПенсионныйФонд,ПлановаяСебестоимость", "Количество,СуммаБезСкидок"); //Костенюк Александр 07.08.2015
		
		СводнаяТаблицаИсполнителей = ПолучитьСводнуюТаблицуИсполнителей();
		
	КонецЕсли;
	
	// ВзаиморасчетыСКонтрагентами.
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСКонтрагентами.Очистить();
		
		Для Каждого СтрокаТаблицы Из СводнаяТаблицаВзаиморасчетовСКонтрагентом Цикл
			Если Не Булево(СтрокаТаблицы.Сумма) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
			Движение.Период = Дата;
			Движение.Сделка = СделкаВДвижениях;
			Движение.Ресторан = Ресторан;
			Движение.Организация = СтрокаТаблицы.Организация;
			Движение.Контрагент = Контрагент;
			Движение.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
		КонецЦикла;
		
		Попытка
			Движения.ВзаиморасчетыСКонтрагентами.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.ВзаиморасчетыСКонтрагентами, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
	// FrontOffice 26.01.2012 17:01:03
	// Остатки по Дисконтным Картам
	//ДвиженияДенежныеСредстваДисконтныхвКарт();
	
	// ПродажиПоДисконтнымКартам.
	Если Не Отказ Тогда
		Движения.ПродажиПоДисконтнымКартам.Очистить();
		
		Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
			Движение = Движения.ПродажиПоДисконтнымКартам.Добавить();
			Движение.Период = Дата;
			Движение.ДокументРегистратор = Ссылка;
			Движение.Ресторан = Ресторан; //Костенюк Александр 11.03.2015
			Движение.ДисконтнаяКарта = ДисконтнаяКарта;
			Движение.ВладелецДисконтнойКарты = ВладелецДисконтнойКарты;
			Движение.Сумма = СуммаДокумента;
			Движение.СуммаБезСкидок = СуммаДокументаБезСкидок;
		КонецЕсли;
		
		Попытка
			Движения.ПродажиПоДисконтнымКартам.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.ПродажиПоДисконтнымКартам, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
	//Костенюк Александр-Старт 11.12.2014
	// ПродажиПоСертификатам
	Если НЕ Отказ Тогда
		Движения.ПродажиПоСертификатам.Очистить();
		Если ЗначениеЗаполнено(Сертификат) Тогда
			Движение 				= Движения.ПродажиПоСертификатам.Добавить();
			Движение.Период 		= Дата;
			Движение.Ресторан 		= Ресторан;
			Движение.Сертификат 	= Сертификат;
			Движение.Сумма 			= СуммаДокумента;
			Движение.СуммаБезСкидок = СуммаДокументаБезСкидок;
		КонецЕсли;
		Попытка
			Движения.ПродажиПоСертификатам.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.ПродажиПоСертификатам, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	//Костенюк Александр-Финиш 11.12.2014
		
	// ПредоставленныеСкидки.
	Если Не Отказ Тогда
		Движения.ПредоставленныеСкидки.Очистить();
		
		//Если Булево(СуммаНаценкиДокумента + СуммаСкидкиДокумента) Тогда
		Если Булево(СуммаНаценкиДокумента + СуммаСкидкиДокумента + СуммаДепозитаДокумента + СуммаСертификатаДокумента) Тогда //Костенюк Александр 14.01.2015
			Если Булево(Скидки.Количество()) Тогда
				
				Для Каждого СтрокаСкидок Из Скидки Цикл
					//Если Не Булево(СтрокаСкидок.СуммаНаценки + СтрокаСкидок.СуммаСкидки) Тогда
					Если Не Булево(СтрокаСкидок.СуммаНаценки + СтрокаСкидок.СуммаСкидки + СтрокаСкидок.СуммаДепозита + СтрокаСкидок.СуммаСертификата) Тогда //Костенюк Александр 14.01.2015
						Продолжить;
					КонецЕсли;
					
					Движение = Движения.ПредоставленныеСкидки.Добавить();
					Движение.Период = Дата;
					Движение.Скидка = СтрокаСкидок.СкидкаНаценка;
					Движение.ДокументСкидки = Ссылка;
					Движение.ПолучательСкидки = Контрагент;
					Движение.Ресторан = Ресторан;
					Движение.Сотрудник = Сотрудник;
					Движение.СуммаСкидки = СтрокаСкидок.СуммаСкидки;
					Движение.СуммаНаценки = СтрокаСкидок.СуммаНаценки;
					Движение.СуммаДепозита = СтрокаСкидок.СуммаДепозита; //Костенюк Александр 19.07.2012
					Движение.СуммаСертификата = СтрокаСкидок.СуммаСертификата; //Костенюк Александр 14.01.2015
				КонецЦикла;
				
			Иначе
				
				Движение = Движения.ПредоставленныеСкидки.Добавить();
				Движение.Период = Дата;
				Движение.Скидка = Неопределено;
				Движение.ДокументСкидки = Ссылка;
				Движение.ПолучательСкидки = Контрагент;
				Движение.Ресторан = Ресторан;
				Движение.Сотрудник = Сотрудник;
				Движение.СуммаСкидки = СуммаСкидкиДокумента;
				Движение.СуммаНаценки = СуммаНаценкиДокумента;
				Движение.СуммаДепозита = СуммаДепозитаДокумента; //Костенюк Александр 19.07.2012
				Движение.СуммаСертификата = СуммаСертификатаДокумента; //Костенюк Александр 14.01.2015
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Движения.ПредоставленныеСкидки.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.ПредоставленныеСкидки, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
	// Продажи.
	Если Не Отказ Тогда
		Движения.Продажи.Очистить();
		
		Для Каждого СтрокаТаблицы Из СводнаяТаблицаПродажи Цикл
			Если Не Булево(СтрокаТаблицы.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.Продажи.Добавить();
			Движение.Период = Дата;
			Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
			Движение.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
			Движение.ГруппаБлюда = СтрокаТаблицы.ГруппаБлюда; //Костенюк Александр 07.08.2015
			Движение.Сделка = СделкаВДвижениях;
			Движение.ДокументПродажи = Ссылка;
			Движение.Ресторан = Ресторан;
			Движение.Организация = СтрокаТаблицы.Организация;
			Движение.Контрагент = Контрагент;
			Движение.Оплата = Оплата;
			Движение.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			Движение.ПенсионныйФонд = СтрокаТаблицы.ПенсионныйФонд;
			Движение.Сотрудник = Сотрудник;
			Движение.ТипКонтрагента = СтрокаТаблицы.ТипКонтрагента;
			Движение.Количество = СтрокаТаблицы.Количество;
			Движение.КоличествоУточненное = СтрокаТаблицы.КоличествоУточненное; //Костенюк Александр 17.01.2017
			Движение.Стоимость = СтрокаТаблицы.Сумма;
			Движение.СтоимостьБезСкидок = СтрокаТаблицы.СуммаБезСкидок;
			Движение.СуммаНаценки = СтрокаТаблицы.СуммаНаценки;
			Движение.СуммаСкидки = СтрокаТаблицы.СуммаСкидки;
			Движение.НДС = СтрокаТаблицы.СуммаНДС;
			Движение.АкцизныйНалог = СтрокаТаблицы.СуммаАкцизногоНалога; //Костенюк Александр 29.01.2015
			
			//Костенюк Александр-Старт 24.05.2012
			Движение.ТипАкции = СтрокаТаблицы.ТипАкции;
			Движение.Компьютер = СтрокаТаблицы.Компьютер;
			Движение.НаВынос = СтрокаТаблицы.НаВынос;
			//Костенюк Александр-Финиш 24.05.2012
			
			//Костенюк Александр-Старт 11.12.2014
			Движение.СуммаСертификата = СтрокаТаблицы.СуммаСертификата;
			Движение.СуммаСкидкиНаСертификат = СтрокаТаблицы.СуммаСкидкиНаСертификат;
			//Костенюк Александр-Финиш 11.12.2014
			
		КонецЦикла;
		
		Попытка
			Движения.Продажи.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.Продажи, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
	// ПродажиСебестоимость.
	Если Не Отказ Тогда
		Движения.ПродажиСебестоимость.Очистить();
		
		Если мВестиУчетСебестоимости Тогда
			Для Каждого СтрокаТаблицы Из СводнаяТаблицаПродажиСебестоимость Цикл
				Если Не Булево(СтрокаТаблицы.Количество) Тогда
					Продолжить;
				КонецЕсли;
				
				СтоимостьСебестоимости = СтрокаТаблицы.Количество * СтрокаТаблицы.ПлановаяСебестоимость;
				НДССебестоимости = Ценообразование.РассчитатьСуммуНДС(СтоимостьСебестоимости, Истина, Истина, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
				
				Движение = Движения.ПродажиСебестоимость.Добавить();
				Движение.Период = Дата;
				Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
				Движение.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
				Движение.ГруппаБлюда = СтрокаТаблицы.ГруппаБлюда; //Костенюк Александр 07.08.2015
				Движение.Сделка = СделкаВДвижениях;
				Движение.ДокументПродажи = Ссылка;
				Движение.Ресторан = Ресторан;
				Движение.Организация = СтрокаТаблицы.Организация;
				Движение.Количество = СтрокаТаблицы.Количество;
				Движение.Стоимость = СтоимостьСебестоимости;
				Движение.НДС = НДССебестоимости;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			Движения.ПродажиСебестоимость.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.ПродажиСебестоимость, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
	// Исполнители.
	Если Не Отказ Тогда
		Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
			
			НаборЗаписей = РегистрыСведений.Исполнители.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументПродажи.Установить(Ссылка);
			
			Для Каждого СтрокаТаблицы Из СводнаяТаблицаИсполнителей Цикл
				Запись = НаборЗаписей.Добавить();
				Запись.Дата = Дата;
				Запись.Сотрудник = СтрокаТаблицы.Сотрудник;
				Запись.Сделка = СделкаВДвижениях;
				Запись.ДокументПродажи = Ссылка;
				Запись.ДокументИсполнения = СтрокаТаблицы.ДокументИсполнения;
				Запись.Ресторан = СтрокаТаблицы.Ресторан;
				Запись.Стоимость = СуммаДокумента;
				Запись.СтоимостьБезСкидок = СуммаДокументаБезСкидок;
				Запись.СуммаНаценки = СуммаНаценкиДокумента;
				Запись.СуммаСкидки = СуммаСкидкиДокумента;
				Запись.СуммаДепозита = СуммаДепозитаДокумента; //Костенюк Александр 19.07.2012
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, Заголовок, , НаборЗаписей, ЭтотОбъект);
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(ДисконтнаяКарта) и ДисконтнаяКарта.ВидДисконтнойКарты.Локальная Тогда	
			Запись = Движения.РегистрРегистрацииАвтоматическихСкидок.Добавить(); 
			Запись.Регистратор = Ссылка;	
			Запись.Период = Дата;	
			Запись.ИнформационнаяКарта = ДисконтнаяКарта;
			Запись.Выгружалась = Ложь;
			Движения.РегистрРегистрацииАвтоматическихСкидок.Записать();
		КонецЕсли;					
	КонецЕсли;
	
	//Костенюк Александр-Старт 19.09.2012
	// ДенежныеСредстваДисконтныхКарт
	ДвиженияДенежныеСредстваДК(Отказ);
	//Костенюк Александр-Финиш 19.09.2012
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Выполняет удаление движения документа по регистрам учета.
//
Процедура УдалениеДвиженияПоРегистрам(Отказ, Заголовок)
	
	// Исполнители.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.Исполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументПродажи.Установить(Ссылка);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, Заголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // УдалениеДвиженияПоРегистрам()

// Выполняет запись контрагента.
//
Процедура ЗаписьКонтрагента(Отказ, Заголовок)
	
	//Костенюк Александр-Старт 20.05.2013
	Если Модуль <> Перечисления.МодулиИПодсистемы.Доставка Тогда
		Возврат;
	КонецЕсли;
	//Костенюк Александр-Финиш 20.05.2013
	
	// Отказ.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Запись.
	Если мКонтрагент <> Неопределено Тогда
		Контрагент().Записать(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ЗаписьКонтрагента()

// Выполняет запись события.
//
Процедура ЗаписьСобытия(Отказ, Заголовок)
	
	//Костенюк Александр-Старт 20.05.2013
	Если Модуль <> Перечисления.МодулиИПодсистемы.Доставка Тогда
		Возврат;
	КонецЕсли;
	//Костенюк Александр-Финиш 20.05.2013

	// Отказ.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Запись.
	Если (Не мСобытие = Неопределено) Тогда
		Попытка
			Событие().Записать(ЭтотОбъект, Отказ);
		Исключение
			Событие().Записать(Отказ);		
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ЗаписьСобытия()

// Выполняет запись контактной информации.
//
Процедура ЗаписьКонтактнойИнформации(Отказ, Заголовок)
	
	// Отказ.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Запись.
	//Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
	//Костенюк Александр-Старт 22.05.2012
	ПравоИзменениеКонтактнойИнформацииЗаказов = УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИзменениеКонтактнойИнформацииЗаказов);
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) ИЛИ
		(ПравоИзменениеКонтактнойИнформацииЗаказов = Перечисления.ПраваДоступаПользователей.Разрешить) ИЛИ
		(ПравоИзменениеКонтактнойИнформацииЗаказов = Перечисления.ПраваДоступаПользователей.Привилегированные)
		Тогда
		//Костенюк Александр-Финиш 22.05.2012
		Если (Не мКонтактнаяИнформация = Неопределено) Тогда
			КонтактнаяИнформация().Записать(ЭтотОбъект, Отказ);
		КонецЕсли;
	Иначе
		Стереть = (мСтруктураДокументОригинал.Модуль = Перечисления.МодулиИПодсистемы.Доставка);
	КонецЕсли;
	
	Если (Стереть = Истина) Тогда
		
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформацияРеализацииТоваровУслуг.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, Заголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписьКонтактнойИнформации()

// Выполняет запись контактной информации.
//
Процедура ЗаписьНастроекПроизводства(Отказ, Заголовок)
	
	// Отказ.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Запись.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Если (Не Проведен) И (Не ПометкаУдаления) Тогда
			НастройкиПроизводства().Записать(ЭтотОбъект, Отказ);
		Иначе
			Стереть = Истина;
		КонецЕсли;
	Иначе
		Стереть = (мСтруктураДокументОригинал.Модуль = Перечисления.МодулиИПодсистемы.Доставка);
	КонецЕсли;
	
	Если (Стереть = Истина) Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеНастройкиПроизводстваРеализацийТоваровУслуг.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, Заголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписьКонтактнойИнформации()

Процедура ПриКопировании(ОбъектКопирования)
	
	// Удаляем значения некопируемых реквизитов шапки.
	НомерСокращенный = Неопределено;
	Если Не ОбъектКопирования.ПометкаУдаления Тогда
		//			СтруктураИсключаемых = Новый Структура("Распечатан,Выполненн,Выполняется,ДатаНачалаПериода,ДатаОкончанияПериода,ПолныйНомерСтола,ПостфиксСтола,ФактическаяДатаНачалаПериода,ФактическаяДатаОкончанияПериода");
		Распечатан = Неопределено;
		Оплачен = Неопределено;
	КонецЕсли;
	
	// Контактная информация.
	КонтактнаяИнформация(ОбъектКопирования);
	
	// Табличные части.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(Товары); //Костенюк Александр-Закомментировано 18.05.2013 ТабличныеЧасти.Добавить(Услуги);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			СтрокаТабличнойЧасти.Идентификатор = Новый УникальныйИдентификатор;
			СтрокаТабличнойЧасти.ДатаНачалаПериода = Неопределено;
			СтрокаТабличнойЧасти.ДатаОкончанияПериода = Неопределено;
			СтрокаТабличнойЧасти.Распечатан = Неопределено;
			СтрокаТабличнойЧасти.Выполненн = Неопределено;
			
		КонецЦикла;
	КонецЦикла;
	
	Распечатался = ОбщегоНазначенияСервер.ПолучитьПустуюДату();
	
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаЗаполнения(Основание)
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Чистяков Павел 24.10.2011 10:16:21 
	// К сожелению не получится использовать уже сохраненный
	// в этой переменной оригинал, так как мы не знаем когда он менялся
	Если ЭтоНовый() Тогда
		//Костенюк Александр-Старт 07.07.2012
		// Закомментировано
		// Не нужно обнулять временные позиции
		//ТЧТовары = ЭтотОбъект.Товары;
		//Для каждого Стр Из ТЧТовары Цикл
		//	Если Стр.Номенклатура.Временной Тогда
		//		Стр.Количество = 0;
		//	КонецЕсли;
		//КонецЦикла;
		//Костенюк Александр-Финиш 07.07.2012
		ДополнительныеСвойства.Вставить("Оригинал",Ссылка);
	Иначе
		ДополнительныеСвойства.Вставить("Оригинал",Ссылка.ПолучитьОбъект());
	КонецЕсли; 
	
	Если не УправлениеСертификатами.ОбработкаСертификатовПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи)  Тогда 
		Отказ= Истина;
		Возврат;
	КонецЕсли;
	
	// Нормализация.
	ПодготовитьШапку(РежимЗаписи, РежимПроведения);              
	//ПодготовитьТабличнуюЧастьТоварыИУслуги(РежимЗаписи, РежимПроведения);
	ПодготовитьТабличнуюЧастьТовары(РежимЗаписи, РежимПроведения); //Костенюк Александр 22.04.2013
	
	Состояние = УправлениеЗаказами.ПолучитьСостояниеДокумента(ЭтотОбъект, РежимЗаписи);
	
	// Проверка заполнения реквизитов.
	мЗаголовок = Строка(РежимЗаписи) + " документа «" + СокрЛП(ЭтотОбъект) + "»: ";
	//СтруктураОбязательныхПолей = Новый Структура;
	//ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	//СтруктураОбязательныхПолей = Новый Структура;
	//ПроверитьЗаполнениеТабличнойЧастиТоварыИУслуги(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	
	// Контрагент.
	ЗаписьКонтрагента(Отказ, мЗаголовок);
	
	// Нормализация.
	ПодготовитьШапку(РежимЗаписи, РежимПроведения);              
	//ПодготовитьТабличнуюЧастьТоварыИУслуги(РежимЗаписи, РежимПроведения);
	ПодготовитьТабличнуюЧастьТовары(РежимЗаписи, РежимПроведения); //Костенюк Александр 22.04.2013
	
	Состояние = УправлениеЗаказами.ПолучитьСостояниеДокумента(ЭтотОбъект, РежимЗаписи);
	
	// Проверка заполнения реквизитов.
	мЗаголовок = Строка(РежимЗаписи) + " документа «" + СокрЛП(ЭтотОбъект) + "»: ";
	//СтруктураОбязательныхПолей = Новый Структура;
	//ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	//СтруктураОбязательныхПолей = Новый Структура;
	//ПроверитьЗаполнениеТабличнойЧастиТоварыИУслуги(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	
	// Контрагент.
	ЗаписьКонтрагента(Отказ, мЗаголовок);
	
	
	Если не Отказ тогда
		Если Распечатан Тогда
			Если Распечатался = ОбщегоНазначенияСервер.ПолучитьПустуюДату() Тогда 
				Распечатался = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	// Рабочие центры.
	РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.ПередЗаписьюДокумента(ЭтотОбъект, Отказ, РежимЗаписи);
	
	// Увеодомелния и сообщения.
	РегистрыСведений.__СостоянияУведомленийДокументов.ПередЗаписьюДокумента(ЭтотОбъект, Отказ, РежимЗаписи);
	
	РегистрыСведений.__СостоянияСообщенийПользователей.ПередЗаписьюДокумента(ЭтотОбъект, Отказ, РежимЗаписи);
	
КонецПроцедуры

Функция ДвиженияДенежныеСредстваДисконтныхвКарт() 
	
	//ТекстЗапроса = "ВЫБРАТЬ
	//			   |	ВложеныйЗапрос.Регистратор,
	//			   |	&ВидДвижения КАК ВидДвижения,
	//			   |	ВЫБОР
	//			   |		КОГДА ВложеныйЗапрос.ТипМонетарности = ЗНАЧЕНИЕ(Перечисление.ТипыМонетарности.ДепозитнаяДисконтнаяКарта)
	//			   |			ТОГДА ВложеныйЗапрос.ДисконтнаяКарта
	//			   |		КОГДА ВложеныйЗапрос.ТипМонетарности = ЗНАЧЕНИЕ(Перечисление.ТипыМонетарности.ДепозитнаяКонтрагент)
	//			   |			ТОГДА ВложеныйЗапрос.ВладелецКарты
	//			   |	КОНЕЦ КАК ПризнакДисконта,
	//			   |	ВЫБОР
	//			   |		КОГДА &ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	//			   |			ТОГДА ВложеныйЗапрос.Сумма
	//			   |		ИНАЧЕ ВложеныйЗапрос.СуммаБезСкидок
	//			   |	КОНЕЦ КАК Сумма,
	//			   |	ВложеныйЗапрос.Дата КАК Период
	//			   |ИЗ
	//			   |	(ВЫБРАТЬ
	//			   |		СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	//			   |		РеализацияТоваровУслугТовары.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
	//			   |		РеализацияТоваровУслугТовары.Ссылка.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты,
	//			   |		РеализацияТоваровУслугТовары.Ссылка.ДисконтнаяКарта.ВидДисконтнойКарты.ТипМонетарности КАК ТипМонетарности,
	//			   |		РеализацияТоваровУслугТовары.Ссылка КАК Регистратор,
	//			   |		РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	//			   |		СУММА(РеализацияТоваровУслугТовары.СуммаБезСкидок) КАК СуммаБезСкидок
	//			   |	ИЗ
	//			   |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//			   |	ГДЕ
	//			   |		РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	//			   |		И РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
	//			   |	
	//			   |	СГРУППИРОВАТЬ ПО
	//			   |		РеализацияТоваровУслугТовары.Ссылка.ДисконтнаяКарта.ВладелецКарты,
	//			   |		РеализацияТоваровУслугТовары.Ссылка.ДисконтнаяКарта.ВидДисконтнойКарты.ТипМонетарности,
	//			   |		РеализацияТоваровУслугТовары.Ссылка,
	//			   |		РеализацияТоваровУслугТовары.Ссылка.Дата,
	//			   |		РеализацияТоваровУслугТовары.Ссылка.ДисконтнаяКарта) КАК ВложеныйЗапрос";
	

	Если  ПараметрыСеанса.глВключенFrontOffice Тогда
		
		ТаблицаСумм = ЭтотОбъект.ДополнительныеСвойства.ТаблицаДвиженияДисконтныхКарт;
		Если ТаблицаСумм = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ТаблицаСумм[0].СуммаРасход > 0  Тогда
			Движение =  Движения.ДенежныеСредстваДисконтныхКарт.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период =Дата;
			Движение.Сумма = ТаблицаСумм[0].СуммаРасход;
			Движение.ПризнакДисконта = ТаблицаСумм[0].ПризнакДисконта;
			Движение.ДокументРегистратор = Ссылка;
			Движения.ДенежныеСредстваДисконтныхКарт.Записать();	
			Возврат Истина;		
		КонецЕсли;	
		
		Если ТаблицаСумм[0].СуммаПриход > 0 Тогда
			Движение =  Движения.ДенежныеСредстваДисконтныхКарт.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Сумма =ТаблицаСумм[0].СуммаПриход;
			Движение.ПризнакДисконта = ТаблицаСумм[0].ПризнакДисконта;
			Движение.ДокументРегистратор = Ссылка;
			Движения.ДенежныеСредстваДисконтныхКарт.Записать();	
			Возврат Истина;		
		КонецЕсли;			
		
		Возврат Ложь;
		
	Иначе 
		
		Дисконтная = ЭтотОбъект.ДисконтнаяКарта;
		ПродолжитьРаботу = Истина;
		
		Запрос = Новый Запрос;
		Если Дисконтная.ВидДисконтнойКарты.ТипМонетарности  = Перечисления.ТипыМонетарности.ДепозитнаяДисконтнаяКарта Тогда
			Запрос.УстановитьПараметр("ПризнакДисконта", Дисконтная);
		ИначеЕсли Дисконтная.ВидДисконтнойКарты.ТипМонетарности  = Перечисления.ТипыМонетарности.ДепозитнаяКонтрагент Тогда
			Запрос.УстановитьПараметр("ПризнакДисконта", Дисконтная.ВладелецКарты);
		Иначе
			ПродолжитьРаботу = Ложь;
			Запрос = Неопределено;
			ОбщегоНазначенияСервер.ПоискВСтруктуре(ЭтотОбъект.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", Неопределено);
		КонецЕсли; 	
		
		Если не ПродолжитьРаботу Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МоментВремени", ЭтотОбъект.МоментВремени());
		Запрос.УстановитьПараметр("Ссылка", Ссылка);		  
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	РеализацияТоваровУслугТовары.СуммаБезСкидок КАК СуммаБезСкидок
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Товары.Сумма) КАК СуммаРасход
		|ПОМЕСТИТЬ СуммаТоварыРасход
		|ИЗ
		|	Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпНоменклатура
		|		ПО Товары.Номенклатура = СпНоменклатура.Ссылка
		|ГДЕ
		|	СпНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Товары.СуммаБезСкидок) КАК СуммаПриход
		|ПОМЕСТИТЬ СуммаТоварыПриход
		|ИЗ
		|	Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпНоменклатура
		|		ПО Товары.Номенклатура = СпНоменклатура.Ссылка
		|ГДЕ
		|	СпНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиНаКарточке.СуммаОстаток КАК СуммаОстаток,
		|	ЕСТЬNULL(СуммаТоварыРасход.СуммаРасход, 0) КАК СуммаРасход,
		|	ЕСТЬNULL(СуммаТоварыПриход.СуммаПриход, 0) КАК СуммаПриход,
		|	&ПризнакДисконта КАК ПризнакДисконта
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваДисконтныхКарт.Остатки(&МоментВремени, ПризнакДисконта = &ПризнакДисконта) КАК ОстаткиНаКарточке
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаТоварыРасход КАК СуммаТоварыРасход
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаТоварыПриход КАК СуммаТоварыПриход
		|		ПО (ИСТИНА)";	  
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда		
			Если Выборка.СуммаПриход > 0 и Выборка.СуммаРасход  > 0 Тогда
				Сообщить(НСтр("ru='По данному виду оплаты в табличный части документа "+Символы.ПС +" не должно быть номенклатуры с типом ""Депозит""!';uk='По цьому виду оплати у табличний частині документа "+Символы.ПС +" не повинно бути номенклатури з типом ""Депозіт""!'"), СтатусСообщения.Важное);
				Возврат Истина;
			ИначеЕсли Выборка.СуммаПриход > 0 тогда 
				ОбщегоНазначенияСервер.ПоискВСтруктуре(ЭтотОбъект.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", РезультатЗапроса.Выгрузить());
			ИначеЕсли Выборка.СуммаРасход > 0 тогда
				Если Дисконтная.ВидДисконтнойКарты.Оплата = ЭтотОбъект.Оплата Тогда	
					Если Выборка.СуммаРасход  > Выборка.СуммаОстаток Тогда
						//Сообщить(НСтр("ru='Сумма остатка по дисконтной карты "+ Выборка.СуммаОстаток +" превышает сумму к оплате "+Выборка.РеализацияСумма +" !';uk='Сума залишку по дисконтної карти "+ Выборка.СуммаОстаток +" перевищує суму до оплати "+Выборка.РеализацияСумма +" !'"), СтатусСообщения.Важное);
						//Костенюк Александр-Старт 17.07.2012
						Сообщить(НСтр("ru='Сумма остатка по дисконтной карты "+ Выборка.СуммаОстаток +" превышает сумму к оплате "+Выборка.СуммаРасход +" !';uk='Сума залишку по дисконтної карти "+ Выборка.СуммаОстаток +" перевищує суму до оплати "+Выборка.СуммаРасход +" !'"), СтатусСообщения.Важное);
						//Костенюк Александр-Финиш 17.07.2012
						Возврат Истина;	
					Иначе
						ОбщегоНазначенияСервер.ПоискВСтруктуре(ЭтотОбъект.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", РезультатЗапроса.Выгрузить());	
					КонецЕсли;
				Иначе 
					ОбщегоНазначенияСервер.ПоискВСтруктуре(ЭтотОбъект.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", Неопределено);
				КонецЕсли;	
			ИначеЕсли Выборка.СуммаПриход = 0 и Выборка.ЭтотОбъект  = 0 Тогда
				ОбщегоНазначенияСервер.ПоискВСтруктуре(ЭтотОбъект.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", Неопределено);	
			КонецЕсли;				  
		КонецЕсли;
		
		ТаблицаСумм = ЭтотОбъект.ДополнительныеСвойства.ТаблицаДвиженияДисконтныхКарт;
		Если ТаблицаСумм = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ТаблицаСумм[0].СуммаРасход > 0  Тогда
			Движение =  Движения.ДенежныеСредстваДисконтныхКарт.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период =Дата;
			Движение.Сумма = ТаблицаСумм[0].СуммаРасход;
			Движение.ПризнакДисконта = ТаблицаСумм[0].ПризнакДисконта;
			Движение.ДокументРегистратор = Ссылка;
			Движения.ДенежныеСредстваДисконтныхКарт.Записать();	
			Возврат Истина;		
		КонецЕсли;	
		
		Если ТаблицаСумм[0].СуммаПриход > 0 Тогда
			Движение =  Движения.ДенежныеСредстваДисконтныхКарт.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Сумма =ТаблицаСумм[0].СуммаПриход;
			Движение.ПризнакДисконта = ТаблицаСумм[0].ПризнакДисконта;
			Движение.ДокументРегистратор = Ссылка;
			Движения.ДенежныеСредстваДисконтныхКарт.Записать();	
			Возврат Истина;		
		КонецЕсли;			
		Возврат Ложь;				
	КонецЕсли; 
	
КонецФункции 

Процедура ПриЗаписи(Отказ)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьСобытия(Отказ, мЗаголовок);
	ЗаписьКонтактнойИнформации(Отказ, мЗаголовок);
	ЗаписьНастроекПроизводства(Отказ, мЗаголовок);
	ДвиженияПоРегистрамСостояний(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	ДвиженияПоРегистрамСведений(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	ПроверкаСомнительнойСитуацииИАнализаДействий();
	
	// Рабочие центры.
	РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	// Чистяков Павел 01.03.2012 13:47:45 закоменил, так как перенес логику в процедуру выше
	//ВерсионированиеОбъектов.АнализДействиеЗаказДоЗаказ(ЭтотОбъект, "ЗаписьДокумента");
	
	Если Распечатан Тогда
		
		Для каждого Строка Из Скидки Цикл
			Если НЕ Строка.Актуальность
				ИЛИ НЕ ЗначениеЗаполнено(Строка.Событие)
				ИЛИ Строка.Событие.Проведен
				ИЛИ Строка.Событие.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			ОбъектДокумента = Строка.Событие.ПолучитьОбъект();
			ОбъектДокумента.ОснованиеЗавершения = Ссылка;
			Попытка
				ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЦикла;
	Иначе
		Для каждого Строка Из Скидки Цикл
			Если НЕ Строка.Актуальность
				ИЛИ НЕ ЗначениеЗаполнено(Строка.Событие) 
				ИЛИ НЕ Строка.Событие.Проведен Тогда
				Продолжить;
			КонецЕсли;
			ОбъектДокумента = Строка.Событие.ПолучитьОбъект();
			ОбъектДокумента.ОснованиеЗавершения = Неопределено;
			Попытка
				ОбъектДокумента.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли; 
	
	мПроизводственныеГруппы = Неопределено;
	мПроизводственныеГруппыПроизводства = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Движения документа.
	ДвиженияПоРегистрам(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Удаление движений документа.
	УдалениеДвиженияПоРегистрам(Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Чистяков Павел 20.10.2011 16:07:28 
Процедура ПроверкаСомнительнойСитуацииИАнализаДействий()
	
	Перем Оригинал;
	Если НЕ ДополнительныеСвойства.Свойство("Оригинал",Оригинал) Тогда
		Возврат;
	КонецЕсли;
	
	ПереносИсточник = Неопределено; ДополнительныеСвойства.Свойство("ПереносИсточник",ПереносИсточник);
	ПереносПриемник = Неопределено; ДополнительныеСвойства.Свойство("ПереносПриемник",ПереносПриемник);
	ПричинаОтказаДокумент = Неопределено; ДополнительныеСвойства.Свойство("ПричинаОтказа",ПричинаОтказаДокумент);
	ПереносВНовыйЗаказ = Неопределено; ДополнительныеСвойства.Свойство("ПереносВНовыйЗаказ",ПереносВНовыйЗаказ);
	
	// АД: Создан
	Если Оригинал.Ссылка=Оригинал Тогда
		// Чистяков Павел 01.03.2012 14:22:23 В случае нового объекта мы помещаем ссылку перед записью
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Создан,
			Ссылка);
	КонецЕсли; 
	
	// СС: отмена Пречека
	Если Оригинал.Распечатан
		И НЕ Распечатан
		И НЕ (Оригинал.Оплачен И НЕ Оплачен) Тогда
		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ОтменаПречека,
			Ссылка,ПричинаОтказаДокумент);
		// АД: отмена Пречека
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ОтменаПречека,
			Ссылка,ПричинаОтказаДокумент,ПричинаОтказаДокумент);
	КонецЕсли;
	
	////Костенюк Александр-Старт 30.07.2012
	//// Раздельная печать предчеков по гостям
	//// Сравнение таблиц оригинала и текущего документа
	//РезультатЗапросаПоПречекам = ЗапросПоПречекам(Оригинал, Ссылка); 
	//ТаблицаЗапроса = РезультатЗапросаПоПречекам.Выгрузить();
	//Выборка = РезультатЗапросаПоПречекам.Выбрать();
	//Если ТаблицаЗапроса.Количество() Тогда
	//	Пока Выборка.Следующий() Цикл
	//		Если Выборка.ПречекРаспечатан Тогда
	//			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Пречек, Ссылка, ПричинаОтказаДокумент, "Клиент № " + Выборка.НомерКлиента);
	//		Иначе
	//			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ОтменаПречека, Ссылка, ПричинаОтказаДокумент, "Клиент № " + Выборка.НомерКлиента);
	//			РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ОтменаПречекаКлиент, Ссылка);
	//		КонецЕсли;
	//	КонецЦикла;
	//ИначеЕсли ((Оригинал.Распечатан
	//	И НЕ Распечатан)
	//	И НЕ (Оригинал.Оплачен И НЕ Оплачен)) Тогда
	//	РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ОтменаПречека, Ссылка, ПричинаОтказаДокумент);
	//	РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ОтменаПречека, Ссылка, ПричинаОтказаДокумент, ПричинаОтказаДокумент);
	//КонецЕсли;
	////Костенюк Александр-Финиш 30.07.2012
	
	
	// СС: передача стола другому официанту
	Если Оригинал.Ссылка<>Оригинал
		И Оригинал.Сотрудник<>Сотрудник Тогда
		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ПередачаСтолаДругомуОфицианту,
			Ссылка,Сотрудник);
	КонецЕсли;
	
	МассивТаблиц	= Новый Массив;
	МассивТаблиц.Добавить("Товары");
	//МассивТаблиц.Добавить("Услуги"); //Костенюк Александр-Закомментировано 18.05.2013
	
	// АД: Удаление блюда
	ПроверкаСомнительнойОперации = Истина;
	Для каждого Таблица Из МассивТаблиц Цикл
		Для каждого Строка Из Оригинал[Таблица] Цикл
			НайденнаяСтрока = ЭтотОбъект[Таблица].Найти(Строка.Идентификатор,"Идентификатор");
			Если НайденнаяСтрока=Неопределено Тогда
				Если ЗначениеЗаполнено(ПереносПриемник) Тогда
					Если ТипЗнч(ПереносПриемник)=Тип("ДокументСсылка.СписаниеТоваров") Тогда
						Если Строка.ВидНоменклатуры=Перечисления.ТипыСтрокЗаказов.Условие Тогда
							РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеУсловия,
							Ссылка,Строка.Номенклатура,"",Строка.Количество,ПереносПриемник);
						Иначе
							РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеБлюда,
							//Ссылка,Строка.Номенклатура,"",Строка.Количество,ПереносПриемник);
							//Костенюк Александр-Старт 27.04.2012
							Ссылка,Строка.Номенклатура,ПричинаОтказаДокумент,Строка.Количество,ПереносПриемник);
							//Костенюк Александр-Финиш 27.04.2012
						КонецЕсли; 
					ИначеЕсли ПереносВНовыйЗаказ=Истина Тогда
						РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ПереносВНовыйСтол,
						Ссылка,Строка.Номенклатура,"Перенос в: "+ПереносПриемник,Строка.Количество,ПереносПриемник);
					Иначе
						РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ПереносВСуществующийСтол,
						Ссылка,Строка.Номенклатура,"Перенос в: "+ПереносПриемник,Строка.Количество,ПереносПриемник);
					КонецЕсли; 
				Иначе
					РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеБлюда,
					//Ссылка,Строка.Номенклатура,"",Строка.Количество,ПереносПриемник);
					//Костенюк Александр-Старт 27.04.2012
					Ссылка,Строка.Номенклатура,ПричинаОтказаДокумент,Строка.Количество,ПереносПриемник);
					//Костенюк Александр-Финиш 27.04.2012
				КонецЕсли;
				// СС: Удаление блюда
				Если ПроверкаСомнительнойОперации Тогда
					//Если ЗначениеЗаполнено(ПереносПриемник)
					//	И ТипЗнч(ПереносПриемник)=Тип("ДокументСсылка.СписаниеТоваров") Тогда
					//	Если ЗначениеЗаполнено(Распечатался) Тогда
					//		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаПречек,
					//			Ссылка,ПричинаОтказаДокумент);
					//	Иначе
					//		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюда,
					//			Ссылка,ПричинаОтказаДокумент);
					//	КонецЕсли;
					//Иначе
					//	Если ЗначениеЗаполнено(Распечатался) Тогда
					//		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ПеремещениеБлюдПречек,
					//			Ссылка,ПричинаОтказаДокумент);
					//	Иначе
					//		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ПеремещениеБлюд,
					//			Ссылка,ПричинаОтказаДокумент);
					//	КонецЕсли;
					//КонецЕсли;
					
					//Костенюк Александр-Старт 23.11.2012
					Если ЗначениеЗаполнено(ПереносПриемник) Тогда
						Если ТипЗнч(ПереносПриемник) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
							Если ЗначениеЗаполнено(Распечатался) Тогда
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаПречек,
								Ссылка,ПричинаОтказаДокумент);
							Иначе
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюда,
								Ссылка,ПричинаОтказаДокумент);
							КонецЕсли;
						ИначеЕсли ТипЗнч(ПереносПриемник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
							Если ЗначениеЗаполнено(Распечатался) Тогда
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ПеремещениеБлюдПречек,
								Ссылка,ПричинаОтказаДокумент);
							Иначе
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ПеремещениеБлюд,
								Ссылка,ПричинаОтказаДокумент);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если ОбщегоНазначения.РежимFrontOffice() Тогда
							Если ЗначениеЗаполнено(Распечатался) Тогда
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаПречек,
								Ссылка,ПричинаОтказаДокумент);
							Иначе
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюда,
								Ссылка,ПричинаОтказаДокумент);
							КонецЕсли;
						Иначе
							Если ЗначениеЗаполнено(Распечатался) Тогда
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаПречекBackOffice,
								Ссылка,ПричинаОтказаДокумент);
							Иначе
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаBackOffice,
								Ссылка,ПричинаОтказаДокумент);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					//Костенюк Александр-Финиш 23.11.2012
					
					ПроверкаСомнительнойОперации = Ложь;
				КонецЕсли; 
				//Костенюк Александр-Старт 29.01.2013
				// Уменьшение количества блюда
			ИначеЕсли НайденнаяСтрока.Количество <> Строка.Количество Тогда
				Если НайденнаяСтрока.Количество < Строка.Количество Тогда
					Если ЗначениеЗаполнено(ПереносПриемник) Тогда
						Если ТипЗнч(ПереносПриемник) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
							Если ЗначениеЗаполнено(Распечатался) Тогда
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаПречек,
								Ссылка,ПричинаОтказаДокумент);
							Иначе
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюда,
								Ссылка,ПричинаОтказаДокумент);
							КонецЕсли;
						ИначеЕсли ТипЗнч(ПереносПриемник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
							Если ЗначениеЗаполнено(Распечатался) Тогда
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ПеремещениеБлюдПречек,
								Ссылка,ПричинаОтказаДокумент);
							Иначе
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ПеремещениеБлюд,
								Ссылка,ПричинаОтказаДокумент);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если ОбщегоНазначения.РежимFrontOffice() Тогда
							Если ЗначениеЗаполнено(Распечатался) Тогда
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаПречек,
								Ссылка,ПричинаОтказаДокумент);
							Иначе
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюда,
								Ссылка,ПричинаОтказаДокумент);
							КонецЕсли;
						Иначе
							Если ЗначениеЗаполнено(Распечатался) Тогда
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаПречекBackOffice,
								Ссылка,ПричинаОтказаДокумент);
							Иначе
								РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаBackOffice,
								Ссылка,ПричинаОтказаДокумент);
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;
				КонецЕСли;
				//Костенюк Александр-Финиш 29.01.2013
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	// АД: Удаление скидки
	Для каждого Строка Из Оригинал.Скидки Цикл
		НайденнаяСтрока = Скидки.Найти(Строка.СкидкаНаценка,"СкидкаНаценка");
		Если НайденнаяСтрока=Неопределено 
			ИЛИ (НайденнаяСтрока.Актуальность=Ложь И Строка.Актуальность=Истина) Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеСкидки,
				Ссылка,Строка.СкидкаНаценка,"Скидка: "+Строка.СуммаСкидки+", Наценка: "+Строка.СуммаНаценки);
			// СС: Удаление скидки
			РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеСкидки,
				Ссылка,Строка.СкидкаНаценка);
		КонецЕсли; 
	КонецЦикла; 
	
	// АД: Заказ и Дозаказ
	ПроверкаСомнительнойСитуации = Истина;
	Для каждого Таблица Из МассивТаблиц Цикл
		Для каждого Строка Из ЭтотОбъект[Таблица] Цикл
			НайденнаяСтрока = Оригинал[Таблица].Найти(Строка.Идентификатор,"Идентификатор");
			Если НайденнаяСтрока=Неопределено Тогда
				//Костенюк Александр-Старт 19.09.2012
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
				НайденныеСтроки = Оригинал[Таблица].НайтиСтроки(ПараметрыОтбора);
				Если НЕ НайденныеСтроки.Количество() Тогда
				//Костенюк Александр-Финиш 19.09.2012
					Если ЗначениеЗаполнено(ПереносИсточник) Тогда
						РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Заказано,
						Ссылка,Строка.Номенклатура,"Перенесено из: "+ПереносИсточник,Строка.Количество,ПереносИсточник);
					Иначе
						РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Заказано,
						Ссылка,Строка.Номенклатура,"",Строка.Количество);
					КонецЕсли;
				//Костенюк Александр-Старт 19.09.2012
				Иначе
					РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Дозаказано,
					Ссылка,Строка.Номенклатура,,Строка.Количество);
				КонецЕсли;
				//Костенюк Александр-Финиш 19.09.2012
			ИначеЕсли НайденнаяСтрока.Количество <> Строка.Количество Тогда
				//РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Дозаказано,
				//Ссылка,Строка.Номенклатура,"Количество изменено с "+НайденнаяСтрока.Количество+" на "+Строка.Количество,Строка.Количество);
				
				//Костенюк Александр-Старт 19.09.2012
				Если Строка.Количество < НайденнаяСтрока.Количество Тогда
					Если ЗначениеЗаполнено(ПереносПриемник) Тогда
						Если ТипЗнч(ПереносПриемник)=Тип("ДокументСсылка.СписаниеТоваров") Тогда
							Если Строка.ВидНоменклатуры=Перечисления.ТипыСтрокЗаказов.Условие Тогда
								РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеУсловия,
								Ссылка,Строка.Номенклатура,"",Строка.Количество,ПереносПриемник);
							Иначе
								РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеБлюда,
								Ссылка,Строка.Номенклатура,"Количество изменено с "+НайденнаяСтрока.Количество+" на "+Строка.Количество +" "+ ПричинаОтказаДокумент,Строка.Количество,ПереносПриемник);
							КонецЕсли; 
						ИначеЕсли ПереносВНовыйЗаказ=Истина Тогда
							РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ПереносВНовыйСтол,
							Ссылка,Строка.Номенклатура,"Перенос в: "+ПереносПриемник,Строка.Количество,ПереносПриемник);
						Иначе
							РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ПереносВСуществующийСтол,
							Ссылка,Строка.Номенклатура,"Перенос в: "+ПереносПриемник,Строка.Количество,ПереносПриемник);
						КонецЕсли; 
					Иначе
						РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеБлюда,
						Ссылка,Строка.Номенклатура,"Количество изменено с "+НайденнаяСтрока.Количество+" на "+Строка.Количество +" "+ ПричинаОтказаДокумент,Строка.Количество,ПереносПриемник);
					КонецЕсли;
				КонецЕсли;
				//Костенюк Александр-Финиш 19.09.2012
				
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	// АД: Скидка
	АнализНестандартнойСкидки = Истина;
	Для каждого Строка Из Скидки Цикл
		НайденнаяСтрока = Оригинал.Скидки.Найти(Строка.СкидкаНаценка,"СкидкаНаценка");
		Если НайденнаяСтрока=Неопределено Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Скидка,
				Ссылка,Строка.СкидкаНаценка,"Скидка: "+Строка.СуммаСкидки+", Наценка: "+Строка.СуммаНаценки);
			Если Строка.Ручная Тогда
				Если ЗначениеЗаполнено(Распечатался) Тогда
					//РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.НазначенаРучнаяСкидкаПречек,
					//Ссылка);
					
					//Костенюк Александр-Старт 29.01.2013
					// Случай, когда сразу печатают пречек без предварительного сохранения заказа
					Если ЗначениеЗаполнено(Оригинал.Распечатался) Тогда
						РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.НазначенаРучнаяСкидкаПречек,
						Ссылка);
					Иначе
						РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.НазначенаРучнаяСкидка,
						Ссылка);
					КонецЕсли;
					//Костенюк Александр-Финиш 29.01.2013
					
				Иначе
					РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.НазначенаРучнаяСкидка,
					Ссылка);
				КонецЕсли; 
			КонецЕсли;
			//// СС: счета с одинаковыми ДК за день
			//Если ЗначениеЗаполнено(Строка.ДисконтнаяКарта) Тогда
			//	Запрос = Новый Запрос(
			//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			//	|	РеализацияТоваровУслугСкидки.Ссылка
			//	|ИЗ
			//	|	Документ.РеализацияТоваровУслуг.Скидки КАК РеализацияТоваровУслугСкидки
			//	|ГДЕ
			//	|	РеализацияТоваровУслугСкидки.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
			//	|	И (НЕ РеализацияТоваровУслугСкидки.Ссылка.ПометкаУдаления)
			//	|	И РеализацияТоваровУслугСкидки.ДисконтнаяКарта = &ДисконтнаяКарта
			//	|	И РеализацияТоваровУслугСкидки.Ссылка <> &Ссылка
			//	|
			//	|УПОРЯДОЧИТЬ ПО
			//	|	РеализацияТоваровУслугСкидки.Ссылка.Дата УБЫВ"	
			//	);
			//	Запрос.УстановитьПараметр("Ссылка",Ссылка);
			//	Запрос.УстановитьПараметр("ДисконтнаяКарта",Строка.ДисконтнаяКарта);
			//	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Дата));
			//	Запрос.УстановитьПараметр("ДатаКон",КонецДня(Дата));
			//	Выборка = Запрос.Выполнить().Выбрать();
			//	Если Выборка.Следующий() Тогда
			//		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.СчетаСОдинаковымиСкидкамиЗаДень,
			//			Ссылка,Строка.ДисконтнаяКарта);
			//	КонецЕсли;
			//КонецЕсли;
			
			//Костенюк Александр-Старт 10.04.2012
			// СС: счета с одинаковыми ДК за день
			Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				               |	РеализацияТоваровУслуг.Ссылка
				               |ИЗ
				               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				               |ГДЕ
				               |	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
				               |	И НЕ РеализацияТоваровУслуг.Ссылка.ПометкаУдаления
				               |	И РеализацияТоваровУслуг.Ссылка <> &Ссылка
				               |	И РеализацияТоваровУслуг.ДисконтнаяКарта = &ДисконтнаяКарта
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	РеализацияТоваровУслуг.Ссылка.Дата УБЫВ";
				Запрос.УстановитьПараметр("Ссылка",				Ссылка);
				Запрос.УстановитьПараметр("ДисконтнаяКарта", 	ДисконтнаяКарта);
				Запрос.УстановитьПараметр("ДатаНач",			НачалоДня(Дата));
				Запрос.УстановитьПараметр("ДатаКон",			КонецДня(Дата));
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.СчетаСОдинаковымиСкидкамиЗаДень,
						Ссылка,Строка.ДисконтнаяКарта);
				КонецЕсли;
			КонецЕсли;
			//Костенюк Александр-Финиш 10.04.2012
			
			// СС: нестандартная скидка
			Если АнализНестандартнойСкидки Тогда
				//ИтогоБезСкидокСумма	= Товары.Итог("СуммаБезСкидок") + Услуги.Итог("СуммаБезСкидок");
				//ИтогоСкидки			= Товары.Итог("СуммаСкидки") + Услуги.Итог("СуммаСкидки");
				//Костенюк Александр-Старт 18.05.2013
				ИтогоБезСкидокСумма	= Товары.Итог("СуммаБезСкидок");
				ИтогоСкидки			= Товары.Итог("СуммаСкидки");
				//Костенюк Александр-Финиш 18.05.2013
				Если ИтогоСкидки<>0
					И ИтогоБезСкидокСумма<>0
					И ((ИтогоСкидки/ИтогоБезСкидокСумма)*100)>=Константы.ПроцентСкидокСомнительнойОперации.Получить() Тогда
					РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.НестандартнаяСкидка,
						Ссылка);
				КонецЕсли;
				АнализНестандартнойСкидки = Ложь;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	// АД: ИзменениеОплаты
	Если Оригинал.Ссылка<>Оригинал
		И Оригинал.Оплата<>Оплата
		И ЗначениеЗаполнено(Оплата)
		И ЗначениеЗаполнено(Оригинал.Оплата) Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ИзменениеОплаты,
			Ссылка,Оплата,"Изменена оплата с "+Оригинал.Оплата+" на "+Оплата);
	КонецЕсли; 
	
	// СС: отмена оплаты
	Если Оригинал.Оплачен
		И НЕ Оплачен Тогда
		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ВосстановлениеСтола,
			Ссылка);
		// АД: отмена оплаты
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ОтменаОплаты,
			Ссылка,Оплата);
	КонецЕсли;
	
	// СС: изменение количества гостей
	Если Оригинал.Ссылка<>Оригинал
		И Оригинал.КоличествоКлиентов<>КоличествоКлиентов Тогда
		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ИзмененоКоличествоГостей,
			Ссылка);
	КонецЕсли;
	
	// СС: изменение номера стола
	Если Оригинал.Ссылка<>Оригинал
		И Оригинал.Стол<>Стол Тогда
		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.ИзмененНомерСтола,
			Ссылка);
	КонецЕсли;
					
	// АД: Оплачен
	Если НЕ Оригинал.Оплачен И Оплачен Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Оплата,
			Ссылка,Оплата);
		// СС: Стол закрыт после Х часов
		ДопустимоеКоличествоЧасов = Константы.ПродолжительностьОткрытогоСтолаДляПопаданияВСомнительныеСитуации.Получить();
		Если ДопустимоеКоличествоЧасов<>0
			И (ДатаОкончанияПериода-ДатаНачалаПериода)>=ДопустимоеКоличествоЧасов*60*60 Тогда
			//РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.СтолЗакрытНеобычноДолго,
			РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.СтолОткрытНеобычноДолго, //Костенюк Александр 15.03.2013
				Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// АД: Пречек
	Если НЕ Оригинал.Распечатан И Распечатан Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Пречек,
			Ссылка);
	КонецЕсли;
	
	// АД: Удален
	Если Оригинал.Ссылка<>Оригинал
		И Оригинал.ПометкаУдаления<>ПометкаУдаления Тогда
		// Чистяков Павел 01.03.2012 14:34:53 
		Если ПометкаУдаления Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Удален,
				Ссылка,ПричинаОтказа,ПричинаОтказа);
			// СС: удаление стола
			//Если ЗначениеЗаполнено(Распечатался) Тогда
			//	РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеСтола,
			//		Ссылка);
			//Иначе
			//	РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеСтолаПречек,
			//		Ссылка);
			//КонецЕсли; 
			//Костенюк Александр-Старт 26.04.2012
			Если ЗначениеЗаполнено(Распечатался) Тогда
				РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеСтолаПречек, Ссылка);
			Иначе
				РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеСтола, Ссылка);
			КонецЕсли; 
			//Костенюк Александр-Финиш 26.04.2012
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

//Костенюк Александр-Старт 19.07.2012
// Функция возвращает сумму депозита документа.
//
Функция ПолучитьСуммуДепозита() Экспорт
	
	Возврат Ценообразование.ПолучитьСуммуДепозитаДокумента(ЭтотОбъект, "Товары") + Ценообразование.ПолучитьСуммуДепозитаДокумента(ЭтотОбъект, "Услуги");
	
КонецФункции // ПолучитьСуммуДепозита()
//Костенюк Александр-Финиш 19.07.2012

//Костенюк Александр-Старт 19.09.2012
// Процедура осуществляет движения по регистру ДенежныеСредстваДисконтныхКарт.
//
// Параметры:
// Отказ - Тип: Булево. Признак отказа проведения документа.
// 
Процедура ДвиженияДенежныеСредстваДК(Отказ) 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДисконтнаяКарта.ВидДисконтнойКарты.ТипМонетарности = Перечисления.ТипыМонетарности.ДепозитнаяДисконтнаяКарта Тогда
		ПризнакДисконта = ДисконтнаяКарта;
	ИначеЕсли ДисконтнаяКарта.ВидДисконтнойКарты.ТипМонетарности = Перечисления.ТипыМонетарности.ДепозитнаяКонтрагент Тогда
		ПризнакДисконта = ДисконтнаяКарта.ВладелецКарты;
	КонецЕсли;
	
	// Сумма скидки на депозит
	Если СуммаДепозитаДокумента > 0 Тогда
		
		Движение 						= Движения.ДенежныеСредстваДисконтныхКарт.Добавить();
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
		Движение.Период 				= Дата;
		Движение.Сумма 					= СуммаДепозитаДокумента;
		Движение.ПризнакДисконта 		= ПризнакДисконта;
		Движение.ДокументРегистратор 	= Ссылка;
		Движения.ДенежныеСредстваДисконтныхКарт.Записать();	
		
	КонецЕсли;
	
	// Расчет депозитной картой
	Если Оплата = ДисконтнаяКарта.ВидДисконтнойКарты.Оплата Тогда
		
		ОстатокНаКарте = 0;
		Отбор = Новый Структура;
		Отбор.Вставить("ПризнакДисконта", ПризнакДисконта);
		Остатки = РегистрыНакопления.ДенежныеСредстваДисконтныхКарт.Остатки(МоментВремени(), Отбор);
		Если Остатки.Количество() Тогда
			ОстатокНаКарте = Остатки.Итог("Сумма");
		КонецЕсли;
		
		Сумма = ОстатокНаКарте + СуммаДепозитаДокумента - СуммаДокумента;  
		
		Если Сумма < 0 Тогда
			ТекстСообщения = НСтр("ru='Сумма остатка на карте " + (ОстатокНаКарте + СуммаДепозитаДокумента) + " превышает сумму к оплате " + СуммаДокумента + " !';uk='Сума залишку на карті " + (ОстатокНаКарте + СуммаДепозитаДокумента) + " перевищує суму до сплати " + СуммаДокумента + " !'"); 
			Если ПараметрыСеанса.глВключенFrontOffice Тогда
				FrontOffice.ВывестиПредупреждение(ТекстСообщения);
			Иначе
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
		
		Движение 						= Движения.ДенежныеСредстваДисконтныхКарт.Добавить();
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		Движение.Период 				= Дата;
		Движение.Сумма 					= СуммаДокумента;
		Движение.ПризнакДисконта 		= ПризнакДисконта;
		Движение.ДокументРегистратор 	= Ссылка;
		Движения.ДенежныеСредстваДисконтныхКарт.Записать();	
		
	КонецЕсли;
	
КонецПроцедуры 
//Костенюк Александр-Финиш 19.09.2012

#Если Клиент Тогда
	
//Костенюк Александр-Старт 18.05.2013
// Функция формирует запрос для печати
// 
// Параметры:
// Режим - Тип: Строка. Режим формирования запроса.
// НомерКлиента - Тип: Число, Неопределено. Номер гостя, по которому нужно сформировать запрос.
//
Функция СформироватьЗапросДляПечати(Режим, НомерКлиента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		// Общий пречек
		Если НомерКлиента = Неопределено Тогда
			
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	РеализацияТоваровУслуг.Номер,
			               |	РеализацияТоваровУслуг.НомерСокращенный,
			               |	РеализацияТоваровУслуг.Дата,
			               |	РеализацияТоваровУслуг.Ресторан,
			               |	РеализацияТоваровУслуг.Ресторан КАК Поставщик,
			               |	ЕСТЬNULL(РеализацияТоваровУслуг.Ответственный, РеализацияТоваровУслуг.Сотрудник) КАК Отпустил,
			               |	РеализацияТоваровУслуг.Стол,
			               |	РеализацияТоваровУслуг.ПолныйНомерСтола КАК ПолныйНомерСтола,
			               |	РеализацияТоваровУслуг.КоличествоКлиентов,
			               |	РеализацияТоваровУслуг.РучноеУправлениеСкидками,
			               |	РеализацияТоваровУслуг.СуммаСкидкиДокумента,
			               |	РеализацияТоваровУслуг.СуммаНаценкиДокумента,
			               |	РеализацияТоваровУслуг.СуммаНаценкиДокумента - РеализацияТоваровУслуг.СуммаСкидкиДокумента КАК СуммаСкидкиНаценкиДокумента,
			               |	РеализацияТоваровУслуг.СуммаДепозитаДокумента,
			               |	РеализацияТоваровУслуг.СуммаСертификатаДокумента,
			               |	РеализацияТоваровУслуг.СуммаДокументаБезСкидок,
			               |	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
			               |	РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
			               |	&ТекущаяДата КАК ДатаРазделенияПериода
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			               |ГДЕ
			               |	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
			
		// Раздельный пречек(по гостю)
		// Данный механизм не используется, поэтому целесообразно разделить запрос на 2 отдельных
		// это значительно повысит скорость его выполнения
		Иначе
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	РеализацияТоваровУслуг.Номер,
			               |	РеализацияТоваровУслуг.НомерСокращенный,
			               |	РеализацияТоваровУслуг.Дата,
			               |	РеализацияТоваровУслуг.Ресторан,
			               |	РеализацияТоваровУслуг.Ресторан КАК Поставщик,
			               |	ЕСТЬNULL(РеализацияТоваровУслуг.Ответственный, РеализацияТоваровУслуг.Сотрудник) КАК Отпустил,
			               |	РеализацияТоваровУслуг.Стол,
			               |	РеализацияТоваровУслуг.ПолныйНомерСтола КАК ПолныйНомерСтола,
			               |	РеализацияТоваровУслуг.КоличествоКлиентов,
			               |	РеализацияТоваровУслуг.РучноеУправлениеСкидками,
			               |	РеализацияТоваровУслуг.СуммаСкидкиДокумента,
			               |	РеализацияТоваровУслуг.СуммаНаценкиДокумента,
			               |	РеализацияТоваровУслуг.СуммаНаценкиДокумента - РеализацияТоваровУслуг.СуммаСкидкиДокумента КАК СуммаСкидкиНаценкиДокумента,
			               |	РеализацияТоваровУслуг.СуммаДепозитаДокумента,
			               |	РеализацияТоваровУслуг.СуммаСертификатаДокумента,
			               |	РеализацияТоваровУслуг.СуммаДокументаБезСкидок,
			               |	ЕСТЬNULL(ЗапросПоГостю.Сумма, РеализацияТоваровУслуг.СуммаДокумента) КАК Сумма,
			               |	РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
			               |	&ТекущаяДата КАК ДатаРазделенияПериода
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |			РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
			               |			СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
			               |			СУММА(РеализацияТоваровУслугТовары.СуммаБезСкидок) КАК СуммаБезСкидок,
			               |			СУММА(РеализацияТоваровУслугТовары.СуммаНаценки) КАК СуммаНаценки,
			               |			СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
			               |			СУММА(РеализацияТоваровУслугТовары.СуммаСкидки) КАК СуммаСкидки,
			               |			СУММА(РеализацияТоваровУслугТовары.СуммаДепозита) КАК СуммаДепозита,
			               |			РеализацияТоваровУслугТовары.СуммаСертификата КАК СуммаСертификата
			               |		ИЗ
			               |			Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			               |		ГДЕ
			               |			РеализацияТоваровУслугТовары.НомерКлиента = &НомерКлиента
			               |		
			               |		СГРУППИРОВАТЬ ПО
			               |			РеализацияТоваровУслугТовары.Ссылка,
			               |			РеализацияТоваровУслугТовары.СуммаСертификата) КАК ЗапросПоГостю
			               |		ПО РеализацияТоваровУслуг.Ссылка = ЗапросПоГостю.Ссылка
			               |ГДЕ
			               |	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
			
			Запрос.УстановитьПараметр("НомерКлиента", НомерКлиента);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "ПоТабличнойЧастиТовары" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Товары.НомерСтроки,
		               |	Товары.ДатаНачалаПериода,
		               |	Товары.Идентификатор,
		               |	Товары.Владелец,
		               |	Товары.Номенклатура,
		               |	Товары.ЕдиницаИзмерения,
		               |	Товары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
		               |	Товары.Организация,
		               |	Товары.НомерКлиента,
		               |	СУММА(Товары.Количество) КАК Количество,
		               |	МАКСИМУМ(Товары.Цена) КАК Цена,
		               |	СУММА(Товары.Сумма) КАК Сумма,
		               |	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
		               |	СУММА(Товары.СуммаАкцизногоНалога) КАК СуммаАкцизногоНалога,
		               |	СУММА(Товары.СуммаБезСкидок) КАК СуммаБезСкидок,
		               |	СУММА(Товары.СуммаНаценки) КАК СуммаНаценки,
		               |	СУММА(Товары.СуммаСкидки) КАК СуммаСкидки,
		               |	СУММА(Товары.СуммаДепозита) КАК СуммаДепозита,
		               |	СУММА(Товары.СуммаСертификата) КАК СуммаСертификата,
		               |	Товары.Комментарий
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК Товары
		               |ГДЕ
		               |	(Товары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Модификатор)
		               |				И Товары.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Условие)
		               |			ИЛИ Товары.Цена <> 0)
		               |	И Товары.Ссылка = &ТекущийДокумент
		               |	И Товары.НомерКлиента = &НомерКлиента
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Товары.ДатаНачалаПериода,
		               |	Товары.Идентификатор,
		               |	Товары.Владелец,
		               |	Товары.Номенклатура,
		               |	Товары.ЕдиницаИзмерения,
		               |	Товары.ЕдиницаИзмерения.Представление,
		               |	Товары.Организация,
		               |	Товары.НомерКлиента,
		               |	Товары.Комментарий,
		               |	Товары.НомерСтроки";
		
		// Раздельная печать пречеков по гостям
		Если НомерКлиента = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Товары.НомерКлиента = &НомерКлиента", "ИСТИНА");
		Иначе
			Запрос.УстановитьПараметр("НомерКлиента", НомерКлиента);
		КонецЕсли;
		
	ИначеЕсли Режим = "ПоТабличнойЧастиСкидки" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугСкидки.СкидкаНаценка,
		               |	РеализацияТоваровУслугСкидки.СкидкаНаценка.Представление КАК Скидка,
		               |	РеализацияТоваровУслугСкидки.Сумма
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		РеализацияТоваровУслугСкидки.СкидкаНаценка КАК СкидкаНаценка,
		               |		СУММА(РеализацияТоваровУслугСкидки.СуммаНаценки - РеализацияТоваровУслугСкидки.СуммаСкидки) КАК Сумма
		               |	ИЗ
		               |		Документ.РеализацияТоваровУслуг.Скидки КАК РеализацияТоваровУслугСкидки
		               |	ГДЕ
		               |		РеализацияТоваровУслугСкидки.Ссылка = &ТекущийДокумент
		               |		И РеализацияТоваровУслугСкидки.Актуальность
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		РеализацияТоваровУслугСкидки.СкидкаНаценка) КАК РеализацияТоваровУслугСкидки
		               |ГДЕ
		               |	НЕ РеализацияТоваровУслугСкидки.Сумма = 0";
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат РезультатЗапроса;

КонецФункции
//Костенюк Александр-Финиш 18.05.2013

//Костенюк Александр-Старт 30.07.2012
// Функция определяет различия между табличными частями "Клиенты" документа оригинала и текущего.
//
// Параметры:
// ДокументОригинал - Тип: ДокументСсылка.РеализацияТоваровУслуг
// ДокументТекущий - Тип: ДокументСсылка.РеализацияТоваровУслуг
// 
// Возвращаемое значение:
// РезультатЗапроса - Тип: РезультатЗапроса
//
Функция ЗапросПоПречекам(ДокументОригинал, ДокументТекущий) Экспорт
	
	ВнешняяТаблица1 = ДокументОригинал.Клиенты.Выгрузить(, "НомерКлиента, ПречекРаспечатан");
	ВнешняяТаблица2 = ДокументТекущий.Клиенты.Выгрузить(, "НомерКлиента, ПречекРаспечатан");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос1 = Новый Запрос;
	Запрос1.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос1.Текст = "ВЫБРАТЬ
	                |	ВнешняяТаблица1.НомерКлиента,
	                |	ВнешняяТаблица1.ПречекРаспечатан
	                |ПОМЕСТИТЬ Таблица1
	                |ИЗ
	                |	&ВнешняяТаблица1 КАК ВнешняяТаблица1";
	Запрос1.УстановитьПараметр("ВнешняяТаблица1", ВнешняяТаблица1);
	Запрос1.Выполнить();
	
	Запрос2 = Новый Запрос;
	Запрос2.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос2.Текст = "ВЫБРАТЬ
				   |	ВнешняяТаблица2.НомерКлиента,
				   |	ВнешняяТаблица2.ПречекРаспечатан
				   |ПОМЕСТИТЬ Таблица2
				   |ИЗ
				   |	&ВнешняяТаблица2 КАК ВнешняяТаблица2";
	Запрос2.УстановитьПараметр("ВнешняяТаблица2", ВнешняяТаблица2);
	Запрос2.Выполнить();

	Запрос3 = Новый Запрос;
	Запрос3.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос3.Текст = "ВЫБРАТЬ
	                |	Таблица2.НомерКлиента,
	                |	Таблица2.ПречекРаспечатан
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		Таблица1.НомерКлиента КАК НомерКлиента,
	                |		Таблица1.ПречекРаспечатан КАК ПречекРаспечатан
	                |	ИЗ
	                |		Таблица1 КАК Таблица1) КАК Таблица1
	                |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			Таблица2.НомерКлиента КАК НомерКлиента,
	                |			Таблица2.ПречекРаспечатан КАК ПречекРаспечатан
	                |		ИЗ
	                |			Таблица2 КАК Таблица2) КАК Таблица2
	                |		ПО Таблица1.НомерКлиента = Таблица2.НомерКлиента
	                |ГДЕ
	                |	Таблица1.ПречекРаспечатан <> Таблица2.ПречекРаспечатан";
	РезультатЗапроса = Запрос3.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции
//Костенюк Александр-Финиш 30.07.2012

//Костенюк Александр-Старт 02.11.2012
//
// Процедура производит подсчет будущего количества строк документа вместе с возможными переносами
//
// Параметры:
// ТаблицаДокумента - Тип: ТаблицаЗначений, ДеревоЗначений. Таблица, в которой необходим подсчет строк.
// КвоСимволовСтрока - Тип: Число. Максимальное количество символов, которое может содержать строка.
// КвоСтрокВсегоСУчетомПереносов - Тип: Число. Количество символов в строке с учетом переносов.
// ОстатокВывода - Тип: Число. Количество строк, которое необходимо вывести.
// 
Процедура ПодсчетКоличестваСтрокДокументаСПереносами(ТаблицаДокумента, КвоСимволовСтрока, КвоСтрокВсегоСУчетомПереносов, ОстатокВывода) Экспорт
	
	КвоСимволовСтрока = 20;
	МассивТоваров = Новый Массив;
	
	Если ТипЗнч(ТаблицаДокумента) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			МассивТоваров.Добавить(СтрокаТаблицы);
		КонецЦикла;
		ТаблицаТоваров = ТаблицаДокумента;
	ИначеЕсли ТипЗнч(ТаблицаДокумента) = Тип("ДеревоЗначений") Тогда
		Для Каждого СтрокаВладелец Из ТаблицаДокумента.Строки Цикл
			МассивТоваров.Добавить(СтрокаВладелец);
		КонецЦикла;
		Для Каждого СтрокаВладелец Из МассивТоваров Цикл
			Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
				МассивТоваров.Добавить(СтрокаВладельца);
			КонецЦикла;
		КонецЦикла;
		ТаблицаТоваров = Товары.Выгрузить().СкопироватьКолонки();
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			МассивТоваров.Добавить(СтрокаТабличнойЧасти);
		КонецЦикла;
		//Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
		//	МассивТоваров.Добавить(СтрокаТабличнойЧасти);
		//КонецЦикла;
		ТаблицаТоваров = Товары.Выгрузить().СкопироватьКолонки();
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.Номенклатура.Печатаемый Тогда
			Продолжить;
		КонецЕсли;
		
		КвоСимволовНаименование	= СтрДлина(СокрЛП(СтрокаТаблицы.Номенклатура.НаименованиеПолное));
		КвоСтрокНаименование 	= Цел(КвоСимволовНаименование/КвоСимволовСтрока);
		
		Если КвоСимволовНаименование%КвоСимволовСтрока = 0 Тогда
			КвоСтрокСУчетомПереносов = КвоСтрокНаименование;
		Иначе
			КвоСтрокСУчетомПереносов = КвоСтрокНаименование + 1;
		КонецЕсли;
		
		КвоСтрокВсегоСУчетомПереносов 	= КвоСтрокВсегоСУчетомПереносов + КвоСтрокСУчетомПереносов;
		ОстатокВывода 					= КвоСтрокВсегоСУчетомПереносов;
		
	КонецЦикла;
	
КонецПроцедуры
//Костенюк Александр-Финиш 02.11.2012

//Костенюк Александр-Старт 26.02.2013
// 
// Функция производит печать пречека
//
// Параметры:
// АвтоопределениеПринтера - Тип: Булево. Признак работы системы в режиме Front-Office
//
// Возвращаемое значение:
// ТабДокумент - Тип: ТабличныйДокумент, Неопределено.
//
Функция ПечатьПречека(АвтоопределениеПринтера = Ложь, ОтложеннаяПечатьДиспетчер = Неопределено) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Пречек";
	ТабДокумент.КоличествоЭкземпляров = 1;
	
	// Параметры печати
	ПараметрыПечати = Новый Структура;
	
	Если АвтоопределениеПринтера Тогда
		
		ПринтерПечати 	= ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.ПринтерыПречеков);
		Обработка 		= Неопределено;
		Объект    		= Неопределено;
		Результат 		= ПолучитьСерверТО().ПолучитьОбъектДрайвера(ПринтерПечати, Обработка, Объект);
		
		Если НЕ ПринтерПечати = Неопределено Тогда
			
			ПараметрыПечати.Вставить("ПроизвольныеПараметрыПечати" 	, Объект.Параметры.ПроизвольныеПараметрыПечати);
			ПараметрыПечати.Вставить("КоличествоСтрокВсего"			, Объект.Параметры.КоличествоСтрокВсего);
			ПараметрыПечати.Вставить("КоличествоСтрокШапка"			, Объект.Параметры.КоличествоСтрокШапка);
			ПараметрыПечати.Вставить("КоличествоСтрокПодвал"		, Объект.Параметры.КоличествоСтрокПодвал);
			ПараметрыПечати.Вставить("КоличествоСтрокОтступСверху"	, Объект.Параметры.КоличествоСтрокОтступСверху);
			ПараметрыПечати.Вставить("КоличествоСтрокОтступСнизу"	, Объект.Параметры.КоличествоСтрокОтступСнизу);
			ПараметрыПечати.Вставить("КоличествоСтрокШапкаТаблицы"	, 1);
			ПараметрыПечати.Вставить("ПостояннаяДлинаПречеков"		, Объект.Параметры.ПостояннаяДлинаПречеков);
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыПечати.Вставить("ПроизвольныеПараметрыПечати" 	, Ложь);
		ПараметрыПечати.Вставить("КоличествоСтрокВсего"			, 0);
		ПараметрыПечати.Вставить("КоличествоСтрокШапка"			, 0);
		ПараметрыПечати.Вставить("КоличествоСтрокПодвал"		, 0);
		ПараметрыПечати.Вставить("КоличествоСтрокОтступСверху"	, 0);
		ПараметрыПечати.Вставить("КоличествоСтрокОтступСнизу"	, 0);
		ПараметрыПечати.Вставить("КоличествоСтрокШапкаТаблицы"	, 0);
		ПараметрыПечати.Вставить("ПостояннаяДлинаПречеков"		, Ложь);
		
	КонецЕсли;
	
	// Параметры печати
	ПроизвольныеПараметрыПечати = ПараметрыПечати.ПроизвольныеПараметрыПечати;
	КоличествоСтрокВсего 		= ПараметрыПечати.КоличествоСтрокВсего;
	КоличествоСтрокШапка 		= ПараметрыПечати.КоличествоСтрокШапка;
	КоличествоСтрокПодвал 		= ПараметрыПечати.КоличествоСтрокПодвал;
	КоличествоСтрокОтступСверху = ПараметрыПечати.КоличествоСтрокОтступСверху;
	КоличествоСтрокОтступСнизу 	= ПараметрыПечати.КоличествоСтрокОтступСнизу;
	КоличествоСтрокШапкаТаблицы = ПараметрыПечати.КоличествоСтрокШапкаТаблицы;
	ПостояннаяДлинаПречеков 	= ПараметрыПечати.ПостояннаяДлинаПречеков;
	
	УчитыватьНДС = Ложь;
	
	// Макет
	КодЯзыкаПечать 			= Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	МакетПоУмолчанию 		= ПолучитьМакет("Пречек");
	Макет 					= ПолучитьСерверТО().ПечатьПолучитьМакет(ПринтерПечати, "Макет", МакетПоУмолчанию);
	Макет.КодЯзыкаМакета 	= КодЯзыкаПечать;
	
	// Области макета
	ОбластиМакета = Новый Структура;
	ОбластиМакета.Вставить("ОбластьМакетаШапка"					, Макет.ПолучитьОбласть("Шапка"));
	ОбластиМакета.Вставить("ОбластьМакетаЗаголовок"				, Макет.ПолучитьОбласть("Заголовок"));
	ОбластиМакета.Вставить("ОбластьМакетаПоставщик"				, Макет.ПолучитьОбласть("Поставщик"));
	ОбластиМакета.Вставить("ОбластьМакетаСтол"					, Макет.ПолучитьОбласть("Стол"));
	ОбластиМакета.Вставить("ОбластьМакетаШапкаТаблицы"			, Макет.ПолучитьОбласть("ШапкаТаблицы"));
	ОбластиМакета.Вставить("ОбластьМакетаСтрокаКомментарий"		, Макет.ПолучитьОбласть("СтрокаКомментарий"));
	ОбластиМакета.Вставить("ОбластьМакетаСтрока"				, Макет.ПолучитьОбласть("Строка"));
	ОбластиМакета.Вставить("ОбластьМакетаСуммаСертификата"		, Макет.ПолучитьОбласть("СуммаСертификата"));
	ОбластиМакета.Вставить("ОбластьМакетаСтрокаСоСкидкой"		, Макет.ПолучитьОбласть("СтрокаСоСкидкой"));
	ОбластиМакета.Вставить("ОбластьМакетаСтрокаСНаценкой"		, Макет.ПолучитьОбласть("СтрокаСНаценкой"));
	ОбластиМакета.Вставить("ОбластьМакетаОтступ"				, Макет.ПолучитьОбласть("Отступ"));
	ОбластиМакета.Вставить("ОбластьМакетаШапкаТаблицыСкидки"	, Макет.ПолучитьОбласть("ШапкаТаблицыСкидки"));
	ОбластиМакета.Вставить("ОбластьМакетаСтрокаСертификат"		, Макет.ПолучитьОбласть("СтрокаСертификат"));
	ОбластиМакета.Вставить("ОбластьМакетаСтрокаСкидка"			, Макет.ПолучитьОбласть("СтрокаСкидка"));
	ОбластиМакета.Вставить("ОбластьМакетаСтрокаДепозит"			, Макет.ПолучитьОбласть("СтрокаДепозит"));
	ОбластиМакета.Вставить("ОбластьМакетаИтого"					, Макет.ПолучитьОбласть("Итого"));
	ОбластиМакета.Вставить("ОбластьМакетаВсего"					, Макет.ПолучитьОбласть("Всего"));
	ОбластиМакета.Вставить("ОбластьМакетаИтогоНДС"				, Макет.ПолучитьОбласть("ИтогоНДС"));
	ОбластиМакета.Вставить("ОбластьМакетаИтогоАкцизныйНалог"	, Макет.ПолучитьОбласть("ИтогоАкцизныйНалог"));
	ОбластиМакета.Вставить("ОбластьМакетаИтогоПоОрганизациям"	, Макет.ПолучитьОбласть("ИтогоПоОрганизациям"));
	ОбластиМакета.Вставить("ОбластьМакетаДисконтнаяКарта"		, Макет.ПолучитьОбласть("ДисконтнаяКарта"));
	ОбластиМакета.Вставить("ОбластьМакетаПодвал"				, Макет.ПолучитьОбласть("Подвал"));
	ОбластиМакета.Вставить("ОбластьМакетаЧаевые"				, Макет.ПолучитьОбласть("Чаевые"));
	ОбластиМакета.Вставить("ОбластьМакетаПробел"				, Макет.ПолучитьОбласть("Пробел"));
	ОбластиМакета.Вставить("ОбластьМакетаРазрывСтраницы"		, Макет.ПолучитьОбласть("РазрывСтраницы"));
	ОбластиМакета.Вставить("ОбластьМакетаПодпись"				, Макет.ПолучитьОбласть("Подпись"));
	
	// Настройки пользователя
	НастройкиПользователя = Новый Структура;
	НастройкиПользователя.Вставить("ТекстШапки"								, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeШапкаПречекаЗаказа));
	НастройкиПользователя.Вставить("СкрыватьСтрокуСНомеромЧека"				, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeСкрыватьВПречекеСтрокуСНомеромЧека));
	НастройкиПользователя.Вставить("ИспользоватьОтступПослеНоменклатуры"	, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.ПечатьИспользоватьОтступПослеНоменклатуры));
	НастройкиПользователя.Вставить("ГруппироватьНоменклатуру"				, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeГруппироватьНоменклатуруВПречеке));
	НастройкиПользователя.Вставить("ВыводитьЧаевыеНаПечать"					, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьЧаевыеНаПечать));
	НастройкиПользователя.Вставить("ПечататьСтрокуСоСкидками"				, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПечатьВЗаказеСтрокуСоСкидками));
	НастройкиПользователя.Вставить("ПечатьПречекаПоОрганизациям"			, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПечатьПречекаПоОрганизациям));
	НастройкиПользователя.Вставить("РазбиениеБлюдПоОрганизациям"			, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeРазбиениеБлюдПоОрганизациям));
	НастройкиПользователя.Вставить("СтрокаПодвала"							, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПодвалПречекаЗаказа));
	НастройкиПользователя.Вставить("ВыводитьСуммуБлюдаСоСкидкой"			, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьСуммуБлюдаСоСкидкой));
	НастройкиПользователя.Вставить("ВыводитьСуммуСертификатаПоКаждойПозиции", УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьСуммуСертификатаПоКаждойПозиции));
	НастройкиПользователя.Вставить("ВыводитьСуммуСкидкиПоКаждойПозиции"		, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьСуммуСкидкиПоКаждойПозиции));
	НастройкиПользователя.Вставить("ВыводитьСуммуНаценкиПоКаждойПозиции"	, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьСуммуНаценкиПоКаждойПозиции));
	НастройкиПользователя.Вставить("ВыводитьСуммуНДС"						, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьСуммуНДС));
	НастройкиПользователя.Вставить("ВыводитьСуммуАкцизногоНалога"			, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьСуммуАкцизногоНалога));
	НастройкиПользователя.Вставить("ГруппироватьБлюдаСоСкидкойБезСкидки"	, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeГруппироватьБлюдаСоСкидкойБезСкидки));
	НастройкиПользователя.Вставить("ВыводитьПодпись"						, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьПодпись));
	НастройкиПользователя.Вставить("ВыводитьИмяСотрудника"					, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьИмяСотрудника));

	// Данные для печати
	РезультатЗапросаШапка 	= СформироватьЗапросДляПечати("ПоРеквизитамДокумента");
	РезультатЗапросаТовары 	= СформироватьЗапросДляПечати("ПоТабличнойЧастиТовары");
	РезультатЗапросаСкидки 	= СформироватьЗапросДляПечати("ПоТабличнойЧастиСкидки");
	
	// Шапка
	Шапка = РезультатЗапросаШапка.Выбрать();
	Шапка.Следующий();
	
	// Таблицы документа
	ТаблицаТовары = РезультатЗапросаТовары.Выгрузить();
	ТаблицаСкидки = РезультатЗапросаСкидки.Выгрузить();
	
	// Поставщик
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	Поставщик = Новый Структура;
	Поставщик.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать));
	Поставщик.Вставить("РеквизитыПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,/,Телефоны,",,КодЯзыкаПечать));
	
	ПараметрыОтбора 	= Новый Структура;
	ЭтоДерево 			= Ложь;
	СтрокаGUID 			= "00000000-0000-0000-0000-000000000000"; 
	ПустойИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 
	СтрОтступа 			= "";
	
	// Раздельная печать пречеков
	Если РаздельныйПречек Тогда
		
		ТаблицаКлиентов = ТаблицаТовары.Скопировать();
		ТаблицаКлиентов.Свернуть("НомерКлиента");
		ТаблицаКлиентов.Сортировать("НомерКлиента Убыв"); // чтобы общий заказ печатался последним
		КвоКлиентов = ТаблицаКлиентов.Количество();
		
		Для Каждого СтрокаТаблицыКлиентов Из ТаблицаКлиентов Цикл
			
			ПараметрыОтбора.Очистить();
			ПараметрыОтбора.Вставить("НомерКлиента", СтрокаТаблицыКлиентов.НомерКлиента);
			ТаблицаПоКлиенту = ТаблицаТовары.Скопировать(ПараметрыОтбора);
			
			// Разбивка блюд по организациям
			Если НастройкиПользователя.РазбиениеБлюдПоОрганизациям Тогда
				
				// Шапка пречека
				ВывестиШапкуПречека(ТабДокумент, ПараметрыПечати, ОбластиМакета, КодЯзыкаПечать, НастройкиПользователя, Шапка);
				
				ТаблицаОрганизаций = ТаблицаПоКлиенту.Скопировать();
				ТаблицаОрганизаций.Свернуть("Организация");
				
				СведенияОПоставщике 	= Неопределено;
				ПредставлениеПоставщика = Неопределено;
				РеквизитыПоставщика 	= Неопределено;
				
				Для Каждого СтрокаТаблицыОрганизаций Из ТаблицаОрганизаций Цикл
					
					Организация = СтрокаТаблицыОрганизаций.Организация;
					
					ПараметрыОтбора.Очистить();
					ПараметрыОтбора.Вставить("Организация", Организация);
					ТаблицаПоОрганизации = ТаблицаПоКлиенту.Скопировать(ПараметрыОтбора);
					
					// Поставщик
					СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Шапка.Дата,,,КодЯзыкаПечать);
					Поставщик.Очистить();
					Поставщик.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать));
					Поставщик.Вставить("РеквизитыПоставщика"	, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,/,Телефоны,",,КодЯзыкаПечать));
					
					// Поставщик
					ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Поставщик", КодЯзыкаПечать, НастройкиПользователя, Шапка, Поставщик);
					// ШапкаТаблицы
					ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ШапкаТаблицы", КодЯзыкаПечать, НастройкиПользователя, Шапка);
					
					// Определение типа таблицы
					ЭтоДерево 				= ЭтоДерево(ТаблицаПоОрганизации);
					ТаблицаПреобразованная 	= ПреобразоватьТаблицу(ТаблицаПоОрганизации);
					
					// ДеревоЗначений
					Если ЭтоДерево Тогда
						
						// ГруппироватьНоменклатуру
						Если НастройкиПользователя.ГруппироватьНоменклатуру Тогда
							Дерево = ГруппировкаНоменклатуры(ТаблицаПреобразованная, "Дерево");
						Иначе 	
							Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ТаблицаПоОрганизации, "Идентификатор", "Владелец");
						КонецЕсли;
						
						// Дерево пречека
						ВывестиДеревоПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, Дерево, ОбластиМакета);
						
					// ТаблицаЗначений
					Иначе
						
						// ГруппироватьНоменклатуру
						Если НастройкиПользователя.ГруппироватьНоменклатуру Тогда 
							ТаблицаЗначений	= ГруппировкаНоменклатуры(ТаблицаПреобразованная);		
						Иначе
							ТаблицаЗначений = ТаблицаПоОрганизации;
						КонецЕсли;
						
						// Таблица пречека
						ВывестиТаблицуПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, ТаблицаЗначений, ОбластиМакета);
						
					КонецЕсли;
					
					// Итого
					ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Итого", КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаПоОрганизации);
					
				КонецЦикла;
				
				// Всего по клиенту
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Всего", КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаПоКлиенту);
				
			// Без разбивки блюд по организациям	
			Иначе
				
				// Шапка пречека
				ВывестиШапкуПречека(ТабДокумент, ПараметрыПечати, ОбластиМакета, КодЯзыкаПечать, НастройкиПользователя, Шапка);
				// Поставщик
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Поставщик", КодЯзыкаПечать, НастройкиПользователя, Шапка, Поставщик);
				// ШапкаТаблицы
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ШапкаТаблицы", КодЯзыкаПечать, НастройкиПользователя, Шапка);
				
				// Определение типа таблицы
				ЭтоДерево 				= ЭтоДерево(ТаблицаПоКлиенту);
				ТаблицаПреобразованная 	= ПреобразоватьТаблицу(ТаблицаПоКлиенту);
				
				// ДеревоЗначений
				Если ЭтоДерево Тогда
					
					// ГруппироватьНоменклатуру
					Если НастройкиПользователя.ГруппироватьНоменклатуру Тогда
						Дерево = ГруппировкаНоменклатуры(ТаблицаПреобразованная, "Дерево");
					Иначе 	
						Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ТаблицаПоКлиенту, "Идентификатор", "Владелец");
					КонецЕсли;
					
					// Дерево пречека
					ВывестиДеревоПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, Дерево, ОбластиМакета);
					
				// ТаблицаЗначений
				Иначе
					
					// ГруппироватьНоменклатуру
					Если НастройкиПользователя.ГруппироватьНоменклатуру Тогда 
						ТаблицаЗначений	= ГруппировкаНоменклатуры(ТаблицаПреобразованная);		
					Иначе
						ТаблицаЗначений = ТаблицаПоКлиенту;
					КонецЕсли;
					
					// Таблица пречека
					ВывестиТаблицуПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, ТаблицаЗначений, ОбластиМакета);
					
				КонецЕсли;
				
				// ИтогоПоОрганизациям
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ИтогоПоОрганизациям"	, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаПоКлиенту);
				// Итого
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Итого"					, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаПоКлиенту);

			КонецЕсли;
			
		КонецЦикла;
		
		// СуммаБезСкидок
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "СуммаБезСкидок"	, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
		// Сертификат
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Сертификат"		, КодЯзыкаПечать, НастройкиПользователя, Шапка);
		// Скидки
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Скидки"			, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары, ТаблицаСкидки);
		// Депозиты
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Депозиты"			, КодЯзыкаПечать, НастройкиПользователя, Шапка);
		// Чаевые
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Чаевые"			, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
		// ДисконтнаяКарта
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ДисконтнаяКарта"	, КодЯзыкаПечать, НастройкиПользователя, Шапка);
		// Подвал
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Подвал"			, КодЯзыкаПечать, НастройкиПользователя, Шапка);
		// Подпись
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Подпись"			, КодЯзыкаПечать, НастройкиПользователя, Шапка);
				
	// Общий пречек
	Иначе
		
		// Разбивка блюд по организациям
		Если НастройкиПользователя.РазбиениеБлюдПоОрганизациям Тогда
			
			ТаблицаОрганизаций = ТаблицаТовары.Скопировать();
			ТаблицаОрганизаций.Свернуть("Организация");
			
			СведенияОПоставщике 	= Неопределено;
			ПредставлениеПоставщика = Неопределено;
			РеквизитыПоставщика 	= Неопределено;
			
			// Шапка пречека
			ВывестиШапкуПречека(ТабДокумент, ПараметрыПечати, ОбластиМакета, КодЯзыкаПечать, НастройкиПользователя, Шапка);
			
			Для Каждого СтрокаТаблицыОрганизаций Из ТаблицаОрганизаций Цикл
				
				Организация = СтрокаТаблицыОрганизаций.Организация;
				
				ПараметрыОтбора.Очистить();
				ПараметрыОтбора.Вставить("Организация", Организация);
				ТаблицаПоОрганизации = ТаблицаТовары.Скопировать(ПараметрыОтбора);
				
				// Поставщик
				СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтрокаТаблицыОрганизаций.Организация, Шапка.Дата,,,КодЯзыкаПечать);
				Поставщик.Очистить();
				Поставщик.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать));
				Поставщик.Вставить("РеквизитыПоставщика"	, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,/,Телефоны,",,КодЯзыкаПечать));
				
				// Поставщик
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Поставщик", КодЯзыкаПечать, НастройкиПользователя, Шапка, Поставщик);
				// ШапкаТаблицы
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ШапкаТаблицы", КодЯзыкаПечать, НастройкиПользователя, Шапка);
				
				// Определение типа таблицы
				ЭтоДерево 				= ЭтоДерево(ТаблицаПоОрганизации);
				ТаблицаПреобразованная 	= ПреобразоватьТаблицу(ТаблицаПоОрганизации);
				
				// ДеревоЗначений
				Если ЭтоДерево Тогда
					
					// ГруппироватьНоменклатуру
					Если НастройкиПользователя.ГруппироватьНоменклатуру Тогда
						Дерево = ГруппировкаНоменклатуры(ТаблицаПреобразованная, "Дерево");
					Иначе 	
						Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ТаблицаПоОрганизации, "Идентификатор", "Владелец");
					КонецЕсли;
					
					// Дерево пречека
					ВывестиДеревоПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, Дерево, ОбластиМакета);
					
				// ТаблицаЗначений
				Иначе
					
					// ГруппироватьНоменклатуру
					Если НастройкиПользователя.ГруппироватьНоменклатуру Тогда 
						ТаблицаЗначений	= ГруппировкаНоменклатуры(ТаблицаПреобразованная);		
					Иначе
						ТаблицаЗначений = ТаблицаПоОрганизации;
					КонецЕсли;
					
					// Таблица пречека
					ВывестиТаблицуПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, ТаблицаЗначений, ОбластиМакета);
					
				КонецЕсли;
				
				// Итого
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Итого", КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаПоОрганизации);
				// ИтогоНДС
				ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ИтогоНДС", КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаПоОрганизации);
				
			КонецЦикла;
			
			// СуммаБезСкидок
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "СуммаБезСкидок", КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
			// Сертификат
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Сертификат"	, КодЯзыкаПечать, НастройкиПользователя, Шапка);
			// Скидки
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Скидки"		, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары, ТаблицаСкидки);
			// Всего
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Всего"			, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
			
		// Без разбивки блюд по организациям
		Иначе
			
			// Шапка пречека
			ВывестиШапкуПречека(ТабДокумент, ПараметрыПечати, ОбластиМакета, КодЯзыкаПечать, НастройкиПользователя, Шапка);
			// Поставщик
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Поставщик", КодЯзыкаПечать, НастройкиПользователя, Шапка, Поставщик);
			// ШапкаТаблицы
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ШапкаТаблицы", КодЯзыкаПечать, НастройкиПользователя, Шапка);
			
			// Определение типа таблицы
			ЭтоДерево 				= ЭтоДерево(ТаблицаТовары);
			ТаблицаПреобразованная 	= ПреобразоватьТаблицу(ТаблицаТовары);
			
			// ДеревоЗначений
			Если ЭтоДерево Тогда
				
				// ГруппироватьНоменклатуру
				Если НастройкиПользователя.ГруппироватьНоменклатуру Тогда
					Дерево = ГруппировкаНоменклатуры(ТаблицаПреобразованная, "Дерево");
				Иначе 	
					Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ТаблицаТовары, "Идентификатор", "Владелец");
				КонецЕсли;
				
				// Дерево пречека
				ВывестиДеревоПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, Дерево, ОбластиМакета);
				
			// ТаблицаЗначений
			Иначе
				
				// ГруппироватьНоменклатуру
				Если НастройкиПользователя.ГруппироватьНоменклатуру Тогда 
					ТаблицаЗначений	= ГруппировкаНоменклатуры(ТаблицаПреобразованная);		
				Иначе
					ТаблицаЗначений = ТаблицаТовары;
				КонецЕсли;
				
				// Таблица пречека
				ВывестиТаблицуПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, ТаблицаЗначений, ОбластиМакета);
				
			КонецЕсли;
			
			// ИтогоПоОрганизациям
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ИтогоПоОрганизациям"	, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
			// СуммаБезСкидок
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "СуммаБезСкидок"		, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
			// Сертификат
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Сертификат"			, КодЯзыкаПечать, НастройкиПользователя, Шапка);
			// Скидки
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Скидки"				, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары, ТаблицаСкидки);
			// Итого
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Итого"					, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
			// ИтогоНДС
			ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ИтогоНДС"				, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
			
		КонецЕсли;
		
		// Депозиты
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Депозиты"			, КодЯзыкаПечать, НастройкиПользователя, Шапка);
		// Чаевые
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Чаевые"			, КодЯзыкаПечать, НастройкиПользователя, Шапка, , ТаблицаТовары);
		// ДисконтнаяКарта
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "ДисконтнаяКарта"	, КодЯзыкаПечать, НастройкиПользователя, Шапка);
		// Подвал
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Подвал"			, КодЯзыкаПечать, НастройкиПользователя, Шапка);
		// Подпись
		ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, "Подпись"			, КодЯзыкаПечать, НастройкиПользователя, Шапка);
		
	КонецЕсли;
	
	Если АвтоопределениеПринтера Тогда
		ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
		ТабДокумент = Неопределено;
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции
//Костенюк Александр-Финиш 26.02.2013

//Костенюк Александр-Старт 26.02.2013
//
// Процедура вывода данных в макет
// Параметры:
// ТабДокумент - Тип: Табличный документ.
// ПараметрыПечати - Тип: Стуктура.
// ОбластиМакета - Тип: Стуктура.
// КодЯзыкаПечать - Тип: Строка.
// НастройкиПользователя - Тип: Стуктура. Настройки пользователя системы.
// Шапка - Тип: ВыборкаРезультатаЗапроса. Выборка результата запроса по шапке документа.
// Поставщик - Тип: Стуктура. Данные о поставщике.
// 
Процедура ВывестиШапкуПречека(ТабДокумент, ПараметрыПечати, ОбластиМакета, КодЯзыкаПечать, НастройкиПользователя, Шапка) Экспорт
	
	// ОбластиМакета
	ОбластьМакетаШапка 			= ОбластиМакета.ОбластьМакетаШапка;
	ОбластьМакетаЗаголовок		= ОбластиМакета.ОбластьМакетаЗаголовок;
	ОбластьМакетаСтол 			= ОбластиМакета.ОбластьМакетаСтол;
	ОбластьМакетаОтступ 		= ОбластиМакета.ОбластьМакетаОтступ;
	
	// ОтступСверху
	Для Инд = 1 По ПараметрыПечати.КоличествоСтрокОтступСверху Цикл
		ТабДокумент.Вывести(ОбластьМакетаОтступ);
	КонецЦикла;

	// Шапка
	Если НЕ ПустаяСтрока(НастройкиПользователя.ТекстШапки) Тогда
		ОбластьМакетаШапка.Параметры.ШапкаТекст = СокрЛП(НастройкиПользователя.ТекстШапки);
		ТабДокумент.Вывести(ОбластьМакетаШапка);		
	КонецЕсли;
	
	// Заголовок
	Если НЕ НастройкиПользователя.СкрыватьСтрокуСНомеромЧека Тогда
		ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Чек';uk='Чек'",КодЯзыкаПечать),КодЯзыкаПечать,Истина);
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
	КонецЕсли;
	
	// Стол
	ОбластьМакетаСтол.Параметры.Заполнить(Шапка);
	ОбластьМакетаСтол.Параметры.ПредставлениеСтола = НСтр("ru='Стол № ';uk='Стіл № '", КодЯзыкаПечать) + Шапка.ПолныйНомерСтола;
	РеквизитыСтола = "" + Формат(Шапка.Дата,"ДФ=dd.MM.yyyy") + НСтр("ru=', открыт ';uk=', відкрит: '", КодЯзыкаПечать) + Формат(Шапка.ДатаНачалаПериода,"ДФ=HH:mm");
	Если Булево(Шапка.КоличествоКлиентов) Тогда
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + НСтр("ru='Гостей: ';uk='Гостей: '", КодЯзыкаПечать) + Шапка.КоличествоКлиентов;
	КонецЕсли;
	Если НастройкиПользователя.ВыводитьИмяСотрудника Тогда
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + НСтр("ru='Официант: ';uk='Офiціант: '", КодЯзыкаПечать) + Шапка.Отпустил;
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + НСтр("ru='Распечатал: ';uk='Роздрукував: '", КодЯзыкаПечать) + ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	РеквизитыСтола = РеквизитыСтола + Символы.ПС + НСтр("ru='Печать: ';uk='Друк: '", КодЯзыкаПечать) + Формат(Шапка.ДатаРазделенияПериода,"ДФ='dd.MM.yyyy HH:mm'");
	ОбластьМакетаСтол.Параметры.РеквизитыСтола = РеквизитыСтола;
	ТабДокумент.Вывести(ОбластьМакетаСтол);
	
КонецПроцедуры
//Костенюк Александр-Финиш 26.02.2013

//Костенюк Александр-Старт 01.03.2013
//
// Процедура вывода данных в макет
//
// Параметры:
// ТабДокумент - Тип: Табличный документ.
// ПараметрыПечати - Тип: Стуктура.
// ОбластиМакета - Тип: Стуктура.
// Область - Тип: Строка. Выводимая область.
// НастройкиПользователя - Тип: Стуктура. Настройки пользователя системы.
// Шапка - Тип: ВыборкаРезультатаЗапроса. Выборка результата запроса по шапке документа.
// ТаблицаТовары - Тип: ТаблицаЗначений. Таблица товаров.
// ТаблицаСкидки - Тип: ТаблицаЗначений. Таблица скидок.
// 
Процедура ВывестиОбласть(ТабДокумент, ПараметрыПечати, ОбластиМакета, Область, КодЯзыкаПечать, НастройкиПользователя, Шапка, Поставщик = Неопределено, ТаблицаТовары = Неопределено, ТаблицаСкидки = Неопределено) Экспорт
	
	ОбластьМакетаШапкаТаблицыСкидки 	= ОбластиМакета.ОбластьМакетаШапкаТаблицыСкидки;
	ОбластьМакетаСтрокаСкидка 			= ОбластиМакета.ОбластьМакетаСтрокаСкидка;
	ОбластьМакетаСтрокаСертификат 		= ОбластиМакета.ОбластьМакетаСтрокаСертификат;
	ОбластьМакетаСтрокаДепозит 			= ОбластиМакета.ОбластьМакетаСтрокаДепозит;
	ОбластьМакетаИтого 					= ОбластиМакета.ОбластьМакетаИтого;
	ОбластьМакетаИтогоПоОрганизациям 	= ОбластиМакета.ОбластьМакетаИтогоПоОрганизациям;
	ОбластьМакетаДисконтнаяКарта 		= ОбластиМакета.ОбластьМакетаДисконтнаяКарта;
	ОбластьМакетаПодвал 				= ОбластиМакета.ОбластьМакетаПодвал;
	ОбластьМакетаЧаевые 				= ОбластиМакета.ОбластьМакетаЧаевые;
	ОбластьМакетаОтступ 				= ОбластиМакета.ОбластьМакетаОтступ;
	ОбластьМакетаШапкаТаблицы 			= ОбластиМакета.ОбластьМакетаШапкаТаблицы;
	ОбластьМакетаПоставщик				= ОбластиМакета.ОбластьМакетаПоставщик;
	ОбластьМакетаВсего 					= ОбластиМакета.ОбластьМакетаВсего;
	ОбластьМакетаИтогоНДС				= ОбластиМакета.ОбластьМакетаИтогоНДС;
	ОбластьМакетаИтогоАкцизныйНалог		= ОбластиМакета.ОбластьМакетаИтогоАкцизныйНалог;
	ОбластьМакетаПодпись				= ОбластиМакета.ОбластьМакетаПодпись;
	
	// Поставщик
	Если Область = "Поставщик" Тогда
		
		ТабДокумент.Вывести(ОбластьМакетаОтступ);
		ОбластьМакетаПоставщик.Параметры.Заполнить(Шапка);
		ОбластьМакетаПоставщик.Параметры.ПредставлениеПоставщика = Поставщик.ПредставлениеПоставщика;
		ОбластьМакетаПоставщик.Параметры.РеквизитыПоставщика = Поставщик.РеквизитыПоставщика;
		ТабДокумент.Вывести(ОбластьМакетаПоставщик);

	// ШапкаТаблицы
	ИначеЕсли Область = "ШапкаТаблицы" Тогда
		
		ОбластьМакетаШапкаТаблицы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'", КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);

	// СуммаБезСкидок
	ИначеЕсли Область = "СуммаБезСкидок" Тогда
		
		Если НастройкиПользователя.ПечататьСтрокуСоСкидками Тогда
			ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицыСкидки);
			ОбластьМакетаСтрокаСкидка.Параметры.Скидка = НСтр("ru='Сумма без скидки';uk='Сума без знижки'", КодЯзыкаПечать);
			ОбластьМакетаСтрокаСкидка.Параметры.Сумма = Формат(ТаблицаТовары.Итог("СуммаБезСкидок"),"ЧДЦ=2; ЧН=; ЧГ=");
			ТабДокумент.Вывести(ОбластьМакетаСтрокаСкидка);			
		КонецЕсли;
		
	// Сертификат
	ИначеЕсли Область = "Сертификат" Тогда
		
		Если ЗначениеЗаполнено(Сертификат) И (Шапка.СуммаСертификатаДокумента > 0) Тогда
			ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицыСкидки);
			ОбластьМакетаСтрокаСертификат.Параметры.ПредставлениеСертификата = Строка(Сертификат.ВидСертификата) + " " + Сертификат.Наименование;
			ОбластьМакетаСтрокаСертификат.Параметры.Сумма = "-" + Формат(Шапка.СуммаСертификатаДокумента,"ЧДЦ=2; ЧН=; ЧГ=");
			ТабДокумент.Вывести(ОбластьМакетаСтрокаСертификат);			
		КонецЕсли;
		
	// Скидки
	ИначеЕсли Область = "Скидки" Тогда
		
		// При одинаковом номинале скидки и наценки, в пречек ничего не выведется
		Если Булево(Шапка.СуммаСкидкиДокумента) ИЛИ Булево(Шапка.СуммаНаценкиДокумента) ИЛИ Булево(Шапка.СуммаСкидкиНаценкиДокумента) Тогда
			
			Если Шапка.РучноеУправлениеСкидками Или (Не Булево(ТаблицаСкидки.Количество())) Тогда
				Если (Шапка.СуммаСкидкиНаценкиДокумента < 0) Тогда
					ВыборкаСтрокСкидки = Новый Структура("СкидкаНаценка,Скидка,Сумма", Справочники.ТипыСкидокНаценок.ПустаяСсылка(), "Скидка", Шапка.СуммаСкидкиНаценкиДокумента);	
				Иначе
					ВыборкаСтрокСкидки = Новый Структура("СкидкаНаценка,Скидка,Сумма", Справочники.ТипыСкидокНаценок.ПустаяСсылка(), "Надбавка", Шапка.СуммаСкидкиНаценкиДокумента);	
				КонецЕсли;
				ТаблицаСкидки = Новый Массив;
				ТаблицаСкидки.Добавить(ВыборкаСтрокСкидки);
			КонецЕсли;				
			
			ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицыСкидки);
			
			Для Каждого ВыборкаСтрокСкидки из ТаблицаСкидки Цикл 		
				
				ОбластьМакетаСтрокаСкидка.Параметры.Заполнить(ВыборкаСтрокСкидки);
				
				// Наценка
				Если (ОбластьМакетаСтрокаСкидка.Параметры.Сумма > 0) Тогда
					ОбластьМакетаСтрокаСкидка.Параметры.Сумма = "+" + Формат(ОбластьМакетаСтрокаСкидка.Параметры.Сумма, "ЧДЦ=2; ЧН=; ЧГ=");
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакетаСтрокаСкидка);	
				
			КонецЦикла;
			
		КонецЕсли;
		
	// ИтогоПоОрганизациям
	ИначеЕсли Область = "ИтогоПоОрганизациям" Тогда
		
		Если НастройкиПользователя.ПечатьПречекаПоОрганизациям Тогда	
			
			ТаблицаПоОрганизациям = ТаблицаТовары.Скопировать();
			//ТаблицаПоОрганизациям.Свернуть("Организация","Сумма, СуммаНДС"); 
			ТаблицаПоОрганизациям.Свернуть("Организация","Сумма, СуммаНДС, СуммаАкцизногоНалога");
			
			Для каждого Стр Из ТаблицаПоОрганизациям Цикл
				
				ОбластьМакетаИтогоПоОрганизациям.Параметры.Организация = СокрЛП(Стр.Организация.НаименованиеПолное);
				ОбластьМакетаИтогоПоОрганизациям.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(?(Стр.Сумма = 0, "0", Стр.Сумма), мВалютаРегламентированногоУчета);
				
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоОрганизациям);
				
				Если НастройкиПользователя.ВыводитьСуммуНДС Тогда
					ОбластьМакетаИтогоНДС.Параметры.НДС      = ?(Стр.СуммаНДС = 0, НСтр("ru='Без НДС';uk='Без ПДВ'", КодЯзыкаПечать), НСтр("ru='в т.ч. НДС:';uk='у т.ч. ПДВ:'", КодЯзыкаПечать));
					ОбластьМакетаИтогоНДС.Параметры.ВсегоНДС = ?(Стр.СуммаНДС = 0, Стр.СуммаНДС, ОбщегоНазначения.ФорматСумм(Стр.СуммаНДС, мВалютаРегламентированногоУчета));
					ТабДокумент.Вывести(ОбластьМакетаИтогоНДС);
					// АкцизныйНалог
					Если НастройкиПользователя.ВыводитьСуммуАкцизногоНалога Тогда
						Если Стр.СуммаАкцизногоНалога <> 0 Тогда
							ОбластьМакетаИтогоАкцизныйНалог.Параметры.ВсегоАкцизныйНалог = ОбщегоНазначения.ФорматСумм(Стр.СуммаАкцизногоНалога, мВалютаРегламентированногоУчета);
							ТабДокумент.Вывести(ОбластьМакетаИтогоАкцизныйНалог);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	// Депозиты
	ИначеЕсли Область = "Депозиты" Тогда
		
		Если Булево(Шапка.СуммаДепозитаДокумента) Тогда
			ОбластьМакетаСтрокаДепозит.Параметры.Сумма = "+" + Формат(Шапка.СуммаДепозитаДокумента,"ЧДЦ=2; ЧН=; ЧГ=");	
			ТабДокумент.Вывести(ОбластьМакетаСтрокаДепозит);
		КонецЕсли;
		
	// Итого
	ИначеЕсли Область = "Итого" Тогда
		
		ОбластьМакетаИтого.Параметры.Всего = ОбщегоНазначения.ФорматСумм(?(ТаблицаТовары.Итог("Сумма") = 0, "0", ТаблицаТовары.Итог("Сумма")), мВалютаРегламентированногоУчета) + ".";
		ТабДокумент.Вывести(ОбластьМакетаИтого);
		
	// Всего
	ИначеЕсли Область = "Всего" Тогда
		
		ОбластьМакетаВсего.Параметры.Всего = ОбщегоНазначения.ФорматСумм(?(ТаблицаТовары.Итог("Сумма") = 0, "0", ТаблицаТовары.Итог("Сумма")), мВалютаРегламентированногоУчета) + ".";
		ТабДокумент.Вывести(ОбластьМакетаВсего);
		
	// ИтогоНДС
	ИначеЕсли Область = "ИтогоНДС" Тогда
		
		Если НастройкиПользователя.ПечатьПречекаПоОрганизациям Тогда
			Возврат;
		КонецЕсли;
		
		Если НастройкиПользователя.ВыводитьСуммуНДС Тогда
			СуммаНДС = ТаблицаТовары.Итог("СуммаНДС");
			ОбластьМакетаИтогоНДС.Параметры.НДС      = ?(СуммаНДС = 0, НСтр("ru='Без НДС';uk='Без ПДВ'", КодЯзыкаПечать), НСтр("ru='в т.ч. НДС:';uk='у т.ч. ПДВ:'", КодЯзыкаПечать));
			ОбластьМакетаИтогоНДС.Параметры.ВсегоНДС = ?(СуммаНДС = 0, СуммаНДС, ОбщегоНазначения.ФорматСумм(СуммаНДС, мВалютаРегламентированногоУчета));
			ТабДокумент.Вывести(ОбластьМакетаИтогоНДС);
		КонецЕсли;
		
		// АкцизныйНалог
		Если НастройкиПользователя.ВыводитьСуммуАкцизногоНалога Тогда
			СуммаАкцизногоНалога = ТаблицаТовары.Итог("СуммаАкцизногоНалога");
			Если СуммаАкцизногоНалога <> 0 Тогда
				ОбластьМакетаИтогоАкцизныйНалог.Параметры.ВсегоАкцизныйНалог = ОбщегоНазначения.ФорматСумм(СуммаАкцизногоНалога, мВалютаРегламентированногоУчета);
				ТабДокумент.Вывести(ОбластьМакетаИтогоАкцизныйНалог);
			КонецЕсли;
		КонецЕсли;

	// Чаевые
	ИначеЕсли Область = "Чаевые" Тогда
		
		Если НастройкиПользователя.ВыводитьЧаевыеНаПечать Тогда
			СуммаБезСкидок = ТаблицаТовары.Итог("СуммаБезСкидок");
			ОбластьМакетаЧаевые.Параметры.ЧайТриПроцента 		= Формат(Окр(СуммаБезСкидок * 0.03, 2), "ЧЦ=12; ЧДЦ=2"); // 3%
			ОбластьМакетаЧаевые.Параметры.ЧайПятьПроцентов 		= Формат(Окр(СуммаБезСкидок * 0.05, 2), "ЧЦ=12; ЧДЦ=2"); // 5%
			ОбластьМакетаЧаевые.Параметры.ЧайДесятьПроцентов 	= Формат(Окр(СуммаБезСкидок * 0.10, 2), "ЧЦ=12; ЧДЦ=2"); // 10%
			ТабДокумент.Вывести(ОбластьМакетаЧаевые);
		КонецЕсли;
		
	// ДисконтнаяКарта
	ИначеЕсли Область = "ДисконтнаяКарта" Тогда
		
		Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
			ОбластьМакетаДисконтнаяКарта.Параметры.ДисконтнаяКарта = ДисконтнаяКарта;
			ОбластьМакетаДисконтнаяКарта.Параметры.ПредставлениеДисконтнойКарты = Строка(ДисконтнаяКарта.ВидДисконтнойКарты) + " " + ДисконтнаяКарта.Наименование;
			ТабДокумент.Вывести(ОбластьМакетаДисконтнаяКарта);		
		КонецЕсли; 
		
	// Подвал
	ИначеЕсли Область = "Подвал" Тогда
		
		Если НЕ ПустаяСтрока(НастройкиПользователя.СтрокаПодвала) Тогда
			ОбластьМакетаПодвал.Параметры.ПодвалТекст = НастройкиПользователя.СтрокаПодвала;
			ТабДокумент.Вывести(ОбластьМакетаПодвал);		
		КонецЕсли;
		
	// Подпись
	ИначеЕсли Область = "Подпись" Тогда
		
		Если НастройкиПользователя.ВыводитьПодпись Тогда
			Если ЗначениеЗаполнено(Подпись) Тогда
				ОбластьМакетаПодпись.Параметры.ПодписьТекст = Подпись.Текст;
				ТабДокумент.Вывести(ОбластьМакетаПодпись);		
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	// ОтступСнизу
	Для Инд = 1 По ПараметрыПечати.КоличествоСтрокОтступСнизу Цикл
		ТабДокумент.Вывести(ОбластьМакетаОтступ);
	КонецЦикла;

КонецПроцедуры
//Костенюк Александр-Финиш 01.03.2013

//Костенюк Александр-Старт 01.03.2013
//
// Функция определяет тип таблицы(дерево либо таблица значений)
// 
// Парамтеры:
// ТаблицаЗначений - Тип: ТаблицаЗначений. Таблица, тип которой необходимо определить.
// 
// ВозвращаемоеЗначение:
// ЭтоДерево - Тип: Булево.
//
Функция ЭтоДерево(ТаблицаЗначений) Экспорт
	
	ЭтоДерево 			= Ложь;
	СтрокаGUID 			= "00000000-0000-0000-0000-000000000000"; 
	ПустойИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если СтрокаТаблицы.Владелец <> ПустойИдентификатор Тогда
			ЭтоДерево = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ЭтоДерево;
	
КонецФункции
//Костенюк Александр-Финиш 01.03.2013

//Костенюк Александр-Старт 01.03.2013
//
// Функция производит подсчет количества строк в дереве
// 
// Парамтеры:
// ДеревоЗначений - Тип: ДеревоЗначений. Дерево, в котором необходимо произвести подсчет количества строк.
// 
// ВозвращаемоеЗначение:
// КоличествоСтрок - Тип: Число.
//
Функция КоличествоСтрокДерева(ДеревоЗначений) Экспорт
	
	МассивТоваров = Новый Массив;
	Для Каждого СтрокаВладелец Из ДеревоЗначений.Строки Цикл
		МассивТоваров.Добавить(СтрокаВладелец);
	КонецЦикла;
	Для Каждого СтрокаВладелец Из МассивТоваров Цикл
		Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
			МассивТоваров.Добавить(СтрокаВладельца);
		КонецЦикла;
	КонецЦикла;
	
	КоличествоСтрок = МассивТоваров.Количество(); 
	
	Возврат КоличествоСтрок;

КонецФункции
//Костенюк Александр-Финиш 01.03.2013

//Костенюк Александр-Старт 01.03.2013
//
// Функция преобразования табилцы в таблицу для группировки
// 
// Парамтеры:
// ТаблицаИсточник - Тип: ТаблицаЗначений. Таблица, которую необходимо преобразовать.
// 
// ВозвращаемоеЗначение:
// ТаблицаПриемник - Тип: ТаблицаЗначений. Преобразованная таблица.
//
Функция ПреобразоватьТаблицу(ТаблицаИсточник) Экспорт
	
	Если ТаблицаИсточник.Колонки.Найти("Товар") = Неопределено Тогда
		ТаблицаИсточник.Колонки.Добавить("Товар", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	КонецЕсли; 
	
	ТаблицаПриемник = Новый ТаблицаЗначений;
	ТаблицаПриемник = ТаблицаИсточник.СкопироватьКолонки("НомерСтроки,Номенклатура,Товар,ЕдиницаИзмерения,Количество,Цена,Сумма,СуммаБезСкидок,СуммаСкидки,СуммаНаценки,СуммаСертификата,Комментарий,Организация");
	ТаблицаПриемник.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТаблицаПриемник.Колонки.Добавить("Владелец"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));  
	ТаблицаПриемник.Колонки.Добавить("ЕдиницаЦены"	, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		СтрокаИсточник.Товар = СтрокаИсточник.Номенклатура.НаименованиеПолное;
		
		СтрокаПриемник = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
		СтрокаПриемник.Идентификатор = Строка(СтрокаИсточник.Идентификатор); 
		СтрокаПриемник.Владелец = Строка(СтрокаИсточник.Владелец); 
		
	КонецЦикла;
	
	Возврат ТаблицаПриемник;
	
КонецФункции
//Костенюк Александр-Финиш 01.03.2013

//Костенюк Александр-Старт 04.03.2013
//
// Процедура вывода дерева в макет
//
// Параметры:
// ТабДокумент - Тип: Табличный документ.
// ПараметрыПечати - Тип: Стуктура.
// НастройкиПользователя - Тип: Стуктура. Настройки пользователя системы.
// Дерево - Тип: ДеревоЗначений. Дерево товаров.
// ОбластиМакета - Тип: Структура. Области макета.
// 
Процедура ВывестиДеревоПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, Дерево, ОбластиМакета) Экспорт
	
	// Параметры печати
	ПроизвольныеПараметрыПечати = ПараметрыПечати.ПроизвольныеПараметрыПечати;
	КоличествоСтрокВсего 		= ПараметрыПечати.КоличествоСтрокВсего;
	КоличествоСтрокШапка 		= ПараметрыПечати.КоличествоСтрокШапка;
	КоличествоСтрокПодвал 		= ПараметрыПечати.КоличествоСтрокПодвал;
	КоличествоСтрокОтступСверху = ПараметрыПечати.КоличествоСтрокОтступСверху;
	КоличествоСтрокОтступСнизу 	= ПараметрыПечати.КоличествоСтрокОтступСнизу;
	КоличествоСтрокШапкаТаблицы = ПараметрыПечати.КоличествоСтрокШапкаТаблицы;
	ПостояннаяДлинаПречеков 	= ПараметрыПечати.ПостояннаяДлинаПречеков;
	
	// ОбластиМакета
	ОбластьМакетаСтрока 			= ОбластиМакета.ОбластьМакетаСтрока;
	ОбластьМакетаСуммаСертификата 	= ОбластиМакета.ОбластьМакетаСуммаСертификата;
	ОбластьМакетаСтрокаСоСкидкой 	= ОбластиМакета.ОбластьМакетаСтрокаСоСкидкой;
	ОбластьМакетаСтрокаСНаценкой 	= ОбластиМакета.ОбластьМакетаСтрокаСНаценкой;
	ОбластьМакетаШапкаТаблицы 		= ОбластиМакета.ОбластьМакетаШапкаТаблицы;
	ОбластьМакетаРазрывСтраницы 	= ОбластиМакета.ОбластьМакетаРазрывСтраницы;
	ОбластьМакетаПробел 			= ОбластиМакета.ОбластьМакетаПробел;
	ОбластьМакетаОтступ 			= ОбластиМакета.ОбластьМакетаОтступ;
	
	// Параметры для разбивки по страницам
	ВыведеноСтрок 					= 0;
	ВсегоВыведено 					= 0;
	ВыведеноСУчетомПереносов 		= 0;
	ОсталосьВывести 				= 0;
	ОстатокВывода 					= 0;
	ОсталосьВывестиНаТекущемЛисте 	= 0;
	КвоСтрокВсегоСУчетомПереносов 	= 0;
	КвоСтрокСУчетомПереносов 		= 0;
	КвоСимволовСтрока 				= 20;
	НомерСтраницы 					= 1;
	
	// ГруппироватьБлюдаСоСкидкойБезСкидки
	Если НастройкиПользователя.ГруппироватьБлюдаСоСкидкойБезСкидки Тогда
		ДеревоГруппировкиСкидок = Новый ДеревоЗначений;
		Для Каждого КолонкаДерева Из Дерево.Колонки Цикл
			ДеревоГруппировкиСкидок.Колонки.Добавить(КолонкаДерева.Имя);
		КонецЦикла;
		// Формируем дерево блюд со скидками
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если СтрокаДерева.СуммаСкидки = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ДеревоГруппировкиСкидок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		КонецЦикла;
		ДеревоГруппировкиСкидок.Строки.Сортировать("НомерСтроки Возр", Истина);
		// Дополняем дерево блюдами без скидки
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если СтрокаДерева.СуммаСкидки <> 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ДеревоГруппировкиСкидок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		КонецЦикла;
		Дерево.Строки.Очистить();
		Дерево = ДеревоГруппировкиСкидок;
	КонецЕсли;

	ВсегоСтрокДокумента = КоличествоСтрокДерева(Дерево);
	
	ПодсчетКоличестваСтрокДокументаСПереносами(Дерево, КвоСимволовСтрока, КвоСтрокВсегоСУчетомПереносов, ОстатокВывода);
	
	СтрОтступа = "";
								
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаДерева.Номенклатура.Печатаемый Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.Заполнить(СтрокаДерева);
		
		Если НастройкиПользователя.ВыводитьСуммуБлюдаСоСкидкой Тогда
			ОбластьМакетаСтрока.Параметры.Сумма = СтрокаДерева.Сумма;
		Иначе
			ОбластьМакетаСтрока.Параметры.Сумма = СтрокаДерева.СуммаБезСкидок;
		КонецЕсли;
		
		Если ПроизвольныеПараметрыПечати Тогда
			
			// Разбивка на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			КвоСимволовНаименование	= СтрДлина(СокрЛП(СтрокаДерева.Товар));
			КвоСтрокНаименование 	= Цел(КвоСимволовНаименование/КвоСимволовСтрока);
			
			Если КвоСимволовНаименование%КвоСимволовСтрока = 0 Тогда
				КвоСтрокСУчетомПереносов = КвоСтрокНаименование;
			Иначе
				КвоСтрокСУчетомПереносов = КвоСтрокНаименование + 1;
			КонецЕсли;
			
			ВсегоВыведено = ВсегоВыведено + КвоСтрокСУчетомПереносов;
			
			Если (НомерСтраницы = 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок >= КоличествоСтрокВсего) ИЛИ
				(НомерСтраницы > 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок >= КоличествоСтрокВсего) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
				ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
				НомерСтраницы = НомерСтраницы + 1;
				ОсталосьВывести = ОстатокВывода - ВсегоВыведено;
				Если НомерСтраницы = 1 Тогда
					МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы);
				ИначеЕсли НомерСтраницы > 1 Тогда
					МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы);
				КонецЕсли;
				Если ОсталосьВывести > МожноВывести Тогда
					ОсталосьТеоретически = МожноВывести;
				КонецЕсли;
				Если ОсталосьВывести < ОсталосьТеоретически Тогда
					ОсталосьВывестиНаТекущемЛисте = ОсталосьВывести;
				КонецЕсли;
				ОстатокВывода = ОстатокВывода - ВсегоВыведено;
				ВыведеноСтрок = 0;
				ВсегоВыведено = 0;
				
			ИначеЕсли (НомерСтраницы = 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено >= КоличествоСтрокВсего) ИЛИ
				(НомерСтраницы > 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено >= КоличествоСтрокВсего) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
				ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
				НомерСтраницы = НомерСтраницы + 1;
				ОсталосьВывести = ОстатокВывода - ВсегоВыведено;
				Если НомерСтраницы = 1 Тогда
					МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы);
				ИначеЕсли НомерСтраницы > 1 Тогда
					МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы);
				КонецЕсли;
				ОсталосьТеоретически = МожноВывести;
				Если ОсталосьВывести > МожноВывести Тогда
					ОсталосьТеоретически = МожноВывести;
				КонецЕсли;
				Если ОсталосьВывести < ОсталосьТеоретически Тогда
					ОсталосьВывестиНаТекущемЛисте = ОсталосьВывести;
				КонецЕсли;
				ОстатокВывода = ОстатокВывода - ВсегоВыведено;
				ВыведеноСтрок = 0;
				ВсегоВыведено = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		// Сумма сертификата по каждой позиции
		Если НастройкиПользователя.ВыводитьСуммуСертификатаПоКаждойПозиции Тогда
			Если СтрокаДерева.СуммаСертификата <> 0 Тогда
				ОбластьМакетаСуммаСертификата.Параметры.Сумма = "-" + Формат(СтрокаДерева.СуммаСертификата, "ЧЦ=12; ЧДЦ=2");
				ТабДокумент.Вывести(ОбластьМакетаСуммаСертификата);
			КонецЕсли;
		КонецЕсли;

		// Сумма скидки по каждой позиции
		Если НастройкиПользователя.ВыводитьСуммуСкидкиПоКаждойПозиции Тогда
			Если СтрокаДерева.СуммаСкидки <> 0 Тогда
				ПроцентСкидки = (СтрокаДерева.СуммаСкидки/(СтрокаДерева.СуммаБезСкидок - СтрокаДерева.СуммаСертификата))*100;
				ОбластьМакетаСтрокаСоСкидкой.Параметры.Процент = "-" + Формат(ПроцентСкидки, "ЧЦ=10") + "%";
				ОбластьМакетаСтрокаСоСкидкой.Параметры.Сумма = "-" + Формат(СтрокаДерева.СуммаСкидки, "ЧЦ=12; ЧДЦ=2");
				ТабДокумент.Вывести(ОбластьМакетаСтрокаСоСкидкой);
			КонецЕсли;
		КонецЕсли;
		
		// Сумма наценки по каждой позиции
		Если НастройкиПользователя.ВыводитьСуммуНаценкиПоКаждойПозиции Тогда
			Если СтрокаДерева.СуммаНаценки <> 0 Тогда
				ПроцентНаценки = (СтрокаДерева.СуммаНаценки/(СтрокаДерева.СуммаБезСкидок - СтрокаДерева.СуммаСертификата))*100;
				ОбластьМакетаСтрокаСНаценкой.Параметры.Процент = "+" + Формат(ПроцентНаценки, "ЧЦ=10") + "%";
				ОбластьМакетаСтрокаСНаценкой.Параметры.Сумма = "+" + Формат(СтрокаДерева.СуммаНаценки, "ЧЦ=12; ЧДЦ=2");
				ТабДокумент.Вывести(ОбластьМакетаСтрокаСНаценкой);
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкиПользователя.ИспользоватьОтступПослеНоменклатуры Тогда
			ТабДокумент.Вывести(ОбластьМакетаОтступ);
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			СтрОтступа = СтрОтступа + "     ";
			
			Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
				
				Если НЕ ЗначениеЗаполнено(ВложеннаяСтрокаДерева.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ВложеннаяСтрокаДерева.Номенклатура.Печатаемый Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВложеннаяСтрокаДерева);
				ОбластьМакетаСтрока.Параметры.Товар = СтрОтступа + СокрЛП(ВложеннаяСтрокаДерева.Товар);
				
				Если ПроизвольныеПараметрыПечати Тогда
					
					// Разбивка на страницы
					ВыведеноСтрок = ВыведеноСтрок + 1;
					
					КвоСимволовНаименование	= СтрДлина(СокрЛП(СтрокаДерева.Товар));
					КвоСтрокНаименование 	= Цел(КвоСимволовНаименование/КвоСимволовСтрока);
					
					Если КвоСимволовНаименование%КвоСимволовСтрока = 0 Тогда
						КвоСтрокСУчетомПереносов = КвоСтрокНаименование;
					Иначе
						КвоСтрокСУчетомПереносов = КвоСтрокНаименование + 1;
					КонецЕсли;
					
					ВсегоВыведено = ВсегоВыведено + КвоСтрокСУчетомПереносов;
					
					Если (НомерСтраницы = 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок >= КоличествоСтрокВсего) ИЛИ
						(НомерСтраницы > 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок >= КоличествоСтрокВсего) Тогда
						
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
						ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
						НомерСтраницы = НомерСтраницы + 1;
						ОсталосьВывести = ОстатокВывода - ВсегоВыведено;
						Если НомерСтраницы = 1 Тогда
							МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы);
						ИначеЕсли НомерСтраницы > 1 Тогда
							МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы);
						КонецЕсли;
						Если ОсталосьВывести > МожноВывести Тогда
							ОсталосьТеоретически = МожноВывести;
						КонецЕсли;
						Если ОсталосьВывести < ОсталосьТеоретически Тогда
							ОсталосьВывестиНаТекущемЛисте = ОсталосьВывести;
						КонецЕсли;
						ОстатокВывода = ОстатокВывода - ВсегоВыведено;
						ВыведеноСтрок = 0;
						ВсегоВыведено = 0;
						
					ИначеЕсли (НомерСтраницы = 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено >= КоличествоСтрокВсего) ИЛИ
						(НомерСтраницы > 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено >= КоличествоСтрокВсего) Тогда
						
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
						ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
						НомерСтраницы = НомерСтраницы + 1;
						ОсталосьВывести = ОстатокВывода - ВсегоВыведено;
						Если НомерСтраницы = 1 Тогда
							МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы);
						ИначеЕсли НомерСтраницы > 1 Тогда
							МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы);
						КонецЕсли;
						ОсталосьТеоретически = МожноВывести;
						Если ОсталосьВывести > МожноВывести Тогда
							ОсталосьТеоретически = МожноВывести;
						КонецЕсли;
						Если ОсталосьВывести < ОсталосьТеоретически Тогда
							ОсталосьВывестиНаТекущемЛисте = ОсталосьВывести;
						КонецЕсли;
						ОстатокВывода = ОстатокВывода - ВсегоВыведено;
						ВыведеноСтрок = 0;
						ВсегоВыведено = 0;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакетаСтрока);
				
				Если НастройкиПользователя.ИспользоватьОтступПослеНоменклатуры Тогда
					ТабДокумент.Вывести(ОбластьМакетаОтступ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПостояннаяДлинаПречеков Тогда
			Если (НомерСтраницы = 1) И (ВыведеноСтрок = ВсегоСтрокДокумента) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу < КоличествоСтрокВсего) Тогда
				КоличествоПробелов 	= КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу);
				ВыведеноПробелов 	= 0;
				Для Инд = 1 По КоличествоПробелов Цикл
					ВыведеноПробелов = ВыведеноПробелов + 1;
					ТабДокумент.Вывести(ОбластьМакетаПробел);
					Если КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + ВыведеноПробелов + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу = КоличествоСтрокВсего Тогда 
						ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли (НомерСтраницы = 1) И (ВсегоВыведено = ОсталосьВывестиНаТекущемЛисте) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу < КоличествоСтрокВсего) Тогда
				КоличествоПробелов 	= КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу);
				ВыведеноПробелов 	= 0;
				Для Инд = 1 По КоличествоПробелов Цикл
					ВыведеноПробелов = ВыведеноПробелов + 1;
					ТабДокумент.Вывести(ОбластьМакетаПробел);
					Если КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + ВыведеноПробелов + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу = КоличествоСтрокВсего Тогда 
						ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли (НомерСтраницы > 1) Тогда
				Если (ВыведеноСтрок = ОсталосьВывестиНаТекущемЛисте) И (ОсталосьВывестиНаТекущемЛисте <> 0) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу < КоличествоСтрокВсего) Тогда
					КоличествоПробелов 	= КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу);
					ВыведеноПробелов 	= 0;
					Для Инд = 1 По КоличествоПробелов Цикл
						ВыведеноПробелов = ВыведеноПробелов + 1;
						ТабДокумент.Вывести(ОбластьМакетаПробел);
						Если КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок + ВыведеноПробелов + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу = КоличествоСтрокВсего Тогда 
							ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли (ВсегоВыведено = ОсталосьВывестиНаТекущемЛисте) И (ОсталосьВывестиНаТекущемЛисте <> 0) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу < КоличествоСтрокВсего) Тогда
					КоличествоПробелов 	= КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу);
					ВыведеноПробелов 	= 0;
					Для Инд = 1 По КоличествоПробелов Цикл
						ВыведеноПробелов = ВыведеноПробелов + 1;
						ТабДокумент.Вывести(ОбластьМакетаПробел);
						Если КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + ВыведеноПробелов + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу = КоличествоСтрокВсего Тогда 
							ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//Костенюк Александр-Финиш 04.03.2013

//Костенюк Александр-Старт 05.03.2013
//
// Процедура вывода таблицы в макет
//
// Параметры:
// ТабДокумент - Тип: Табличный документ.
// ПараметрыПечати - Тип: Стуктура.
// НастройкиПользователя - Тип: Стуктура. Настройки пользователя системы.
// ТаблицаЗначений - Тип: ТаблицаЗначений. Таблица товаров.
// ОбластиМакета - Тип: Структура. Области макета.
// 
Процедура ВывестиТаблицуПречека(ТабДокумент, ПараметрыПечати, НастройкиПользователя, ТаблицаЗначений, ОбластиМакета) Экспорт
	
	// Параметры печати
	ПроизвольныеПараметрыПечати = ПараметрыПечати.ПроизвольныеПараметрыПечати;
	КоличествоСтрокВсего 		= ПараметрыПечати.КоличествоСтрокВсего;
	КоличествоСтрокШапка 		= ПараметрыПечати.КоличествоСтрокШапка;
	КоличествоСтрокПодвал 		= ПараметрыПечати.КоличествоСтрокПодвал;
	КоличествоСтрокОтступСверху = ПараметрыПечати.КоличествоСтрокОтступСверху;
	КоличествоСтрокОтступСнизу 	= ПараметрыПечати.КоличествоСтрокОтступСнизу;
	КоличествоСтрокШапкаТаблицы = ПараметрыПечати.КоличествоСтрокШапкаТаблицы;
	ПостояннаяДлинаПречеков 	= ПараметрыПечати.ПостояннаяДлинаПречеков;
	
	// ОбластиМакета
	ОбластьМакетаСтрока 			= ОбластиМакета.ОбластьМакетаСтрока;
	ОбластьМакетаСуммаСертификата 	= ОбластиМакета.ОбластьМакетаСуммаСертификата;
	ОбластьМакетаСтрокаСоСкидкой 	= ОбластиМакета.ОбластьМакетаСтрокаСоСкидкой;
	ОбластьМакетаСтрокаСНаценкой 	= ОбластиМакета.ОбластьМакетаСтрокаСНаценкой;
	ОбластьМакетаШапкаТаблицы 		= ОбластиМакета.ОбластьМакетаШапкаТаблицы;
	ОбластьМакетаРазрывСтраницы 	= ОбластиМакета.ОбластьМакетаРазрывСтраницы;
	ОбластьМакетаПробел 			= ОбластиМакета.ОбластьМакетаПробел;
	ОбластьМакетаОтступ 			= ОбластиМакета.ОбластьМакетаОтступ;
	
	// Параметры для разбивки по страницам
	ВыведеноСтрок 					= 0;
	ВсегоВыведено 					= 0;
	ВыведеноСУчетомПереносов 		= 0;
	ОсталосьВывести 				= 0;
	ОстатокВывода 					= 0;
	ОсталосьВывестиНаТекущемЛисте 	= 0;
	КвоСтрокВсегоСУчетомПереносов 	= 0;
	КвоСтрокСУчетомПереносов 		= 0;
	КвоСимволовСтрока 				= 20;
	НомерСтраницы 					= 1;
	
	// ГруппироватьБлюдаСоСкидкойБезСкидки
	Если НастройкиПользователя.ГруппироватьБлюдаСоСкидкойБезСкидки Тогда
		ТаблицаГруппировкиСкидок = ТаблицаЗначений.СкопироватьКолонки();
		// Формируем таблицу блюд со скидками
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			Если СтрокаТаблицы.СуммаСкидки = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаГруппировкиСкидок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		// Дополняем таблицу блюдами без скидки
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			Если СтрокаТаблицы.СуммаСкидки <> 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаГруппировкиСкидок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		ТаблицаЗначений.Очистить();
		ТаблицаЗначений = ТаблицаГруппировкиСкидок;
	КонецЕсли;
	
	ВсегоСтрокДокумента = ТаблицаЗначений.Количество();
	
	ПодсчетКоличестваСтрокДокументаСПереносами(ТаблицаЗначений, КвоСимволовСтрока, КвоСтрокВсегоСУчетомПереносов, ОстатокВывода);
	
	Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначений Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗначений.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТаблицыЗначений.Номенклатура.Печатаемый Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.Заполнить(СтрокаТаблицыЗначений);
		
		Если НастройкиПользователя.ВыводитьСуммуБлюдаСоСкидкой Тогда
			ОбластьМакетаСтрока.Параметры.Сумма = СтрокаТаблицыЗначений.Сумма;
		Иначе
			ОбластьМакетаСтрока.Параметры.Сумма = СтрокаТаблицыЗначений.СуммаБезСкидок;
		КонецЕсли;
		
		Если ПроизвольныеПараметрыПечати Тогда
			
			// Разбивка на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			КвоСимволовНаименование	= СтрДлина(СокрЛП(СтрокаТаблицыЗначений.Товар));
			КвоСтрокНаименование 	= Цел(КвоСимволовНаименование/КвоСимволовСтрока);
			
			Если КвоСимволовНаименование%КвоСимволовСтрока = 0 Тогда
				КвоСтрокСУчетомПереносов = КвоСтрокНаименование;
			Иначе
				КвоСтрокСУчетомПереносов = КвоСтрокНаименование + 1;
			КонецЕсли;
			
			ВсегоВыведено = ВсегоВыведено + КвоСтрокСУчетомПереносов;
			
			Если (НомерСтраницы = 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок >= КоличествоСтрокВсего) ИЛИ
				(НомерСтраницы > 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок >= КоличествоСтрокВсего) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
				ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
				НомерСтраницы = НомерСтраницы + 1;
				ОсталосьВывести = ОстатокВывода - ВсегоВыведено;
				Если НомерСтраницы = 1 Тогда
					МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы);
				ИначеЕсли НомерСтраницы > 1 Тогда
					МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы);
				КонецЕсли;
				Если ОсталосьВывести > МожноВывести Тогда
					ОсталосьТеоретически = МожноВывести;
				КонецЕсли;
				Если ОсталосьВывести < ОсталосьТеоретически Тогда
					ОсталосьВывестиНаТекущемЛисте = ОсталосьВывести;
				КонецЕсли;
				ОстатокВывода = ОстатокВывода - ВсегоВыведено;
				ВыведеноСтрок = 0;
				ВсегоВыведено = 0;
				
			ИначеЕсли (НомерСтраницы = 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено >= КоличествоСтрокВсего) ИЛИ
				(НомерСтраницы > 1) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено >= КоличествоСтрокВсего) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
				ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
				НомерСтраницы = НомерСтраницы + 1;
				ОсталосьВывести = ОстатокВывода - ВсегоВыведено;
				Если НомерСтраницы = 1 Тогда
					МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы);
				ИначеЕсли НомерСтраницы > 1 Тогда
					МожноВывести = КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы);
				КонецЕсли;
				ОсталосьТеоретически = МожноВывести;
				Если ОсталосьВывести > МожноВывести Тогда
					ОсталосьТеоретически = МожноВывести;
				КонецЕсли;
				Если ОсталосьВывести < ОсталосьТеоретически Тогда
					ОсталосьВывестиНаТекущемЛисте = ОсталосьВывести;
				КонецЕсли;
				ОстатокВывода = ОстатокВывода - ВсегоВыведено;
				ВыведеноСтрок = 0;
				ВсегоВыведено = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		// Сумма сертификата по каждой позиции
		Если НастройкиПользователя.ВыводитьСуммуСертификатаПоКаждойПозиции Тогда
			Если СтрокаТаблицыЗначений.СуммаСертификата <> 0 Тогда
				ОбластьМакетаСуммаСертификата.Параметры.Сумма = "-" + Формат(СтрокаТаблицыЗначений.СуммаСертификата, "ЧЦ=12; ЧДЦ=2");
				ТабДокумент.Вывести(ОбластьМакетаСуммаСертификата);
			КонецЕсли;
		КонецЕсли;
		
		// Сумма скидки по каждой позиции
		Если НастройкиПользователя.ВыводитьСуммуСкидкиПоКаждойПозиции Тогда
			Если СтрокаТаблицыЗначений.СуммаСкидки <> 0 Тогда
				ПроцентСкидки = (СтрокаТаблицыЗначений.СуммаСкидки/(СтрокаТаблицыЗначений.СуммаБезСкидок - СтрокаТаблицыЗначений.СуммаСертификата))*100;
				ОбластьМакетаСтрокаСоСкидкой.Параметры.Процент = "-" + Формат(ПроцентСкидки, "ЧЦ=10") + "%";
				ОбластьМакетаСтрокаСоСкидкой.Параметры.Сумма = "-" + Формат(СтрокаТаблицыЗначений.СуммаСкидки, "ЧЦ=12; ЧДЦ=2");
				ТабДокумент.Вывести(ОбластьМакетаСтрокаСоСкидкой);
			КонецЕсли;
		КонецЕсли;
		
		// Сумма наценки по каждой позиции
		Если НастройкиПользователя.ВыводитьСуммуНаценкиПоКаждойПозиции Тогда
			Если СтрокаТаблицыЗначений.СуммаНаценки <> 0 Тогда
				ПроцентНаценки = (СтрокаТаблицыЗначений.СуммаНаценки/(СтрокаТаблицыЗначений.СуммаБезСкидок - СтрокаТаблицыЗначений.СуммаСертификата))*100;
				ОбластьМакетаСтрокаСНаценкой.Параметры.Процент = "+" + Формат(ПроцентНаценки, "ЧЦ=10") + "%";
				ОбластьМакетаСтрокаСНаценкой.Параметры.Сумма = "+" + Формат(СтрокаТаблицыЗначений.СуммаНаценки, "ЧЦ=12; ЧДЦ=2");
				ТабДокумент.Вывести(ОбластьМакетаСтрокаСНаценкой);
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкиПользователя.ИспользоватьОтступПослеНоменклатуры Тогда
			ТабДокумент.Вывести(ОбластьМакетаОтступ);
		КонецЕсли;
		
		Если ПостояннаяДлинаПречеков Тогда
			Если (НомерСтраницы = 1) И (ВыведеноСтрок = ВсегоСтрокДокумента) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу < КоличествоСтрокВсего) Тогда
				КоличествоПробелов 	= КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу);
				ВыведеноПробелов 	= 0;
				Для Инд = 1 По КоличествоПробелов Цикл
					ВыведеноПробелов = ВыведеноПробелов + 1;
					ТабДокумент.Вывести(ОбластьМакетаПробел);
					Если КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + ВыведеноПробелов + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу = КоличествоСтрокВсего Тогда 
						ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли (НомерСтраницы = 1) И (ВсегоВыведено = ОсталосьВывестиНаТекущемЛисте) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу < КоличествоСтрокВсего) Тогда
				КоличествоПробелов 	= КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу);
				ВыведеноПробелов 	= 0;
				Для Инд = 1 По КоличествоПробелов Цикл
					ВыведеноПробелов = ВыведеноПробелов + 1;
					ТабДокумент.Вывести(ОбластьМакетаПробел);
					Если КоличествоСтрокОтступСверху + КоличествоСтрокШапка + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + ВыведеноПробелов + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу = КоличествоСтрокВсего Тогда 
						ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли (НомерСтраницы > 1) Тогда
				Если (ВыведеноСтрок = ОсталосьВывестиНаТекущемЛисте) И (ОсталосьВывестиНаТекущемЛисте <> 0) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу < КоличествоСтрокВсего) Тогда
					КоличествоПробелов 	= КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу);
					ВыведеноПробелов 	= 0;
					Для Инд = 1 По КоличествоПробелов Цикл
						ВыведеноПробелов = ВыведеноПробелов + 1;
						ТабДокумент.Вывести(ОбластьМакетаПробел);
						Если КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВыведеноСтрок + ВыведеноПробелов + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу = КоличествоСтрокВсего Тогда 
							ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли (ВсегоВыведено = ОсталосьВывестиНаТекущемЛисте) И (ОсталосьВывестиНаТекущемЛисте <> 0) И (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу < КоличествоСтрокВсего) Тогда
					КоличествоПробелов 	= КоличествоСтрокВсего - (КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу);
					ВыведеноПробелов 	= 0;
					Для Инд = 1 По КоличествоПробелов Цикл
						ВыведеноПробелов = ВыведеноПробелов + 1;
						ТабДокумент.Вывести(ОбластьМакетаПробел);
						Если КоличествоСтрокОтступСверху + КоличествоСтрокШапкаТаблицы + ВсегоВыведено + ВыведеноПробелов + КоличествоСтрокПодвал + КоличествоСтрокОтступСнизу = КоличествоСтрокВсего Тогда 
							ТабДокумент.Вывести(ОбластьМакетаРазрывСтраницы);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
//Костенюк Александр-Финиш 05.03.2013

#КонецЕсли

//Костенюк Александр-Старт 16.04.2013
//
// Процедура подготавливает табличную часть документа к записи
//
Процедура ПодготовитьТабличнуюЧастьТовары(РежимЗаписи, РежимПроведения) Экспорт
	
	// Состояния.
	ОдинОжидает = Ложь;
	ОдинВыполняется = Ложь;
	ОдинВыполнен = Ложь;
	ВсеВыполненны = Истина;
	ПерваяСтрока = Истина;
	
	МодульРесторан = Перечисления.МодулиИПодсистемы.Ресторан;
	МодульДоставка = Перечисления.МодулиИПодсистемы.Доставка;
	
	// Режим.
	ИнтернетРежим = ОбщегоНазначения.ПолучитьБулевоеСвойство(ДополнительныеСвойства, "ИнтернетРежим");
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СкладПоУмолчанию = СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Склад;
			Если НЕ ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
				#Если НЕ Сервер Тогда
					Если ОбщегоНазначения.РежимFrontOffice() Тогда
						ТекущийРежимРаботы = ПолучитьСерверFrontOffice().ТекущийРежимРаботы();
						Если ЗначениеЗаполнено(ТекущийРежимРаботы) Тогда
							СкладПоУмолчанию = ТекущийРежимРаботы.Склад;
						КонецЕсли;
					КонецЕсли;
				#КонецЕсли	
			КонецЕсли;
			СтрокаТабличнойЧасти.Склад = СкладПоУмолчанию;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.ВидНоменклатуры <> Перечисления.ТипыСтрокЗаказов.Товар Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Идентификатор) Тогда
				СтрокаТабличнойЧасти.Идентификатор = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			НайденныйВладелец = Товары.Найти(СтрокаТабличнойЧасти.Владелец, "Идентификатор");
			
			Если НайденныйВладелец <> Неопределено Тогда
				СтрокаТабличнойЧасти.Распечатан = НайденныйВладелец.Распечатан ИЛИ Распечатан;
			ИНаче
				СтрокаТабличнойЧасти.Распечатан = Распечатан;
			КонецЕсли;
			
		Иначе
			
			УчаствуетВПроизводсте = (Модуль = МодульРесторан) ИЛИ ИнтернетРежим ИЛИ (НЕ мНоменклатурныеГруппыПроизводства.Найти(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) = Неопределено);
			
			// Распечатан.
			СтрокаТабличнойЧасти.Распечатан = СтрокаТабличнойЧасти.Распечатан ИЛИ Распечатан ИЛИ 
			СтрокаТабличнойЧасти.Выполненн ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) ИЛИ (НЕ УчаствуетВПроизводсте);
			
			Если Модуль = МодульРесторан И НЕ СтрокаТабличнойЧасти.Распечатан Тогда
				СтрокаТабличнойЧасти.Распечатан = СтрокаТабличнойЧасти.ПорядокПодачи > 0 ИЛИ (НЕ СтрокаТабличнойЧасти.Номенклатура.Услуга И СтрокаТабличнойЧасти.НаВынос);
			КонецЕсли;
			
			// Раздельная печать пречеков по гостям
			Если СтрокаТабличнойЧасти.НомерКлиента = 0 Тогда
				СтрокаТабличнойЧасти.ПречекРаспечатан = Истина;
			Иначе
				НайденнаяСтрока = Клиенты.Найти(СтрокаТабличнойЧасти.НомерКлиента, "НомерКлиента");
				Если НайденнаяСтрока <> Неопределено Тогда
					СтрокаТабличнойЧасти.ПречекРаспечатан = НайденнаяСтрока.ПречекРаспечатан;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтрока) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтрока = СтрокаТабличнойЧасти.Идентификатор;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВладелецСтрока) Тогда
			СтрокаТабличнойЧасти.ВладелецСтрока = СтрокаТабличнойЧасти.Владелец;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Комментарий = СокрЛ(СтрокаТабличнойЧасти.Комментарий);
		
		// ВидНоменклатуры.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНоменклатуры) Тогда
			Если ПерваяСтрока ИЛИ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)) Тогда
				СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар;
			Иначе
				СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор;
			КонецЕсли;
		КонецЕсли;
		
		// Выполненн и Выполняется.
		СтрокаТабличнойЧасти.Выполненн = СтрокаТабличнойЧасти.Выполненн ИЛИ Распечатан ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) ИЛИ	(НЕ УчаствуетВПроизводсте);
		
		// ДатаНачалаПериода.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
			СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаОкончанияПериода), мТекущаяДата);
		КонецЕсли;
		
		// ДатаОкончанияПериода.
		Если СтрокаТабличнойЧасти.Выполненн Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
				СтрокаТабличнойЧасти.ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаНачалаПериода), мТекущаяДата);
			КонецЕсли;
		КонецЕсли;
		
		Если Модуль = МодульДоставка Тогда
			// НаВынос.
			СтрокаТабличнойЧасти.НаВынос = Истина;
			// ПорядокПодачи.
			СтрокаТабличнойЧасти.ПорядокПодачи = Неопределено;
		КонецЕсли;
		
		ОдинОжидает = ОдинОжидает Или (УчаствуетВПроизводсте И (Не СтрокаТабличнойЧасти.Распечатан) И (Не СтрокаТабличнойЧасти.Выполненн));
		ОдинВыполняется = ОдинВыполняется Или (УчаствуетВПроизводсте И СтрокаТабличнойЧасти.Распечатан И (Не СтрокаТабличнойЧасти.Выполненн));
		ОдинВыполнен = ОдинВыполнен Или (УчаствуетВПроизводсте И СтрокаТабличнойЧасти.Выполненн);
		ВсеВыполненны = ВсеВыполненны И СтрокаТабличнойЧасти.Выполненн;
		
		ПерваяСтрока = Ложь;
		
	КонецЦикла;
	
	// Шапка.
	Ожидает = ОдинОжидает И (ОдинВыполняется Или ОдинВыполнен);
	Выполняется = ОдинВыполняется;
	Выполненн = ВсеВыполненны;
	
КонецПроцедуры
//Костенюк Александр-Финиш 16.04.2013

//Костенюк Александр-Старт 03.07.2014
Процедура ПечатьДеревоВстречки(Дерево, Макет, ТабДокумент, ЭтоВозврат, ПодачаВынос = 0, КодЯзыкаПечать, ВывелиНаВынос = Ложь, СтрОтступа = "", НаВынос = Ложь)
	
	Если НЕ ЭтоВозврат Тогда
		
		Для Каждого СтрокаДереваЗначений Из Дерево.Строки Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодачаВынос");
			
			// Вынос
			Если СтрокаДереваЗначений.НаВынос Тогда
				Если НаВынос <> СтрокаДереваЗначений.НаВынос Тогда
					НаВынос = СтрокаДереваЗначений.НаВынос;
					ОбластьМакета.Параметры.ПодачаВынос = НСтр("ru='На вынос';uk='На виніс'", КодЯзыкаПечать);						
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
			// Подача
			Иначе
				Если ПодачаВынос <> Макс(СтрокаДереваЗначений.ПорядокПодачи, 1) Тогда
					ПодачаВынос = СтрокаДереваЗначений.ПорядокПодачи;
					ОбластьМакета.Параметры.ПодачаВынос = НСтр("ru='Подача №';uk='Подача №'", КодЯзыкаПечать) + СокрЛП(СтрокаДереваЗначений.ПорядокПодачи);						
					ТабДокумент.Вывести(ОбластьМакета);						
				КонецЕсли;
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			ОбластьМакета.Параметры.Номенклатура = СтрОтступа + СокрЛП(СтрокаДереваЗначений.Номенклатура);
			ОбластьМакета.Параметры.Кво = ?(СтрокаДереваЗначений.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Условие, СтрокаДереваЗначений.Количество, "");
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ЗначениеЗаполнено(СтрокаДереваЗначений.Комментарий) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКомментарий");
				ОбластьМакета.Параметры.Комментарий = СтрокаДереваЗначений.Комментарий;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли; 
			
			Если СтрокаДереваЗначений.Строки.Количество() > 0 Тогда
				СтрОтступа = СтрОтступа + "     ";
				ПечатьДеревоВстречки(СтрокаДереваЗначений, Макет, ТабДокумент, ЭтоВозврат, ПодачаВынос, КодЯзыкаПечать, , СтрОтступа, НаВынос);
			КонецЕсли;
			
		КонецЦикла;	
		
	Иначе
		
		Для Каждого СтрокаДереваЗначений Из Дерево.Строки Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			ОбластьМакета.Параметры.Номенклатура = СтрОтступа + СокрЛП(СтрокаДереваЗначений.Номенклатура);
			ОбластьМакета.Параметры.Кво = ?(СтрокаДереваЗначений.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Условие, СтрокаДереваЗначений.Количество, "");
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ЗначениеЗаполнено(СтрокаДереваЗначений.Комментарий) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКомментарий");
				ОбластьМакета.Параметры.Комментарий = СтрокаДереваЗначений.Комментарий;
				ТабДокумент.Вывести(ОбластьМакета);						
			КонецЕсли; 
			
			Если СтрокаДереваЗначений.Строки.Количество() > 0 Тогда
				СтрОтступа = СтрОтступа + "     ";		
				ПечатьДеревоВстречки(СтрокаДереваЗначений, Макет, ТабДокумент, ЭтоВозврат, ПодачаВынос, КодЯзыкаПечать, ВывелиНаВынос, СтрОтступа);			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 03.07.2014


// Инициализация переменных
мВестиУчетСебестоимости			= глЗначениеПеременной("ВестиУчетСебестоимости");
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");