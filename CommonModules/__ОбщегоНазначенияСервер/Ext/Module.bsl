
Функция Метаданные(Объект) Экспорт
	
	Перем Результат;
	
	Структура = Новый Структура("ДополнительныеСвойства"); ЗаполнитьЗначенияСвойств(Структура, Объект);
	
	Если (Структура.ДополнительныеСвойства = Неопределено) Тогда
		Результат = Объект.Ссылка.Метаданные();
	Иначе
		Объект.ДополнительныеСвойства.Свойство("Метаданные", Результат);
		Если (Результат = Неопределено) Тогда
			Результат = Объект.Метаданные();
			Объект.ДополнительныеСвойства.Вставить("Метаданные", Результат);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // Метаданные()

Функция Реквизиты(Объект, ТабличнаяЧасть = Неопределено) Экспорт
	
	Если (ТабличнаяЧасть = Неопределено) Тогда
		Возврат Метаданные(Объект).Реквизиты;
	Иначе
		Возврат Метаданные(Объект).ТабличныеЧасти[ТабличнаяЧасть].Реквизиты;
	КонецЕсли;
	
КонецФункции // Реквизиты()


Функция Оригинал(Объект) Экспорт
	
	Перем Результат;
	
	Структура = Новый Структура("ДополнительныеСвойства"); ЗаполнитьЗначенияСвойств(Структура, Объект);
	
	Если (Структура.ДополнительныеСвойства = Неопределено) Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Результат = Объект.Ссылка.ПолучитьОбъект();
		Иначе
			Результат = Объект.Ссылка;
		КонецЕсли; 
	Иначе
		Объект.ДополнительныеСвойства.Свойство("Оригинал", Результат);
		Если (Результат = Неопределено) Тогда
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Результат = Объект.Ссылка.ПолучитьОбъект();
			Иначе
				Результат = Объект.Ссылка;
			КонецЕсли; 
			Объект.ДополнительныеСвойства.Вставить("Оригинал", Результат);
		Иначе
			Если (Не Результат.ВерсияДанных = Объект.Ссылка.ВерсияДанных) Тогда
				Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Результат = Объект.Ссылка.ПолучитьОбъект();
				Иначе
					Результат = Объект.Ссылка;
				КонецЕсли; 
				Объект.ДополнительныеСвойства.Вставить("Оригинал", Результат);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // Оригинал()


Функция ПолучитьЗначение(Объект, Реквизит, Привилегированно = Ложь) Экспорт
	
	Если Привилегированно Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли; 
	
	Структура = Новый Структура(Реквизит); ЗаполнитьЗначенияСвойств(Структура, Объект);
	
	Если (Структура.Количество() = 1) Тогда
		Структура.Свойство(Реквизит, Структура);
	КонецЕсли; 
	
	Если Привилегированно Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	Возврат Структура;
	
КонецФункции // ПолучитьЗначение()


Функция ТаблицуЗначенийВДеревоЗначений(ТаблицаЗначений, Ссылка = "", Родитель = "", ДеревоЗначений = Неопределено) Экспорт
	
	// Дерево значений.
	Если (ДеревоЗначений = Неопределено) Тогда
		ДеревоЗначений = Новый ДеревоЗначений;
	Иначе
		ДеревоЗначений.Строки.Очистить();
		ДеревоЗначений.Колонки.Очистить();
	КонецЕсли;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ДеревоЗначений.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		Если (НРег(Колонка.Имя) = "родитель") Тогда
			ИндексКолонкиРодителя = ТаблицаЗначений.Колонки.Индекс(Колонка);
		ИначеЕсли (НРег(Колонка.Имя) = "строки") Тогда
			ИндексКолонкиСтроки = ТаблицаЗначений.Колонки.Индекс(Колонка);
		КонецЕсли;
	КонецЦикла;
	ИндексПоискаСсылки = ТаблицаЗначений.Колонки.Индекс(ТаблицаЗначений.Колонки[Ссылка]);
	ИндексПоискаРодителя = ТаблицаЗначений.Колонки.Индекс(ТаблицаЗначений.Колонки[Родитель]);
	
	// Сортировка.
	УпорядоченнаяТаблица = ТаблицаЗначений.Скопировать();
	Для ИндексСтроки = 0 По УпорядоченнаяТаблица.Количество() - 1 Цикл
		СтрокаТаблицыЗначений = УпорядоченнаяТаблица.Получить(ИндексСтроки);
		РодительВТаблицеЗначений = УпорядоченнаяТаблица.Найти(СтрокаТаблицыЗначений[ИндексПоискаРодителя], Ссылка);
		Если (РодительВТаблицеЗначений = Неопределено) Тогда
			ИндексРодителя = -1;
		Иначе
			ИндексРодителя = УпорядоченнаяТаблица.Индекс(РодительВТаблицеЗначений);
		КонецЕсли;
		Если (ИндексСтроки < ИндексРодителя) Тогда
			УпорядоченнаяТаблица.Сдвинуть(РодительВТаблицеЗначений, ИндексСтроки - ИндексРодителя);
			ИндексСтроки = ИндексСтроки - 1;
		КонецЕсли;
	КонецЦикла;
	
	// Перенос данных.
	СоответствиеРодетелей = Новый Соответствие;
	Для Каждого СтрокаТаблицыЗначений Из УпорядоченнаяТаблица Цикл
		РодительВДеревеЗначений = СоответствиеРодетелей[СтрокаТаблицыЗначений[ИндексПоискаРодителя]];
		Если (РодительВДеревеЗначений = Неопределено) Тогда
			РодительВДеревеЗначений = ДеревоЗначений.Строки;
		КонецЕсли;
		
		СтрокаДереваЗначений = РодительВДеревеЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДереваЗначений, СтрокаТаблицыЗначений);
		Если (Не ИндексКолонкиРодителя = Неопределено) Тогда
			СтрокаДереваЗначений[ИндексКолонкиРодителя] = СтрокаТаблицыЗначений[ИндексКолонкиРодителя];
		КонецЕсли;
		Если (Не ИндексКолонкиСтроки = Неопределено) Тогда
			СтрокаДереваЗначений[ИндексКолонкиСтроки] = СтрокаТаблицыЗначений[ИндексКолонкиСтроки];
		КонецЕсли;
		
		СоответствиеРодетелей[СтрокаТаблицыЗначений[ИндексПоискаСсылки]] = СтрокаДереваЗначений.Строки;
	КонецЦикла;
		
	Возврат ДеревоЗначений;
	
КонецФункции  // ТаблицуЗначенийВДеревоЗначений()


Процедура ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, ДобавляемыеРеквизиты = Неопределено, УдаляемыеРеквизиты = Неопределено) Экспорт

	// Добавляемые.
	Если (Не ДобавляемыеРеквизиты = Неопределено) Тогда
		Реквизиты = Новый Структура(ДобавляемыеРеквизиты);
		Для Каждого Реквизит Из Реквизиты Цикл
			ПроверяемыеРеквизиты.Добавить(Реквизит.Ключ);
		КонецЦикла; 
	КонецЕсли; 
	
	// Удаляемые.
	Если (Не УдаляемыеРеквизиты = Неопределено) Тогда
		Реквизиты = Новый Структура(УдаляемыеРеквизиты);
		Для Каждого Реквизит Из Реквизиты Цикл
			Индекс = ПроверяемыеРеквизиты.Найти(Реквизит.Ключ); Если (Не Индекс = Неопределено) Тогда
				ПроверяемыеРеквизиты.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ИзменитьПроверяемыеРеквизиты()
 

Функция ПолучитьНастройкиПараметровУчета() Экспорт
	
	Возврат РегистрыСведений.НастройкаПараметровУчета.Получить();
	
КонецФункции // ПолучитьНастройкиПараметровУчета()


Функция ПолучитьНастройкуТекущегоПользователеля(Настройка, ПоУмолчанию = Неопределено) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить(Настройка, ПоУмолчанию);
	
	Настройки = ПолучитьНастройкиТекущегоПользователеля(Настройки);
	
	Возврат Настройки[Настройка];
	
КонецФункции // ПолучитьНастройкуТекущегоПользователеля()

Функция ПолучитьНастройкиТекущегоПользователеля(Настройки) Экспорт
	
	МассивНастроек = Новый Массив; СоответствиеНастроек = Новый Соответствие;
	Для Каждого ЭлементНастроек Из Настройки Цикл
		Настройка = ЭлементНастроек.Ключ;
		
		Если (ТипЗнч(Настройка) = Тип("Строка")) Тогда
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
		КонецЕсли;
		СоответствиеНастроек[Настройка] = ЭлементНастроек.Ключ;
		МассивНастроек.Добавить(Настройка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиПользователейПользователь.Настройка, ЕСТЬNULL(НастройкиПользователейГруппаПользователей.Настройка, ЕСТЬNULL(НастройкиПользователейРежимРаботы.Настройка, НастройкиПользователейОсновные.Настройка))) КАК Настройка,
	|	ЕСТЬNULL(НастройкиПользователейПользователь.Значение, ЕСТЬNULL(НастройкиПользователейГруппаПользователей.Значение, ЕСТЬNULL(НастройкиПользователейРежимРаботы.Значение, НастройкиПользователейОсновные.Значение))) КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкиПользователей.Настройка КАК Настройка,
	|		НастройкиПользователей.Значение КАК Значение
	|	ИЗ
	|		РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|	ГДЕ
	|		НастройкиПользователей.Настройка В(&Настройки)
	|		И НастройкиПользователей.Пользователь = НЕОПРЕДЕЛЕНО) КАК НастройкиПользователейОсновные
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НастройкиПользователей.Настройка КАК Настройка,
	|			НастройкиПользователей.Значение КАК Значение
	|		ИЗ
	|			РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ГДЕ
	|			НастройкиПользователей.Настройка В(&Настройки)
	|			И НастройкиПользователей.Пользователь = &Пользователь) КАК НастройкиПользователейПользователь
	|		ПО НастройкиПользователейОсновные.Настройка = НастройкиПользователейПользователь.Настройка,
	|	(ВЫБРАТЬ
	|		НастройкиПользователей.Настройка КАК Настройка,
	|		НастройкиПользователей.Значение КАК Значение
	|	ИЗ
	|		РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|	ГДЕ
	|		НастройкиПользователей.Настройка В(&Настройки)
	|		И НастройкиПользователей.Пользователь = &ГруппаПользователей) КАК НастройкиПользователейГруппаПользователей,
	|	(ВЫБРАТЬ
	|		НастройкиПользователей.Настройка КАК Настройка,
	|		НастройкиПользователей.Значение КАК Значение
	|	ИЗ
	|		РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|	ГДЕ
	|		НастройкиПользователей.Настройка В(&Настройки)
	|		И НастройкиПользователей.Пользователь = &РежимРаботы) КАК НастройкиПользователейРежимРаботы";
	Запрос.УстановитьПараметр("РежимРаботы", ПараметрыСеанса.ТекущийРежимРаботы);
	Запрос.УстановитьПараметр("ГруппаПользователей", ПараметрыСеанса.ТекущаяГруппаПользователей);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Настройки", МассивНастроек);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Настройки[СоответствиеНастроек[Выборка.Настройка]] = Выборка.Значение;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки;
	
КонецФункции // ПолучитьНастройкиТекущегоПользователеля()

Функция ПолучитьНастройкуПользователеля(Пользователь, Настройка, ПоУмолчанию = Неопределено) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить(Настройка, ПоУмолчанию);
	
	Настройки = ПолучитьНастройкиПользователеля(Пользователь, Настройки);
	
	Возврат Настройки[Настройка];
	
КонецФункции // ПолучитьНастройкуПользователеля()

Функция ПолучитьНастройкиПользователеля(Пользователь, Настройки) Экспорт
	
	МассивНастроек = Новый Массив; СоответствиеНастроек = Новый Соответствие;
	Для Каждого ЭлементНастроек Из Настройки Цикл
		Настройка = ЭлементНастроек.Ключ;
		
		Если (ТипЗнч(Настройка) = Тип("Строка")) Тогда
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
		КонецЕсли;
		СоответствиеНастроек[Настройка] = ЭлементНастроек.Ключ;
		МассивНастроек.Добавить(Настройка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиПользователейПользователь.Настройка, НастройкиПользователейОсновные.Настройка) КАК Настройка,
	|	ЕСТЬNULL(НастройкиПользователейПользователь.Значение, НастройкиПользователейОсновные.Значение) КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкиПользователей.Настройка КАК Настройка,
	|		НастройкиПользователей.Значение КАК Значение
	|	ИЗ
	|		РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|	ГДЕ
	|		НастройкиПользователей.Настройка В(&Настройки)
	|		И НастройкиПользователей.Пользователь = НЕОПРЕДЕЛЕНО) КАК НастройкиПользователейОсновные
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НастройкиПользователей.Настройка КАК Настройка,
	|			НастройкиПользователей.Значение КАК Значение
	|		ИЗ
	|			РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ГДЕ
	|			НастройкиПользователей.Настройка В(&Настройки)
	|			И НастройкиПользователей.Пользователь = &Пользователь) КАК НастройкиПользователейПользователь
	|		ПО НастройкиПользователейОсновные.Настройка = НастройкиПользователейПользователь.Настройка";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройки", МассивНастроек);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Настройки[СоответствиеНастроек[Выборка.Настройка]] = Выборка.Значение;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки;
	
КонецФункции // ПолучитьНастройкиПользователеля()


Процедура УстановитьНастройкуПользователеля(Отказ, Пользователь, Настройка, Значение) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить(Настройка, Значение);
	
	УстановитьНастройкиПользователеля(Отказ, Пользователь, Настройки);
	
КонецПроцедуры // УстановитьНастройкуПользователеля()

Процедура УстановитьНастройкиПользователеля(Отказ, Пользователь, Настройки) Экспорт
	
	Если (Отказ = Неопределено) Тогда
		Отказ = Ложь;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		СоответствиеНастроек = Новый Соответствие;
		Для Каждого ЭлементНастроек Из Настройки Цикл
			Настройка = ЭлементНастроек.Ключ; Значение = ЭлементНастроек.Значение;
			
			Если (ТипЗнч(Настройка) = Тип("Строка")) Тогда
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
			КонецЕсли;
			СоответствиеНастроек[Настройка] = Значение;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Для Каждого ЭлементСоответствияНастроек Из СоответствиеНастроек Цикл
			Настройка = ЭлементСоответствияНастроек.Ключ; Значение = ЭлементСоответствияНастроек.Значение;
			
			Запись = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
			
			Запись.Настройка = Настройка;
			Запись.Значение = Значение;
			
			Попытка
				Запись.Записать(Истина);
			Исключение
				Отказ = Истина; Прервать;
			КонецПопытки;
		КонецЦикла;
		
		Если Не Отказ Тогда
			Попытка
				ЗафиксироватьТранзакцию();
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось записать настройки'; uk = 'Не вдалося записати налаштування'");
			__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Неопределено, Неопределено, Неопределено, Отказ);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // УстановитьНастройкиПользователеля()


Функция ПрочитатьXMLВТаблицу(ТекстXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	
	// Прочитаем первый узел и проверим его
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение("Пустой XML");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение("Ошибка в структуре XML");
	КонецЕсли;
	
	// Получим описание таблицы и создадим ее
	ИмяТаблицы = Чтение.ПолучитьАтрибут("Description");
	ИменаКолонок = СтрЗаменить(Чтение.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	Колонок = СтрЧислоСтрок(ИменаКолонок);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Сч = 1 По Колонок Цикл
		ТаблицаЗначений.Колонки.Добавить(СтрПолучитьСтроку(ИменаКолонок, Сч), Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	// Заполним значения в таблице
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли Чтение.Имя <> "Item" Тогда
			ВызватьИсключение("Ошибка в структуре XML");
		КонецЕсли;
		
		новСтр = ТаблицаЗначений.Добавить();
		Для Сч = 1 По Колонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			новСтр[Сч-1] = Чтение.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним результат
	Результат = Новый Структура;
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Данные", ТаблицаЗначений);
	
	Возврат Результат;
	
КонецФункции // ПрочитатьXMLВТаблицу()



Процедура СообщитьОбНеуникальностиРеквизитаСправочника(ОбъектИлиСсылка, Поле = Неопределено, ПутьКДанным = Неопределено, Отказ = Ложь) Экспорт

	ТекстСообщения = Шаблон(НСтр("ru = 'Поле [Поле] не уникально'; uk = 'Поле [Поле] не унікально'"), 
		Новый Структура("Поле", Кавычки(Реквизиты(ОбъектИлиСсылка)[__ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(Поле, ПутьКДанным)].Синоним)));
		
	__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, ОбъектИлиСсылка, Поле, ПутьКДанным, Отказ);

КонецПроцедуры // СообщитьОбНеуникальностиРеквизитаСправочника()


//Костенюк Александр-Старт 11.09.2012
//------------------------------------------------------------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции для работы с данными в базе

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт

	Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1'"), 
			Строка(ТипЗнч(ИменаРеквизитов)));
	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с типами, объектами метаданных и их строковыми представлениями.

// Возвращает менеджер объекта по полному имени объекта метаданных
//
// Не обрабатываются точки маршрутов бизнес-процессов
//
// Параметры:
//  ПолноеИмя    - Строка, полное имя объекта метаданных,
//                 например, "Справочник.Организации"
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ...
// 
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
	
	КлассОМ = ЧастиИмени[0];
	ИмяОМ   = ЧастиИмени[1];
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Возврат ПланыОбмена[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Возврат Справочники[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Возврат Документы[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Возврат ЖурналыДокументов[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Возврат Перечисления[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Возврат Отчеты[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Возврат Обработки[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Возврат ПланыВидовХарактеристик[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Возврат ПланыСчетов[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Возврат ПланЫВидовРасчета[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Возврат РегистрыСведений[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Возврат РегистрыНакопления[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Возврат РегистрыБухгалтерии[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Возврат РегистрыРасчета[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Возврат БизнесПроцессы[ИмяОМ];
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Возврат Задачи[ИмяОМ];
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неизвестный тип объекта метаданных (%1)'"), КлассОМ);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции для работы с прикладными типами и коллекциями значений

// Процедура удаляет из массива МассивРеквизитов элементы, соответствующие именам 
// реквизитов объекта из массива МассивНепроверяемыхРеквизитов.
// Для использования в обработчиках события ОбработкаПроверкиЗаполнения.
//
// Параметры:
//	МассивРеквизитов              - Массив - массив строк с именами реквизитов объекта.
//	МассивНепроверяемыхРеквизитов - Массив строк с именами реквизитов объекта, не требующих проверки.
//
Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
	
		ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			МассивРеквизитов.Удалить(ПорядковыйНомер);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Имена типов.

// Возвращает значение для идентификации общего типа "Регистры сведений"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыСведений() Экспорт
	
	Возврат "РегистрыСведений";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры накопления"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыНакопления() Экспорт
	
	Возврат "РегистрыНакопления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры бухгалтерии"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыБухгалтерии() Экспорт
	
	Возврат "РегистрыБухгалтерии";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры расчета"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыРасчета() Экспорт
	
	Возврат "РегистрыРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Документы"
//
// Тип: Строка
//
Функция ИмяТипаДокументы() Экспорт
	
	Возврат "Документы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Справочники"
//
// Тип: Строка
//
Функция ИмяТипаСправочники() Экспорт
	
	Возврат "Справочники";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Перечисления"
//
// Тип: Строка
//
Функция ИмяТипаПеречисления() Экспорт
	
	Возврат "Перечисления";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Отчеты"
//
// Тип: Строка
//
Функция ИмяТипаОтчеты() Экспорт
	
	Возврат "Отчеты";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Обработки"
//
// Тип: Строка
//
Функция ИмяТипаОбработки() Экспорт
	
	Возврат "Обработки";
	
КонецФункции

// Возвращает значение для идентификации общего типа "ПланыОбмена"
//
// Тип: Строка
//
Функция ИмяТипаПланыОбмена() Экспорт
	
	Возврат "ПланыОбмена";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов характеристик"
//
// Тип: Строка
//
Функция ИмяТипаПланыВидовХарактеристик() Экспорт
	
	Возврат "ПланыВидовХарактеристик";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Бизнес-процессы"
//
// Тип: Строка
//
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат "БизнесПроцессы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Задачи"
//
// Тип: Строка
//
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат "Задачи";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы счетов"
//
// Тип: Строка
//
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат "ПланыСчетов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов расчета"
//
// Тип: Строка
//
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат "ПланыВидовРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Константы"
//
// Тип: Строка
//
Функция ИмяТипаКонстанты() Экспорт
	
	Возврат "Константы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Журналы документов"
//
// Тип: Строка
//
Функция ИмяТипаЖурналыДокументов() Экспорт
	
	Возврат "ЖурналыДокументов";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Сохранение, чтение и удаление настроек из хранилищ

// Сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ХранилищеСохранить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		Значение,
		ОписаниеНастроек,
		ИмяПользователя,
		НужноОбновитьПовторноИспользуемыеЗначения
	);
	
КонецПроцедуры

// Загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить()
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ХранилищеЗагрузить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя
	);
	
КонецФункции

// Удаляет настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Удалить,
//   подробнее - см. параметры функции ХранилищеУдалить()
//
Процедура ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ХранилищеУдалить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ИмяПользователя
	);
	
КонецПроцедуры

// Сохраняет массив пользовательских настроек МассивСтруктур. 
// Может применяться для случаев вызова с клиента.
// 
// Параметры:
//    МассивСтруктур - Массив - массив структур с полями "Объект", "Настройка", "Значение".
//    НужноОбновитьПовторноИспользуемыеЗначения - Булево - требуется обновить повторно используемые значения
//
Процедура ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур,
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивСтруктур Цикл
		ХранилищеОбщихНастроек.Сохранить(Элемент.Объект, Элемент.Настройка, Элемент.Значение);
	КонецЦикла;
	
	Если НужноОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет массив пользовательских настроек МассивСтруктур и обновляет повторно
//   используемые значения. Может применяться для случаев вызова с клиента.
// 
// Параметры:
//    МассивСтруктур - Массив - массив структур с полями "Объект", "Настройка", "Значение".
//
Процедура ХранилищеОбщихНастроекСохранитьМассивИОбновитьПовторноИспользуемыеЗначения(МассивСтруктур) Экспорт
	
	ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, Истина);
	
КонецПроцедуры

// Сохраняет настройку в хранилище общих настроек и обновляет повторно используемые 
//   значения.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
//
Процедура ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения(КлючОбъекта, КлючНастроек, Значение) Экспорт
	
	ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение,,,Истина);
	
КонецПроцедуры

// Сохраняет настройку в хранилище системных настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
// 
Процедура ХранилищеСистемныхНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ХранилищеСохранить(
		ХранилищеСистемныхНастроек, 
		КлючОбъекта, 
		КлючНастроек, 
		Значение,
		ОписаниеНастроек, 
		ИмяПользователя, 
		НужноОбновитьПовторноИспользуемыеЗначения
	);
	
КонецПроцедуры

// Загружает настройку из хранилища системных настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить()
//
Функция ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ХранилищеЗагрузить(
		ХранилищеСистемныхНастроек, 
		КлючОбъекта, 
		КлючНастроек, 
		ЗначениеПоУмолчанию, 
		ОписаниеНастроек, 
		ИмяПользователя
	);
	
КонецФункции

// Удаляет настройку из хранилища системных настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Удалить,
//   подробнее - см. параметры функции ХранилищеУдалить()
//
Процедура ХранилищеСистемныхНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ХранилищеУдалить(
		ХранилищеСистемныхНастроек,
		КлючОбъекта,
		КлючНастроек,
		ИмяПользователя
	);
	
КонецПроцедуры

// Сохраняет настройку в хранилище настроек данных форм.
// 
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
//
Процедура ХранилищеНастроекДанныхФормСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ХранилищеСохранить(
		ХранилищеНастроекДанныхФорм, 
		КлючОбъекта, 
		КлючНастроек, 
		Значение,
		ОписаниеНастроек, 
		ИмяПользователя, 
		НужноОбновитьПовторноИспользуемыеЗначения
	);
	
КонецПроцедуры

// Загружает настройку из хранилища настроек данных форм.
//
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить()
//
Функция ХранилищеНастроекДанныхФормЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ХранилищеЗагрузить(
		ХранилищеНастроекДанныхФорм, 
		КлючОбъекта, 
		КлючНастроек, 
		ЗначениеПоУмолчанию, 
		ОписаниеНастроек, 
		ИмяПользователя
	);
	
КонецФункции

// Удаляет настройку из хранилища настроек данных форм.
//
// Параметры:
//   Соответствуют методу ХранилищеНастроекДанныхФорм.Удалить,
//   подробнее - см. параметры функции ХранилищеУдалить()
//
Процедура ХранилищеНастроекДанныхФормУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ХранилищеУдалить(
		ХранилищеНастроекДанныхФорм,
		КлючОбъекта,
		КлючНастроек,
		ИмяПользователя
	);
	
КонецПроцедуры

// Сохраняет настройку в хранилище настроек через его менеджер.
// 
// Параметры:
//   МенеджерХранилища (СтандартноеХранилищеНастроекМенеджер) Хранилище, в котором сохраняется настройка
//   КлючОбъекта       (Строка) Ключ объекта настройки. 
//                              Подробнее см. раздел справки "Настройки, автоматически сохраняемые в системном хранилище".
//   КлючНастроек      (Строка) Ключ сохраняемых настроек.
//   Значение          (*)      Содержит настройки, которые нужно сохранить в хранилище. 
//   ОписаниеНастроек  (ОписаниеНастроек) Содержит информацию об описании настройки.
//   ИмяПользователя   (Строка) Имя пользователя, настройки которого сохраняются.
//                              Если не указано, то сохраняются настройки текущего пользователя.
//   НужноОбновитьПовторноИспользуемыеЗначения (Булево)
// 
Процедура ХранилищеСохранить(МенеджерХранилища, КлючОбъекта, КлючНастроек, Значение,
	ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения)
	
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерХранилища.Сохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователя);
	
	Если НужноОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Загружает настройку из хранилища настроек через его менеджер.
//
// Параметры:
//   МенеджерХранилища   (СтандартноеХранилищеНастроекМенеджер) Хранилище, из которого загружается настройка
//   КлючОбъекта         (Строка) Ключ объекта настройки. 
//                                Подробнее см. раздел справки "Настройки, автоматически сохраняемые в системном хранилище".
//   КлючНастроек        (Строка) Ключ сохраняемых настроек.
//   ЗначениеПоУмолчанию (*)      Значение, которое необходимо подставить если настройки не были загружены.
//   ОписаниеНастроек    (ОписаниеНастроек) Через данный параметр при загрузке можно получить описание настроек.
//   ИмяПользователя     (Строка) Имя пользователя, настройки которого загружается.
//                                Если не указано, то загружается настройки текущего пользователя.
// 
// Возвращаемое значение: 
//   (*) Настройки, загруженные из хранилища. Неопределено, если настройки не найдены. 
// 
Функция ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию,
	ОписаниеНастроек, ИмяПользователя)
	
	Результат = Неопределено;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;
	
	Если (Результат = Неопределено) И (ЗначениеПоУмолчанию <> Неопределено) Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Удаляет настройку из хранилища настроек через его менеджер.
//
// Параметры:
//   МенеджерХранилища (СтандартноеХранилищеНастроекМенеджер) Хранилище, из которого удаляется настройка
//   КлючОбъекта       (Строка)       Ключ объекта настройки. 
//                     (Неопределено) Удаляются настройки для всех объектов.
//   КлючНастроек      (Строка)       Ключ сохраняемых настроек.
//                     (Неопределено) Удаляются настройки со всеми ключами.
//   ИмяПользователя   (Строка)       Имя пользователя, настройки которого загружается.
//                     (Неопределено) Удаляются настройки всех пользователей.
// 
// Возвращаемое значение: 
//   (*) Настройки, загруженные из хранилища. Неопределено, если настройки не найдены. 
// 
Процедура ХранилищеУдалить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ИмяПользователя)
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		МенеджерХранилища.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку, соответствующую объекту метаданных, для
// использования в базе данных.
//  Например:
//  Идентификатор = ОбщегоНазначения.ИнденификаторОбъектаМетаданных(ТипЗнч(Ссылка));
//  Идентификатор = ОбщегоНазначения.ИнденификаторОбъектаМетаданных(ОбъектМетаданных);
//  Идентификатор = ОбщегоНазначения.ИнденификаторОбъектаМетаданных("Справочник.Организации");
//
//  Поддерживаемые объекты метаданных:
// - Подсистемы (требуется программировать переименование)
// - Роли       (требуется программировать переименование)
// - ПланыОбмена
// - Справочники
// - Документы
// - ЖурналыДокументов
// - Отчеты
// - Обработки
// - ПланыВидовХарактеристик
// - ПланыСчетов
// - ПланыВидовРасчета
// - РегистрыСведений
// - РегистрыНакопления
// - РегистрыБухгалтерии
// - РегистрыРасчета
// - БизнесПроцессы
// - Задачи
// 
// Подробнее см. в функции СвойстваКоллекцийОбъектовМетаданных()
// модуля менеджера справочника ИдентификаторыОбъектовМетаданных.
//
// Параметры:
//  ОписаниеОбъектаМетаданных - ОбъектМетаданных
//                            - Тип, который можно успешно использовать
//                              в функции Метаданные.НайтиПоТипу()
//                            - Строка - полное имя объекта метаданных,
//                              которое можно успешно использовать
//                              в функции Метаданные.НайтиПоПолномуИмени()
// Возвращаемое значение:
//  СправочникСсылка.ИдентификаторыОбъектовМетаданных
//
Функция ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОписанияОбъектаМетаданных = ТипЗнч(ОписаниеОбъектаМетаданных);
	Если ТипОписанияОбъектаМетаданных = Тип("Тип") Тогда
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
		Если ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().
				           |
				           |Объект метаданных не найден по типу:
				           |""%1"".'"),
				ОписаниеОбъектаМетаданных);
		Иначе
			Таблица = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
		
	ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("Строка") Тогда
		Таблица = ОписаниеОбъектаМетаданных;
	Иначе
		Таблица = ОписаниеОбъектаМетаданных.ПолноеИмя();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолноеИмя", Таблица);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка,
	|	Идентификаторы.КлючОбъектаМетаданных,
	|	Идентификаторы.ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ПолноеИмя = &ПолноеИмя
	|	И НЕ Идентификаторы.ПометкаУдаления";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Если Выгрузка.Количество() = 0 Тогда
		// Если идентификатор не найден по полному имени, возможно что полное имя задано с ошибкой
		Если ТипОписанияОбъектаМетаданных = Тип("Строка")
		   И Метаданные.НайтиПоПолномуИмени(ОписаниеОбъектаМетаданных) = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().
				           |
				           |Объект метаданнных не найден по полному имени:
				           |""%1"".'"),
				ОписаниеОбъектаМетаданных);
		КонецЕсли;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().
			           |
			           |Для объекта метаданных ""%1""
			           |не найден идентификатор
			           |в справочнике ""Идентификаторы объектов метаданных"".
			           |
			           |Если справочник не был обновлен при обновлении информационной базы,
			           |следует выполнить обновление вручную:
			           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
			           |команда формы списка ""Обновить данные справочника"".'"),
			Таблица);
	ИначеЕсли Выгрузка.Количество() > 1 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().
			           |
			           |Для объекта метаданных ""%1""
			           |найдено несколько идентификаторов
			           |в справочнике ""Идентификаторы объектов метаданных"".
			           |
			           |Данные справочника некорректны. Если справочник не был обновлен
			           |при обновлении информационной базы, следует выполнить обновление вручную:
			           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
			           |команда формы списка ""Обновить данные справочника"".'"),
			Таблица);
	КонецЕсли;
	
	// Проверка соответствия ключа объекта метаданных полному имени объекта метаданных
	РезультатПроверки = Справочники.ИдентификаторыОбъектовМетаданных.КлючОбъектаМетаданныхСоответствуетПолномуИмени(Выгрузка[0]);
	Если РезультатПроверки.НеСоответствует Тогда
		Если РезультатПроверки.ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().
				           |
				           |Для объекта метаданных ""%1""
				           |найден идентификатор в справочнике ""Идентификаторы объектов метаданных"",
				           |которому соответствует удаленный объект метаданных.
				           |
				           |Данные справочника некорректны. Если справочник не был обновлен
				           |при обновлении информационной базы, следует выполнить обновление вручную:
				           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
				           |команда формы списка ""Обновить данные справочника"".'"),
				Таблица);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().
				           |
				           |Для объекта метаданных ""%1""
				           |найден идентификатор в справочнике ""Идентификаторы объектов метаданных"",
				           |который соответствует другому объекту метаданных ""%2"".
				           |
				           |Данные справочника некорректны. Если справочник не был обновлен
				           |при обновлении информационной базы, следует выполнить обновление вручную:
				           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
				           |команда формы списка ""Обновить данные справочника"".'"),
				Таблица,
				РезультатПроверки.ОбъектМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Выгрузка[0].Ссылка;
	
КонецФункции

// Возвращает объект метаданных, по переданному идентификатору
//
// Параметры:
//  Идентификатор - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//
// Возвращаемое значение:
//  ОбъектМетаданных
//
Функция ОбъектМетаданныхПоИдентификатору(Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Идентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка,
	|	Идентификаторы.КлючОбъектаМетаданных,
	|	Идентификаторы.ПолноеИмя,
	|	Идентификаторы.ПометкаУдаления
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.Ссылка = &Ссылка";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору().
			           |
			           |Идентификатор ""%1""
			           |не найден в справочнике ""Идентификаторы объектов метаданных"".
			           |
			           |Если справочник не был обновлен при обновлении информационной базы,
			           |следует выполнить обновление вручную:
			           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
			           |команда формы списка ""Обновить данные справочника"".'"),
			Строка(Идентификатор));
	КонецЕсли;
	
	// Проверка соответствия ключа объекта метаданных полному имени объекта метаданных
	РезультатПроверки = Справочники.ИдентификаторыОбъектовМетаданных.КлючОбъектаМетаданныхСоответствуетПолномуИмени(Выгрузка[0]);
	Если РезультатПроверки.НеСоответствует Тогда
		Если РезультатПроверки.ОбъектМетаданных = Неопределено Тогда
			Если РезультатПроверки.КлючОбъектаМетаданных = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору().
					           |
					           |Идентификатору ""%1""
					           |найденому в справочнике ""Идентификаторы объектов метаданных"",
					           |соответствует несуществующий объект метаданных
					           |""%2"".
					           |
					           |Если справочник не был обновлен при обновлении информационной базы,
					           |следует выполнить обновление вручную:
					           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
					           |команда формы списка ""Обновить данные справочника"".'"),
					Строка(Идентификатор),
					Выгрузка[0].ПолноеИмя);
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору().
					           |
					           |Идентификатору ""%1""
					           |найденому в справочнике ""Идентификаторы объектов метаданных"",
					           |соответствует удаленный объект метаданных.
					           |
					           |Данные справочника некорректны. Если справочник не был обновлен
					           |при обновлении информационной базы, следует выполнить обновление вручную:
					           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
					           |команда формы списка ""Обновить данные справочника"".'"),
					Строка(Идентификатор));
			КонецЕсли;
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ИдентификаторОбъектаМетаданных().
				           |
				           |Идентификатору ""%1""
				           |найденому в справочнике ""Идентификаторы объектов метаданных"",
				           |соответствует объект метаданных ""%2"",
				           |полное имя которого отличается от заданного в идентификаторе.
				           |
				           |Если справочник не был обновлен при обновлении информационной базы,
				           |следует выполнить обновление вручную:
				           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
				           |команда формы списка ""Обновить данные справочника"".'"),
				Строка(Идентификатор),
				РезультатПроверки.ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЕсли;
	
	Если Выгрузка[0].ПометкаУдаления Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении функции ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору().
			           |
			           |Идентификатор ""%1""
			           |найден в справочнике ""Идентификаторы объектов метаданных"",
			           |но значение реквизита ""Пометка удаления"" установлено Истина.
			           |
			           |Если справочник не был обновлен при обновлении информационной базы,
			           |следует выполнить обновление вручную:
			           |""Все функции"" -> ""Справочник. Идентификаторы объектов метаданных"" ->
			           |команда формы списка ""Обновить данные справочника"".'"),
			Строка(Идентификатор));
	КонецЕсли;
	
	Возврат РезультатПроверки.ОбъектМетаданных;
	
КонецФункции

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

// Выполнить экспортную процедуру по имени.
//
// Параметры
//  ИмяЭкспортнойПроцедуры – Строка    – имя экспортной процедуры в формате 
//										 <имя объекта>.<имя процедуры>, где <имя объекта> - это
// 										 общий модуль или модуль менеджера объекта.
// Параметры               - Массив    - параметры передаются в процедуру <ИмяЭкспортнойПроцедуры>
//                                       в порядке расположения элементов массива.
// ОбластьДанных           - Число     - задает область данных, в которой необходимо выполнить процедуру.
// 
// Пример:
//  ВыполнитьБезопасно("МойОбщийМодуль.МояПроцедура"); 
//
Процедура ВыполнитьБезопасно(ИмяЭкспортнойПроцедуры, Параметры = Неопределено, ОбластьДанных = Неопределено) Экспорт
	
	// Проверка предусловий на формат ИмяЭкспортнойПроцедуры.       
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭкспортнойПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 И ЧастиИмени.Количество() <> 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если ЧастиИмени.Количество() = 2 И Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецЕсли;
		
	Если ЧастиИмени.Количество() = 3 Тогда
		ДопустимыеИменаТипов = Новый Массив;
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаКонстанты()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаРегистрыСведений()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаРегистрыНакопления()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаРегистрыБухгалтерии()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаРегистрыРасчета()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаСправочники()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаДокументы()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаОтчеты()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаОбработки()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаБизнесПроцессы()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаЗадачи()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаПланыСчетов()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаПланыОбмена()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаПланыВидовХарактеристик()));
		ДопустимыеИменаТипов.Добавить(ВРег(ИмяТипаПланыВидовРасчета()));
		ИмяТипа = ВРег(ЧастиИмени[0]);
		Если ДопустимыеИменаТипов.Найти(ИмяТипа) = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
				ИмяЭкспортнойПроцедуры);
		КонецЕсли;
	КонецЕсли;
	
	ИмяМетода = ЧастиИмени[ЧастиИмени.ВГраница()];
	ВременнаяСтруктура = Новый Структура;
	Попытка
		// Проверка на то, что ИмяМетода является допустимым идентификатором.
		// Например: МояПроцедура
		ВременнаяСтруктура.Вставить(ИмяМетода);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Безопасное выполнение метода'"), УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецПопытки;
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	Выполнить ИмяЭкспортнойПроцедуры + "(" + ПараметрыСтрока + ")";
	
КонецПроцедуры

//------------------------------------------------------------------------------------------------------------------------------------
//Костенюк Александр-Финиш 11.09.2012