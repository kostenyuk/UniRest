
#Если Клиент Тогда
	
Функция ОтладочныйРежим() Экспорт
	
	Возврат Ложь;
	
	Возврат Истина;
	
КонецФункции


// Процедура вывода на экран окна служебного сообщения.
//
Процедура ВывестиСообщение(ТекстСообщения, Статус = Неопределено, Заголовок = Ложь) Экспорт
	
	// Вывод сообщения.
	ПолучитьСерверFrontOffice().ВывестиСлужебноеСообщение(ТекстСообщения, Статус, Заголовок);
		
КонецПроцедуры // ВывестиСообщение()


// Процедура вывода на экран окна предупреждения.
//
// Параметры:
//	ТекстПредупреждения - Строка. Текст предупреждения.;
//	Таймаут - Число. Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя;
//	Заголовок - Строка. Заголовок окна.
//
Процедура ВывестиПредупреждение(ТекстПредупреждения, Таймаут = 0, Заголовок = "") Экспорт
	
	// Перенаправление.
	Touch.__Предупреждение(ТекстПредупреждения, Таймаут, Заголовок);
	
КонецПроцедуры // ВывестиПредупреждение()
	
// Процедура вывода на экран окна восклицания.
//
// Параметры:
//	ТекстПредупреждения - Строка. Текст предупреждения.;
//	Таймаут - Число. Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя;
//	Заголовок - Строка. Заголовок окна.
//
Процедура ВывестиВосклицание(ТекстПредупреждения, Таймаут = 0, Заголовок = "") Экспорт
	
	// Перенаправление.
	Touch.__Восклицание(ТекстПредупреждения, Таймаут, Заголовок);
	
КонецПроцедуры // ВывестиВосклицание()

// Процедура вывода на экран окна ошибки.
//
// Параметры:
//	ТекстПредупреждения - Строка. Текст предупреждения.;
//	Таймаут - Число. Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя;
//	Заголовок - Строка. Заголовок окна.
//
Процедура ВывестиОшибку(ТекстПредупреждения, Таймаут = 0, Заголовок = "") Экспорт
	
	// Перенаправление.
	Touch.__Ошибка(ТекстПредупреждения, Таймаут, Заголовок);
	
КонецПроцедуры // ВывестиОшибку()


// Функция вывода на экран окна вопроса.
//
// Параметры:
//	ТекстВопроса - Строка. Текст задаваемого вопроса;
//	Режим - РежимДиалогаВопрос. Задает состав кнопок диалога и возможные варианты ответов;
//	Таймаут - Число. Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя;
//	КнопкаПоУмолчанию - КодВозвратаДиалога. Определяет кнопку, которая должна быть назначена кнопкой по умолчанию;
//	Заголовок - Строка. Заголовок окна.
//
// Возвращаемое значение:
//	КодВозвратаДиалога. В зависимости от реакции пользователя возвращается одно из значений системного перечисления.
//
Функция ВывестиВопрос(ТекстВопроса, Режим, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "") Экспорт
	
	// Перенаправление.
	Возврат Touch.__Вопрос(ТекстВопроса, Режим, Таймаут, КнопкаПоУмолчанию, Заголовок);
	
КонецФункции // ВывестиВопрос()


// Функция ввода числа через числовую экранную клавиатура.
//
// Параметры:
//	Число - Число. Значение по умолчанию;
//	Подсказка - Строка. Заголовок формы выбора;
//	Длина - Число. Длинна числа;
//	Точность - Число. Точность числа;
//	Мин - Число. Минимальное допустимое значение;
//	Макс - Число. Максимальное допустимое значение.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществления выбор значения;
//  Число - Число. Введенное значение.
//
Функция ВводЧисла(Число, Подсказка = "", Длина = 0, Точность = 0, Мин = Неопределено, Макс = Неопределено, Формат = "") Экспорт
	
	// Перенаправление.
	Возврат Touch.__ВвестиЧисло(Число, Подсказка, Длина, Точность, Мин, Макс, Формат);
	
КонецФункции

Функция ВводДаты(Дата, Подсказка = "", ЧастьДаты = Неопределено, Мин = Неопределено, Макс = Неопределено, Формат = "") Экспорт
	
	// Перенаправление.
	Возврат Touch.__ВвестиДату(Дата, Подсказка, ЧастьДаты, Мин, Макс, Формат);
	
КонецФункции // ВводДаты()

// Функция ввода строки через экранную клавиатура.
//
// Параметры:
//	Строка - Строка. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода числа;
//	Длина - Число. Длина вводимой строки;
//	Многострочность - Булево. Определяет режим ввода многострочного текста;
//	КодЯзыка - Строка. Указывает код языка, на котором будет вводится строка по умолчанию.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществления ввод значения;
//	Строка - Строка. Введенное значение.
//
Функция ВводСтроки(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, КодЯзыка = Неопределено) Экспорт
	
	// Перенаправление.
	Возврат Touch.__ВвестиСтроку(Строка, Подсказка, Длина, Многострочность, КодЯзыка);
	
КонецФункции // ВводСтроки()


Функция ПоискЧисла(Число, Подсказка = "", Длина = 0, Точность = 0, Мин = Неопределено, Макс = Неопределено, Формат = "",
				   Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	// Перенаправление.
	Возврат Touch.__НайтиЧисло(Число, Подсказка, Длина, Точность, Мин, Макс, Формат, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	
КонецФункции // ПоискЧисла()

Функция ПоискСтроки(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, КодЯзыка = Неопределено, 
				    Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	
	// Перенаправление.
	Возврат Touch.__НайтиСтроку(Строка, Подсказка, Длина, Многострочность, КодЯзыка, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	
КонецФункции // ПоискСтроки()

//Костенюк Александр-Старт 05.09.2012
Функция ПоискСтрокиЧисла(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, КодЯзыка = Неопределено, 
	Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	// Перенаправление.
	Возврат Touch.НайтиСтрокуЧисло(Строка, Подсказка, Длина, Многострочность, КодЯзыка, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	
КонецФункции // ПоискСтроки()
//Костенюк Александр-Финиш 05.09.2012

Функция НедостаточноПрав(ТекстСообщения = "") Экспорт
	ТекстЛокализованый = НСтр("ru='Недостаточно прав доступа!';uk='Недостатньо прав доступу!'");
	Если ПустаяСтрока(ТекстСообщения) Тогда
		ВывестиОшибку(ТекстЛокализованый);
	Иначе
		ВывестиОшибку(ТекстЛокализованый + ТекстСообщения + "!");
	КонецЕсли;
	
КонецФункции // НедостаточноПрав()

Функция ОперацияНеВыполнена(ТекстСообщения = "") Экспорт
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		ТекстЛокализованый = НСтр("ru='Операция не выполнена!';uk='Операцію не виконано!'");
		ВывестиОшибку(ТекстЛокализованый);
	Иначе
		ВывестиОшибку(ТекстСообщения + " " + ТекстЛокализованый);
	КонецЕсли;
	
КонецФункции // ОперацияНеВыполнена()


Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "", Статус = Неопределено) Экспорт

	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Важное;
	КонецЕсли;
	
	ТекстСообщения = ОбщегоНазначения.СформироватьТекстСообщения(ТекстСообщения);

	Отказ = Истина;
	
	ВывестиОшибку(ТекстСообщения, , Заголовок);
	
КонецПроцедуры // СообщитьОбОшибке()

Процедура СообщитьОбНезаполненомРеквизитеДокумента(Документ, Знач Реквизит, Отказ = Ложь, Заголовок = "", Статус = Неопределено) Экспорт

	Если (Не Документ.Метаданные().Реквизиты.Найти(Реквизит) = Неопределено) Тогда
		Реквизит = Документ.Метаданные().Реквизиты.Найти(Реквизит).Синоним;
	КонецЕсли;
	ТекстЛокализованый = НСтр("ru='Перед выполнением операции необходимо заполнить реквизит «';uk='Перед виконанням операції необхідно заповнити реквізит «'");
	ТекстСообщения = ТекстЛокализованый + Реквизит + "».";
	
	СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, Статус);

КонецПроцедуры // СообщитьОбНезаполненомРеквизитеДокумента()

Процедура СообщитьОбНезаполненомРеквизитеТабличнойЧастиДокумента(Документ, Знач ТабличнаяЧасть, Знач НомерСтроки, Знач Реквизит, Отказ = Ложь, Заголовок = "", Статус = Неопределено) Экспорт

	Если (Не Документ.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧасть) = Неопределено) Тогда
		Если (Не Документ.Метаданные().ТабличныеЧасти[ТабличнаяЧасть].Реквизиты.Найти(Реквизит) = Неопределено) Тогда
			Реквизит = Документ.Метаданные().ТабличныеЧасти[ТабличнаяЧасть].Реквизиты.Найти(Реквизит).Синоним;
		КонецЕсли;
		ТабличнаяЧасть = Документ.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧасть).Синоним;
	КонецЕсли;
	
	 
	ТекстСообщения = НСтр("ru='Перед выполнением операции необходимо заполнить реквизит «';uk='Перед виконанням операції необхідно заповнити реквізит «'")
	+ Реквизит + НСтр("ru='» в табличной части «';uk='» у табличній частині «'") + ТабличнаяЧасть 
	+ НСтр("ru='». Строка номер';uk='». Рядок номер'")  + НомерСтроки + ".";
	
	СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, Статус);

КонецПроцедуры // СообщитьОбНезаполненомРеквизитеТабличнойЧасти()


// Проверяет необходимость запуска системы в Front-office режиме.
//
Процедура ЗапускFrontOfficeИнтерфейса(ВключенFrontOffice = Неопределено) Экспорт
	
		// Проверка пользователя и определения режима запуска системы.
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если (ПользовательИБ = Неопределено) Или (Не НРег(ПользовательИБ.Имя) = "frontoffice") Тогда
		 
		ВключенFrontOffice = Ложь;
		Возврат
		
	КонецЕсли;
	
	// Состояние.
	Сообщить("――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――", СтатусСообщения.Обычное);
	ТекстЛокализованый = НСтр("ru='Инициализация Front-Office режима работы...';uk='Ініціалізація режиму роботи Front-Office ...'");
	Сообщить(ТекстЛокализованый, СтатусСообщения.БезСтатуса);
	
	// Запуск Front-Office интерфейса.
	ВключенFrontOffice = Истина;
	
	// -- Проверка параметров пользователя.
	Если (Не ПользовательИБ.ОсновнойИнтерфейс = Метаданные.Интерфейсы.FrontOffice) Или
		 (Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.FrontOffice)) Тогда
		 ТекстЛокализованый = НСтр("ru='Параметры пользователя ИБ отвечающего за работу в системе в Front-Office режиме некорректны!';uk='Параметри користувача ІБ, що відповідає за роботу системи у режимі Front-Office некоректні!'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстЛокализованый);
		ВключенFrontOffice = Ложь;
	КонецЕсли;
	
	// -- Проверка параметров компьютера.
	Компьютер = ПолучитьСерверТО().ПолучитьКомпьютерТО(Истина);
	
	Если НЕ ЗначениеЗаполнено(Компьютер) ИЛИ НЕ ЗначениеЗаполнено(Компьютер.РежимРаботы) ИЛИ (НЕ Компьютер.Актуальность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Устройство ';uk='Пристрій '") + СокрЛП(Компьютер) + НСтр("ru='не зарегестрировано для работы с системой в режиме Front-Office!';uk='не зареєстрований для роботи з системою в режимі Front-office!'"));
		ВключенFrontOffice = Ложь;
	КонецЕсли;
		
	// -- Инициализация Front-office интерфейса.
	Если ВключенFrontOffice Тогда
		
		Попытка
			ВключенFrontOffice = ПолучитьСерверFrontOffice().Инициализация();
		Исключение
			Информация = ИнформацияОбОшибке();
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить запуск системы в режиме Front-Office. ';uk='Неможливо виконати запуск системи у режимі Front-Office. '") + Информация.ИмяМодуля + " (" + Информация.НомерСтроки + "): " + Информация.Описание + "!");
			ВключенFrontOffice = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	// Завершение работы системы, в случае возникновения ошибки.
	Если Не ВключенFrontOffice Тогда
		FrontOffice.ВывестиВосклицание(НСтр("ru='В процессе запуска системы в режиме Front-Office возникли ошибки. Обратитесь в поддержку UniRest.';uk='У процесі запуску системи в режимі Front-Office виникли помилки. Зверніться в підтримку UniRest.'") + Символы.ПС + НСтр("ru='Работа системы будет завершена!';uk='Роботу системи буде завершено!'"), , НСтр("ru='Завершение работы системы';uk='Завершення роботи системи'"));
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
	// Состояние.
	Если ВключенFrontOffice Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	// Сообщим о попытке запуска системы в Front-Office режиме.
	ВключенFrontOffice = Истина;

КонецПроцедуры	// ЗапускFrontOfficeИнтерфейса()



Функция ПредставлениеНомера(Номер) Экспорт
	
	// Формирование сокращенного представления номера.
	ТолькоЦифры = УправлениеКонтактнойИнформацией.ПолучитьТолькоЦифры(Номер);
	Если ПустаяСтрока(ТолькоЦифры) Тогда
		Возврат ТолькоЦифры;
	КонецЕсли;
	
	Возврат Строка(Число(ТолькоЦифры));
	
КонецФункции // ПредставлениеНомера()



Функция ПараметрыСтиляСостоянияДокумента(СостояниеДокумента, Шрифт = Неопределено, Цвет = Неопределено, ЦветФона = Неопределено, Картинка = Неопределено) Экспорт
	
	// Результат.
	Возврат РаботаСДиалогами.ПараметрыСтиляСостоянияДокумента(СостояниеДокумента, Шрифт, Цвет, ЦветФона, Картинка);
	
КонецФункции // ПараметрыСтиляСостоянияДокумента()

// Александр Переверзев 11.03.2012 22:18:31 
Функция ПараметрыСтиляЭлементовМеню(Шрифт = Неопределено, Цвет = Неопределено, ЦветФона = Неопределено, Картинка = Неопределено) Экспорт
	
	// Результат.
	Возврат РаботаСДиалогами.ПараметрыСтиляЭлементовМеню(Шрифт, Цвет, ЦветФона, Картинка);
	
КонецФункции // ПараметрыСтиляЭлементовМеню()


#КонецЕсли



Функция ПредставлениеДаты(Дата) Экспорт
	
	// Формирование сокращенного представления даты.
	Разница = Дата - ТекущаяДата();
	Если (-43200 < Разница) И (Разница < 43200) Тогда	// Плюс/минус 12 часов.
		ФорматнаяСтрока = "ДФ=HH:mm";
	Иначе
		ФорматнаяСтрока = "ДФ='dd.MM.yy HH:mm'";
	КонецЕсли;
	
	Возврат Формат(Дата, ФорматнаяСтрока);
	
КонецФункции // ПредставлениеДаты()
