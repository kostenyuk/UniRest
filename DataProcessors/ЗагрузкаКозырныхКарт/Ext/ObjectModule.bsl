
Функция ЗаполнитьСписокКодировок() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("ANSI"); // Windows
	Массив.Добавить("OEM"); // DOS	
	Возврат Массив;
КонецФункции

Функция ПолучитьАдрес() Экспорт
	
	АдресСервераОбменаКК 		= СокрЛП(Константы.АдресСервераОбменаКК.Получить());
	КаталогСервераОбменаКартами = СокрЛП(Константы.КаталогСервераОбменаКартами.Получить());
	
	Если Прав(АдресСервераОбменаКК, 1) <> "/" Тогда
		АдресСервераОбменаКК = АдресСервераОбменаКК + "/"; 
	КонецЕсли;
	
	Если Прав(КаталогСервераОбменаКартами, 1) <> "/" Тогда
		КаталогСервераОбменаКартами = КаталогСервераОбменаКартами + "/"; 
	КонецЕсли;
	
	Результат = АдресСервераОбменаКК + КаталогСервераОбменаКартами;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПользователя() Экспорт
	Возврат СокрЛП(Константы.ПользовательСервераОбменаКК.Получить());
КонецФункции

Функция ПолучитьПароль() Экспорт
	Возврат СокрЛП(Константы.ПарольСервераОбменаКК.Получить());
КонецФункции

Функция ПолучитьКаталог() Экспорт
	Возврат РаботаСФайлами.НормализоватьКаталог(СокрЛП(Константы.КаталогОбмена.Получить()));
КонецФункции

Процедура ВыполнитьОбработку(Загружать = Истина, Адрес = "", Пользователь = "", Пароль = "", Каталог = "", Кодировка = "", ПолноеОбновление = Ложь, УдалятьФайлы = Ложь) Экспорт
	
	ВремяНачала = ТекущаяДата();
	ОбработаноОбъектов = 0;
	СозданоОбъектов = 0;
	ОбновленоОбъектов = 0;
	Ошибка = Ложь;
	Сообщить("Время начала: " + ВремяНачала);
	
	Адрес 			= ?(ЗначениеЗаполнено(Адрес), Адрес, ПолучитьАдрес());
	Пользователь 	= ?(ЗначениеЗаполнено(Пользователь), Пользователь, ПолучитьПользователя());
	Пароль 			= ?(ЗначениеЗаполнено(Пароль), Пароль, ПолучитьПароль());
	Каталог 		= ?(ЗначениеЗаполнено(Каталог), Каталог, ПолучитьКаталог());
	Кодировка 		= ?(ЗначениеЗаполнено(Кодировка), Кодировка, КодировкаТекста.ANSI);
	
	ЗагрузитьСFTP(Загружать, Адрес, Пользователь, Пароль, Каталог, УдалятьФайлы);
	РаспаковатьАрхивы(Каталог);
	ОбновитьКарты(Каталог, Кодировка, ОбработаноОбъектов, СозданоОбъектов, ОбновленоОбъектов, Ошибка);
	ОчиститьКаталог(Каталог, Ошибка);
	
	ВремяОкончания 	= ТекущаяДата();
	ВремяОбработки	= ВремяОкончания - ВремяНачала; //в секундах
	Длительность 	= ОбщегоНазначения.ЧЧММСС(ВремяОбработки);
	Сообщить(                                                         
	"Обработано карт		: " + ОбработаноОбъектов 	+ Символы.ПС +
	"Загружено новых карт	: " + СозданоОбъектов 		+ Символы.ПС +
	"Обновлено карт			: " + ОбновленоОбъектов 	+ Символы.ПС +
	"Длительность			: " + Длительность          + Символы.ПС +
	"Время окончания 		: " + ВремяОкончания 		+ Символы.ПС
	, СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура ЗагрузитьСFTP(Загружать, Адрес, Пользователь, Пароль, Каталог, УдалятьФайлы) Экспорт
	
	Если НЕ Загружать Тогда
		Возврат;
	КонецЕсли;
	
	Сервер 			= "";
	КаталогСервера 	= "";
	
	РазложитьСсылку(Адрес, Сервер, КаталогСервера);

	Попытка
		FTPСоединение = Новый FTPСоединение(Сервер, 21, Пользователь, Пароль, , Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Массивфайлов = FTPСоединение.НайтиФайлы(КаталогСервера, "*.zip");
	Путь = Каталог + "in\sdc_out\";
	
	Для Каждого Файл Из Массивфайлов Цикл
		Попытка
			FTPСоединение.Получить(Файл.ПолноеИмя, Путь + Файл.Имя);
			Если УдалятьФайлы Тогда
				FTPСоединение.Удалить(Файл.ПолноеИмя);
			КонецЕсли;
		Исключение
			Сообщить("При загрузке файла " + Файл.Имя + " произошла ошибка " + ОписаниеОшибки());
		КонецПопытки; 
	КонецЦикла;
	
КонецПроцедуры

Процедура РазложитьСсылку(Знач Link, Server, Directory)
	
	Если Лев(Link, 6) = "ftp://" Тогда
		Link = Сред(Link, 7);
	КонецЕсли;
	
	Позиция	= Найти(Link, "/");
	Если Позиция = 0 Тогда
		Server = Link;
	Иначе
		Server = Лев(Link, Позиция - 1);
		Directory = Сред(Link, Позиция + 1);
	КонецЕсли;
	
	Если Прав(Directory, 1) = "/" Тогда
		Directory = Сред(Directory, 1, СтрДлина(Directory) - 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспаковатьАрхивы(Каталог) Экспорт
	
	Путь = Каталог + "in\sdc_out\";
	МассивАрхивов = НайтиФайлы(Путь, "*.zip");
	
	Для Каждого ЭлементАрхива Из МассивАрхивов Цикл
		ЧтениеZipФайла = Новый ЧтениеZipФайла();
		ЧтениеZipФайла.Открыть(ЭлементАрхива.ПолноеИмя);
		ИмяФайла = ЭлементАрхива.ИмяБезРасширения;
		Если ЧтениеZipФайла.Элементы.Количество() Тогда
			ЧтениеZipФайла.Извлечь(ЧтениеZipФайла.Элементы[0], Путь);
			ЧтениеZipФайла.Закрыть();
			МассивФайлов = НайтиФайлы(Путь, "sdc_out.dbf");
			Если МассивФайлов.Количество() Тогда
				Файл = МассивФайлов[0];
				ПереместитьФайл(Файл.ПолноеИмя, Путь + ИмяФайла + ".dbf");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКарты(Каталог, Кодировка, ОбработаноОбъектов, СозданоОбъектов, ОбновленоОбъектов, Ошибка) Экспорт
	
	Путь = Каталог + "in\sdc_out\";
	НайденныеФайлы = НайтиФайлы(Путь, "*.dbf");
	
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый XBase(НайденныйФайл.ПолноеИмя, "", Истина), Новый УникальныйИдентификатор);
		Файл = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если НЕ Файл.Открыта() Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Первая() Тогда
			Возврат;
		КонецЕсли;
		
		Файл.Кодировка = Кодировка;
		
		НомерСтроки = 0;
		Файл.Первая();
		НачатьТранзакцию();
		
		Пока НЕ Файл.ВКонце() Цикл
			
			Если НЕ Файл.Следующая() Тогда
				Прервать;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			#Если Клиент  Тогда
				Состояние("Обработано " + Окр(НомерСтроки/Файл.КоличествоЗаписей()*100) + "%");
			#КонецЕсли
			
			Если НомерСтроки%500 = 0 Тогда
				ЗафиксироватьТранзакцию();
				Сообщить("Обработано "+Строка(НомерСтроки)+" строк. Транзакция зафиксирована", СтатусСообщения.Информация);
				НачатьТранзакцию();
			КонецЕсли;
			
			CODE 		= СокрЛП(Формат(Файл.CODE, "ЧЦ=10; ЧДЦ=0; ЧГ=0"));
			CODESTR 	= СокрЛП(Файл.CODESTR);
			NAME 		= СокрЛП(Файл.NAME); //Владелец карты
			TIP 		= Файл.TIP; 
			DISC 		= Файл.DISC; 
			CHECKCARD 	= Файл.CHECKCARD; 
			OLDCODE 	= СокрЛП(Файл.OLDCODE); 
			SHOWMSG 	= Файл.SHOWMSG;
			MSG 		= СокрЛП(Файл.MSG);
			
			ПометкаУдаления = ?(TIP = 2, Истина, Ложь);
			ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.НайтиВидКарты(DISC);
			
			Если ВидДисконтнойКарты.Пустая() Тогда
				Сообщить("Для дисконтной карты №" + CODE + " не найден соответствующий вид карты, карта пропущена");
				Файл.Следующий();
				Продолжить;
			КонецЕсли;
			
			НайденнаяСсылка = Справочники.ИнформационныеКарты.НайтиПоКодуКарты(CODE);
			
			Если НайденнаяСсылка.Пустая() Тогда
				
				СправочникОбъект 					= Справочники.ИнформационныеКарты.СоздатьЭлемент();
				СправочникОбъект.УстановитьНовыйКод();
				СправочникОбъект.Наименование 		= "№"+ CODE;
				СправочникОбъект.ВидДисконтнойКарты = ВидДисконтнойКарты;
				СправочникОбъект.ВидКарты 			= Перечисления.ВидыИнформационныхКарт.Магнитная;
				СправочникОбъект.КодКарты 			= CODE;
				СправочникОбъект.ВладелецКарты 		= NAME;
				СправочникОбъект.ТипКарты 			= Перечисления.ТипыИнформационныхКарт.Дисконтная;
				СправочникОбъект.ПометкаУдаления 	= ПометкаУдаления;
				СправочникОбъект.ДатаРегистрации 	= ТекущаяДата();
				
				СправочникОбъект.ОбменДанными.Загрузка = Истина;
				
				Попытка
					СправочникОбъект.Записать();
					СозданоОбъектов = СозданоОбъектов + 1;
					Сообщить("Загружена карта №" + CODE);
				Исключение
					Ошибка = Истина;
					Сообщить(ОписаниеОшибки()+ " в строке " + НомерСтроки);
					Файл.Следующий();
					Продолжить;
				КонецПопытки;
				
			Иначе
				
				Если ПолноеОбновление ИЛИ (СокрЛП(Строка(НайденнаяСсылка.ВладелецКарты)) <> NAME) ИЛИ (НайденнаяСсылка.ПометкаУдаления <> ПометкаУдаления) Тогда
					
					СправочникОбъект 					= НайденнаяСсылка.ПолучитьОбъект();
					СправочникОбъект.Наименование 		= "№"+ CODE;
					СправочникОбъект.ВидДисконтнойКарты = ВидДисконтнойКарты;
					СправочникОбъект.КодКарты 			= CODE;
					СправочникОбъект.ВладелецКарты 		= NAME;
					СправочникОбъект.ПометкаУдаления 	= ПометкаУдаления;
					
					СправочникОбъект.ОбменДанными.Загрузка = Истина;
					
					Попытка
						СправочникОбъект.Записать();
						ОбновленоОбъектов = ОбновленоОбъектов + 1;
						Сообщить("Обновлена карта №" + CODE);
					Исключение
						Ошибка = Истина;
						Сообщить(ОписаниеОшибки()+ " в строке " + НомерСтроки);
						Файл.Следующий();
						Продолжить;
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если Файл.Открыта() Тогда
			Файл.ЗакрытьФайл();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьКаталог(Каталог, Ошибка, УдалятьФайлы = Истина) Экспорт
	
	Путь = Каталог + "in\sdc_out\";
	
	Если УдалятьФайлы И (НЕ Ошибка) Тогда
		Попытка
			УдалитьФайлы(Путь, "*.zip");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Попытка
			УдалитьФайлы(Путь, "*.dbf");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
