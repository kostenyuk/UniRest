
&НаКлиенте
Процедура АутентификацияСтандартнаяПриИзменении(Элемент)

	АутентификацияСтандартная = (ТипРегистрации = "Стандартная");
	
	Если (ТипРегистрации = "Карта") Тогда
		Элементы.ГруппаРегистрация.ТекущаяСтраница = Элементы.ГруппаРегистрацияКодКарты;
	Иначе
		Элементы.ГруппаРегистрация.ТекущаяСтраница = Элементы.ГруппаРегистрацияПароль;
	КонецЕсли; 
	
КонецПроцедуры // АутентификацияСтандартнаяПриИзменении();

&НаКлиенте
Процедура ГруппаПользователейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ГруппаПользователейОчистка()

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПодтверждениеПароляПриИзменении(Элемент);
	
	ПарольПриИзмененииНаСервере();
	
КонецПроцедуры // ПарольПриИзменении()

&НаСервере
Процедура ПарольПриИзмененииНаСервере()
	
	ПарольНеУникальный = Ложь;
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		
		// В пределах набора записей.
		Для Каждого СтрокаГруппыПользователей Из Параметры.ГруппыПользователей Цикл
			Если (Пароль = СтрокаГруппыПользователей.Пароль) И (Не ГруппаПользователей = СтрокаГруппыПользователей.ГруппаПользователей) Тогда
				ПарольНеУникальный = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
		// В регистре.
		Если Не ПарольНеУникальный Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ГруппыПользователей.Пользователь
			                      |ИЗ
			                      |	РегистрСведений.ГруппыПользователей КАК ГруппыПользователей
			                      |ГДЕ
			                      |	НЕ ГруппыПользователей.Пользователь = &Пользователь
			                      |	И ГруппыПользователей.Пароль = &Пароль");
			Запрос.УстановитьПараметр("Пользователь", Параметры.Пользователь);
			Запрос.УстановитьПараметр("Пароль", Пароль);
			
			ПарольНеУникальный = Не Запрос.Выполнить().Пустой();
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ПарольНеУникальный Тогда
		Элементы.ДекорацияПарольНеУникальный.Заголовок = НСтр("ru = '(не уникальный)'; uk = '(не унікальний)'");
	Иначе
		Элементы.ДекорацияПарольНеУникальный.Заголовок = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ПарольПриИзмененииНаСервере()

&НаКлиенте
Процедура ПодтверждениеПароляПриИзменении(Элемент)
	
	ПаролиНеСовпадают = (Не Пароль = ПодтверждениеПароля);
	
	Если ПаролиНеСовпадают Тогда
		Элементы.ДекорацияНадписьНеСовпадают.Заголовок = НСтр("ru = '(не совпадают)'; uk = '(не співпадають)'");
	Иначе
		Элементы.ДекорацияНадписьНеСовпадают.Заголовок = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ПодтверждениеПароляПриИзменении()

&НаСервере
Процедура ПодтверждениеПароляПриИзмененииНаСервере()
	
	ПаролиНеСовпадают = (Не Пароль = ПодтверждениеПароля);
	
	Если ПаролиНеСовпадают Тогда
		Элементы.ДекорацияНадписьНеСовпадают.Заголовок = НСтр("ru = '(не совпадают)'; uk = '(не співпадають)'");
	Иначе
		Элементы.ДекорацияНадписьНеСовпадают.Заголовок = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ПодтверждениеПароляПриИзмененииНаСервере()

&НаКлиенте
Процедура КодКартыПриИзменении(Элемент)
	
	КодКартыПриИзмененииНаСервере();
	
КонецПроцедуры // КодКартыПриИзменении()

&НаСервере
Процедура КодКартыПриИзмененииНаСервере()
	
	КартаДисконтная = Ложь;
	
	Если Не ПустаяСтрока(КодКарты) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	ИнформационныеКарты.ВидКарты,
		                      |	ИнформационныеКарты.ТипКарты
		                      |ИЗ
		                      |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		                      |ГДЕ
		                      |	ИнформационныеКарты.КодКарты = &КодКарты
		                      |	И ИнформационныеКарты.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Дисконтная)");
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КартаДисконтная = (Выборка.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная);
			КартаДисконтная = Выборка.ВидКарты;
		Иначе
			КартаДисконтная = Ложь;
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	Если КартаДисконтная Тогда
		Элементы.ДекорацияКодКартыДисконтная.Заголовок = НСтр("ru = '(дисконтная карта)'; uk = '(дисконтна карта)'");
	Иначе
		Элементы.ДекорацияКодКартыДисконтная.Заголовок = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // КодКартыПриИзмененииНаСервере()

&НаКлиенте
Процедура КодКартыАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		КодКартыАвтоПодборНаСервере(Текст, ДанныеВыбора);
		СтандартнаяОбработка = (ДанныеВыбора = Неопределено);
	КонецЕсли; 
	
КонецПроцедуры // КодКартыАвтоПодбор()

&НаСервереБезКонтекста
Процедура КодКартыАвтоПодборНаСервере(Текст, ДанныеВыбора)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 51
	                      |	ИнформационныеКарты.КодКарты КАК КодКарты,
	                      |	ИнформационныеКарты.ВладелецКарты,
	                      |	ИнформационныеКарты.ВладелецКарты.Наименование КАК Владелец
	                      |ИЗ
	                      |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	                      |ГДЕ
	                      |	ИнформационныеКарты.КодКарты ПОДОБНО &КодКарты
	                      |	И ИнформационныеКарты.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Регистрационная)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	КодКарты");
	//.. Начало изменения Dim)on  10 октября 2013 г. 16:39:13
	//
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИнформационныеКарты.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Регистрационная)", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИнформационныеКарты", "РегистрационныеКарты");
	//
	//.. Конец изменения Dim)on  10 октября 2013 г. 16:39:13
	Запрос.УстановитьПараметр("КодКарты", Текст + "%");
	
	РегистрационныеКарты = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РегистрационныеКарты.Количество() И (РегистрационныеКарты.Количество() <= 50) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		
		Для Каждого РегистрационнаяКарта Из РегистрационныеКарты  Цикл
			Если ЗначениеЗаполнено(РегистрационнаяКарта.ВладелецКарты) Тогда
				ДанныеВыбора.Добавить(РегистрационнаяКарта.КодКарты, РегистрационнаяКарта.КодКарты + " (" + РегистрационнаяКарта.Владелец + ")"); 
			Иначе
				ДанныеВыбора.Добавить(РегистрационнаяКарта.КодКарты, РегистрационнаяКарта.КодКарты); 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // КодКартыАвтоПодборНаСервере()

&НаКлиенте
Процедура ВидКартыПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ВидКарты) Тогда
		ВидКарты = ПредопределенноеЗначение("Перечисление.ВидыИнформационныхКарт.Магнитная");
	КонецЕсли; 
	
КонецПроцедуры // ВидКартыПриИзменении()


&НаКлиенте
Процедура OK(Команда)
	
	ОчиститьСообщения();

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	// Данные.
	ЗаполнитьЗначенияСвойств(Параметры.СтрокаГруппыПользователей, ЭтаФорма);
	
	Если (ТипРегистрации = "Стандартная") Тогда
		Параметры.СтрокаГруппыПользователей.Вставить("ИндексКартинки", 0);
		Параметры.СтрокаГруппыПользователей.КодКарты = Неопределено;
	КонецЕсли; 
	Если (ТипРегистрации = "Дополнительная") Тогда
		Параметры.СтрокаГруппыПользователей.Вставить("ИндексКартинки", 1);
		Параметры.СтрокаГруппыПользователей.КодКарты = Неопределено;
	КонецЕсли; 
	Если (ТипРегистрации = "Карта") Тогда
		Параметры.СтрокаГруппыПользователей.Вставить("ИндексКартинки", 2);
		Параметры.СтрокаГруппыПользователей.Пароль = Неопределено;
	КонецЕсли; 
	
	Закрыть(Параметры.СтрокаГруппыПользователей);
	
КонецПроцедуры // OK()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Данные.
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.СтрокаГруппыПользователей);
	ГруппаПользователей = __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(ГруппаПользователей, Справочники.ГруппыПользователей.ОсновнаяГруппаПользователей());
	ПодтверждениеПароля = Пароль;
	
	// Настройка формы.
	Элементы.ГруппаАутентификацияСтандартная.Видимость = Параметры.СтрокаГруппыПользователей.АутентификацияСтандартная Или 
													     (Не Параметры.ГруппыПользователей.НайтиСтроки(Новый Структура("АутентификацияСтандартная", Истина)).Количество());
	Элементы.ГруппаАутентификацияДополнительная.Видимость = Не Элементы.ГруппаАутентификацияСтандартная.Видимость;
	
	Если (ТипРегистрации = "Карта") Тогда
		Элементы.ГруппаРегистрация.ТекущаяСтраница = Элементы.ГруппаРегистрацияКодКарты;
	Иначе
		Элементы.ГруппаРегистрация.ТекущаяСтраница = Элементы.ГруппаРегистрацияПароль;
	КонецЕсли; 
	
	ПарольПриИзмененииНаСервере();													 
	ПодтверждениеПароляПриИзмененииНаСервере();													 
	КодКартыПриИзмененииНаСервере();													 
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	АутентификацияСтандартная = (ТипРегистрации = "Стандартная");
	
	Если (ТипРегистрации = "Карта") Тогда
		__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, , "Пароль,ПодтверждениеПароля");
		
		Если КартаДисконтная Тогда
			__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Код принадлежит дисконтной карте'; uk = 'Код належить дисконтній картці'"), ,, "КодКарты", Отказ);
		КонецЕсли; 
	Иначе
		__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, , "КодКарты,ВидКарты");
		
		Если АутентификацияСтандартная Тогда
			__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, , "Пароль,ПодтверждениеПароля");
		Иначе
			Если ПарольНеУникальный Тогда
				__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Пароль не уникальный'; uk = 'Пароль не унікальний'"), ,, "Пароль", Отказ);
			КонецЕсли; 
		КонецЕсли; 
		
		Если ПаролиНеСовпадают Тогда
			__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Пароль и подтверждение пароля не совпадают'; uk = 'Пароль і підтвердження пароля не співпадають'"), ,, "ПодтверждениеПароля", Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ПриСозданииНаСервере()
