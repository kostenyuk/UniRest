 
Перем мФормаПрогрессора;

Функция СформироватьЗапрос(ИмяИсточникаДанных = "РеализацияТоваровУслуг")
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ИсточникДанных.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК ИсточникДанных
	               |ГДЕ
	               |	ИсточникДанных.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг КАК ИсточникДанных", "Документ."+ИмяИсточникаДанных+" КАК ИсточникДанных");
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", ?(ЗначениеЗаполнено(ДатаКон), КонецДня(ДатаКон), КонецДня(ТекущаяДата())));
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ВыполнитьОбработку() Экспорт
	
	Если УдалитьРеализации Тогда
		ВыполнитьУдалениеДокументов("СписаниеТоваров");
		ВыполнитьУдалениеДокументов("РеализацияТоваровУслуг");
	КонецЕсли;
	Если УдалитьОтчетыПроизводства Тогда
		ВыполнитьУдалениеДокументов("ОтчетПроизводстваЗаСмену");
	КонецЕсли;
	Если УдалитьТабели Тогда
		ВыполнитьУдалениеДокументов("ТабельУчетаРабочегоВремениОрганизации");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьУдалениеДокументов(ИмяИсточникаДанных = "РеализацияТоваровУслуг")
	
	Перем ПредыдущаяСсылка;
	
	//мФормаПрогрессора = ПолучитьФорму("ОбщаяФорма.ХодВыполненияОбработкиДанных");
	
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Текст = "С информационной базой работают другие пользователи.
		|В данный момент невозможно установить монопольный режим!"; 
		Сообщить(Текст, СтатусСообщения.Важное);
	КонецПопытки;
	
	Если НЕ МонопольныйРежим() Тогда
		Сообщить("Для выполнения обработки необходим монопольный режим!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяДата();
	ОбработаноСсылок = 0;
	ОбработаноОбъектов = 0;
	УдаленоОбъектов = 0;
	
	Сообщить("////////////////////" + ИмяИсточникаДанных + "////////////////////");
	Сообщить("Время начала: " + ВремяНачала);
	
	РезультатЗапроса = СформироватьЗапрос(ИмяИсточникаДанных);
	Выборка = РезультатЗапроса.Выбрать();
	Таблица = РезультатЗапроса.Выгрузить();
	
	МассивСсылок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивСсылок.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	//МассивСсылок.Очистить();
	//Ссылка = Документы.РеализацияТоваровУслуг.НайтиПоНомеру("00000031285");
	//МассивСсылок.Добавить(Ссылка);
	
	// НайденныеСсылки
	НайденныеСсылки = НайтиПоСсылкам(МассивСсылок);
	НайденныеСсылки.Колонки[0].Имя = "Ссылка";
	НайденныеСсылки.Колонки[1].Имя = "Данные";
	НайденныеСсылки.Колонки[2].Имя = "Метаданные";
	
	ТаблицаСсылок = НайденныеСсылки;
	
	//мФормаПрогрессора.НаименованиеОбработкиДанных = "Очистка данных за период с " + Строка(Формат(ДатаНач, "ДФ=dd.MM.yyyy")) + " по " + Строка(Формат(ДатаКон, "ДФ=dd.MM.yyyy"));
	//мФормаПрогрессора.КомментарийОбработкиДанных = "Удаление документов " + ИмяИсточникаДанных;
	//мФормаПрогрессора.Значение = 0;
	//мФормаПрогрессора.МаксимальноеЗначение = ТаблицаСсылок.Количество();
	//мФормаПрогрессора.Открыть();
	
	// АнализДействий
	// С пустым полем "Заказ"
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить("РеализацияТоваровУслуг");
	ТипыДокументов.Добавить("ОтчетПроизводстваЗаСмену");
	ТипыДокументов.Добавить("СписаниеТоваров");
	НаборЗаписей = РегистрыСведений.АнализДействий.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НачатьТранзакцию();
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		НаборЗаписей.Отбор["Заказ"].Установить(Документы[ТипДокумента].ПустаяСсылка());
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			Попытка
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			Исключение
				СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	НаборЗаписей = Неопределено;
	
	// СомнительныеСитуации
	// Общие(без привязки к заказу)
	МассивИдентификаторов = Новый Массив;
	Если ИмяИсточникаДанных = "РеализацияТоваровУслуг" Тогда
		Выборка = РегистрыСведений.СомнительныеСитуации.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если (НачалоДня(Выборка.Дата) < НачалоДня(ДатаНач)) ИЛИ ((ЗначениеЗаполнено(ДатаКон)) И (КонецДня(Выборка.Дата) > КонецДня(ДатаКон))) Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
				Если НЕ Найти(Выборка.Заказ, "<Объект не найден>") Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			МассивИдентификаторов.Добавить(Выборка.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.СомнительныеСитуации.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Прочитать();
	НачатьТранзакцию();
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		НаборЗаписей.Отбор["Идентификатор"].Установить(Идентификатор);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			Попытка
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			Исключение
				СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	НаборЗаписей = Неопределено;
	
	// СомнительныеСитуации
	// по заказам
	Отбор = Новый Структура;
	СписокСсылокНаУдаление = Новый Массив;
	
	НаборЗаписей = РегистрыСведений.СомнительныеСитуации.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Прочитать();
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
		ОбработаноСсылок = ОбработаноСсылок + 1;
		
		Ссылка = СтрокаТаблицы.Ссылка;
		Данные = СтрокаТаблицы.Данные;
		
		//// Прогрессор
		//мФормаПрогрессора.КомментарийЗначения = Строка(Ссылка); 
		//мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		
		Если Ссылка <> ПредыдущаяСсылка Тогда
			Если ИмяИсточникаДанных = "РеализацияТоваровУслуг" Тогда
				Отбор.Очистить();
				Отбор.Вставить("Заказ", Ссылка);
				НайденныеСтроки = ТаблицаНабора.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() Тогда
					НачатьТранзакцию();
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НаборЗаписей.Отбор["Идентификатор"].Установить(НайденнаяСтрока.Идентификатор);
						НаборЗаписей.Прочитать();
						Если НаборЗаписей.Количество() Тогда
							Попытка
								НаборЗаписей.Очистить();
								НаборЗаписей.Записать();
							Исключение
								СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			КонецЕсли;
			ПредыдущаяСсылка = Ссылка;
		КонецЕсли;
		
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			Если СписокСсылокНаУдаление.Найти(Данные) = Неопределено Тогда
				СписокСсылокНаУдаление.Добавить(Данные);
				УдаленоОбъектов = УдаленоОбъектов + 1;
			КонецЕсли;
		Иначе
			Если СписокСсылокНаУдаление.Найти(Ссылка) = Неопределено Тогда
				СписокСсылокНаУдаление.Добавить(Ссылка);
				УдаленоОбъектов = УдаленоОбъектов + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		УдалитьОбъекты(СписокСсылокНаУдаление);
	Исключение
		СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
	//Если мФормаПрогрессора.Открыта() Тогда
	//	мФормаПрогрессора.Закрыть();
	//КонецЕсли;
	
	ВремяОкончания 	= ТекущаяДата();
	ВремяОбработки	= ВремяОкончания - ВремяНачала; //в секундах
	Длительность 	= ОбщегоНазначения.ЧЧММСС(ВремяОбработки);
	Сообщить(                                                         
	"Обработано ссылок		: " + ОбработаноСсылок 		+ Символы.ПС +
	//"Обработано объектов	: " + ОбработаноОбъектов 	+ Символы.ПС +
	"Удалено объектов		: " + УдаленоОбъектов 		+ Символы.ПС +
	"Длительность			: " + Длительность          + Символы.ПС +
	"Время окончания 		: " + ВремяОкончания 		+ Символы.ПС
	, СтатусСообщения.Информация);
	
	Попытка
		УстановитьМонопольныйРежим(Ложь);
	Исключение
		Сообщить("Не удалсь снять использование монопольного режима работы с информационной базой", СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры	

Процедура СообщитьОбОшибкеПриЗаписи(Информация)
	
	Причина = ?(Информация.Причина = Неопределено, Информация, Информация.Причина);
	Сообщить(Причина.Описание, СтатусСообщения.Важное);
	
КонецПроцедуры
