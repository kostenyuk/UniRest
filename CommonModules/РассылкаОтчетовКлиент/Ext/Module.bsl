////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылка отчетов" (клиент)
// 
// Выполняется на клиенте.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует список получателей рассылки, предлагает пользователю выбрать
//   конкретного получателя или всех получателей рассылки и возвращает
//   результат выбора пользователя.
//
Функция ВыбратьПолучателя(Объект, МножественныйВыбор = Истина, ВозвращатьСоответствие = Истина, ЗаголовокДляОшибок = "") Экспорт
	
	Если Объект.Личная = Истина Тогда
		НаборПараметров = "Ссылка, ВидПочтовогоАдресаПолучателей, Личная, Автор";
	Иначе	
		НаборПараметров = "Ссылка, ВидПочтовогоАдресаПолучателей, Личная, ТипПолучателейРассылки, Получатели";
	КонецЕсли;
	
	ПараметрыПолучателей = Новый Структура(НаборПараметров);
	ЗаполнитьЗначенияСвойств(ПараметрыПолучателей, Объект);
	РезультатРаботыСервера = РассылкаОтчетовВызовСервера.СформироватьСписокПолучателейРассылки(ПараметрыПолучателей);
	
	Получатели = РезультатРаботыСервера.Получатели;
	ТекстОшибок = РезультатРаботыСервера.ТекстОшибок;
	Заголовок = НСтр("ru = 'Выбор получателя'");
	
	Если Получатели.Количество() = 0 Тогда
		Результат = Новый Структура("Оповестить, Заголовок, Текст, ТекстОшибок");
		Результат.Оповестить = Ложь;
		Результат.ТекстОшибок = ТекстОшибок;
		Результат.Заголовок = Заголовок;
		Результат.Текст = НСтр("ru = 'Не удалось сформировать список получателей'");
		ПоказатьРезультат(Результат);
		Возврат Неопределено;
	КонецЕсли;
	
	ВозможныеПолучатели = Новый СписокЗначений;
	Если МножественныйВыбор Тогда
		ВозможныеПолучатели.Добавить(Неопределено, НСтр("ru = 'Всем получателям'"));
	КонецЕсли;
	Для Каждого КлючИЗначение Из Получатели Цикл
		ВозможныеПолучатели.Добавить(КлючИЗначение.Ключ, Строка(КлючИЗначение.Ключ) +" <"+ КлючИЗначение.Значение +">");
	КонецЦикла;
	
	Если Объект.Личная И ВозможныеПолучатели.Количество() = 1 Тогда
		ВыбранноеЗначение = ВозможныеПолучатели[0];
	Иначе
		ВыбранноеЗначение = ВозможныеПолучатели.ВыбратьЭлемент(Заголовок);
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозвращатьСоответствие Тогда
		Если ВыбранноеЗначение.Значение = Неопределено Тогда
			Результат = Получатели;
		Иначе
			Результат = Новый Соответствие;
			Результат.Вставить(ВыбранноеЗначение.Значение, Получатели[ВыбранноеЗначение.Значение]);
		КонецЕсли;
	Иначе
		Результат = Новый Структура("Получатель, ПочтовыйАдрес", ВыбранноеЗначение.Значение, Получатели[ВыбранноеЗначение.Значение]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Выводит пользователю результат выполнения какой-либо операции, при необходимости
//   оповещает об изменении типа или ссылки.
//
Процедура ПоказатьРезультат(Результат) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить  = ?(Результат.Свойство("Оповестить"),  Результат.Оповестить,  Истина);
	Заголовок   = ?(Результат.Свойство("Заголовок"),   Результат.Заголовок,   "");
	Текст       = ?(Результат.Свойство("Текст"),       Результат.Текст,       "");
	Картинка    = ?(Результат.Свойство("Картинка"),    Результат.Картинка,    БиблиотекаКартинок.ВыполнитьЗадачу);
	ТекстОшибок = ?(Результат.Свойство("ТекстОшибок"), Результат.ТекстОшибок, "");
	
	Если Оповестить = Истина Тогда
		ПоказатьОповещениеПользователя(Заголовок, , Текст, Картинка);
	Иначе
		Если ЗначениеЗаполнено(ТекстОшибок) Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru = 'Показать ошибки'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			Ответ = Вопрос(Текст, Кнопки, , 1, Заголовок);
			
			Если Ответ = 1 Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.УстановитьТекст(ТекстОшибок);
				Если ЗначениеЗаполнено(Заголовок) Тогда
					ТекстовыйДокумент.Показать(Заголовок);
				Иначе
					ТекстовыйДокумент.Показать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Предупреждение(Текст);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ТипДляОбновления") Тогда
		ОповеститьОбИзменении(Результат.ТипДляОбновления);
	КонецЕсли;
	
КонецПроцедуры

// Контролирует состояние фонового задания и выводит пользователю его результат
//
Процедура ПроверитьВыполнениеФоновогоЗадания(ЭтаФорма) Экспорт
	
	ИдентификаторЗадания    = ЭтаФорма.ПараметрыФоновогоЗадания[0].Значение;
	АдресХранилища          = ЭтаФорма.ПараметрыФоновогоЗадания[1].Значение;
	ПараметрыОбработчика    = ЭтаФорма.ПараметрыФоновогоЗадания[2].Значение;
	ФормаДлительнойОперации = ЭтаФорма.ПараметрыФоновогоЗадания[3].Значение;
	
	Результат = РассылкаОтчетовВызовСервера.ПроверитьВыполнениеФоновогоЗадания(ИдентификаторЗадания, АдресХранилища);
	Если Результат.Статус = "ВыполненоУспешно" Тогда
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ПоказатьРезультат(Результат.Детали);
		ЭтаФорма.ПараметрыФоновогоЗадания.Очистить();
	ИначеЕсли Результат.Статус = "Исключение" Тогда
		Предупреждение(
			НСтр("ru = 'Рассылки не выполнены из-за ошибки,
			|Подробности см. в журнале регистрации.'")
		);
	ИначеЕсли Результат.Статус = "Выполняется" Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчика.ТекущийИнтервал, Истина);
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ЭтаФорма.ПараметрыФоновогоЗадания[2].Значение);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды формы отчета.
//
// Параметры:
//   ЭтаФорма  (УправляемаяФорма) Форма отчета.
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//   Результат (Булево)           Истина, если вызов команды обработан.
//
Процедура ФормаОтчетаОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	
	Если Результат = Истина Тогда
		
		// Действие не требуется
		
	ИначеЕсли Команда.Имя = "РассылкаОтчетовСоздатьНовую" Тогда
		
		ФормаОтчетаОткрытьРассылку(ЭтаФорма);
		
		Результат = Истина;
		
	ИначеЕсли Команда.Имя = "РассылкаОтчетовПрисоединитьКСуществующей" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		
		ОткрытьФорму("Справочник.РассылкиОтчетов.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
		
		Результат = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выбора формы отчета.
//
// Параметры:
//   ЭтаФорма          (УправляемаяФорма) Форма отчета.
//   ВыбранноеЗначение (*)                Результат выбора в подчиненной форме.
//   ИсточникВыбора    (УправляемаяФорма) Форма, где осуществлен выбор. 
//   Результат         (Булево)           Истина, если результат выбора обработан.
//
Процедура ФормаОтчетаОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
	Если Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РассылкиОтчетов") Тогда
		
		ФормаОтчетаОткрытьРассылку(ЭтаФорма, ВыбранноеЗначение);
		
		Результат = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает рассылку отчетов из формы отчета.
//
Процедура ФормаОтчетаОткрытьРассылку(ЭтаФорма, Ссылка = Неопределено)
	
	СтрокаОтчетыПараметры = Новый Структура;
	СтрокаОтчетыПараметры.Вставить("ОтчетПолноеИмя", ЭтаФорма.КлючОбъекта);
	СтрокаОтчетыПараметры.Вставить("КлючВарианта",   ЭтаФорма.ЭтаФормаПараметры.КлючВарианта);
	СтрокаОтчетыПараметры.Вставить("ВариантСсылка",  ЭтаФорма.ЭтаФормаПараметры.ВариантСсылка);
	СтрокаОтчетыПараметры.Вставить("Настройки",      ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	ПрисоединяемыеОтчеты = Новый Массив;
	ПрисоединяемыеОтчеты.Добавить(СтрокаОтчетыПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрисоединяемыеОтчеты", ПрисоединяемыеОтчеты);
	Если Ссылка <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.РассылкиОтчетов.ФормаОбъекта", ПараметрыФормы, , Строка(ЭтаФорма.УникальныйИдентификатор) + ".ОткрытьРассылкуОтчетов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Свойства"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает тип платформы клиента.
Функция ТипПлатформыКлиента() Экспорт
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы;
КонецФункции

// Выполняет проверку учетной записи.
//
// Параметры
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись,
//					которую нужно проверить.
//
Процедура ПроверитьУчетнуюЗапись(знач УчетнаяЗапись) Экспорт
	
	ОчиститьСообщения();
	
	Состояние(НСтр("ru = 'Проверка учетной записи'"),,НСтр("ru = 'Выполняется проверка учетной записи. Подождите...'"));
	
	Если ЭлектроннаяПочтаВызовСервера.ПарольЗадан(УчетнаяЗапись) Тогда
		ПарольПараметр = Неопределено;
	Иначе
		ПараметрУчетнаяЗапись = Новый Структура("УчетнаяЗапись", УчетнаяЗапись);
		ПарольПараметр = ОткрытьФормуМодально("ОбщаяФорма.ПодтверждениеПароляУчетнойЗаписи", ПараметрУчетнаяЗапись);
		Если ТипЗнч(ПарольПараметр) <> Тип("Строка") Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	ДополнительноеСообщение = "";
	ЭлектроннаяПочтаВызовСервера.ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, ПарольПараметр, СообщениеОбОшибке, ДополнительноеСообщение);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Проверка параметров учетной записи завершилась с ошибками:
								   |%1'"), СообщениеОбОшибке ),,
						НСтр("ru = 'Проверка учетной записи'"));
	Иначе
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Проверка параметров учетной записи завершилась успешно. %1'"),
						ДополнительноеСообщение ),,
						НСтр("ru = 'Проверка учетной записи'"));
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУчетнуюЗапись()

// Функция предназначена для открытия файла соответствующим приложением
//
// Параметры
//  ИмяОткрываемогоФайла - Строка - полное имя файла
Процедура ВыполнитьЗапускПриложения(ИмяОткрываемогоФайла) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		// Открыть Файл
		Попытка
			
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
			КонецЕсли;
			
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'"),
				Инфо.Описание));
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗапускПриложения()

// Блокирует файл для редактирования и открывает его
Процедура Редактировать(ОбъектСсылка, УникальныйИдентификатор = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт
	
	Если ОбъектСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	//Если РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(ОбъектСсылка, УникальныйИдентификатор, РабочийКаталогВладельца) Тогда
	Если РедактироватьФайлПоСсылке(ОбъектСсылка, УникальныйИдентификатор, РабочийКаталогВладельца) Тогда
		ОповеститьОбИзменении(ОбъектСсылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ОбъектСсылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ФайлРедактировался"), ОбъектСсылка);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура предназначена для открытия Файла в режиме редактирования - принимает ссылку на Файл
// по ссылке (без ПолучитьДанныеФайла - для минимизации числа вызовов сервера)
// Параметры
//  ОбъектСсылка - СправочникСсылка.Файлы - файл
//  УникальныйИдентификатор - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция РедактироватьФайлПоСсылке(ОбъектСсылка, УникальныйИдентификатор = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт
	
	Перем ДанныеФайла;
	
	//ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	//СтрокаОшибки = "";
	//Если НЕ РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ОбъектСсылка, ДанныеФайла, 
	//	СтрокаОшибки, УникальныйИдентификатор, РабочийКаталогВладельца) Тогда
	//	
	//	СтандартнаяОбработка = Истина;
	//	РаботаСФайламиКлиентПереопределяемый.ПриОшибкеЗахватаФайла(ДанныеФайла, СтандартнаяОбработка);
	//	
	//	Если СтандартнаяОбработка Тогда
	//		// Если занять нельзя, то сообщаем об ошибке
	//		Предупреждение(СтрокаОшибки);
	//	КонецЕсли;
	//	
	//	Возврат Ложь;
	//	
	//КонецЕсли;
	
	Если РасширениеПодключено Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		//ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'"),
		ДанныеФайла.НавигационнаяСсылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1"" занят для редактирования.'"), Строка(ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
	
	// Если Файл без файла, то открываем карточку
	Если ДанныеФайла.Версия.Пустая() Тогда 
		ОткрытьЗначение(ДанныеФайла.Ссылка);
		Возврат Истина;
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		//Результат = ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор);
		//Если Результат Тогда
		//	ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		//КонецЕсли;
	Иначе
		//ФайловыеФункцииСлужебныйКлиент.ПоказатьНапоминаниеПриРедактировании();
		//ИмяФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ИмяФайла = РассылкаОтчетовКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолучитьФайл(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);		
		
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
			УдалитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // РедактироватьФайлПоСсылке()

// Возвращает каталог "Мои Документы" + имя текущего пользователя или
// ранее использованную папку для выгрузки.
//
Функция КаталогВыгрузки() Экспорт
	
	Путь = "";
	
#Если Не ВебКлиент Тогда
	
	//ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
	Путь = __ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузить("ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки");
	
	Если Путь = Неопределено Тогда
		//Если НЕ ПараметрыКлиента.ЭтоБазоваяВерсияКонфигурации Тогда
			
			Оболочка = Новый COMОбъект("MSScriptControl.ScriptControl");
			Оболочка.Language = "vbscript";
			Оболочка.AddCode("
				|Function SpecialFoldersName(Name)
				|set Shell=CreateObject(""WScript.Shell"")
				|SpecialFoldersName=Shell.SpecialFolders(Name)
				|End Function");
			
			//Путь = НормализоватьКаталог(Оболочка.Run("SpecialFoldersName", "MyDocuments"));
			
			__ОбщегоНазначенияСервер.ХранилищеОбщихНастроекСохранить(
				"ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки", Путь);
		//КонецЕсли;
	КонецЕсли;
	
#КонецЕсли
	
	Возврат Путь;
	
КонецФункции
