
#Если Клиент Тогда
	
Перем мРежимПоиска, мДанныеПоиска; // Переменные обслуживающие механизм поиска данных.
	
Перем мТипДокументаРеализацияТоваровУслуг; // Типы данных.

// Александр Переверзев 03.03.2012 22:28:56 
Перем мПериодНеактивностиЗаказа;

// Александр Переверзев 11.03.2012 21:51:29 
Перем мРазмерЭлементовСтолов;



// Процедура инициализация модуля рабочего места.
//
Процедура Инициализация() Экспорт
	
	// Проверка режима.
	Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Создание формы.
	Если (Форма = Неопределено) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
		
КонецПроцедуры // Инициализация()

// Процедура открытия формы рабочего места.
//
Процедура Открыть() Экспорт
	
	// Открытие формы.
	ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		
КонецПроцедуры // Открыть()


// Процедура заполнения табличного поля открытых документов.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаОткрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаОткрытых", СписокИсключаемых = Неопределено, Реализация = Истина, Списание = Истина) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		
		мРазмерЭлементовСтолов = УправлениеПользователями.ПолучитьНастрокуРазмера(УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.РазмерЭлементовСтолов));	
		
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
		Данные.Колонки.Добавить("СотрудникПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru=' Сотрудник';uk='Працівник'"));
		Данные.Колонки.Добавить("Документы", Новый ОписаниеТипов("Массив"), НСтр("ru='Документы';uk='Документи'") );
		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("СотрудникПредставление,Документы");
		ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.25;
		ТабличноеПоле.Колонки.Получить("Документы").Ширина = 400 * 0.75;
		ТабличноеПоле.Колонки.Получить("Документы").ШиринаЭлементаВложенныхДанных = Макс(мРазмерЭлементовСтолов.Ширина, 80);
		ТабличноеПоле.Колонки.Получить("Документы").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Лево;
		ТабличноеПоле.Колонки.Получить("Документы").ОтображатьВложенныеДанные = Истина;
		ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(мРазмерЭлементовСтолов.Высота, 40);
		
		Возврат;
	Иначе
		Если (Не ТабличноеПоле.ТекущийЭлементВложенныхДанных() = Неопределено) Тогда
			ТекущийДокумент = ТабличноеПоле.ТекущиеДанные().Документы[ТабличноеПоле.ТекущийЭлементВложенныхДанных()].Ссылка;
		КонецЕсли;
		Данные.Очистить();
	КонецЕсли;
	
	мПериодНеактивностиЗаказа = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПериодНеактивностиЗаказа) * 60;
	
	ТекущийРесторан		= ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущаяРестораннаяЗона = ПолучитьСерверFrontOffice().ТекущаяРестораннаяЗона();
	ТекущийСотрудник	= УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
	
	ДоступностьЗаказов	= ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.РеализацияТоваровУслуг"), ТребуемыеПолномочия);
	ДоступностьСписаний = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.СписаниеТоваров"), ТребуемыеПолномочия);
	ДоступностьЗаказовСоздание = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.РеализацияТоваровУслуг"), "Создание");
	
	Если Реализация Тогда
		Если (ДоступностьЗаказов = Перечисления.ПраваДоступаПользователей.Привилегированные) Тогда
			ЗапросГдеЗаказы = "СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг"
		ИначеЕсли (ДоступностьЗаказов = Перечисления.ПраваДоступаПользователей.Разрешить) Тогда
			ЗапросГдеЗаказы = "СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг И СостояниеДокументов.Сотрудник = &Сотрудник"
		КонецЕсли;
	КонецЕсли;
	
	Если Списание Тогда
		Если (ДоступностьСписаний = Перечисления.ПраваДоступаПользователей.Привилегированные) Тогда
			ЗапросГдеСписания = "СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров"
		ИначеЕсли (ДоступностьСписаний = Перечисления.ПраваДоступаПользователей.Разрешить) Тогда
			ЗапросГдеСписания = "СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров И СостояниеДокументов.Сотрудник = &Сотрудник"
		КонецЕсли;
	КонецЕсли;
	
	// -- 100% пустая выборка.
	Если (ЗапросГдеЗаказы = Неопределено) И (ЗапросГдеСписания = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	Если (Не ЗапросГдеЗаказы = Неопределено) Тогда
		ЗапросГде = "(" + ЗапросГдеЗаказы + ")";
	КонецЕсли;
	
	Если (Не ЗапросГдеСписания = Неопределено) Тогда
		Если ПустаяСтрока(ЗапросГде) Тогда
			ЗапросГде = "(" + ЗапросГдеСписания + ")";
		Иначе
			ЗапросГде = ЗапросГде + " ИЛИ " + "(" + ЗапросГдеСписания + ")";
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипЗнч(СписокИсключаемых) = Тип("СписокЗначений")) Тогда
		ЗапросГде = "(" + ЗапросГде + ") И (НЕ СостояниеДокументов.Документ В &СписокИсключаемых)";
	ИначеЕсли (Не СписокИсключаемых = Неопределено) Тогда
		ЗапросГде = "(" + ЗапросГде + ") И (НЕ СостояниеДокументов.Документ = &СписокИсключаемых)";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СостояниеДокументов.Документ КАК Ссылка,
	                      |	СостояниеДокументов.Номер КАК Номер,
	                      |	СостояниеДокументов.Дата КАК Дата,
	                      |	СостояниеДокументов.Сотрудник КАК Сотрудник,
	                      |	СостояниеДокументов.Сотрудник.Представление КАК СотрудникПредставление,
	                      |	СостояниеДокументов.ДатаНачалаПериода КАК ДатаНачалаПериода,
	                      |	СостояниеДокументов.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	                      |	СостояниеДокументов.КоличествоКлиентов КАК КоличествоКлиентов,
	                      |	СостояниеДокументов.ПолныйНомерСтола КАК ПолныйНомерСтола,
	                      |	ВЫБОР
	                      |		КОГДА ТИПЗНАЧЕНИЯ(СостояниеДокументов.Документ) = ТИП(Документ.РеализацияТоваровУслуг)
	                      |			ТОГДА СостояниеДокументов.Документ.Комната
	                      |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Комнаты.ПустаяСсылка)
	                      |	КОНЕЦ КАК Комната,
	                      |	СостояниеДокументов.СуммаДокумента КАК СуммаДокумента,
	                      |	СостояниеДокументов.Состояние КАК Состояние,
	                      |	СостояниеДокументов.Комментарий КАК Комментарий
	                      |ИЗ
	                      |	РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
	                      |ГДЕ
	                      |	СостояниеДокументов.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	                      |	И СостояниеДокументов.Ресторан = &Ресторан
	                      |	И СостояниеДокументов.Стол В ИЕРАРХИИ(&РестораннаяЗона)
	                      |	И СостояниеДокументов.Документ = СостояниеДокументов.Документ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Сотрудник,
	                      |	ПолныйНомерСтола");
	Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
	Запрос.УстановитьПараметр("СписокИсключаемых", СписокИсключаемых);
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Запрос.УстановитьПараметр("РестораннаяЗона", ТекущаяРестораннаяЗона);
	
	Если ТекущийРесторан.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеДокументов.Ресторан = &Ресторан", "ИСТИНА");
	КонецЕсли;
	
	Если ТекущаяРестораннаяЗона.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРестораннымЗонам) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеДокументов.Стол В ИЕРАРХИИ(&РестораннаяЗона)", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеДокументов.Документ = СостояниеДокументов.Документ", ЗапросГде);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабличноеПоле.Тег = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТабличноеПоле.Тег Цикл
		
		СтрокаДанных = Данные.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
		Если (СтрокаДанных = Неопределено) Тогда
			СтрокаДанных = Данные.Добавить();
			СтрокаДанных.Сотрудник = СтрокаТаблицы.Сотрудник;
			СтрокаДанных.СотрудникПредставление = СтрокаТаблицы.СотрудникПредставление;
			СтрокаДанных.Документы = Новый Массив;
		КонецЕсли;
		СтрокаДанных.Документы.Добавить(СтрокаТаблицы);
		
		Если (СтрокаТаблицы.Ссылка = ТекущийДокумент) Тогда
			ТекущаяСтрока = СтрокаДанных;
			ТекущийЭлементВложенныхДанных = СтрокаДанных.Документы.Количество() - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// -- Текущий пользователь.
	Если ЗначениеЗаполнено(ТекущийСотрудник)
		// Если по сотруднику нет документов, 
		// то просто добавляем этого сотрудника в список столов
		// в противном случае, при оплате последнего заказа из списка не будет закрываться форма заказа
		И Данные.Количество() = 0 Тогда
		СтрокаДанных = Данные.Добавить();
		СтрокаДанных.Сотрудник = ТекущийСотрудник;
		СтрокаДанных.СотрудникПредставление = Строка(ТекущийСотрудник);
		СтрокаДанных.Документы = Новый Массив;
	КонецЕсли;
	
	Если (Не ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ТекущаяПозиция(ТекущаяСтрока, , ТекущийЭлементВложенныхДанных);
	КонецЕсли;
	
	Если (ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;

КонецПроцедуры // ТаблицаОткрытыхДокументовПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля открытых документов.
//
Процедура ТаблицаОткрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	ТекущаяДата = ТекущаяДата();
	ВыводитьДополнительнуюИнформацию = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьДополнительнуюИнформацию);
	
	// СотрудникПредставление.
	ОформлениеСтроки.Ячейки("СотрудникПредставление").ГиперСсылка = Истина;
	
	// Документы.
	Если Булево(ОформлениеСтроки.Ячейки("Документы").Ячейки(Неопределено)) Тогда
		Для ИндексВложенныхДанных = 0 По ОформлениеСтроки.Ячейки("Документы").Ячейки(Неопределено) - 1 Цикл
			ДанныеДокумента = ДанныеСтроки.Документы[ИндексВложенныхДанных];
			ВложеннаяЯчейка = ОформлениеСтроки.Ячейки("Документы").Ячейки(ИндексВложенныхДанных);
			ВложеннаяЯчейка.Выравнивание = ГоризонтальноеПоложение.Центр;
			Если (ТипЗнч(ДанныеДокумента.Ссылка) = мТипДокументаРеализацияТоваровУслуг) Тогда
				Если ВыводитьДополнительнуюИнформацию Тогда
					ВложеннаяЯчейка.Текст = ДанныеДокумента.ПолныйНомерСтола + Символы.ПС + 
					НСтр("ru='Гостей: ';uk='Гостей: '") + ДанныеДокумента.КоличествоКлиентов + Символы.ПС + 
					НСтр("ru='Сумма: ';uk='Сума: '") + ДанныеДокумента.СуммаДокумента;
				Иначе
					ВложеннаяЯчейка.Текст = ДанныеДокумента.ПолныйНомерСтола;			
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеДокумента.Комната) Тогда
					ВложеннаяЯчейка.Текст = ВложеннаяЯчейка.Текст + " / " + СокрЛП(Строка(ДанныеДокумента.Комната));
				КонецЕсли;
				Если НЕ ПустаяСтрока(ДанныеДокумента.Комментарий) Тогда
					ВложеннаяЯчейка.Текст = ВложеннаяЯчейка.Текст + Символы.ПС + ДанныеДокумента.Комментарий;
				КонецЕсли;
				Если Булево(мПериодНеактивностиЗаказа) Тогда
					Если (ТекущаяДата - ДанныеДокумента.ДатаНачалаПериода >= мПериодНеактивностиЗаказа) Тогда
						ВложеннаяЯчейка.УстановитьКартинку(БиблиотекаКартинок.FrontOfficeНеактивныйЗаказ);	
					КонецЕсли;
				КонецЕсли; 
			Иначе
				ВложеннаяЯчейка.Текст = FrontOffice.ПредставлениеНомера(ДанныеДокумента.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеДокумента.Дата);
			КонецЕсли;
			СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеДокумента.Состояние, , , , Ложь);
			СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
			ЗаполнитьЗначенияСвойств(ВложеннаяЯчейка, СтруктураСтиля);
		КонецЦикла;
	Иначе
		ОформлениеСтроки.Ячейки("Документы").Текст = НСтр("ru='Нет документов';uk='Немає документів'");
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОткрытыхДокументовВывестиСтроку()

// Функция возвращает текущий выбранный документ табличного поля открытых документов.
//
Функция ТаблицаОткрытыхДокументовТекущийДокумент(ТабличноеПоле) Экспорт
	
	Если (ТабличноеПоле.ТекущаяКолонка() = ТабличноеПоле.Колонки.Получить("Документы")) И (Не ТабличноеПоле.ТекущийЭлементВложенныхДанных() = Неопределено) Тогда
		Возврат ТабличноеПоле.ТекущиеДанные().Документы[ТабличноеПоле.ТекущийЭлементВложенныхДанных()];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ТаблицаОткрытыхДокументовТекущийДокумент()

// Процедура осуществляет поиск данных табличного поля открытых документов.
//
Функция ТаблицаОткрытыхДокументовНайти(ТабличноеПоле) Экспорт
	
	Перем Значение;
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПоиска");
	
	// Выбор.
	ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
	Если (Не ТипЗнч(ПараметрЗакрытия) = Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Режим и данные поиска.
	мРежимПоиска = ПараметрЗакрытия; 
	Если (ТабличноеПоле.Тег = Неопределено) Тогда
		мДанныеПоиска = ОбщегоНазначения.ДеревоЗначенийВТаблицуЗначений(ТабличноеПоле.Данные(), ,,, Новый Структура("ЭтоГруппа", Ложь)); 
	Иначе
		мДанныеПоиска = ТабличноеПоле.Тег; 
	КонецЕсли;
	
	// Данные.
	Данные = Новый ТаблицаЗначений;
	Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
		Данные.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
	
	// Поиск.
	Если (мРежимПоиска = "Стол") Тогда
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите стол';uk='Введіть стіл'") , Метаданные.Справочники.Столы.ДлинаКода + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.ПостфиксСтола.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.ПостфиксСтола.Тип.КвалификаторыЧисла.Разрядность,,, "ЧРД=.; ЧГ=", Данные, "Номер,ПолныйНомерСтола,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите сумму';uk='Введіть суму'") , Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ,,, Данные, "Номер,ПолныйНомерСтола,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		Результат = FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите сотрудника';uk='Введіть працівника'") , ,,, Данные, "Номер,ПолныйНомерСтола,СотрудникПредставление,СуммаДокумента", , ЭтотОбъект, "ПоискДокумента");
	Иначе
		Результат = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите номер документа';uk='Введіть номер документа'") , Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера, ,,, "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера + "; ЧДЦ=0; ЧГ=", Данные, "Номер", , ЭтотОбъект, "ПоискДокумента");
	КонецЕсли;
	
	// Позиционирование.
	Если Результат Тогда
		Если (ТабличноеПоле.Тег = Неопределено) Тогда
			ТабличноеПоле.ТекущаяСтрока(ТабличноеПоле.Данные().Строки.Найти(Значение.Ссылка, "Ссылка", Истина));
		Иначе
			Для Каждого СтрокаТаблицы Из ТабличноеПоле.Данные() Цикл
				Для Индекс = 0 По СтрокаТаблицы.Документы.Количество() - 1 Цикл
					
					Если (СтрокаТаблицы.Документы[Индекс].Ссылка = Значение.Ссылка) Тогда
						ТабличноеПоле.ТекущаяПозиция(СтрокаТаблицы, ТабличноеПоле.Колонки.Получить("Документы"), Индекс);
						Возврат Результат;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Данные 		= Неопределено;
	ФормаВыбора = Неопределено;
	
	// Результат.
	Возврат Результат;
	
КонецФункции // ТаблицаОткрытыхДокументовНайти()


// Процедура заполнения табличного поля открытых документов.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗакрытыхДокументовПрочитать(ТабличноеПоле, ТребуемыеПолномочия = "ПросмотрСпискаЗакрытых", СписокИсключаемых = Неопределено, Реализация = Истина, Списание = Истина, ИерархическийПросмотр = Ложь) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ДеревоЗначений;
		Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.СписаниеТоваров"));
		Данные.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"), "Документ");
		Данные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		Данные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
		Данные.Колонки.Добавить("СотрудникПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Сотрудник';uk='Працівник'") );
		Данные.Колонки.Добавить("ДатаНачалаПериода", Новый ОписаниеТипов("Дата"), НСтр("ru='Время открытия';uk='Час відкриття'") );
		Данные.Колонки.Добавить("ДатаОкончанияПериода", Новый ОписаниеТипов("Дата"), НСтр("ru='Время закрытия';uk='Час закриття'") );
		Данные.Колонки.Добавить("ПолныйНомерСтола", Новый ОписаниеТипов("Строка"), НСтр("ru='Стол';uk='Стіл'") );
		Данные.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число"), НСтр("ru='Сумма';uk='Сума'") );
		Данные.Колонки.Добавить("Оплата", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
		Данные.Колонки.Добавить("ОплатаПредставление", Новый ОписаниеТипов("Строка"), "Оплата");
		Данные.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументов"));
		Данные.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("Картинка,Номер,СотрудникПредставление,ПолныйНомерСтола,ДатаНачалаПериода,ДатаОкончанияПериода,СуммаДокумента,ОплатаПредставление");
		ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			ТабличноеПоле.Колонки.Получить("ДатаНачалаПериода").Ширина = 400 * 0.15;
			ТабличноеПоле.Колонки.Получить("ДатаНачалаПериода").Положение = ПоложениеКолонки.НаСледующейСтроке;
			ТабличноеПоле.Колонки.Получить("ДатаНачалаПериода").Формат = "ДФ='dd.MM.yyyy HH:mm'";
			ТабличноеПоле.Колонки.Получить("ДатаНачалаПериода").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			ТабличноеПоле.Колонки.Получить("ДатаОкончанияПериода").Ширина = 400 * 0.15;
			ТабличноеПоле.Колонки.Получить("ДатаОкончанияПериода").Положение = ПоложениеКолонки.ВТойЖеКолонке;
			ТабличноеПоле.Колонки.Получить("ДатаОкончанияПериода").Формат = "ДФ='dd.MM.yyyy HH:mm'";
			ТабличноеПоле.Колонки.Получить("ДатаОкончанияПериода").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат =  "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("ОплатаПредставление").Ширина = 400 * 0.20;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
	Иначе
		// -- Текущая позиция (I).
		Если (Не ТабличноеПоле.ТекущийРодитель() = Неопределено) Тогда
			ТекущийРодитель = ТабличноеПоле.ТекущийРодитель().Сотрудник;
		КонецЕсли;
		Если (Не ТабличноеПоле.ТекущаяСтрока() = Неопределено) Тогда
			ТекущийДокумент = ТабличноеПоле.ТекущиеДанные().Ссылка;
		КонецЕсли;
		
		Данные.Строки.Очистить();
	КонецЕсли;

	
	// Выборка данных.
	ТекущийРесторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	ТекущаяРестораннаяЗона = ПолучитьСерверFrontOffice().ТекущаяРестораннаяЗона();
	ТекущийСотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
	
	// -- Документы.
	ДоступностьЗаказов = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.РеализацияТоваровУслуг"), ТребуемыеПолномочия);
	ДоступностьСписаний = ПолучитьСерверFrontOffice().МенеджерДокумента.ДокументПолучитьЗначениеПрава(Тип("ДокументСсылка.СписаниеТоваров"), ТребуемыеПолномочия);
	Если Реализация Тогда
		Если (ДоступностьЗаказов = Перечисления.ПраваДоступаПользователей.Привилегированные) Тогда
			ЗапросГдеЗаказы = "СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг"
		ИначеЕсли (ДоступностьЗаказов = Перечисления.ПраваДоступаПользователей.Разрешить) Тогда
			ЗапросГдеЗаказы = "СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг И СостояниеДокументов.Сотрудник = &Сотрудник"
		КонецЕсли;
	КонецЕсли;
	Если Списание Тогда
		Если (ДоступностьСписаний = Перечисления.ПраваДоступаПользователей.Привилегированные) Тогда
			ЗапросГдеСписания = "СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров"
		ИначеЕсли (ДоступностьСписаний = Перечисления.ПраваДоступаПользователей.Разрешить) Тогда
			ЗапросГдеСписания = "СостояниеДокументов.Документ ССЫЛКА Документ.СписаниеТоваров И СостояниеДокументов.Сотрудник = &Сотрудник"
		КонецЕсли;
	КонецЕсли;
	
	// -- 100% пустая выборка.
	Если (ЗапросГдеЗаказы = Неопределено) И (ЗапросГдеСписания = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	Если (Не ЗапросГдеЗаказы = Неопределено) Тогда
		ЗапросГде = "(" + ЗапросГдеЗаказы + ")";
	КонецЕсли;
	Если (Не ЗапросГдеСписания = Неопределено) Тогда
		Если ПустаяСтрока(ЗапросГде) Тогда
			ЗапросГде = "(" + ЗапросГдеСписания + ")";
		Иначе
			ЗапросГде = ЗапросГде + " ИЛИ " + "(" + ЗапросГдеСписания + ")";
		КонецЕсли;
	КонецЕсли;
	Если (ТипЗнч(СписокИсключаемых) = Тип("СписокЗначений")) Тогда
		ЗапросГде = "(" + ЗапросГде + ") И (НЕ СостояниеДокументов.Документ В &СписокИсключаемых)";
	ИначеЕсли (Не СписокИсключаемых = Неопределено) Тогда
		ЗапросГде = "(" + ЗапросГде + ") И (НЕ СостояниеДокументов.Документ = &СписокИсключаемых)";
	КонецЕсли;
	
	// -- Запрос.
	ЗакрытыеСостояния = УправлениеЗаказами.СостоянияЗакрытыхДокументов(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостояниеДокументов.Ссылка КАК Ссылка,
	|	СостояниеДокументов.Номер КАК Номер,
	|	СостояниеДокументов.Дата,
	|	СостояниеДокументов.Сотрудник,
	|	СостояниеДокументов.СотрудникПредставление,
	|	СостояниеДокументов.ДатаНачалаПериода,
	|	СостояниеДокументов.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	СостояниеДокументов.ПолныйНомерСтола,
	|	СостояниеДокументов.СуммаДокумента,
	|	СостояниеДокументов.Оплата,
	|	СостояниеДокументов.ОплатаПредставление,
	|	СостояниеДокументов.Состояние
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|		РеализацияТоваровУслуг.Номер КАК Номер,
	|		РеализацияТоваровУслуг.Дата КАК Дата,
	|		РеализацияТоваровУслуг.Сотрудник КАК Сотрудник,
	|		РеализацияТоваровУслуг.Сотрудник.Представление КАК СотрудникПредставление,
	|		РеализацияТоваровУслуг.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|		РеализацияТоваровУслуг.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|		РеализацияТоваровУслуг.ПолныйНомерСтола КАК ПолныйНомерСтола,
	|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|		РеализацияТоваровУслуг.Оплата КАК Оплата,
	|		РеализацияТоваровУслуг.Оплата.Представление КАК ОплатаПредставление,
	|		РеализацияТоваровУслуг.Состояние КАК Состояние,
	|		РеализацияТоваровУслуг.Ссылка КАК Документ
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ресторан = &Ресторан
	|		И РеализацияТоваровУслуг.Стол В ИЕРАРХИИ(&РестораннаяЗона)
	|		И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|		И РеализацияТоваровУслуг.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	|		И РеализацияТоваровУслуг.ОтражатьВНалоговомУчете
	|		И РеализацияТоваровУслуг.Состояние В(&ЗакрытыеСостояния)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеТоваров.Ссылка,
	|		СписаниеТоваров.Номер,
	|		СписаниеТоваров.Дата,
	|		СписаниеТоваров.Сотрудник,
	|		СписаниеТоваров.Сотрудник.Представление,
	|		СписаниеТоваров.ДатаНачалаПериода,
	|		СписаниеТоваров.ДатаОкончанияПериода,
	|		&СинонимСписания,
	|		СписаниеТоваров.СуммаДокумента,
	|		СписаниеТоваров.Оплата,
	|		СписаниеТоваров.Оплата.Представление,
	|		СписаниеТоваров.Состояние,
	|		СписаниеТоваров.Ссылка
	|	ИЗ
	|		Документ.СписаниеТоваров КАК СписаниеТоваров
	|	ГДЕ
	|		СписаниеТоваров.Ресторан = &Ресторан
	|		И НАЧАЛОПЕРИОДА(СписаниеТоваров.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|		И СписаниеТоваров.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Ресторан)
	|		И СписаниеТоваров.ОтражатьВНалоговомУчете
	|		И СписаниеТоваров.Состояние В(&ЗакрытыеСостояния)) КАК СостояниеДокументов
	|ГДЕ
	|	СостояниеДокументов.Документ = СостояниеДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончанияПериода,
	|	Номер");
	Запрос.УстановитьПараметр("Дата", ПолучитьСерверFrontOffice().ТекущаяКассоваяДата());
	Запрос.УстановитьПараметр("ЗакрытыеСостояния", ЗакрытыеСостояния);
	Запрос.УстановитьПараметр("СинонимСписания", Метаданные.Документы.СписаниеТоваров.Синоним);
	Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
	Запрос.УстановитьПараметр("СписокИсключаемых", СписокИсключаемых);
	Запрос.УстановитьПараметр("Ресторан", ТекущийРесторан);
	Запрос.УстановитьПараметр("РестораннаяЗона", ТекущаяРестораннаяЗона);
	Если ТекущийРесторан.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг.Ресторан = &Ресторан", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписаниеТоваров.Ресторан = &Ресторан", "ИСТИНА");
	КонецЕсли;
	Если ТекущаяРестораннаяЗона.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРестораннымЗонам) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг.Стол В ИЕРАРХИИ(&РестораннаяЗона)", "ИСТИНА");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеДокументов.Документ = СостояниеДокументов.Документ", ЗапросГде);
	
	Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписаниеТоваров.ОтражатьВНалоговомУчете", "истина");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг.ОтражатьВНалоговомУчете", "истина");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Перенос данных в табличное поле.
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// -- Добавление в дерево родителей.
		СтрокаГруппы = Данные;
		Если ИерархическийПросмотр Тогда
			СтрокаЭлемент = Данные.Строки.Найти(Выборка.Сотрудник, "Сотрудник");
			
			Если (СтрокаЭлемент = Неопределено) Тогда
				СтрокаЭлемент = СтрокаГруппы.Строки.Добавить();
				СтрокаЭлемент.Сотрудник = Выборка.Сотрудник;
				СтрокаЭлемент.СотрудникПредставление = Выборка.СотрудникПредставление;
				СтрокаЭлемент.ЭтоГруппа = Истина;
			КонецЕсли;
			
			СтрокаГруппы = СтрокаЭлемент;
		КонецЕсли;
		
		// -- Добавление в дерево элемента.
		СтрокаДанных = СтрокаГруппы.Строки.Добавить();
		
		СтрокаДанных.Ссылка = Выборка.Ссылка;
		СтрокаДанных.Номер = Выборка.Номер;
		СтрокаДанных.Дата = Выборка.Дата;
		СтрокаДанных.Сотрудник = Выборка.Сотрудник;
		СтрокаДанных.СотрудникПредставление = Выборка.СотрудникПредставление;
		СтрокаДанных.ДатаНачалаПериода = Выборка.ДатаНачалаПериода;
		СтрокаДанных.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
		СтрокаДанных.ПолныйНомерСтола = Выборка.ПолныйНомерСтола;
		СтрокаДанных.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДанных.Оплата = Выборка.Оплата;
		СтрокаДанных.ОплатаПредставление = Выборка.ОплатаПредставление;
		СтрокаДанных.Состояние = Выборка.Состояние;
		
		// -- Обновление родителя.
		Если ИерархическийПросмотр Тогда
			СтрокаГруппы.СуммаДокумента = СтрокаГруппы.СуммаДокумента + СтрокаДанных.СуммаДокумента;	
		КонецЕсли;
		
		// -- Текущая позиция (II).
		Если (Не СтрокаДанных.Родитель = Неопределено) И (СтрокаДанных.Сотрудник = ТекущийРодитель) Тогда
			ТекущаяСтрокаРодитель = СтрокаДанных.Родитель;
		КонецЕсли;
		Если (СтрокаДанных.Ссылка = ТекущийДокумент) Тогда
			ТекущаяСтрока = СтрокаДанных;
		КонецЕсли;
	КонецЦикла;
	
	// -- Сортировка.
	Если ИерархическийПросмотр Тогда
		Данные.Строки.Сортировать("СотрудникПредставление");
	КонецЕсли;
	
	
	// -- Текущая позиция (III).
	Если (Не ТекущаяСтрокаРодитель = Неопределено) Или (Не ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ТекущаяПозиция(ТекущаяСтрока, ,, ТекущаяСтрокаРодитель);
	КонецЕсли;
	
	// Обновление.
	Если (ТекущаяСтрокаРодитель = Неопределено) И (ТекущаяСтрока = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	
	Выборка = Неопределено;

КонецПроцедуры // ТаблицаЗакрытыхДокументовПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля закрырых документов.
//
Процедура ТаблицаЗакрытыхДокументовВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	// Оформление строки.
	ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("Номер").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("СотрудникПредставление").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("ПолныйНомерСтола").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("ДатаНачалаПериода").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("ДатаОкончанияПериода").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("СуммаДокумента").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	ОформлениеСтроки.Ячейки("ОплатаПредставление").ГиперСсылка = ДанныеСтроки.ЭтоГруппа;
	
	СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
	
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Картинка"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Номер"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СотрудникПредставление"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ПолныйНомерСтола"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ДатаНачалаПериода"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ДатаОкончанияПериода"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ОплатаПредставление"), СтруктураСтиля);
	
	// Номер.
	ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
	
	// ДатаНачалаПериода.
	ОформлениеСтроки.Ячейки("ДатаНачалаПериода").Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ДатаНачалаПериода);
	
	// ДатаОкончанияПериода.
	ОформлениеСтроки.Ячейки("ДатаОкончанияПериода").Текст = FrontOffice.ПредставлениеДаты(ДанныеСтроки.ДатаОкончанияПериода);
	
КонецПроцедуры // ТаблицаЗакрытыхДокументовВывестиСтроку()

// Функция возвращает текущий выбранный документ табличного поля закрырых документов.
//
Функция ТаблицаЗакрытыхДокументовТекущийДокумент(ТабличноеПоле) Экспорт
	
	Возврат ТабличноеПоле.ТекущиеДанные();

КонецФункции // ТаблицаОткрытыхДокументовТекущийДокумент()

// Процедура осуществляет поиск данных табличного поля закрытых документов.
//
Функция ТаблицаЗакрытыхДокументовНайти(ТабличноеПоле) Экспорт
	
	Возврат ТаблицаОткрытыхДокументовНайти(ТабличноеПоле);
	
КонецФункции // ТаблицаЗакрытыхДокументовНайти()


// Обработчик события ПоискДокумента.ПриИзмененииДанных элемента.
//
Процедура ПоискДокументаПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	
	ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.20;
	ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	ТабличноеПоле.Колонки.Получить("Номер").ТекстШапки = "Документ";
	Если (мРежимПоиска = "Стол") Тогда
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").ТекстШапки = НСтр("ru='Стол';uk='Стіл'") ;;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").ТекстШапки = НСтр("ru='Сумма';uk='Сума'") ;
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").ТекстШапки = НСтр("ru='Стол';uk='Стіл'") ;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").ТекстШапки = НСтр("ru='Сумма';uk='Сума'") ;
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("ПолныйНомерСтола").ТекстШапки = "Стол";
		ТабличноеПоле.Колонки.Получить("СотрудникПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("СотрудникПредставление").ТекстШапки = НСтр("ru='Сотрудник';uk='Працівник'") ;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").ТекстШапки = НСтр("ru='Сумма';uk='Сума'") ;
	КонецЕсли;
	
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ПоискДокументаПриИзмененииДанных()

// Обработчик события ПоискДокумента.ПриПоискеЗначения элемента.
//
Процедура ПоискДокументаПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	// Даныне.
	Данные = Элемент.Данные(); Данные.Очистить();
	
	// Значение для поиска.
	Если (мРежимПоиска = "Стол") Тогда
		ЗначениеДляПоиска = Формат(Значение, "ЧРД=.; ЧГ=");
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		ЗначениеДляПоиска = Формат(Значение, "ЧРД=,; ЧГ=");
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		ЗначениеДляПоиска = Нрег(СокрЛ(Значение));
	Иначе
		ЗначениеДляПоиска = Формат(Значение, "ЧГ=");
	КонецЕсли;
	Если ПустаяСтрока(ЗначениеДляПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	// Нисходящий обход дерева.
	Для Каждого СтрокаТаблицыДанных Из мДанныеПоиска Цикл
	
		Если (мРежимПоиска = "Стол") Тогда
			Валидная = Булево(Найти(СтрокаТаблицыДанных.ПолныйНомерСтола, ЗначениеДляПоиска));
		ИначеЕсли (мРежимПоиска = "Сумма") Тогда
			Валидная = Булево(Найти(Формат(СтрокаТаблицыДанных.СуммаДокумента), ЗначениеДляПоиска));
		ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
			Валидная = Булево(Найти(НРег(СтрокаТаблицыДанных.СотрудникПредставление), ЗначениеДляПоиска));
		Иначе
			Валидная = Булево(Найти(FrontOffice.ПредставлениеНомера(СтрокаТаблицыДанных.Номер), ЗначениеДляПоиска));
		КонецЕсли;
		Если Не Валидная Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = Данные.Добавить();
		Для Каждого Колонка Из мДанныеПоиска.Колонки Цикл
			СтрокаТаблицы[Колонка.Имя] = СтрокаТаблицыДанных[Колонка.Имя];
		КонецЦикла;
		
		// TODO: Поиск значения.
		
	КонецЦикла;
	
КонецПроцедуры // ПоискКлиентаПриПоискеЗначения()

// Обработчик события ПоискДокумента.ПриВыводеСтроки элемента.
//
Процедура ПоискДокументаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	СтруктураСтиля = FrontOffice.ПараметрыСтиляСостоянияДокумента(ДанныеСтроки.Состояние, ,,, Ложь); СтруктураСтиля.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
	
	ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("Номер"), СтруктураСтиля);
	Если (мРежимПоиска = "Стол") Тогда
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ПолныйНомерСтола"), СтруктураСтиля);
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
	ИначеЕсли (мРежимПоиска = "Сумма") Тогда
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ПолныйНомерСтола"), СтруктураСтиля);
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
	ИначеЕсли (мРежимПоиска = "Сотрудник") Тогда
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("ПолныйНомерСтола"), СтруктураСтиля);
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СотрудникПредставление"), СтруктураСтиля);
		ЗаполнитьЗначенияСвойств(ОформлениеСтроки.Ячейки("СуммаДокумента"), СтруктураСтиля);
	КонецЕсли;
	
	// Номер.
	ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
	
КонецПроцедуры // ПоискКлиентаПриВыводеСтроки()

//Костенюк Александр-Старт 25.05.2012
// Процедура заполнения табличного поля "Черный список"/"Белый список".
//
// Параметры:
//	ТабличноеПоле - ОбработкаОбъект.TouchТабличноеПоле.
//	ИмяРегистра - Строка, имя регистра сведений из которого будут прочитаны данные
//
Процедура ТаблицаЧерныйБелыйСписокПрочитать(ТабличноеПоле, ИмяРегистра) Экспорт
	
	Ресторан = ПолучитьСерверFrontOffice().ТекущийРесторан();
	
	УправлениеНоменклатуройСервер.ТаблицаЧерныйБелыйСписокПрочитать(ТабличноеПоле, ИмяРегистра, Ресторан);
	
КонецПроцедуры // ТаблицаЧерныйБелыйСписокПрочитать()
//Костенюк Александр-Финиш 25.05.2012

// Инициализация переменных.
мТипДокументаРеализацияТоваровУслуг = Тип("ДокументСсылка.РеализацияТоваровУслуг");

мРазмерЭлементовСтолов = УправлениеПользователями.ПолучитьНастрокуРазмера("160x60");

#КонецЕсли
