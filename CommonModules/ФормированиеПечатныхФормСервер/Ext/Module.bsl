
// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, КодЯзыка = "ru") Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,ПлательщикНалогаНаПрибыль";
	КонецЕсли; 

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		НСтр("ru=' ';uk=' '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ", 				НСтр("ru=' код по ЕГРПОУ ';uk=' код за ЄДРПОУ '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоДРФО", 				НСтр("ru=' код по ГРФЛ ';uk=' код за ДРФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ИНН",						НСтр("ru=' ИНН ';uk=' ІПН '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСвидетельства", 		НСтр("ru=' № свид. ';uk=' № свід. '",КодЯзыка));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			НСтр("ru=' ';uk=' '",КодЯзыка));
	СоответствиеПараметров.Вставить("ФактическийАдрес",			НСтр("ru=' ';uk=' '",КодЯзыка));
	СоответствиеПараметров.Вставить("Телефоны",					НСтр("ru=' тел.: ';uk=' тел.: '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСчета",				НСтр("ru=' р/с ';uk=' р/р '",КодЯзыка));
	СоответствиеПараметров.Вставить("Банк",               		НСтр("ru=' в банке ';uk=' у банку '",КодЯзыка));
	СоответствиеПараметров.Вставить("МФО",                		НСтр("ru=' МФО ';uk=' МФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ПлательщикНалогаНаПрибыль",НСтр("ru=' ';uk=' '",КодЯзыка));

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Если ИмяПараметра = "/" Тогда
				НоваяСтрока = Истина;
				Продолжить;
			КонецЕсли; 
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				
				Если ПустаяСтрока(Результат)Тогда 
					// это первый параметр, выведем префикс с большой буквы
					Префикс = ВРег(Лев(Префикс,1)) + Сред(Префикс,2);
				ИначеЕсли НоваяСтрока Тогда
					Результат = Результат + "," +Символы.ПС;
				Иначе
					Результат = Результат + ", " 
				КонецЕсли; 
				НоваяСтрока = Ложь;

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СокрЛП(СтрокаДополнения);
			Исключение
				Сообщить(НСтр("ru='Не удалось определить значение параметра организации: ';uk='Не вдалося визначити значення параметра організації: '") + ИмяПараметра, СтатусСообщения.Внимание);
			КонецПопытки;

		КонецЕсли; 

	КонецЦикла;

	Возврат Результат;

КонецФункции // ОписаниеОрганизации()

// Фомрирут массив параметров, для печати дополнительной информации
//
// Параметры: 
//  ВыборкаШапка   - результат запроса по шапке
//  Список         - список запрашиваемых параметров организаиии
//
// Возвращаемое значение:
//  Массив - со струтктурой (парами НазваниеПараметра:ЗначениеПараметра).
//
Функция ДополнительнаяИнформация(ВыборкаШапка, Список = "", КодЯзыка = "ru") Экспорт

	МассивСтруктур = Новый Массив();

	Если ПустаяСтрока(Список) Тогда
		Возврат МассивСтруктур;
	КонецЕсли; 

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ДоговорНаименованиеДляПечати", НСтр("ru='Договор:';uk='Договір:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Содержание",					НСтр("ru='Содержание:';uk='Зміст:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Склад",						НСтр("ru='Склад:';uk='Склад:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Сделка",						НСтр("ru='Сделка:';uk='Угода:'",КодЯзыка));
	СоответствиеПараметров.Вставить("ДокументПередачи",				НСтр("ru='Документ передачи:';uk='Документ передачі:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Инвентаризация",				НСтр("ru='Инвентаризация:';uk='Інвентаризація:'",КодЯзыка));
	СоответствиеПараметров.Вставить("КассаККМ",						НСтр("ru='ЭККА:';uk='ЕККА:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Валюта",						НСтр("ru='Валюта:';uk='Валюта:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Подразделение",				НСтр("ru='Подразделение:';uk='Підрозділ:'",КодЯзыка));
	СоответствиеПараметров.Вставить("АдресДоставки",				НСтр("ru='Адрес доставки:';uk='Адреса доставки:'",КодЯзыка));

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = СокрЛП(Лев(Список, ПозЗапятой - 1));
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				ЗначениеПараметра = ВыборкаШапка[ИмяПараметра];
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					Если ИмяПараметра = "ДоговорНаименованиеДляПечати" Тогда
						
						Попытка
							ДоговорКонтрагента = ВыборкаШапка["ДоговорКонтрагента"];
						Исключение 
							Продолжить;	
						КонецПопытки;
						
						ДоговорДата  = '00010101';
						ДоговорНомер = "";
						Попытка
							ДоговорДата = ВыборкаШапка["ДоговорДата"];
						Исключение КонецПопытки;
						Попытка
							ДоговорНомер = ВыборкаШапка["ДоговорНомер"];
						Исключение КонецПопытки;
						
						Если ЗначениеЗаполнено(ДоговорНомер) Тогда
							//заменим название договора на его настоящий номер
							ЗначениеПараметра = "№ " + СокрП(ДоговорНомер);
						Иначе
							// названием остается наименование справочника
							ЗначениеПараметра = ДоговорКонтрагента.Наименование;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ДоговорДата) Тогда
							// добавим дату договора
							ЗначениеПараметра = ЗначениеПараметра + НСтр("ru=' от ';uk=' від '",КодЯзыка) + Формат(ДоговорДата,"ДФ=dd.MM.yyyy")
						КонецЕсли
					Иначе
						Продолжить
					КонецЕсли
				КонецЕсли;
				
				// корректируем значение параметра в некоторых случаях
				Если    ИмяПараметра = "Сделка" 
					ИЛИ ИмяПараметра = "ДокументПередачи"
					ИЛИ ИмяПараметра = "Инвентаризация"
					ИЛИ ИмяПараметра = "Заказ" Тогда
					
					ЗначениеПараметра = Локализация.ПолучитьЛокализованноеПредставление(ЗначениеПараметра, КодЯзыка);
					
				КонецЕсли; 
				
				
				НазваниеПараметра = Строка(СоответствиеПараметров[ИмяПараметра]);
				Если НЕ ЗначениеЗаполнено(НазваниеПараметра) Тогда
					НазваниеПараметра = ИмяПараметра + ":";
				КонецЕсли;
				
				// корректируем название параметра в некоторых случаях	
				Если ИмяПараметра = "Сделка" Тогда
					
					НазваниеПараметра = НСтр("ru='Расч. док.:';uk='Розр. док.:'",КодЯзыка);
					
				КонецЕсли; 

				МассивСтруктур.Добавить(Новый Структура("НазваниеПараметра,ЗначениеПараметра", 
				                                  НазваниеПараметра,
												  ЗначениеПараметра));
			Исключение
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;

	Возврат МассивСтруктур;

КонецФункции // ДополнительнаяИнформация()

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество, КодЯзыка = "ru") Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, десятая, десятых, десятых, м, 1';uk='ціла, цілих, цілих, ж, десята, десятих, десятих, м, 1'",КодЯзыка);

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, сотая, сотых, сотых, м, 2';uk='ціла, цілих, цілих, ж, сота, сотих, сотих, м, 2'",КодЯзыка);

	Иначе
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3';uk='ціла, цілих, цілих, ж, тисячна, тисячних, тисячних, м, 3'",КодЯзыка);

	КонецЕсли;

	Возврат ЧислоПрописью(Количество,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыка), ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Функция возвращает часть запроса для корректного заполнения содержания услуг
// при формировании печатных форм.
//
// Параметр:
//  ТабличнаяЧасть - имя табличной части, из которой выбирается содержание 
//                   услуг.
//
// Возвращаемое значение:
//  Строка - текст части запроса.
//
Функция ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг(Знач ТабличнаяЧасть) Экспорт
	
	ТабличнаяЧасть = ТабличнаяЧасть + ?(ПустаяСтрока(ТабличнаяЧасть), "", ".");
	
	ЧастьЗапроса = 
	"	ВЫБОР 
	|		КОГДА НЕ (" + ТабличнаяЧасть + "Содержание ПОДОБНО """") ТОГДА
	|			ВЫРАЗИТЬ(" + ТабличнаяЧасть + "Содержание КАК Строка (1000))
	|		КОГДА НЕ (" + ТабличнаяЧасть + "Номенклатура.НаименованиеПолное ПОДОБНО """") ТОГДА
	|			ВЫРАЗИТЬ(" + ТабличнаяЧасть + "Номенклатура.НаименованиеПолное КАК Строка (1000))
	|		ИНАЧЕ
	|			" + ТабличнаяЧасть + "Номенклатура.Наименование
	|	КОНЕЦ";
	
	Возврат ЧастьЗапроса; 
	
КонецФункции // ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг()

