
Перем мТекущаяДата; // Используется при подготовке реквизитов документа, обеспечивая синхронность даты.

Перем мЗаголовок; // Заголовок служебных сообщений.


#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на экран или принтер, 
// а также распечатать необходмое количество копий.
//
// Параметры:
//  ИмяМакета - Строка. Название макета.
//
// Вовращаемое значение:
//  Булево. Истина в случае успешного выполнения операции.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь, FrontOfficeРежим = Ложь) Экспорт

	// Получить экземпляр документа на печать.
	Если ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьДокумента(FrontOfficeРежим);
	ИначеЕсли ИмяМакета = "РасходныеНакладные" Тогда
		ТабДокумент = ПечатьРасходныхНакладных(FrontOfficeРежим);
	ИначеЕсли ИмяМакета = "РасходныеНакладныеИНакладная" Тогда
		ТабДокумент = ПечатьРасходныхНакладных(FrontOfficeРежим);		
		ТабДокумент = ПечатьДокумента(FrontOfficeРежим);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

	Возврат Истина;
	
КонецФункции // Печать()


// Функция формирует табличный документ с печатной формой накладной.
//
// Параметры:
//  FrontOfficeРежим - Булево. Печать в Front-office режиме.
//
// Возвращаемое значение:
//  ТабличныйДокумент. Печатная форма документа.
//
Функция ПечатьДокумента(FrontOfficeРежим = Ложь)

	// Печать в Front-office режиме.
	Если FrontOfficeРежим Тогда
		ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.Принтеры);
		Если (ПринтерПечати = Неопределено) Тогда
			Возврат Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НакладнаяНаДоставку.Номер,
	               |	НакладнаяНаДоставку.Дата,
	               |	НакладнаяНаДоставку.ДатаНачалаПериода,
	               |	НакладнаяНаДоставку.ДатаОкончанияПериода,
	               |	НакладнаяНаДоставку.Комментарий,
	               |	НакладнаяНаДоставку.Ответственный,
	               |	НакладнаяНаДоставку.Ответственный.Сотрудник КАК Отгрузил,
	               |	НакладнаяНаДоставку.Ресторан КАК Поставщик,
	               |	НакладнаяНаДоставку.Состояние,
	               |	НакладнаяНаДоставку.Сотрудник
	               |ИЗ
	               |	Документ.НакладнаяНаДоставку КАК НакладнаяНаДоставку
	               |ГДЕ
	               |	НакладнаяНаДоставку.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование,
	               |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Номер КАК Номер,
	               |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Дата КАК Дата,
	               |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Контрагент КАК Контрагент,
	               |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.Контрагент.НаименованиеПолное КАК КонтрагентПолноеНаименование,
	               |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование.СуммаДокумента КАК Сумма,
	               |	НакладнаяНаДоставкуДокументыОснования.НомерСтроки КАК НомерСтроки,
	               |	КИРТУАдресДоставки.Представление КАК Адрес,
	               |	КИРТУТелефон.Представление КАК Телефон,
	               |	КИРТУТелефонДополнительный.Представление КАК ТелефонДополнительный,
	               |	КИРТУАдресДоставки.Комментарий
	               |ИЗ
	               |	Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КИРТУАдресДоставки
	               |		ПО НакладнаяНаДоставкуДокументыОснования.ДокументОснование = КИРТУАдресДоставки.Документ
	               |			И (КИРТУАдресДоставки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	               |			И (КИРТУАдресДоставки.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиРеализацииТоваровУслуг))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КИРТУТелефон
	               |		ПО НакладнаяНаДоставкуДокументыОснования.ДокументОснование = КИРТУТелефон.Документ
	               |			И (КИРТУТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	               |			И (КИРТУТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРеализацииТоваровУслуг))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КИРТУТелефонДополнительный
	               |		ПО НакладнаяНаДоставкуДокументыОснования.ДокументОснование = КИРТУТелефонДополнительный.Документ
	               |			И (КИРТУТелефонДополнительный.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	               |			И (КИРТУТелефонДополнительный.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонДополнительныйРеализацииТоваровУслуг))
	               |ГДЕ
	               |	НакладнаяНаДоставкуДокументыОснования.Ссылка = &ТекущийДокумент";
	ЗапросДокументыОснования = Запрос.Выполнить().Выгрузить();
	
	ОбластьСтроки = "Строка";
	ОбластьИтого = "Итого";	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НакладнаяНаДоставку_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Печать производится на языке, указанном в настройках пользователя.
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Шапка.
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата, ,, КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Накладная на доставку';uk='Накладна на доставку'",КодЯзыкаПечать), КодЯзыкаПечать);
	ОбластьМакета.Параметры.ТекущаяДата = ТекущаяДата();
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,/,Телефоны,Факсы,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Документы основания.
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'", КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Сумма = 0; СуммаНДС = 0; КвоСтрок=0;
	Для Каждого ВыборкаЗапроса Из ЗапросДокументыОснования Цикл 

		ОбластьМакета.Параметры.Заполнить(ВыборкаЗапроса);
		
		ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаЗапроса.ДокументОснование);
		ОбластьМакета.Параметры.Дата = Формат(ВыборкаЗапроса.Дата, "ДЛФ=DD; Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));	
		ОбластьМакета.Параметры.Адрес = Строка(ВыборкаЗапроса.Адрес) + УправлениеКонтактнойИнформацией.ПроверкаПустойСтроки(ВыборкаЗапроса.Комментарий, Истина) + СокрЛ(ВыборкаЗапроса.Комментарий);
		ОбластьМакета.Параметры.Телефон = Строка(ВыборкаЗапроса.Телефон) + УправлениеКонтактнойИнформацией.ПроверкаПустойСтроки(Строка(ВыборкаЗапроса.Телефон) + Строка(ВыборкаЗапроса.ТелефонДополнительный), Символы.ПС) + Строка(ВыборкаЗапроса.ТелефонДополнительный);
		ОбластьМакета.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(ВыборкаЗапроса.Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Сумма = Сумма + ВыборкаЗапроса.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаЗапроса.Сумма;
		КвоСтрок = КвоСтрок + 1;
	КонецЦикла;

	// Итого.
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьИтого);
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма;
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить(),КодЯзыкаПечать) + ".";
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего документов ';uk='Всього документів '",КодЯзыкаПечать) + КвоСтрок + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить()) + ".";
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Подписи.
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Печать в Front-office режиме.
	Если FrontOfficeРежим Тогда
		ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
		ТабДокумент = Неопределено;
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Функция формирует табличные документы с печатными формами расходных накладных.
//
// Параметры:
//  FrontOfficeРежим - Булево. Печать в Front-office режиме.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьРасходныхНакладных(FrontOfficeРежим = Ложь)
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ЭтотОбъект.ДокументыОснования Цикл
		СтрокаТабличнойЧасти.ДокументОснование.ПолучитьОбъект().Печать("Накладная", ,,, FrontOfficeРежим);
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	

#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура. Каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();
	
	СтруктураМакетов.Вставить("Накладная", "Накладная на доставку");
	СтруктураМакетов.Вставить("Разделитель");
	СтруктураМакетов.Вставить("РасходныеНакладные", "Расходные накладные");
	СтруктураМакетов.Вставить("РасходныеНакладныеИНакладная", "Расходные накладные + накладная на доставку");

	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Функция возвращает либо переданную дату, либубо текущую если переданное значение не заполнено.
//
Функция ПолучитьНеПустуюДату(Значение, Алетернатива = Неопределено)
	
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Значение) Тогда
		Если (Алетернатива = Неопределено) Тогда
			Возврат мТекущаяДата;
		Иначе
			Возврат Алетернатива;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции // ПолучитьНеПустуюДату()

// Функция возвращает сводную таблицу по исполнителям.
//
Функция ПолучитьСводнуюТаблицуИсполнителей()
	
	// Запрос.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Дата,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование КАК ДокументПродажи,
	                      |	РеализацияТоваровУслуг.Сделка,
	                      |	РеализацияТоваровУслуг.СуммаДокумента,
	                      |	РеализацияТоваровУслуг.СуммаДокументаБезСкидок,
	                      |	РеализацияТоваровУслуг.СуммаНаценкиДокумента,
	                      |	РеализацияТоваровУслуг.СуммаСкидкиДокумента
	                      |ИЗ
	                      |	Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |		ПО НакладнаяНаДоставкуДокументыОснования.ДокументОснование = РеализацияТоваровУслуг.Ссылка
	                      |ГДЕ
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка = &Ссылка
	                      |	И РеализацияТоваровУслуг.Проведен");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	// Результат.
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСводнуюТаблицуИсполнителей()


// Подготавливает (автоматически заполнениет) шапку документа.
//
Процедура ПодготовитьШапку(РежимЗаписи, РежимПроведения)
	
	// Текущая дата.
	мТекущаяДата = ТекущаяДата();
	
	// Распечатан.
	Распечатан = (Проведен Или (РежимЗаписи = РежимЗаписиДокумента.Проведение)) И (Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);

	// Пустой.
	Пустой = Булево(ДокументыОснования.Количество());
	
	// ДатаНачалаПериода.
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДатаНачалаПериода) Тогда
		ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(ДатаОкончанияПериода), мТекущаяДата);
	КонецЕсли;
	
	// ДатаОкончанияПериода.
	Если Распечатан И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДатаОкончанияПериода) Тогда
			ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(ДатаНачалаПериода), мТекущаяДата);
		КонецЕсли;
	КонецЕсли;
	
	// ПричинаОтказа.
	Если Не ПометкаУдаления Тогда
		ПричинаОтказа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьШапку()

// Подготавливает (автоматически заполнениет) строки табличной части документов оснований.
//
Процедура ПодготовитьТабличнуюЧастьДокументыОснования(РежимЗаписи, РежимПроведения)
	
	Для Каждого СтрокаТабличнойЧасти Из ДокументыОснования Цикл
		
		// Идентификатор.
		Если ПустаяСтрока(СтрокаТабличнойЧасти.Идентификатор) Тогда
			СтрокаТабличнойЧасти.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		// ДатаНачалаПериода.
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
			СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаОкончанияПериода), ПолучитьНеПустуюДату(ДатаОкончанияПериода), Макс(ПолучитьНеПустуюДату(ДатаНачалаПериода), мТекущаяДата));
		КонецЕсли;
		
		// ДатаОкончанияПериода.
		Если Распечатан И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
				СтрокаТабличнойЧасти.ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаНачалаПериода), ПолучитьНеПустуюДату(ДатаНачалаПериода), Мин(ПолучитьНеПустуюДату(ДатаОкончанияПериода), мТекущаяДата));
			КонецЕсли;
		КонецЕсли;
		
		// Проведен.
		СтрокаТабличнойЧасти.Проведен = (Проведен Или (РежимЗаписи = РежимЗаписиДокумента.Проведение)) И (Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
		
		// ПометкаУдаления.
		СтрокаТабличнойЧасти.ПометкаУдаления = ПометкаУдаления;
		
		// Ресторан.
		СтрокаТабличнойЧасти.Ресторан = Ресторан;
		
		// Сотрудник.
		СтрокаТабличнойЧасти.Сотрудник = Сотрудник;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТабличнуюЧастьДокументыОснования()


// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, Заголовок)

	// Обязательные.
	Если (СтруктураОбязательныхПолей = Неопределено) Тогда
		СтруктураОбязательныхПолей = Новый Структура;
	КонецЕсли;
	СтруктураОбязательныхПолей.Вставить("Ответственный");
	СтруктураОбязательныхПолей.Вставить("Ресторан");
	СтруктураОбязательныхПолей.Вставить("ДатаНачалаПериода");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Дополнительная проверка булевых типов.
	Если СтруктураОбязательныхПолей.Свойство("Распечатан") Тогда
		Если Не Распечатан Тогда
			ОбщегоНазначения.СообщитьОбНезаполненомРеквизитеДокумента(ЭтотОбъект, "Распечатан", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Дополнительная проверка кореляции значений.
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(ДатаНачалаПериода) И ЗначениеЗаполнено(ДатаОкончанияПериода) И (ДатаНачалаПериода > ДатаОкончанияПериода) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().Реквизиты.ДатаНачалаПериода.Синоним + "» документа «" + Метаданные().Синоним + "» не может быть больше значения реквизита «" + Метаданные().Реквизиты.ДатаОкончанияПериода.Синоним + "».", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части документов оснований.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(СтруктураОбязательныхПолей, Отказ, Заголовок)

	// Обязательные.
	Если (СтруктураОбязательныхПолей = Неопределено) Тогда
		СтруктураОбязательныхПолей = Новый Структура;
	КонецЕсли;
	СтруктураОбязательныхПолей.Вставить("ДокументОснование");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка кореляции значений.
	Если Не Отказ Тогда
		
		СписокДокументовОснований = Новый СписокЗначений;
		Для Каждого СтрокаТабличнойЧасти Из ДокументыОснования Цикл
			
			НомерСтроки = Строка(ДокументыОснования.Индекс(СтрокаТабличнойЧасти) + 1);
			
			// -- Кореляция значений.
			Если СтруктураОбязательныхПолей.Свойство("ДатаНачалаПериода") Тогда
				Если ЗначениеЗаполнено(ДатаНачалаПериода) И ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
					Если (СтрокаТабличнойЧасти.ДатаНачалаПериода < ДатаНачалаПериода) Или (ДатаОкончанияПериода < СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.ДатаНачалаПериода.Синоним + "» документа «" + Метаданные().Синоним + "» может быть только в пределах основного периода документа. Номер строки: " + НомерСтроки + ".", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтруктураОбязательныхПолей.Свойство("ДатаОкончанияПериода") Тогда
				Если (СтрокаТабличнойЧасти.ДатаНачалаПериода > СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.ДатаНачалаПериода.Синоним + "» документа «" + Метаданные().Синоним + "» не может быть больше значения реквизита «" + Метаданные().ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.ДатаОкончанияПериода.Синоним + "». Номер строки: " + НомерСтроки + ".", Отказ, Заголовок);
				КонецЕсли;
				Если (СтрокаТабличнойЧасти.ДатаОкончанияПериода < ДатаНачалаПериода) Или (ДатаОкончанияПериода < СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.ДатаОкончанияПериода.Синоним + "» документа «" + Метаданные().Синоним + "» может быть только в пределах основного периода документа. Номер строки: " + НомерСтроки + ".", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
			// -- Уникальность документа.
			Значение = СписокДокументовОснований.НайтиПоЗначению(СтрокаТабличнойЧасти.ДокументОснование);
			Если (Значение = Неопределено) Тогда
				СписокДокументовОснований.Добавить(СтрокаТабличнойЧасти.ДокументОснование, НомерСтроки);
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьОбОшибке("Документ «" + Метаданные().Синоним + "» может содержать только единократное вхождение каждого из документов оснований." + Символы.ПС + Символы.Таб + "Документ «" + СтрокаТабличнойЧасти.ДокументОснование + "» встречается два или более раз. Строки номер: " + Значение.Представление + " и " + НомерСтроки + ".", Отказ, Заголовок);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДокументыОснования()


// Выполняет движения документа по регистрам состояний.
//
Процедура ДвиженияПоРегистрамСостояний(РежимПроведения, Отказ, Заголовок);
	
	// Состояние документа.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не Проведен) И (Не ПометкаУдаления) Тогда
			НаборЗаписей.Прочитать();
			Если Булево(НаборЗаписей.Количество()) Тогда
				Запись = НаборЗаписей[0];
				
				// -- Изменение состояний.
				ИзмененРесторан = (Не Запись.Ресторан = Ресторан);
				ИзмененаСортировкаДата = ИзмененРесторан Или (Не Запись.ДатаНачалаПериода = ДатаНачалаПериода);
			Иначе
				Запись = НаборЗаписей.Добавить();
				
				// -- Изменение состояний.
				ИзмененаСортировкаДата = Истина;
			КонецЕсли;
			
			Запись.Документ = Ссылка;
			Запись.Модуль = Перечисления.МодулиИПодсистемы.Доставка;
			Запись.Ресторан = Ресторан;
			Запись.Сотрудник = Сотрудник;
			Запись.Дата = Дата;
			Запись.ДатаНачалаПериода = ДатаНачалаПериода;
			Запись.ДатаОкончанияПериода = ДатаОкончанияПериода;
			Запись.Номер = Номер;
			Запись.Пустой = Пустой;
			Запись.Распечатан = Распечатан;
			Запись.Состояние = Состояние;
			Запись.Комментарий = Комментарий;
			// -- Автоматический.
			ДополнительныеСвойства.Свойство("Автоматический", Запись.Автоматический);
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
	
	КонецЕсли;
	
	// Состояние сортировки документа.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеСортировкиДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не Проведен) И (Не ПометкаУдаления) Тогда
			НаборЗаписей.Прочитать();
			Если Булево(НаборЗаписей.Количество()) Тогда
				Запись = НаборЗаписей[0];
			Иначе
				Запись = НаборЗаписей.Добавить();
				
				// -- Изменение состояний.
				ИзмененаСортировкаДата = Истина;
			КонецЕсли;
			
			Запись.Документ = Ссылка;
			
			АлтернативнаяДатаДляСортировки = ПолучитьНеПустуюДату(ДатаНачалаПериода, Дата);
			Если (ИзмененаСортировкаДата = Истина) Тогда
				Запись.СортировкаДата = УправлениеЗаказами.ПолучитьЗначениеСортировкиПоДате(АлтернативнаяДатаДляСортировки);
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
	
	КонецЕсли;
	
	// Состояние документов оснований.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеДокументовОснованийНакладныхНаДоставку.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не ПометкаУдаления) Тогда
			Для Каждого СтрокаТабличнойЧасти Из ДокументыОснования Цикл
				
				Если Проведен И (СтрокаТабличнойЧасти.ДокументОснование.Проведен Или СтрокаТабличнойЧасти.ДокументОснование.ПометкаУдаления) Тогда
					Продолжить;
				КонецЕсли;

				Запись = НаборЗаписей.Добавить();
				Запись.Документ = Ссылка;
				Запись.ДокументОснование = СтрокаТабличнойЧасти.ДокументОснование;
				Запись.Ресторан = Ресторан;
				Запись.Сотрудник = Сотрудник;
				Запись.ДатаНачалаПериода = ДатаНачалаПериода;
				Запись.ДатаОкончанияПериода = ДатаОкончанияПериода;
				Запись.Распечатан = Распечатан;
				
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
	
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамСостояний()


// Выполняет движения документа по регистрам учета.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
	
	// Рассчет.
	Если Не Отказ Тогда
		
		СводнаяТаблицаИсполнителей = ПолучитьСводнуюТаблицуИсполнителей();
		
	КонецЕсли;
	
	// Исполнители.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.Исполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументИсполнения.Установить(Ссылка);
		
		Для Каждого СтрокаТаблицы Из СводнаяТаблицаИсполнителей Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Дата = СтрокаТаблицы.Дата;
			Запись.Сотрудник = Сотрудник;
			Запись.Сделка = СтрокаТаблицы.Сделка;
			Запись.ДокументПродажи = СтрокаТаблицы.ДокументПродажи;
			Запись.ДокументИсполнения = Ссылка;
			Запись.Ресторан = Ресторан;
			Запись.Стоимость = СтрокаТаблицы.СуммаДокумента;
			Запись.СтоимостьБезСкидок = СтрокаТаблицы.СуммаДокументаБезСкидок;
			Запись.СуммаНаценки = СтрокаТаблицы.СуммаНаценкиДокумента;
			Запись.СуммаСкидки = СтрокаТаблицы.СуммаСкидкиДокумента;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, Заголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
	
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Выполняет удаление движения документа по регистрам учета.
//
Процедура УдалениеДвиженияПоРегистрам(Отказ, Заголовок)
	
	// Исполнители.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.Исполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументИсполнения.Установить(Ссылка);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, Заголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
	
	КонецЕсли;
	
КонецПроцедуры // УдалениеДвиженияПоРегистрам()


// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Удаляем значения некопируемых реквизитов шапки.
	Если Не ОбъектКопирования.ПометкаУдаления Тогда
		ДатаНачалаПериода = Неопределено;
		ДатаОкончанияПериода = Неопределено;
		Распечатан = Неопределено;
	КонецЕсли;
	
	// Удаляем значения некопируемых реквизитов табличных частей.
	Если Не ОбъектКопирования.ПометкаУдаления Тогда
		ДокументыОснования.Очистить();
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из ДокументыОснования Цикл
			СтрокаТабличнойЧасти.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПриКопировании()

// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(Основание)
	
	// Рестораны.
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Рестораны") Тогда
		Если Не Основание.ЭтоГруппа Тогда
			
			Ресторан = Основание;
			
		КонецЕсли;
	КонецЕсли;

	// Заполнение значений по умолчанию.
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), Новый Структура("Сотрудник"));
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Нормализация.
	ПодготовитьШапку(РежимЗаписи, РежимПроведения);
	ПодготовитьТабличнуюЧастьДокументыОснования(РежимЗаписи, РежимПроведения);
	
	Состояние = УправлениеЗаказами.ПолучитьСостояниеДокумента(ЭтотОбъект, РежимЗаписи);
	
	// Проверка заполнения реквизитов.
	мЗаголовок = Строка(РежимЗаписи) + " документа «" + СокрЛП(ЭтотОбъект) + "»: ";
	
	// Проверка заполнения реквизитов шапки.
	СтруктураОбязательныхПолей = Новый Структура;
	Если Распечатан Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаОкончанияПериода");
		СтруктураОбязательныхПолей.Вставить("Распечатан");
		СтруктураОбязательныхПолей.Вставить("Сотрудник");
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, мЗаголовок);

	// Проверка заполнения реквизитов табличных частей.
	
	// -- Документы основания.
	СтруктураОбязательныхПолей = Новый Структура;
	Если Распечатан Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаНачалаПериода");
		СтруктураОбязательныхПолей.Вставить("ДатаОкончанияПериода");
	КонецЕсли;
	
	ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Движения документа.
	ДвиженияПоРегистрамСостояний(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);

КонецПроцедуры // ПриЗаписи()

// Обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Движения документа.
	ДвиженияПоРегистрам(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Удаление движений документа.
	УдалениеДвиженияПоРегистрам(Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()
