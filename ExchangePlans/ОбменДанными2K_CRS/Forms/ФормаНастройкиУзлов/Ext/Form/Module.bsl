
Функция СоздатьГруппуКолонок(Имя, Тип, Родитель = Неопределено)

	ГруппаКолонок = Элементы.Добавить(Имя, Тип, Родитель); 
	
	Возврат ГруппаКолонок
	
КонецФункции // ()

&НаСервере
Функция СохранитьНастройкиПланаОбмена()

	ЗначениеДеревоНастроекОбъектов = ДанныеФормыВЗначение(ДеревоНастроекОбъектов, Тип("ДеревоЗначений"));
	
	Для каждого Узел Из УзлыОбмена Цикл
	
		НастройкаУзлаИзменена = Истина;
		
		Если Не НастройкаУзлаИзменена Тогда
			Продолжить;		
		КонецЕсли;
		
		ПриставкаУзла = "_Ресторан" + Узел.Значение.Код;
		
		ТЗ_НастройкиСвязейМеждуБазамиРС = Новый ТаблицаЗначений;
		ТЗ_НастройкиСвязейМеждуБазамиРС.Колонки.Добавить("ИдентификаторОбъектаНастройки", Новый ОписаниеТипов(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")));
		ТЗ_НастройкиСвязейМеждуБазамиРС.Колонки.Добавить("ИсточникДанных", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1));  
		
		Для каждого СтрокаДерева Из ЗначениеДеревоНастроекОбъектов.Строки Цикл
			
			Для каждого СтрокаНастройкиПоОбъекту Из СтрокаДерева.Строки Цикл
				
				СтрокаНастройки = ТЗ_НастройкиСвязейМеждуБазамиРС.Добавить();
				СтрокаНастройки.ИдентификаторОбъектаНастройки = СтрокаНастройкиПоОбъекту.ИдентификаторОбъектаНастройки;
				ИсточникДанных = 0;
				Для н = 1 по 3 Цикл
					Если СтрокаНастройкиПоОбъекту["ИсточникЗнач"+н+ПриставкаУзла] = Истина Тогда
						ИсточникДанных = н;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				СтрокаНастройки.ИсточникДанных = ИсточникДанных;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НастройкиСвязейМеждуБазамиРС", ТЗ_НастройкиСвязейМеждуБазамиРС);
		Запрос.УстановитьПараметр("Узел", Узел);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки,
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИсточникДанных
		|ПОМЕСТИТЬ ВЗ_ТекущиеНастройки
		|ИЗ
		|	&НастройкиСвязейМеждуБазамиРС КАК ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.Ссылка,
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.НомерСтроки КАК НомерСтроки,
		|	ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки,
		|	ВЗ_ТекущиеНастройки.ИсточникДанных КАК ИсточникДанных,
		|	ВЫБОР
		|		КОГДА ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИсточникДанных = ВЗ_ТекущиеНастройки.ИсточникДанных
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК БылоИзменение
		|ИЗ
		|	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВЗ_ТекущиеНастройки КАК ВЗ_ТекущиеНастройки
		|		ПО ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.ИдентификаторОбъектаНастройки = ВЗ_ТекущиеНастройки.ИдентификаторОбъектаНастройки
		|			И (ОбменДаннымиFrontOffice_RestoranНастройкиСвязейМеждуБазамиРС.Ссылка = &Узел)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КонецЦикла;

		
	КонецЦикла;
	

КонецФункции // СохранитьНастройкиПланаОбмена()

&НаСервере
Функция ПолучитьРезультатЗапросаПоСоставуОбмена(УзелОбмена, ИмяРодителя)

	СписокСоставаПоПолномуИмени = ОбменДаннымиПовтИсп.ПолучитьСписокОбъектовСоставаПланаОбмена("ОбменДанными2K_CRS", Ложь);
	
	СписокРодителей = Новый СписокЗначений;
	
	Если ПустаяСтрока(ИмяРодителя) Тогда
		СписокРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Справочники);
		СписокРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.РегистрыСведений);
		СписокРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.ПланыВидовХарактеристик);
	Иначе	
		СписокРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Документы);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСоставаПоПолномуИмени", СписокСоставаПоПолномуИмени);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.УстановитьПараметр("Родитель", СписокРодителей);
	Запрос.УстановитьПараметр("ТаблицаГрупп", ОбменДаннымиПовтИсп.ПолучитьТаблицуИерархииИдентификаторов());
	Запрос.УстановитьПараметр("СортировкаДерева", ПланыОбмена.ОбменДанными2K_CRS.ПолучитьТаблицуСортировкиДерева());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СортировкаДерева.ГруппаОбъекта,
		|	СортировкаДерева.Порядок
		|ПОМЕСТИТЬ СортировкаДерева
		|ИЗ
		|	&СортировкаДерева КАК СортировкаДерева
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаГрупп.ПолноеИмяОбъекта,
		|	ТаблицаГрупп.ГруппаОбъекта,
		|	ТаблицаГрупп.ДоступностьЛБР,
		|	ТаблицаГрупп.ДоступностьЦБР,
		|	ТаблицаГрупп.ДоступностьЛБК,
		|	ТаблицаГрупп.ДоступностьЦБК
		|ПОМЕСТИТЬ ТаблицаГрупп
		|ИЗ
		|	&ТаблицаГрупп КАК ТаблицаГрупп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаГрупп.ПолноеИмяОбъекта,
		|	ТаблицаГрупп.ГруппаОбъекта,
		|	ТаблицаГрупп.ДоступностьЛБР,
		|	ТаблицаГрупп.ДоступностьЦБР,
		|	ТаблицаГрупп.ДоступностьЛБК,
		|	ТаблицаГрупп.ДоступностьЦБК,
		|	СортировкаДерева.Порядок
		|ПОМЕСТИТЬ ТаблицаГруппСортировка
		|ИЗ
		|	ТаблицаГрупп КАК ТаблицаГрупп
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СортировкаДерева КАК СортировкаДерева
		|		ПО ТаблицаГрупп.ГруппаОбъекта = СортировкаДерева.ГруппаОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбменДанными.ИдентификаторОбъектаНастройки КАК ИдентификаторОбъектаНастройки,
		|	ОбменДанными.Ссылка КАК УзелОбмена,
		|	ОбменДанными.ИсточникДанныхОбъекта КАК ИсточникДанных,
		|	ОбменДанными.ВидЗначимостиОбъекта,
		|	ОбменДанными.ИдентификаторОбъектаНастройки.ПолноеИмя КАК ИдентификаторПолноеИмя
		|ПОМЕСТИТЬ ВТ_УзлыОбмена
		|ИЗ
		|	ПланОбмена.ОбменДанными2K_CRS.НастройкиСвязейМеждуБазамиРС КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.ИдентификаторОбъектаНастройки.Родитель В(&Родитель)
		|	И ОбменДанными.ИдентификаторОбъектаНастройки.ПолноеИмя В(&СписокСоставаПоПолномуИмени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка,
		|	ИдентификаторыОбъектовМетаданных.Родитель,
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя
		|ПОМЕСТИТЬ ИдентификаторыМД
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя В(&СписокСоставаПоПолномуИмени)
		|	И ИдентификаторыОбъектовМетаданных.Родитель В(&Родитель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыМД.Ссылка КАК Ссылка,
		|	ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки,
		|	ИдентификаторыМД.Родитель КАК Родитель,
		|	ВТ_УзлыОбмена.УзелОбмена КАК УзелОбмена,
		|	0 КАК ИсточникДанных,
		|	0 КАК ВидЗначимостиОбъекта,
		|	ВТ_УзлыОбмена.УзелОбмена.Код КАК УзелОбменаКод,
		|	ТаблицаГруппСортировка.ГруппаОбъекта КАК ГруппаОбъекта,
		|	ТаблицаГруппСортировка.Порядок КАК Порядок,
		|	ТаблицаГруппСортировка.ДоступностьЛБР,
		|	ТаблицаГруппСортировка.ДоступностьЦБР,
		|	ТаблицаГруппСортировка.ДоступностьЛБК,
		|	ТаблицаГруппСортировка.ДоступностьЦБК
		|ИЗ
		|	ИдентификаторыМД КАК ИдентификаторыМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УзлыОбмена КАК ВТ_УзлыОбмена
		|		ПО ИдентификаторыМД.Ссылка = ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГруппСортировка КАК ТаблицаГруппСортировка
		|		ПО ИдентификаторыМД.ПолноеИмя = ТаблицаГруппСортировка.ПолноеИмяОбъекта
		|ГДЕ
		|	ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки,
		|	NULL,
		|	ВТ_УзлыОбмена.ИдентификаторОбъектаНастройки.Родитель,
		|	ВТ_УзлыОбмена.УзелОбмена,
		|	ВТ_УзлыОбмена.ИсточникДанных,
		|	ВТ_УзлыОбмена.ВидЗначимостиОбъекта,
		|	ВТ_УзлыОбмена.УзелОбмена.Код,
		|	ТаблицаГруппСортировка.ГруппаОбъекта,
		|	ТаблицаГруппСортировка.Порядок,
		|	ТаблицаГруппСортировка.ДоступностьЛБР,
		|	ТаблицаГруппСортировка.ДоступностьЦБР,
		|	ТаблицаГруппСортировка.ДоступностьЛБК,
		|	ТаблицаГруппСортировка.ДоступностьЦБК
		|ИЗ
		|	ВТ_УзлыОбмена КАК ВТ_УзлыОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГруппСортировка КАК ТаблицаГруппСортировка
		|		ПО ВТ_УзлыОбмена.ИдентификаторПолноеИмя = ТаблицаГруппСортировка.ПолноеИмяОбъекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	УзелОбменаКод,
		|	Порядок,
		|	ГруппаОбъекта,
		|	Родитель УБЫВ,
		|	Ссылка
		|ИТОГИ ПО
		|	УзелОбмена,
		|	Порядок,
		|	ГруппаОбъекта КАК Родитель";

		Возврат Запрос.Выполнить();

КонецФункции // ПолучитьРезультатЗапросаПоСоставуОбмена()

&НаСервере
Процедура ИнициализацияДереваНастройкиСправочниковИДокументов()
	
	УзелОбмена = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	
	СоотвИсточников = Новый Соответствие;
	СоотвИсточников.Вставить(null, 0);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ПустаяСсылка(), 0);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота, 1);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии, 2);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана, 1);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаБухгалтерии, 2);
	СоотвИсточников.Вставить(Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы, 3);
	
	спТаблиц = Новый СписокЗначений;
	спТаблиц.Добавить("ДеревоНастроекДокументов", "Д");
	спТаблиц.Добавить("ДеревоНастроекСправочников", "С");
	
	СоотвСтрокРодителей = Новый Соответствие;
	СоотвСтрок = Новый Соответствие;
	
	ТипОбъектов = "";

	Результат = ПолучитьРезультатЗапросаПоСоставуОбмена(УзелОбмена, ТипОбъектов);
		
	ВыборкаУзелОбмена = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
	ЗначениеДеревоНастроекОбъектовРесторана = ДанныеФормыВЗначение(ДеревоНастроекСправочников, Тип("ДеревоЗначений"));
	
	ВыборкаУзелОбмена.Сбросить();
	
	Пока ВыборкаУзелОбмена.Следующий() Цикл
		
		ВыборкаПорядок = ВыборкаУзелОбмена.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПорядок.Следующий() Цикл
			
			Если ВыборкаПорядок.УзелОбмена = Null Тогда
				Продолжить;
			КонецЕсли;
			Если Не ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ВыборкаПорядок.УзелОбмена) Тогда
				Продолжить;
			КонецЕсли;
			
			ПриставкаУзла = "_Ресторан"+ВыборкаПорядок.УзелОбмена.Код;
			
			ВыборкаРодитель = ВыборкаПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЭтотУзел = УзелОбмена = ВыборкаПорядок.УзелОбмена;
			
			Пока ВыборкаРодитель.Следующий() Цикл
				
				НС_Родитель = СоотвСтрокРодителей.Получить(ВыборкаРодитель.ГруппаОбъекта);
				Если НС_Родитель = Неопределено Тогда
					НС_Родитель = ЗначениеДеревоНастроекОбъектовРесторана.Строки.Добавить();
					НС_Родитель.ИдентификаторОбъектаНастройки = ВыборкаРодитель.ГруппаОбъекта; 	
					НС_Родитель.Узел = ВыборкаПорядок.УзелОбмена; 	
					СоотвСтрокРодителей.Вставить(ВыборкаРодитель.ГруппаОбъекта, НС_Родитель);
				КонецЕсли;
				
				ВыборкаДетальныеЗаписи = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					НС = СоотвСтрокРодителей.Получить(ВыборкаДетальныеЗаписи.Ссылка);
					Если НС = Неопределено Тогда
						НС = НС_Родитель.Строки.Добавить();
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						СоотвСтрокРодителей.Вставить(ВыборкаДетальныеЗаписи.Ссылка, НС);
					КонецЕсли;
					Если ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ВыборкаПорядок.УзелОбмена) Тогда
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						НС.Узел = ВыборкаПорядок.УзелОбмена;
						Если ВыборкаДетальныеЗаписи.ИсточникДанных = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии Тогда
							НС["ИсточникЗнач2"] = Истина;
							НС["ИсточникЗнач3"] = Истина;
						Иначе
							ИсточникДанных = СоотвИсточников.Получить(ВыборкаДетальныеЗаписи.ИсточникДанных);
							Если ИсточникДанных <= 0 Тогда
								ИсточникДанных = 3;
							КонецЕсли; 	
							
							НС["ИсточникЗнач"+ИсточникДанных] = Истина;
						КонецЕсли;
					КонецЕсли;
					
					НС.ДоступностьЛБР = ВыборкаДетальныеЗаписи.ДоступностьЛБР; 
					НС.ДоступностьЦБР = ВыборкаДетальныеЗаписи.ДоступностьЦБР; 
					НС.ДоступностьЛБК = ВыборкаДетальныеЗаписи.ДоступностьЛБК; 
					НС.ДоступностьЦБК = ВыборкаДетальныеЗаписи.ДоступностьЦБК; 
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПриставкаУзла = "";
	
	мПриставокУзла = Новый Массив;
	мПриставокУзла.Добавить("");
	мПриставокУзла.Добавить("ДляНового");
	
	Для каждого ПриставкаУзла Из мПриставокУзла Цикл
		
		Для каждого СтрокаРодитель Из ЗначениеДеревоНастроекОбъектовРесторана.Строки Цикл
			
			Дочерние = СтрокаРодитель.Строки;
			Для н = 1 По 3 Цикл
				
				ТекЗначение = Дочерние[0]["ИсточникЗнач"+ПриставкаУзла+н];
				с = 0;
				ЗначениеМеняется = Ложь;
				
				ЕстьДоступностьЛБР = Ложь;
				ЕстьДоступностьЦБР = Ложь;
				ЕстьДоступностьЛБК = Ложь;
				ЕстьДоступностьЦБК = Ложь;
				
				Пока с < Дочерние.Количество() Цикл
					дСтрока = Дочерние[с];
					Если ТекЗначение <> дСтрока["ИсточникЗнач"+ПриставкаУзла+н] Тогда
						ЗначениеМеняется = Истина
					КонецЕсли; 
					Если дСтрока["ДоступностьЛБР"] Тогда
						ЕстьДоступностьЛБР = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБР"] Тогда
						ЕстьДоступностьЦБР = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЛБК"] Тогда
						ЕстьДоступностьЛБК = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБК"] Тогда
						ЕстьДоступностьЦБК = Истина
					КонецЕсли;
					с = с + 1;
				КонецЦикла;
				Если ЗначениеМеняется Тогда
					СтрокаРодитель["ИсточникЗнач"+ПриставкаУзла+н] = 2;	
				Иначе
					СтрокаРодитель["ИсточникЗнач"+ПриставкаУзла+н] = Дочерние[0]["ИсточникЗнач"+ПриставкаУзла+н];	
				КонецЕсли;	
				
				Если ЕстьДоступностьЛБР Тогда
					СтрокаРодитель["ДоступностьЛБР"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЦБР Тогда
					СтрокаРодитель["ДоступностьЦБР"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЛБК Тогда
					СтрокаРодитель["ДоступностьЛБК"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЦБК Тогда
					СтрокаРодитель["ДоступностьЦБК"] = Истина
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;

	//Для каждого СтрокаРодитель Из ЗначениеДеревоНастроекОбъектовРесторана.Строки Цикл
	//	
	//	Дочерние = СтрокаРодитель.Строки;
	//	Для н = 1 По 3 Цикл
	//		
	//		ТекЗначение = Дочерние[0]["ИсточникЗнач"+н+ПриставкаУзла];
	//		с = 0;
	//		ЗначениеМеняется = Ложь;
	//		Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
	//			дСтрока = Дочерние[с];
	//			ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+н+ПриставкаУзла];
	//			с = с + 1;
	//		КонецЦикла;
	//		Если ЗначениеМеняется Тогда
	//			СтрокаРодитель["ИсточникЗнач"+н+ПриставкаУзла] = 2;	
	//		Иначе
	//			СтрокаРодитель["ИсточникЗнач"+н+ПриставкаУзла] = Дочерние[0]["ИсточникЗнач"+н+ПриставкаУзла];	
	//		КонецЕсли;	
	//		
	//	КонецЦикла;	
	//	
	//КонецЦикла;
	
	ЗначениеВДанныеФормы(ЗначениеДеревоНастроекОбъектовРесторана, Этаформа.ДеревоНастроекСправочников); 
	
	Для каждого СтрДерева Из ДеревоНастроекСправочников.ПолучитьЭлементы() Цикл
		
		Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
			
			Если СтрИдентификатор["ИсточникЗнач1"] Тогда
				новСтр = ЗагружаютсяИЗ_ЛБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач2"] Тогда
				новСтр = ЗагружаютсяИЗ_БК.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач3"] 
				Или Не (СтрИдентификатор["ИсточникЗнач3"] Или СтрИдентификатор["ИсточникЗнач2"] Или СтрИдентификатор["ИсточникЗнач1"]) Тогда
				новСтр = ЗагружаютсяИЗ_ЦБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;

	ТипОбъектов = "Документы";

	Результат = ПолучитьРезультатЗапросаПоСоставуОбмена(УзелОбмена, ТипОбъектов);
	
	ВыборкаУзелОбмена = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗначениеДеревоНастроекОбъектовРесторана = ДанныеФормыВЗначение(ДеревоНастроекДокументов, Тип("ДеревоЗначений"));
	
	Пока ВыборкаУзелОбмена.Следующий() Цикл
		
		ВыборкаПорядок = ВыборкаУзелОбмена.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПорядок.Следующий() Цикл
			
			Если ВыборкаПорядок.УзелОбмена = Null Тогда
				Продолжить;
			КонецЕсли;
			Если Не ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ВыборкаПорядок.УзелОбмена) Тогда
				Продолжить;
			КонецЕсли;
					
			ПриставкаУзла = "_Ресторан"+ВыборкаПорядок.УзелОбмена.Код;
			
			ВыборкаРодитель = ВыборкаПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЭтотУзел = УзелОбмена = ВыборкаПорядок.УзелОбмена;
			
			Пока ВыборкаРодитель.Следующий() Цикл
				
				НС_Родитель = СоотвСтрокРодителей.Получить(ВыборкаРодитель.ГруппаОбъекта);
				Если НС_Родитель = Неопределено Тогда
					НС_Родитель = ЗначениеДеревоНастроекОбъектовРесторана.Строки.Добавить();
					НС_Родитель.ИдентификаторОбъектаНастройки = ВыборкаРодитель.ГруппаОбъекта; 	
					НС_Родитель.Узел = ВыборкаПорядок.УзелОбмена; 	
					СоотвСтрокРодителей.Вставить(ВыборкаРодитель.ГруппаОбъекта, НС_Родитель);
				КонецЕсли;
				
				ВыборкаДетальныеЗаписи = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					НС = СоотвСтрокРодителей.Получить(ВыборкаДетальныеЗаписи.Ссылка);
					Если НС = Неопределено Тогда
						НС = НС_Родитель.Строки.Добавить();
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						СоотвСтрокРодителей.Вставить(ВыборкаДетальныеЗаписи.Ссылка, НС);
					КонецЕсли;
					Если ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ВыборкаПорядок.УзелОбмена) Тогда
						НС.ИдентификаторОбъектаНастройки = ВыборкаДетальныеЗаписи.Ссылка;
						НС.Узел = ВыборкаПорядок.УзелОбмена;
						Если ВыборкаДетальныеЗаписи.ИсточникДанных = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии Тогда
							НС["ИсточникЗнач2"] = Истина;
							НС["ИсточникЗнач3"] = Истина;
						Иначе
							ИсточникДанных = СоотвИсточников.Получить(ВыборкаДетальныеЗаписи.ИсточникДанных);
							Если ИсточникДанных <= 0 Тогда
								ИсточникДанных = 3;
							КонецЕсли; 	
							
							НС["ИсточникЗнач"+ИсточникДанных] = Истина;
						КонецЕсли;
					КонецЕсли;
					
					НС.ДоступностьЛБР = ВыборкаДетальныеЗаписи.ДоступностьЛБР; 
					НС.ДоступностьЦБР = ВыборкаДетальныеЗаписи.ДоступностьЦБР; 
					НС.ДоступностьЛБК = ВыборкаДетальныеЗаписи.ДоступностьЛБК; 
					НС.ДоступностьЦБК = ВыборкаДетальныеЗаписи.ДоступностьЦБК; 
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПриставкаУзла = "";
	
	//Для каждого СтрокаРодитель Из ЗначениеДеревоНастроекОбъектовРесторана.Строки Цикл
	//	
	//	Дочерние = СтрокаРодитель.Строки;
	//	Для н = 1 По 3 Цикл
	//		
	//		ТекЗначение = Дочерние[0]["ИсточникЗнач"+н+ПриставкаУзла];
	//		с = 0;
	//		ЗначениеМеняется = Ложь;
	//		Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
	//			дСтрока = Дочерние[с];
	//			ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+н+ПриставкаУзла];
	//			с = с + 1;
	//		КонецЦикла;
	//		Если ЗначениеМеняется Тогда
	//			СтрокаРодитель["ИсточникЗнач"+н+ПриставкаУзла] = 2;	
	//		Иначе
	//			СтрокаРодитель["ИсточникЗнач"+н+ПриставкаУзла] = Дочерние[0]["ИсточникЗнач"+н+ПриставкаУзла];	
	//		КонецЕсли;	
	//		
	//	КонецЦикла;	
	//	
	//КонецЦикла;
	//
	Для каждого ПриставкаУзла Из мПриставокУзла Цикл
		
		Для каждого СтрокаРодитель Из ЗначениеДеревоНастроекОбъектовРесторана.Строки Цикл
			
			Дочерние = СтрокаРодитель.Строки;
			Для н = 1 По 3 Цикл
				
				ТекЗначение = Дочерние[0]["ИсточникЗнач"+ПриставкаУзла+н];
				с = 0;
				ЗначениеМеняется = Ложь;
				
				ЕстьДоступностьЛБР = Ложь;
				ЕстьДоступностьЦБР = Ложь;
				ЕстьДоступностьЛБК = Ложь;
				ЕстьДоступностьЦБК = Ложь;
				
				Пока с < Дочерние.Количество() Цикл
					дСтрока = Дочерние[с];
					Если ТекЗначение <> дСтрока["ИсточникЗнач"+ПриставкаУзла+н] Тогда
						ЗначениеМеняется = Истина
					КонецЕсли; 
					Если дСтрока["ДоступностьЛБР"] Тогда
						ЕстьДоступностьЛБР = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБР"] Тогда
						ЕстьДоступностьЦБР = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЛБК"] Тогда
						ЕстьДоступностьЛБК = Истина
					КонецЕсли;
					Если дСтрока["ДоступностьЦБК"] Тогда
						ЕстьДоступностьЦБК = Истина
					КонецЕсли;
					с = с + 1;
				КонецЦикла;
				Если ЗначениеМеняется Тогда
					СтрокаРодитель["ИсточникЗнач"+ПриставкаУзла+н] = 2;	
				Иначе
					СтрокаРодитель["ИсточникЗнач"+ПриставкаУзла+н] = Дочерние[0]["ИсточникЗнач"+ПриставкаУзла+н];	
				КонецЕсли;	
				
				Если ЕстьДоступностьЛБР Тогда
					СтрокаРодитель["ДоступностьЛБР"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЦБР Тогда
					СтрокаРодитель["ДоступностьЦБР"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЛБК Тогда
					СтрокаРодитель["ДоступностьЛБК"] = Истина
				КонецЕсли;
				
				Если ЕстьДоступностьЦБК Тогда
					СтрокаРодитель["ДоступностьЦБК"] = Истина
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;

	ЗначениеВДанныеФормы(ЗначениеДеревоНастроекОбъектовРесторана, Этаформа.ДеревоНастроекДокументов); 
	
	Для каждого СтрДерева Из ДеревоНастроекДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
			
			Если СтрИдентификатор["ИсточникЗнач1"] Тогда
				новСтр = ЗагружаютсяВ_ЛБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач2"] Тогда
				новСтр = ЗагружаютсяВ_БК.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач3"]  Тогда
				новСтр = ЗагружаютсяВ_ЦБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;

	ЗагружаютсяИЗ_ЛБР.Очистить();
	ЗагружаютсяИЗ_БК.Очистить();
	ЗагружаютсяИЗ_ЦБР.Очистить();
	ЗагружаютсяВ_ЛБР.Очистить();
	ЗагружаютсяВ_БК.Очистить();
	ЗагружаютсяВ_ЦБР.Очистить();
	
	ПриставкаДляНового = ?(ЭтоНастройкаНовогоУзла, "ДляНового", "");
	Приставка = "";
	
	Для каждого СтрДерева Из ДеревоНастроекСправочников.ПолучитьЭлементы() Цикл
		
		Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
			
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"1"] Тогда
				новСтр = ЗагружаютсяИЗ_ЛБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"2"] Тогда
				новСтр = ЗагружаютсяИЗ_БК.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"3"] 
				Или Не (СтрИдентификатор["ИсточникЗнач"+Приставка+"3"] Или СтрИдентификатор["ИсточникЗнач"+Приставка+"2"] Или СтрИдентификатор["ИсточникЗнач"+Приставка+"1"]) Тогда
				новСтр = ЗагружаютсяИЗ_ЦБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Для каждого СтрДерева Из ДеревоНастроекДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
			
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"1"] Тогда
				новСтр = ЗагружаютсяВ_ЛБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"2"] Тогда
				новСтр = ЗагружаютсяВ_БК.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"3"]  Тогда
				новСтр = ЗагружаютсяВ_ЦБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РолевоеЗначениеЭтогоУзла = 3;
	
	ОбменДаннымиСервер.ФормаНастройкиУзловПриСозданииНаСервере(ЭтаФорма, Отказ);
	
	ЭтоНастройкаНовогоУзла = ЭтаФорма.Параметры.Свойство("Настройки");
	
	
	ИнициализацияДереваНастройкиСправочниковИДокументов();
		
	ПолучитьОписаниеКонтекста();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыбратьСтраницуНастроекВСоответствииСРольюБазы()
КонецПроцедуры

&НаКлиенте
Процедура РолевоеЗначениеЭтогоУзлаПриИзменении(Элемент)
	ВыбратьСтраницуНастроекВСоответствииСРольюБазы()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтраницуНастроекВСоответствииСРольюБазы()

	Если ЭтоНастройкаНовогоУзла Тогда
		Элементы.СтраницыРолейЗначенияЭтогоУзла.ТекущаяСтраница= Элементы.ЭтоНастройкаНовогоУзла;
		Возврат
	КонецЕсли;

	Если РолевоеЗначениеЭтогоУзла = 3 Тогда
	    Элементы.СтраницыРолейЗначенияЭтогоУзла.ТекущаяСтраница= Элементы.ЭтаБазаЦентральная;
	ИначеЕсли РолевоеЗначениеЭтогоУзла = 2 Тогда
	    Элементы.СтраницыРолейЗначенияЭтогоУзла.ТекущаяСтраница= Элементы.ЭтаБазаПериферийная;
	Иначе	
	    Элементы.СтраницыРолейЗначенияЭтогоУзла.ТекущаяСтраница= Элементы.ЭтаБазаАвтономная;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
	//проверка доступности колонок
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	ОтключатьДоступность = Не ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	//ТекГруппаРесторан = Элементы.ДеревоСправочников.ПодчиненныеЭлементы.ДеревоНастроекСправочников.ТекущийЭлемент. Элемент.ТекущиеДанные.ПолучитьРодителя() 
		
	Для каждого ГруппаРесторан Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ГруппаРесторан) <> Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;
		//Если Элемент.Имя = "ДеревоНастроекСправочников" Тогда
		//	Если Элемент.ПодчиненныеЭлементы.ДеревоЗначенийСпрГруппаНовый = ГруппаРесторан
		//		Или ТипЗнч(ГруппаРесторан) <> Тип("ГруппаФормы") Тогда
		//		Продолжить;
		//	КонецЕсли;
		//Иначе
		//	Если Элемент.ПодчиненныеЭлементы.ДеревоЗначенийДокГруппаНовый = ГруппаРесторан
		//		Или ТипЗнч(ГруппаРесторан) <> Тип("ГруппаФормы") Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		Для каждого Колонка Из ГруппаРесторан.ПодчиненныеЭлементы Цикл
			
			Ин = Найти(Колонка.Имя, "ИсточникЗнач");
			Если Ин = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтключатьДоступность Тогда
				
				ЭтоКолонкаЦРС = Колонка.Родитель.Имя = "ДеревоЗначенийСпрЦРС" Или Колонка.Родитель.Имя = "ДеревоЗначенийДокЦРС";
				ЭтоКолонкаДляНового = Найти(Колонка.Имя, "ДляНового") > 0;
				ТекИндекс = Число(Прав(Сред(Колонка.Имя, Найти(Колонка.Имя, "ИсточникЗнач"), Стрдлина("ИсточникЗнач") + 1 + ?(ЭтоКолонкаДляНового, СтрДлина("ДляНового"), 0)), 1));
				
				Если ТекИндекс = 1 Тогда
					ДоступностьКолонки = ТекущиеДанные.ДоступностьЛБР	
				КонецЕсли;
				
				Если ТекИндекс = 3 Тогда
					ДоступностьКолонки = ТекущиеДанные.ДоступностьЦБР	
				КонецЕсли;
				
				Если ТекИндекс = 2 И Не ЭтоКолонкаЦРС Тогда
					ДоступностьКолонки = ТекущиеДанные.ДоступностьЛБК	
				КонецЕсли;
				
				Если ТекИндекс = 2 И ЭтоКолонкаЦРС Тогда
					ДоступностьКолонки = ТекущиеДанные.ДоступностьЦБК	
				КонецЕсли;
				
				Колонка.Доступность = ДоступностьКолонки	
				
			Иначе
				Колонка.Доступность = Истина	
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийЭтоЦБПриАктивизацииСтроки(Элемент)
	
	ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекДокументовПриАктивизацииСтроки(Элемент)
	
	//ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекСправочниковПриАктивизацииСтроки(Элемент)
	
	//ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийЭтоЦБПередРазворачиванием(Элемент, Строка, Отказ)
	
	//Элементы.ДеревоЗначенийЭтоЦБ.ТекущаяСтрока = Строка;
	//
	//НомерРесторана = 0;
	//
	//ЭлРестораны = Элементы.ГруппаРестораны.ПодчиненныеЭлементы;
	//
	//Для каждого ЭлРесторан Из ЭлРестораны Цикл
	//
	//	Если Не (ЭлРесторан.Видимость И ТипЗнч(ЭлРесторан) = Тип("ТаблицаФормы"))  Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	
	//	НомерРесторана = НомерРесторана + 1;
	//	
	//	ИдСтроки = Строка + КоличествоСтрокОбъектов*НомерРесторана;
	//
	//	ЭлРесторан.ТекущаяСтрока = ИдСтроки;	
	//	ЭлРесторан.Развернуть(ИдСтроки);

	//КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗначенийЭтоЦБПередСворачиванием(Элемент, Строка, Отказ)
	
	//Элементы.ДеревоЗначенийЭтоЦБ.ТекущаяСтрока = Строка;
	//
	//НомерРесторана = 0;
	//
	//ЭлРестораны = Элементы.ГруппаРестораны.ПодчиненныеЭлементы;
	//
	//Для каждого ЭлРесторан Из ЭлРестораны Цикл
	//
	//	Если Не (ЭлРесторан.Видимость И ТипЗнч(ЭлРесторан) = Тип("ТаблицаФормы"))  Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	
	//	НомерРесторана = НомерРесторана + 1;
	//	
	//	ИдСтроки = Строка + КоличествоСтрокОбъектов*НомерРесторана;
	//
	//	ЭлРесторан.ТекущаяСтрока = ИдСтроки;	
	//	ЭлРесторан.Свернуть(ИдСтроки);

	//КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьПериферийнуюБазу(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьБазуОтСети(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГалочкойАвтоновнаяБаза(ТД, ТекИндекс)

	Если Не ТД["ИсточникЗнач"+ТекИндекс] = Истина Тогда
		ТД["ИсточникЗнач"+ТекИндекс] = Истина
	КонецЕсли;
	Для н = 1 По 3 Цикл
		Если ТекИндекс = н Тогда
		    Продолжить;
		КонецЕсли;
		ТД["ИсточникЗнач"+н] = Ложь;	
	КонецЦикла;
	
	Родитель = ТД.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
	    //Заполнить все подчиненные
		Дочерние = ТД.ПолучитьЭлементы();
		Для каждого дСтрока Из Дочерние Цикл
			Для н = 1 По 3 Цикл
				дСтрока["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
			КонецЦикла;
		КонецЦикла;
	Иначе
		//Отразим в родителе
		Дочерние = Родитель.ПолучитьЭлементы();
		Для н = 1 По 3 Цикл
			ТекЗначение = ТД["ИсточникЗнач"+н];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+н];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				Родитель["ИсточникЗнач"+н] = 2;	
			Иначе
				Родитель["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГалочкойНастройкаНового(ТД, ТекИндекс, ПриставкаНов = "")

	Если Не ЭтоНастройкаНовогоУзла Тогда
		Возврат
	КонецЕсли;
	
	Если Не ТД["ИсточникЗнач"+ПриставкаНов+ТекИндекс] = Истина Тогда
		ТД["ИсточникЗнач"+ПриставкаНов+ТекИндекс] = Истина
	КонецЕсли;
	Для н = 1 По 3 Цикл
		Если ТекИндекс = н Тогда
		    Продолжить;
		КонецЕсли;
		ТД["ИсточникЗнач"+ПриставкаНов+н] = Ложь;	
	КонецЦикла;
	
	Родитель = ТД.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
	    //Заполнить все подчиненные
		Дочерние = ТД.ПолучитьЭлементы();
		Для каждого дСтрока Из Дочерние Цикл
			Для н = 1 По 3 Цикл
				дСтрока["ИсточникЗнач"+ПриставкаНов+н] = ТД["ИсточникЗнач"+ПриставкаНов+н];	
			КонецЦикла;
		КонецЦикла;
	Иначе
		//Отразим в родителе
		Дочерние = Родитель.ПолучитьЭлементы();
		Для н = 1 По 3 Цикл
			ТекЗначение = ТД["ИсточникЗнач"+ПриставкаНов+н];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+ПриставкаНов+н];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				Родитель["ИсточникЗнач"+ПриставкаНов+н] = 2;	
			Иначе
				Родитель["ИсточникЗнач"+ПриставкаНов+н] = ТД["ИсточникЗнач"+ПриставкаНов+н];	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач1ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоЦБ.ТекущиеДанные;
	ТекИндекс = 1;
	ОбработкаВыбораГалочкой(ТД, ТекИндекс)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач3ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоЦБ.ТекущиеДанные;
	ТекИндекс = 3;
	ОбработкаВыбораГалочкой(ТД, ТекИндекс)
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач2ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоЦБ.ТекущиеДанные;
	ТекИндекс = 2;
	ОбработкаВыбораГалочкой(ТД, ТекИндекс)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач4ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоЦБ.ТекущиеДанные;
	ТекИндекс = 1;
	ОбработкаВыбораГалочкойАвтоновнаяБаза(ТД, ТекИндекс)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач5ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоЦБ.ТекущиеДанные;
	ТекИндекс = 2;
	ОбработкаВыбораГалочкойАвтоновнаяБаза(ТД, ТекИндекс)
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач6ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоЦБ.ТекущиеДанные;
	ТекИндекс = 3;
	ОбработкаВыбораГалочкойАвтоновнаяБаза(ТД, ТекИндекс)
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеКонтекста()
	// дата начала выгрузки документов
	Если Ложь Тогда //И ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) Тогда
		//ДатаНачалаВыгрузкиДокументовОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//	НСтр("ru = 'Данные будут синхронизироваться, начиная с %1'"),
		//	Формат(ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
	Иначе
		ДатаНачалаВыгрузкиДокументовОписание = НСтр("ru = 'Данные будут синхронизироваться за весь период ведения учета'");
	КонецЕсли;
	
	ДеревоОписание = "";
	
	Если ЗагружаютсяИЗ_ЦБР.Количество() > 0 Тогда
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'Из центральной базы загружаются:'") + Символы.ПС+Символы.Таб + ИспользуемыеЭлементы("ЦБР")
	Иначе
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'Из центральной базы ничего не загружается.'")
	КонецЕсли;
	
	Если ЗагружаютсяИЗ_ЛБР.Количество() > 0 Тогда
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'Из периферийной базы ресторана загружаются:'") + Символы.ПС+Символы.Таб + ИспользуемыеЭлементы("ЛБР")
	Иначе
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'Из периферийной базы ресторана ничего не загружается.'")
	КонецЕсли;
	
	Если ЗагружаютсяИЗ_БК.Количество() > 0 Тогда
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'Из бухгалтерии загружаются:'") + Символы.ПС+Символы.Таб + ИспользуемыеЭлементы("БК")
	Иначе
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'Из бухгалтерии ничего не загружается.'")
	КонецЕсли;
	
	Если ЗагружаютсяВ_ЦБР.Количество() > 0 Тогда
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'В центральную базу выгружаются:'") + Символы.ПС+Символы.Таб + ИспользуемыеЭлементы("ЦБР")
	Иначе
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'В центральную базу ничего не выгружается.'")
	КонецЕсли;
	
	Если ЗагружаютсяВ_ЛБР.Количество() > 0 Тогда
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'В базе ведется автономно:'") + Символы.ПС+Символы.Таб + ИспользуемыеЭлементы("ЛБР")
	Иначе
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'В базе ничего не ведется автономно.'")
	КонецЕсли;
	
	Если ЗагружаютсяВ_БК.Количество() > 0 Тогда
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'В бухгалтерию выгружаются:'") + Символы.ПС+Символы.Таб + ИспользуемыеЭлементы("БК")
	Иначе
		ДеревоОписание = ДеревоОписание + Символы.ПС + НСтр("ru = 'В бухгалтерию ничего не выгружается.'")
	КонецЕсли;
	
	ОписаниеКонтекста = (""
		+ ДатаНачалаВыгрузкиДокументовОписание
		+ Символы.ПС
		+ ДеревоОписание);
		
КонецПроцедуры

&НаСервере
Функция ИспользуемыеЭлементы(ТипБазы)
	
	Значение = ДанныеФормыВЗначение(ЭтаФорма["ЗагружаютсяИЗ_"+ТипБазы], Тип("ТаблицаЗначений"));
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(
			Значение.ВыгрузитьКолонку("Представление"),
			Символы.ПС+Символы.Таб);
	
КонецФункции
		
&НаКлиенте
Процедура ЗаписатьВУзелЦБ(Команда)
	
	ЗаписатьВУзелЦБнаСервере();
	
	ПолучитьОписаниеКонтекста();
	
	ОбменДаннымиКлиент.ФормаНастройкиУзловКомандаЗакрытьФорму(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьВУзелЦБнаСервере()

	УзелЦБ = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	Если Не ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(УзелЦБ) Тогда
		Возврат
	КонецЕсли;
	
	ЗагружаютсяИЗ_ЛБР.Очистить();
	ЗагружаютсяИЗ_БК.Очистить();
	ЗагружаютсяИЗ_ЦБР.Очистить();
	ЗагружаютсяВ_ЛБР.Очистить();
	ЗагружаютсяВ_БК.Очистить();
	ЗагружаютсяВ_ЦБР.Очистить();
	
	УзелЦБОбъект = УзелЦБ.ПолучитьОбъект();
	НастройкиСвязейМеждуБазамиРС = УзелЦБОбъект.НастройкиСвязейМеждуБазамиРС;
	НастройкиСвязейМеждуБазамиРС.Очистить();
	
	Приставка = "";
	ПриставкаДляНового = ?(ЭтоНастройкаНовогоУзла, "ДляНового", "");
	
	ЭтоНастройкиЦБ = Истина;
	
	Для каждого СтрДерева Из ДеревоНастроекСправочников.ПолучитьЭлементы() Цикл
		
		Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
			
			НСтр = НастройкиСвязейМеждуБазамиРС.Добавить();	
			НСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
			
			Если СтрИдентификатор["ИсточникЗнач"+Приставка+"2"] И СтрИдентификатор["ИсточникЗнач"+Приставка+"3"] Тогда
				НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии
			ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"1"] Тогда
				НСтр.ИсточникДанныхОбъекта = ?(ЭтоНастройкиЦБ, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана, Перечисления.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота)
			ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"2"] Тогда
				НСтр.ИсточникДанныхОбъекта = ?(ЭтоНастройкиЦБ, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаБухгалтерии, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии)
			ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"3"] Тогда
				НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы
			Иначе
				НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы
			КонецЕсли;
			 
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"1"] Тогда
				новСтр = ЗагружаютсяИЗ_ЛБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"2"] Тогда
				новСтр = ЗагружаютсяИЗ_БК.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"3"] 
				Или Не (СтрИдентификатор["ИсточникЗнач"+Приставка+"3"] Или СтрИдентификатор["ИсточникЗнач"+Приставка+"2"] Или СтрИдентификатор["ИсточникЗнач"+Приставка+"1"]) Тогда
				новСтр = ЗагружаютсяИЗ_ЦБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Для каждого СтрДерева Из ДеревоНастроекДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого СтрИдентификатор Из СтрДерева.ПолучитьЭлементы() Цикл
			
			НСтр = НастройкиСвязейМеждуБазамиРС.Добавить();	
			НСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
			
			Если СтрИдентификатор["ИсточникЗнач"+Приставка+"2"] И СтрИдентификатор["ИсточникЗнач"+Приставка+"3"] Тогда
				НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральныеБазыРестораннойСистемыИБухгалтерии
			ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"1"] Тогда
				НСтр.ИсточникДанныхОбъекта = ?(ЭтоНастройкиЦБ, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаРесторана, Перечисления.ВидыБазИсточниковПриОбменеЦРС.АвтономнаяРабота)
			ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"2"] Тогда
				НСтр.ИсточникДанныхОбъекта = ?(ЭтоНастройкиЦБ, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаБухгалтерии, Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЛокальнаяБазаБухгалтерии)
			ИначеЕсли СтрИдентификатор["ИсточникЗнач"+Приставка+"3"] Тогда
				НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы
			Иначе
				НСтр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС.ЦентральнаяБазаРестораннойСистемы
			КонецЕсли;
			 
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"1"] Тогда
				новСтр = ЗагружаютсяВ_ЛБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"2"] Тогда
				новСтр = ЗагружаютсяВ_БК.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			Если СтрИдентификатор["ИсточникЗнач"+ПриставкаДляНового+"3"]  Тогда
				новСтр = ЗагружаютсяВ_ЦБР.Добавить();
				новСтр.ИдентификаторОбъектаНастройки = СтрИдентификатор.ИдентификаторОбъектаНастройки;
				новСтр.Представление = Строка(СтрИдентификатор.ИдентификаторОбъектаНастройки);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Попытка
	
		УзелЦБОбъект.Записать();
	
	Исключение
		ВызватьИсключение ОписаниеОшибки()
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗначенийЭтоЦБИсточникЗнач4ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоННУ.ТекущиеДанные;
	ТекИндекс = 1;
	ОбработкаВыбораГалочкойНастройкаНового(ТД, ТекИндекс, "ДляНового")
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийЭтоЦБИсточникЗнач5ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоННУ.ТекущиеДанные;
	ТекИндекс = 3;
	ОбработкаВыбораГалочкойНастройкаНового(ТД, ТекИндекс, "ДляНового")
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийЭтоЦБИсточникЗнач6ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоННУ.ТекущиеДанные;
	ТекИндекс = 2;
	ОбработкаВыбораГалочкойНастройкаНового(ТД, ТекИндекс, "ДляНового")
КонецПроцедуры



&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач13ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоННУ.ТекущиеДанные;
	ТекИндекс = 1;
	ОбработкаВыбораГалочкойНастройкаНового(ТД, ТекИндекс)
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач14ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоННУ.ТекущиеДанные;
	ТекИндекс = 3;
	ОбработкаВыбораГалочкойНастройкаНового(ТД, ТекИндекс)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийИсточникЗнач15ПриИзменении(Элемент)
	ТД = Элементы.ДеревоЗначенийЭтоННУ.ТекущиеДанные;
	ТекИндекс = 2;
	ОбработкаВыбораГалочкойНастройкаНового(ТД, ТекИндекс)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийИсточникЗначПриИзменении(Элемент)
	
	ДеревоЗначений = Элемент.Родитель.Родитель;
	ТД = ДеревоЗначений.ТекущиеДанные;
	ЭлементИмя = Элемент.Имя;
	Приставка = ?(Найти(ЭлементИмя, "ИсточникЗнач") = 1, "", Лев(ЭлементИмя, 1));
	Суффикс = ?(Найти(ЭлементИмя, "_") = 0, "", Сред(ЭлементИмя, Найти(ЭлементИмя, "_")));
	СуффиксДляНового = ?(Найти(ЭлементИмя, "ДляНового") = 0, "", "ДляНового");
				
	ТекИндекс = Число(Прав(Сред(Элемент.Имя, Найти(Элемент.Имя, "ИсточникЗнач"), Стрдлина("ИсточникЗнач"+СуффиксДляНового) + 1), 1));
	
	Если Элемент.Родитель.Родитель.Имя = "ДеревоНастроекДокументов" Тогда
		ОбработкаВыбораГалочкойДокументы(ТД, ТекИндекс, Приставка, Суффикс, СуффиксДляНового)
	Иначе
		ОбработкаВыбораГалочкой(ТД, ТекИндекс, Приставка, Суффикс, СуффиксДляНового)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГалочкойДокументы(ТД, ТекИндекс, Приставка, Суффикс, СуффиксДляНового)

	Если ТекИндекс = 1 Тогда
		Если Не ТД["ИсточникЗнач"+СуффиксДляНового+ТекИндекс+Суффикс] = Истина Тогда
			ТД["ИсточникЗнач"+СуффиксДляНового+ТекИндекс+Суффикс] = Истина
		КонецЕсли;
		Для н = 1 По 3 Цикл
			Если ТекИндекс = н Тогда
				Продолжить;
			КонецЕсли;
			ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = Ложь;	
		КонецЦикла;
	Иначе
		Если Не ТД["ИсточникЗнач"+СуффиксДляНового+ТекИндекс+Суффикс] = 1 Тогда
			ТД["ИсточникЗнач"+СуффиксДляНового+ТекИндекс+Суффикс] = 0
		КонецЕсли;
		Если ТД["ИсточникЗнач"+СуффиксДляНового+"2"+Суффикс] = Ложь И ТД["ИсточникЗнач"+СуффиксДляНового+"3"+Суффикс] = Ложь Тогда
			ТД["ИсточникЗнач"+СуффиксДляНового+"1"+Суффикс] = Истина
		Иначе
			ТД["ИсточникЗнач"+СуффиксДляНового+"1"+Суффикс] = Ложь
		КонецЕсли;
		
	КонецЕсли;
			
	Родитель = ТД.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		
		//Заполнить все подчиненные
		Дочерние = ТД.ПолучитьЭлементы();
		Для каждого дСтрока Из Дочерние Цикл
			
			ЭтоКолонкаЦРС = ПустаяСтрока(Суффикс);
			
			Если ТекИндекс = 1 Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЛБР	
			ИначеЕсли ТекИндекс = 3 Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЦБР	
			ИначеЕсли ТекИндекс = 2 И Не ЭтоКолонкаЦРС Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЛБК	
			ИначеЕсли ТекИндекс = 2 И ЭтоКолонкаЦРС Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЦБК	
			КонецЕсли;
			
			Если ДоступностьКолонки Тогда
				Если ТекИндекс = 1 Тогда
					дСтрока["ИсточникЗнач"+СуффиксДляНового+"2"+Суффикс] = ТД["ИсточникЗнач"+СуффиксДляНового+"2"+Суффикс];	
					дСтрока["ИсточникЗнач"+СуффиксДляНового+"3"+Суффикс] = ТД["ИсточникЗнач"+СуффиксДляНового+"3"+Суффикс];	
				Иначе
					дСтрока["ИсточникЗнач"+СуффиксДляНового+"1"+Суффикс] = ТД["ИсточникЗнач"+СуффиксДляНового+"1"+Суффикс];	
				КонецЕсли;
				дСтрока["ИсточникЗнач"+СуффиксДляНового+ТекИндекс+Суффикс] = ТД["ИсточникЗнач"+СуффиксДляНового+ТекИндекс+Суффикс];	
			КонецЕсли;
			
		КонецЦикла;
		
		Для н = 1 По 3 Цикл
			ТекЗначение = Дочерние[0]["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = 2;	
			Иначе
				ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = Дочерние[0]["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];	
			КонецЕсли;
		КонецЦикла;

	Иначе
		//Отразим в родителе
		Дочерние = Родитель.ПолучитьЭлементы();
		Для н = 1 По 3 Цикл
			ТекЗначение = ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				//Родитель["ИсточникЗнач"+н] = 2;	
				Родитель["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = 2;	
			Иначе
				//Родитель["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
				Родитель["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГалочкой(ТД, ТекИндекс, Приставка = "", Суффикс = "", СуффиксДляНового = "")

	Если Не ТД["ИсточникЗнач"+СуффиксДляНового+ТекИндекс+Суффикс] = Истина Тогда
		ТекИндекс = 3;
		ТД["ИсточникЗнач"+СуффиксДляНового+ТекИндекс+Суффикс] = Истина
	КонецЕсли;
	Для н = 1 По 3 Цикл
		Если ТекИндекс = н Тогда
		    Продолжить;
		КонецЕсли;
		ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = Ложь;	
	КонецЦикла;

	Родитель = ТД.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
	    //Заполнить все подчиненные
		Дочерние = ТД.ПолучитьЭлементы();
		Для каждого дСтрока Из Дочерние Цикл
			
			ЭтоКолонкаЦРС = ПустаяСтрока(Суффикс);
			
			Если ТекИндекс = 1 Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЛБР	
			ИначеЕсли ТекИндекс = 3 Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЦБР	
			ИначеЕсли ТекИндекс = 2 И Не ЭтоКолонкаЦРС Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЛБК	
			ИначеЕсли ТекИндекс = 2 И ЭтоКолонкаЦРС Тогда
				ДоступностьКолонки = дСтрока.ДоступностьЦБК	
			КонецЕсли;
			
			Если ДоступностьКолонки Тогда
				Для н = 1 По 3 Цикл
					//дСтрока["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
					дСтрока["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];	
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Для н = 1 По 3 Цикл
			ТекЗначение = Дочерние[0]["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				//Родитель["ИсточникЗнач"+н] = 2;	
				ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = 2;	
			Иначе
				//Родитель["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
				ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];	
			КонецЕсли;
		КонецЦикла;

	Иначе
		//Отразим в родителе
		Дочерние = Родитель.ПолучитьЭлементы();
		Для н = 1 По 3 Цикл
			ТекЗначение = ТД["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];
			с = 0;
			ЗначениеМеняется = Ложь;
			Пока Не ЗначениеМеняется И с < Дочерние.Количество() Цикл
				дСтрока = Дочерние[с];
				ЗначениеМеняется = ТекЗначение <> дСтрока["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];
			    с = с + 1;
			КонецЦикла;
			Если ЗначениеМеняется Тогда
				//Родитель["ИсточникЗнач"+н] = 2;	
				Родитель["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = 2;	
			Иначе
				//Родитель["ИсточникЗнач"+н] = ТД["ИсточникЗнач"+н];	
				Родитель["ИсточникЗнач"+СуффиксДляНового+н+Суффикс] = Дочерние[0]["ИсточникЗнач"+СуффиксДляНового+н+Суффикс];	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекСправочниковИсточникЗначДляНового1ПриИзменении(Элемент)
	ДеревоЗначенийИсточникЗначПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекСправочниковИсточникЗначДляНового2ПриИзменении(Элемент)
	ДеревоЗначенийИсточникЗначПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекСправочниковИсточникЗначДляНового3ПриИзменении(Элемент)
	ДеревоЗначенийИсточникЗначПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекДокументовИсточникЗначДляНового1ПриИзменении(Элемент)
	ДеревоЗначенийИсточникЗначПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекДокументовИсточникЗначДляНового2ПриИзменении(Элемент)
	ДеревоЗначенийИсточникЗначПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекДокументовИсточникЗначДляНового3ПриИзменении(Элемент)
	ДеревоЗначенийИсточникЗначПриИзменении(Элемент)
КонецПроцедуры



