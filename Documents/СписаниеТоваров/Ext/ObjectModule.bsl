
Перем мВестиУчетСебестоимости Экспорт; // Учет себестоимости.

Перем мТекущаяДата; // Используется при подготовке реквизитов документа, обеспечивая синхронность даты.

Перем мЗаголовок; // Заголовок служебных сообщений.

Перем мНоменклатурныеГруппы; // Состав номенклатурных групп.
Перем мПроизводственныеГруппы; // Состав производственных групп производства.

Перем мВалютаРегламентированногоУчета Экспорт; // Валюта.

Перем мТекущаяНоменклатура Экспорт; // Хранит текущую номенклатуру - для проверки реальности изменения номенклатуры.
Перем мМожноМенятьСостояниеНоменклатурыВДокументе Экспорт; // Признак доступности колонок распечатаноости и выполненности для редактирования.


#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьДокумента(АвтоопределениеПринтера = Ложь, ОтложеннаяПечатьДиспетчер = Неопределено)
		
		Если АвтоопределениеПринтера Тогда
			ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.Принтеры);
			Если (ПринтерПечати = Неопределено) Тогда
				Возврат Неопределено;
			КонецЕсли;		
		КонецЕсли;
		
		УчитыватьНДС = Ложь;	
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Артикул";
			ТекстКодАртикул = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		Иначе
			ВыводитьКоды    = Ложь;
			Колонка         = "";
			ТекстКодАртикул = "Код";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Ресторан,
		|	РеализацияТоваровУслуг.Ресторан КАК Поставщик,
		|	РеализацияТоваровУслуг.Сотрудник КАК Отпустил,
		|	РеализацияТоваровУслуг.Комментарий,
		|	РеализацияТоваровУслуг.СуммаДокумента
		|ИЗ
		|	Документ.СписаниеТоваров КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		//Запрос.Текст = 
		//
		//"ВЫБРАТЬ
		//|	ВложенныйЗапросПоТоварам.НомерТЧ,
		//|	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
		//|	ВложенныйЗапросПоТоварам.Номенклатура,
		//|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		//|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		//|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		//|	ВложенныйЗапросПоТоварам.Количество,
		//|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
		//|	ВложенныйЗапросПоТоварам.Цена,
		//|	ВложенныйЗапросПоТоварам.СуммаНДС,
		//|	ВложенныйЗапросПоТоварам.Сумма,
		//|	ВложенныйЗапросПоТоварам.Владелец КАК Владелец,
		//|	ВложенныйЗапросПоТоварам.Идентификатор
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		1 КАК НомерТЧ,
		//|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
		//|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
		//|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//|		РеализацияТоваровУслуг.Цена КАК Цена,
		//|		РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		//|		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
		//|		СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
		//|		СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
		//|		РеализацияТоваровУслуг.Владелец КАК Владелец,
		//|		РеализацияТоваровУслуг.Идентификатор КАК Идентификатор
		//|	ИЗ
		//|		Документ.СписаниеТоваров.Товары КАК РеализацияТоваровУслуг
		//|	ГДЕ
		//|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		РеализацияТоваровУслуг.Номенклатура,
		//|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
		//|		РеализацияТоваровУслуг.Цена,
		//|		РеализацияТоваровУслуг.СтавкаНДС,
		//|		РеализацияТоваровУслуг.Владелец,
		//|		РеализацияТоваровУслуг.Идентификатор) КАК ВложенныйЗапросПоТоварам
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	2,
		//|	РеализацияТоваровУслуг.НомерСтроки,
		//|	РеализацияТоваровУслуг.Номенклатура,
		//|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		//|	РеализацияТоваровУслуг.Номенклатура.Код, 
		//|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		//|	РеализацияТоваровУслуг.Количество,
		//|	NULL,
		//|	РеализацияТоваровУслуг.Цена,
		//|	РеализацияТоваровУслуг.СуммаНДС,
		//|	РеализацияТоваровУслуг.Сумма,
		//|	РеализацияТоваровУслуг.Владелец,
		//|	РеализацияТоваровУслуг.Идентификатор
		//|ИЗ
		//|	Документ.СписаниеТоваров.Услуги КАК РеализацияТоваровУслуг
		//|ГДЕ
		//|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	ВложенныйЗапросПоТоварам.НомерТЧ,
		//|	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ";
		
		
		//Костенюк Александр-Старт 20.05.2013
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапросПоТоварам.НомерТЧ,
		|	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК КодАртикул,
		|	ВложенныйЗапросПоТоварам.Количество,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
		|	ВложенныйЗапросПоТоварам.Цена,
		|	ВложенныйЗапросПоТоварам.СуммаНДС,
		|	ВложенныйЗапросПоТоварам.Сумма,
		|	ВложенныйЗапросПоТоварам.Владелец КАК Владелец,
		|	ВложенныйЗапросПоТоварам.Идентификатор
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК НомерТЧ,
		|		МИНИМУМ(Товары.НомерСтроки) КАК НомерСтрокиТЧ,
		|		Товары.Номенклатура КАК Номенклатура,
		|		Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Товары.Цена КАК Цена,
		|		Товары.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(Товары.Количество) КАК Количество,
		|		СУММА(Товары.СуммаНДС) КАК СуммаНДС,
		|		СУММА(Товары.Сумма) КАК Сумма,
		|		Товары.Владелец КАК Владелец,
		|		Товары.Идентификатор КАК Идентификатор
		|	ИЗ
		|		Документ.СписаниеТоваров.Товары КАК Товары
		|	ГДЕ
		|		Товары.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Товары.Номенклатура,
		|		Товары.ЕдиницаИзмерения,
		|		Товары.Цена,
		|		Товары.СтавкаНДС,
		|		Товары.Владелец,
		|		Товары.Идентификатор) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапросПоТоварам.НомерТЧ,
		|	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВложенныйЗапросПоТоварам.Номенклатура.Код КАК КодАртикул", "ВложенныйЗапросПоТоварам.Номенклатура."+ТекстКодАртикул+" КАК КодАртикул");
		//Костенюк Александр-Финиш 20.05.2013
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
		
		Макет = ПолучитьМакет("Накладная");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		// Выводим шапку нкладной
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Списание товаров';uk='Списание товаров'",КодЯзыкаПечать),КодЯзыкаПечать);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,/,Телефоны,Факсы,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		СписокДополнительныхПараметров="";
		
		МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;		
		
		ЕстьСкидки = Ложь;
		ЕстьНаценки = Ложь;
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		Конецесли;
		
		Если ЕстьСкидки Тогда
			ОбластьШапки  = ОбластьШапки  + "Скидка";
			ОбластьСтроки = ОбластьСтроки + "Скидка";
		КонецЕсли; 
		
		Если ЕстьНаценки Тогда
			ОбластьШапки  = ОбластьШапки  + "Наценка";
			ОбластьСтроки = ОбластьСтроки + "Наценка";
		КонецЕсли; 
		
		// Вывести табличную часть (товары и услуги)
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;                        	
		
		Суффикс = "";
		
		//Если Шапка.УчитыватьНДС Тогда
		//	Если Шапка.СуммаВключаетНДС Тогда
		//		Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		//	Иначе	
		//		Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		//	КонецЕсли;
		//	Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		//КонецЕсли;
		
		ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		ВсегоНаценок    = 0;
		
		//Игорь
		//Проверка на Дереве
		ЭтоДерево = Ложь; 
		
		СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
		УИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 
		
		Для каждого стр Из ЗапросТовары Цикл
			Если стр.Владелец <> УИдентификатор тогда
				ЭтоДерево =Истина;		
			КонецЕсли;	
		КонецЦикла;
		
		Если ЭтоДерево Тогда
			Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ЗапросТовары, "Идентификатор", "Владелец");
			РаспечататьДеревоПечатьДокумента(ТабДокумент, ОбластьМакета ,Дерево ,ВыводитьКоды ,Сумма ,СуммаНДС ,ВсегоСкидок ,ВсегоБезСкидок, ВсегоНаценок, УИдентификатор);
			
		Иначе
			
			Для каждого ВыборкаСтрокДерева из ЗапросТовары Цикл 
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
					Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
				ОбластьМакета.Параметры.НомерСтроки =ВыборкаСтрокДерева.НомерСтрокиТЧ; //ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
				ОбластьМакета.Параметры.Товар   = СокрЛП(ВыборкаСтрокДерева.Товар);			
				
				Если ВыводитьКоды Тогда
					ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокДерева.КодАртикул;
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
				Сумма    = Сумма    + ВыборкаСтрокДерева.Сумма;
				СуммаНДС = СуммаНДС + ВыборкаСтрокДерева.СуммаНДС;          
				
				ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаСтрокДерева.Сумма;
				
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьИтого = "Итого";
		Если ЕстьСкидки Тогда
			ОбластьИтого  = ОбластьИтого + "Скидка";
		КонецЕсли; 
		Если ЕстьНаценки Тогда
			ОбластьИтого  = ОбластьИтого + "Наценка";
		КонецЕсли;	
		
		// Вывести Итого
		ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		Если ЕстьСкидки Тогда
			ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
			ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
		КонецЕсли; 
		Если ЕстьНаценки Тогда
			ОбластьМакета.Параметры.ВсегоНаценок	= ОбщегоНазначения.ФорматСумм(ВсегоНаценок);
		КонецЕсли;	
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если УчитыватьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
				ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;	
		
		// Вывести Сумму прописью
		СуммаВключаетНДС = Истина;
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
		НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить()) + ".";
		
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить(),КодЯзыкаПечать)
		+ ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если АвтоопределениеПринтера Тогда
			
			ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
			
			ТабДокумент = Неопределено;
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьДокумента()
	
	Процедура РаспечататьДеревоПечатьДокумента(ТабДокумент, ОбластьМакета ,Дерево ,ВыводитьКоды ,Сумма , СуммаНДС ,ВсегоСкидок , ВсегоБезСкидок, ВсегоНаценок, ПустойУИдентификатор , НомерСтр = 0,  СтрОтступа = "");
		
		Для каждого ВыборкаСтрокДерева из Дерево.Строки Цикл 
			
			Если ВыборкаСтрокДерева.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Условие Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			//Если Найти(Строка(ВыборкаСтрокТовары.НомерПП), "," ) <> 0 Тогда
			//	ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			//	ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрокТовары.НомерПП; //ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			//	ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
			//Иначе
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
			НомерСтр = НомерСтр + 1;
			ОбластьМакета.Параметры.НомерСтроки = НомерСтр; //ВыборкаСтрокДерева.НомерСтрокиТЧ;
			Если ВыборкаСтрокДерева.Владелец = ПустойУИдентификатор Тогда		
				СтрОтступа = "";
			КонецЕсли;
			ОбластьМакета.Параметры.Товар   = СтрОтступа +  СокрЛП(ВыборкаСтрокДерева.Товар);			
			
			//КонецЕсли;
			
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокДерева.КодАртикул;
			КонецЕсли;
			
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Сумма    = Сумма    + ВыборкаСтрокДерева.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокДерева.СуммаНДС;          
			
			ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаСтрокДерева.Сумма;
			
			
			
			Если ВыборкаСтрокДерева.Строки.Количество() > 0 Тогда
				СтрОтступа=СтрОтступа + "     ";
				РаспечататьДеревоПечатьДокумента(ТабДокумент, ОбластьМакета ,ВыборкаСтрокДерева ,ВыводитьКоды ,Сумма , СуммаНДС ,ВсегоСкидок , ВсегоБезСкидок, ВсегоНаценок,ПустойУИдентификатор ,НомерСтр, СтрОтступа);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь, АвтоопределениеПринтера = Ложь, ОтложеннаяПечатьДиспетчер = Неопределено, FrontOfficeРежим = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если (ИмяМакета = "Накладная") Тогда
			ТабДокумент = ПечатьДокумента(АвтоопределениеПринтера);
		ИначеЕсли ИмяМакета = "Пречек" Тогда
			ТабДокумент = ПечатьПречека(FrontOfficeРежим);
		КонецЕсли;
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
		Возврат Истина;
		
	КонецФункции // Печать()
	
	Функция ПечатьПречека(АвтоопределениеПринтера = Ложь, ОтложеннаяПечатьДиспетчер = Неопределено)
		
		Если АвтоопределениеПринтера Тогда
			ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.ПринтерыПречеков);
			//Если (ПринтерПечати = Неопределено) Тогда
			//	Возврат ПечатьДокумента(АвтоопределениеПринтера, ОтложеннаяПечатьДиспетчер);
			//КонецЕсли;		
		КонецЕсли;
		
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = ЭтотОбъект.ПолучитьМакет("Пречек");
		УчитыватьНДС = Ложь;	
		
		ЗапросШ = Новый Запрос(
		"ВЫБРАТЬ
		|	СписаниеТоваров.Номер,
		|	СписаниеТоваров.Дата,
		|	СписаниеТоваров.Ресторан,
		|	СписаниеТоваров.Ресторан КАК Поставщик,
		|	ЕСТЬNULL(Пользователи.Ссылка, СписаниеТоваров.Сотрудник) КАК Отпустил,
		|	СписаниеТоваров.СуммаДокумента,
		|	СписаниеТоваров.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	&ТекущаяДата КАК ДатаРазделенияПериода
		|ИЗ
		|	Документ.СписаниеТоваров КАК СписаниеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(Пользователи.Ссылка) КАК Ссылка,
		|			Пользователи.Сотрудник КАК Сотрудник
		|		ИЗ
		|			Справочник.Пользователи КАК Пользователи
		|		ГДЕ
		|			(НЕ Пользователи.ПометкаУдаления)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Пользователи.Сотрудник) КАК Пользователи
		|		ПО СписаниеТоваров.Сотрудник = Пользователи.Сотрудник
		|ГДЕ
		|	СписаниеТоваров.Ссылка = &ТекущийДокумент");
		ЗапросШ.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросШ.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Шапка = ЗапросШ.Выполнить().Выбрать();
		Шапка.Следующий();
		
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ
		//|	СписаниеТоваров.ДатаНачалаПериода КАК ДатаНачалаПериода,
		//|	СписаниеТоваров.Номенклатура КАК Номенклатура,
		//|	СписаниеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//|	СписаниеТоваров.ЕдиницаЦены КАК ЕдиницаЦены,
		//|	СУММА(СписаниеТоваров.Количество) КАК Количество,
		//|	МИНИМУМ(СписаниеТоваров.Цена) КАК Цена,
		//|	СписаниеТоваров.Комментарий КАК Комментарий,
		//|	СписаниеТоваров.Владелец КАК Владелец,
		//|	СписаниеТоваров.Идентификатор КАК Идентификатор,
		//|	СписаниеТоваров.Организация КАК Организация,
		//|	СписаниеТоваров.НоменклатураНаименованиеПолное КАК Товар,
		//|	СУММА(СписаниеТоваров.Сумма) КАК Сумма
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		СписаниеТоваров.ДатаНачалаПериода КАК ДатаНачалаПериода,
		//|		СписаниеТоваров.Номенклатура КАК Номенклатура,
		//|		СписаниеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//|		СписаниеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
		//|		СписаниеТоваров.Количество КАК Количество,
		//|		СписаниеТоваров.Цена КАК Цена,
		//|		СписаниеТоваров.Комментарий КАК Комментарий,
		//|		СписаниеТоваров.Владелец КАК Владелец,
		//|		СписаниеТоваров.Идентификатор КАК Идентификатор,
		//|		СписаниеТоваров.Организация КАК Организация,
		//|		ПОДСТРОКА(СписаниеТоваров.Номенклатура.НаименованиеПолное, 0, 200) КАК НоменклатураНаименованиеПолное,
		//|		СписаниеТоваров.Сумма КАК Сумма
		//|	ИЗ
		//|		Документ.СписаниеТоваров.Товары КАК СписаниеТоваров
		//|	ГДЕ
		//|		СписаниеТоваров.Ссылка = &ТекущийДокумент
		//|		И (СписаниеТоваров.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Модификатор)
		//|				ИЛИ СписаниеТоваров.Цена <> 0)
		//|	
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	
		//|	ВЫБРАТЬ
		//|		СписаниеТоваров.ДатаНачалаПериода,
		//|		СписаниеТоваров.Номенклатура,
		//|		NULL,
		//|		NULL,
		//|		СписаниеТоваров.Количество,
		//|		СписаниеТоваров.Цена,
		//|		СписаниеТоваров.Комментарий,
		//|		СписаниеТоваров.Владелец,
		//|		СписаниеТоваров.Идентификатор,
		//|		NULL,
		//|		ПОДСТРОКА(СписаниеТоваров.Номенклатура.НаименованиеПолное, 0, 200),
		//|		СписаниеТоваров.Сумма
		//|	ИЗ
		//|		Документ.СписаниеТоваров.Услуги КАК СписаниеТоваров
		//|	ГДЕ
		//|		СписаниеТоваров.Ссылка = &ТекущийДокумент) КАК СписаниеТоваров
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	СписаниеТоваров.ДатаНачалаПериода,
		//|	СписаниеТоваров.Номенклатура,
		//|	СписаниеТоваров.ЕдиницаИзмерения,
		//|	СписаниеТоваров.ЕдиницаЦены,
		//|	СписаниеТоваров.Комментарий,
		//|	СписаниеТоваров.Владелец,
		//|	СписаниеТоваров.Идентификатор,
		//|	СписаниеТоваров.Организация,
		//|	СписаниеТоваров.НоменклатураНаименованиеПолное
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Номенклатура");
		
		//Костенюк Александр-Старт 20.05.2013
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СписаниеТоваров.ДатаНачалаПериода КАК ДатаНачалаПериода,
		                      |	СписаниеТоваров.Номенклатура КАК Номенклатура,
		                      |	СписаниеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		                      |	СписаниеТоваров.ЕдиницаЦены КАК ЕдиницаЦены,
		                      |	СУММА(СписаниеТоваров.Количество) КАК Количество,
		                      |	МИНИМУМ(СписаниеТоваров.Цена) КАК Цена,
		                      |	СписаниеТоваров.Комментарий КАК Комментарий,
		                      |	СписаниеТоваров.Владелец КАК Владелец,
		                      |	СписаниеТоваров.Идентификатор КАК Идентификатор,
		                      |	СписаниеТоваров.Организация КАК Организация,
		                      |	СписаниеТоваров.НоменклатураНаименованиеПолное КАК Товар,
		                      |	СУММА(СписаниеТоваров.Сумма) КАК Сумма
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		СписаниеТоваров.ДатаНачалаПериода КАК ДатаНачалаПериода,
		                      |		СписаниеТоваров.Номенклатура КАК Номенклатура,
		                      |		СписаниеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		                      |		СписаниеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
		                      |		СписаниеТоваров.Количество КАК Количество,
		                      |		СписаниеТоваров.Цена КАК Цена,
		                      |		СписаниеТоваров.Комментарий КАК Комментарий,
		                      |		СписаниеТоваров.Владелец КАК Владелец,
		                      |		СписаниеТоваров.Идентификатор КАК Идентификатор,
		                      |		СписаниеТоваров.Организация КАК Организация,
		                      |		ПОДСТРОКА(СписаниеТоваров.Номенклатура.НаименованиеПолное, 0, 200) КАК НоменклатураНаименованиеПолное,
		                      |		СписаниеТоваров.Сумма КАК Сумма
		                      |	ИЗ
		                      |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваров
		                      |	ГДЕ
		                      |		СписаниеТоваров.Ссылка = &ТекущийДокумент
		                      |		И (СписаниеТоваров.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Модификатор)
		                      |				ИЛИ СписаниеТоваров.Цена <> 0)) КАК СписаниеТоваров
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	СписаниеТоваров.ДатаНачалаПериода,
		                      |	СписаниеТоваров.Номенклатура,
		                      |	СписаниеТоваров.ЕдиницаИзмерения,
		                      |	СписаниеТоваров.ЕдиницаЦены,
		                      |	СписаниеТоваров.Комментарий,
		                      |	СписаниеТоваров.Владелец,
		                      |	СписаниеТоваров.Идентификатор,
		                      |	СписаниеТоваров.Организация,
		                      |	СписаниеТоваров.НоменклатураНаименованиеПолное
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Номенклатура");
		//Костенюк Александр-Финиш 20.05.2013
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Пречек";
		ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Пречек";
		ТабДокумент.КоличествоЭкземпляров = 1;
				
		// Печать производится на языке, указанном в настройках пользователя.
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		// Заголовок.
		Если НЕ УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeСкрыватьВПречекеСтрокуСНомеромЧека) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Чек';uk='Чек'",КодЯзыкаПечать),КодЯзыкаПечать,Истина);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Поставщик.
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
		// Чистяков Павел 17.02.2012 13:36:01 Кирилл сказал что ул не нужна
		//ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,/,Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыШапки");
		РеквизитыСтола = ""+Формат(Шапка.Дата,"ДФ=dd.MM.yyyy")+", відкрит: "+Формат(Шапка.ДатаНачалаПериода,"ДФ=HH:mm");
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + "Офiциант: " + Шапка.Отпустил;
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + "Роздрукував: " + ПараметрыСеанса.ТекущийПользователь;
		РеквизитыСтола = РеквизитыСтола + Символы.ПС + "Друк: " + Формат(Шапка.ДатаРазделенияПериода,"ДФ='dd.MM.yyyy HH:mm'");
		ОбластьМакета.Параметры.РеквизитыСтола = РеквизитыСтола;
		ТабДокумент.Вывести(ОбластьМакета);
				
		// Товары и услуги.
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		 	  
		ОбластьМакетаСтроки			= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаКомментарий	= Макет.ПолучитьОбласть("СтрокаКомментарий");
		
		//Игорь
		ЭтоДерево = Ложь;  
				
		СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
		УИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 
		
		Для каждого стр Из ЗапросТовары Цикл
			Если стр.Владелец <> УИдентификатор тогда
				ЭтоДерево = Истина;
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		
		ТаблицаВременная = новый ТаблицаЗначений;
		ТаблицаВременная = ЗапросТовары.СкопироватьКолонки("Номенклатура,Товар,ЕдиницаИзмерения,Количество,Цена,Сумма,Комментарий,Организация");	
		ТаблицаВременная.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
		ТаблицаВременная.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));  
		ТаблицаВременная.Колонки.Добавить("ЕдиницаЦены", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));  
		
		Для каждого стр Из ЗапросТовары Цикл
			Временная = ТаблицаВременная.Добавить();
			Временная.Товар = СокрЛП(стр.Товар);
			Временная.Номенклатура = стр.Номенклатура;
			Временная.Идентификатор = Строка(стр.Идентификатор); 
			Временная.Владелец = Строка(стр.Владелец); 
			Временная.ЕдиницаИзмерения = стр.ЕдиницаИзмерения; 
			Временная.Количество = стр.Количество;
			Временная.Цена  = стр.Цена;
			Временная.Сумма =  стр.Сумма;
			Временная.Комментарий =  стр.Комментарий;
			Временная.Организация =  стр.Организация;
			Временная.ЕдиницаЦены =  стр.ЕдиницаЦены;
		КонецЦикла;
		
		ГруппироватьНоменклатуру = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeГруппироватьНоменклатуруВПречеке);
		
		Если ЭтоДерево  Тогда
			
			Если ГруппироватьНоменклатуру Тогда
				ДЗ =  ГруппировкаНоменклатуры(ТаблицаВременная, "Дерево");
				РаспечататьДеревоПечатьПречека(ТабДокумент, ОбластьМакета, ДЗ, ОбластьМакетаСтроки, УИдентификатор, "");	
			Иначе 	
				Дерево = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ЗапросТовары, "Идентификатор", "Владелец");
				РаспечататьДеревоПечатьПречека(ТабДокумент, ОбластьМакета ,Дерево ,ОбластьМакетаСтроки, УИдентификатор, "");
			КонецЕсли;
			
		Иначе	
			
			Если ГруппироватьНоменклатуру Тогда 
				
				ДЗ =  ГруппировкаНоменклатуры(ТаблицаВременная);
				
				Для каждого ВыборкаСтрокДерева из ДЗ Цикл 
					
					Если Не ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
						Продолжить;
					КонецЕсли;
					
					Если не ВыборкаСтрокДерева.Номенклатура.Печатаемый Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
						ОбластьМакета = ОбластьМакетаСтроки;
					Иначе
						ОбластьМакета = ОбластьМакетаКомментарий;
					КонецЕсли; 
					
					ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
					
					ОбластьМакета.Параметры.Товар = СокрЛП(ОбластьМакета.Параметры.Номенклатура.НаименованиеПолное);
					
					Если Не ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
						ОбластьМакета.Параметры.Комментарий = СокрЛП(ОбластьМакета.Параметры.Комментарий);
					КонецЕсли;
					
					ТабДокумент.Вывести(ОбластьМакета);
					
				КонецЦикла;
				
			Иначе
				
				Для каждого ВыборкаСтрокДерева из ЗапросТовары Цикл 
					
					Если Не ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(не ВыборкаСтрокДерева.Номенклатура.Печатаемый) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
						ОбластьМакета = ОбластьМакетаСтроки;
					Иначе
						ОбластьМакета = ОбластьМакетаКомментарий;
					КонецЕсли; 
					
					ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
					
					ОбластьМакета.Параметры.Товар = СокрЛП(ОбластьМакета.Параметры.Номенклатура.НаименованиеПолное);
					
					Если Не ПустаяСтрока(ВыборкаСтрокДерева.Комментарий) Тогда
						ОбластьМакета.Параметры.Комментарий = СокрЛП(ОбластьМакета.Параметры.Комментарий);
					КонецЕсли;
					
					ТабДокумент.Вывести(ОбластьМакета);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Игорь 19.10.2011 17:25:58
		//Итог по организациям
		ПечатьПречекаПоОрганизациям = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПечатьПречекаПоОрганизациям);
		Если ПечатьПречекаПоОрганизациям Тогда	
			ОбластьИтогоПоОрганизациям = Макет.ПолучитьОбласть("ИтогоПоОрганизациям");
			//ЗапросТовары.Свернуть("Организация","СуммаСоСкидкой"); 	
			//Костенюк Александр-Старт 11.01.2013
			ЗапросТовары.Свернуть("Организация","Сумма");
			//Костенюк Александр-Финиш 11.01.2013
			Для каждого Стр Из ЗапросТовары Цикл
				ОбластьИтогоПоОрганизациям.Параметры.Заполнить(Стр);
				//Костенюк Александр-Закомментировано 11.01.2013 ОбластьИтогоПоОрганизациям.Параметры.Сумма = Стр.СуммаСоСкидкой;
				Если (ОбластьИтогоПоОрганизациям.Параметры.Сумма > 0) Тогда
					ОбластьИтогоПоОрганизациям.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(ОбластьИтогоПоОрганизациям.Параметры.Сумма, мВалютаРегламентированногоУчета);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьИтогоПоОрганизациям);
			КонецЦикла;					                  
		КонецЕсли;
		
		// Итого.     
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьИтого.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета) + ".";
		ТабДокумент.Вывести(ОбластьИтого);
		
		// Чистяков Павел 17.02.2012 13:35:08 Кирилл сказал что подвал печатать не надо
		//СтрокаПодвала = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПодвалПречекаЗаказа);
		//Если не ПустаяСтрока(СтрокаПодвала) Тогда
		//	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		//	ОбластьПодвал.Параметры.ПодвалТекст = СтрокаПодвала;
		//	ТабДокумент.Вывести(ОбластьПодвал);		
		//КонецЕсли;
		
		// Чистяков Павел 17.02.2012 13:42:03 Выкинул, так как оно есть сверху
		//ОбластьСотрудник = Макет.ПолучитьОбласть("СотрудникОбласть");
		//ОбластьСотрудник.Параметры["Пользователь"] = ПараметрыСеанса.ТекущийПользователь.Сотрудник.ПолноеНаименование();		
		//ТабДокумент.Вывести(ОбластьСотрудник);
		//
		//ОбластьОтветственный = Макет.ПолучитьОбласть("ОбластьОтветственный");
		//ОбластьОтветственный.Параметры.Сотрудник = Ссылка.Сотрудник.ПолноеНаименование();
		//ТабДокумент.Вывести(ОбластьОтветственный);

		ОбластьПодпись = Макет.ПолучитьОбласть("ПодписьОбласть");
		ТабДокумент.Вывести(ОбластьПодпись);

		//установим параметры отображения табличного документа
		//ТабДокумент.ТолькоПросмотр = Истина;
		//ТабДокумент.ОтображатьЗаголовки = Истина;
		//ТабДокумент.ОтображатьСетку = Ложь;
		//покажем табличный документ на экране 
		//ТабДокумент.Показать(); 
		//
		Если АвтоопределениеПринтера Тогда                         
			ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
			ТабДокумент = Неопределено;
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьДокумента()
	
#КонецЕсли


// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();
	
	СтруктураМакетов.Вставить("Накладная", "Акт списания товаров");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура РаспечататьДеревоПечатьПречека(ТабДокумент, ОбластьМакета, Дерево, ОбластьМакетаСтроки, ПустойУИдентификатор, СтрОтступа)
	
	Для каждого ВыборкаСтрокДерева из Дерево.Строки Цикл 
		
		Если ВыборкаСтрокДерева.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Условие Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыборкаСтрокДерева.Номенклатура.Печатаемый Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета = ОбластьМакетаСтроки;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
		Если ВыборкаСтрокДерева.Владелец = ПустойУИдентификатор Тогда
			СтрОтступа ="";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Товар =СтрОтступа + СокрЛП(ОбластьМакета.Параметры.Товар);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ВыборкаСтрокДерева.Строки.Количество() > 0 Тогда
			СтрОтступа = СтрОтступа + "     ";
			РаспечататьДеревоПечатьПречека(ТабДокумент, ОбластьМакета ,ВыборкаСтрокДерева ,ОбластьМакетаСтроки, ПустойУИдентификатор, СтрОтступа);			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция  ГруппировкаНоменклатуры(ТаблицыТоваров, Признак = Неопределено) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТаблицыТоваров);	
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Идентификатор КАК Идентификатор,
	|	Товары.Количество,
	|	Товары.Номенклатура,
	|	Товары.Организация,
	|	Товары.Сумма,
	|	Товары.ЕдиницаЦены,
	|	Товары.Цена,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.Комментарий,
	|	Товары.Товар КАК Товар,
	|	Товары.Владелец КАК Владелец
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТЗ.Идентификатор) КАК Идентификатор,
	|	СУММА(ТЗ.Количество) КАК Количество,
	|	ТЗ.Номенклатура,
	|	ТЗ.Организация,
	|	СУММА(ТЗ.Сумма) КАК Сумма,
	|	ТЗ.ЕдиницаЦены,
	|	МИНИМУМ(ТЗ.Цена) КАК Цена,
	|	ТЗ.ЕдиницаИзмерения,
	|	ТЗ.Комментарий,
	|	ТЗ.Товар,
	|	МАКСИМУМ(ТЗ.Владелец) КАК Владелец
	|ИЗ
	|	ТЗ КАК ТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ.Номенклатура,
	|	ТЗ.Организация,
	|	ТЗ.ЕдиницаЦены,
	|	ТЗ.ЕдиницаИзмерения,
	|	ТЗ.Комментарий,
	|	ТЗ.Товар";
	
	Если Признак = "Дерево" Тогда
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();			
		Возврат ОбщегоНазначенияСервер.ВыгрузитьТаблицуЗначенийВДеревоЗначений(РезультатЗапроса,  "Идентификатор",  "Владелец");
	Иначе
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Возврат  РезультатЗапроса;
	
КонецФункции

// Функция возвращает либо переданную дату, либубо текущую если переданное значение не заполнено.
//
Функция ПолучитьНеПустуюДату(Значение, Алетернатива = Неопределено)
	
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Значение) Тогда
		Если (Алетернатива = Неопределено) Тогда
			Возврат мТекущаяДата;
		Иначе
			Возврат Алетернатива;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьНеПустуюДату()

// Процедура получает набор номенклатурных и производственных групп.
//
Процедура ПолучитьПроизводственныеГруппы()
	
	Если (Не Модуль = Перечисления.МодулиИПодсистемы.Ресторан) И (Не Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Возврат;
	КонецЕсли;
	
	мНоменклатурныеГруппы = Новый Массив;
	
	мПроизводственныеГруппы = Новый Массив;
	
	// Табличные части.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(Товары); //Костенюк Александр-Закомментировано 20.05.2013 ТабличныеЧасти.Добавить(Услуги);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			мНоменклатурныеГруппы.Добавить(СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
		КонецЦикла;
	КонецЦикла;
	
	// Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа,
	|	ПроизводственныеГруппы.Ссылка КАК ПроизводственнаяГруппа
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеГруппы КАК ПроизводственныеГруппы
	|		ПО НоменклатурныеГруппы.ПроизводственнаяГруппа = ПроизводственныеГруппы.Ссылка
	|ГДЕ
	|	НоменклатурныеГруппы.Ссылка В(&НоменклатурныеГруппы)
	|	И ПроизводственныеГруппы.Актуальность");
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", мНоменклатурныеГруппы);
	РезультатЗапроса = Запрос.Выполнить();
	
	мПроизводственныеГруппы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПроизводственнаяГруппа");
	
КонецПроцедуры // ПолучитьПроизводственныеГруппы()

// Функция возвращает сумму документа.
//
Функция ПолучитьСуммуСНДС() Экспорт
	
	Возврат Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") +
	Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
КонецФункции // ПолучитьСуммуСНДС()

// Функция возвращает сумму НДС документа.
//
Функция ПолучитьСуммуНДС() Экспорт
	
	Возврат Ценообразование.ПолучитьНДСДокумента(ЭтотОбъект, "Товары") +
	Ценообразование.ПолучитьНДСДокумента(ЭтотОбъект, "Услуги");
	
КонецФункции // ПолучитьСуммуНДС()


// Подготавливает (автоматически заполнениет) шапку документа.
//
Процедура ПодготовитьШапку(РежимЗаписи, РежимПроведения) Экспорт
	
	// Выборка данных.
	ПолучитьПроизводственныеГруппы();
	
	// Текущая дата.
	мТекущаяДата = ТекущаяДата();
	
	// Оплачен.
	Оплачен = (Проведен Или (РежимЗаписи = РежимЗаписиДокумента.Проведение)) И (Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	
	// Распечатан.
	Распечатан = (Распечатан Или Оплачен) И (Не ПометкаУдаления);
	
	// ДатаНачалаПериода.
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДатаНачалаПериода) Тогда
		ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(ДатаОкончанияПериода), мТекущаяДата);
	КонецЕсли;
	
	// ДатаОкончанияПериода.
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДатаОкончанияПериода) Тогда
			ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(ДатаНачалаПериода), мТекущаяДата);
		КонецЕсли;
	КонецЕсли;
	
	// КраткийСоставДокумента.
	КраткийСоставДокумента = УправлениеЗаказами.ЗаполнитьКраткийСоставДокумента(Модуль, мПроизводственныеГруппы);
	
	// СуммаДокумента.
	//СуммаДокумента = ПолучитьСуммуСНДС();
	СуммаДокумента = ПолучитьСуммуДокумента(ЭтотОбъект, "Товары", "Сумма"); //Костенюк Александр 20.05.2013
	
	//Костенюк Александр-Старт 13.04.2012
	// ПричинаОтказа.
	Если Не ПометкаУдаления Тогда
		ПричинаОтказа = Неопределено;
	КонецЕсли;
	//Костенюк Александр-Финиш 13.04.2012
	
КонецПроцедуры // ПодготовитьШапку()

// Подготавливает (автоматически заполнениет) строки табличной части товары и услуги.
//
Процедура ПодготовитьТабличнуюЧастьТоварыИУслуги(РежимЗаписи, РежимПроведения) Экспорт
	
	// Документ резерва.
	ДокументРезерваШапки = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	ПричинаОтказаШапки = Справочники.ПричиныОтказов.ПустаяСсылка();
	
	// Табличные части.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(Товары); //Костенюк Александр-Закомментировано 20.05.2013 ТабличныеЧасти.Добавить(Услуги);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ПерваяСтрока = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			// Идентификатор.
			Если ПустаяСтрока(СтрокаТабличнойЧасти.Идентификатор) Тогда
				СтрокаТабличнойЧасти.Идентификатор = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			// ВидНоменклатуры.
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ВидНоменклатуры) Тогда
				Если ПерваяСтрока Или (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.Цена)) Тогда
					СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар;
				Иначе
					СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор;
				КонецЕсли;
			КонецЕсли;
			
			// Распечатан.
			СтрокаТабличнойЧасти.Распечатан = Истина;
			
			// Выполненн.
			СтрокаТабличнойЧасти.Выполненн = СтрокаТабличнойЧасти.Выполненн Или СтрокаТабличнойЧасти.Списание;
			
			// ДатаНачалаПериода.
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
				СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаОкончанияПериода), мТекущаяДата);
			КонецЕсли;
			
			// ДатаОкончанияПериода.
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
				СтрокаТабличнойЧасти.ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаНачалаПериода), мТекущаяДата);
			КонецЕсли;
			
			// Комментарий.
			СтрокаТабличнойЧасти.Комментарий = ОбщегоНазначения.СокрЛСП(СтрокаТабличнойЧасти.Комментарий);
			
			// Причина отказа.
			Если (Не ПричинаОтказаШапки = Неопределено) Тогда
				Если ПричинаОтказаШапки.Пустая() Тогда
					ПричинаОтказаШапки = СтрокаТабличнойЧасти.ПричинаОтказа;
				Иначе
					Если (Не ПричинаОтказаШапки = СтрокаТабличнойЧасти.ПричинаОтказа) Тогда
						ПричинаОтказаШапки = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Документ резерва.
			Если (Не ДокументРезерваШапки = Неопределено) Тогда
				Если ДокументРезерваШапки.Пустая() Тогда
					ДокументРезерваШапки = СтрокаТабличнойЧасти.ДокументРезерва;
				Иначе
					Если (Не ДокументРезерваШапки = СтрокаТабличнойЧасти.ДокументРезерва) Тогда
						ДокументРезерваШапки = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПерваяСтрока = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// Шапка.
	ДокументРезерва = ДокументРезерваШапки;
	ПричинаОтказа = ПричинаОтказаШапки;
	
КонецПроцедуры // ПодготовитьТабличнуюЧастьТоварыИУслуги()


// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, Заголовок)
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части товары и услуги.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыИУслуги(СтруктураОбязательныхПолей, Отказ, Заголовок)
	
	Для каждого Строка Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Склад) Тогда	
			СкладПоУмолчанию = Строка.НоменклатурнаяГруппа.Склад;
			#Если Клиент Тогда		
				Если НЕ ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
					//Костенюк Александр-Старт 25.05.2012
					Если ОбщегоНазначения.РежимFrontOffice() Тогда
					//Костенюк Александр-Финиш 25.05.2012
						ТекущийРежимРаботы = ПолучитьСерверFrontOffice().ТекущийРежимРаботы();
						Если ЗначениеЗаполнено(ТекущийРежимРаботы) Тогда
							СкладПоУмолчанию = ТекущийРежимРаботы.Склад;
						КонецЕсли;
					//Костенюк Александр-Старт 25.05.2012
					КонецЕсли;
					//Костенюк Александр-Финиш 25.05.2012
				КонецЕсли;  
				Строка.Склад = СкладПоУмолчанию;		
			#КонецЕсли				
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыИУслуги()


// Выполняет движения документа по регистрам состояний.
//
Процедура ДвиженияПоРегистрамСостояний(РежимПроведения, Отказ, Заголовок)
	
	// Состояние документа.
	Если Не Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не Проведен) И (Не ПометкаУдаления) Тогда
			НаборЗаписей.Прочитать();
			Если Булево(НаборЗаписей.Количество()) Тогда
				Запись = НаборЗаписей[0];
			Иначе
				Запись = НаборЗаписей.Добавить();
			КонецЕсли;
			
			Запись.Документ = Ссылка;
			Запись.Модуль = Модуль;
			Запись.Ресторан = Ресторан;
			Запись.Сотрудник = Сотрудник;
			Запись.Дата = Дата;
			Запись.ДатаНачалаПериода = ДатаНачалаПериода;
			Запись.ДатаОкончанияПериода = ДатаОкончанияПериода;
			Запись.КатегорияДокумента = КатегорияДокумента;
			Запись.КраткийСоставДокумента = КраткийСоставДокумента;
			Запись.Номер = Номер;
			Запись.Распечатан = Распечатан;
			Запись.Состояние = Состояние;
			Запись.СуммаДокумента = СуммаДокумента;
			Запись.Комментарий = Комментарий;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамСостояний()


// Выполняет движения документа по регистрам учета.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
	
	// Табличные части.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить("Товары"); //Костенюк Александр-Закомментировано 20.05.2013 ТабличныеЧасти.Добавить("Услуги");
	
	// Рассчет.
	Если Не Отказ Тогда
		
		//СводнаяТаблица = ОбработкаТабличныхЧастей.ПолучитьСводнуюТаблицуТабличныхЧастей(ЭтотОбъект, ТабличныеЧасти, "Списание,Номенклатура,НоменклатурнаяГруппа,Организация,Количество,Цена,ПлановаяСебестоимость,ПенсионныйФонд,ДокументРезерва,ПричинаОтказа,СтавкаНДС,Выполненн,Сумма,СуммаНДС");
		СводнаяТаблица = ОбработкаТабличныхЧастей.ПолучитьСводнуюТаблицуТабличныхЧастей(ЭтотОбъект, ТабличныеЧасти, "Списание,Номенклатура,НоменклатурнаяГруппа,Организация,Количество,КоличествоУточненное,Цена,ПлановаяСебестоимость,ПенсионныйФонд,ДокументРезерва,ПричинаОтказа,СтавкаНДС,Выполненн,Сумма,СуммаНДС,СуммаАкцизногоНалога"); //Костенюк Александр 17.01.2017
		
		//СводнаяТаблицаДвижений = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(СводнаяТаблица, "Списание,Номенклатура,НоменклатурнаяГруппа,Организация,ПенсионныйФонд,ДокументРезерва,ПричинаОтказа,СтавкаНДС,Выполненн", "Количество,Сумма,СуммаНДС");
		СводнаяТаблицаДвижений = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(СводнаяТаблица, "Списание,Номенклатура,НоменклатурнаяГруппа,Организация,ПенсионныйФонд,ДокументРезерва,ПричинаОтказа,СтавкаНДС,Выполненн", "Количество,КоличествоУточненное,Сумма,СуммаНДС,СуммаАкцизногоНалога"); //Костенюк Александр 17.01.2017
		
		СводнаяТаблицаДвиженийСебестоимость = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(СводнаяТаблица, "Списание,Номенклатура,НоменклатурнаяГруппа,Организация,ПлановаяСебестоимость,ДокументРезерва,СтавкаНДС,Выполненн", "Количество,Сумма");
		
		//СводнаяТаблицаДвиженийСписания = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(ОбщегоНазначения.ТаблицуЗначенийРазделитьПоОтбору(СводнаяТаблица, Новый Структура("Списание", Истина)).ТаблицаУдовлетворяетОтбору, "Номенклатура,НоменклатурнаяГруппа,Организация,ПенсионныйФонд,ДокументРезерва,ПричинаОтказа,СтавкаНДС", "Количество,Сумма,СуммаНДС");
		СводнаяТаблицаДвиженийСписания = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(ОбщегоНазначения.ТаблицуЗначенийРазделитьПоОтбору(СводнаяТаблица, Новый Структура("Списание", Истина)).ТаблицаУдовлетворяетОтбору, "Номенклатура,НоменклатурнаяГруппа,Организация,ПенсионныйФонд,ДокументРезерва,ПричинаОтказа,СтавкаНДС", "Количество,КоличествоУточненное,Сумма,СуммаНДС,СуммаАкцизногоНалога"); //Костенюк Александр 17.01.2017
		
		СводнаяТаблицаДвиженийСписанияСебестоимость = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(ОбщегоНазначения.ТаблицуЗначенийРазделитьПоОтбору(СводнаяТаблица, Новый Структура("Списание", Истина)).ТаблицаУдовлетворяетОтбору, "Номенклатура,НоменклатурнаяГруппа,Организация,ПлановаяСебестоимость,ДокументРезерва,СтавкаНДС", "Количество,Сумма");
		
	КонецЕсли;
	
	// УдалениеТоваров.
	Если Не Отказ Тогда
		Движения.УдалениеТоваров.Очистить();
		
		Для Каждого СтрокаТаблицы Из СводнаяТаблицаДвижений Цикл
			Если Не Булево(СтрокаТаблицы.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.УдалениеТоваров.Добавить();
			Движение.Период = Дата;
			Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
			Движение.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
			Движение.Сделка = СтрокаТаблицы.ДокументРезерва;
			Движение.ДокументПродажи = СтрокаТаблицы.ДокументРезерва;
			Движение.Ресторан = Ресторан;
			Движение.Организация = СтрокаТаблицы.Организация;
			Движение.Сотрудник = Сотрудник;
			Движение.ПричинаОтказа = СтрокаТаблицы.ПричинаОтказа;
			Движение.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			Движение.ПенсионныйФонд = СтрокаТаблицы.ПенсионныйФонд;
			Движение.Списан = СтрокаТаблицы.Списание;
			Движение.Выполнен = СтрокаТаблицы.Выполненн;
			Движение.БухгалтерскийУчет = ОтражатьВБухгалтерскомУчете;
			Движение.Количество = СтрокаТаблицы.Количество;
			Движение.КоличествоУточненное = СтрокаТаблицы.КоличествоУточненное; //Костенюк Александр 17.01.2017
			Движение.Стоимость = СтрокаТаблицы.Сумма;
			Движение.НДС = СтрокаТаблицы.СуммаНДС;
			Движение.АкцизныйНалог = СтрокаТаблицы.СуммаАкцизногоНалога; //Костенюк Александр 29.01.2015
		КонецЦикла;
		
		Попытка
			//Движения.СписанияТоваров.Записать();
			
			Движения.УдалениеТоваров.Записать(); //Костенюк Александр 24.01.2013
			
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.СписанияТоваров, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
	// УдалениеТоваровСебестоимость.
	Если Не Отказ Тогда
		Движения.УдалениеТоваровСебестоимость.Очистить();
		
		Если мВестиУчетСебестоимости Тогда
			Для Каждого СтрокаТаблицы Из СводнаяТаблицаДвиженийСебестоимость Цикл
				Если Не Булево(СтрокаТаблицы.Количество) Тогда
					Продолжить;
				КонецЕсли;
				
				СтоимостьСебестоимости = СтрокаТаблицы.Количество * СтрокаТаблицы.ПлановаяСебестоимость;
				НДССебестоимости = Ценообразование.РассчитатьСуммуНДС(СтоимостьСебестоимости, Истина, Истина, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
				
				Движение = Движения.УдалениеТоваровСебестоимость.Добавить();
				Движение.Период = Дата;
				Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
				Движение.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
				Движение.Сделка = СтрокаТаблицы.ДокументРезерва;
				Движение.ДокументПродажи = СтрокаТаблицы.ДокументРезерва;
				Движение.Ресторан = Ресторан;
				Движение.Организация = СтрокаТаблицы.Организация;
				Движение.Списан = СтрокаТаблицы.Списание;
				Движение.Выполнен = СтрокаТаблицы.Выполненн;
				Движение.БухгалтерскийУчет = ОтражатьВБухгалтерскомУчете;
				Движение.Количество = СтрокаТаблицы.Количество;
				Движение.Стоимость = СтоимостьСебестоимости;
				Движение.НДС = НДССебестоимости;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			//Движения.СписанияТоваровСебестоимость.Записать();
			
			Движения.УдалениеТоваровСебестоимость.Записать(); //Костенюк Александр 24.01.2013
			
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.СписанияТоваровСебестоимость, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
	// СписанияТоваров.
	Если Не Отказ Тогда
		Движения.СписанияТоваров.Очистить();
		
		Для Каждого СтрокаТаблицы Из СводнаяТаблицаДвиженийСписания Цикл
			Если Не Булево(СтрокаТаблицы.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.СписанияТоваров.Добавить();
			Движение.Период = Дата;
			Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
			Движение.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
			Движение.Сделка = СтрокаТаблицы.ДокументРезерва;
			Движение.ДокументПродажи = СтрокаТаблицы.ДокументРезерва;
			Движение.Ресторан = Ресторан;
			Движение.Организация = СтрокаТаблицы.Организация;
			Движение.Сотрудник = Сотрудник;
			Движение.Оплата = Оплата;
			Движение.ПричинаОтказа = СтрокаТаблицы.ПричинаОтказа;
			Движение.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			Движение.ПенсионныйФонд = СтрокаТаблицы.ПенсионныйФонд;
			Движение.БухгалтерскийУчет = ОтражатьВБухгалтерскомУчете;
			Движение.Количество = СтрокаТаблицы.Количество;
			Движение.КоличествоУточненное = СтрокаТаблицы.КоличествоУточненное; //Костенюк Александр 17.01.2017
			Движение.Стоимость = СтрокаТаблицы.Сумма;
			Движение.НДС = СтрокаТаблицы.СуммаНДС;
			Движение.АкцизныйНалог = СтрокаТаблицы.СуммаАкцизногоНалога; //Костенюк Александр 29.01.2015
		КонецЦикла;
		
		Попытка
			Движения.СписанияТоваров.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.СписанияТоваров, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
	// СписанияТоваровСебестоимость.
	Если Не Отказ Тогда
		Движения.СписанияТоваровСебестоимость.Очистить();
		
		Если мВестиУчетСебестоимости Тогда
			Для Каждого СтрокаТаблицы Из СводнаяТаблицаДвиженийСписанияСебестоимость Цикл
				Если Не Булево(СтрокаТаблицы.Количество) Тогда
					Продолжить;
				КонецЕсли;
				
				СтоимостьСебестоимости = СтрокаТаблицы.Количество * СтрокаТаблицы.ПлановаяСебестоимость;
				НДССебестоимости = Ценообразование.РассчитатьСуммуНДС(СтоимостьСебестоимости, Истина, Истина, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
				
				Движение = Движения.СписанияТоваровСебестоимость.Добавить();
				Движение.Период = Дата;
				Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
				Движение.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппа;
				Движение.Сделка = СтрокаТаблицы.ДокументРезерва;
				Движение.ДокументПродажи = СтрокаТаблицы.ДокументРезерва;
				Движение.Ресторан = Ресторан;
				Движение.Организация = СтрокаТаблицы.Организация;
				Движение.БухгалтерскийУчет = ОтражатьВБухгалтерскомУчете;
				Движение.Количество = СтрокаТаблицы.Количество;
				Движение.Стоимость = СтоимостьСебестоимости;
				Движение.НДС = НДССебестоимости;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			Движения.СписанияТоваровСебестоимость.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.СписанияТоваровСебестоимость, ЭтотОбъект);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Выполняет удаление движения документа по регистрам учета.
//
Процедура УдалениеДвиженияПоРегистрам(Отказ, Заголовок)
	
	
КонецПроцедуры // УдалениеДвиженияПоРегистрам()


// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Удаляем значения некопируемых реквизитов шапки.
	Если Не ОбъектКопирования.ПометкаУдаления Тогда
		ДатаНачалаПериода = Неопределено;
		ДатаОкончанияПериода = Неопределено;
		Распечатан = Неопределено;
		Оплачен = Неопределено;
	КонецЕсли;
	
	// Табличные части.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить(Товары); //Костенюк Александр-Закомментировано 20.05.2013 ТабличныеЧасти.Добавить(Услуги);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			СтрокаТабличнойЧасти.Идентификатор = Неопределено;
			СтрокаТабличнойЧасти.ДатаНачалаПериода = Неопределено;
			СтрокаТабличнойЧасти.ДатаОкончанияПериода = Неопределено;
			//СтрокаТабличнойЧасти.Распечатан = Неопределено;
			//СтрокаТабличнойЧасти.Выполненн = Неопределено;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(Основание)
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Костенюк Александр-Старт 13.04.2012
	// Записываем в доп свойста оригинал документа до его записи
	// Это необходимо для анализа действий на документом
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("Оригинал",Ссылка);
	Иначе
		ДополнительныеСвойства.Вставить("Оригинал",Ссылка.ПолучитьОбъект());
	КонецЕсли; 
	//Костенюк Александр-Финиш 13.04.2012
	
	// Нормализация.
	ПодготовитьШапку(РежимЗаписи, РежимПроведения);
	//ПодготовитьТабличнуюЧастьТоварыИУслуги(РежимЗаписи, РежимПроведения);
	ПодготовитьТабличнуюЧастьТовары(РежимЗаписи, РежимПроведения); //Костенюк Александр 20.05.2013
	
	Состояние = УправлениеЗаказами.ПолучитьСостояниеДокумента(ЭтотОбъект, РежимЗаписи);
	
	// Проверка заполнения реквизитов.
	мЗаголовок = Строка(РежимЗаписи) + " документа «" + СокрЛП(ЭтотОбъект) + "»: ";
	
	// Проверка заполнения реквизитов шапки.
	СтруктураОбязательныхПолей = Новый Структура;
	Если Распечатан Тогда
		СтруктураОбязательныхПолей.Вставить("Сотрудник");
	КонецЕсли;
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаОкончанияПериода");
		СтруктураОбязательныхПолей.Вставить("Распечатан");
		СтруктураОбязательныхПолей.Вставить("Оплачен");
		СтруктураОбязательныхПолей.Вставить("Оплата");
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	
	// Проверка заполнения реквизитов табличных частей.
	
	// -- Документы основания.
	СтруктураОбязательныхПолей = Новый Структура;
	
	ПроверитьЗаполнениеТабличнойЧастиТоварыИУслуги(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	
	//Для каждого стр Из ЭтотОбъект.Товары  Цикл
	//	Если стр.НомерПП  =  0  Тогда
	//		стр.НомерПП = стр.НомерСтроки; 
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для каждого стр Из ЭтотОбъект.Услуги  Цикл
	//	Если стр.НомерПП  =  0  Тогда
	//		стр.НомерПП = стр.НомерСтроки; 
	//	КонецЕсли;
	//КонецЦикла;
	
	Если Не Отказ Тогда 
		Для каждого СтрТаблицы Из ЭтотОбъект.Товары  Цикл
			Если не СтрТаблицы.Распечатан тогда
				СтрТаблицы.Распечатан = Истина;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Костенюк Александр-Старт 13.04.2012
	АнализДействий();
	//Костенюк Александр-Финиш 13.04.2012
	
	// Движения документа.
	ДвиженияПоРегистрамСостояний(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
	// Обнуление данных.                                                       
	мПроизводственныеГруппы = Неопределено;
	
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Движения документа.
	ДвиженияПоРегистрам(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Удаление движений документа.
	УдалениеДвиженияПоРегистрам(Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

//Костенюк Александр-Старт 10.04.2012
// Процедура производит анализ действий над объектом
// и записывает все произведенные действия в регистр
Процедура АнализДействий() Экспорт
	
	Перем Оригинал;
	
	Если НЕ ДополнительныеСвойства.Свойство("Оригинал", Оригинал) Тогда
		Возврат;
	КонецЕсли;
	
	ПереносИсточник 		= Неопределено; 
	ПереносПриемник 		= Неопределено; 
	ПричинаОтказаДокумент 	= Неопределено; 
	ПереносВНовыйЗаказ 		= Неопределено;
	
	ДополнительныеСвойства.Свойство("ПереносИсточник",		ПереносИсточник);
	ДополнительныеСвойства.Свойство("ПереносПриемник",		ПереносПриемник);
	ДополнительныеСвойства.Свойство("ПричинаОтказа", 		ПричинаОтказаДокумент);
	ДополнительныеСвойства.Свойство("ПереносВНовыйЗаказ",	ПереносВНовыйЗаказ);

	// АД: Создан
	Если Оригинал.Ссылка = Оригинал Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Создан, Ссылка);
	КонецЕсли; 
	
	// АД: Отмена Пречека
	Если Оригинал.Распечатан
		И НЕ Распечатан
		И НЕ (Оригинал.Оплачен И НЕ Оплачен) Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ОтменаПречека, Ссылка, ПричинаОтказаДокумент, ПричинаОтказаДокумент);
	КонецЕсли;

	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Товары");
	
	// АД: Удаление блюда
	Для Каждого Таблица Из МассивТаблиц Цикл
		Для Каждого Строка Из Оригинал[Таблица] Цикл
			НайденнаяСтрока = ЭтотОбъект[Таблица].Найти(Строка.Идентификатор, "Идентификатор");
			Если НайденнаяСтрока = Неопределено Тогда
				Если ЗначениеЗаполнено(ПереносПриемник) Тогда
					Если ТипЗнч(ПереносПриемник) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
						Если Строка.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Условие Тогда
							РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеУсловия, Ссылка, Строка.Номенклатура, "", Строка.Количество, ПереносПриемник);
						Иначе
							РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеБлюда, Ссылка, Строка.Номенклатура, "", Строка.Количество, ПереносПриемник);
						КонецЕсли; 
					ИначеЕсли ПереносВНовыйЗаказ Тогда
						РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ПереносВНовыйСтол, Ссылка, Строка.Номенклатура, "Перенос в: " + ПереносПриемник, Строка.Количество, ПереносПриемник);
					Иначе
						РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ПереносВСуществующийСтол,	Ссылка, Строка.Номенклатура, "Перенос в: " + ПереносПриемник, Строка.Количество, ПереносПриемник);
					КонецЕсли; 
				Иначе
					РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеБлюда, Ссылка,Строка.Номенклатура, "", Строка.Количество, ПереносПриемник);
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	// АД: Заказ и Дозаказ
	Для Каждого Таблица Из МассивТаблиц Цикл
		Для Каждого Строка Из ЭтотОбъект[Таблица] Цикл
			НайденнаяСтрока = Оригинал[Таблица].Найти(Строка.Идентификатор, "Идентификатор");
			Если НайденнаяСтрока = Неопределено Тогда
				Если ЗначениеЗаполнено(ПереносИсточник) Тогда
					РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Заказано,	Ссылка, Строка.Номенклатура, "Перенесено из: " + ПереносИсточник, Строка.Количество, ПереносИсточник);
				Иначе
					РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Заказано, Ссылка, Строка.Номенклатура, "", Строка.Количество);
				КонецЕсли;
			ИначеЕсли НайденнаяСтрока.Количество <> Строка.Количество Тогда
				РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Дозаказано, Ссылка, Строка.Номенклатура, "Количество изменено с " + НайденнаяСтрока.Количество + " на " + Строка.Количество, Строка.Количество);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	// АД: ИзменениеОплаты
	Если Оригинал.Ссылка <> Оригинал
		И Оригинал.Оплата <> Оплата
		И ЗначениеЗаполнено(Оплата)
		И ЗначениеЗаполнено(Оригинал.Оплата) Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ИзменениеОплаты, Ссылка, Оплата, "Изменена оплата с " + Оригинал.Оплата + " на " + Оплата);
	КонецЕсли; 
	
	// АД: Отмена оплаты
	Если Оригинал.Оплачен И НЕ Оплачен Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ОтменаОплаты, Ссылка, Оплата);
	КонецЕсли;
	
	// АД: Оплачен
	Если НЕ Оригинал.Оплачен И Оплачен Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Оплата, Ссылка, Оплата);
	КонецЕсли;
	
	// АД: Пречек
	Если НЕ Оригинал.Распечатан И Распечатан Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Пречек, Ссылка);
	КонецЕсли;
	
	// АД: Удален
	Если Оригинал.Ссылка <> Оригинал
		И Оригинал.ПометкаУдаления <> ПометкаУдаления Тогда
		Если ПометкаУдаления Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Удален, Ссылка, ПричинаОтказа, ПричинаОтказа);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 10.04.2012

//Костенюк Александр-Старт 20.05.2013
// Функция получает сумму по колонке табличной части документа
//
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.СписаниеТоваров. Документ, для которого необходимо получить сумму.
// ИмяТабличнойЧасти - Тип: Строка. Имя табличной части документа, по которой будет расчитан итог по колонке.
// ИмяКолонки - Тип: Строка. Имя колонки, по которой будет расчитан итог.
// 
Функция ПолучитьСуммуДокумента(ДокументОбъект, ИмяТабличнойЧасти = "Товары", ИмяКолонки = "Сумма") Экспорт
	
	Возврат Ценообразование.ПолучитьПроизвольнуюСуммуДокумента(ДокументОбъект, ИмяТабличнойЧасти, ИмяКолонки);
	
КонецФункции
//Костенюк Александр-Финиш 20.05.2013

//Костенюк Александр-Старт 20.05.2013
//
// Процедура подготавливает табличную часть документа к записи
//
Процедура ПодготовитьТабличнуюЧастьТовары(РежимЗаписи, РежимПроведения) Экспорт
	
	// Документ резерва.
	ДокументРезерваШапки = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	ПричинаОтказаШапки = Справочники.ПричиныОтказов.ПустаяСсылка();
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		// Идентификатор.
		Если ПустаяСтрока(СтрокаТабличнойЧасти.Идентификатор) Тогда
			СтрокаТабличнойЧасти.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		// ВидНоменклатуры.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНоменклатуры) Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
				СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар;
			Иначе
				СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор;
			КонецЕсли;
		КонецЕсли;
		
		// Распечатан.
		СтрокаТабличнойЧасти.Распечатан = Истина;
		
		// Выполненн.
		СтрокаТабличнойЧасти.Выполненн = СтрокаТабличнойЧасти.Выполненн ИЛИ СтрокаТабличнойЧасти.Списание;
		
		// ДатаНачалаПериода.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
			СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаОкончанияПериода), мТекущаяДата);
		КонецЕсли;
		
		// ДатаОкончанияПериода.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
			СтрокаТабличнойЧасти.ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаНачалаПериода), мТекущаяДата);
		КонецЕсли;
		
		// Комментарий.
		СтрокаТабличнойЧасти.Комментарий = ОбщегоНазначения.СокрЛСП(СтрокаТабличнойЧасти.Комментарий);
		
		// Причина отказа.
		Если (НЕ ПричинаОтказаШапки = Неопределено) Тогда
			Если ПричинаОтказаШапки.Пустая() Тогда
				ПричинаОтказаШапки = СтрокаТабличнойЧасти.ПричинаОтказа;
			Иначе
				Если (НЕ ПричинаОтказаШапки = СтрокаТабличнойЧасти.ПричинаОтказа) Тогда
					ПричинаОтказаШапки = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Документ резерва.
		Если (Не ДокументРезерваШапки = Неопределено) Тогда
			Если ДокументРезерваШапки.Пустая() Тогда
				ДокументРезерваШапки = СтрокаТабличнойЧасти.ДокументРезерва;
			Иначе
				Если (НЕ ДокументРезерваШапки = СтрокаТабличнойЧасти.ДокументРезерва) Тогда
					ДокументРезерваШапки = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Шапка.
	ДокументРезерва = ДокументРезерваШапки;
	ПричинаОтказа = ПричинаОтказаШапки;
		
КонецПроцедуры // ПодготовитьТабличнуюЧастьТовары()
//Костенюк Александр-Финиш 20.05.2013

// Инициализация переменных.
мВестиУчетСебестоимости = глЗначениеПеременной("ВестиУчетСебестоимости");
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
