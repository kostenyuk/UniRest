////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ СЕРВЕРНЫЕ ПРОЦЕДУРЫ ПОДСИСТЕМЫ «ВАРИАНТЫ ОТЧЕТОВ»

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура обновляет вариантов отчетов при обновление ИБ и заполнение пустой ИБ
// Параметры:
//		ИзмененныеОбъектыДанных - соответствие ключ - старое имя отчета, значение - новое имя отчета
//
// Пример кода создания параметра процедуры:
//		СоответствиеИзмененияОбъектов = Новый Соответствие;
//		СоответствиеИзмененияОбъектов.Вставить("ВедомостьПоТоварамНаСкладах", "ВедомостьПоТоварамНаСкладахВЦенахНоменклатуры");
	
Функция ОбработкаПредопределенныхВариантов(ИзмененныеОбъектыДанных = Неопределено) Экспорт
	
	// обновить название отчетов и ключи объектов
	
	НачатьТранзакцию();
	Попытка
		БылиОшибки = ложь;
		
		ТЗ = "ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка,
		|	ВариантыОтчетов.КлючОбъекта,
		|	ВариантыОтчетов.ПредставлениеОбъекта
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов";
		
		Запрос = Новый Запрос(ТЗ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИмяОтчета   = Выборка.КлючОбъекта;
			
			Если ИзмененныеОбъектыДанных <> Неопределено тогда
				ИзменИмяОтчета = ИзмененныеОбъектыДанных[ИмяОтчета];
				Если ИзменИмяОтчета <> Неопределено тогда
					ИмяОтчета = ИзменИмяОтчета;
				КонецЕсли;
			КонецЕсли;
			
			ИмяОтчета   = СтрЗаменить(ИмяОтчета, "Отчет.", "");
			ОтчетМетаданные = Метаданные.Отчеты.Найти(ИмяОтчета);
			Если ОтчетМетаданные = Неопределено тогда
				ОбъектВариантаОтчета = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектВариантаОтчета.ПометкаУдаления = истина;
				ОбъектВариантаОтчета.Записать();
			Иначе
				Если Выборка.ПредставлениеОбъекта <> ОтчетМетаданные.Синоним или Выборка.КлючОбъекта <> "Отчет." + ОтчетМетаданные.Имя тогда
					ОбъектВариантаОтчета = Выборка.Ссылка.ПолучитьОбъект();
					ОбъектВариантаОтчета.КлючОбъекта          = "Отчет." + ОтчетМетаданные.Имя;
					ОбъектВариантаОтчета.ПредставлениеОбъекта = ОтчетМетаданные.Синоним;
					ОбъектВариантаОтчета.ПометкаУдаления = ложь;
					ОбъектВариантаОтчета.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦИкла;
		
		//Обновим варианты
		
		СписокОшибокПриОбновлении = Новый Массив;
		
		СписокКлючейПредопределенныхВариантов = Новый СписокЗначений;
		ОтчетыБезСКД = Новый Массив;
		                                         
		СписокОтчетов = ВариантыОтчетовПереопределяемый.СписокОтчетовПоддерживаемыхПодсистемой();
		СоответсвиеОтчетаПодсистемам = ВариантыОтчетов.ПолучитьСписокПодсистемОтчетов();
		
		ДанныеОПодсистемахВариантов = Новый Структура("СоответствиеПодсистемИВариантов, НеИспользоватьПодсистемуОтчета");
		ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов = Новый ТаблицаЗначений;
		ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Колонки.Добавить("Ключ");
		ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Колонки.Добавить("ПутьКПодсистеме");
		
		ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета = Новый ТаблицаЗначений;
		ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.Колонки.Добавить("Ключ");
		ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.Колонки.Добавить("ПутьКПодсистеме");
		
		ОписаниеВариантов = Новый Соответствие;
		ЗначениеНастроекДопВариантов = Новый Соответствие;
		СписокДопВариантов = Новый СписокЗначений;
		
		Для каждого Отчет из Метаданные.Отчеты Цикл
			
			ПолноеИмяОтчета = Отчет.ПолноеИмя(); 
			
			Если СписокОтчетов.НайтиПоЗначению(ПолноеИмяОтчета) = Неопределено тогда
				Продолжить;
			КонецЕсли;
			
			Если Отчет.ОсновнаяСхемаКомпоновкиДанных <> Неопределено тогда
				Макет = Отчет.ОсновнаяСхемаКомпоновкиДанных.Имя;
				СКД = Отчеты[Отчет.Имя].ПолучитьМакет(Макет);
				Для каждого Вариант из СКД.ВариантыНастроек Цикл
					СписокКлючейПредопределенныхВариантов.Добавить(Отчет.ПолноеИмя() + "\" + Вариант.Имя, Вариант.Представление);
				КонецЦикла;
			Иначе
				СписокКлючейПредопределенныхВариантов.Добавить(ПолноеИмяОтчета + "\_СсылкаНаОтчет", Отчет.Синоним);
				ОтчетыБезСКД.Добавить(ПолноеИмяОтчета);
			КонецЕсли;
			
			ДобавитьВДопНастройки(ПолноеИмяОтчета, ОписаниеВариантов, ДанныеОПодсистемахВариантов, СписокДопВариантов, ЗначениеНастроекДопВариантов);
			
		КонецЦикла;
		
		Для каждого Вариант из СписокДопВариантов Цикл
			
			НомерСимвола = Найти(Вариант.Значение, "\");
			ПолноеИмяОтчета = Лев(Вариант.Значение, НомерСимвола-1);
			
			СписокКлючейПредопределенныхВариантов.Добавить(Вариант.Значение, Вариант.Представление);
			
		КонецЦикла;
		
		// получил три списка вариантов в справочнике отчетов.
		
		ВариантыДляОбновления      = Новый СписокЗначений;
		НовыеВариантыДляДобавления = Новый СписокЗначений;
		ВариантыНеИспользуемые     = Новый Массив;
		
		Для каждого Вариант из СписокКлючейПредопределенныхВариантов Цикл
			НовыеВариантыДляДобавления.Добавить(Вариант.Значение, Вариант.Представление);
		КонецЦикла;
		
		ТЗ = "ВЫБРАТЬ
		     |	ВариантыОтчетов.Ссылка,
		     |	ВариантыОтчетов.КлючОбъекта + ""\"" + ВариантыОтчетов.КлючВарианта КАК КлючОбъекта,
		     |	ВариантыОтчетов.ТипВариантаОтчета
		     |ИЗ
		     |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		     |ГДЕ
		     |	(ВариантыОтчетов.ТипВариантаОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыВариантовОтчетов.Предопределенный)
		     |			ИЛИ ВариантыОтчетов.ТипВариантаОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыВариантовОтчетов.Отчет))";
			 
		Запрос = Новый Запрос(ТЗ);
	 	УстановитьПривилегированныйРежим(истина);
		Выборка = Запрос.Выполнить().Выбрать();
	 	УстановитьПривилегированныйРежим(ложь);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.Предопределенный тогда
				ЭлементСписка = СписокКлючейПредопределенныхВариантов.НайтиПоЗначению(Выборка.КлючОбъекта);
			Иначе
				ЭлементСписка = СписокКлючейПредопределенныхВариантов.НайтиПоЗначению(Выборка.КлючОбъекта+"_СсылкаНаОтчет");
			КонецЕсли;
			
			Если ЭлементСписка = Неопределено тогда
				ВариантыНеИспользуемые.Добавить(Выборка.Ссылка);
			Иначе
				ВариантыДляОбновления.Добавить(Выборка.Ссылка, ЭлементСписка.Представление);
				Если Выборка.ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.Предопределенный тогда
					ИсключаемыйВариант = НовыеВариантыДляДобавления.НайтиПоЗначению(Выборка.КлючОбъекта);
				Иначе
					ИсключаемыйВариант = НовыеВариантыДляДобавления.НайтиПоЗначению(Выборка.КлючОбъекта+"_СсылкаНаОтчет");
				КонецЕсли;
				
				НовыеВариантыДляДобавления.Удалить(ИсключаемыйВариант);
			КонецЕсли;
		КонецЦикла;
		
		// обновляем существующие варианты
		
		Для каждого Вариант из ВариантыДляОбновления Цикл
			
			ВариантОбъект = Вариант.Значение.Ссылка.Получитьобъект();
			
			ВариантОбъект.Наименование    = Вариант.Представление;
			ВариантОбъект.Описание        = ОписаниеВариантов[ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта];
			ВариантОбъект.Видимость       = истина;
			ВариантОбъект.ПометкаУдаления = ложь;
			
			//удалим ссылки на подсистемы
			МассивПредопределенныхПодсистем = ВариантОбъект.Подсистемы.НайтиСтроки(Новый Структура("Предопределенная", истина));
			Для каждого Подсистема из МассивПредопределенныхПодсистем Цикл
				ВариантОбъект.Подсистемы.Удалить(Подсистема);
			КонецЦикла;
			
			// добавим подсистемы отчета
			МассивПодсистем = СоответсвиеОтчетаПодсистемам.НайтиСтроки(Новый Структура("Отчет", ВариантОбъект.КлючОбъекта));
			
			Для каждого Подсистема из МассивПодсистем Цикл
				
				СтруктураПоиска = Новый Структура("Ключ, ПутьКПодсистеме", ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта, Подсистема.ПутьКПодсистеме);
				НеИспользоватьПодсистемуОтчета = ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.НайтиСтроки(СтруктураПоиска);
				
				Если НеИспользоватьПодсистемуОтчета.Количество() = 0 тогда 
					СтрокаПодсистемы            = ВариантОбъект.Подсистемы.Добавить(); 
					СтрокаПодсистемы.Подсистема = Подсистема.ПутьКПодсистеме;
					СтрокаПодсистемы.Название   = Подсистема.НазваниеПодсистемы;
					СтрокаПодсистемы.Предопределенная = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// добавим подсистемы варианта	
			МассивПодсистем = ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.НайтиСтроки(Новый Структура("Ключ", ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта));
		
			Для каждого Подсистема из МассивПодсистем Цикл
				
				ПодсистемаМетаДанные = Метаданные.НайтиПоПолномуИмени("Подсистема." + СтрЗаменить(Подсистема.ПутьКПодсистеме, "\", ".Подсистема."));
				НазваниеПодсистемы = "";
				Если ПодсистемаМетаДанные <> Неопределено тогда
					НазваниеПодсистемы = ПодсистемаМетаДанные.Представление();
				КонецЕсли;
				СтрокаПодсистемы            = ВариантОбъект.Подсистемы.Добавить(); 
				СтрокаПодсистемы.Подсистема = Подсистема.ПутьКПодсистеме;
				СтрокаПодсистемы.Название   = НазваниеПодсистемы;
				
				//Метаданные.Подсистемы.Маркетинг.Подсистемы.КонкурентнаяРазведка.ПолноеИмя()
				СтрокаПодсистемы.Предопределенная = Истина;
			КонецЦикла;
			
			ВариантОбъект.ПометкаУдаления = Ложь;

			Если СписокДопВариантов.НайтиПоЗначению(ВариантОбъект.КлючОбъекта) <> Неопределено тогда
				ВариантОбъект.ХранилищеЗначений = ЗначениеНастроекДопВариантов[ВариантОбъект.КлючОбъекта];
			КонецЕсли;
			
			ВариантОбъект.Записать();          
			
		КонецЦикла;
		
		Администратор = ВариантыОтчетов.ТекущийПользователь();
		
		// добавить новые варианты
		Для каждого Вариант из НовыеВариантыДляДобавления Цикл
			
			ВариантОбъект              = Справочники.ВариантыОтчетов.СоздатьЭлемент();
			
			Если Найти(Вариант.Значение, "_СсылкаНаОтчет") = 0 тогда
				ВариантОбъект.ТипВариантаОтчета  = Перечисления.ТипыВариантовОтчетов.Предопределенный;
				НомерПозиции = Найти(Вариант.Значение, "\");
				КлючОбъекта  = Лев(Вариант.Значение, НомерПозиции-1);
				КлючВарианта = СтрЗаменить(Вариант.Значение, КлючОбъекта + "\" , "");
			Иначе
				ВариантОбъект.ТипВариантаОтчета  = Перечисления.ТипыВариантовОтчетов.Отчет;
				КлючОбъекта = СтрЗаменить(Вариант.Значение, "\_СсылкаНаОтчет", "");
				КлючВарианта = "";
			КонецЕсли;
			
			ИмяОтчета   = КлючОбъекта;
			
			Если ИзмененныеОбъектыДанных <> Неопределено тогда
				ИзменИмяОтчета = ИзмененныеОбъектыДанных[ИмяОтчета];
				Если ИзменИмяОтчета <> Неопределено тогда
					ИмяОтчета = ИзменИмяОтчета;
				КонецЕсли;
			КонецЕсли;
			
			ИмяОтчета       = СтрЗаменить(ИмяОтчета, "Отчет.", "");
			ОтчетМетаданные = Метаданные.Отчеты.Найти(ИмяОтчета);
			Если ОтчетМетаданные <> Неопределено тогда
				ВариантОбъект.ПредставлениеОбъекта = ОтчетМетаданные.Синоним;
			КонецЕсли;
			
			ВариантОбъект.КлючОбъекта   = КлючОбъекта;
			ВариантОбъект.КлючВарианта  = КлючВарианта;
			ВариантОбъект.Наименование  = Вариант.Представление;
			ВариантОбъект.Описание      = ОписаниеВариантов[Вариант.Значение];
			ВариантОбъект.Видимость     = истина;
			
			МассивПодсистем = СоответсвиеОтчетаПодсистемам.НайтиСтроки(Новый Структура("Отчет", ВариантОбъект.КлючОбъекта));
			
			Для каждого Подсистема из МассивПодсистем Цикл
				
				СтруктураПоиска = Новый Структура("Ключ, ПутьКПодсистеме", ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта, Подсистема.ПутьКПодсистеме);
				НеИспользоватьПодсистемуОтчета = ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.НайтиСтроки(СтруктураПоиска);
				
				Если НеИспользоватьПодсистемуОтчета.Количество() = 0 тогда 
					СтрокаПодсистемы            = ВариантОбъект.Подсистемы.Добавить(); 
					СтрокаПодсистемы.Подсистема = Подсистема.ПутьКПодсистеме;
					СтрокаПодсистемы.Название   = Подсистема.НазваниеПодсистемы;
					СтрокаПодсистемы.Предопределенная = Истина;
				КонецЕсли;
			КонецЦикла;
				
			// добавим подсистемы варианта	
			МассивПодсистем =  ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.НайтиСтроки(Новый Структура("Ключ", ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта));
		
			Для каждого Подсистема из МассивПодсистем Цикл
				ПодсистемаМетаДанные = Метаданные.НайтиПоПолномуИмени("Подсистема." + СтрЗаменить(Подсистема.ПутьКПодсистеме, "\", ".Подсистема."));
				НазваниеПодсистемы = "";
				Если ПодсистемаМетаДанные <> Неопределено тогда
					НазваниеПодсистемы = ПодсистемаМетаДанные.Представление();
				КонецЕсли;
				
				СтрокаПодсистемы            = ВариантОбъект.Подсистемы.Добавить(); 
				СтрокаПодсистемы.Подсистема = Подсистема.ПутьКПодсистеме;
				СтрокаПодсистемы.Название   = НазваниеПодсистемы;
				СтрокаПодсистемы.Предопределенная = Истина;
			КонецЦикла;
			
			ВариантОбъект.Администратор = Администратор;

			Если СписокДопВариантов.НайтиПоЗначению(ВариантОбъект.КлючОбъекта) <> Неопределено тогда
				ВариантОбъект.ХранилищеЗначений = ЗначениеНастроекДопВариантов.Получить(ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта);
			КонецЕсли;
			
			ВариантОбъект.Записать();
			
		КонецЦикла;
		
		// добавить новые варианты
		Для каждого Вариант из ВариантыНеИспользуемые Цикл
			ВариантОбъект = Вариант.Получитьобъект();
			ВариантОбъект.УстановитьПометкуУдаления(истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение	
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Обновление вариантов отчетов'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат истина;
КонецФункции

//////////////////////////////////////////////////////////////////
// РАБОТА С ДОПОЛНИТЕЛЬНЫМИ НАСТРОЙКАМИ

// Процедура добавляет вариант отчета в подсистему. Использовать эту процедуру нужно в функции
// общего модуля ВариантыОтчетовПереопределяемый отчета КомандныйИнтерфейс
// Параметры:
//			ДопНастройки    - параметр настройки процедуры НастройкиОтчетов
//			Ключ            - общий ключ варианта отчета "Отчет.Взаиморасчеты\Основной"
//			ПутьКПодсистеме - Путь к подсистеме, к которой вариант привязывается
//
// Пример кода:
//	
//	Функция КомандныйИнтерфейс() Экспорт
//		ДанныеОПодсистемахВариантов = ВариантыОтчетов.НоваяСтруктураКомандногоИнтерфейса();
//		ВариантыОтчетов.ДобавитьПодсистемуВариантаВДопНастройках(Настройки, "Отчет.ДинамикаИзмененийФайлов\СводнаяДиаграммаИзменения", "Администрирование");
//		Возврат ДанныеОПодсистемахВариантов;
//	КонецФункции
//
Процедура ДобавитьПодсистемуВариантаВДопНастройках(ДопНастройки, Ключ, ПутьКПодсистеме) Экспорт
	
	Если ДопНастройки = Неопределено или Ключ = "" или ПутьКПодсистеме = "" тогда
		Возврат;   
	КонецЕсли;
	
	СтрокаПодсистемы      = ДопНастройки.СоответствиеПодсистемИВариантов.Добавить();
	СтрокаПодсистемы.Ключ = Ключ;
	СтрокаПодсистемы.ПутьКПодсистеме = ПутьКПодсистеме;
	
Конецпроцедуры

// Процедура удаляет вариант отчета из подсистемы. Использовать эту процедуру нужно в процедуре
// менеджера отчета НастройкиОтчета.
// Параметры:
//			ДопНастройки    - параметр настройки процедуры НастройкиОтчетов
//			Ключ            - общий ключ варианта отчета "Отчет.Взаиморасчеты\Основной"
//			ПутьКПодсистеме - Путь к подсистеме, к которой вариант привязывается
//
// Пример кода:
//	
//	Процедура НастройкиОтчета(Настройки) Экспорт
//		ВариантыОтчетов.ДобавитьПодсистемуВариантаВДопНастройках(Настройки, "Отчет.ДинамикаИзмененийФайлов\СводнаяДиаграммаИзменения", "Администрирование");
//	КонецПроцедуры
//
Процедура УдалитьПодсистемуВариантаВДопНастройках(ДопНастройки, Ключ, ПутьКПодсистеме) Экспорт
	
	Если ДопНастройки = Неопределено или Ключ = "" или ПутьКПодсистеме = "" тогда
		Возврат;   
	КонецЕсли;
	
	СтрокаНеИспПодсистем      = ДопНастройки.НеИспользоватьПодсистемыОтчета.Добавить();
	СтрокаНеИспПодсистем.Ключ = Ключ;
	СтрокаНеИспПодсистем.ПутьКПодсистеме = ПутьКПодсистеме;
	
КонецПроцедуры

// Процедура используется для добавления вариантов отчетов в отчеты не на СКД. Использовать эту процедуру нужно в процедуре
// менеджера отчета НастройкиОтчета.
// Параметры:
//			ДопНастройки      - параметр настройки процедуры НастройкиОтчетов
//			Ключ              - общий ключ варианта отчета "Отчет.Взаиморасчеты\Основной"
//			Представление     - Представление варианта отчета
//			ЗначениеНастройки - Путь к подсистеме, к которой вариант привязывается
//
// Пример кода:
//	
//	Процедура НастройкиОтчета(Настройки) Экспорт
//		ВариантыОтчетов.ДобавитьПредопределенныйВариантВДопНастройках(Настройки, "Отчет.ОСВ\ПОСчету50", "Кассовые операции", Новый Структура("Счет", 50);
//	КонецПроцедуры
//
Процедура ДобавитьПредопределенныйВариантВДопНастройках(ДопНастройки, Ключ, Представление, ЗначениеНастройки) Экспорт
	
	Если ДопНастройки = Неопределено или Ключ = "" или Представление = "" тогда
		Возврат;   
	КонецЕсли;
	
	ДопНастройки.ПредопределенныеВариантыБезСКД.Добавить(Ключ, Представление);
	ДопНастройки.ЗначенияНастроекОтчетовБезСКД.Вставить(Ключ, ЗначениеНастройки);
	
КонецПроцедуры

// Процедура используется для установки описания варианта отчета. Использовать эту процедуру нужно в процедуре
// менеджера отчета НастройкиОтчета.
// Параметры:
//			ДопНастройки - параметр настройки процедуры НастройкиОтчетов
//			Ключ         - общий ключ варианта отчета "Отчет.Взаиморасчеты\Основной"
//			Описание     - описание варианта отчета
//
// Пример кода:
//	
//	Процедура НастройкиОтчета(Настройки) Экспорт
//		ВариантыОтчетов.УстановитьОписаниеВариантаВДопНастройках(Настройки, "Отчет.ОСВ\ПОСчету50", "Кассовые операции за текущий месяц");
//	КонецПроцедуры
//
Процедура УстановитьОписаниеВариантаВДопНастройках(ДопНастройки, Ключ, Описание) Экспорт
	
	ДопНастройки.ОписаниеВариантов.Вставить(Ключ, Описание);
	
КонецПроцедуры


// Функция возвращает структуру данных для переопределения командного интерфейса
//
Функция НоваяСтруктураКомандногоИнтерфейса() Экспорт
		
	ДанныеОПодсистемахВариантов = Новый Структура("СоответствиеПодсистемИВариантов, НеИспользоватьПодсистемыОтчета");
	ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов = Новый ТаблицаЗначений;
	ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Колонки.Добавить("Ключ");
	ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Колонки.Добавить("ПутьКПодсистеме");
	
	ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемыОтчета = Новый ТаблицаЗначений;
	ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемыОтчета.Колонки.Добавить("Ключ");
	ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемыОтчета.Колонки.Добавить("ПутьКПодсистеме");
	
	Возврат ДанныеОПодсистемахВариантов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВНУТРЕННИЕ ПРОЦЕДУРЫ ПОДСИСТЕМЫ

// Функция возвращает список значений подсистем отчетов. Функция используется во внутренних целях подсистемы.
//
Функция ПолучитьСписокПодсистемОтчетов() Экспорт
	
	СоответствиеПодсистемОтчетам = Новый ТаблицаЗначений;
	СоответствиеПодсистемОтчетам.Колонки.Добавить("Отчет");
	СоответствиеПодсистемОтчетам.Колонки.Добавить("ПутьКПодсистеме");
	СоответствиеПодсистемОтчетам.Колонки.Добавить("НазваниеПодсистемы");
	СоответствиеПодсистемОтчетам.Колонки.Добавить("Пояснение");
	
	Для каждого Подсистема из Метаданные.Подсистемы Цикл
		Если Не Подсистема.ВключатьВКомандныйИнтерфейс тогда
			Продолжить;
		КонецЕсли;
		Путь = Подсистема.Имя;
		ДобавитьОтчетыПодсистемы(Подсистема, СоответствиеПодсистемОтчетам, Путь);
	КонецЦикла;
	
	Возврат СоответствиеПодсистемОтчетам;
	
КонецФункции

// Функция возвращает список виртуальных подсистем. Функция используется во внутренних целях подсистемы.
//
Функция ПолучитьВиртуальныеПодсистемы(ПутьПодсистемы) Экспорт
	
	ПодсистемыВиртуальные = Новый СписокЗначений;
	
	ПутиИПодсистем = ПолучитьПутьВиртуальныхПодсистем();
	
	Для каждого ЗначениеПути из ПутиИПодсистем Цикл
		
		Если ЗначениеПути.Значение.ПутьПодсистемы = ПутьПодсистемы тогда
			ПодсистемыВиртуальные.Добавить(ЗначениеПути.Значение.ПутьПодсистемы+"\"+ ЗначениеПути.Значение.ИмяПодсистемы, ЗначениеПути.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодсистемыВиртуальные;
	
КонецФункции

// Функция возвращает список подсистем (разделов). Функция используется во внутренних целях подсистемы.
//
Функция ПолучитьСписокПодсистем(ПутиПодсистемы, ДеревоПодсистем) Экспорт
	
	СписокПодсистем =  Новый СписокЗначений;
	
	Для каждого Подсистема из Метаданные.Подсистемы Цикл
		
		Если Не Подсистема.ВключатьВКомандныйИнтерфейс тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКПодсистеме = Подсистема.Имя;
		
		ПодсистемаПрисутствует = ложь;
		
		Для каждого ЭлементПодсистемы из ПутиПодсистемы Цикл
			ПутьПодсистемы = ЭлементПодсистемы.Значение;
			Если Найти(ПутьКПодсистеме, ПутьПодсистемы) > 0 тогда
				ПодсистемаПрисутствует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПодсистемаПрисутствует тогда
			СтрокаДереваПодсистем            = ДеревоПодсистем.Строки.Добавить();
			СтрокаДереваПодсистем.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистем.Название   = Подсистема.Синоним;
			
			ЕстьПравоПросмотра  = ПравоДоступа("Просмотр", Подсистема);
			Если НЕ ЕстьПравоПросмотра тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыФункциональнаяОпция = Новый Структура("");
			
			ДоступенПоФункциональнаяОпцияОпциям = ложь;
			СодержитсяВФункциональнаяОпция = ложь;
			Для каждого ФункциональнаяОпция из Метаданные.ФункциональныеОпции Цикл
				
				Если ФункциональнаяОпция.Состав.Найти(Подсистема) = Неопределено тогда
					Продолжить;
				КонецЕсли;
				
				СодержитсяВФункциональнаяОпция = Истина;
				
				ЗначениеФункциональнаяОпция = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, ПараметрыФункциональнаяОпция);
				Если ТипЗнч(ЗначениеФункциональнаяОпция) = Тип("Булево") тогда
					Если ЗначениеФункциональнаяОпция тогда
						ДоступенПоФункциональнаяОпцияОпциям = истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СодержитсяВФункциональнаяОпция И НЕ ДоступенПоФункциональнаяОпцияОпциям тогда
				Продолжить;
			КонецЕсли;
			
			
			СтрокаПодсистемы = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение      = ПутьКПодсистеме;
			СтрокаПодсистемы.Представление = Подсистема.Синоним;
			ДобавитьДеревоПодсистем(СписокПодсистем, Подсистема, ПутьКПодсистеме, СтрокаДереваПодсистем);
		КонецЕсли;
		
	КонецЦикла;
	
	ВиртуальныеПодсистемы = ПолучитьВиртуальныеПодсистемы(Подсистема);
	
	Для каждого Подсистема из ВиртуальныеПодсистемы Цикл
		
		ПутьКПодсистеме = Подсистема.Значение;
		
		ПодсистемаПрисутствует = ложь;
		
		Для каждого ЭлементПодсистемы из ПутиПодсистемы Цикл
			ПутьПодсистемы = ЭлементПодсистемы.Значение;
			Если Найти(ПутьКПодсистеме, ПутьПодсистемы) > 0 тогда
				ПодсистемаПрисутствует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПодсистемаПрисутствует тогда
			
			СтрокаДереваПодсистем            = ДеревоПодсистем.Строки.Добавить();
			СтрокаДереваПодсистем.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистем.Название   = Подсистема.Представление;

			СтрокаПодсистемы = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение = Подсистема.Значение;
			СтрокаПодсистемы.Представление = Подсистема.Представление;
			ДобавитьДеревоВиртуальныхПодсистем(СписокПодсистем, Подсистема.Значение, СтрокаДереваПодсистем);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПодсистем;
	
КонецФункции

// Функция применяется для облегчения гибридного встраивания подсистемы. Функция используется во внутренних целях подсистемы.
//
Функция ТекущийПользователь() Экспорт
	
	Возврат ОбщегоНазначения.ТекущийПользователь();
	
КонецФункции

// Заменяет запрещенные символы в именах элементов формы на их допустимые аналоги
//
Функция ЗаменитьЗапрещенныеСимволы(Знач СтрокаДляЗамены) Экспорт
	
	СтрокаРезультат = СтрокаДляЗамены;
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ".", "_Точка_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ",", "_Зап_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "\", "_Слэш_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "-", "_Тирэ_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, " ", "_П_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "!", "_Воскл_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "@", "_Соб_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "№", "_Ном_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ";", "_ТЗап_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "%", "_Проц_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ":", "_ДвТ_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "?", "_Воп_");
   	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "*", "_Звезд_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "(", "_ОСк_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ")", "_ЗСк_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "=", "_Рав_");

	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "~", "_Вол_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "`", "_Ап_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "#", "_Реш_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "$", "_Дол_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "^", "_Степ_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "&", "_Анд_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "{", "_ОФС_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "{", "_ЗФС_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "[", "_ОКС_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "[", "_ЗКС_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, """", "_Кав_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "'", "_ОКав_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "|", "_Пал_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "\", "_ПСл_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "/", "_ОСл_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ">", "_Бол_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "<", "_Мен_");
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Функция возвращает шаблон заполнения для доп. настроек отчета. Функция используется во внутренних целях подсистемы.
//
Функция ПолучитьСтруктуруДополнительныхНастроек() Экспорт
	
	ДополнительныеНастройки = Новый Структура("ПредопределенныеВариантыБезСКД,
								 |ЗначенияНастроекОтчетовБезСКД,
								 |ОписаниеВариантов");
	
	ДополнительныеНастройки.ПредопределенныеВариантыБезСКД = Новый СписокЗначений;
	ДополнительныеНастройки.ЗначенияНастроекОтчетовБезСКД = Новый Соответствие;
	
	ДополнительныеНастройки.ОписаниеВариантов = Новый Соответствие;

	Возврат ДополнительныеНастройки;
	
КонецФункции

Процедура ДобавитьОтчетыПодсистемы(Подсистема, СоответствиеПодсистемОтчетам, Знач Путь)

	Для каждого ОбъектМетаданных из Подсистема.Состав Цикл
		
		Если ОбъектМетаданных = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если Найти(ПолноеИмя, "Отчет.") <> 0 Тогда
			
			СтрокаДанных = СоответствиеПодсистемОтчетам.Добавить();
			СтрокаДанных.Отчет              = ПолноеИмя;
			СтрокаДанных.ПутьКПодсистеме    = Путь;
			СтрокаДанных.НазваниеПодсистемы = Подсистема.Синоним; 
			СтрокаДанных.Пояснение          = Подсистема.Пояснение; 
			
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого Подсистема из Подсистема.Подсистемы Цикл
		Если Не Подсистема.ВключатьВКомандныйИнтерфейс тогда
			Продолжить;
		КонецЕсли;
		ДобавитьОтчетыПодсистемы(Подсистема, СоответствиеПодсистемОтчетам, Путь + "\" + Подсистема.Имя);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПутьВиртуальныхПодсистем()
	
	СписокЗначений = Новый СписокЗначений;
	
	СписокВиртуальныхПодсистем = ВариантыОтчетовПереопределяемый.ОписаниеВиртуальныхПодсистем();
	
	Для каждого Подсистема из СписокВиртуальныхПодсистем Цикл
		
		НомерПозицииПоследнегоРазделителя = 0;
		
		ДлинаПути = СтрДлина(Подсистема.Значение);
		
		Для Сч = 1 по ДлинаПути Цикл
			
			Если КодСимвола(Подсистема.Значение, Сч) = КодСимвола("\") тогда
				
				НомерПозицииПоследнегоРазделителя = Сч;
				
			КонецЕсли;
		КонецЦикла;
		
		ПутьПодсистемы     = Лев(Подсистема.Значение, НомерПозицииПоследнегоРазделителя-1);
		ИмяПодсистемы      = Прав(Подсистема.Значение, ДлинаПути -НомерПозицииПоследнегоРазделителя);
		НазваниеПодсистемы = Подсистема.Представление;
		
		СписокЗначений.Добавить(Новый Структура("ПутьПодсистемы, ИмяПодсистемы", ПутьПодсистемы, ИмяПодсистемы), НазваниеПодсистемы);
		
	КонецЦикла;
	
	Возврат СписокЗначений;
КонецФункции

 Процедура ДобавитьДеревоПодсистем(СписокПодсистем, Подсистема, Знач ПутьПодсистемы, СтрокаДереваПодсистем)
	
	Для каждого ПодсистемаПодчиненная из Подсистема.Подсистемы Цикл
		
		Если Не ПодсистемаПодчиненная.ВключатьВКомандныйИнтерфейс тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьПравоПросмотра  = ПравоДоступа("Просмотр", ПодсистемаПодчиненная);
		Если НЕ ЕстьПравоПросмотра тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыФункциональнаяОпция = Новый Структура("");
		
		ДоступенПоФункциональнаяОпцияОпциям = ложь;
		СодержитсяВФункциональнаяОпция = ложь;
		Для каждого ФункциональнаяОпция из Метаданные.ФункциональныеОпции Цикл
			
			Если ФункциональнаяОпция.Состав.Найти(ПодсистемаПодчиненная.Имя) = Неопределено тогда
				Продолжить;
			КонецЕсли;
			
			СодержитсяВФункциональнаяОпция = Истина;
			
			ЗначениеФункциональнаяОпция = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, ПараметрыФункциональнаяОпция);
			Если ТипЗнч(ЗначениеФункциональнаяОпция) = Тип("Булево") тогда
				Если ЗначениеФункциональнаяОпция тогда
					ДоступенПоФункциональнаяОпцияОпциям = истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СодержитсяВФункциональнаяОпция И НЕ ДоступенПоФункциональнаяОпцияОпциям тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКПодсистеме = ПутьПодсистемы + "\" + ПодсистемаПодчиненная.Имя;
		
		Если Найти(ПутьКПодсистеме, ПутьПодсистемы) > 0 тогда
			СтрокаДереваПодсистемПодчиненная            = СтрокаДереваПодсистем.Строки.Добавить();
			СтрокаДереваПодсистемПодчиненная.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистемПодчиненная.Название   = ПодсистемаПодчиненная.Синоним;
			
			СтрокаПодсистемы = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение = ПутьКПодсистеме;
			СтрокаПодсистемы.Представление = ПодсистемаПодчиненная.Синоним;
			ДобавитьДеревоПодсистем(СписокПодсистем, ПодсистемаПодчиненная, ПутьКПодсистеме, СтрокаДереваПодсистемПодчиненная);
		КонецЕсли;
	КонецЦикла;
	
	ВиртуальныеПодсистемы = ПолучитьВиртуальныеПодсистемы(ПутьПодсистемы);
	
	Для каждого ПодсистемаПодчиненная из ВиртуальныеПодсистемы Цикл
		
		ПутьКПодсистеме = ПодсистемаПодчиненная.Значение;
		
		Если Найти(ПутьКПодсистеме, ПутьПодсистемы) > 0 тогда
			СтрокаДереваПодсистемПодчиненная            = СтрокаДереваПодсистем.Строки.Добавить();
			СтрокаДереваПодсистемПодчиненная.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистемПодчиненная.Название   = ПодсистемаПодчиненная.Представление;
			
			СтрокаПодсистемы               = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение      = ПодсистемаПодчиненная.Значение;
			СтрокаПодсистемы.Представление = ПодсистемаПодчиненная.Представление;
			ДобавитьДеревоВиртуальныхПодсистем(СписокПодсистем, ПодсистемаПодчиненная.Значение, СтрокаДереваПодсистемПодчиненная);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДеревоВиртуальныхПодсистем(СписокПодсистем, Знач Подсистема, СтрокаДереваПодсистем)
	
	ВиртуальныеПодсистемы = ПолучитьВиртуальныеПодсистемы(Подсистема);
	
	Для каждого ПодсистемаПодчиненная из ВиртуальныеПодсистемы Цикл
		
		ПутьКПодсистеме = ПодсистемаПодчиненная.Значение;
		Если Найти(ПутьКПодсистеме, Подсистема) > 0 тогда
			СтрокаДереваПодсистемПодчиненная            = СтрокаДереваПодсистем.Строки.Добавить();
			СтрокаДереваПодсистемПодчиненная.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистемПодчиненная.Название   = Подсистема.Представление;
			
			СтрокаПодсистемы = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение = ПодсистемаПодчиненная.Значение;
			СтрокаПодсистемы.Представление = ПодсистемаПодчиненная.Представление;
			ДобавитьДеревоВиртуальныхПодсистем(СписокПодсистем, ПодсистемаПодчиненная.Значение, СтрокаДереваПодсистемПодчиненная);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВДопНастройки(ИмяОтчета, ОписаниеВариантов, ДанныеОПодсистемахВариантов, СписокДопВариантов, ЗначениеНастроекДопВариантов)
	
	ДанныеДополнительныхНастроек = ПолучитьСтруктуруДополнительныхНастроек();
	
	Отчеты[СтрЗаменить(ИмяОтчета, "Отчет.", "")].НастройкиОтчета(ДанныеДополнительныхНастроек);
	
	//ОписаниеВариантов
	Для каждого ОписаниеВарианта из ДанныеДополнительныхНастроек.ОписаниеВариантов Цикл
		ОписаниеВариантов.Вставить(ИмяОтчета + "\" + ОписаниеВарианта.Ключ, ОписаниеВарианта.Значение);
	КонецЦикла;
	
	//ПредопределенныеВариантыБезСКД
	Для каждого ВариантБезСКД из ДанныеДополнительныхНастроек.ПредопределенныеВариантыБезСКД Цикл
		СписокДопВариантов.Добавить(ИмяОтчета + "\" + ВариантБезСКД.Значение, ВариантБезСКД.Представление);
	КонецЦикла;
	
	//ПредопределенныеВариантыБезСКД
	Для каждого ЗначениеВариантаБезСКД из ДанныеДополнительныхНастроек.ЗначенияНастроекОтчетовБезСКД Цикл
		ЗначениеНастроекДопВариантов.Вставить(ИмяОтчета + "\" + ВариантБезСКД.Ключ, ВариантБезСКД.Значение);
	КонецЦикла;
	
	ДанныеДополнительныхНастроек = ВариантыОтчетовПереопределяемый.КомандныйИнтерфейс();
	
	//СоответствиеПодсистемИВариантов
	Для каждого ДанныеОПодсистеме из ДанныеДополнительныхНастроек.СоответствиеПодсистемИВариантов Цикл
		СтрокаПодсистемы = ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Добавить();
		СтрокаПодсистемы.Ключ = ДанныеОПодсистеме.Ключ;
		СтрокаПодсистемы.ПутьКПодсистеме = ДанныеОПодсистеме.ПутьКПодсистеме;
	КонецЦикла;
	
	//СоответствиеПодсистемИВариантов
	Для каждого ДанныеОПодсистеме из ДанныеДополнительныхНастроек.НеИспользоватьПодсистемыОтчета Цикл
		СтрокаПодсистемы = ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.Добавить();
		СтрокаПодсистемы.Ключ = ДанныеОПодсистеме.Ключ;
		СтрокаПодсистемы.ПутьКПодсистеме = ДанныеОПодсистеме.ПутьКПодсистеме;
	КонецЦикла;
	
КонецПроцедуры

//Костенюк Александр-Старт 31.08.2012
//-----------------------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов" (сервер)
// 
// Выполняется на сервере.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует список разделов, в которых размещены команды вызова панели отчетов.
//
// Параметры:
//   Нет
//
// Возвращаемое значение: 
//   Результат (ТаблицаЗначений)
//       |- Ссылка        (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//       |- Метаданные    (ОбъектМетаданных)
//       |- Имя           (Строка)
//       |- Представление (Строка)
//
Функция ИспользуемыеРазделы() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка",        Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Результат.Колонки.Добавить("Метаданные",    Новый ОписаниеТипов("ОбъектМетаданных"));
	Результат.Колонки.Добавить("Имя",           ОписаниеТиповСтрока());
	Результат.Колонки.Добавить("Представление", ОписаниеТиповСтрока());
	
	РазделыМетаданные = Новый Массив;
	
	ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов(РазделыМетаданные);
	
	Для Каждого РазделМетаданные Из РазделыМетаданные Цикл
		Строка = Результат.Добавить();
		Строка.Ссылка        = __ОбщегоНазначенияСервер.ИдентификаторОбъектаМетаданных(РазделМетаданные);
		Строка.Метаданные    = РазделМетаданные;
		Строка.Имя           = РазделМетаданные.Имя;
		Строка.Представление = РазделМетаданные.Представление();
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // ИспользуемыеРазделы

// Формирует дерево настроек и размещения предопределенных вариантов отчетов
//   конфигурации, подключенных к подсистеме.
//
// Параметры:
//   Нет
//
// Возвращаемое значение: 
//   ДеревоВариантов (ДеревоЗначений)
//   ---- Реквизиты только для чтения: ----
//       |- Отчет               (*) Полное имя или ссылка на отчет
//       |- Метаданные          (ОбъектМетаданных) Метаданные отчета
//       |- КлючВарианта        (Строка) Имя варианта отчета
//       |- ОписаниеПолучено    (Булево) 
//       |- СистемнаяИнформация (Структура) 
//   ---- Реквизиты для изменения: ----
//       |- Включен      (Булево) Если Ложь, то вариант отчета не регистрируется в подсистеме
//       |- Наименование (Строка) Наименование варианта отчета
//       |- Описание     (Строка) Информация о варианте отчета
//       |- Размещение   (Соответствие) Настройки размещения варианта отчета в разделах
//           |- Ключ     (ОбъектМетаданных) Подсистема, в которой размещается отчет или вариант отчета
//           |- Значение (Строка)           Настройки размещения в подсистеме.
//               |- ""        - Вывод отчета в своей группе обычным шрифтом.
//               |- "Важный"  - Вывод отчета в своей группе жирным шрифтом.
//               |- "СмТакже" - Вывод отчета в группе "См. также".
//
Функция ДеревоНастроекВариантовОтчетовКонфигурации() Экспорт
	
	РеквизитыСправочника = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;
	
	ДеревоВариантов = Новый ДеревоЗначений;
	ДеревоВариантов.Колонки.Добавить("Отчет",               РеквизитыСправочника.Отчет.Тип);
	ДеревоВариантов.Колонки.Добавить("Метаданные",          Новый ОписаниеТипов("ОбъектМетаданных"));
	ДеревоВариантов.Колонки.Добавить("КлючВарианта",        РеквизитыСправочника.КлючВарианта.Тип);
	ДеревоВариантов.Колонки.Добавить("ОписаниеПолучено",    Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Включен",             Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Наименование",        ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("Описание",            ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("Размещение",          Новый ОписаниеТипов("Соответствие"));
	ДеревоВариантов.Колонки.Добавить("СистемнаяИнформация", Новый ОписаниеТипов("Структура"));
	ДеревоВариантов.Колонки.Добавить("ЭтоВариант",          Новый ОписаниеТипов("Булево"));
	
	ПодсистемыОтчетов = РазмещениеОтчетовВПодсистемах();
	ПодключеныВсеОтчеты = ПодключеныВсеОтчеты();
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если НЕ ПодключеныВсеОтчеты
			И (ОтчетМетаданные.ХранилищеВариантов = Неопределено
			ИЛИ ОтчетМетаданные.ХранилищеВариантов.Имя <> "ХранилищеВариантовОтчетов") Тогда
			Продолжить;
		КонецЕсли;
		
		// Настройки отчета
		СтрокаОтчет = ДеревоВариантов.Строки.Добавить();
		СтрокаОтчет.Отчет = __ОбщегоНазначенияСервер.ИдентификаторОбъектаМетаданных(ОтчетМетаданные);
		СтрокаОтчет.Метаданные = ОтчетМетаданные;
		СтрокаОтчет.Включен = Истина;
		СтрокаОтчет.Описание = ОтчетМетаданные.Пояснение;
		СтрокаОтчет.Наименование = ОтчетМетаданные.Представление();
		СтрокаОтчет.СистемнаяИнформация = Новый Структура;
		СтрокаОтчет.СистемнаяИнформация.Вставить("ПостроенНаСКД", ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных <> Неопределено);
		СтрокаОтчет.ОписаниеПолучено = Истина;
		СтрокаОтчет.ЭтоВариант = Ложь;
		
		// Подсистемы отчета
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", ОтчетМетаданные));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаОтчет.Размещение.Вставить(СтрокаПодсистема.ПодсистемаМетаданные, "");
		КонецЦикла;
		
		// Варианты отчета
		Если СтрокаОтчет.СистемнаяИнформация.ПостроенНаСКД Тогда
			ОтчетМенеджер = Отчеты[ОтчетМетаданные.Имя];
			ИмяСхемыКД = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя;
			СхемаКД = ОтчетМенеджер.ПолучитьМакет(ИмяСхемыКД);
			Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
				Вариант = СтрокаОтчет.Строки.Добавить();
				Вариант.Отчет        = СтрокаОтчет.Отчет;
				Вариант.КлючВарианта = ВариантНастроекКД.Имя;
				Вариант.Наименование = ВариантНастроекКД.Представление;
				Вариант.Размещение   = СтрокаОтчет.Размещение;
				Вариант.ЭтоВариант   = Истина;
			КонецЦикла;
		Иначе
			Вариант = СтрокаОтчет.Строки.Добавить();
			Вариант.Отчет        = СтрокаОтчет.Отчет;
			Вариант.КлючВарианта = "";
			Вариант.Наименование = СтрокаОтчет.Наименование;
			Вариант.Размещение   = СтрокаОтчет.Размещение;
			Вариант.ЭтоВариант   = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов(ДеревоВариантов);
	
	Возврат ДеревоВариантов;
КонецФункции // ДеревоНастроекВариантовОтчетовКонфигурации

// Получает ссылку варианта отчета по набору ключевых реквизитов.
//
// Параметры:
//   Отчет        (Соответствует реквизиту справочника) Полное имя или ссылка отчета.
//   КлючВарианта (Соответствует реквизиту справочника) Имя варианта отчета.
//
// Возвращаемое значение: 
//   Результат (СправочникСсылка.ВариантыОтчетов, Неопределено)
//
Функция ПолучитьСсылку(Отчет, КлючВарианта) Экспорт
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ПолучитьСсылку

// Формирует массив отчетов, доступных текущему пользователю.
//
// Возвращаемое значение:
//   Результат (Массив) из (*) см. тип реквизита Отчет справочника ВариантыОтчетов.
//       Ссылки отчетов, доступных текущему пользователю.
//
// Описание:
//   Данный массив следует использовать во всех запросах к таблице
//   справочника "ВариантыОтчетов" как отбор по реквизиту "Отчет",
//   кроме случаев выборки вариантов из внешних отчетов.
//
Функция ОтчетыТекущегоПользователя() Экспорт
	Результат = ВариантыОтчетовПовтИсп.ОтчетыКонфигурацииДоступныеТекущемуПользователю();
	//СтандартныеПодсистемыПереопределяемый.ДобавитьДополнительныеОтчетыДоступныеТекущемуПользователю(Результат);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поддержка переопределяемых модулей

// Формирует описание настроек отчета.
//
// Параметры:
//   ДеревоВариантов (ДеревоЗначений) Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   ОтчетЗначениеИлиМетаданные (...) Метаданные или ссылка отчета.
//       |- (ОбъектМетаданных)
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//
// Возвращаемое значение: 
//   Отчет (СтрокаДереваЗначений)
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//
Функция ОписаниеОтчета(ДеревоВариантов, ОтчетЗначениеИлиМетаданные) Экспорт
	
	ЭтоМетаданные = (ТипЗнч(ОтчетЗначениеИлиМетаданные) = Тип("ОбъектМетаданных"));
	Если ЭтоМетаданные Тогда
		СтрокаОтчет = ДеревоВариантов.Строки.Найти(ОтчетЗначениеИлиМетаданные, "Метаданные", Ложь);
	Иначе
		СтрокаОтчет = ДеревоВариантов.Строки.Найти(ОтчетЗначениеИлиМетаданные, "Отчет", Ложь);
	КонецЕсли;
	
	Если СтрокаОтчет = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения описания отчета ""%1"",
			|он не подключен к подсистеме ""%2""'"),
			СтрокаОтчет.Метаданные.Имя,
			ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы()
		);
	КонецЕсли;
	
	Возврат СтрокаОтчет;
	
КонецФункции // ОписаниеОтчета

// Формирует описание настроек варианта отчета.
//
// Параметры:
//   ДеревоВариантов (ДеревоЗначений) Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   ОтчетСтрокаДереваИлиЗначениеИлиМетаданные (...) Описание настроек, метаданные или ссылка отчета.
//       |- (СтрокаДерева)
//       |- (ОбъектМетаданных)
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//   КлючВарианта (Строка) Имя варианта отчета как оно задано в схеме компоновки данных.
//
// Возвращаемое значение: 
//   Вариант (СтрокаДереваЗначений)
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//
Функция ОписаниеВарианта(ДеревоВариантов, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные, КлючВарианта) Экспорт
	
	Если ТипЗнч(ОтчетСтрокаДереваИлиЗначениеИлиМетаданные) <> Тип("СтрокаДереваЗначений") Тогда
		СтрокаОтчет = ОписаниеОтчета(ДеревоВариантов, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные);
	Иначе
		СтрокаОтчет = ОтчетСтрокаДереваИлиЗначениеИлиМетаданные;
	КонецЕсли;
	
	СтрокаВариант = СтрокаОтчет.Строки.Найти(КлючВарианта, "КлючВарианта", Ложь);
	
	Если СтрокаВариант = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения описания варианта ""%1"" отчета ""%2"",
			|он не подключен к подсистеме ""%3""'"),
			КлючВарианта,
			СтрокаОтчет.Метаданные.Имя,
			ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы()
		);
	КонецЕсли;
	
	Если НЕ СтрокаВариант.ОписаниеПолучено Тогда
		
		// Флажок изменения настроек
		СтрокаВариант.ОписаниеПолучено = Истина;
		
		// Копирование настроек отчета
		СтрокаВариант.Включен = СтрокаОтчет.Включен;
		
		Если СтрокаВариант.КлючВарианта = "" Тогда
			СтрокаВариант.Наименование = СтрокаОтчет.Наименование;
			СтрокаВариант.Описание = СтрокаОтчет.Описание;
		КонецЕсли;
		
		СтрокаВариант.Размещение = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(СтрокаОтчет.Размещение);
		
	КонецЕсли;
	
	Возврат СтрокаВариант;
	
КонецФункции // ОписаниеВарианта

////////////////////////////////////////////////////////////////////////////////
// Для вызова из обработчиков обновления на конкретную версию

// Восстанавливает настройки всех вариантов отчета.
//
// Параметры:
//   Кэш (Неопределено, Структура) Содержит кэш параметров, используемых в процедуре. Заполняется внутри процедуры.
//   ОтчетЗначениеИлиМетаданные (...)
//       |- (ОбъектМетаданных) Метаданные отчета.
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//
Процедура ВосстановитьИсходныеНастройкиОтчета(Кэш, ОтчетЗначениеИлиМетаданные) Экспорт
	
	Если ТипЗнч(Кэш) <> Тип("Структура") Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	
	Если НЕ Кэш.Свойство("ДеревоВариантов") Тогда
		Кэш.Вставить("ДеревоВариантов", ДеревоНастроекВариантовОтчетовКонфигурации());
	КонецЕсли;
	
	СтрокаОтчет = ОписаниеОтчета(Кэш.ДеревоВариантов, ОтчетЗначениеИлиМетаданные);
	Для Каждого СтрокаВариант Из СтрокаОтчет.Строки Цикл
		ВосстановитьИсходныеНастройкиВарианта(Кэш, СтрокаОтчет, СтрокаВариант.КлючВарианта);
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьНастройкиОтчета

// Восстанавливает настройки варианта отчета.
//
// Параметры:
//   Кэш (Неопределено, Структура) Содержит кэш параметров, используемых в процедуре. Заполняется внутри процедуры.
//   ОтчетСтрокаДереваИлиЗначениеИлиМетаданные (...)
//       |- (ОбъектМетаданных) Метаданные отчета.
//       |- (СтрокаДерева)
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//   КлючВарианта (Строка) Имя варианта отчета как оно задано в схеме компоновки данных.
//
Процедура ВосстановитьИсходныеНастройкиВарианта(Кэш, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные, КлючВарианта) Экспорт
	
	Если ТипЗнч(Кэш) <> Тип("Структура") Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	
	Если НЕ Кэш.Свойство("ДеревоВариантов") Тогда
		Кэш.Вставить("ДеревоВариантов", ДеревоНастроекВариантовОтчетовКонфигурации());
	КонецЕсли;
	
	НастройкиВарианта = ОписаниеВарианта(Кэш.ДеревоВариантов, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные, КлючВарианта);
	
	ВариантСсылка = ПолучитьСсылку(НастройкиВарианта.Отчет, КлючВарианта);
	Если ВариантСсылка = Неопределено Тогда
		// Вариант не зарегистрирован, настройки будут установлены при его регистрации
		Возврат;
	КонецЕсли;
	
	ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
	ВариантОбъект.Наименование         = НастройкиВарианта.Наименование;
	ВариантОбъект.Отчет                = НастройкиВарианта.Отчет;
	ВариантОбъект.ТипОтчета            = Перечисления.ТипыОтчетов.Внутренний;
	ВариантОбъект.КлючВарианта         = НастройкиВарианта.КлючВарианта;
	ВариантОбъект.Пользовательский     = Ложь;
	ВариантОбъект.Описание             = НастройкиВарианта.Описание;
	ВариантОбъект.ВидимостьПоУмолчанию = Истина;
	
	ВариантОбъект.Размещение.Очистить();
	ВосстановитьРазмещениеПредопределенногоВариантаОтчета(ВариантОбъект, НастройкиВарианта);
	
	ВариантОбъект.Записать();
	
КонецПроцедуры // ВосстановитьНастройкиВарианта

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет обработчики обновления подсистемы "Варианты отчетов".
//
// Параметры:
//   Обработчики (ТаблицаЗначений) - см. описание функции НоваяТаблицаОбработчиковОбновления
//   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ВариантыОтчетов.Обновить";
	
КонецПроцедуры

// Актуализирует данные справочника "Варианты отчетов".
//
Процедура Обновить() Экспорт
	
	////////////////////////////////////////////////////////////////////////////////
	// План обновления:
	
	Кэш = Новый Структура;
	Кэш.Вставить("ИспользуемыеРазделы", ИспользуемыеРазделы());
	Кэш.Вставить("ПодключеныВсеОтчеты", ПодключеныВсеОтчеты());
	Кэш.Вставить("ДеревоВариантов", ДеревоНастроекВариантовОтчетовКонфигурации());
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Перейти к редакции 2.1, если переход требуется и еще не выполнялся.
	Если НеобходимПереходКРедакции21() Тогда
		ПерейтиКРедакции21(Кэш);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Перенести варианты отчетов из стандартного хранилища.
	//    Выполняется только для пользовательских вариантов отчетов.
	Если Кэш.ПодключеныВсеОтчеты Тогда
		ЗавершитьКонвертациюВариантовОтчетов();
	Иначе
		ПрямаяКонвертацияВариантовОтчетов();
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// 3. Заменить ключи старых вариантов на актуальные.
	//    Выполняется только для предопределенных вариантов отчетов.
	ОбновитьКлючиВариантовОтчетов(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 4. Актуализировать предопределенные варианты отчетов.
	//    Выполняется только для предопределенных вариантов отчетов.
	ОбновитьПредопределенные(Кэш);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Начальное заполнение и актуализация справочника

// Замена старых ключей вариантов отчетов на актуальные
//
Процедура ОбновитьКлючиВариантовОтчетов(Кэш)
	ПредставлениеПроцедуры = НСтр("ru = 'Обновить ключи вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Составить таблицу замен старых ключей вариантов на актуальные.
	ОписаниеТиповРеквизитаКлючВарианта = Метаданные.Справочники.ВариантыОтчетов.Реквизиты.КлючВарианта.Тип;
	
	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Отчет",                 Новый ОписаниеТипов("ОбъектМетаданных"));
	Изменения.Колонки.Добавить("СтароеИмяВарианта",     ОписаниеТиповРеквизитаКлючВарианта);
	Изменения.Колонки.Добавить("АктуальноеИмяВарианта", ОписаниеТиповРеквизитаКлючВарианта);
	
	ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов(Изменения);
	
	Изменения.Колонки.Отчет.Имя = "ОтчетМетаданные";
	Изменения.Колонки.Добавить("Отчет", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	
	// Проверить корректность замен.
	Для Каждого Изменение Из Изменения Цикл
		Изменение.Отчет = __ОбщегоНазначенияСервер.ИдентификаторОбъектаМетаданных(Изменение.ОтчетМетаданные);
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.АктуальноеИмяВарианта));
		Если Найденные.Количество() > 0 Тогда
			Конфликт = Найденные[0];
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Актуальное имя варианта ""%2"" (старое имя ""%3"")
				|так же числится как старое имя ""%4"" (актуальное имя ""%5"").'"),
				Строка(Изменение.Отчет),
				Изменение.АктуальноеИмяВарианта,
				Изменение.СтароеИмяВарианта,
				Конфликт.СтароеИмяВарианта,
				Конфликт.АктуальноеИмяВарианта
			);
		КонецЕсли;
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.СтароеИмяВарианта));
		Если Найденные.Количество() > 2 Тогда
			Конфликт = Найденные[1];
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Старое имя варианта ""%2"" (актуальное имя ""%3"")
				|так же числится как старое имя 
				|варианта отчета ""%4"" (актуальное имя ""%5"").'"),
				Строка(Изменение.Отчет),
				Изменение.СтароеИмяВарианта,
				Изменение.АктуальноеИмяВарианта,
				Строка(Конфликт.ОтчетМетаданные.Представление()),
				Конфликт.АктуальноеИмяВарианта
			);
		КонецЕсли;
	КонецЦикла;
	
	// Получить ссылки вариантов отчетов для замены ключей,
	//   исключив из списка замен те варианты отчетов,
	//   актуальные ключи которых уже зарегистрированы,
	//   или старые ключи которых уже не заняты.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Изменения.Отчет,
	|	Изменения.СтароеИмяВарианта,
	|	Изменения.АктуальноеИмяВарианта
	|ПОМЕСТИТЬ втИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИзменения.Отчет,
	|	втИзменения.АктуальноеИмяВарианта,
	|	ВариантыОтчетовСтарые.Ссылка
	|ИЗ
	|	втИзменения КАК втИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетовАктуальные
	|		ПО втИзменения.Отчет = ВариантыОтчетовАктуальные.Отчет
	|			И втИзменения.АктуальноеИмяВарианта = ВариантыОтчетовАктуальные.КлючВарианта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетовСтарые
	|		ПО втИзменения.Отчет = ВариантыОтчетовСтарые.Отчет
	|			И втИзменения.СтароеИмяВарианта = ВариантыОтчетовСтарые.КлючВарианта
	|ГДЕ
	|	ВариантыОтчетовАктуальные.Ссылка ЕСТЬ NULL 
	|	И НЕ ВариантыОтчетовСтарые.Ссылка ЕСТЬ NULL ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Изменения", Изменения);
	Запрос.Текст = ТекстЗапроса;
	
	// Заменить старые имена вариантов на актуальные.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.КлючВарианта = Выборка.АктуальноеИмяВарианта;
		ВариантОбъект.Записать();
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры // ОбновитьКлючиВариантовОтчетов

// Актуализация предопределенных вариантов отчетов
//
Процедура ОбновитьПредопределенные(Кэш)
	ПредставлениеПроцедуры = НСтр("ru = 'Обновить предопределенные'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Пользовательский = ЛОЖЬ
	|	И ВариантыОтчетов.ТипОтчета = &ТипВнутренний
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантыОтчетов.ПометкаУдаления УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТипВнутренний", Перечисления.ТипыОтчетов.Внутренний);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВариантОбъект = Неопределено;
	
	Кэш.ДеревоВариантов.Колонки.Добавить("НайденВБазеДанных", Новый ОписаниеТипов("Булево"));
	
	// Перебрать варианты из базы данных, удалить неактуальные, привести в соответствие актуальные.
	ПоискВарианта = Новый Структура("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант", , , Ложь, Истина);
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(ПоискВарианта, ВариантОбъект);
		Найденные = Кэш.ДеревоВариантов.Строки.НайтиСтроки(ПоискВарианта, Истина);
		Если Найденные.Количество() = 0 Тогда
			Если НЕ ВариантОбъект.ПометкаУдаления Тогда
				ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
				ВариантОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтрокаВариант = ОписаниеВарианта(Кэш.ДеревоВариантов, ВариантОбъект.Отчет, ВариантОбъект.КлючВарианта);
		СтрокаВариант.НайденВБазеДанных = Истина;
		
		Если СтрокаВариант.Включен = ВариантОбъект.ПометкаУдаления Тогда
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			ВариантОбъект.УстановитьПометкуУдаления(НЕ СтрокаВариант.Включен);
		КонецЕсли;
		
		Если НЕ СтрокаВариант.Включен Тогда
			Продолжить;
		КонецЕсли;
		
		// Реквизиты, для которых требуется жесткое восстановление настроек.
		ВариантОбъект.Наименование    = СтрокаВариант.Наименование;
		ВариантОбъект.Автор           = Неопределено;
		ВариантОбъект.ТолькоДляАвтора = Ложь;
		Если ЗначениеЗаполнено(СтрокаВариант.Описание) Тогда
			ВариантОбъект.Описание = СтрокаВариант.Описание;
		КонецЕсли;
		
		// Мягкое восстановление настроек размещения - без очистки настроек, сделанных в режиме "Предприятие".
		ВосстановитьРазмещениеПредопределенногоВариантаОтчета(ВариантОбъект, СтрокаВариант);
		
		ВариантОбъект.Записать();
	КонецЦикла;
	
	// Добавить варианты, которых нет в базы данных.
	Найденные = Кэш.ДеревоВариантов.Строки.НайтиСтроки(Новый Структура("НайденВБазеДанных, ЭтоВариант", Ложь, Истина), Истина);
	Для Каждого СтрокаВариант Из Найденные Цикл
		НастройкиВарианта = ?(СтрокаВариант.ОписаниеПолучено, СтрокаВариант, СтрокаВариант.Родитель);
		
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		ВариантОбъект.Наименование         = СтрокаВариант.Наименование;
		ВариантОбъект.Отчет                = СтрокаВариант.Отчет;
		ВариантОбъект.ТипОтчета            = Перечисления.ТипыОтчетов.Внутренний;
		ВариантОбъект.КлючВарианта         = СтрокаВариант.КлючВарианта;
		ВариантОбъект.Пользовательский     = Ложь;
		ВариантОбъект.Описание             = СтрокаВариант.Описание;
		ВариантОбъект.ВидимостьПоУмолчанию = Истина;
		
		ВосстановитьРазмещениеПредопределенногоВариантаОтчета(ВариантОбъект, НастройкиВарианта);
		
		ВариантОбъект.Записать();
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры // ОбновитьПредопределенные

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Переход к редакции 2.1

// Определяет необходимость перехода к редакции 2.1
//
Функция НеобходимПереходКРедакции21()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.УдалитьКлючОбъекта <> """"";
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции // НеобходимПереходКРедакции21

// Выполняет конвертацию вариантов для использования в редакции 2.1
//
Процедура ПерейтиКРедакции21(Кэш)
	ПредставлениеПроцедуры = НСтр("ru = 'Перейти к редакции 2.1'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.УдалитьКлючОбъекта КАК ОтчетПолноеИмя
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.УдалитьКлючОбъекта <> """"";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Сформировать информацию об отчете
		ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(Выборка.ОтчетПолноеИмя);
		
		// Проверить результат
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ОшибкаПоВарианту(Выборка.Ссылка, ОтчетИнформация.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.УдалитьПользовательский
			ИЛИ ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.Внешний Тогда
			ВариантОбъект.Пользовательский = Истина;
		Иначе
			ВариантОбъект.Пользовательский = Ложь;
		КонецЕсли;
		
		ВариантОбъект.Отчет = ОтчетИнформация.Отчет;
		ВариантОбъект.ТипОтчета = ОтчетИнформация.ТипОтчета;
		
		Если ОтчетИнформация.ТипОтчета = Перечисления.ТипыОтчетов.Внешний Тогда
			// Установка настроек варианта внешнего отчета, характерных для всех вариантов внешних отчетов.
			// Все варианты внешних отчетов являются пользовательскими поскольку
			// предопределенные варианты внешних отчетов не регистрируются в системе,
			// а зачитываются каждый раз динамически.
			ВариантОбъект.Пользовательский = Истина;
			
			// Варианты внешних отчетов не могут открываться из панели отчетов.
			ВариантОбъект.Размещение.Очистить();
			
		Иначе
			
			Если НЕ Редакция21ПривестиНастройкиПоРазделам(ВариантОбъект, Кэш)
				ИЛИ НЕ Редакция21ПеренестиПользовательскиеНастройкиВРегистр(ВариантОбъект, Кэш) Тогда
				ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
				ВариантОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		// Поставляемые варианты не имеют автора
		Если НЕ ВариантОбъект.Пользовательский Тогда
			ВариантОбъект.Автор = Неопределено;
		КонецЕсли;
		
		ВариантОбъект.УдалитьКлючОбъекта = "";
		ВариантОбъект.УдалитьПредставлениеОбъекта = "";
		ВариантОбъект.УдалитьИсключенияБыстрогоДоступа.Очистить();
		ВариантОбъект.Записать();
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Замена структуры хранения настроек по разделам, переход на ссылки справочника ИОМ.
//   Вызывается только для вариантов внутренних отчетов.
//
Функция Редакция21ПривестиНастройкиПоРазделам(ВариантОбъект, Кэш)
	РазмещениеВарианта = Новый Соответствие;
	
	Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка()));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ПодсистемаПолноеИмя = СтрокаТаблицы.УдалитьПодсистема;
		Если ЗначениеЗаполнено(ПодсистемаПолноеИмя) Тогда
			ПодсистемаПолноеИмя = "Подсистема." + СтрЗаменить(ПодсистемаПолноеИмя, "\", ".Подсистема.");
			ПодсистемаМетаданные = Метаданные.НайтиПоПолномуИмени(ПодсистемаПолноеИмя);
			Если ПодсистемаМетаданные <> Неопределено Тогда
				РазмещениеВарианта.Вставить(__ОбщегоНазначенияСервер.ИдентификаторОбъектаМетаданных(ПодсистемаМетаданные));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВариантОбъект.Размещение.Очистить();
	
	Для Каждого КлючИЗначение Из РазмещениеВарианта Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Ключ) Тогда
			СтрокаТаблицы = ВариантОбъект.Размещение.Добавить();
			СтрокаТаблицы.РазделИлиГруппа = КлючИЗначение.Ключ;
			СтрокаТаблицы.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции // Редакция21ПривестиНастройкиПоРазделам 

// Заполнение регистра "НастройкиВариантовОтчетов".
//   Вызывается только для вариантов внутренних отчетов.
//
Функция Редакция21ПеренестиПользовательскиеНастройкиВРегистр(ВариантОбъект, Кэш)
	ТаблицаПодсистем = ВариантОбъект.Размещение.Выгрузить(Новый Структура("Использование", Истина));
	ТаблицаПодсистем.Свернуть("РазделИлиГруппа");
	
	ТаблицаПользователей = ВариантОбъект.УдалитьИсключенияБыстрогоДоступа.Выгрузить();
	ТаблицаПользователей.Свернуть("Пользователь");
	
	НаборЗаписей = РегистрыСведений.НастройкиВариантовОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Вариант.Установить(ВариантОбъект.Ссылка, Истина);
	
	Для Каждого СтрокаПодсистема Из ТаблицаПодсистем Цикл
		
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл
			
			Запись = НаборЗаписей.Добавить();
			Запись.Активность      = Истина;
			Запись.Вариант         = ВариантОбъект.Ссылка;
			Запись.РазделИлиГруппа = СтрокаПодсистема.РазделИлиГруппа;
			Запись.Пользователь    = СтрокаПользователь.Пользователь;
			Запись.Видимость       = НЕ ВариантОбъект.ВидимостьПоУмолчанию;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	Возврат Истина;
КонецФункции // Редакция21ПеренестиПользовательскиеНастройкиВРегистр

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Перенос вариантов из стандартного хранилища

// Загружает варианты из системного хранилища вариантов в хранилище подсистемы при частичном внедрении.
//
Процедура ПрямаяКонвертацияВариантовОтчетов() Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Прямая конвертация вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Результат, который будет сохранен в хранилище
	ТаблицаВариантов = __ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") ИЛИ ТаблицаВариантов.Количество() = 0 Тогда
		ТаблицаВариантов = Новый ТаблицаЗначений;
		ТаблицаВариантов.Колонки.Добавить("Отчет",     ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Вариант",   ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Автор",     ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Настройка", Новый ОписаниеТипов("ХранилищеЗначения"));
		ТаблицаВариантов.Колонки.Добавить("ПредставлениеОтчета",   ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("ПредставлениеВарианта", ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("ИдентификаторАвтора",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	УдалятьВсе = Истина;
	МассивУдаляемыхКлючейОбъектов = Новый Массив;
	
	ВыборкаХранилища = ХранилищеВариантовОтчетов.Выбрать();
	ОшибокЧтенияПодряд = 0;
	Пока Истина Цикл
		Попытка
			ЭлементВыборкиПолучен = ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд = 0;
		Исключение
			ЭлементВыборкиПолучен = Неопределено;
			ОшибокЧтенияПодряд = ОшибокЧтенияПодряд + 1;
			ОшибкаПоВарианту(
				Неопределено,
				НСтр("ru = 'В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
		Если ЭлементВыборкиПолучен = Ложь Тогда
			Прервать;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Пропуск неподключенных внутренних отчетов.
		ОтчетМетаданные = Метаданные.НайтиПоПолномуИмени(ВыборкаХранилища.КлючОбъекта);
		Если ОтчетМетаданные <> Неопределено Тогда
			ХранилищеМетаданные = ОтчетМетаданные.ХранилищеВариантов;
			Если ХранилищеМетаданные = Неопределено ИЛИ ХранилищеМетаданные.Имя <> "ХранилищеВариантовОтчетов" Тогда
				УдалятьВсе = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Внешние варианты отчетов переносятся все, поскольку для них невозможно определить
		// подключены они к хранилищу подсистемы или нет.
		МассивУдаляемыхКлючейОбъектов.Добавить(ВыборкаХранилища.КлючОбъекта);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ВыборкаХранилища.Пользователь);
		Если ПользовательИБ = Неопределено Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ВыборкаХранилища.Пользователь, Истина);
			Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторПользователя = Пользователь.ИдентификаторПользователяИБ;
		Иначе
			ИдентификаторПользователя = ПользовательИБ.УникальныйИдентификатор;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаВариантов.Добавить();
		СтрокаТаблицы.Отчет     = ВыборкаХранилища.КлючОбъекта;
		СтрокаТаблицы.Вариант   = ВыборкаХранилища.КлючНастроек;
		СтрокаТаблицы.Автор     = ВыборкаХранилища.Пользователь;
		СтрокаТаблицы.Настройка = Новый ХранилищеЗначения(ВыборкаХранилища.Настройки, Новый СжатиеДанных(9));
		СтрокаТаблицы.ПредставлениеВарианта = ВыборкаХранилища.Представление;
		СтрокаТаблицы.ИдентификаторАвтора   = ИдентификаторПользователя;
		Если ОтчетМетаданные = Неопределено Тогда
			СтрокаТаблицы.ПредставлениеОтчета = ВыборкаХранилища.КлючОбъекта;
		Иначе
			СтрокаТаблицы.ПредставлениеОтчета = ОтчетМетаданные.Представление();
		КонецЕсли;
	КонецЦикла;
	
	// Очистка стандартного хранилища
	Если УдалятьВсе Тогда
		ХранилищеВариантовОтчетов.Удалить(Неопределено, Неопределено, Неопределено);
	Иначе
		Для Каждого КлючОбъекта Из МассивУдаляемыхКлючейОбъектов Цикл
			ХранилищеВариантовОтчетов.Удалить(КлючОбъекта, Неопределено, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	// Результат выполнения
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
	
	// Загрузка вариантов в хранилище подсистемы
	ЗавершитьКонвертациюВариантовОтчетов(ТаблицаВариантов);
	
КонецПроцедуры // ПрямаяКонвертацияВариантовОтчетов()

// Загружает в хранилище подсистемы варианты отчетов, предварительно сохраненные
// из системного хранилища вариантов в хранилище общих настроек.
// Используется для загрузки вариантов отчетов при полном или частичном внедрении.
// При полном внедрении может вызваться из обработки "ПереносВариантовОтчетов".
//
// Параметры:
//   ТаблицаВариантов (ТаблицаЗначений) Необязательный. Используется в системных целях.
//
Процедура ЗавершитьКонвертациюВариантовОтчетов(ТаблицаВариантов = Неопределено) Экспорт
	
	Если ТаблицаВариантов = Неопределено Тогда
		ТаблицаВариантов = __ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") ИЛИ ТаблицаВариантов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПроцедуры = НСтр("ru = 'Завершить конвертацию вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Замена имен колонок под структуру справочника
	ТаблицаВариантов.Колонки.Отчет.Имя = "ОтчетПолноеИмя";
	ТаблицаВариантов.Колонки.Вариант.Имя = "КлючВарианта";
	ТаблицаВариантов.Колонки.ПредставлениеВарианта.Имя = "Наименование";
	
	// Преобразование имен отчетов в ссылки справоничка ИОМ
	ТаблицаВариантов.Колонки.Добавить("Отчет", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	ТаблицаВариантов.Колонки.Добавить("Определен", Новый ОписаниеТипов("Булево"));
	ТаблицаВариантов.Колонки.Добавить("ТипОтчета", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.ТипОтчета.Тип);
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(СтрокаТаблицы.ОтчетПолноеИмя);
		
		// Проверить результат
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ОшибкаПоВарианту(Неопределено, ОтчетИнформация.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Определен = Истина;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОтчетИнформация, "Отчет, ТипОтчета");
	КонецЦикла;
	
	ТаблицаВариантов.Сортировать("ОтчетПолноеИмя Возр, КлючВарианта Возр");
	
	// Существующие варианты отчетов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВариантов.Отчет,
	|	ТаблицаВариантов.ОтчетПолноеИмя,
	|	ТаблицаВариантов.ТипОтчета,
	|	ТаблицаВариантов.КлючВарианта,
	|	ТаблицаВариантов.Автор
	|ПОМЕСТИТЬ втВарианты
	|ИЗ
	|	&ТаблицаВариантов КАК ТаблицаВариантов
	|ГДЕ
	|	ТаблицаВариантов.Определен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВарианты.Отчет,
	|	втВарианты.ОтчетПолноеИмя,
	|	втВарианты.ТипОтчета,
	|	втВарианты.КлючВарианта,
	|	ВариантыОтчетов.Ссылка,
	|	ПользователиПоИмени.Ссылка КАК ПользовательПоИмени
	|ИЗ
	|	втВарианты КАК втВарианты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиПоИмени
	|		ПО втВарианты.Автор = ПользователиПоИмени.Наименование
	|			И (ПользователиПоИмени.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО втВарианты.Отчет = ВариантыОтчетов.Отчет
	|			И втВарианты.КлючВарианта = ВариантыОтчетов.КлючВарианта
	|			И втВарианты.ТипОтчета = ВариантыОтчетов.ТипОтчета";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВариантов", ТаблицаВариантов);
	Запрос.Текст = ТекстЗапроса;
	
	ВариантыБД = Запрос.Выполнить().Выгрузить();
	
	// Авторы вариантов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&Идентификаторы)
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", ТаблицаВариантов.ВыгрузитьКолонку("ИдентификаторАвтора"));
	Запрос.Текст = ТекстЗапроса;
	
	ПользователиПоИдентификатору = Запрос.Выполнить().Выгрузить();
	
	ПодсистемыОтчетов = РазмещениеОтчетовВПодсистемах();
	
	// Загрузка вариантов в хранилище подсистемы
	ОпределенныеВарианты = ТаблицаВариантов.НайтиСтроки(Новый Структура("Определен", Истина));
	Для Каждого СтрокаТаблицы Из ОпределенныеВарианты Цикл
		Найденные = ВариантыБД.НайтиСтроки(Новый Структура("Отчет, КлючВарианта", СтрокаТаблицы.Отчет, СтрокаТаблицы.КлючВарианта));
		ВариантБД = Найденные[0];
		
		// Если вариант уже загружен в справочник "Варианты отчетов" - не загружаем его.
		Если ЗначениеЗаполнено(ВариантБД.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		// СправочникОбъект
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		
		// Уже подготовленные параметры
		ЗаполнитьЗначенияСвойств(ВариантОбъект, СтрокаТаблицы, "Наименование, Отчет, ТипОтчета, КлючВарианта");
		
		// Настройки
		Настройки = СтрокаТаблицы.Настройка;
		Если ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда
			Настройки = Настройки.Получить();
		КонецЕсли;
		ВариантОбъект.Настройки = Новый ХранилищеЗначения(Настройки);
		
		////Костенюк Александр-Закомментировано 21.09.2012
		//// В стандартном хранилище хранятся только пользовательские ВО
		//ВариантОбъект.Пользовательский = Истина;
		//ВариантОбъект.ТолькоДляАвтора = Истина;
		
		//Костенюк Александр-Старт 21.09.2012
		// Предопределенные варианты отчетов
		ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		//Костенюк Александр-Финиш 21.09.2012

		// Автор варианта
		ПользовательПоИД = ПользователиПоИдентификатору.Найти(СтрокаТаблицы.ИдентификаторАвтора, "Идентификатор");
		Если ПользовательПоИД <> Неопределено И ЗначениеЗаполнено(ПользовательПоИД.Пользователь) Тогда
			//ВариантОбъект.Автор = ПользовательПоИД.Пользователь;
			//Костенюк Александр-Старт 21.09.2012
			// Предопределенные отчеты не имеют автора
			Если ПользовательПоИД.Идентификатор = ПустойИдентификатор Тогда 
				ВариантОбъект.Автор = Справочники.Пользователи.ПустаяСсылка(); 
			Иначе
				ВариантОбъект.Автор = ПользовательПоИД.Пользователь;
			КонецЕсли;
			//Костенюк Александр-Финиш 21.09.2012
		ИначеЕсли ВариантБД <> Неопределено И ЗначениеЗаполнено(ВариантБД.ПользовательПоИмени) Тогда
			ВариантОбъект.Автор = ВариантБД.ПользовательПоИмени;
		Иначе
			ОшибкаПоВарианту(
				ВариантОбъект.Ссылка,
				НСтр("ru = 'Вариант ""%1"" отчета ""%2"": не найден автор ""%3""'"),
				ВариантОбъект.Наименование,
				СтрокаТаблицы.ПредставлениеОтчета,
				СтрокаТаблицы.Автор
			);
		КонецЕсли;
		
		//Костенюк Александр-Старт 21.09.2012
		// Предопределенные варианты отчетов
		Если ПользовательПоИД <> Неопределено Тогда
			Если ПользовательПоИД.Идентификатор = ПустойИдентификатор Тогда
				ВариантОбъект.Пользовательский = Ложь;
				ВариантОбъект.ТолькоДляАвтора = Ложь;
			Иначе
				ВариантОбъект.Пользовательский = Истина;
				ВариантОбъект.ТолькоДляАвтора = Истина;
			КонецЕсли;
		Иначе
			ВариантОбъект.Пользовательский = Ложь;
			ВариантОбъект.ТолькоДляАвтора = Ложь;
		КонецЕсли;
		//Костенюк Александр-Финиш 21.09.2012
		
		// Поскольку переносятся пользовательские варианты отчетов,
		// то настройки размещения можно взять только из метаданных отчета.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетПолноеИмя", СтрокаТаблицы.ОтчетПолноеИмя));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаРаздел = ВариантОбъект.Размещение.Добавить();
			СтрокаРаздел.Использование = Истина;
			СтрокаРаздел.РазделИлиГруппа = __ОбщегоНазначенияСервер.ИдентификаторОбъектаМетаданных(СтрокаПодсистема.ПодсистемаМетаданные);
		КонецЦикла;
		
		ВариантОбъект.Записать();
	КонецЦикла;
	
	// Очистка
	__ОбщегоНазначенияСервер.ХранилищеОбщихНастроекУдалить("ПереносВариантовОтчетов", "ТаблицаВариантов", "");
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры // ЗавершитьКонвертациюВариантовОтчетов()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует ссылку и тип отчета по полному имени.
//
// Параметры:
//   ОтчетПолноеИмя (Строка) Полное имя отчета в виде 
//       "Отчет.<ИмяОтчета>" или "ВнешнийОтчет.<ИмяОтчета>"
//
// Возвращаемое значение: 
//   Результат (Структура)
//       |- Отчет
//       |- ТипОтчета
//       |- ОтчетИмя
//       |- ОтчетМетаданные
//       |- ТекстОшибки
//           |- (Неопределено) Если ошибки нет
//           |- (Строка)       Текст ошибки
//
Функция СформироватьИнформациюОбОтчетеПоПолномуИмени(ОтчетПолноеИмя) Экспорт
	Результат = Новый Структура("Отчет, ТипОтчета, ОтчетПолноеИмя, ОтчетИмя, ОтчетМетаданные, ТекстОшибки");
	Результат.ОтчетПолноеИмя = ОтчетПолноеИмя;
	
	ПозияТочки = Найти(ОтчетПолноеИмя, ".");
	Если ПозияТочки = 0 Тогда
		Префикс = "";
		Результат.ОтчетИмя = ОтчетПолноеИмя;
	Иначе
		Префикс = Лев(ОтчетПолноеИмя, ПозияТочки - 1);
		Результат.ОтчетИмя = Сред(ОтчетПолноеИмя, ПозияТочки + 1);
	КонецЕсли;
	
	Если ВРег(Префикс) = "ОТЧЕТ" Тогда
		Результат.ОтчетМетаданные = Метаданные.Отчеты.Найти(Результат.ОтчетИмя);
		Если Результат.ОтчетМетаданные = Неопределено Тогда
			ПредупреждениеПоВарианту(
				Неопределено,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Отчет ""%1"" не найден в программе,
					|он будет значиться как внешний.'"),
					ОтчетПолноеИмя
				)
			);
			Результат.ОтчетПолноеИмя = "ВнешнийОтчет." + Результат.ОтчетИмя;
		КонецЕсли;
	ИначеЕсли ВРег(Префикс) = "ВНЕШНИЙОТЧЕТ" Тогда
		// Дополнительных проверок не требуется
	Иначе
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для отчета ""%1"" невозможно определить тип (не установлен префикс).'"),
			ОтчетПолноеИмя
		);
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.ОтчетМетаданные = Неопределено Тогда
		Результат.Отчет = Результат.ОтчетПолноеИмя;
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Внешний;
		//СтандартныеПодсистемыПереопределяемый.ЗаменитьТипИСсылкуЕслиОтчетДополнительный(Результат);
	Иначе
		Если НЕ ПравоДоступа("Просмотр", Результат.ОтчетМетаданные) Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав доступа к отчету ""%1"".'"),
				ОтчетПолноеИмя
			);
		КонецЕсли;
		
		Результат.Отчет = __ОбщегоНазначенияСервер.ИдентификаторОбъектаМетаданных(Результат.ОтчетМетаданные);
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // СформироватьИнформациюОбОтчетеПоПолномуИмени

// Формирует таблицу размещения отчетов по подсистемам конфигурации.
//
// Параметры:
//   Результат          (Неопределено) Используется для рекурсии.
//   ПодсистемаРодитель (Неопределено) Используется для рекурсии.
//
// Возвращаемое значение: 
//   Результат (ТаблицаЗначений)
//       |- ОтчетМетаданные
//       |- ОтчетПолноеИмя
//       |- ПодсистемаМетаданные
//       |- ПодсистемаПолноеИмя
//
Функция РазмещениеОтчетовВПодсистемах(Результат = Неопределено, ПодсистемаРодитель = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		ПолноеИмяОписаниеТипов = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.Реквизиты.ПолноеИмя.Тип;
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ОтчетМетаданные",      Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ОтчетПолноеИмя",       ПолноеИмяОписаниеТипов);
		Результат.Колонки.Добавить("ПодсистемаМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ПодсистемаПолноеИмя",  ПолноеИмяОписаниеТипов);
		
		ПодсистемаРодитель = Метаданные;
	КонецЕсли;
	
	// Перебор вложенных подсистем родителя
	Для Каждого ПодсистемаМетаданные Из ПодсистемаРодитель.Подсистемы Цикл
		Если НЕ ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс Тогда
			Продолжить;
		КонецЕсли;
		
		// Состав подсистемы
		Для Каждого ОтчетМетаданные Из ПодсистемаМетаданные.Состав Цикл
			Если НЕ Метаданные.Отчеты.Содержит(ОтчетМетаданные) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.ОтчетМетаданные      = ОтчетМетаданные;
			СтрокаТаблицы.ОтчетПолноеИмя       = ОтчетМетаданные.ПолноеИмя();
			СтрокаТаблицы.ПодсистемаМетаданные = ПодсистемаМетаданные;
			СтрокаТаблицы.ПодсистемаПолноеИмя  = ПодсистемаМетаданные.ПолноеИмя();
			
		КонецЦикла;
		
		РазмещениеОтчетовВПодсистемах(Результат, ПодсистемаМетаданные);;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // РазмещениеОтчетовВПодсистемах

// Восстановление настроек табличной части "Размещение" предопределенного варианта отчета.
//   Для перезаписи настроек табличная часть "Размещение" должна быть очищена до вызова.
//
// Параметры:
//   ВариантОбъект (СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура)
//
Функция ВосстановитьРазмещениеПредопределенногоВариантаОтчета(ВариантОбъект, ОписаниеВарианта) Экспорт
	АктуальныеПодсистемыВарианта = Новый Массив;
	
	// Регистрация актуальных подсистем
	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		
		Подсистема = __ОбщегоНазначенияСервер.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		
		АктуальныеПодсистемыВарианта.Добавить(Подсистема);
		
		Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", Подсистема));
		Если Найденные.Количество() = 0 Тогда
			СтрокаТаблицы = ВариантОбъект.Размещение.Добавить();
			СтрокаТаблицы.РазделИлиГруппа = Подсистема;
			СтрокаТаблицы.Использование   = Истина;
		Иначе
			СтрокаТаблицы = Найденные[0];
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.Предопределенная Тогда
			СтрокаТаблицы.Предопределенная = Истина;
			СтрокаТаблицы.Важный  = (КлючИЗначение.Значение = "Важный");
			СтрокаТаблицы.СмТакже = (КлючИЗначение.Значение = "СмТакже");
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление неактуальных подсистем
	Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("Предопределенная", Истина));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Если АктуальныеПодсистемыВарианта.Найти(СтрокаТаблицы.РазделИлиГруппа) = Неопределено Тогда
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции // ВосстановитьРазмещениеПредопределенногоВариантаОтчета

// Определяет доступность объекта метаданных по функциональным опциям.
//   Вызывающие функции кэшированы в целях оптимизации.
//
// Параметры:
//   ОбъектМетаданных (ОбъектМетаданных)
//
// Возвращаемое значение: 
//   (Булево) Истина если объект доступен.
//
Функция ОбъектМетаданныхДоступенПоФункциональнымОпицям(ОбъектМетаданных) Экспорт
	Содержится = Ложь;
	Доступен = Ложь;
	
	Параметры = Новый Структура;
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Если ФункциональнаяОпция.Состав.Содержит(ОбъектМетаданных) Тогда
			Содержится = Истина;
			Значение = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, Параметры);
			Если Значение = Истина Тогда
				Доступен = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ Содержится ИЛИ Доступен;
КонецФункции // ОбъектМетаданныхДоступенПоФункциональнымОпицям

// Добавляет подсистемы родителя с фильтром по правам доступа и функциональным опциям.
//
Процедура ДобавитьПодсистемыТекущегоПользователя(РодительСтрока, РодительМетаданные = Неопределено, РазделСсылка = Неопределено) Экспорт
	ДляКорневойСтроки = (РодительМетаданные = Неопределено);
	ПриоритетРодителя = ?(ДляКорневойСтроки, "", РодительСтрока.Приоритет + ".");
	Подсистемы = ?(ДляКорневойСтроки, ИспользуемыеРазделы(), РодительМетаданные.Подсистемы);
	Приоритет = 0;
	Для Каждого Подсистема Из Подсистемы Цикл
		ПодсистемаМетаданные = ?(ТипЗнч(Подсистема) = Тип("ОбъектМетаданных"), Подсистема, Подсистема.Метаданные);
		Если ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс
			И ПравоДоступа("Просмотр", ПодсистемаМетаданные)
			И ОбъектМетаданныхДоступенПоФункциональнымОпицям(ПодсистемаМетаданные) Тогда
			
			Приоритет = Приоритет + 1;
			
			СтрокаДерева = РодительСтрока.Строки.Добавить();
			СтрокаДерева.Ссылка        = __ОбщегоНазначенияСервер.ИдентификаторОбъектаМетаданных(ПодсистемаМетаданные);
			СтрокаДерева.Имя           = ПодсистемаМетаданные.Имя;
			СтрокаДерева.ПолноеИмя     = ПодсистемаМетаданные.ПолноеИмя();
			СтрокаДерева.Представление = ПодсистемаМетаданные.Представление();
			СтрокаДерева.РазделСсылка  = ?(ДляКорневойСтроки, СтрокаДерева.Ссылка, РазделСсылка);
			СтрокаДерева.Приоритет     = ПриоритетРодителя + Формат(Приоритет, "ЧЦ=4; ЧДЦ=0; ЧВН=; ЧГ=0");
			Если СтрЧислоВхождений(ПриоритетРодителя, ".") > 2 Тогда
				СтрокаДерева.ПолноеПредставление = РодительСтрока.Представление + ": " + СтрокаДерева.Представление;
			Иначе
				СтрокаДерева.ПолноеПредставление = СтрокаДерева.Представление;
			КонецЕсли;
			
			ДобавитьПодсистемыТекущегоПользователя(СтрокаДерева, ПодсистемаМетаданные, СтрокаДерева.РазделСсылка);
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ДобавитьПодсистемыТекущегоПользователя 

// Формирует описание типов Строка заданной длины.
//
Функция ОписаниеТиповСтрока(ДлинаСтроки = 1000) Экспорт
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
КонецФункции

// По составу ролей определяет полные права к данным подсистемы.
//
Функция ПолныеПраваНаВарианты() Экспорт
	//Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеВариантовОтчетов");
	Возврат Пользователи.РолиДоступны("ПолныеПрава");
КонецФункции

// Проверяет свободно ли наименование варианта отчета.
//
Функция НаименованиеЗанято(Отчет, Ссылка, Наименование) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.Наименование = &Наименование
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Проверяет свободен ли ключ варианта отчета.
//
Функция КлючВариантаЗанят(Отчет, Ссылка, КлючВарианта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Определяет способ внедрения подсистемы.
//
Функция ПодключеныВсеОтчеты() Экспорт
	Возврат (Метаданные.ХранилищеВариантовОтчетов <> Неопределено И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом подсистем из форм

// Добавляет элементы условного оформления дерева подсистем.
//
Процедура ДеревоПодсистемДобавитьУсловноеОформление(ЭтаФорма) Экспорт
	ЭтаФорма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить(ВариантыОтчетовКлиентСервер.ПредставлениеВажный());
	ЭтаФорма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить(ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже());
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("ДеревоПодсистем.Приоритет", "");
	
	Оформление = Новый Соответствие;
	Оформление.Вставить("ТолькоПросмотр", Истина);
	
	Поля = "ДеревоПодсистем";
	
	ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля);
	
	Оформление = Новый Соответствие;
	Оформление.Вставить("Отображать", Ложь);
	
	Поля = "ДеревоПодсистемИспользование, ДеревоПодсистемВажность";
	
	ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля);
	
КонецПроцедуры // ФормаЭлементаСоздатьУсловноеОформлениеДляРазделов

// Добавляет элемент условного оформления.
//
Функция ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля)
	ЭлементУсловногоОформленияКД = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияКД.Использование = Истина;
	
	Для Каждого КлючИЗначение Из Отборы Цикл
		ЭлементОтбораКД = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ЭлементОтбораКД.ПравоеЗначение = КлючИЗначение.Значение;
		ЭлементОтбораКД.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Оформление Цикл
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ),
			КлючИЗначение.Значение
		);
	КонецЦикла;
	
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля, ",");
	КонецЕсли;
	Для Каждого Поле Из Поля Цикл
		ОформляемоеПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
		ОформляемоеПолеКД.Использование = Истина;
		ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции // ДобавитьЭлементУсловногоОформления

// Формирует дерево подсистем по данным варианта-основания.
//
Функция ДеревоПодсистемСформировать(ЭтаФорма, ВариантОснование) Экспорт
	ДеревоИсточник = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
	
	ДеревоПриемник = ЭтаФорма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
	ДеревоПриемник.Строки.Очистить();
	
	ДобавитьПодсистемыВДерево(ДеревоПриемник, ДеревоИсточник, ВариантОснование);
	
	Возврат ДеревоПриемник;
КонецФункции // ДеревоПодсистемСформировать

// Добавляет строки дерева-источника в строки дерева-приемника.
//
Процедура ДобавитьПодсистемыВДерево(ПриемникРодитель, ИсточникРодитель, ВариантОснование)
	Для Каждого Источник Из ИсточникРодитель.Строки Цикл
		
		Приемник = ПриемникРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		
		Найденные = ВариантОснование.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", Приемник.Ссылка));
		Если Найденные.Количество() > 0 Тогда
			СтрокаТаблицы = Найденные[0];
			Если СтрокаТаблицы.Важный Тогда
				Приемник.ВажностьПоУмолчанию = ВариантыОтчетовКлиентСервер.ПредставлениеВажный();
			ИначеЕсли СтрокаТаблицы.СмТакже Тогда
				Приемник.ВажностьПоУмолчанию = ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже();
			Иначе
				Приемник.ВажностьПоУмолчанию = "";
			КонецЕсли;
			
			Приемник.ИспользованиеПоУмолчанию = ?(СтрокаТаблицы.Использование, 1, 0);
		КонецЕсли;
		
		Приемник.Важность      = Приемник.ВажностьПоУмолчанию;
		Приемник.Использование = Приемник.ИспользованиеПоУмолчанию;
		
		// Рекурсия
		ДобавитьПодсистемыВДерево(Приемник, Источник, ВариантОснование);
	КонецЦикла;
КонецПроцедуры

// Сохраняет настройки размещения, измененные пользователем в табличную часть варианта отчета.
//
// Параметры:
//   ЭтаФорма      (УправляемаяФорма)
//   ВариантОбъект (СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура)
//   Кэш           (Структура) Необязательный.
//
Процедура ДеревоПодсистемЗаписать(ЭтаФорма, ВариантОбъект, Кэш = Неопределено) Экспорт
	Если Кэш <> Неопределено И Кэш.Свойство("ИзмененияПодсистем") Тогда
		ИзмененияПодсистем = Кэш.ИзмененияПодсистем;
	Иначе
		ДеревоПриемник = ЭтаФорма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
		ИзмененияПодсистем = ДеревоПриемник.Строки.НайтиСтроки(Новый Структура("ИзмененПользователем", Истина), Истина);
		Если Кэш <> Неопределено Тогда
			Кэш.Вставить("ИзмененияПодсистем", ИзмененияПодсистем);
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененияПодсистем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Изменение Из ИзмененияПодсистем Цикл
		СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Найти(Изменение.Ссылка, "РазделИлиГруппа");
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Если Изменение.Использование = 0 Тогда
				Продолжить;
			Иначе
				СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Добавить();
				СтрокаТабличнойЧасти.РазделИлиГруппа = Изменение.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Изменение.Использование <> Изменение.ИспользованиеПоУмолчанию Тогда
			Если Изменение.Использование = 0 Тогда
				СтрокаТабличнойЧасти.Использование = Ложь;
			ИначеЕсли Изменение.Использование = 1 Тогда
				СтрокаТабличнойЧасти.Использование = Истина;
			Иначе
				// Оставить как есть
			КонецЕсли;
		КонецЕсли;
		
		Если Изменение.Важность <> Изменение.ВажностьПоУмолчанию ИЛИ Изменение.ВажностьПоУмолчанию = "" Тогда
			Если Изменение.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеВажный() Тогда
				СтрокаТабличнойЧасти.Важный  = Истина;
				СтрокаТабличнойЧасти.СмТакже = Ложь;
			ИначеЕсли Изменение.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже() Тогда
				СтрокаТабличнойЧасти.Важный  = Ложь;
				СтрокаТабличнойЧасти.СмТакже = Истина;
			Иначе
				СтрокаТабличнойЧасти.Важный  = Ложь;
				СтрокаТабличнойЧасти.СмТакже = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ДеревоПодсистемЗаписать 

////////////////////////////////////////////////////////////////////////////////
// Журнал регистрации

// Запись ошибки в журнале регистрации по варианту отчета.
//
Процедура ОшибкаПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)
		)
	);
КонецПроцедуры

// Запись информации в журнале регистрации по варианту отчета.
//
Процедура ИнформацияПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)
		)
	);
КонецПроцедуры

// Запись предупреждения в журнале регистрации по варианту отчета.
//
Процедура ПредупреждениеПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)
		)
	);
КонецПроцедуры

// Записывает в журнал регистрации событие запуска процедуры и открывает транзакцию.
//
Процедура ЗапускПроцедуры(ПредставлениеПроцедуры)
	ИнформацияПоВарианту(Неопределено, НСтр("ru = 'Запуск процедуры ""%1"".'"), ПредставлениеПроцедуры);
	НачатьТранзакцию();
КонецПроцедуры

// Записывает в журнал регистрации событие завершения процедуры и фиксирует транзакцию.
//
Процедура ЗавершениеПроцедуры(ПредставлениеПроцедуры)
	ЗафиксироватьТранзакцию();
	ИнформацияПоВарианту(Неопределено, НСтр("ru = 'Завершение процедуры ""%1"".'"), ПредставлениеПроцедуры);
КонецПроцедуры

//-------------------------------------------------------------------------------------------------
//Костенюк Александр-Финиш 31.08.2012
