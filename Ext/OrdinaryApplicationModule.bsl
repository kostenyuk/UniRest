Перем глОбщиеЗначения Экспорт;

Перем глТекущийПользователь Экспорт;
Перем глТекущаяГруппаПользователей Экспорт;

Перем глЗапрашиватьПодтверждениеПриЗакрытии Экспорт;

Перем глСерверТО Экспорт;
Перем мКлиентOnline;

Перем глСерверFrontOffice Экспорт;


// GUARDANT ------------------------------------------------------------------------------

Перем глЗащОтключитьЗащиту Экспорт;
Перем глСИСПроверкаЗащитыУспешна Экспорт;
Перем глСИСЗащитаИнициализирована Экспорт;
Перем глСИС_Ext2k Экспорт;
Перем глЗащМодуль Экспорт;

Перем глЗащПубличныйКлюч Экспорт;
Перем глЗащПриватКлючЧтения Экспорт;
Перем глЗащВерсия Экспорт;
Перем глЗащСерийник Экспорт;
Перем глЗащХэшСерийника Экспорт;
Перем глЗащХэшСрокаДействияЛицензий Экспорт;
Перем глЗащСтрокаСрокаДействияЛицензий Экспорт;
Перем глЗащМодификаторИндексаДляДат;
Перем глЗащЗашифрованныеСписки Экспорт;

Перем глЗащПриватКлючЧтенияБаза1;
Перем глЗащПриватКлючЧтенияБаза2;
Перем глЗащПарольФайлаЗащиты1;
Перем глЗащПарольФайлаЗащиты2;
Перем глЗащИмяФайлаЗащиты;
Перем глЗащМодификаторПароляОсновнойЧастиФайла;

Перем глЗащМодульИзКонфы Экспорт;
Перем глЗащВерсияИзКонфы Экспорт;

// GUARDANT ------------------------------------------------------------------------------


// Если пользователь заблокирован тогда ложь иначе истина
//Перем глСостояниеСеанса Экспорт;

// СтандартныеПодсистемы

// СтандартныеПодсистемы.БазоваяФункциональность

// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 
// Признак того, что в данном сеансе не нужно повторно предлагать установку
Перем ПредлагатьУстановкуРасширенияРаботыСФайлами Экспорт;
// Признак того, что в данном сеансе не нужно запрашивать стандартное подтверждение при выходе
Перем ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Экспорт;
// Структура параметров для клиентской логики по завершению работы в программе.
Перем ПараметрыРаботыКлиентаПриЗавершении Экспорт;
// Структура, содержащая в себе время начала и окончания обновления программы.
Перем ПараметрыРаботыКлиентаПриОбновлении Экспорт;

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// Перед началом работы системы.
//
Процедура ПередНачаломРаботыСистемы(Отказ)

	ТекущийРежим     = Константы.РежимЗавершенияРаботыПользователей.Получить();
	РежимыЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей;
	
	Если ПравоДоступа("Изменение", Метаданные.Константы.РежимЗавершенияРаботыПользователей) Тогда
		Возврат;
	ИначеЕсли ТекущийРежим = РежимыЗавершения.ПрекратитьРаботуБезусловно
		  Или ТекущийРежим = РежимыЗавершения.ЗавершитьССохранениемДанныхПользователей Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПередНачаломРаботыСистемы(Отказ);
	// Конец СтандартныеПодсистемы

	УправлениеПользователями.ПроверитьВозможностьРаботыПользователя(Отказ);
	ЗавершениеРаботыПользователей.ПроверитьВозможностьРаботыПользователяВРежимеЗавершенияРаботыПользователей(Отказ);
	
КонецПроцедуры

// При начале работы системы.
//
Процедура ПриНачалеРаботыСистемы()

	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы

	глТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	глТекущаяГруппаПользователей = ПараметрыСеанса.ТекущаяГруппаПользователей;
	ПараметрыСеанса.ТекущийКомпьютер  = ПолучитьСерверТО().ПолучитьКомпьютерТО();

	ПервыйЗапуск = ПустаяСтрока(Константы.НомерВерсииКонфигурации.Получить());
	
	// ОбновлениеИнформационнойБазы
	Если ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	//Если ПервыйЗапуск Тогда
	//	ОткрытьФорму("Обработка.ПомощникЗаполненияНастроекИСправочников.Форма.Форма");
	//	Возврат;
	//КонецЕсли;
	
	// Настройки и права доступа пользователя.	
	УправлениеПользователями.СоздатьКЭШНастроекПользователя();
	
	// процедура обновления параметров сеанса
	ОбменДаннымиВызовСервера.ОбновитьКэшМеханизмаРегистрацииОбъектов();
	
	// Front-office.
	ВключенFrontOffice = Ложь;
	FrontOffice.ЗапускFrontOfficeИнтерфейса(ВключенFrontOffice);
	ПараметрыСеанса.глВключенFrontOffice = ВключенFrontOffice;

	Если ВключенFrontOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Файловая ИБ
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
	Если ЭтоФайловаяИБ Тогда
					
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если (глТекущийПользователь = ПользовательДляВыполненияРеглЗаданий) Тогда
			
			// С интервалом секунд вызываем процедуру работы с регламентными заданиями.
			ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
			
			ИнтервалДляОпроса = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
			
			Если (ИнтервалДляОпроса = Неопределено) Или (ИнтервалДляОпроса = 0) Тогда
				
				ИнтервалДляОпроса = 60;	
				
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПриНачалеРаботыСистемы()

// Перед завершением работы системы.
//
Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	//Если (Не глЗапрашиватьПодтверждениеПриЗакрытии = Ложь) Или (FrontOffice.FrontOfficeАктивен()) Тогда
	Если (Не глЗапрашиватьПодтверждениеПриЗакрытии = Ложь) Тогда //Костенюк Александр 10.06.2013
		ЗапрашиватьПотверждение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ЗапрашиватьПодтверждениеПриЗакрытии");
		
		Если (Не ЗапрашиватьПотверждение = Неопределено) И ЗапрашиватьПотверждение Тогда
			Если Не((Не ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.ПолныеПрава)) И ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Менеджер)) Тогда
			ТекстЛокализованый = НСтр("ru='Завершить работу с программой?';uk='Завершити роботу з програмою'");
			Ответ = Вопрос(ТекстЛокализованый, РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		
		// Отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы.
		//ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
			
	КонецЕсли;	


// GUARDANT ------------------------------------------------------------------------------

	//GUARDANT_ПриЗавершенииРаботыСистемы(Отказ);

// GUARDANT ------------------------------------------------------------------------------

КонецПроцедуры


// Процедура служит для поддержки работы регламентных заданий в файловой версии.
//
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом.
//
Процедура ПроверкаОбменаДанными() Экспорт

	Если (глЗначениеПеременной("глОбработкаАвтоОбменДанными") = Неопределено) Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// Проводим обмен данными.
	глЗначениеПеременной("глОбработкаАвтоОбменДанными").ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));

КонецПроцедуры


// Функция возвращает значение экспортных переменных модуля приложенийа
//
// Параметры:
//  Имя - строка, содержит имя переменной целиком.
//
// Возвращаемое значение:
//   Значение соответствующей экспортной переменной.
//
Функция глЗначениеПеременной(Имя) Экспорт
		
	Возврат ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры:
//  Имя - строка, содержит имя переменной целиком;
// 	Значение - значение переменной.
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, глОбщиеЗначения, Значение, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры


// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновлениеИнформационнойБазыУдалить() Экспорт

	// Проверка необходимости обновления информационной базы.
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить()="");
	
	Если НЕ ПустаяСтрока(Метаданные.Версия) и   Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		Если ПервыйЗапуск тогда
			//Обработка первого запуска
		Иначе
			ТекстЛокализованый = НСтр("ru='Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.';uk='Змінився номер конфігурації. Буде виконано поновлення інформаційної бази'");
			Предупреждение(ТекстЛокализованый);
		КонецЕслИ;
	Иначе
		Возврат;
	КонецЕсли;

	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
	 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
	 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИнформационнойБазы) Тогда
        ТекстЛокализованый = НСтр("ru='Недостаточно прав для выполнения обновления. Работа системы будет завершена.';uk='Недостатньо прав для виконання поновлення. Роботу системи буде завершено'");
		Предупреждение(ТекстЛокализованый);
		глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
		ЗавершитьРаботуСистемы();
		Возврат;
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		ТекстЛокализованый = НСтр("ru='Не удалось установить монопольный режим. Работа системы будет завершена.';uk='Не вдалося встановити монопольний режим. Роботу системи буде завершено!'");
		Предупреждение(ТекстЛокализованый );
		глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
		ЗавершитьРаботуСистемы();
		Возврат;
	КонецПопытки;

	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

	// Откючение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		ТекстЛокализованый = НСтр("ru='Обновление информационной базы не выполнено.';uk='Поновлення інформаційної бази не виконано'");
		Сообщить(ТекстЛокализованый, СтатусСообщения.Важное);
		ТекстЛокализованый = НСтр("ru='Не выполнено обновление информационной базы! Завершить работу системы?';uk='Не виконано поновлення інформаційної бази! Завершити роботу системи?'");
		Ответ = Вопрос(ТекстЛокализованый, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
		КонецЕсли;
		
	ИначеЕсли ПервыйЗапуск Тогда
		ТекстЛокализованый = НСтр("ru='Начальное заполнение информационной базы выполнено успешно.';uk='Початкове заповнення інформаційної бази виконано успішно'");
		 Сообщить(ТекстЛокализованый, СтатусСообщения.Информация);
		
	 Иначе
		 ТекстЛокализованый = НСтр("ru='Обновление информационной базы выполнено успешно.';uk='Поновлення інформаційної бази виконано успішно'");
		Сообщить(ТекстЛокализованый , СтатусСообщения.Информация);
	КонецЕсли;

КонецПроцедуры


// Функция возвращает объект для взаимодействия с торговым оборудованием.
//
// Возвращаемое значение:
//  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
//
Функция ПолучитьСерверТО() Экспорт

	Если глСерверТО = Неопределено Тогда
		глСерверТО = Обработки.ТОСервер.Создать();
	КонецЕсли;

	Возврат глСерверТО;

КонецФункции // ПолучитьСерверТО()

// Эта процедура отлавливает данные от сканера штрихкода и ККМ,
// когда не открыта ни одна из форм, использующих сканер и ККМ в своей работе.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ВнешнееСобытие(Источник, Событие, Данные);
	КонецЕсли;

	ПолучитьСерверТО().ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные);

КонецПроцедуры


// Функция возвращает объект для взаимодействия с системой в Front-office режиме.
//
// Возвращаемое значение:
//  ОбработкаОбъект, объект для взаимодействия с системой в Front-office режиме.
//
Функция ПолучитьСерверFrontOffice(Деинициализация = Ложь) Экспорт
	
	// Действие.
	Если Не Деинициализация Тогда
		// -- Инициализация сервера.
		Если (глСерверFrontOffice = Неопределено) Тогда
			глСерверFrontOffice = Обработки.FrontOfficeСервер.Создать();
		КонецЕсли;
	Иначе
		// -- Умри :)
		глСерверFrontOffice = Неопределено;
	КонецЕсли;

	// Серевер.
	Возврат глСерверFrontOffice;

КонецФункции // ПолучитьСерверFrontOffice()

// Чистяков Павел 13.12.2011 12:06:21 
	Процедура АвтовыходПользователя() Экспорт
		
		СерверFrontOffice = ПолучитьСерверFrontOffice();
		Если СерверFrontOffice<>Неопределено Тогда
			СерверFrontOffice.ВыполнитьАвтовыходПользователя();
		КонецЕсли; 
		
	КонецПроцедуры


// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если Не ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ТекстЛокализованый = НСтр("ru='Не задан текущий пользователь.';uk='Не задано поточного користувача'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстЛокализованый);
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуТекущегоПользователя()


// GUARDANT ------------------------------------------------------------------------------

Функция EvalExpr(Выражение) Экспорт
   Возврат Вычислить(Выражение);
 КонецФункции
 
Функция ExecuteBatch(Выражение) Экспорт
   Попытка
       Выполнить(Выражение);
       Возврат Истина;
    Исключение
       Возврат Ложь;
    КонецПопытки;
КонецФункции

Функция IAm1CEight() Экспорт
	Возврат 1;
КонецФункции


Функция ДатаИзФорматаСтрокиЗащиты(строкаЗащиты)
	ден=Сред(строкаЗащиты, 1, 2);
	мес=Сред(строкаЗащиты, 3, 2);
	год=Сред(строкаЗащиты, 5, 4);			
	
	Возврат Дата(год, мес, ден);
КонецФункции

Процедура ПроверитьСрокДействияЛицензий() Экспорт

	Если глЗащОтключитьЗащиту=1 Тогда
		глСИСПроверкаЗащитыУспешна = 1;
		Возврат;
	КонецЕсли;			

	Попытка
		строкаКонцаДействияЛицензий = глСИС_Ext2k.ReadLicenseEndDateString(глЗащМодуль);
		
		//Сообщить("Срок в ключе: "+строкаКонцаДействияЛицензий);
		//Сообщить("Хеш: "+глСИС_Ext2k.KeyHardwareGetHash(строкаКонцаДействияЛицензий));
		
		Если (глСИС_Ext2k.KeyHardwareGetHash(строкаКонцаДействияЛицензий) = глЗащХэшСрокаДействияЛицензий) Тогда
		   // Сообщить("Хеш ОК.");	
		КонецЕсли;		
		
		Если (глЗащСтрокаСрокаДействияЛицензий = строкаКонцаДействияЛицензий) Тогда
			//Сообщить("Срок совпал.");				
		КонецЕсли;
		
		Если (глСИС_Ext2k.KeyHardwareGetHash(строкаКонцаДействияЛицензий) = глЗащХэшСрокаДействияЛицензий) и (глЗащСтрокаСрокаДействияЛицензий = строкаКонцаДействияЛицензий) Тогда
			
			конецЛицензии = ДатаИзФорматаСтрокиЗащиты(строкаКонцаДействияЛицензий);
			Если ТекущаяДата()<конецЛицензии Тогда
				глСИСПроверкаЗащитыУспешна = 1;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры		

Процедура ПроверитьСерийник() Экспорт
	Если глЗащОтключитьЗащиту=1 Тогда
		глСИСПроверкаЗащитыУспешна = 1;
		Возврат;
	КонецЕсли;						
	
	глСИСПроверкаЗащитыУспешна = 0;			
	
	Попытка
		строкаСерийника = глСИС_Ext2k.ReadSerialString();
		
		Если (глСИС_Ext2k.KeyHardwareGetHash(строкаСерийника) = глЗащХэшСерийника) и (глЗащСерийник = строкаСерийника) Тогда
			глСИСПроверкаЗащитыУспешна = 1;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверитьИЗахватитьЛицензию()
	Если глСИС_Ext2k = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ф = Новый Файл(глЗащИмяФайлаЗащиты);
		Если ф.Существует() Тогда			
			рез = глСИС_Ext2k.InitProtection(глЗащПриватКлючЧтенияБаза1, глЗащПарольФайлаЗащиты1, глЗащИмяФайлаЗащиты, глЗащМодульИзКонфы, глЗащВерсияИзКонфы);
			Если рез Тогда
				глСИСЗащитаИнициализирована = истина;
				
				глСИСПроверкаЗащитыУспешна = 0;
				ПроверитьСерийник();
				
				если глСИСПроверкаЗащитыУспешна = 1 тогда
				иначе
					глСИС_Ext2k.KeyCloseConn(); глСИСЗащитаИнициализирована = Ложь;
					Возврат Ложь;
				КонецЕсли;				
				
				глСИСПроверкаЗащитыУспешна = 0;
				ПроверитьСрокДействияЛицензий();
				
				если глСИСПроверкаЗащитыУспешна = 1 тогда
					//Сообщить("Срок действия лицензий ОК.");
				иначе
					//Сообщить("Срок действия лицензий истёк!");
					глСИС_Ext2k.KeyCloseConn(); глСИСЗащитаИнициализирована = Ложь;
					Возврат Ложь;				
				КонецЕсли;								
				
				//Если это раскомментировать, то будет отключаться от ключа сразу, чтоб можно было много-много копий
				//глСИС_Ext2k.KeyCloseConn();
				Возврат Истина;
			Иначе
				//Сообщить("Инициализация защиты провалилась!");
				глСИС_Ext2k.KeyCloseConn(); глСИСЗащитаИнициализирована = Ложь;
				Возврат Ложь;
			КонецЕсли; 				
		Иначе
	    	//Сообщить("Файл защиты не найден: "+глЗащИмяФайлаЗащиты);
			Возврат Ложь;
		КонецЕсли;
	Исключение
	    //Сообщить("Исключение: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки	
КонецФункции // ПроверитьИЗахватитьЛицензию()

Функция GUARDANT_ПередНачаломРаботыСистемы(Отказ = Ложь)
	
	// Backdoor.
	ФС = Новый Файл(КаталогПрограммы() + "gentempl_ur.st");
	Если ФС.Существует() Тогда			
		глСИСЗащитаИнициализирована = истина;
		глСИСПроверкаЗащитыУспешна = 1;
		глЗащОтключитьЗащиту = 1;
		Возврат Истина;
	КонецЕсли;
	
	Попытка		
		Состояние("Проверка ключа защиты и срока действия лицензий...");
		
		Попытка		
			ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "ExtHusp.dll");		
			глСИС_Ext2k = Новый("AddIn.ExtHusp");
		Исключение
			Отказ = Истина;
			Предупреждение("Не удалось подключить компоненту защиты!", 15);					
			Возврат Ложь;
		КонецПопытки;
		
		Если Не ПроверитьИЗахватитьЛицензию() Тогда
			Отказ = Истина;
			Предупреждение("Не найден ключ защиты или срок действия лицензий истёк!", 15);					
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Предупреждение("Ключ защиты не найден!", 15);					
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура GUARDANT_ПриЗавершенииРаботыСистемы(Отказ)
	
	Если Не Отказ Тогда
		Если (Не глЗащОтключитьЗащиту = 1) Тогда	
			Если глСИСЗащитаИнициализирована Тогда	
				
				Попытка		
					глСИС_Ext2k.KeyCloseConn();
				Исключение
				КонецПопытки;
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры	

// GUARDANT ------------------------------------------------------------------------------



// GUARDANT ------------------------------------------------------------------------------

// License ------------------------------------------------------------------------------

//Костенюк Александр-Старт 20.08.2012
//
// Процедура проверяет актуальность лицензии
// 
// Параметры:
// Нет.
//
Функция ПроверкаАктуальностиЛицензии() Экспорт
	
	Возврат Истина;
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	email 							= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeСервисноеОбслуживаниеАдресИнтернет);
	ТекстПериодИстек 				= НСтр("ru='Период действия лицензии истек!';uk='Період дії ліцензії закінчився!'");
	ТекстПериодИстекает 			= НСтр("ru='Период действия лицензии истекает через ';uk='Період дії ліцензії закінчується через '");
	ТекстОшибкаПриПолученииЛицензии = НСтр("ru='Ошибка при получении лицензии!';uk='Помилка при отриманні ліцензії!'");
	ТекстРаботаБудетЗавершена 		= НСтр("ru='Работа программы будет завершена.';uk='Робота програми буде завершена.'");
	ТекстТехподдержка 				= НСтр("ru='Обратитесь в службу технической поддержки "+email+"';uk='Зверніться до служби технічної підтримки "+email+"'");
		 
	Путь = КаталогПрограммы() + СокрЛП(Константы.ИдентификаторИнформационнойБазы.Получить()) + ".dat";
	
	Если НайтиФайлы(Путь).Количество() Тогда
		
		Попытка
			
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(Путь);
			НачалоПериода = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьСтроку(1));
			КонецПериода = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьСтроку(2));
			ОповещениеОбОкончанииДействия = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьСтроку(3));
			
			Если ЗначениеЗаполнено(КонецПериода) Тогда
				Если КонецПериода <> Константы.КонецПериодаДействияЛицензии.Получить() Тогда
					Предупреждение(ТекстОшибкаПриПолученииЛицензии + Символы.ПС + ТекстРаботаБудетЗавершена + Символы.ПС + ТекстТехподдержка);
					Возврат Ложь;
				Иначе
					ТекущаяДата 	= ТекущаяДата();
					РазностьДат 	= ОбщегоНазначения.ПолучитьРазностьДат(ТекущаяДата, КонецПериода);
					ДлинаСуток 		= 24*60*60;
					ДнейОсталось 	= Цел(РазностьДат/ДлинаСуток);
					Если (КонецПериода < ТекущаяДата) Тогда
						Предупреждение(ТекстПериодИстек + Символы.ПС + ТекстРаботаБудетЗавершена + Символы.ПС + ТекстТехподдержка);
						Возврат Ложь;
					ИначеЕсли ДнейОсталось <= ОповещениеОбОкончанииДействия Тогда
						ДнейДоОкончанияДействияЛицензии = Цел(РазностьДат/ДлинаСуток);
						ФормСтрока = "ЧЦ=10";
						ПарПредмета = "день,дня,дней,м,,,,,0";
						ПрописьЧисла = ЧислоПрописью(ДнейДоОкончанияДействияЛицензии, ФормСтрока, ПарПредмета);
						Предупреждение(ТекстПериодИстекает + НРег(ПрописьЧисла) + Символы.ПС + ТекстТехподдержка);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Предупреждение(ТекстОшибкаПриПолученииЛицензии + Символы.ПС + ТекстРаботаБудетЗавершена + Символы.ПС + ТекстТехподдержка);
				Возврат Ложь;
			КонецЕсли;
			
		Исключение
			Предупреждение(ТекстОшибкаПриПолученииЛицензии + Символы.ПС + ТекстРаботаБудетЗавершена + Символы.ПС + ТекстТехподдержка);
			Возврат Ложь;
		КонецПопытки;
		
	Иначе
		Предупреждение(ТекстОшибкаПриПолученииЛицензии + Символы.ПС + ТекстРаботаБудетЗавершена + Символы.ПС + ТекстТехподдержка);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
//Костенюк Александр-Финиш 20.08.2012

// License ------------------------------------------------------------------------------

глЗащИмяФайлаЗащиты = КаталогПрограммы() + "protect.dat";
глЗащМодульИзКонфы = 1;
глЗащВерсияИзКонфы = 13;

глЗащПриватКлючЧтенияБаза1 = "243041413238384130";
глЗащПриватКлючЧтенияБаза2 = "243530303434343431";
глЗащПарольФайлаЗащиты1 = "05144D810B2E9428054217234A79463A2D0E3B04285E6602631E0E4C0A4A251C";
глЗащПарольФайлаЗащиты2 = "B0000000ECB600C146B9820000000092CDC30094776700CF00ACAE006600004F";
глЗащМодификаторПароляОсновнойЧастиФайла = "2CBDD4235E553D7BCB33EF7FF17BD89CBB597E9B9DC4CD55B439A51E28DF8BE8";

// GUARDANT ------------------------------------------------------------------------------
