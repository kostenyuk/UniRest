  ////////////////////////////////////////////////////////////////////////////////
  // ПРОЦЕДУРЫ  РАБОТЫ С Заполнением из Компановки
   ////////////////////////////////////////////////////////////////////////////////
   
  Процедура СкомпоноватьТаблицу(ДокументРезультат, ОтчетОбъект = Неопределено, ДанныеРасшифровки = Неопределено, ВнешниеНаборыДанных = Неопределено, СхемаКомпоновкиДанных = Неопределено , Настройки = Неопределено ) Экспорт
	  
	  КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	  Если СхемаКомпоновкиДанных = Неопределено тогда
		  СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
	  КонецЕсли;
	  
	  Если Настройки = Неопределено Тогда
	 
		  Если ОтчетОбъект <> Неопределено тогда	  
			  Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки() ;
		  Иначе 
			  //КомпоновщикНастройки = СкомпоноватьНастройки(СхемаКомпоновкиДанных);
			  КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			  КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			  КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			  Настройки =  КомпоновщикНастроек.Настройки;
		  КонецЕсли; 
		  
	  КонецЕсли;
	  	  
	  Если ДанныеРасшифровки = Неопределено тогда
		  ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	  КонецЕсли;
	  МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	  
	  //Создадим и инициализируем процессор компоновки
	  ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	  
	  Если ВнешниеНаборыДанных = Неопределено Тогда
		  ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	  Иначе
		  ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	  КонецЕсли;
	  
	  //Создадим и инициализируем процессор вывода результата
	  ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	  ПроцессорВывода.УстановитьОбъект(ДокументРезультат);
	  ПроцессорВывода.Вывести(ПроцессорВывода, истина);
	  
  КонецПроцедуры
  
  Процедура ВозвратРезультатаКомпановкиКоллекцииЗначений(КоллекциияЗначений, СхемаКомпоновкиДанных, Настройки = Неопределено ) Экспорт 
	
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;	
	КонецЕсли; 
	
	СкомпоноватьКоллекциюЗначений(КоллекциияЗначений, , СхемаКомпоновкиДанных, Настройки );
	
	
КонецПроцедуры	
	
  Процедура СкомпоноватьКоллекциюЗначений(Дерево, ОтчетОбъект = Неопределено, СхемаКомпоновкиДанных = Неопределено, Настройки = Неопределено ,   ВнешниеНаборыДанных = Неопределено,  ВыводитьШапкуНаВсехСтраницах = истина) Экспорт
	  
	 	
	  Если СхемаКомпоновкиДанных = Неопределено тогда
		  СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
	  ИначеЕсли СхемаКомпоновкиДанных = Неопределено и ОтчетОбъект = Неопределено тогда
		  Возврат;
	  КонецЕсли;
	  
	  Если Настройки = Неопределено Тогда
	 
		  Если ОтчетОбъект <> Неопределено тогда	  
			  Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки() ;
		  Иначе 
			  //КомпоновщикНастройки = СкомпоноватьНастройки(СхемаКомпоновкиДанных);
			  КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			  КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			  КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			  Настройки =  КомпоновщикНастроек.Настройки;
		  КонецЕсли; 
		  
	  КонецЕсли;
	  
	  КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	  МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	  
	  //Создадим и инициализируем процессор компоновки
	  ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	  Если ВнешниеНаборыДанных = Неопределено Тогда
		  ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	  Иначе
		  ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
	  КонецЕсли;
	  
	  //Создадим и инициализируем процессор вывода результата
	  ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;	
	  ПроцессорВывода.УстановитьОбъект(Дерево);
	  
	  //ПроцессорВывода.Вывести(ПроцессорКомпоновки); 
	  
	  // Обозначим начало вывода
	  ПроцессорВывода.НачатьВывод();
	  // Основной цикл вывода отчета
	  Пока Истина Цикл
		  
		  // Получим следующий элемент результата компоновки
		  ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		  Если ЭлементРезультата = Неопределено Тогда
			  Прервать;
		  Иначе
			  
			  // Элемент получен - выведем его при помощи процессора вывода
			  ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		  КонецЕсли; 
	  КонецЦикла; 
	  // Обозначем завершение вывода
  КонецПроцедуры
    
  ////////////////////////////////////////////////////////////////////////////////
  // ПРОЦЕДУРЫ регистрами сведений
  ////////////////////////////////////////////////////////////////////////////////
  
  //Создаёт Записи в регистре сведений построчно с отбором 
// Имя - регистра
// Таблица - таблица записи
// СтруктураОтбора - по каким полям отбор делать
// ИспользоватьОтбор - стереть все
// ОсновнойОтбор - если в регистре измерение с флагом основной отбор иначе все
// ЗаписыватьАктуальность - если в регистре есть колонка актуальность
//
Процедура  СоздатьЗаписиВРегистреСведенийПострочно(Имя, Таблица, ИспользоватьОтбор = Истина, СтруктураОтбора = Неопределено, ОсновнойОтбор = Ложь, ЗаписыватьАктуальность = Истина) Экспорт
	
	Актуальность = Ложь;
	МассивЗаписей = Новый  Массив;
	
	Если СтруктураОтбора = Неопределено Тогда
		Измерения =  Метаданные.РегистрыСведений[Имя].Измерения; 
		СтруктураОтбора = Новый  Массив;
		Для каждого СтрОтбора Из Измерения Цикл
			Если ОсновнойОтбор тогда
				Если СтрОтбора.ОсновнойОтбор Тогда
					СтруктураОтбора.Добавить(СтрОтбора.Имя);		
				КонецЕсли;
			Иначе
				СтруктураОтбора.Добавить(СтрОтбора.Имя);
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли; 
	
	Для каждого Стр Из Таблица.Колонки Цикл                               
		Если не ЗаписыватьАктуальность Тогда
					
			Если Стр.Имя  = "Актуальность" Тогда
				Актуальность = Истина;
			Иначе 
				МассивЗаписей.Добавить(Стр.Имя);
			КонецЕсли; 
		Иначе
			  МассивЗаписей.Добавить(Стр.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
		
	Для каждого Строка Из Таблица Цикл 
					
		Если Актуальность Тогда				
			
			Если Строка["Актуальность"] Тогда   
				
				НаборЗаписей= РегистрыСведений[Имя].СоздатьНаборЗаписей();
				Если ИспользоватьОтбор Тогда
					Для каждого СтрОтбора Из СтруктураОтбора Цикл
						НаборЗаписей.Отбор[СтрОтбора].Установить(Строка[СтрОтбора] , Истина); 
					КонецЦикла;
				КонецЕсли; 

				СтрокаЗаписи =  НаборЗаписей.Добавить(); 
				Для каждого СтрЗаписей Из МассивЗаписей Цикл  
					СтрокаЗаписи[СтрЗаписей] = Строка[СтрЗаписей] ;	
				КонецЦикла;
				
				Попытка
					НаборЗаписей.Записать();		
				Исключение
					ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(),,,, НаборЗаписей);
				КонецПопытки;
				
			Иначе
				
				НаборЗаписей= РегистрыСведений[Имя].СоздатьНаборЗаписей();
				Если ИспользоватьОтбор Тогда
					Для каждого СтрОтбора Из СтруктураОтбора Цикл
						НаборЗаписей.Отбор[СтрОтбора].Установить(Строка[СтрОтбора] , Истина); 
					КонецЦикла;
				КонецЕсли;
				
				Попытка
					НаборЗаписей.Записать();		
				Исключение
					ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(),,,, НаборЗаписей);
				КонецПопытки;
		
			КонецЕсли;
			
		Иначе 
			
			НаборЗаписей= РегистрыСведений[Имя].СоздатьНаборЗаписей();
			Если ИспользоватьОтбор Тогда
				Для каждого СтрОтбора Из СтруктураОтбора Цикл
					НаборЗаписей.Отбор[СтрОтбора].Установить(Строка[СтрОтбора] , Истина); 
				КонецЦикла;
			КонецЕсли; 
			
			СтрокаЗаписи =  НаборЗаписей.Добавить();
			Для каждого СтрЗаписей Из МассивЗаписей Цикл  
				СтрокаЗаписи[СтрЗаписей] = Строка[СтрЗаписей] ;
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();		
			Исключение
				ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(),,,, НаборЗаписей);
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры
    
  // Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор
  //
  // Параметры:
  //  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот набор
  //  ИмяРегистра     - Строка - имя регистра сведений
  // 
  Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	  
	  МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	  
	  // создаем набор записей регистра
	  НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	  
	  // устанавливаем отбор по измерениям регистра
	  Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		  
		  // если задано значение в структуре, то отбор устанавливаем
		  Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			  
			  НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			  
		  КонецЕсли;
		  
	  КонецЦикла;
	  
	  Возврат НаборЗаписей;
  КонецФункции
  
  // Удаляет набор записей в регистре по переданным значениям структуры
  //
  // Параметры:
  //  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей
  //  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей
  // 
  Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	  
	  НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	  
	  // записываем набор записей
	  НаборЗаписей.Записать();
	  
  КонецПроцедуры
  
  // Добавляет одну запись в регистр сведений по переданным значениям структуры
  //
  // Параметры:
  //  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать набор записей и заполнить этот набор
  //  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись
  // 
  Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	  
	  НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	  
	  // добавляем только одну запись в новый набор записей
	  НоваяЗапись = НаборЗаписей.Добавить();
	  
	  // заполняем значения свойств записи из переданной структуры
	  ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	  
	  // записываем набор записей
	  НаборЗаписей.Записать();
	  
  КонецПроцедуры
  
  // Обновляет запись в регистр сведений по переданным значениям структуры
  //
  // Параметры:
  //  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать менеджер записи и обновить запись
  //  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо обновить запись
  // 
  Процедура ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	  
	  МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	  
	  // создаем менеджер записи регистра
	  МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	  
	  // устанавливаем отбор по измерениям регистра
	  Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		  
		  // если задано значение в структуре, то отбор устанавливаем
		  Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			  
			  МенеджерЗаписи[Измерение.Имя] = СтруктураЗаписи[Измерение.Имя];
			  
		  КонецЕсли;
		  
	  КонецЦикла;
	  
	  // считываем запись из базы данных
	  МенеджерЗаписи.Прочитать();
	  
	  // заполняем значения свойств записи из переданной структуры
	  ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи);
	  
	  // записываем менеджер записи
	  МенеджерЗаписи.Записать();
	  
  КонецПроцедуры
   
   /////////////////////////////////////////////////////////////////////////////////
  // ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С Запросами
  
  // Добавляет в переданный текст запроса поля, по которым возможен отбор
  //
  // Параметры:
  //  ТекстЗапроса - текст запроса, в который требуется добавить поля
  //  МассивПолейОтбора - массив, содержащий имена полей для отбора
  //
  Процедура ДобавитьПоляОтбораВТекстЗапроса(ТекстЗапроса, МассивПолейОтбора)
	  
	  Если ТекстЗапроса <> "" Тогда
		  
		  КоличествоПолейОтбора = МассивПолейОтбора.Количество();
		  
		  Если КоличествоПолейОтбора > 0 Тогда
			  
			  ТекстДополнения = " {ГДЕ ";
			  
			  Индекс = 0;
			  
			  Для Каждого Поле из МассивПолейОтбора Цикл
				  
				  ТекстДополнения = ТекстДополнения + Поле;
				  
				  Если Индекс < КоличествоПолейОтбора-1 Тогда
					  ТекстДополнения = ТекстДополнения + ",";
				  КонецЕсли;	
				  
				  Индекс = Индекс + 1;
				  
			  КонецЦикла;
			  
			  ТекстДополнения = ТекстДополнения + "}";
			  ТекстЗапроса = ТекстЗапроса + ТекстДополнения;
			  
		  КонецЕсли;
		  
	  КонецЕсли;
	  
  КонецПроцедуры
  
  // Добавляет параметры в переданный запрос для указанного объекта
  //
  // Параметры:
  //  Запрос - запрос, в который требуется добавить параметры
  //  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы и т.д), для которого используется запрос
  //  ИмяОбъекта - имя объекта метаданных, для которого используется запрос
  //  СтруктураПараметровНастройкиОбмена - структура, содержащая настройки параметров обмена
  //
  Процедура ДобавитьПараметрыЗапроса(Запрос, ИмяКласса, ИмяОбъекта, СтруктураПараметровНастройкиОбмена)
	  
	  Если ИмяКласса = "Документы" Тогда
		  Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			  Запрос.УстановитьПараметр("ТорговыйПредставитель", СтруктураПараметровНастройкиОбмена.ТорговыйПредставитель);
		  КонецЕсли;
	  ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда
		  Если ИмяОбъекта = "КурсыВалют" Тогда
			  Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		  КонецЕсли;
	  КонецЕсли;
	  
  КонецПроцедуры
  
  /////////////////////////////////////////////////////////////////////////////////
  // ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С КОМПОНОВКОЙ ДАННЫХ
  
  // Формирует и возвращает схему компоновки данных на основании текста запроса
  // для выборки данных по конкретному объекту
  //
  // Параметры:
  //  ТекстЗапроса - текст запроса для источника данных схемы компоновки
  //
  // Возвращаемое значение:
  //  Схема компоновки данных
  //
  Функция ПолучитьСхемуКомпоновкиДанныхДляВыборки(ТекстЗапроса) Экспорт;
	  
	  СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	  
	  Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	  Источник.Имя = "Источник1";
	  Источник.СтрокаСоединения="";
	  Источник.ТипИсточникаДанных = "local";
	  
	  НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	  НаборДанных.Запрос = ТекстЗапроса;
	  НаборДанных.Имя = "Запрос";
	  НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	  НаборДанных.ИсточникДанных = "Источник1";
	  
	  Возврат СхемаКомпоновки;
	  
  КонецФункции
  
  Функция ПолучитьСхемуКомпоновкиДанныхДляНесколькихЗапросов(МассивЗапросов) Экспорт;
	  
	  Для каждого ТекстЗапроса Из МассивЗапросов Цикл
		  
	  КонецЦикла;
	  
  КонецФункции
	  
  // Формирует и возвращает схему компоновки данных для объекта
  //
  // Параметры:
  //  Объект - объект, для которого требуется получить схему
  //
  // Возвращаемое значение:
  //  Схема компоновки данных
  //
  Функция ПолучитьСхемуКомпоновкиДанныхДляОбъекта(МассивПолей) Экспорт;
	  
	  СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	  
	  	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
		  Источник.Имя = "Источник1";
		  Источник.СтрокаСоединения="";
		  Источник.ТипИсточникаДанных = "local";
		  
		  НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		  НаборДанных.Имя = "Объект";
		  НаборДанных.ИмяОбъекта = "ОбъектДанных";
		  НаборДанных.ИсточникДанных = "Источник1";
		  
		  Для Каждого Поле из МассивПолей Цикл
			  ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			  ПолеНабораДанных.Поле = Поле;
			  ПолеНабораДанных.ПутьКДанным = Поле;
		  КонецЦикла;
		  
		  Возврат СхемаКомпоновки;
	 	 	  
  КонецФункции
  
  // Формирует и возвращает настройки компоновщика для переданной схемы компоновки
  //
  // Параметры:
  //  СхемаКомпоновки - схема компоновки данных, для которой компонуются настройки
  //
  // Возвращаемое значение:
  //  Настройки компоновщика
  //
  Функция СкомпоноватьНастройки(СхемаКомпоновки) Экспорт
	  
	  ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	  КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	  КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	  
	  // Добавим выбранные поля
	  Для Каждого Элемент из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		  
		  Если НЕ Элемент.Папка Тогда
			  ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			  ВыбранноеПоле.Использование = Истина;
			  ВыбранноеПоле.Поле = Элемент.Поле;
		  КонецЕсли;
		  
	  КонецЦикла;
	  
	  // Добавим группировку
	  ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	  Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	  
	  Возврат КомпоновщикНастроек.Настройки;
	  
  КонецФункции
  
  // Добавляет элемент отбора в настройки компоновки
  //
  // Параметры:
  //  Настройки - настройки компоновки
  //  ИмяПоля - имя поля, по которому задается отбор
  //  Вид сравнения - вид сравнения компоновки данных
  //  Использование - использование элемента отбора
  //  ПравоеЗначение - правоз значение сравнения
  //
  Процедура ДобавитьЭлементОтбораВНастройкиСхемы(Настройки, ИмяПоля, ВидСравнения = Неопределено, Использование = Истина, ПравоеЗначение = Неопределено) Экспорт
	  
	  Если ВидСравнения = Неопределено Тогда
		  ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	  КонецЕсли;
	  
	  Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	  Элемент = Настройки.ДоступныеПоляОтбора.НайтиПоле(Поле);
	  
	  Если Элемент = Неопределено Тогда
		  Возврат;
	  КонецЕсли;
	  
	  ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	  
	  ЭлементОтбора.ЛевоеЗначение = Элемент.Поле;
	  ЭлементОтбора.ВидСравнения = ВидСравнения;
	  ЭлементОтбора.Использование = Использование;
	  ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	  
  КонецПроцедуры
  
  // Выполняет установку значения элемента отбора в настройках компоновки
  //
  // Параметры:
  //  Отбор - отбор компоновки
  //
  Процедура УстановитьЗначениеЭлементаОтбора(Отбор, ИмяПоля, ВидСравнения = Неопределено, Использование = Истина, ПравоеЗначение = Неопределено) Экспорт
	  
	  Если ВидСравнения = Неопределено Тогда
		  ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	  КонецЕсли;
	  
	  ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	  
	  Для Каждого ЭлементОтбора из Отбор.Элементы Цикл
		  
		  Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			  ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
			  ЭлементОтбора.Использование = Использование;
		  КонецЕсли;
		  
	  КонецЦикла;
	  
  КонецПроцедуры
  
  // Устанавливает признак включения в настройки компоновки поля
  //
  // Параметры:
  //  НастройкиКомпоновки - настройки компоновки, для которых требуется установить использование
  //  ИмяПоля - имя поля компоновки, использование которого требуется установить
  //
  Процедура УстановитьИспользованиеПоляКомпоновки(НастройкиКомпоновки, ИмяПоля, Использование) Экспорт
	  
	  ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	  
	  Для Каждого Элемент из НастройкиКомпоновки.Выбор.Элементы Цикл
		  Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			  Если Элемент.Поле = ПолеКомпоновки Тогда
				  Элемент.Использование = Использование;
			  КонецЕсли;
		  КонецЕсли;
	  КонецЦикла;
	  
  КонецПроцедуры
  
  // Устанавливает указанное значение параметра настроек компоновки данных
  //
  // Параметры:
  //  Настройки - настройки компоновки данных
  //  ИмяПараметра - имя параметра, значение которого нужно установить
  //  Значение - устанавливаемое значение параметра
  //
  Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение) Экспорт
	  
	  Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	  
	  Если Параметр <> Неопределено Тогда
		  Параметр.Значение = Значение;
		  Параметр.Использование = Истина;
	  КонецЕсли;
	  
  КонецПроцедуры
  
  // Формирует и возвращает структуру на основе переданного отбора компоновки данных
  //
  // Параметры:
  //  Отбор - отбор компоновки данных
  //
  // Возвращаемое значение:
  //  Структура, содержащая данные отбора
  // 
  Функция ПолучитьСтруктуруОтбораКомпоновкиДанных(Отбор) Экспорт
	  
	  СтруктураОтбора = Новый Структура();
	  
	  Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		  
		  // Заполним структуру элемента отбора
		  СтруктураЭлементаОтбора = Новый Структура();
		  
		  Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			  
			  СтруктураЭлементаОтбора.Вставить("ВидСравнения",ЭлементОтбора.ВидСравнения);
			  СтруктураЭлементаОтбора.Вставить("ИдентификаторПользовательскойНастройки",ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			  СтруктураЭлементаОтбора.Вставить("Использование",ЭлементОтбора.Использование);
			  СтруктураЭлементаОтбора.Вставить("ЛевоеЗначение",ЭлементОтбора.ЛевоеЗначение);
			  СтруктураЭлементаОтбора.Вставить("ПравоеЗначение",ЭлементОтбора.ПравоеЗначение);
			  СтруктураЭлементаОтбора.Вставить("Представление",ЭлементОтбора.Представление);
			  СтруктураЭлементаОтбора.Вставить("ПредставлениеПользовательскойНастройки",ЭлементОтбора.ПредставлениеПользовательскойНастройки);
			  СтруктураЭлементаОтбора.Вставить("Применение",ЭлементОтбора.Применение);
			  СтруктураЭлементаОтбора.Вставить("РежимОтображения",ЭлементОтбора.РежимОтображения);
			  
			  // Структуру элемента отбора поместим в структуру отбора
			  СтруктураОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, СтруктураЭлементаОтбора);
		  КонецЕсли;
		  
	  КонецЦикла;
	  
	  Возврат СтруктураОтбора;
	  
  КонецФункции
  
  // Заполняет указанный отбор на основании структуры, содержащей данные отбора
  //
  // Параметры:
  //  Отбор - отбор компоновки данных, который надо заполнить
  //  Структура отбора - структура, содержащая данные для заполнения отбора
  //
  Процедура ЗаполнитьОтборКомпоновкиИзСтруктуры(Отбор, СтруктураОтбора) Экспорт
	  
	  Отбор.Элементы.Очистить();
	  
	  Для Каждого ЭлементСтруктурыОтбора из СтруктураОтбора Цикл
		  
		  ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		  
		  СтруктураЭлементаОтбора = ЭлементСтруктурыОтбора.Значение;
		  
		  Для Каждого Элемент из СтруктураЭлементаОтбора Цикл
			  Если Элемент.Ключ = "ЛевоеЗначение" Тогда
				  ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(Элемент.Значение);
			  Иначе
				  ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
			  КонецЕсли;
		  КонецЦикла;	
		  
	  КонецЦикла;
	  
  КонецПроцедуры
  
  // Заполняет в переданном отборе элемент на основании структуры, содержащей данные отбора
  //
  // Параметры:
  //  Отбор - отбор компоновки данных, который надо заполнить
  //  СтруктураЭлементаОтбора - структура, содержащая данные для заполнения элемента отбора
  //  ИмяЭлементаОтбора - имя поля - элемента отбора
  //
  Процедура ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(Отбор, СтруктураНастроекОтбора, ИмяНастройки, ИмяЭлементаОтбора)
	  
	  СтруктураЭлементаОтбора = ПолучитьСтруктуруОтбораДляНастройки(СтруктураНастроекОтбора, ИмяНастройки);
	  
	  Если СтруктураЭлементаОтбора = Неопределено Тогда
		  Возврат;
	  КонецЕсли;
	  
	  ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	  
	  Для Каждого Элемент из СтруктураЭлементаОтбора Цикл
		  Если Элемент.Ключ = "ЛевоеЗначение" Тогда
			  ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
		  Иначе
			  ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
		  КонецЕсли;
	  КонецЦикла;
	  
  КонецПроцедуры  
  
  // Служебные функции
  
  // Получает и возвращает структуру, содержащую описание отбора для указанной настройки обмена
  //
  // Параметры:
  //  СтруктураНастроекОтбора - структура, содержащая настройки отбора для схемы обмена
  //  ИмяНастройки - имя настройки в структуре настроек отбора
  //
  // Возвращаемое значение:
  //  Структура, содержащая описание отбора для указанной настройки обмена
  //
  Функция ПолучитьСтруктуруОтбораДляНастройки(СтруктураНастроекОтбора, ИмяНастройки)
	  
	  Настройка = Неопределено;
	  Если СтруктураНастроекОтбора.Свойство(ИмяНастройки, Настройка) Тогда
		  Если ТипЗнч(Настройка) = Тип("Структура") Тогда
			  Возврат Настройка;
		  КонецЕсли;
	  КонецЕсли;
	  
	  Возврат Настройка;
	  
  КонецФункции
  
  Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	  
	  Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		  
		  Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			  
			  Если СпособПоиска = 1 Тогда
				  Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					  МассивЭлементов.Добавить(ЭлементОтбора);
				  КонецЕсли;
			  ИначеЕсли СпособПоиска = 2 Тогда
				  Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					  МассивЭлементов.Добавить(ЭлементОтбора);
				  КонецЕсли;
			  КонецЕсли;
		  Иначе
			  
			  НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			  
			  Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				  МассивЭлементов.Добавить(ЭлементОтбора);
			  КонецЕсли;
			  
		  КонецЕсли;
		  
	  КонецЦикла;
	  
  КонецПроцедуры
