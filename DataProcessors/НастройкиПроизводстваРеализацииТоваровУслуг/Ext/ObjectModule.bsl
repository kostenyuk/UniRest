
Перем мВладелец; // Владелец объекта.

Перем мНаборЗаписейДокумента, мНаборЗаписейДанных; // Искомые данные.

Перем мТипДаты, мТипМассива; // Типы данных.


// Функция возвращает основные настройки производства связанные с владельцем.
//
Функция ОсновныеНастройки(ПроизводственныеГруппы) Экспорт
	
	// Проверка ресторана.
	Если (Не мНаборЗаписейДокумента.Отбор.Ресторан.Значение = мВладелец.Ресторан) Тогда
		Прочитать(мВладелец);
	КонецЕсли;
	
	// Нормализация.
	Если (Не ТипЗнч(ПроизводственныеГруппы) = мТипМассива) Тогда
		ПроизводственныеГруппы = Новый Массив;
	КонецЕсли;
	
	ОсновныеНастройки = РегистрыСведений.НастройкиПроизводства.СоздатьМенеджерЗаписи();
	ОсновныеНастройки.ПродолжительностьВыполнения = '00010101001000';
	ОсновныеНастройки.ПродолжительностьДоставки = '00010101000500';
	ОсновныеНастройки.ПродолжительностьПроизводства = '00010101000500';
	
	МаксимальнаяПродолжительностьПроизводстваИДоставки = ОбщегоНазначения.ПустоеЗначениеТипа(мТипДаты);
	
	// Поиск основных настроек по максимальным значениям.
	Для Каждого Запись Из мНаборЗаписейДанных Цикл
		Если (ПроизводственныеГруппы.Найти(Запись.ПроизводственнаяГруппа) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		// -- Производственная группа.
		ПродолжительностьПроизводстваИДоставки = Запись.ПродолжительностьПроизводства + ОбщегоНазначения.ПолучитьЧисло(Запись.ПродолжительностьДоставки);
		Если (ПродолжительностьПроизводстваИДоставки > МаксимальнаяПродолжительностьПроизводстваИДоставки) Тогда
			ОсновныеНастройки.ПроизводственнаяГруппа = Запись.ПроизводственнаяГруппа;
			МаксимальнаяПродолжительностьПроизводстваИДоставки = ПродолжительностьПроизводстваИДоставки;
		КонецЕсли;	
		
		// -- Настройки.
		ОсновныеНастройки.ПродолжительностьВыполнения = Макс(Запись.ПродолжительностьВыполнения, ОсновныеНастройки.ПродолжительностьВыполнения);
		ОсновныеНастройки.ПродолжительностьЗадержки = Макс(Запись.ПродолжительностьЗадержки, ОсновныеНастройки.ПродолжительностьЗадержки);
		ОсновныеНастройки.ПродолжительностьДоставки = Макс(Запись.ПродолжительностьДоставки, ОсновныеНастройки.ПродолжительностьДоставки);
		ОсновныеНастройки.ПродолжительностьПроизводства = Макс(Запись.ПродолжительностьПроизводства, ОсновныеНастройки.ПродолжительностьПроизводства);
		
	КонецЦикла;
	
	ОсновныеНастройки.ПродолжительностьДоставки = Макс(мВладелец.ПродолжительностьДоставки, ОсновныеНастройки.ПродолжительностьДоставки);
	ОсновныеНастройки.ПродолжительностьПроизводства = Макс(мВладелец.ПродолжительностьПроизводства, ОсновныеНастройки.ПродолжительностьПроизводства);
	ОсновныеНастройки.ПродолжительностьВыполнения = Макс(ОсновныеНастройки.ПродолжительностьПроизводства + ОбщегоНазначения.ПолучитьЧисло(ОсновныеНастройки.ПродолжительностьДоставки), ОсновныеНастройки.ПродолжительностьВыполнения);
	
	// Результат.
	Возврат ОсновныеНастройки;
	
КонецФункции // ОсновныеНастройки()

// Функция возвращает производственные настройки производства связанные с владельцем.
//
Функция ПроизводственныеНастройки(ПроизводственныеГруппы) Экспорт
	
	// Основные настройки.
	ОсновныеНастройки = ОсновныеНастройки(ПроизводственныеГруппы);
	НаборНастроек = мНаборЗаписейДанных.Выгрузить();
	
	// Варианты рассчета.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа,
	                     |	ПроизводственныеГруппы.Ссылка КАК ПроизводственнаяГруппа,
	                     |	ПроизводственныеГруппы.СтратигияПроизводстваОсновная,
	                     |	ПроизводственныеГруппы.СтратигияПроизводстваДополнительная,
	                     |	&ПустаяДата КАК ТребуемаяДатаНачалаПериода,
	                     |	&ПустаяДата КАК ТребуемаяДатаОкончанияПериода,
	                     |	&ПустаяДата КАК ТребуемаяДатаРазделенияПериода
	                     |ИЗ
	                     |	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеГруппы КАК ПроизводственныеГруппы
	                     |		ПО НоменклатурныеГруппы.ПроизводственнаяГруппа = ПроизводственныеГруппы.Ссылка
	                     |ГДЕ
	                     |	ПроизводственныеГруппы.Ссылка В(&ПроизводственныеГруппыДокумента)
	                     |	И ПроизводственныеГруппы.Ссылка В(&ПроизводственныеГруппыНабораЗаписей)
	                     |	И ПроизводственныеГруппы.Актуальность");
	Запрос.УстановитьПараметр("ПроизводственныеГруппыДокумента", ПроизводственныеГруппы);
	Запрос.УстановитьПараметр("ПроизводственныеГруппыНабораЗаписей", НаборНастроек.ВыгрузитьКолонку("ПроизводственнаяГруппа"));
	Запрос.УстановитьПараметр("ПустаяДата", ОбщегоНазначения.ПустоеЗначениеТипа(мТипДаты));
	ПроизводственныеНастройки = Запрос.Выполнить().Выгрузить();					   
	
	Если Булево(ПроизводственныеНастройки.Количество()) Тогда
		Если мВладелец.ФиксированнаяТребуемаяДатаОкончанияПериода Тогда
			// -- На определенное время.
			Для Каждого СтрокаНастройки Из ПроизводственныеНастройки Цикл
				
				СтрокаНабораНастроек = НаборНастроек.Найти(СтрокаНастройки.ПроизводственнаяГруппа, "ПроизводственнаяГруппа");
				
				Если (СтрокаНастройки.ПроизводственнаяГруппа = ОсновныеНастройки.ПроизводственнаяГруппа) Тогда
					// ---- Основная группа.
					ПродолжительностьПроизводства = ОсновныеНастройки.ПродолжительностьПроизводства;
				Иначе
					// ---- Второстипенная группа.
					ПродолжительностьПроизводства = СтрокаНабораНастроек.ПродолжительностьПроизводства;
				КонецЕсли;
				
				СтрокаНастройки.ТребуемаяДатаОкончанияПериода = мВладелец.ТребуемаяДатаРазделенияПериода;
				СтрокаНастройки.ТребуемаяДатаРазделенияПериода = СтрокаНастройки.ТребуемаяДатаОкончанияПериода - ОбщегоНазначения.ПолучитьЧисло(ПродолжительностьПроизводства);
				СтрокаНастройки.ТребуемаяДатаНачалаПериода = СтрокаНастройки.ТребуемаяДатаРазделенияПериода - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки);
				
			КонецЦикла;
		Иначе
			// -- На ближайшее время.
			
			СтрокаНастройки = ПроизводственныеНастройки.Найти(ОсновныеНастройки.ПроизводственнаяГруппа, "ПроизводственнаяГруппа");
			СтрокаНабораНастроек = НаборНастроек.Найти(ОсновныеНастройки.ПроизводственнаяГруппа, "ПроизводственнаяГруппа");
			Если (СтрокаНастройки.СтратигияПроизводстваОсновная = Перечисления.СтратигииПроизводстваОсновные.ОкончаниеПериода) Тогда
				ТребуемаяДатаРазделенияПериодаОсновная = мВладелец.ТребуемаяДатаРазделенияПериода - ОбщегоНазначения.ПолучитьЧисло(ОсновныеНастройки.ПродолжительностьПроизводства);
				ТребуемаяДатаНачалаПериодаОсновная = ТребуемаяДатаРазделенияПериодаОсновная - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки);
				ТеоритическаяДатаНачалаПериодаОсновная = ТребуемаяДатаНачалаПериодаОсновная;
				ТеоритическаяДатаОкончанияПериодаОсновная = ТребуемаяДатаНачалаПериодаОсновная + ОбщегоНазначения.ПолучитьЧисло(ОсновныеНастройки.ПродолжительностьПроизводства);
			Иначе
				ТребуемаяДатаРазделенияПериодаОсновная = мВладелец.ТребуемаяДатаРазделенияПериода - ОбщегоНазначения.ПолучитьЧисло(ОсновныеНастройки.ПродолжительностьПроизводства);
				ТребуемаяДатаНачалаПериодаОсновная = Мин(мВладелец.ДатаНачалаПериода + ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки), 
														 ТребуемаяДатаРазделенияПериодаОсновная - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки));
				ТеоритическаяДатаНачалаПериодаОсновная = ТребуемаяДатаНачалаПериодаОсновная;
				ТеоритическаяДатаОкончанияПериодаОсновная = ТеоритическаяДатаНачалаПериодаОсновная + ОбщегоНазначения.ПолучитьЧисло(ОсновныеНастройки.ПродолжительностьПроизводства);
			КонецЕсли;
			
			Для Каждого СтрокаНастройки Из ПроизводственныеНастройки Цикл
				
				СтрокаНабораНастроек = НаборНастроек.Найти(СтрокаНастройки.ПроизводственнаяГруппа, "ПроизводственнаяГруппа");
				
				Если (СтрокаНастройки.ПроизводственнаяГруппа = ОсновныеНастройки.ПроизводственнаяГруппа) Тогда
					// ---- Основная группа.
					СтрокаНастройки.ТребуемаяДатаРазделенияПериода = ТребуемаяДатаРазделенияПериодаОсновная;
					СтрокаНастройки.ТребуемаяДатаНачалаПериода = ТребуемаяДатаНачалаПериодаОсновная;
				Иначе
					// ---- Второстипенная группа.
					СтрокаНастройки.ТребуемаяДатаРазделенияПериода = мВладелец.ТребуемаяДатаРазделенияПериода - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьПроизводства);
					Если      (СтрокаНастройки.СтратигияПроизводстваДополнительная = Перечисления.СтратигииПроизводстваДополнительные.ОкончаниеПериодаГруппы) Тогда
						СтрокаНастройки.ТребуемаяДатаНачалаПериода = Мин(ТеоритическаяДатаОкончанияПериодаОсновная - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьПроизводства), 
																		 СтрокаНастройки.ТребуемаяДатаРазделенияПериода) - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки);
					ИначеЕсли (СтрокаНастройки.СтратигияПроизводстваДополнительная = Перечисления.СтратигииПроизводстваДополнительные.НачалоПериодаГруппы) Тогда
						СтрокаНастройки.ТребуемаяДатаНачалаПериода = Мин(ТребуемаяДатаНачалаПериодаОсновная, 
																		 СтрокаНастройки.ТребуемаяДатаРазделенияПериода) - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки);
					ИначеЕсли (СтрокаНастройки.СтратигияПроизводстваДополнительная = Перечисления.СтратигииПроизводстваДополнительные.ОкончаниеПериода) Тогда
						СтрокаНастройки.ТребуемаяДатаНачалаПериода = СтрокаНастройки.ТребуемаяДатаРазделенияПериода - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки);
					Иначе
						СтрокаНастройки.ТребуемаяДатаНачалаПериода = Мин(мВладелец.ДатаНачалаПериода + ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки), 
																		 СтрокаНастройки.ТребуемаяДатаРазделенияПериода - ОбщегоНазначения.ПолучитьЧисло(СтрокаНабораНастроек.ПродолжительностьЗадержки));
					КонецЕсли;
				КонецЕсли;
				
				СтрокаНастройки.ТребуемаяДатаОкончанияПериода = мВладелец.ТребуемаяДатаРазделенияПериода;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Результат.
	Возврат ПроизводственныеНастройки;
	
КонецФункции // ПроизводственныеНастройки()


// Процедура считывает требуемые настройки производства связанные с владельцем.
//
Процедура Прочитать(Владелец) Экспорт
	
	// Владелец.
	мВладелец = Владелец;
	
	// Выборка данных.
	Документ = мВладелец.Ссылка;
	Ресторан = мВладелец.Ресторан;
	
	мНаборЗаписейДокумента = РегистрыСведений.СостояниеНастройкиПроизводстваРеализацийТоваровУслуг.СоздатьНаборЗаписей();	
	мНаборЗаписейДокумента.Отбор.Документ.Установить(Документ, Истина);
	мНаборЗаписейДокумента.Отбор.Ресторан.Установить(Ресторан, Истина);
	
	мНаборЗаписейДанных = РегистрыСведений.НастройкиПроизводства.СоздатьНаборЗаписей();	
	мНаборЗаписейДанных.Отбор.Ресторан.Установить(Ресторан, Истина);
	
	Если Не Ресторан.Пустая() Тогда
		
		мНаборЗаписейДокумента.Прочитать();
		
		Если Булево(мНаборЗаписейДокумента.Количество()) Тогда
			мНаборЗаписейДанных = мНаборЗаписейДокумента;
		Иначе
			мНаборЗаписейДанных.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Прочитать()

// Процедура записывает при необходимости требуемые настройки производства связанные с владельцем.
//
Процедура Записать(Отказ) Экспорт
	
	// Отказ.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка ресторана.
	Если (Не мНаборЗаписейДокумента.Отбор.Ресторан.Значение = мВладелец.Ресторан) Тогда
		Прочитать(мВладелец);
	КонецЕсли;
	
	// Набор записей.
	Документ = мВладелец.Ссылка;
	Ресторан = мВладелец.Ресторан;
	
	НаборЗаписей = РегистрыСведений.СостояниеНастройкиПроизводстваРеализацийТоваровУслуг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	
	Если Не Ресторан.Пустая() Тогда
		
		Если (мНаборЗаписейДокумента = мНаборЗаписейДанных) Тогда
			Возврат;
		Иначе
			НаборЗаписей.Загрузить(мНаборЗаписейДанных.Выгрузить());
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Документ = Документ;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись.
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, ,, НаборЗаписей, мВладелец);
	КонецПопытки;
	
КонецПроцедуры // Записать()


// Инициализация переменных.
мТипДаты = Тип("Дата");
мТипМассива = Тип("Массив");