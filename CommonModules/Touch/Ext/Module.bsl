
//	1С:Touch. Touch-ориентированные элементы управления и диалоговые формы, 
//	построенные с использованием только стандартных элементов управления платформы.
//	Copyright (C) 2008-2010 Переверзев Александр Владимирович.
//
//	Это программа является свободным программным обеспечением. Вы можете 
//	распространять и/или модифицировать её согласно условиям Стандартной 
//	Общественной Лицензии GNU, опубликованной Фондом Свободного Программного 
//	Обеспечения, версии 3 или, по Вашему желанию, любой более поздней версии. 
//
//	Эта программа распространяется в надежде, что она будет полезной, но БЕЗ 
//	ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО СОСТОЯНИЯ ПРИ 
//	ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите Стандартную 
//	Общественную Лицензию GNU для получения дополнительной информации. 
//
//	Вы должны были получить копию Стандартной Общественной Лицензии GNU вместе 
//	с программой. В случае её отсутствия, посмотрите <http://www.gnu.org/licenses/>.


#Если Клиент Тогда

// Процедура вывода на экран окна предупреждения.
//
// Параметры:
//	ТекстПредупреждения - Строка. Текст предупреждения;
//	Таймаут - Число. Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя;
//	Заголовок - Строка. Заголовок окна.
//
Процедура __Предупреждение(ТекстПредупреждения, Таймаут = 0, Заголовок = "") Экспорт
	
	// Перенаправление.
	Обработки.TouchПредупреждение.Создать().ВывестиПредупреждение(ТекстПредупреждения, Таймаут, Заголовок);
	
КонецПроцедуры // __Предупреждение()
	
// Процедура вывода на экран окна восклицания.
//
// Параметры:
//	ТекстПредупреждения - Строка. Текст предупреждения;
//	Таймаут - Число. Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя;
//	Заголовок - Строка. Заголовок окна.
//
Процедура __Восклицание(ТекстПредупреждения, Таймаут = 0, Заголовок = "") Экспорт
	
	// Перенаправление.
	Обработки.TouchПредупреждение.Создать().ВывестиВосклицание(ТекстПредупреждения, Таймаут, Заголовок);
	
КонецПроцедуры // __Восклицание()

// Процедура вывода на экран окна ошибки.
//
// Параметры:
//	ТекстПредупреждения - Строка. Текст предупреждения;
//	Таймаут - Число. Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя;
//	Заголовок - Строка. Заголовок окна.
//
Процедура __Ошибка(ТекстПредупреждения, Таймаут = 0, Заголовок = "") Экспорт
	
	// Перенаправление.
	Обработки.TouchПредупреждение.Создать().ВывестиОшибку(ТекстПредупреждения, Таймаут, Заголовок);
	
КонецПроцедуры // __Ошибка()


// Функция вывода на экран окна вопроса.
//
// Параметры:
//	ТекстВопроса - Строка. Текст задаваемого вопроса;
//	Режим - РежимДиалогаВопрос. Задает состав кнопок диалога и возможные варианты ответов;
//	Таймаут - Число. Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя;
//	КнопкаПоУмолчанию - КодВозвратаДиалога. Определяет кнопку, которая должна быть назначена кнопкой по умолчанию;
//	Заголовок - Строка. Заголовок окна.
//
// Возвращаемое значение:
//	КодВозвратаДиалога. В зависимости от реакции пользователя возвращается одно из значений системного перечисления.
//
Функция __Вопрос(ТекстВопроса, Режим, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchПредупреждение.Создать().ВывестиВопрос(ТекстВопроса, Режим, Таймаут, КнопкаПоУмолчанию, Заголовок);
	
КонецФункции // __Вопрос()


// Функция ввода числа через числовую экранную клавиатуру.
//
// Параметры:
//	Число - Число. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Длина - Число. Длина вводимого числа включая дробную часть;
//	Точность - Число. Количество знаков в дробной части вводимого числа;
//	Мин - Число. Минимальное допустимое значение;
//	Макс - Число. Максимальное допустимое значение;
//	Формат - Строка. Формат представления значения;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Число - Число. Введенное значение.
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, функцияя перестает быть интерактивной, а 
//	обработка превращается в обработку обслуживания элементов переданной формы пользователя.
//	Предпологается, что все обслуживаемые элементы формы описаны согласно следующему правилу:
//		<CallBackФорма>.ЭлементыФормы.<CallBackПрефикс><Элемент>
//	В данном режиме вызова парметры Мин и Макс игнорируются, а в качестве возвращаемого значения функцией
//	возвращается обработка обслуживания.
//
Функция __ВвестиЧисло(Число, Подсказка = "", Длина = 0, Точность = 0, Мин = Неопределено, Макс = Неопределено, Формат = "", CallBackФорма = Неопределено, CallBackПрефикс = "Кнопка") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchВводЗначения.Создать().ВводЧисла(Число, Подсказка, Длина, Точность, Мин, Макс, Формат, CallBackФорма, CallBackПрефикс);
	
КонецФункции // __ВвестиЧисло()

// Функция ввода числа через числовую экранную клавиатуру.
//
// Параметры:
//	Число - Дата. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	ЧастьДаты - ЧастиДаты. Часть вводимой даты;
//	Мин - Дата. Минимальное допустимое значение;
//	Макс - Дата. Максимальное допустимое значение;
//	Формат - Строка. Формат представления значения;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Дата - Дата. Введенное значение.
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, функцияя перестает быть интерактивной, а 
//	обработка превращается в обработку обслуживания элементов переданной формы пользователя.
//	Предпологается, что все обслуживаемые элементы формы описаны согласно следующему правилу:
//		<CallBackФорма>.ЭлементыФормы.<CallBackПрефикс><Элемент>
//	В данном режиме вызова парметры Мин и Макс игнорируются, а в качестве возвращаемого значения функцией
//	возвращается обработка обслуживания.
//
Функция __ВвестиДату(Дата, Подсказка = "", ЧастьДаты = Неопределено, Мин = Неопределено, Макс = Неопределено, Формат = "", CallBackФорма = Неопределено, CallBackПрефикс = "Кнопка") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchВводЗначения.Создать().ВводДаты(Дата, Подсказка, ЧастьДаты, Мин, Макс, Формат, CallBackФорма, CallBackПрефикс);
	
КонецФункции // __ВвестиДату()

// Функция ввода строки через экранную клавиатуру.
//
// Параметры:
//	Строка - Строка. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Длина - Число. Длина вводимой строки;
//	Многострочность - Булево. Определяет режим ввода многострочного текста;
//	КодЯзыка - Строка. Указывает код языка, на котором будет вводится строка по умолчанию;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Строка - Строка. Введенное значение.
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, функцияя перестает быть интерактивной, а 
//	обработка превращается в обработку обслуживания элементов переданной формы пользователя.
//	Предпологается, что все обслуживаемые элементы формы описаны согласно следующему правилу:
//		<CallBackФорма>.ЭлементыФормы.<CallBackПрефикс><Элемент>
//	В данном режиме в качестве возвращаемого значения функцией возвращается обработка обслуживания.
//
Функция __ВвестиСтроку(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, КодЯзыка = Неопределено, CallBackФорма = Неопределено, CallBackПрефикс = "Кнопка") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchВводЗначения.Создать().ВводСтроки(Строка, Подсказка, Длина, Многострочность, КодЯзыка, CallBackФорма, CallBackПрефикс);
	
КонецФункции // __ВвестиСтроку()

// Функция ввода пароля через числовую экранную клавиатуру.
//
// Параметры:
//	Подсказка - Строка. Текст заголовка окна диалога ввода числа.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществления ввода значения;
//	Пароль - Строка. Введенный пароль.
//
Функция __ВвестиПароль(Пароль, Подсказка = "") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchВводЗначения.Создать().ВводПароля(Пароль, Подсказка);
	
КонецФункции // __ВвестиПароль()

// Функция ввода значения с помощью экранных клавиатур соответсвующего вида.
//
// Параметры:
//	Значение - Число, Дата, Строка. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Тип - Тип. Тип вводимого значения. Если параметр не указан, используется тип параметра Значение;
//	Формат - Строка. Формат представления значения или код языка, на котором будет вводится строка по умолчанию, для ввода значения строкового типа;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Значение - Число, Дата, Строка. Введенное значение.
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, функцияя перестает быть интерактивной, а 
//	обработка превращается в обработку обслуживания элементов переданной формы пользователя.
//	В данном режиме в качестве возвращаемого значения функцией возвращается обработка обслуживания.
//
Функция __ВвестиЗначение(Значение, Подсказка = "", Тип = Неопределено, Формат = "", CallBackФорма = Неопределено, CallBackПрефикс = "Кнопка") Экспорт
	
	// Определение типа значения.
	ТипЗначения = Тип;
	Если (Тип = Неопределено) Тогда
		ТипЗначения = ТипЗнч(Значение);
	КонецЕсли;
	
	// Перенаправление.
	Если (ТипЗначения = Тип("Число")) Тогда
		Возврат __ВвестиЧисло(Значение, Подсказка, ТипЗначения.КвалификаторыЧисла.Разрядность, ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти, ,, Формат, CallBackФорма, CallBackПрефикс);
	КонецЕсли;
	Если (ТипЗначения = Тип("Дата")) Тогда
		Возврат __ВвестиДату(Значение, Подсказка, ТипЗначения.КвалификаторыДаты.ЧастиДаты, ,, Формат, CallBackФорма, CallBackПрефикс);
	КонецЕсли;
	Если (ТипЗначения = Тип("Строка")) Тогда
		Возврат __ВвестиСтроку(Значение, Подсказка, ТипЗначения.КвалификаторыСтроки.Длина, , Формат, CallBackФорма, CallBackПрефикс);
	КонецЕсли;
	
	// TODO: Вызврать исключение.
	
	Возврат Ложь;
	
КонецФункции // __ВвестиЗначение()


// Функция поиска числа вводимого через числовую экранную клавиатуру.
//
// Параметры:
//	Число - Число. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода числа;
//	Длина - Число. Длина вводимого числа включая дробную часть;
//	Точность - Число. Количество знаков в дробной части вводимого числа;
//	Мин - Число. Минимальное допустимое значение;
//	Макс - Число. Максимальное допустимое значение;
//	Формат - Строка. Формат представления значения;
//	Данные - СписокЗначений, ТаблицаЗначений, ДеревоЗначений. Набор значений из которой осуществляется выбор искомого значения;
//	Колонки - Строка. Перечень отображаемых колонок данных;
//	ТолькоВыбор - Булево. Не допускает выбор значения невходящего в переданный набор данных (фактически запрещает ввод новых значений);
//	CallBackФорма - Форма. Форма содержащая callback-процедуры вызов которых будет осуществляется данной обработкой;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах callback-процедур формы вызов которых будет осуществляется данной обработкой.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществления ввод значения;
//	Число - Число, ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Введенное значение или элемент из переданного набора данных.
//
// События:
//	ПриИзмененииДанных() - возникает после связывания табличного поля с переданым набором значений и созданием требумых колонок до размещения элемента на форме.
//		В теле процедуры-обработчика допускается любая перенастройка элемента вплоть до связвания с иным набором значений и созданием другой коллекции колонок.
//		После выхода из процедуры-обработчика настройки выравнивания и обработчиков-событий табличного поля будут принудительно приведены в соответсвие с настройками для корректного функционирования формы;
//	ПриПоискеЗначения(Значение, СтандартнаяОбработка) - возникает по мере ввода значения пользователем:
//		- Значение - Число. Значение введенное на данный момент пользователем;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//				Стандартным обработчиком осуществляется обычный поиск значения в пределах данных связанных в данный момент с элементом формы используемым для работы с переданным набором значений;
//	Выбор(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) - возникает при выборе строки табличного поля пользователем:
//		- ВыбраннаяСтрока - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Выбранная строка табличного поля;
//		- Колонка - ОбработкаОбъект.TouchКолонкаТабличногоПоля. Выбранная колонка табличного поля;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет;
//	ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) - возникает при выводе строки в табличном поле. В процедуре-обработчике события допускается изменение оформления как строки в целом, так и каждой ячейке в отдельности:
//		- Оформление строки - ОбработкаОбъект.TouchОформлениеСтроки. Содержит оформление строки и коллекцию оформлений ячеек;
//		- ДанныеСтроки - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Данные выводимой строки. Параметр соответствует свойству ТекущиеДанные для выводимой строки. 
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, то по мере работы с формой вызываются callback-процедуры соответсвующих событий.
//	Предпологается, что все callback-процедуры-обработчики описаны согласно следующему правилу:
//		<CallBackПрефикс><Событие>(Элемент[, Праметры]) Экспорт
//	И соответвенно могут быть вызваны записью вида:
//		<CallBackФорма>.<CallBackПрефикс><Событие>(Элемент[, Праметры]);
//	При этом в первый параметр всегда передается элемент формы обработки, типа ОбработкаОбъект.TouchТабличноеПоле, используемый для работы с переданным набором значений.
//	В процедуре-обработчике события допускаеются любые разумные манипуляции с переданым элементом формы обработки и его данными.
//
Функция __НайтиЧисло(Число, Подсказка = "", Длина = 0, Точность = 0, Мин = Неопределено, Макс = Неопределено, Формат = "",
				     Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchПоискЗначения.Создать().ПоискЧисла(Число, Подсказка, Длина, Точность, Мин, Макс, Формат, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	
КонецФункции // __НайтиЧисло()

// Функция поиска даты вводимой через числовую экранную клавиатуру.
//
// Параметры:
//	Число - Дата. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	ЧастьДаты - ЧастиДаты. Часть вводимой даты;
//	Мин - Дата. Минимальное допустимое значение;
//	Макс - Дата. Максимальное допустимое значение;
//	Формат - Строка. Формат представления значения;
//	Данные - СписокЗначений, ТаблицаЗначений, ДеревоЗначений. Набор значений из которой осуществляется выбор искомого значения;
//	Колонки - Строка. Перечень отображаемых колонок данных;
//	ТолькоВыбор - Булево. Не допускает выбор значения невходящего в переданный набор данных (фактически запрещает ввод новых значений);
//	CallBackФорма - Форма. Форма содержащая callback-процедуры вызов которых будет осуществляется данной обработкой;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах callback-процедур формы вызов которых будет осуществляется данной обработкой.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Дата - Дата, ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Введенное значение или элемент из переданного набора данных.
//
// События:
//	ПриИзмененииДанных() - возникает после связывания табличного поля с переданым набором значений и созданием требумых колонок до размещения элемента на форме.
//		В теле процедуры-обработчика допускается любая перенастройка элемента вплоть до связвания с иным набором значений и созданием другой коллекции колонок.
//		После выхода из процедуры-обработчика настройки выравнивания и обработчиков-событий табличного поля будут принудительно приведены в соответсвие с настройками для корректного функционирования формы;
//	ПриПоискеЗначения(Значение, СтандартнаяОбработка) - возникает по мере ввода значения пользователем:
//		- Значение - Число. Значение введенное на данный момент пользователем;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//				Стандартным обработчиком осуществляется обычный поиск значения в пределах данных связанных в данный момент с элементом формы используемым для работы с переданным набором значений;
//	Выбор(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) - возникает при выборе строки табличного поля пользователем:
//		- ВыбраннаяСтрока - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Выбранная строка табличного поля;
//		- Колонка - ОбработкаОбъект.TouchКолонкаТабличногоПоля. Выбранная колонка табличного поля;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет;
//	ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) - возникает при выводе строки в табличном поле. В процедуре-обработчике события допускается изменение оформления как строки в целом, так и каждой ячейке в отдельности:
//		- Оформление строки - ОбработкаОбъект.TouchОформлениеСтроки. Содержит оформление строки и коллекцию оформлений ячеек;
//		- ДанныеСтроки - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Данные выводимой строки. Параметр соответствует свойству ТекущиеДанные для выводимой строки. 
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, то по мере работы с формой вызываются callback-процедуры соответсвующих событий.
//	Предпологается, что все callback-процедуры-обработчики описаны согласно следующему правилу:
//		<CallBackПрефикс><Событие>(Элемент[, Праметры]) Экспорт
//	И соответвенно могут быть вызваны записью вида:
//		<CallBackФорма>.<CallBackПрефикс><Событие>(Элемент[, Праметры]);
//	При этом в первый параметр всегда передается элемент формы обработки, типа ОбработкаОбъект.TouchТабличноеПоле, используемый для работы с переданным набором значений.
//	В процедуре-обработчике события допускаеются любые разумные манипуляции с переданым элементом формы обработки и его данными.
//
Функция __НайтиДату(Дата, Подсказка = "", ЧастьДаты = Неопределено, Мин = Неопределено, Макс = Неопределено, Формат = "", 
				    Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchПоискЗначения.Создать().ПоискДаты(Дата, Подсказка, ЧастьДаты, Мин, Макс, Формат, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	
КонецФункции // __НайтиСтроку()

// Функция поиска строки вводимой через экранную клавиатуру.
//
// Параметры:
//	Строка - Строка. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Длина - Число. Длина вводимой строки;
//	Многострочность - Булево. Игнорируется;
//	КодЯзыка - Строка. Указывает код языка, на котором будет вводится строка по умолчанию;
//	Данные - СписокЗначений, ТаблицаЗначений, ДеревоЗначений. Набор значений из которой осуществляется выбор искомого значения;
//	Колонки - Строка. Перечень отображаемых колонок данных;
//	ТолькоВыбор - Булево. Не допускает выбор значения невходящего в переданный набор данных (фактически запрещает ввод новых значений);
//	CallBackФорма - Форма. Форма содержащая callback-процедуры вызов которых будет осуществляется данной обработкой;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах callback-процедур формы вызов которых будет осуществляется данной обработкой.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществления ввод значения;
//	Строка - Строка, ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Введенное значение или элемент из переданного набора данных.
//
// События:
//	ПриИзмененииДанных() - возникает после связывания табличного поля с переданым набором значений и созданием требумых колонок до размещения элемента на форме.
//		В теле процедуры-обработчика допускается любая перенастройка элемента вплоть до связвания с иным набором значений и созданием другой коллекции колонок.
//		После выхода из процедуры-обработчика настройки выравнивания и обработчиков-событий табличного поля будут принудительно приведены в соответсвие с настройками для корректного функционирования формы;
//	ПриПоискеЗначения(Значение, СтандартнаяОбработка) - возникает по мере ввода значения пользователем:
//		- Значение - Число. Значение введенное на данный момент пользователем;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//				Стандартным обработчиком осуществляется обычный поиск значения в пределах данных связанных в данный момент с элементом формы используемым для работы с переданным набором значений;
//	Выбор(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) - возникает при выборе строки табличного поля пользователем:
//		- ВыбраннаяСтрока - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Выбранная строка табличного поля;
//		- Колонка - ОбработкаОбъект.TouchКолонкаТабличногоПоля. Выбранная колонка табличного поля;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет;
//	ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) - возникает при выводе строки в табличном поле. В процедуре-обработчике события допускается изменение оформления как строки в целом, так и каждой ячейке в отдельности:
//		- Оформление строки - ОбработкаОбъект.TouchОформлениеСтроки. Содержит оформление строки и коллекцию оформлений ячеек;
//		- ДанныеСтроки - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Данные выводимой строки. Параметр соответствует свойству ТекущиеДанные для выводимой строки. 
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, то по мере работы с формой вызываются callback-процедуры соответсвующих событий.
//	Предпологается, что все callback-процедуры-обработчики описаны согласно следующему правилу:
//		<CallBackПрефикс><Событие>(Элемент[, Праметры]) Экспорт
//	И соответвенно могут быть вызваны записью вида:
//		<CallBackФорма>.<CallBackПрефикс><Событие>(Элемент[, Праметры]);
//	При этом в первый параметр всегда передается элемент формы обработки, типа ОбработкаОбъект.TouchТабличноеПоле, используемый для работы с переданным набором значений.
//	В процедуре-обработчике события допускаеются любые разумные манипуляции с переданым элементом формы обработки и его данными.
//
Функция __НайтиСтроку(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, КодЯзыка = Неопределено, 
				      Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchПоискЗначения.Создать().ПоискСтроки(Строка, Подсказка, Длина, Многострочность, КодЯзыка, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	
КонецФункции // __НайтиСтроку()

//Костенюк Александр-Старт 05.09.2012
// Функция поиска строки вводимой через экранную клавиатуру.
//
// Параметры:
//	Строка - Строка. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Длина - Число. Длина вводимой строки;
//	Многострочность - Булево. Игнорируется;
//	КодЯзыка - Строка. Указывает код языка, на котором будет вводится строка по умолчанию;
//	Данные - СписокЗначений, ТаблицаЗначений, ДеревоЗначений. Набор значений из которой осуществляется выбор искомого значения;
//	Колонки - Строка. Перечень отображаемых колонок данных;
//	ТолькоВыбор - Булево. Не допускает выбор значения невходящего в переданный набор данных (фактически запрещает ввод новых значений);
//	CallBackФорма - Форма. Форма содержащая callback-процедуры вызов которых будет осуществляется данной обработкой;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах callback-процедур формы вызов которых будет осуществляется данной обработкой.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществления ввод значения;
//	Строка - Строка, ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Введенное значение или элемент из переданного набора данных.
//
// События:
//	ПриИзмененииДанных() - возникает после связывания табличного поля с переданым набором значений и созданием требумых колонок до размещения элемента на форме.
//		В теле процедуры-обработчика допускается любая перенастройка элемента вплоть до связвания с иным набором значений и созданием другой коллекции колонок.
//		После выхода из процедуры-обработчика настройки выравнивания и обработчиков-событий табличного поля будут принудительно приведены в соответсвие с настройками для корректного функционирования формы;
//	ПриПоискеЗначения(Значение, СтандартнаяОбработка) - возникает по мере ввода значения пользователем:
//		- Значение - Число. Значение введенное на данный момент пользователем;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//				Стандартным обработчиком осуществляется обычный поиск значения в пределах данных связанных в данный момент с элементом формы используемым для работы с переданным набором значений;
//	Выбор(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) - возникает при выборе строки табличного поля пользователем:
//		- ВыбраннаяСтрока - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Выбранная строка табличного поля;
//		- Колонка - ОбработкаОбъект.TouchКолонкаТабличногоПоля. Выбранная колонка табличного поля;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет;
//	ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) - возникает при выводе строки в табличном поле. В процедуре-обработчике события допускается изменение оформления как строки в целом, так и каждой ячейке в отдельности:
//		- Оформление строки - ОбработкаОбъект.TouchОформлениеСтроки. Содержит оформление строки и коллекцию оформлений ячеек;
//		- ДанныеСтроки - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Данные выводимой строки. Параметр соответствует свойству ТекущиеДанные для выводимой строки. 
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, то по мере работы с формой вызываются callback-процедуры соответсвующих событий.
//	Предпологается, что все callback-процедуры-обработчики описаны согласно следующему правилу:
//		<CallBackПрефикс><Событие>(Элемент[, Праметры]) Экспорт
//	И соответвенно могут быть вызваны записью вида:
//		<CallBackФорма>.<CallBackПрефикс><Событие>(Элемент[, Праметры]);
//	При этом в первый параметр всегда передается элемент формы обработки, типа ОбработкаОбъект.TouchТабличноеПоле, используемый для работы с переданным набором значений.
//	В процедуре-обработчике события допускаеются любые разумные манипуляции с переданым элементом формы обработки и его данными.
//
Функция НайтиСтрокуЧисло(Строка, Подсказка = "", Длина = 0, Многострочность = Ложь, КодЯзыка = Неопределено, 
				      Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchПоискЗначения.Создать().ПоискСтрокиЧисла(Строка, Подсказка, Длина, Многострочность, КодЯзыка, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	
КонецФункции // НайтиСтрокуЧисло()
//Костенюк Александр-Финиш 05.09.2012

// Функция поиска значения с помощью экранных клавиатур соответсвующего вида.
//
// Параметры:
//	Значение - Число, Дата, Строка. Начальное значение;
//	Подсказка - Строка. Текст заголовка окна диалога ввода значения;
//	Тип - Тип. Тип вводимого значения. Если параметр не указан, используется тип параметра Значение;
//	Формат - Строка. Формат представления значения или код языка, на котором будет вводится строка по умолчанию, для ввода значения строкового типа;
//	CallBackФорма - Форма. Форма обслуживание элементов которых будет в компитенции обработки;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах элементов формы обслуживание которых будет в компитенции обработки.
//	Данные - СписокЗначений, ТаблицаЗначений, ДеревоЗначений. Набор значений из которой осуществляется выбор искомого значения;
//	Колонки - Строка. Перечень отображаемых колонок данных;
//	ТолькоВыбор - Булево. Не допускает выбор значения невходящего в переданный набор данных (фактически запрещает ввод новых значений);
//	CallBackФорма - Форма. Форма содержащая callback-процедуры вызов которых будет осуществляется данной обработкой;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах callback-процедур формы вызов которых будет осуществляется данной обработкой.
//
// Возвращаемое значение:
//	Булево. Истина - если был осуществлен ввод значения;
//	Значение - Число, Дата, Строка, ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Введенное значение или элемент из переданного набора данных.
//
// События:
//	ПриИзмененииДанных() - возникает после связывания табличного поля с переданым набором значений и созданием требумых колонок до размещения элемента на форме.
//		В теле процедуры-обработчика допускается любая перенастройка элемента вплоть до связвания с иным набором значений и созданием другой коллекции колонок.
//		После выхода из процедуры-обработчика настройки выравнивания и обработчиков-событий табличного поля будут принудительно приведены в соответсвие с настройками для корректного функционирования формы;
//	ПриПоискеЗначения(Значение, СтандартнаяОбработка) - возникает по мере ввода значения пользователем:
//		- Значение - Число. Значение введенное на данный момент пользователем;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//				Стандартным обработчиком осуществляется обычный поиск значения в пределах данных связанных в данный момент с элементом формы используемым для работы с переданным набором значений;
//	Выбор(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) - возникает при выборе строки табличного поля пользователем:
//		- ВыбраннаяСтрока - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Выбранная строка табличного поля;
//		- Колонка - ОбработкаОбъект.TouchКолонкаТабличногоПоля. Выбранная колонка табличного поля;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет;
//	ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) - возникает при выводе строки в табличном поле. В процедуре-обработчике события допускается изменение оформления как строки в целом, так и каждой ячейке в отдельности:
//		- Оформление строки - ОбработкаОбъект.TouchОформлениеСтроки. Содержит оформление строки и коллекцию оформлений ячеек;
//		- ДанныеСтроки - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Данные выводимой строки. Параметр соответствует свойству ТекущиеДанные для выводимой строки. 
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, то по мере работы с формой вызываются callback-процедуры соответсвующих событий.
//	Предпологается, что все callback-процедуры-обработчики описаны согласно следующему правилу:
//		<CallBackПрефикс><Событие>(Элемент[, Праметры]) Экспорт
//	И соответвенно могут быть вызваны записью вида:
//		<CallBackФорма>.<CallBackПрефикс><Событие>(Элемент[, Праметры]);
//	При этом в первый параметр всегда передается элемент формы обработки, типа ОбработкаОбъект.TouchТабличноеПоле, используемый для работы с переданным набором значений.
//	В процедуре-обработчике события допускаеются любые разумные манипуляции с переданым элементом формы обработки и его данными.
//
Функция __НайтиЗначение(Значение, Подсказка = "", Тип = Неопределено, Формат = "",
				        Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	// Определение типа значения.
	ТипЗначения = Тип;
	Если (Тип = Неопределено) Тогда
		ТипЗначения = ТипЗнч(Значение);
	КонецЕсли;
	
	// Перенаправление.
	Если (ТипЗначения = Тип("Число")) Тогда
		Возврат __НайтиЧисло(Значение, Подсказка, ТипЗначения.КвалификаторыЧисла.Разрядность, ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти, ,, Формат, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	КонецЕсли;
	Если (ТипЗначения = Тип("Дата")) Тогда
		Возврат __НайтиДату(Значение, Подсказка, ТипЗначения.КвалификаторыДаты.ЧастиДаты, ,, Формат, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	КонецЕсли;
	Если (ТипЗначения = Тип("Строка")) Тогда
		Возврат __НайтиСтроку(Значение, Подсказка, ТипЗначения.КвалификаторыСтроки.Длина, , Формат, Данные, Колонки, ТолькоВыбор, CallBackФорма, CallBackПрефикс);
	КонецЕсли;
	
	// TODO: Вызврать исключение.
	
	Возврат Ложь;
	
КонецФункции // __НайтиЗначение()


// Функция выбора значения из переданного набора значений.
//
// Параметры:
//	Заголовок - Строка. Заголовок диалога выбора строки;
//	НачальноеЗначение - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Начальная значение (будет выделенно при открытии диалога);
//	Данные - СписокЗначений, ТаблицаЗначений, ДеревоЗначений. Набор значений из которой осуществляется выбор искомого значения;
//	Колонки - Строка. Перечень отображаемых колонок данных;
//	CallBackФорма - Форма. Форма содержащая callback-процедуры вызов которых будет осуществляется данной обработкой;
//	CallBackПрефикс - Строка. Стандартный префикс содержащийся в именах callback-процедур формы вызов которых будет осуществляется данной обработкой.
//
// Возвращаемое значение:
//	Неопределено, ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Выбранный элемент из переданного набора данных. Если выбор не осуществлен, возвращает Неопределено.
//
// События:
//	ПриИзмененииДанных() - возникает после связывания табличного поля с переданым набором значений и созданием требумых колонок до размещения элемента на форме.
//		В теле процедуры-обработчика допускается любая перенастройка элемента вплоть до связвания с иным набором значений и созданием другой коллекции колонок.
//		После выхода из процедуры-обработчика настройки выравнивания и обработчиков-событий табличного поля будут принудительно приведены в соответсвие с настройками для корректного функционирования формы;
//	Выбор(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) - возникает при выборе строки табличного поля пользователем:
//		- ВыбраннаяСтрока - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Выбранная строка табличного поля;
//		- Колонка - ОбработкаОбъект.TouchКолонкаТабличногоПоля. Выбранная колонка табличного поля;
//		- СтандартнаяОбработка - Булево. В данный параметр передается признак выполнения стандартной обработки события.
//				Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет;
//	ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) - возникает при выводе строки в табличном поле. В процедуре-обработчике события допускается изменение оформления как строки в целом, так и каждой ячейке в отдельности:
//		- Оформление строки - ОбработкаОбъект.TouchОформлениеСтроки. Содержит оформление строки и коллекцию оформлений ячеек;
//		- ДанныеСтроки - ЭлементСпискаЗначений, СтрокаТаблицыЗначений, СтрокаДереваЗначений. Данные выводимой строки. Параметр соответствует свойству ТекущиеДанные для выводимой строки. 
//
// Описание:
//	В случае если функции передается не пустой параметр CallBackФорма, то по мере работы с формой вызываются callback-процедуры соответсвующих событий.
//	Предпологается, что все callback-процедуры-обработчики описаны согласно следующему правилу:
//		<CallBackПрефикс><Событие>(Элемент[, Праметры]) Экспорт
//	И соответвенно могут быть вызваны записью вида:
//		<CallBackФорма>.<CallBackПрефикс><Событие>(Элемент[, Праметры]);
//	При этом в первый параметр всегда передается элемент формы обработки, типа ОбработкаОбъект.TouchТабличноеПоле, используемый для работы с переданным набором значений.
//	В процедуре-обработчике события допускаеются любые разумные манипуляции с переданым элементом формы обработки и его данными.
//
Функция __ВыбратьЗначение(Заголовок = "", НачальноеЗначение = Неопределено,
				          Данные, Колонки = "", ТолькоВыбор = Истина, CallBackФорма = Неопределено, CallBackПрефикс = "Поиск") Экспорт
	
	// Перенаправление.
	Возврат Обработки.TouchВыборЗначения.Создать().ВыборЗначения(Заголовок, НачальноеЗначение, Данные, Колонки, CallBackФорма, CallBackПрефикс);
	
КонецФункции // __ВыбратьЗначение()


// Функция предназначена для создания и начальной инициальзации нового объекта TouchБиблиотекаКартинок.
//
// Описание:
//	В первую очередь функция выступает в роли, единой точки входа при создании нового объекта
//	данного класса и предназначена для его инициализации по зарание неизвестным требованиям или стандартам.
//
// Параметры:
//	Объект - ОбработкаОбъект.TouchБиблиотекаКартинок. Объект TouchБиблиотекаКартинок требующий инициализации (если не указан - создается новый объект данного класса).
//
// Возвращаемое значение:
//	ОбработкаОбъект.TouchБиблиотекаКартинок. Инициализированный объект TouchБиблиотекаКартинок.
//
Функция БиблиотекаКартинок(Объект = Неопределено) Экспорт
	
	// Класс.
	Если (Объект = Неопределено) Тогда
		Возврат Обработки.TouchБиблиотекаКартинок.Создать();
	КонецЕсли;
	
	// Инициализация.
	//
	//	Произвольный код инициализирующий объект.
	//
	
	// Класс.
	Возврат Объект;
	
КонецФункции // БиблиотекаКартинок()

// Функция предназначена для создания и начальной инициальзации нового объекта TouchВыравнивание.
//
// Описание:
//	В первую очередь функция выступает в роли, единой точки входа при создании нового объекта
//	данного класса и предназначена для его инициализации по зарание неизвестным требованиям или стандартам.
//
// Параметры:
//	Объект - ОбработкаОбъект.TouchВыравнивание. Объект TouchБиблиотекаКартинок требующий инициализации (если не указан - создается новый объект данного класса).
//
// Возвращаемое значение:
//	ОбработкаОбъект.TouchВыравнивание. Инициализированный объект TouchБиблиотекаКартинок.
//
Функция Выравнивание(Объект = Неопределено) Экспорт
	
	// Класс.
	Если (Объект = Неопределено) Тогда
		Возврат Обработки.TouchВыравнивание.Создать();
	КонецЕсли;
	
	// Инициализация.
	//
	//	Произвольный код инициализирующий объект.
	//
	
	// Класс.
	Возврат Объект;
	
КонецФункции // Выравнивание()

// Функция предназначена для создания и начальной инициальзации нового объекта TouchКоманднаяПанель.
//
// Описание:
//	В первую очередь функция выступает в роли, единой точки входа при создании нового объекта
//	данного класса и предназначена для его инициализации по зарание неизвестным требованиям или стандартам.
//
// Параметры:
//	Объект - ОбработкаОбъект.TouchКоманднаяПанель. Объект TouchКоманднаяПанель требующий инициализации (если не указан - создается новый объект данного класса).
//
// Возвращаемое значение:
//	ОбработкаОбъект.TouchКоманднаяПанель. Инициализированный объект TouchКоманднаяПанель.
//
Функция КоманднаяПанель(Объект = Неопределено) Экспорт
	
	// Класс.
	Если (Объект = Неопределено) Тогда
		Возврат Обработки.TouchКоманднаяПанель.Создать();
	КонецЕсли;
	
	// Инициализация.
	//
	//	Произвольный код инициализирующий объект.
	//
	
	// Класс.
	Возврат Объект;
	
КонецФункции // КоманднаяПанель()

#КонецЕсли
