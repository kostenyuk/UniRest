
Функция ОсновнаяСхема() Экспорт
	
	// СОВМЕСТИОСЬ: Выбирвать настроек.
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СхемыСтолов.Стол КАК Ссылка
	                      |ИЗ
	                      |	РегистрСведений.СхемыСтолов КАК СхемыСтолов
	                      |ГДЕ
	                      |	СхемыСтолов.Настроена
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Столы.ПустаяСсылка();

КонецФункции // ОсновнаяСхема()

Функция КоличествоСхемБолееОдной() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СхемыСтолов.Стол) КАК Количество
	                      |ИЗ
	                      |	РегистрСведений.СхемыСтолов КАК СхемыСтолов");
						  
	Возврат (Запрос.Выполнить().Выгрузить()[0].Количество > 1);

КонецФункции // КоличествоСхемБолееОдной()

Функция КоличествоНастроенныхОднаИБолее() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СхемыСтолов.Стол) КАК Количество
	                      |ИЗ
	                      |	РегистрСведений.СхемыСтолов КАК СхемыСтолов
	                      |ГДЕ
	                      |	СхемыСтолов.Настроена");
						  
	Возврат (Запрос.Выполнить().Выгрузить()[0].Количество >= 1);

КонецФункции // КоличествоНастроенныхОднаИБолее()

Функция КоличествоНастроенныхСхемБолееОдной() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СхемыСтолов.Стол) КАК Количество
	                      |ИЗ
	                      |	РегистрСведений.СхемыСтолов КАК СхемыСтолов
	                      |ГДЕ
	                      |	СхемыСтолов.Настроена");
						  
	Возврат (Запрос.Выполнить().Выгрузить()[0].Количество > 1);

КонецФункции // КоличествоНастроенныхСхемБолееОдной()


Функция ПолучитьНастроенныеСхемы() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СхемыСтолов.Стол КАК Ссылка
	                      |ИЗ
	                      |	РегистрСведений.СхемыСтолов КАК СхемыСтолов
	                      |ГДЕ
	                      |	СхемыСтолов.Настроена
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка
	                      |АВТОУПОРЯДОЧИВАНИЕ");
						  
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");						  

КонецФункции // ПолучитьНастроенныеСхемы()


Функция ПолучитьИнтервалВыбораВремени() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЗаказыПокупателейИнтервалВыбораВремениМинимальноеВремя", '00010101000000');
	Настройки.Вставить("ЗаказыПокупателейИнтервалВыбораВремениМаксимальноеВремя", '00010101230000');
	
	Настройки = __ОбщегоНазначенияПовторно.ПолучитьНастройкиПользователеля(Неопределено, Настройки);
	
	МинимальноеВремя = Настройки.ЗаказыПокупателейИнтервалВыбораВремениМинимальноеВремя;
	МаксимальноеВремя = Настройки.ЗаказыПокупателейИнтервалВыбораВремениМаксимальноеВремя;
	
	Результат = Новый Структура;
	Результат.Вставить("МинимальныйЧас", Час(МинимальноеВремя));
	Результат.Вставить("МаксимальныйЧас", Час(МаксимальноеВремя));
	Результат.Вставить("МинимальноеВремя", МинимальноеВремя);
	Результат.Вставить("МаксимальноеВремя", МаксимальноеВремя);
	
	Возврат Результат;
	
КонецФункции // ПолучитьНастроенныеСхемы()

Процедура УстановитьИнтервалВыбораВремени(Отказ, Параметры) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЗаказыПокупателейИнтервалВыбораВремениМинимальноеВремя", Параметры.МинимальноеВремя);
	Настройки.Вставить("ЗаказыПокупателейИнтервалВыбораВремениМаксимальноеВремя", Параметры.МаксимальноеВремя);
	
	__ОбщегоНазначенияСервер.УстановитьНастройкиПользователеля(Отказ, Неопределено, Настройки);
	
КонецПроцедуры // УстановитьИнтервалВыбораВремени()


// ─────────────────────────────────────────────────────────────────────────────
//	Контент HTML.

Функция ПолучитьСостояниекСхемыHTML(НачалоПериода, ОкончаниеПериода, Ресторан = Неопределено, Родитель = Неопределено, РазмеченныеСтолы = Неопределено, ПараметрыРасчета = Неопределено) Экспорт
	
	СостояниеСхемы = Новый Соответствие;
	
	IDСтола = "scheme-table-body-[Number]"; IDРезервовСтола = "scheme-table-reserve-[Number]"; РезервHTML = РегистрыСведений.СхемыСтолов.ПолучитьМакет("РезервHTML").ПолучитьТекст();
	
	ТаблицаСостоянияСтолов = РегистрыСведений.СостояниеЗаказовПокупателей.ПолучитьСостояниеСтолов(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета); СоответствияСостояний = ПолучитьСоответствияСостояний();
	
	Для Каждого СтрокаТаблицыСостоянияСтолов Из ТаблицаСостоянияСтолов Цикл
		
		ЭлементСостоянияСхемы = СостояниеСхемы[СтрокаТаблицыСостоянияСтолов.Номер];
		Если (ЭлементСостоянияСхемы = Неопределено) Тогда
			ЭлементСостоянияСхемы = Новый Структура;
			
			ДобавляемыеКлассы = ПолучитьКлассСостояния(СтрокаТаблицыСостоянияСтолов.СостояниеСтола, СоответствияСостояний);
			Если СтрокаТаблицыСостоянияСтолов.СостояниеСтолаПересекающийся Тогда
				ДобавляемыеКлассы = ДобавляемыеКлассы + "," + ПолучитьКлассСостояния(Перечисления.СостояниеСтолов.Пересекающиеся, СоответствияСостояний);
			КонецЕсли;
			УдаляемыеКлассы = ПолучитьВсеКлассыСостоянияСтолов(СоответствияСостояний);
			
			ЭлементСостоянияСхемы.Вставить("tableID", СтрЗаменить(IDСтола, "[Number]", XMLЧисло(СтрокаТаблицыСостоянияСтолов.Номер)));
			ЭлементСостоянияСхемы.Вставить("tableAddedClass", ДобавляемыеКлассы);
			ЭлементСостоянияСхемы.Вставить("tableRemovedClass", УдаляемыеКлассы);
			
			ЭлементСостоянияСхемы.Вставить("reserveID", СтрЗаменить(IDРезервовСтола, "[Number]", XMLЧисло(СтрокаТаблицыСостоянияСтолов.Номер)));
			ЭлементСостоянияСхемы.Вставить("reserveInnerHTML", "");
			
			СостояниеСхемы[СтрокаТаблицыСостоянияСтолов.Номер] = ЭлементСостоянияСхемы;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СтрокаТаблицыСостоянияСтолов.Документ) Тогда
			Элемент = РезервHTML;
			
			Элемент = СтрЗаменить(Элемент, "[Number]", СтрокаТаблицыСостоянияСтолов.Документ.УникальныйИдентификатор());
		
			Элемент = СтрЗаменить(Элемент, "[State]", ПолучитьКлассСостояния(СтрокаТаблицыСостоянияСтолов.СостояниеДокумента, СоответствияСостояний));
			
			Элемент = СтрЗаменить(Элемент, "[Date]", Формат(СтрокаТаблицыСостоянияСтолов.ДатаНачалаРезервирования, "ДФ=H:mm; ДП="));
			Если ПустаяСтрока(СтрокаТаблицыСостоянияСтолов.СледующийНомер) Тогда
				Элемент = СтрЗаменить(Элемент, "[Symbol]", "–");
				Элемент = СтрЗаменить(Элемент, "[Information]", XMLЧисло(СтрокаТаблицыСостоянияСтолов.КоличествоКлиентов));
			Иначе
				Элемент = СтрЗаменить(Элемент, "[Symbol]", Символ(8227));
				Элемент = СтрЗаменить(Элемент, "[Information]", СтрокаТаблицыСостоянияСтолов.СледующийНомер);
			КонецЕсли;
		Иначе
			Элемент = "";
		КонецЕсли;
		
		
		ЭлементСостоянияСхемы.reserveInnerHTML = ЭлементСостоянияСхемы.reserveInnerHTML + Элемент;
	КонецЦикла;
	
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеСхемы", СостояниеСхемы);
	Результат.Вставить("СостояниеРекомендации", РегистрыСведений.СостояниеЗаказовПокупателей.ПолучитьСостояниеРекомендации(НачалоПериода, ОкончаниеПериода, Ресторан, Родитель, РазмеченныеСтолы, ПараметрыРасчета));
	
	Возврат Результат;
	
КонецФункции // ПолучитьСостояниекСхемыHTML()


// ─────────────────────────────────────────────────────────────────────────────
//	Схема HTML.

Функция ПолучитьСхемуHTML(Родитель, Структура = Неопределено) Экспорт
	
	СхемаHTML = РегистрыСведений.СхемыСтолов.ПолучитьМакет("СхемаHTML").ПолучитьТекст(); Схема = СхемаHTML;
	
	Если (Структура = Неопределено) Тогда
		Структура = ПолучитьСтруктуруСхемы(Родитель);
	КонецЕсли;
	Если (Структура = Неопределено) Тогда
		Возврат Схема;
	КонецЕсли;
	
	
	// Пространство.
	Схема = СтрЗаменить(Схема, "300px", Структура.area.style["width"]);	
	Схема = СтрЗаменить(Схема, "200px", Структура.area.style["height"]);	
	Схема = СтрЗаменить(Схема, "[Class]", Структура.area.class);	
	Схема = СтрЗаменить(Схема, "[Style]", ПолучитьСтильCSS(Структура.area.style));	
	
	
	// Состояния.
	ЭлементСтиляРезерваHTML = РегистрыСведений.СхемыСтолов.ПолучитьМакет("СтильРезерваHTML").ПолучитьТекст(); ЭлементСтиляСтолаHTML = РегистрыСведений.СхемыСтолов.ПолучитьМакет("СтильСтолаHTML").ПолучитьТекст(); НаборЭлементов = "";
	
	ТаблицаСтиля = РегистрыСведений.СтилиСхемСтолов.ПолучитьТаблицуСтиля(Истина); СоответствияСостояний = ПолучитьСоответствияСостояний();
	Для Каждого СтрокаТаблицыСтиля Из ТаблицаСтиля Цикл
		СостояниеЗаказовПокупателей = (ТипЗнч(СтрокаТаблицыСтиля.Состояние) = Тип("ПеречислениеСсылка.СостояниеЗаказовПокупателей"));
		СостояниеСтолов = (ТипЗнч(СтрокаТаблицыСтиля.Состояние) = Тип("ПеречислениеСсылка.СостояниеСтолов"));
		
		Если СостояниеЗаказовПокупателей Тогда
			Элемент = ЭлементСтиляРезерваHTML;
		КонецЕсли;
		Если СостояниеСтолов Тогда
			Элемент = ЭлементСтиляСтолаHTML;
		КонецЕсли;
			
		Элемент = СтрЗаменить(Элемент, "[State]", ПолучитьКлассСостояния(СтрокаТаблицыСтиля.Состояние, СоответствияСостояний));
		
		Элемент = СтрЗаменить(Элемент, "[Color]", СтрокаТаблицыСтиля.СхемаЦветТекста);
		Элемент = СтрЗаменить(Элемент, "[BackgroundColor]", СтрокаТаблицыСтиля.СхемаЦветФона);
		Элемент = СтрЗаменить(Элемент, "[BorderColor]", СтрокаТаблицыСтиля.СхемаЦветРамки);
		
		НаборЭлементов = НаборЭлементов + Элемент;
	КонецЦикла;
	
	Схема = СтрЗаменить(Схема, "{Style}", НаборЭлементов);	
	
	
	// CSS.
	ЭлементHTML = РегистрыСведений.СхемыСтолов.ПолучитьМакет("CSSHTML").ПолучитьТекст(); НаборЭлементов = "";
	
	Для Каждого item Из Структура.css Цикл
		Элемент = ЭлементHTML;
		
		Элемент = СтрЗаменить(Элемент, "[Selector]", item.selector);
		
		Элемент = СтрЗаменить(Элемент, "[Style]", ПолучитьСтильCSS(item.style));
		Элемент = СтрЗаменить(Элемент, "[Description]", item.description);
		
		НаборЭлементов = НаборЭлементов + Элемент;
	КонецЦикла;
	
	Схема = СтрЗаменить(Схема, "{CSS}", НаборЭлементов);	
	
	
	// Планировка.
	ЭлементHTML = РегистрыСведений.СхемыСтолов.ПолучитьМакет("ПланHTML").ПолучитьТекст(); НаборЭлементов = "";
	
	Для Каждого item Из Структура.plan Цикл
		Элемент = ЭлементHTML;
		
		Элемент = СтрЗаменить(Элемент, "[Type]", item.type);
		Элемент = СтрЗаменить(Элемент, "[Class]", item.class);
		
		Элемент = СтрЗаменить(Элемент, "[Style]", ПолучитьСтильCSS(item.style));
		Элемент = СтрЗаменить(Элемент, "[Description]", item.class);
		
		НаборЭлементов = НаборЭлементов + Элемент;
	КонецЦикла;
	
	// Столы.
	ЭлементHTML = РегистрыСведений.СхемыСтолов.ПолучитьМакет("СтолHTML").ПолучитьТекст();
	РазмеченныеСтолы = Новый Массив; ДопустимыеСтолы = ПолучитьДопустимыеСтолыСхемы(Родитель, ПолучитьРазмеченныеСтолыСтруктурыСхемы(Структура));
	
	Для Каждого item Из Структура.tables Цикл
		Если (ДопустимыеСтолы.Найти(item.number) = Неопределено) Тогда
			Продолжить;
		Иначе
			РазмеченныеСтолы.Добавить(item.number);
		КонецЕсли;
		
		Элемент = ЭлементHTML;
		
		Элемент = СтрЗаменить(Элемент, "[Number]", XMLЧисло(item.number));
		Элемент = СтрЗаменить(Элемент, "[State]", ПолучитьКлассСостояния(Перечисления.СостояниеСтолов.Пустые, СоответствияСостояний));
		Элемент = СтрЗаменить(Элемент, "[Class]", item.class);
		
		Элемент = СтрЗаменить(Элемент, "[Style]", ПолучитьСтильCSS(item.style));
		Элемент = СтрЗаменить(Элемент, "[Description]", item.class);
		
		НаборЭлементов = НаборЭлементов + Элемент;
	КонецЦикла;
	
	Схема = СтрЗаменить(Схема, "{Items}", НаборЭлементов);	
	
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("РазмеченныеСтолы", Новый ФиксированныйМассив(РазмеченныеСтолы));
	Результат.Вставить("СоответствияСтолов", Новый ФиксированноеСоответствие(ПолучитьСоответствиеСтоловСхемы(Родитель, РазмеченныеСтолы)));
	
	Возврат Результат;
	
КонецФункции // ПолучитьСхемуHTML()

Функция ПолучитьСтильCSS(Стиль)
	
	Результат = "";
	
	Для Каждого Элемент Из Стиль Цикл
		Если ПустаяСтрока(Результат) Тогда
			Результат = Элемент.Ключ + ": " + Элемент.Значение + ";"
		Иначе
			Результат = Результат + " " + Элемент.Ключ + ": " + Элемент.Значение + ";"
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтильCSS()

Функция ПолучитьПоловинуРазмераCSS(Значение)
	
	Для Индекс = 1 По СтрДлина(Значение) Цикл
		Если Не Найти("-0123456789.", Сред(Значение, Индекс, 1)) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если (Индекс - 1) Тогда
		Возврат XMLЧисло(ЧислоXML(Лев(Значение, Индекс - 1)) / 2) + Сред(Значение, Индекс);	
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьПоловинуРазмераCSS()


Функция ПолучитьСтруктуруСхемы(Родитель)
	
	Структура = РегистрыСведений.СхемыСтолов.Получить(Новый Структура("Стол", Родитель)).Структура;
	Если (Структура = Неопределено) Тогда
		Возврат Структура;
	КонецЕсли;
	
	Структура = Структура.Получить();
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруСхемы()


Функция ПолучитьДопустимыеСтолыСхемы(Родитель, РазмеченныеСтолы)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Столы.Номер КАК Номер
	                      |ИЗ
	                      |	Справочник.Столы КАК Столы
	                      |ГДЕ
	                      |	Столы.Ссылка В ИЕРАРХИИ(&Родитель)
	                      |	И Столы.Номер В(&РазмеченныеСтолы)
	                      |	И Столы.Актуальность
	                      |	И НЕ Столы.ПометкаУдаления
	                      |	И НЕ Столы.ЭтоГруппа");
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("РазмеченныеСтолы", РазмеченныеСтолы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	
КонецФункции // ПолучитьДопустимыеСтолыСхемы()

Функция ПолучитьСоответствиеСтоловСхемы(Родитель, РазмеченныеСтолы)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Столы.Номер КАК Номер,
	                      |	Столы.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Столы КАК Столы
	                      |ГДЕ
	                      |	Столы.Ссылка В ИЕРАРХИИ(&Родитель)
	                      |	И Столы.Номер В(&РазмеченныеСтолы)
	                      |	И Столы.Актуальность
	                      |	И НЕ Столы.ПометкаУдаления
	                      |	И НЕ Столы.ЭтоГруппа");
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("РазмеченныеСтолы", РазмеченныеСтолы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(XMLЧисло(Выборка.Номер), Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСоответствиеСтоловСхемы()


Функция ПолучитьСоответствияСостояний()
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовПокупателей.ПустаяСсылка) КАК Состояние,
	|	NULL КАК Соответствие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостояниеСтолов.ПустаяСсылка),
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостояниеЗаказовПокупателей.Ссылка,
	|	СостояниеЗаказовПокупателей.Порядок
	|ИЗ
	|	Перечисление.СостояниеЗаказовПокупателей КАК СостояниеЗаказовПокупателей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостояниеСтолов.Ссылка,
	|	СостояниеСтолов.Порядок
	|ИЗ
	|	Перечисление.СостояниеСтолов КАК СостояниеСтолов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Состояние, XMLСтрока(Выборка.Соответствие));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСоответствияСостоянийПрименительноHTML()

Функция ПолучитьКлассСостояния(Состояние, СоответствияСостояний)
	
	СостояниеЗаказовПокупателей = (ТипЗнч(Состояние) = Тип("ПеречислениеСсылка.СостояниеЗаказовПокупателей"));	
	СостояниеСтолов = (ТипЗнч(Состояние) = Тип("ПеречислениеСсылка.СостояниеСтолов"));	
	
	State = СоответствияСостояний[Состояние];
	Если Не ПустаяСтрока(State) Тогда
		Если СостояниеЗаказовПокупателей Тогда
			Возврат СтрЗаменить("scheme-reserve-state-[State]", "[State]", State);
		КонецЕсли;
		Если СостояниеСтолов Тогда
			Возврат СтрЗаменить("scheme-table-state-[State]", "[State]", State);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьКлассСостояния()

Функция ПолучитьВсеКлассыСостоянияСтолов(СоответствияСостояний)
	
	Результат = "";
	
	Для Каждого ЭлементСоответствияСостояний Из СоответствияСостояний Цикл
		Состояние = ЭлементСоответствияСостояний.Ключ;
		СостояниеСтолов = (ТипЗнч(Состояние) = Тип("ПеречислениеСсылка.СостояниеСтолов"));
		
		Если СостояниеСтолов Тогда
			Класс = ПолучитьКлассСостояния(Состояние, СоответствияСостояний);
			Если Не ПустаяСтрока(Класс) Тогда
				Если ПустаяСтрока(Результат) Тогда
					Результат = Класс;
				Иначе
					Результат = Результат + "," + Класс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВсеКлассыСостоянияСтолов()

Функция ПолучитьВсеКлассыСостоянияЗаказов(СоответствияСостояний)
	
	Результат = "";
	
	Для Каждого ЭлементСоответствияСостояний Из СоответствияСостояний Цикл
		Состояние = ЭлементСоответствияСостояний.Ключ;
		СостояниеЗаказовПокупателей = (ТипЗнч(Состояние) = Тип("ПеречислениеСсылка.СостояниеЗаказовПокупателей"));	
		
		Если СостояниеЗаказовПокупателей Тогда
			Класс = ПолучитьКлассСостояния(Состояние, СоответствияСостояний);
			Если Не ПустаяСтрока(Класс) Тогда
				Если ПустаяСтрока(Результат) Тогда
					Результат = Класс;
				Иначе
					Результат = Результат + "," + Класс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВсеКлассыСостоянияЗаказов()


// ─────────────────────────────────────────────────────────────────────────────
//	Схема XML.

Функция ПрочитатьСхемуXML(ИмяФайла, Структура) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Исключение
		Возврат __ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Не удалось открыть файл.'; uk = 'Не вдалося відкрити файл.'"), , "Файл");
	КонецПопытки;

	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		DOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		Возврат __ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Не удалось прочитать XML.'; uk = 'Не вдалося прочитати XML.'"), , "Файл");
	КонецПопытки;
	
	ЧтениеXML.Закрыть(); ЧтениеXML = Неопределено;
	
	// Тип.
	Если (Не НРег(ПолучитьЗначениеXPathDOM(DOM, "//data/type")) = "2krestaurant.hallscheme") Тогда
		Возврат __ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Некорректный тип данных.'; uk = 'Некоректний тип даних.'"), , "Файл");
	КонецЕсли;
	
	// Преобразование.
	Структура = Новый Структура; ОписаниеСтруктуры = ПолучитьОписаниеСтруктурыСхемы();
	
	Для Каждого ОписаниеЭлементаСтруктуры Из ОписаниеСтруктуры Цикл
		
		НаборЗаписей = Новый Массив;
		
		XPath = ПолучитьXPathDOM(DOM, "//data/scheme/" + ОписаниеЭлементаСтруктуры.Ключ + "/item"); ПодчиненныйУзелDOM = XPath.ПолучитьСледующий();
		Пока (Не ПодчиненныйУзелDOM = Неопределено) Цикл
			
			Запись = Новый Структура("description");
			
			// Чтение.
			Для Каждого Реквизит Из ОписаниеЭлементаСтруктуры.Значение.Реквизиты Цикл
				
				Если (Реквизит.Значение = Тип("Строка")) Тогда
					Запись.Вставить(Реквизит.Ключ, ПолучитьЗначениеЭлементаDOM(ПодчиненныйУзелDOM, Реквизит.Ключ));
				ИначеЕсли (Реквизит.Значение = Тип("Число")) Тогда
					Запись.Вставить(Реквизит.Ключ, ЧислоXML(ПолучитьЗначениеЭлементаDOM(ПодчиненныйУзелDOM, Реквизит.Ключ)));
				ИначеЕсли (Реквизит.Значение = Тип("Дата")) Тогда
					Запись.Вставить(Реквизит.Ключ, ДатаXML(ПолучитьЗначениеЭлементаDOM(ПодчиненныйУзелDOM, Реквизит.Ключ)));
				ИначеЕсли (Реквизит.Значение = Тип("Соответствие")) Тогда
					
					Соответствие = Новый Соответствие;
					Для Каждого ЭлементЭлементаПодчиненногоУзелаDOM Из ПолучитьДочерниеУзлыЭлементаDOM(ПодчиненныйУзелDOM, Реквизит.Ключ) Цикл
						Соответствие.Вставить(НРег(ЭлементЭлементаПодчиненногоУзелаDOM.ИмяУзла), ЭлементЭлементаПодчиненногоУзелаDOM.ТекстовоеСодержимое);
					КонецЦикла;
					Запись.Вставить(Реквизит.Ключ, Соответствие);
					
				КонецЕсли;
					
			КонецЦикла;
			
			// Проверка заполнения.
			Для Каждого ОбязательныйРеквизит Из ОписаниеЭлементаСтруктуры.Значение.Обязательные Цикл
				Если Запись.Свойство(ОбязательныйРеквизит.Ключ) И ЗначениеЗаполнено(Запись[ОбязательныйРеквизит.Ключ]) Тогда
				Иначе
					Если ПустаяСтрока(Запись.description) Тогда
						ТекстСообщения = НСтр("ru = 'Некорректное определение [Описание].'; uk = 'Некоректне визначення [Описание].'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Некорректное определение [Описание] ""[Description]"".'; uk = 'Некоректне визначення [Описание] ""[Description]"".'");
					КонецЕсли;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Описание]", ОписаниеЭлементаСтруктуры.Значение.Описание);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Description]", Запись.Description);
					Возврат __ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , "Файл");
				КонецЕсли;
			КонецЦикла;
			
			Если ОписаниеЭлементаСтруктуры.Значение.Множественный Тогда
				НаборЗаписей.Добавить(Запись);
			Иначе
				НаборЗаписей = Запись;
				Прервать;
			КонецЕсли;
			
			ПодчиненныйУзелDOM = XPath.ПолучитьСледующий();
		КонецЦикла;
		
		Структура.Вставить(ОписаниеЭлементаСтруктуры.Ключ, НаборЗаписей);
		
	КонецЦикла;	
	
	// Проверка.
	Если ПустаяСтрока(Структура.area.style["width"]) Или ПустаяСтрока(Структура.area.style["height"]) Тогда
		ТекстСообщения = НСтр("ru = 'Некорректное определение [Описание].'; uk = 'Некоректне визначення [Описание].'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Описание]", ОписаниеСтруктуры.area.Описание);
		Возврат __ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , "Файл");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПрочитатьСхемуXML()

Функция ПолучитьСтатистикуСтруктурыСхемы(Структура) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Размер", ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(ПолучитьТолькоЦифры(Структура.area.style["width"]), "0") + " x " + ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеЗначение(ПолучитьТолькоЦифры(Структура.area.style["height"]), "0"));
	Результат.Вставить("КоличествоСтолов", Структура.tables.Count());
	Результат.Вставить("КоличествоЭлементовПлана", Структура.plan.Count());
	Результат.Вставить("РазмеченныеСтолы", ПолучитьРазмеченныеСтолыСтруктурыСхемы(Структура));
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтатистикуСтруктурыСхемы()

Функция ПолучитьРазмеченныеСтолыСтруктурыСхемы(Структура)
	
	Результат = Новый Массив;
	
	Для Каждого item Из Структура.tables Цикл
		Результат.Добавить(item.number);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьРазмеченныеСтолыСтруктурыСхемы()

Функция ПолучитьОписаниеСтруктурыСхемы()
	
	ОписаниеСтруктуры = Новый Структура;
	
	ОписаниеЭлементаСтруктуры = Новый Структура("Реквизиты,Обязательные,Множественный,Описание", Новый Структура, Новый Структура);
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("selector", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("description", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("style", Тип("Соответствие"));
	ОписаниеЭлементаСтруктуры.Обязательные.Вставить("selector");
	ОписаниеЭлементаСтруктуры.Обязательные.Вставить("style");
	ОписаниеЭлементаСтруктуры.Множественный = Истина;
	ОписаниеЭлементаСтруктуры.Описание = НСтр("ru = 'CSS-стиля'; uk = 'CSS-стилю'");;
	ОписаниеСтруктуры.Вставить("css", ОписаниеЭлементаСтруктуры);
	
	ОписаниеЭлементаСтруктуры = Новый Структура("Реквизиты,Обязательные,Множественный,Описание", Новый Структура, Новый Структура);
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("class", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("description", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("style", Тип("Соответствие"));
	ОписаниеЭлементаСтруктуры.Обязательные.Вставить("style");
	ОписаниеЭлементаСтруктуры.Множественный = Ложь;
	ОписаниеЭлементаСтруктуры.Описание = НСтр("ru = 'пространства'; uk = 'простору'");;
	ОписаниеСтруктуры.Вставить("area", ОписаниеЭлементаСтруктуры);
	
	ОписаниеЭлементаСтруктуры = Новый Структура("Реквизиты,Обязательные,Множественный,Описание", Новый Структура, Новый Структура);
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("number", Тип("Число"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("class", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("description", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("style", Тип("Соответствие"));
	ОписаниеЭлементаСтруктуры.Обязательные.Вставить("number");
	ОписаниеЭлементаСтруктуры.Обязательные.Вставить("style");
	ОписаниеЭлементаСтруктуры.Множественный = Истина;
	ОписаниеЭлементаСтруктуры.Описание = НСтр("ru = 'стола'; uk = 'столу'");;
	ОписаниеСтруктуры.Вставить("tables", ОписаниеЭлементаСтруктуры);
	
	ОписаниеЭлементаСтруктуры = Новый Структура("Реквизиты,Обязательные,Множественный,Описание", Новый Структура, Новый Структура);
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("type", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("class", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("description", Тип("Строка"));
	ОписаниеЭлементаСтруктуры.Реквизиты.Вставить("style", Тип("Соответствие"));
	ОписаниеЭлементаСтруктуры.Обязательные.Вставить("type");
	ОписаниеЭлементаСтруктуры.Обязательные.Вставить("style");
	ОписаниеЭлементаСтруктуры.Множественный = Истина;
	ОписаниеЭлементаСтруктуры.Описание = НСтр("ru = 'плана'; uk = 'плану'");;
	ОписаниеСтруктуры.Вставить("plan", ОписаниеЭлементаСтруктуры);
	
	Возврат ОписаниеСтруктуры;
	
КонецФункции // ПолучитьОписаниеСтруктурыСхемыXML()


// ─────────────────────────────────────────────────────────────────────────────
//	DOM и XML.

Функция ПолучитьXPathDOM(УзелDOM, Путь)
	
	Если (УзелDOM.ДокументВладелец = Неопределено) Тогда
		DOM = УзелDOM;
	Иначе
		DOM = УзелDOM.ДокументВладелец;
	КонецЕсли;
	
	Возврат DOM.СоздатьВыражениеXPath(Путь, Новый РазыменовательПространствИменDOM(DOM)).Вычислить(УзелDOM); 
	
КонецФункции // ПолучитьXPathDOM()

Функция ПолучитьЭлементXPathDOM(УзелDOM, Путь)
	
	XPath = ПолучитьXPathDOM(УзелDOM, Путь); 
	
	Возврат XPath.ПолучитьСледующий();
	
КонецФункции // ПолучитьЭлементXPathDOM()

Функция ПолучитьЗначениеXPathDOM(УзелDOM, Путь)
	
	XPath = ПолучитьXPathDOM(УзелDOM, Путь); 
	ПодчиненныйУзелDOM = XPath.ПолучитьСледующий();
	Если (Не ПодчиненныйУзелDOM = Неопределено) Тогда
		
		Возврат ПодчиненныйУзелDOM.ТекстовоеСодержимое;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗначениеXPathDOM()


Функция ПолучитьЭлементDOM(УзелDOM, Имя)
	
	Если (ТипЗнч(УзелDOM) = Тип("ЭлементDOM")) Тогда
	
		Для Каждого Элемент Из УзелDOM.ПолучитьЭлементыПоИмени(Имя) Цикл
			Если (Элемент.РодительскийУзел = УзелDOM) Тогда
				Возврат Элемент;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементDOM Из УзелDOM Цикл
			Если (НРег(ЭлементDOM.ИмяУзла) = НРег(Имя)) Тогда
				Возврат ЭлементDOM;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЭлементDOM()

Функция ПолучитьЗначениеЭлементаDOM(УзелDOM, Имя)
	
	Если (ТипЗнч(УзелDOM) = Тип("ЭлементDOM")) Тогда
	
		Для Каждого Элемент Из УзелDOM.ПолучитьЭлементыПоИмени(Имя) Цикл
			Если (Элемент.РодительскийУзел = УзелDOM) Тогда
				Возврат Элемент.ТекстовоеСодержимое;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементDOM Из УзелDOM Цикл
			Если (НРег(ЭлементDOM.ИмяУзла) = НРег(Имя)) Тогда
				Возврат ЭлементDOM.ТекстовоеСодержимое;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗначениеЭлементаDOM()


Функция ПолучитьДочерниеУзлыЭлементаDOM(УзелDOM, Имя)
	
	Для Каждого Элемент Из УзелDOM.ПолучитьЭлементыПоИмени(Имя) Цикл
		Если (Элемент.РодительскийУзел = УзелDOM) Тогда
			Возврат Элемент.ДочерниеУзлы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Массив;
	
КонецФункции // ПолучитьДочерниеУзлыЭлементаDOM()


// ─────────────────────────────────────────────────────────────────────────────
//	Преобразование примитивных типов.

Функция XMLЧисло(Число)
	
	Возврат XMLСтрока(Число);
	
КонецФункции // XMLЧисло()


Функция ДатаXML(Представление, ПоУмолчанию = '00010101')
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	Попытка
		Возврат Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Представление, "-", ""), ":", ""), " ", ""));
	Исключение
		Возврат ПоУмолчанию;
	КонецПопытки;
	
КонецФункции // ДатаXML()

Функция ЧислоXML(Представление, ПоУмолчанию = 0)
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	Попытка
		Возврат Число(Представление);
	Исключение
		Возврат ПоУмолчанию;
	КонецПопытки;
	
КонецФункции // ЧислоXML()

Функция БулевоXML(Представление, ПоУмолчанию = Ложь)
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	Возврат (НРег(Представление) = "true") Или ЧислоXML(Представление);
	
КонецФункции // БулевоXML()


// ─────────────────────────────────────────────────────────────────────────────
//	Дополнительные процедуры и функции.

Функция ПолучитьТолькоЦифры(ПроизвольнаяСтрока, КоличествоЦифр = Неопределено)
	
	ТолькоЦифры = "";
	Для Индекс = 1 По СтрДлина(ПроизвольнаяСтрока) Цикл
		Если СтрЧислоВхождений("1234567890", Сред(ПроизвольнаяСтрока, Индекс, 1)) Тогда
			ТолькоЦифры = ТолькоЦифры + Сред(ПроизвольнаяСтрока, Индекс, 1);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоЦифр = СтрДлина(ТолькоЦифры);
	Возврат ТолькоЦифры;
	
КонецФункции // ПолучитьТолькоЦифры()
