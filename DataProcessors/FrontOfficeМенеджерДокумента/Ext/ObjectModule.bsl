#Если Клиент Тогда

Перем мКонтрагентПоиска, мМассивКонтрагентовПоиска;	
Перем мКешМеню,мКешПользователь;
Перем мТипТипа, мТипЧисла, мТипСтроки, мТипТаблицыЗначений;
Перем мВыводитьКартинкиПутиМеню, мВыводитьКартинкиГруппМеню, мВыводитьКартинкиЭлементовМеню, мВыводитьЦеныМеню, мКомпактноеПредставлениеМеню, мРазмерЭлементовМеню;
Перем мТабличноеПолеВнешнихДанных;
Перем мДисконтнаяКарта;
Перем мСертификат;

// Александр Переверзев 11.03.2012 22:23:38 
Перем мСтиляЭлементовМеню;

//Костенюк Александр-Старт 01.04.2013
// Настройки пользователя
Перем НомерСтолаПоУмолчанию Экспорт;
Перем ВводНомераСтола Экспорт;
Перем КатегорияКонтрагентаПоУмолчанию Экспорт;
Перем ВводКатегорииКонтрагента Экспорт;
Перем ВводКоличетсваКлиентов Экспорт;
Перем КатегорияДокументаПоУмолчанию Экспорт;
Перем ВводКатегорииДокумента Экспорт;
Перем ОсновнойРесторан Экспорт;
Перем ОсновнойВидМеню Экспорт;

Перем АвтоматическоеСозданиеЗаказаПриВходеВСистему Экспорт;
Перем ЗапрашиватьКоличество Экспорт;
Перем НеОбъединятьОдинаковыеТоварыПриДобавленииТовара Экспорт;
Перем НеРазделятьПечатьПречекаИПриемОплатыВоВремени Экспорт;
Перем ЗапрашиватьАктивность Экспорт;
Перем ЗапрашиватьАктивностьПриПечати Экспорт;
Перем ЗапрашиватьИсточникОбращения Экспорт;
Перем ВидОплатыПоУмолчанию Экспорт;
Перем ОсновнойВидОплатыЧекаККМ Экспорт;
Перем ИзменениеДисконтнойКарты Экспорт;
Перем ВыводитьВстречкуНаПечать Экспорт;
Перем ЗапрашиватьПодтверждениеПриПриемеОплаты Экспорт;
Перем ЗапрашиватьПечатьПречекаПриПриемеОплаты Экспорт;
Перем ЗапрашиватьПодтверждениеПриОтменеОплаты Экспорт;
Перем ЗапрашиватьПодтверждениеПриОтменеПречека Экспорт;
Перем ВводНомераСтолаЗаказаПриПереносе Экспорт;
Перем ВыводитьВстречкуПриПереносе Экспорт;
Перем ВыводитьВстречкуНаОтменуПриПереносе Экспорт;	
Перем ЗапрашиватьПодтверждениеПриПечатиПречека Экспорт;
Перем РаздельнаяПечатьПречековПоГостям Экспорт;
Перем РегистрироватьУдалениеБлюдаВОткрытомЗаказе Экспорт;
Перем ЗапросНаОткрытиеСтолаСНеуникальнымНомером Экспорт;
Перем ЗапрашиватьПричинуПримененияРучнойСкидки Экспорт;
Перем ТребоватьНаличиеКатегорииКлиентовПриПечатиПречека Экспорт;

// Права пользователя
Перем СозданиеЗаказов Экспорт;
Перем ПереносСоставаЗаказов Экспорт;
Перем СозданиеСписаний Экспорт;
Перем ПереносСоставаСписаний Экспорт;
Перем ЗапретитьСохранениеЗаказов Экспорт;
Перем ПриемОплатыЗаказов Экспорт;
Перем ИзменениеНомераПодачи Экспорт;
Перем РазрешитьИспользованиеСообщений Экспорт;
Перем РазрешитьИспользованиеРучныхСкидок Экспорт;
Перем РазрешитьПросмотрВторойФормы Экспорт;
Перем ИзменениеКонтактнойИнформацииЗаказов Экспорт;

Перем ТаблицаБлюдБезГруппыПечати Экспорт;
Перем мКэшМенюТаблица Экспорт;
//Костенюк Александр-Финиш 01.04.2013


// Процедура инициализация модуля рабочего места.
//
Процедура Инициализация() Экспорт
	
	// Проверка режима.
	Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
		Возврат;
	КонецЕсли;
	
	// Создание формы.
	Если (Форма = Неопределено) Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
	
КонецПроцедуры // Инициализация()

// Процедура открытия формы рабочего места.
//
Процедура Открыть() Экспорт
	
	// Перенаправление.
	ДокументСоздать(Неопределено, Неопределено);
	
КонецПроцедуры // Открыть()

Функция ПолучитьПредставлениеНоменклатуры(Номенклатура, Код = Неопределено) Экспорт
	
	НоменклатураОбъект = ПолучитьСерверFrontOffice().ПолучитьОбъект(Номенклатура, "НоменклатураМеню");
	
	Код = НоменклатураОбъект.Код;
	
	Возврат НоменклатураОбъект.Наименование;
	
КонецФункции // ПолучитьПредставлениеНоменклатуры()

Функция ПолучитьПроизводственныеГруппы(Данные) Экспорт
	
	// Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НоменклатурныеГруппы.ПроизводственнаяГруппа КАК ПроизводственнаяГруппа
	|ИЗ
	|	ВременнаяНоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПроизводственныеГруппы КАК ПроизводственныеГруппы
	|		ПО НоменклатурныеГруппы.ПроизводственнаяГруппа = ПроизводственныеГруппы.Ссылка
	|ГДЕ
	|	НоменклатурныеГруппы.Ссылка В(&НоменклатурныеГруппы)
	|	И ПроизводственныеГруппы.Актуальность");
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", Данные.ВыгрузитьКолонку("НоменклатурнаяГруппа"));
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПроизводственнаяГруппа");
	
КонецФункции // ПолучитьПроизводственныеГруппы()

Функция ПодтверждениеВыбораКонтрагентаИзЧерногоСписка(Контрагент) Экспорт
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаКонтрагентаВЧерномСписке");
	ФормаВыбора.Контрагент = Контрагент;
	
	// Подтверждение.
	Возврат ФормаВыбора.ОткрытьМодально();
	
КонецФункции // ПодтверждениеВыбораКонтрагентаИзЧерногоСписка()

Функция ВыборСтола(Значение = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяСтолы ГДЕ НЕ ЭтоГруппа");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Если Обработки.FrontOfficeВыборСтола.Создать().ВыборСтола(Значение, ,, ТаблицаЗначений) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборКомнаты(Значение = Неопределено) Экспорт
	
	Если НЕ УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ИспользоватьКомнаты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаВыбора = Обработки.FrontOfficeВыборКомнаты.Создать();
	ОбработкаВыбора.ТекущийОбъект = Значение;
	
	Если ОбработкаВыбора.ПолучитьФорму("Форма").ОткрытьМодально()=Истина Тогда
		Значение = ОбработкаВыбора.ТекущийОбъект;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборВидаОплаты(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяВидыОплатЧекаККМ ГДЕ НЕ ПометкаУдаления УПОРЯДОЧИТЬ ПО Родитель, ЭтоГруппа Убыв, Представление");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
	СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите вид оплаты';uk='Виберіть вид оплати'") , ДеревоЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаДерева.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборРесторана(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяРестораны ГДЕ Актуальность И (НЕ ПометкаУдаления)");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ТаблицыЗначений = Запрос.Выполнить().Выгрузить();
	СтрокаТаблицы = ТаблицыЗначений.Найти(Значение, "Ссылка");
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите ресторан';uk='Виберіть ресторан'") , ТаблицыЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаТаблицы.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборРабочегоЦентра(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяРабочиеЦентры ГДЕ Актуальность И (НЕ ПометкаУдаления)");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ТаблицыЗначений = Запрос.Выполнить().Выгрузить();
	СтрокаТаблицы = ТаблицыЗначений.Найти(Значение, "Ссылка");
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите на какой рабочий центр';uk='Виберіть на який робочий центр'") , ТаблицыЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаТаблицы.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборРесторанаДляОдногоАктивного(Значение = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|*,
	|	Рестораны.Представление КАК Наименование
	|ИЗ
	|	Справочник.Рестораны КАК Рестораны
	|ГДЕ
	|	(НЕ Рестораны.ПометкаУдаления)
	|	И Рестораны.Актуальность");
	Если не Запрос.Выполнить().Пустой() тогда
		ТаблицыЗначений = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицыЗначений.Количество() = 1  Тогда
			Значение=ТаблицыЗначений[0].ССылка;	
			Возврат Истина;
		иначе
			СтрокаТаблицы = ТаблицыЗначений.Найти(Значение, "Ссылка");
			Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите ресторан';uk='Виберіть ресторан'") , ТаблицыЗначений, "Картинка,Наименование") Тогда
				Значение = СтрокаТаблицы.Ссылка;
				Возврат Истина;
			иначе
				Возврат ложь;
				FrontOffice.СообщитьОбОшибке(НСтр("ru='Ресторан не выбран.';uk='Ресторан не вибраний.'"));   
			конецЕсли;
		КонецЕсли;                                                          
	Иначе
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Нет актуальных ресторанов!';uk='Немає актуальних ресторанів!'"));
		Возврат ложь;
	КонецЕсли;
	
КонецФункции

Функция ВыборКатегорииКонтрагента(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяКатегорииКонтрагентов ГДЕ НЕ ПометкаУдаления");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
	СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите категорию клиентов';uk='Виберіть категорію клієнтів'") , ДеревоЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаДерева.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборКатегорииДокумента(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяКатегорииДокументов ГДЕ НЕ ПометкаУдаления");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
	СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите категорию документа';uk='Виберіть категорію документа'") , ДеревоЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаДерева.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Функция ВыборСотрудника(Значение = Неопределено) Экспорт
//Костенюк Александр-Старт 26.04.2012
Функция ВыборСотрудника(Значение = Неопределено, ДокументОбъект = Неопределено) Экспорт
//Костенюк Александр-Финиш 26.04.2012
	
	//// Данные.
	//Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяСотрудникиОрганизаций ГДЕ НЕ ПометкаУдаления");
	//Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	//ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
	//СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
	
	//// Выбор.
	//Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ДеревоЗначений, "Картинка,Наименование") Тогда
	//	Значение = СтрокаДерева.Ссылка;
	//	Возврат Истина;
	//КонецЕсли;

	//Костенюк Александр-Старт 26.04.2012
	// Вывод только тех сотрудников, которые в данный момент на смене
	Если ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ВыводитьСотрудниковНаСменеПриИзмененииСотрудника") Тогда
		Документ = Неопределено;
		ПолучитьСерверFrontOffice().МенеджерУчетаРабочегоВремени.НайтиДокументУчетаРабочегоВремени(Документ);
		// -- Актуальность.
		ТаблицаАктуальных = Новый ТаблицаЗначений;
		ТаблицаАктуальных.Колонки.Добавить("Ссылка", Метаданные.Документы.ТабельУчетаРабочегоВремениОрганизации.ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.Сотрудник.Тип);
		Для Каждого СтрокаТабличнойЧасти Из Документ.ОтработанноеВремяВЦеломЗаПериод Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаАктуальных.Добавить();
			СтрокаТаблицы.Ссылка = СтрокаТабличнойЧасти.Сотрудник;
		КонецЦикла;
		СтрокаТаблицы = ТаблицаАктуальных.Найти(Значение, "Ссылка");
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ТаблицаАктуальных, "Ссылка") Тогда
			Значение = СтрокаТаблицы.Ссылка;
			Возврат Истина;
		КонецЕсли;
	Иначе
		// Вывод всех сотрудников
		// Данные.
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяСотрудникиОрганизаций ГДЕ НЕ ПометкаУдаления");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
		СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ДеревоЗначений, "Картинка,Наименование") Тогда
			Значение = СтрокаДерева.Ссылка;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	//Костенюк Александр-Финиш 26.04.2012
	
	Возврат Ложь;
	
КонецФункции

Функция ВывборПозицийИзИстории(Значение = Неопределено, Документ) Экспорт
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаИстории");
	ФормаВыбора.ДокументОбъект = Документ;
	
	// Выбор.
	ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("ТаблицаЗначений")) Тогда
		Значение = ПараметрЗакрытия;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВывборПозицийИзИстории()

Процедура ВыборПозицийИзМеню(Владелец = Неопределено ,Ресторан = Неопределено) Экспорт
	
	// Открываем форму.
	Если Владелец <> Неопределено Тогда
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаМеню" , Владелец );
		ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
		
	Иначе
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаМеню");
	КонецЕсли;
	
	Если Ресторан <> Неопределено Тогда                      
		ФормаВыбора.ресторан = Ресторан;
	КонецЕсли;
	
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Активизировать();
	Иначе 
		ФормаВыбора.ОткрытьМодально();
	КонецЕсли;
	
	ФормаВыбора = Неопределено;
	
КонецПроцедуры 

Процедура ВыборЧерногоСписка(Владелец = Неопределено, Ресторан = Неопределено) Экспорт
	
	// Открываем форму.  
	Если Владелец <> Неопределено Тогда
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаЧерногоСписка" , Владелец );
		ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
	Иначе
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаЧерногоСписка");
	КонецЕсли;
	
	Если Ресторан <> Неопределено Тогда
		ФормаВыбора.ресторан = Ресторан;
	КонецЕсли;		
	
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Активизировать();
	Иначе 
		ФормаВыбора.ОткрытьМодально();
	КонецЕсли; 
	
	ФормаВыбора = Неопределено;
	
КонецПроцедуры 

Процедура ВыборБелогоСписка(Владелец = Неопределено, Ресторан = Неопределено) Экспорт
	
	// Открываем форму.
	Если Владелец <> Неопределено Тогда
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаБелогоСписка" , Владелец );
		ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
	Иначе
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаБелогоСписка");
	КонецЕсли;
	
	Если Ресторан <> Неопределено Тогда
		ФормаВыбора.ресторан = Ресторан;
	КонецЕсли;	
	
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Активизировать();
	Иначе 
		ФормаВыбора.ОткрытьМодально();
	КонецЕсли; 
	
	ФормаВыбора = Неопределено;
	
КонецПроцедуры 

//// Открываем форму. выбора меню	
Функция ВыборМеню(Значение = Неопределено) Экспорт	
	//// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВыбораМеню");	
	ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("ТаблицаЗначений")) Тогда
		Значение = ПараметрЗакрытия;
		Возврат Истина;
	КонецЕсли;
	
	ФормаВыбора = Неопределено;
	
	Возврат Ложь;
	
КонецФункции 

Функция ВыборПорядкаПодачи(Значение = Неопределено, НаВынос = Ложь, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	
	// Текущая подача.
	МинимальныйПорядокПодачи = 1;
	
	//Для Каждого СтрокаДанных Из Данные Цикл
	//	Если СтрокаДанных.Распечатан Тогда
	//		МинимальныйПорядокПодачи = Макс(МинимальныйПорядокПодачи, СтрокаДанных.ПорядокПодачи);
	//	КонецЕсли;
	//КонецЦикла;
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаПорядокПодачи");
	ФормаВыбора.ПорядокПодачи				= Значение;
	ФормаВыбора.НаВынос						= НаВынос;
	ФормаВыбора.МинимальныйПорядокПодачи	= МинимальныйПорядокПодачи;
	
	// Выбор.
	ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
	Если (ТипЗнч(ПараметрЗакрытия) = Тип("Булево")) Тогда
		Значение	= ФормаВыбора.ПорядокПодачи;
		НаВынос		= ФормаВыбора.НаВынос;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборВстречки(Значение = Неопределено, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	
	// Список встречек.
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"), НСтр("ru='Наименование';uk='Назва'") );
	ТаблицаЗначений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТекущаяДата = ТекущаяДата();
	
	Для Каждого СтрокаДанных Из Данные Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.ДатаНачалаПериода)
			ИЛИ ТаблицаЗначений.Найти(СтрокаДанных.ДатаНачалаПериода,"Дата")<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		Если (НачалоДня(СтрокаДанных.ДатаНачалаПериода) = НачалоДня(ТекущаяДата)) Тогда
			СтрокаТаблицы.Наименование = НСтр("ru='Встречка в ';uk='Зустрічка у '")   + Формат(СтрокаДанных.ДатаНачалаПериода, "ДФ=hh:mm");
		Иначе
			СтрокаТаблицы.Наименование = НСтр("ru='Встречка от ';uk='Зустрічка від '")  + Формат(СтрокаДанных.ДатаНачалаПериода, "ДФ='dd:MM:yyyy hh:mm'");
		КонецЕсли;
		СтрокаТаблицы.Дата = СтрокаДанных.ДатаНачалаПериода;
		
	КонецЦикла;
	
	Если ТаблицаЗначений.Количество()=0 Тогда
		FrontOffice.ВывестиПредупреждение(НСтр("ru='На текущий момент по документу нет ни одной распечатанной встречки.';uk='На поточний час немає жодної роздрукованої зустрічки'") );
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаЗначений.Добавить().Наименование = НСтр("ru='Все встречки';uk='Всі зустрічки'") ;
	
	СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Дата");
	
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите встречку';uk='Виберіть зустрічку'") , ТаблицаЗначений, "Наименование") Тогда
		Значение = СтрокаТаблицы.Дата;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыборСобытия(Значение = Неопределено) Экспорт
	
	// Данные.
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяГруппыСобытий ГДЕ НЕ ПометкаУдаления");
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Ссылка");
	
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите событие';uk='Виберіть подію'") , ТаблицаЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаТаблицы.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВыборСобытия()

Функция ПолучитьКонтрагентовПоиска(Контрагент = Неопределено, Телефон = Неопределено, ТелефонДополнительный = Неопределено)
	
	Если ПустаяСтрока(Телефон) И ПустаяСтрока(ТелефонДополнительный) Тогда
		
		МассивКонтрагентов = Новый Массив;
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактнаяИнформация.Объект КАК Контрагенты
		|ИЗ
		|	(ВЫБРАТЬ
		|		КонтактнаяИнформация.Объект КАК Объект
		|	ИЗ
		|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|	ГДЕ
		|		КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|		И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
		|		И (КонтактнаяИнформация.Поиск = &Телефон
		|				ИЛИ КонтактнаяИнформация.Поиск = &ТелефонДополнительный)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КонтактнаяИнформация.Объект
		|	ИЗ
		|		РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КонтактнаяИнформация
		|	ГДЕ
		|		КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|		И (КонтактнаяИнформация.Поиск = &Телефон
		|				ИЛИ КонтактнаяИнформация.Поиск = &ТелефонДополнительный)) КАК КонтактнаяИнформация");
		Запрос.УстановитьПараметр("Телефон", Телефон);							  
		Запрос.УстановитьПараметр("ТелефонДополнительный", ТелефонДополнительный);
		Если ПустаяСтрока(Телефон) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Поиск = &Телефон", "ЛОЖЬ");
		КонецЕсли;
		Если ПустаяСтрока(ТелефонДополнительный) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Поиск = &ТелефонДополнительный", "ЛОЖЬ");
		КонецЕсли;
		МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагенты");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		МассивКонтрагентов.Добавить(Контрагент);
	КонецЕсли;
	
	Если Булево(МассивКонтрагентов.Количество()) Тогда
		Возврат МассивКонтрагентов;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВводКоличестваКлиентов(Значение = Неопределено, МаксимальноеКоличество = 0) Экспорт
	
	// Ввод (допускаетсяя ввод количетсва в два раза превышающее максимально допустимое).
	Возврат FrontOffice.ВводЧисла(Значение, НСтр("ru='Количество гостей';uk='Кількість гостей'") , Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.КоличествоКлиентов.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.КоличествоКлиентов.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, 0, МаксимальноеКоличество);
	
КонецФункции

// Функция осуществляет ввод/поиск клиента.
//
Функция ВводКлиента(Значение = Неопределено, Контрагент = Неопределено) Экспорт
	
	// Контрагент.
	мКонтрагентПоиска = Контрагент;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		// Данные.
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), НСтр("ru='Объект';uk='Об""'""єкт'") );
		Данные.Колонки.Добавить("ОбъектПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Клиент';uk='Клієнт'") );
		
		// Ввод.
		Если FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите или выберите клиента';uk='Введіть або виберіть клієнта'") , ,,, Данные, "ОбъектПредставление", Ложь, ЭтотОбъект, "ПоискКлиента") Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		// Ввод.
		Возврат FrontOffice.ВводСтроки(Значение, НСтр("ru='Введите клиента';uk='Введіть клієнта'") );
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВводКлиента()

// Функция осуществляет ввод/поиск телефона.
//
Функция ВводТелефона(Значение = Неопределено, Контрагент = Неопределено, Телефон = Неопределено, ТелефонДополнительный = Неопределено) Экспорт
	
	// Данные.
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("РеализацияТоваровУслуг", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Данные.Колонки.Добавить("ОбъектПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Клиент';uk='Клієнт'") );
	Данные.Колонки.Добавить("Поле1", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Поле2", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Поле3", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Поле4", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), "Телефон");
	Данные.Колонки.Добавить("Поиск", Новый ОписаниеТипов("Строка"),НСтр("ru='Поиск';uk='Поушк'") );
	
	// Контрагент.
	мКонтрагентПоиска = Контрагент;
	мМассивКонтрагентовПоиска = ПолучитьКонтрагентовПоиска(Контрагент, Телефон, ТелефонДополнительный);
	
	// Нормализация.
	Числом = УправлениеКонтактнойИнформацией.ПолучитьТолькоЦифры(Значение);
	
	// Ввод.
	Если FrontOffice.ПоискЧисла(Числом, НСтр("ru='Введите или выберите номер телефона';uk='Введіть або виберіть номер телефону'") , 12, 0, ,, "ЧЦ=12; ЧДЦ=0; ЧГ=", Данные, "ОбъектПредставление,Представление", Ложь, ЭтотОбъект, "ПоискТелефона") Тогда
		Если (ТипЗнч(Числом) = мТипЧисла) Тогда
			Значение = Формат(Числом, "ЧГ=");
		Иначе
			Значение = Новый Структура("Объект,Тип,Поле1,Поле2,Поле3,Поле4,Представление,Поиск", Числом.Объект,Перечисления.ТипыКонтактнойИнформации.Телефон,Числом.Поле1,Числом.Поле2,Числом.Поле3,Числом.Поле4,Числом.Представление,Числом.Поиск);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВводТелефона()

// Функция осуществляет ввод/поиск улицы.
//
Функция ВводУлицы(Значение = Неопределено, Контрагент = Неопределено, Телефон = Неопределено, ТелефонДополнительный = Неопределено) Экспорт
	
	// Данные.
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Справочник", Новый ОписаниеТипов("Булево"),НСтр("ru='Справочник';uk='Довідник'") );
	Данные.Колонки.Добавить("РеализацияТоваровУслуг", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Данные.Колонки.Добавить("ОбъектПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Улица/клиент и адрес';uk='Вулиця/клієнт та адреса'") );
	Данные.Колонки.Добавить("Поле1", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Поле2", Новый ОписаниеТипов("СправочникСсылка.КлассификаторГородов"));
	Данные.Колонки.Добавить("Поле3", Новый ОписаниеТипов("СправочникСсылка.КлассификаторГородов"));
	Данные.Колонки.Добавить("Поле4", Новый ОписаниеТипов("СправочникСсылка.КлассификаторГородов"));
	Данные.Колонки.Добавить("Поле5", Новый ОписаниеТипов("СправочникСсылка.КлассификаторГородов"));
	Данные.Колонки.Добавить("Поле6", Новый ОписаниеТипов("СправочникСсылка.КлассификаторУлиц"));
	Данные.Колонки.Добавить("Поле7", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Поле8", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Поле9", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Поле10", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Поле11", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"), НСтр("ru='Комментарий';uk='Коментар'") );
	Данные.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"),НСтр("ru='Представление';uk='Представлення'") );
	Данные.Колонки.Добавить("Поиск", Новый ОписаниеТипов("Строка"), НСтр("ru='Поиск';uk='Пошук'") );
	
	// Контрагент.
	мКонтрагентПоиска = Контрагент;
	мМассивКонтрагентовПоиска = ПолучитьКонтрагентовПоиска(Контрагент, Телефон, ТелефонДополнительный);
	
	// Нормализация.
	Строкой = Значение.НаименованиеСокращенное;
	
	// Ввод.
	//Если FrontOffice.ПоискСтроки(Строкой, "Выберите улицу", ,,, Данные, "ОбъектПредставление", Истина, ЭтотОбъект, "ПоискУлицы") Тогда
	//Костенюк Александр-Старт 05.06.2012
	Если FrontOffice.ПоискСтроки(Строкой, НСтр("ru='Выберите улицу';uk='Виберіть вулицю'"), ,,, Данные, "ОбъектПредставление", Истина, ЭтотОбъект, "ПоискУлицы") Тогда
	//Костенюк Александр-Финиш 05.06.2012
		Если Строкой.Справочник Тогда
			Значение = Строкой.Поле6;
		Иначе
			Значение = Новый Структура("Объект,Тип,Поле1,Поле2,Поле3,Поле4,Поле5,Поле6,Поле7,Поле8,Поле9,Поле10,Поле11,Комментарий,Представление,Поиск",
			Строкой.Объект,
			Перечисления.ТипыКонтактнойИнформации.Адрес,
			Строкой.Поле1,
			Строкой.Поле2,
			Строкой.Поле3,
			Строкой.Поле4,
			Строкой.Поле5,
			Строкой.Поле6,
			Строкой.Поле7,
			Строкой.Поле8,
			Строкой.Поле9,
			Строкой.Поле10,
			Строкой.Поле11,
			Строкой.Комментарий,
			Строкой.Представление,
			Строкой.Поиск);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВводУлицы()

Функция ВводДома(Значение = Неопределено) Экспорт
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВводаДома");
	ФормаВыбора.Значение = Значение;
	
	// Выбор.
	Если (ФормаВыбора.ОткрытьМодально() = Истина) Тогда
		Значение = ФормаВыбора.Значение;
		Возврат Истина;
	КонецЕсли;
	
	ФормаВыбора = Неопределено;
	
	Возврат Ложь;
	
КонецФункции // ВводДома()

Функция ВводКвартиры(Значение = Неопределено) Экспорт
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВводаДома");
	ФормаВыбора.Заголовок = НСтр("ru='Введите номер квартиры';uk='Введіть номер квартири'") ;
	ФормаВыбора.Значение = Значение;
	
	// Выбор.
	Если (ФормаВыбора.ОткрытьМодально() = Истина) Тогда
		Значение = ФормаВыбора.Значение;
		Возврат Истина;
	КонецЕсли;
	
	ФормаВыбора = Неопределено;
	
	Возврат Ложь;
	
КонецФункции // ВводКвартиры()

Функция ВводКорпуса(Значение = Неопределено) Экспорт
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВводаДома");
	ФормаВыбора.Заголовок =  НСтр("ru='Введите номер корпуса ';uk='Введіть номер корпуса'") ;
	ФормаВыбора.Значение = Значение;
	
	// Выбор.
	Если (ФормаВыбора.ОткрытьМодально() = Истина) Тогда
		Значение = ФормаВыбора.Значение;
		Возврат Истина;
	КонецЕсли;
	
	ФормаВыбора = Неопределено;
	
	Возврат Ложь;
	
КонецФункции // ВводКорпуса()

Функция ВводЭтажа(Значение = Неопределено) Экспорт
	
	// Нормализация.
	Числом = ОбщегоНазначения.ПолучитьЧисло(Значение);
	
	// Ввод.
	Если FrontOffice.ВводЧисла(Числом, НСтр("ru='Введите этаж';uk='Введіть поверх'") , 2, 0, ,, "ЧЦ=4; ЧДЦ=0") Тогда
		Значение = Формат(Числом, "ЧЦ=2; ЧДЦ=0");	
		Возврат Истина;
	КонецЕсли;
	
	ФормаВыбора = Неопределено;
	
	Возврат Ложь;
	
КонецФункции // ВводЭтажа()

// Чистяков Павел 02.09.2010 13:13:25 
Функция ВводПодъезда(Значение = Неопределено) Экспорт
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВводаДома");
	ФормаВыбора.Заголовок = НСтр("ru='Введите подъезда квартиры';uk='Введіть номер підїзду'") ;
	ФормаВыбора.Значение = Значение;
	
	// Выбор.
	Если (ФормаВыбора.ОткрытьМодально() = Истина) Тогда
		Значение = ФормаВыбора.Значение;
		Возврат Истина;
	КонецЕсли;
	
	ФормаВыбора = Неопределено;
	
	Возврат Ложь;
	
КонецФункции

Функция ВводКомментария(Значение = Неопределено) Экспорт
	
	// Ввод.
	Возврат FrontOffice.ВводСтроки(Значение, НСтр("ru='Введите комментарий';uk='Введіть коментар'") , Метаданные.РегистрыСведений.КонтактнаяИнформацияРеализацииТоваровУслуг.Ресурсы.Комментарий.Тип.КвалификаторыСтроки.Длина);
	
КонецФункции // ВводКомментария()

// Чистяков Павел 06.09.2010 9:26:46 
Функция ВводКомментарияНоменклатуы(Значение = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Комментарий",Метаданные.РегистрыСведений.КонтактнаяИнформацияРеализацииТоваровУслуг.Ресурсы.Комментарий.Тип);
	
	Строкой = Значение;
	
	
	Если FrontOffice.ПоискСтроки(Строкой, НСтр("ru='Введите комментарий';uk='Введіть коментар'") , ,,, Таблица, "Комментарий", Ложь, ЭтотОбъект, "ПоискКомментарияНоменклатуры") Тогда
		
		Если ТипЗнч(Строкой)=Тип("Строка") Тогда
			Значение = Строкой;
		Иначе
			Значение = Строкой.Комментарий;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Таблица = Неопределено;
	
	Возврат Ложь;
	
КонецФункции

// Чистяков Павел 06.09.2010 10:43:38 
Процедура ПоискКомментарияНоменклатурыПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	
	ТабличноеПоле.Шапка = Ложь;
	
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ПоискУлицыПриИзмененииДанных()

// Чистяков Павел 06.09.2010 10:43:38 
Процедура ПоискКомментарияНоменклатурыПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// Данные.
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 25
		|	КомментарииНоменклатуры.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.КомментарииНоменклатуры КАК КомментарииНоменклатуры
		|ГДЕ
		|	КомментарииНоменклатуры.Комментарий ПОДОБНО &Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Комментарий"
		);
		Запрос.УстановитьПараметр("Комментарий", "%" + Значение + "%"); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы				= Данные.Добавить();	
			СтрокаТаблицы.Комментарий	= Выборка.Комментарий;
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

// Чистяков Павел 06.09.2010 10:43:38 
Процедура ПоискКомментарияНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки("Комментарий").УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
	
КонецПроцедуры

Функция ВводТребуемойДатыОкончанияПериода(Значение = Неопределено, Мин = Неопределено) Экспорт
	
	Время = Значение; Дата = Значение; 
	
	НачальнаяДата = Мин;
	Если (НачальнаяДата = Неопределено) Тогда
		НачальнаяДата = ТекущаяДата();
	КонецЕсли;
	
	// Ввод времени.
	Если Не FrontOffice.ВводДаты(Время, НСтр("ru='Введите время доставки';uk='Введіть час доставки'") , ЧастиДаты.Время) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ввод даты.
	Если (НачалоДня(НачальнаяДата) + ОбщегоНазначения.ПолучитьЧисло(Время) < НачальнаяДата) Тогда
		НачальнаяДата = НачальнаяДата + 86400; // День.
		Дата = Макс(Дата, НачальнаяДата);
	КонецЕсли;
	НачальнаяДата = НачалоДня(НачальнаяДата);
	Если Не FrontOffice.ВводДаты(Дата, НСтр("ru='Введите дату доставки';uk='Введіть дату доставки'") , ЧастиДаты.Дата, НачальнаяДата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Результат.
	Значение = НачалоМинуты(Дата + ОбщегоНазначения.ПолучитьЧисло(Время));
	Возврат Истина;
	
КонецФункции // ВводТребуемойДатыОкончанияПериода()

Функция ВводПродолжительностиДоставки(Значение = Неопределено) Экспорт
	
	// Ввод.
	Возврат FrontOffice.ВводДаты(Значение, НСтр("ru='Введите t в пути';uk='Введіть t у дорозі'") , ЧастиДаты.Время, '00010101000500', '00010101120000');
	
КонецФункции // ВводПродолжительностиДоставки()

Функция ВводПродолжительностиПроизводства(Значение = Неопределено) Экспорт
	
	// Ввод.
	Возврат FrontOffice.ВводДаты(Значение, НСтр("ru='Введите t производства';uk='Введіть t виробництва'") , ЧастиДаты.Время, '00010101000500', '00010101120000');
	
КонецФункции // ВводПродолжительностиПроизводства()

// Функция осуществляет ввод события.
//
Функция ВводСобытия(Значение = Неопределено, Комментарий = Неопределено) Экспорт
	
	// Открываем форму.
	ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВводаСобытия");
	ФормаВыбора.ГруппаСобытия = Значение;
	ФормаВыбора.Комментарий = Комментарий;
	
	// Выбор.
	Если (ФормаВыбора.ОткрытьМодально() = Истина) Тогда
		Значение = ФормаВыбора.ГруппаСобытия;
		Комментарий = ФормаВыбора.Комментарий;
		Возврат Истина;
	КонецЕсли;
	
	ФормаВыбора = Неопределено;
	
	Возврат Ложь;
	
КонецФункции // ВводСобытия()

//Функция ВводКоличестваТовара(Значение = Неопределено, Номенклатура, Мин = Неопределено, Макс = Неопределено) Экспорт
Функция ВводКоличестваТовара(Значение = Неопределено, Номенклатура, Мин = Неопределено, Макс = Неопределено, ЗаголовокОкна = "ru='Введите количество';uk='Введіть кількість'") Экспорт //Костенюк Александр 21.02.2017
	
	// Нормализация.
	Если (Значение = Неопределено) Тогда
		Значение = Число(Истина);
	КонецЕсли;
	
	// Игорь 09.11.2011 16:13:51
	//не понятно зачем нужно? 
	
	//// Разрядность дробной части.
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	НоменклатураМеню.Штучный КАК Штучный
	//|ИЗ
	//|	ВременнаяНоменклатураМеню КАК НоменклатураМеню
	//|ГДЕ
	//|	НоменклатураМеню.Номенклатура = &Номенклатура");
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	//РезультатЗапроса = Запрос.Выполнить();
	Если ЗначениеЗаполнено(Номенклатура) и Номенклатура.Штучный Тогда
		РазрядностьДробнойЧасти = 0;
	Иначе
		РазрядностьДробнойЧасти = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	КонецЕсли;
	
	// Ввод.
	//Возврат FrontOffice.ВводЧисла(Значение, НСтр("ru='Введите количество';uk='Введіть кількість'") , Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность, РазрядностьДробнойЧасти, Мин, Макс);
	Возврат FrontOffice.ВводЧисла(Значение, НСтр(ЗаголовокОкна) , Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность, РазрядностьДробнойЧасти, Мин, Макс); //Костенюк Александр 21.02.2017
	
КонецФункции // ВводКоличестваТовара()

// Процедура заполнения табличного поля ресторанов.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаРесторановПрочитать(Документ, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		
		// -- Дополнительные колонки.
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроизводственныеГруппы.Ссылка,
		|	ПроизводственныеГруппы.Представление
		|ИЗ
		|	ВременнаяПроизводственныеГруппы КАК ПроизводственныеГруппы
		|ГДЕ
		|	ПроизводственныеГруппы.Актуальность");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ТаблицаДополнительныхКолонок = Запрос.Выполнить().Выгрузить();
		СоответсвиеДополнительныхКолонок = Новый Соответствие;
		
		Данные = Новый ТаблицаЗначений;
		
		Данные.Колонки.Добавить("Ресторан", Новый ОписаниеТипов("СправочникСсылка.Рестораны"));
		Данные.Колонки.Добавить("РесторанПредставление", Новый ОписаниеТипов("Строка"), "Ресторан");
		Если Булево(ТаблицаДополнительныхКолонок.Количество()) Тогда
			ДополнительныеКолонки = Строка(Неопределено);
			Для Каждого СтрокаТаблицыДополнительныхКолонок Из ТаблицаДополнительныхКолонок Цикл
				ДополнительнаяКолонка = "Колонка" + Строка(ТаблицаДополнительныхКолонок.Индекс(СтрокаТаблицыДополнительныхКолонок));
				СоответсвиеДополнительныхКолонок.Вставить(СтрокаТаблицыДополнительныхКолонок.Ссылка, ДополнительнаяКолонка);
				Данные.Колонки.Добавить(ДополнительнаяКолонка, Новый ОписаниеТипов("Строка,Дата"), СтрокаТаблицыДополнительныхКолонок.Представление);
				ДополнительныеКолонки = ДополнительныеКолонки + "," + ДополнительнаяКолонка;
			КонецЦикла
		КонецЕсли;
		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("Картинка,РесторанПредставление" + ДополнительныеКолонки);
		ТабличноеПоле.Колонки.Получить("РесторанПредставление").Ширина = 400 * 0.50;
		Для Каждого ДополнительнаяКолонка Из СоответсвиеДополнительныхКолонок Цикл
			ДополнительнаяКолонка = ДополнительнаяКолонка.Значение; // Наепка :)
			ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).Ширина = 50;
			ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).Формат = "ДФ=HH:mm";
			ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		КонецЦикла;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		ТабличноеПоле.Тег = СоответсвиеДополнительныхКолонок;
		
		Возврат;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	Если (Документ = Неопределено) тогда
		Возврат;
	КонецЕсли;
	
	// -- Текущая позиция (I).
	ТекущийРесторан = Документ.Ресторан;
	
	// Выборка данных.
	РесторанДокумента = Новый ТаблицаЗначений;
	РесторанДокумента.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Рестораны"));
	РесторанДокумента.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Метаданные.Справочники.Рестораны.ДлинаНаименования)));
	Если ЗначениеЗаполнено(Документ.Ресторан) Тогда
		СтрокаТаблицы = РесторанДокумента.Добавить(); СтрокаТаблицы.Ссылка = Документ.Ресторан; СтрокаТаблицы.Представление = ПолучитьСерверFrontOffice().ПолучитьПредставление(Документ.Ресторан);
	КонецЕсли;
	
	Закреплен = Документ.Распечатан Или (Документ.Закреплен И (Не ДокументДоступностьДействия(Документ, "ИгнорироватьЗакрепленностьПриИзмененииРесторана")));
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Рестораны.Ссылка,
	|	Рестораны.Представление
	|ПОМЕСТИТЬ ВременнаяРесторанДокумента
	|ИЗ
	|	&РесторанДокумента КАК Рестораны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ресторан,
	|	ВложенныйЗапрос.РесторанПредставление КАК РесторанПредставление,
	|	ВложенныйЗапрос.ПроизводственнаяГруппа КАК ПроизводственнаяГруппа,
	|	НастройкиПроизводства.ПродолжительностьВыполнения КАК ПродолжительностьВыполнения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Рестораны.Ресторан КАК Ресторан,
	|		Рестораны.РесторанПредставление КАК РесторанПредставление,
	|		ПроизводственныеГруппы.Ссылка КАК ПроизводственнаяГруппа
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Рестораны.Ссылка КАК Ресторан,
	|			Рестораны.Представление КАК РесторанПредставление
	|		ИЗ
	|			ВременнаяРесторанДокумента КАК Рестораны
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Рестораны.Ссылка,
	|			Рестораны.Представление
	|		ИЗ
	|			ВременнаяРестораны КАК Рестораны
	|		ГДЕ
	|			(НЕ &Закреплен)
	|			И (НЕ Рестораны.ПометкаУдаления)
	|			И Рестораны.Актуальность
	|			И (НЕ Рестораны.Ссылка = &Ресторан)) КАК Рестораны,
	|		ВременнаяПроизводственныеГруппы КАК ПроизводственныеГруппы
	|	ГДЕ
	|		ПроизводственныеГруппы.Актуальность) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПроизводства КАК НастройкиПроизводства
	|		ПО ВложенныйЗапрос.Ресторан = НастройкиПроизводства.Ресторан
	|			И ВложенныйЗапрос.ПроизводственнаяГруппа = НастройкиПроизводства.ПроизводственнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесторанПредставление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяРесторанДокумента");
	Запрос.УстановитьПараметр("РесторанДокумента", РесторанДокумента);
	Запрос.УстановитьПараметр("Ресторан", Документ.Ресторан);
	Запрос.УстановитьПараметр("Закреплен", Закреплен);
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Пустая выборка.
	Если РезультатЗапроса.Пустой() Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Перенос данных в табличное поле.
	СоответсвиеДополнительныхКолонок = ТабличноеПоле.Тег;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДанных = Данные.Найти(Выборка.Ресторан, "Ресторан");
		Если (СтрокаДанных = Неопределено) Тогда
			СтрокаДанных = Данные.Добавить();
			СтрокаДанных.Ресторан = Выборка.Ресторан;
			СтрокаДанных.РесторанПредставление = Выборка.РесторанПредставление;
		КонецЕсли;
		
		ДополнительнаяКолонка = СоответсвиеДополнительныхКолонок.Получить(Выборка.ПроизводственнаяГруппа);
		Если (Не ДополнительнаяКолонка = Неопределено) Тогда
			СтрокаДанных[ДополнительнаяКолонка] = Выборка.ПродолжительностьВыполнения;
		КонецЕсли;
		
		// -- Текущая позиция (II).
		Если (СтрокаДанных.Ресторан = ТекущийРесторан) Тогда
			ТекущаяСтрока = СтрокаДанных;
		КонецЕсли;
	КонецЦикла;
	
	Данные.Сортировать("РесторанПредставление");
	
	// -- Текущая позиция (III).
	Если Закреплен Тогда
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	// Обновление.
	Если (Не ТабличноеПоле.ТекущаяСтрока() = ТекущаяСтрока) Тогда
		ТабличноеПоле.ТекущаяСтрока(ТекущаяСтрока);
	Иначе
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	
	Выборка = Неопределено;
	
КонецПроцедуры // ТаблицаРесторановПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля ресторанов.
//
Процедура ТаблицаРесторановВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	СоответсвиеДополнительныхКолонок = Элемент.Тег;
	
	// Оформление строки.
	ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("РесторанПредставление").ГиперСсылка = Истина;
	Для Каждого ДополнительнаяКолонка Из СоответсвиеДополнительныхКолонок Цикл
		ОформлениеСтроки.Ячейки(ДополнительнаяКолонка.Значение).ГиперСсылка = Истина;
	КонецЦикла;
	
	// Картинка.
	ОформлениеСтроки.Ячейки("Картинка").УстановитьКартинку(БиблиотекаКартинок.TouchИерархияЭлеменит);
	
КонецПроцедуры // ТаблицаРесторановВывестиСтроку()	

// Процедура заполнения табличного поля закрытх документов истории.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗакрытыхДокументовИсторииПрочитать(Документ, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
		Данные.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"), "Документ");
		Данные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"), "Дата");
		Данные.Колонки.Добавить("АдресДоставкиПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Адрес';uk='Адреса'")); 
		Данные.Колонки.Добавить("ТелефонПредставление", Новый ОписаниеТипов("Строка"), "Телефон");
		Данные.Колонки.Добавить("ТелефонДополнительныйПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Телефон (доп.)';uk='Телефон (дод.)'") );
		Данные.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число"), НСтр("ru='Сумма';uk='Сума'") );
		
		ТабличноеПоле.Данные(Данные);
		ТабличноеПоле.СоздатьКолонки("Номер,АдресДоставкиПредставление,ТелефонПредставление,СуммаДокумента");
		ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		//ТабличноеПоле.Колонки.Получить("Дата").Ширина = 400 * 0.10;
		//ТабличноеПоле.Колонки.Получить("Дата").Положение = ПоложениеКолонки.НаСледующейСтроке;
		//ТабличноеПоле.Колонки.Получить("Дата").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("АдресДоставкиПредставление").Ширина = 400 * 0.45;
		ТабличноеПоле.Колонки.Получить("ТелефонПредставление").Ширина = 400 * 0.25;
		ТабличноеПоле.Колонки.Получить("ТелефонПредставление").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		//ТабличноеПоле.Колонки.Получить("ТелефонДополнительныйПредставление").Ширина = 400 * 0.25;
		//ТабличноеПоле.Колонки.Получить("ТелефонДополнительныйПредставление").Положение = ПоложениеКолонки.НаСледующейСтроке;
		//ТабличноеПоле.Колонки.Получить("ТелефонДополнительныйПредставление").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	Если (Документ = Неопределено) Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Выборка данных.
	
	// -- Типы и виды контактной информации реализации товаров и услуг.
	СписокТипов = Новый СписокЗначений; 
	СписокТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес); 
	СписокТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СписокВидов = Новый СписокЗначений; 
	СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиРеализацииТоваровУслуг); 
	СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРеализацииТоваровУслуг); 
	СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДополнительныйРеализацииТоваровУслуг);
	
	// -- Запрос.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеДокументов.Ссылка,
	|	СостояниеДокументов.Номер,
	|	СостояниеДокументов.Дата,
	|	СостояниеДокументов.СуммаДокумента,
	|	СостояниеДокументов.Документ
	|ПОМЕСТИТЬ ВременнаяВыборкаДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|		РеализацияТоваровУслуг.Номер КАК Номер,
	|		РеализацияТоваровУслуг.Дата КАК Дата,
	|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|		РеализацияТоваровУслуг.Ссылка КАК Документ
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Контрагент = &Контрагент
	|		И РеализацияТоваровУслуг.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка)
	|		И (НЕ РеализацияТоваровУслуг.Ссылка = &Ссылка)
	|		И РеализацияТоваровУслуг.Проведен) КАК СостояниеДокументов
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КИРТУ.Документ КАК Ссылка,
	|	КИРТУ.Тип КАК Тип,
	|	КИРТУ.Вид КАК Вид,
	|	КИРТУ.Представление КАК Представление,
	|	КИРТУ.Поиск КАК Поиск
	|ПОМЕСТИТЬ ВременнаяКИРТУ
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КИРТУ
	|ГДЕ
	|	КИРТУ.Документ В
	|			(ВЫБРАТЬ
	|				ВременнаяВыборкаДокументов.Ссылка
	|			ИЗ
	|				ВременнаяВыборкаДокументов)
	|	И КИРТУ.Тип В(&СписокТипов)
	|	И КИРТУ.Вид В(&СписокВидов)
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеДокументов.Ссылка,
	|	СостояниеДокументов.Номер КАК Номер,
	|	СостояниеДокументов.Дата КАК Дата,
	|	СостояниеДокументов.СуммаДокумента,
	|	КИРТУАдресДоставки.Представление КАК АдресДоставкиПредставление,
	|	КИРТУАдресДоставки.Поиск КАК АдресДоставкиПоиск,
	|	КИРТУТелефон.Представление КАК ТелефонПредставление,
	|	КИРТУТелефон.Поиск КАК ТелефонПоиск,
	|	КИРТУТелефонДополнительный.Представление КАК ТелефонДополнительныйПредставление,
	|	КИРТУТелефонДополнительный.Поиск КАК ТелефонДополнительныйПоиск
	|ИЗ
	|	ВременнаяВыборкаДокументов КАК СостояниеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КИРТУ.Ссылка КАК Ссылка,
	|			КИРТУ.Представление КАК Представление,
	|			КИРТУ.Поиск КАК Поиск
	|		ИЗ
	|			ВременнаяКИРТУ КАК КИРТУ
	|		ГДЕ
	|			КИРТУ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			И КИРТУ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиРеализацииТоваровУслуг)) КАК КИРТУАдресДоставки
	|		ПО СостояниеДокументов.Ссылка = КИРТУАдресДоставки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КИРТУ.Ссылка КАК Ссылка,
	|			КИРТУ.Представление КАК Представление,
	|			КИРТУ.Поиск КАК Поиск
	|		ИЗ
	|			ВременнаяКИРТУ КАК КИРТУ
	|		ГДЕ
	|			КИРТУ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			И КИРТУ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРеализацииТоваровУслуг)) КАК КИРТУТелефон
	|		ПО СостояниеДокументов.Ссылка = КИРТУТелефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КИРТУ.Ссылка КАК Ссылка,
	|			КИРТУ.Представление КАК Представление,
	|			КИРТУ.Поиск КАК Поиск
	|		ИЗ
	|			ВременнаяКИРТУ КАК КИРТУ
	|		ГДЕ
	|			КИРТУ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			И КИРТУ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонДополнительныйРеализацииТоваровУслуг)) КАК КИРТУТелефонДополнительный
	|		ПО СостояниеДокументов.Ссылка = КИРТУТелефонДополнительный.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	//|	Номер");
	//Костенюк Александр-Старт 23.10.2012
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяВыборкаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяКИРТУ");
	//Костенюк Александр-Финиш 23.10.2012
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
	Запрос.УстановитьПараметр("СписокТипов", СписокТипов);
	Запрос.УстановитьПараметр("СписокВидов", СписокВидов);
	
	// Перенос данных в табличное поле.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = Данные.Добавить();
		
		СтрокаДанных.Ссылка = Выборка.Ссылка;
		СтрокаДанных.Номер = Выборка.Номер;
		СтрокаДанных.Дата = Выборка.Дата;
		СтрокаДанных.АдресДоставкиПредставление = Выборка.АдресДоставкиПредставление;
		СтрокаДанных.ТелефонПредставление = Выборка.ТелефонПредставление;
		СтрокаДанных.ТелефонДополнительныйПредставление = Выборка.ТелефонДополнительныйПредставление;
		СтрокаДанных.СуммаДокумента = Выборка.СуммаДокумента;
	КонецЦикла;
	
	// Обновление.
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры // ТаблицаЗакрытыхДокументовИсторииПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля закрытх документов истории.
//
Процедура ТаблицаЗакрытыхДокументовИсторииВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	
	// Номер.
	ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
	
	// ТелефонПредставление.
	ОформлениеСтроки.Ячейки("ТелефонПредставление").Текст = ДанныеСтроки.ТелефонПредставление + УправлениеКонтактнойИнформацией.ПроверкаПустойСтроки(ДанныеСтроки.ТелефонДополнительныйПредставление, Символы.ПС) + ДанныеСтроки.ТелефонДополнительныйПредставление;
	
	
КонецПроцедуры // ТаблицаЗакрытыхДокументовИсторииВывестиСтроку()

// Процедура заполнения табличного поля заказа документа истории.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаИсторииПрочитать(Документ, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;
		
		Данные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)), "N");
		Для Каждого Реквизит Из Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты Цикл
			Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
		КонецЦикла;
		Данные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
		Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), Данные.Колонки.Номенклатура.Заголовок);
		Данные.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"), НСтр("ru='Услуга';uk='Послуга'") );
		Данные.Колонки.Добавить("Проверенная", Новый ОписаниеТипов("Булево"), НСтр("ru='Проверенная';uk='Перевірена'") );
		Данные.Колонки.Добавить("ЦенаДокумента", Данные.Колонки.Цена.ТипЗначения, Данные.Колонки.Цена.Заголовок);
		
		ТабличноеПоле.Данные(Данные); 
		ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество,ЦенаДокумента,СуммаОтображаемая");
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ИзменениеРазмера = ИзменениеРазмераКолонки.Изменять;
		ТабличноеПоле.Колонки.Получить("НомерСтроки").Ширина = 400 * 0.05;
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("Количество").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("Количество").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("ЦенаДокумента").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("ЦенаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").ТекстШапки = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Синоним;
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	Если (Документ = Неопределено) тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	
	// Настройка отображаемой суммы и порядка подачи.
	ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Данные = "Сумма";
	
	// Выборка данных.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	РеализацияТоваровУслугТовары.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	РеализацияТоваровУслугТовары.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена КАК ЦенаДокумента,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	НоменклатураМеню.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураМеню.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	НоменклатураМеню.Организация КАК Организация,
	|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
	|	НоменклатураМеню.СтавкаНДС КАК СтавкаНДС,
	|	НоменклатураМеню.ТипНоменклатуры КАК ТипНоменклатуры,
	|	НоменклатураМеню.Услуга КАК Услуга,
	|	НоменклатураМеню.Цена КАК Цена,
	|	НоменклатураМеню.Проверенная КАК Проверенная,
	|	РеализацияТоваровУслугТовары.Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяНоменклатураМеню КАК НоменклатураМеню
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = НоменклатураМеню.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.НомерСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Товар),
	|	РеализацияТоваровУслугУслуги.ДатаНачалаПериода,
	|	РеализацияТоваровУслугУслуги.ДатаОкончанияПериода,
	|	РеализацияТоваровУслугУслуги.Количество,
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	НоменклатураМеню.ЕдиницаИзмерения,
	|	НоменклатураМеню.НоменклатурнаяГруппа,
	|	НоменклатураМеню.Организация,
	|	НоменклатураМеню.Себестоимость,
	|	НоменклатураМеню.СтавкаНДС,
	|	НоменклатураМеню.ТипНоменклатуры,
	|	НоменклатураМеню.Услуга,
	|	НоменклатураМеню.Цена,
	|	НоменклатураМеню.Проверенная,
	|	РеализацияТоваровУслугУслуги.Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяНоменклатураМеню КАК НоменклатураМеню
	|		ПО РеализацияТоваровУслугУслуги.Номенклатура = НоменклатураМеню.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
	
	// Перенос данных в табличное поле.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = Данные.Добавить();
		
		СтрокаДанных.НомерСтроки = Выборка.НомерСтроки;
		СтрокаДанных.ВидНоменклатуры = Выборка.ВидНоменклатуры;
		СтрокаДанных.ДатаНачалаПериода = Выборка.ДатаНачалаПериода;
		СтрокаДанных.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
		СтрокаДанных.Количество = Выборка.Количество;
		СтрокаДанных.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаДанных.Номенклатура = Выборка.Номенклатура;
		СтрокаДанных.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
		СтрокаДанных.Организация = Выборка.Организация;
		СтрокаДанных.ПлановаяСебестоимость = Выборка.ПлановаяСебестоимость;
		СтрокаДанных.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаДанных.Сумма = Выборка.Сумма;
		СтрокаДанных.Услуга = Выборка.Услуга;
		СтрокаДанных.Цена = Выборка.Цена;
		СтрокаДанных.Комментарий = Выборка.Комментарий;
		
		СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
		СтрокаДанных.Услуга = Выборка.Услуга;
		СтрокаДанных.Проверенная = (Выборка.Проверенная = Истина);
		СтрокаДанных.ЦенаДокумента = Выборка.ЦенаДокумента;
	КонецЦикла;
	
	// -- Сортировка.
	Данные.Сортировать("ДатаНачалаПериода,НомерСтроки");
	
	// Обновление
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры // ТаблицаЗаказаПрочитать()

// Процедура обработчик события ПриВыводеСтроки табличного поля заказ документа истории.
//
Процедура ТаблицаЗаказаИсторииВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Гиппр ссылка.
	ОформлениеСтроки.Ячейки("НомерСтроки").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("НоменклатураКод").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("НоменклатураПредставление").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("Количество").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("ЦенаДокумента").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("СуммаОтображаемая").ГиперСсылка = Истина;
	
	// Оформление строки.
	Если Не ДанныеСтроки.Проверенная Тогда
		ОформлениеСтроки.Ячейки("НомерСтроки").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("НоменклатураКод").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("НоменклатураПредставление").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("Количество").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("ЦенаДокумента").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ОформлениеСтроки.Ячейки("СуммаОтображаемая").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	КонецЕсли;
	
	// НомерСтроки.
	ОформлениеСтроки.Ячейки("НомерСтроки").Текст = Строка(Элемент.Данные().Индекс(ДанныеСтроки) + 1);
	
	// НоменклатураКод.
	ОформлениеСтроки.Ячейки("НоменклатураКод").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.НоменклатураКод);
	
	// Чистяков Павел 06.09.2010 8:10:04
	Если ЗначениеЗаполнено(ДанныеСтроки.Комментарий) Тогда
		ОформлениеСтроки.Ячейки("НоменклатураПредставление").Текст = ОформлениеСтроки.Ячейки("НоменклатураПредставление").Текст + Символы.ПС + "    " + ДанныеСтроки.Комментарий;
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаЗаказаИсторииВывестиСтроку()

// Процедура заполнения табличного поля заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаПрочитатьУдалить(Документ, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;
		
		Данные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)), "N");
		Для Каждого Реквизит Из Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты Цикл
			Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
		КонецЦикла;
		Данные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
		Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), Данные.Колонки.Номенклатура.Заголовок);
		Данные.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
		
		ТабличноеПоле.Данные(Данные);
		//ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество,Цена,СуммаОтображаемая,ПорядокПодачи");
		//Костенюк Александр-Старт 30.05.2012
		ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество,Цена,СуммаОтображаемая,ПорядокПодачи,НомерКлиента");
		//Костенюк Александр-Финиш 30.05.2012
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("НомерСтроки").Ширина = 400 * 0.05;
		//Костенюк Александр-Старт 05.06.2012
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ТекстШапки = НСтр("ru='N';uk='N'");
		//Костенюк Александр-Финиш 05.06.2012
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").Ширина = 400 * 0.10;
		//Костенюк Александр-Старт 05.06.2012
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").ТекстШапки = НСтр("ru='Код';uk='Код'");
		//Костенюк Александр-Финиш 05.06.2012
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 400 * 0.40;
		//Костенюк Александр-Старт 05.06.2012
		ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").ТекстШапки = НСтр("ru='Номенклатура';uk='Номенклатура'");
		//Костенюк Александр-Финиш 05.06.2012
		ТабличноеПоле.Колонки.Получить("Количество").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("Количество").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		//Костенюк Александр-Старт 05.06.2012
		ТабличноеПоле.Колонки.Получить("Количество").ТекстШапки = НСтр("ru='Количество';uk='Кількість'");
		//Костенюк Александр-Финиш 05.06.2012
		ТабличноеПоле.Колонки.Получить("Цена").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Цена").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		//Костенюк Александр-Старт 05.06.2012
		ТабличноеПоле.Колонки.Получить("Цена").ТекстШапки = НСтр("ru='Цена';uk='Ціна'");
		//Костенюк Александр-Финиш 05.06.2012
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").ТекстШапки = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Синоним;
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		//Костенюк Александр-Старт 05.06.2012
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").ТекстШапки = НСтр("ru='Сумма';uk='Сума'");
		//Костенюк Александр-Финиш 05.06.2012
		ТабличноеПоле.Колонки.Получить("ПорядокПодачи").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("ПорядокПодачи").Ширина = 400 * 0.05;
		ТабличноеПоле.Колонки.Получить("ПорядокПодачи").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.ПорядокПодачи.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.ПорядокПодачи.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		//ТабличноеПоле.Колонки.Получить("ПорядокПодачи").ТекстШапки = "Подача";
		//Костенюк Александр-Старт 05.06.2012
		ТабличноеПоле.Колонки.Получить("ПорядокПодачи").ТекстШапки = НСтр("ru='Подача';uk='Подача'");
		//Костенюк Александр-Финиш 05.06.2012
		ТабличноеПоле.Колонки.Получить("ПорядокПодачи").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		//Костенюк Александр-Старт 30.05.2012
		ТабличноеПоле.Колонки.Получить("НомерКлиента").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("НомерКлиента").Ширина = 400 * 0.05;
		ТабличноеПоле.Колонки.Получить("НомерКлиента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.НомерКлиента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.НомерКлиента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		//ТабличноеПоле.Колонки.Получить("НомерКлиента").ТекстШапки = "Клиент";
		//Костенюк Александр-Старт 05.06.2012
		ТабличноеПоле.Колонки.Получить("НомерКлиента").ТекстШапки = НСтр("ru='Клиент';uk='Клієнт'");
		//Костенюк Александр-Финиш 05.06.2012
		ТабличноеПоле.Колонки.Получить("НомерКлиента").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		//Костенюк Александр-Финиш 30.05.2012
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	Если (Документ = Неопределено) тогда
		Возврат;
	КонецЕсли;
	
	// Настройка отображаемой суммы и порядка подачи.
	МетаданныеДокумента = Документ.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента("Товары", "СуммаБезСкидок", МетаданныеДокумента) Тогда
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Данные = "СуммаБезСкидок";
	Иначе
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Данные = "Сумма";
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента("Товары", "ПорядокПодачи", МетаданныеДокумента) Тогда
		ТабличноеПоле.Колонки.Получить("ПорядокПодачи").Данные = Неопределено;
	КонецЕсли;
	
	Если (Документ = Документ.Ссылка) тогда
		Возврат;
	КонецЕсли;
	
	// Список реквизитов.
	
	// -- Товары.
	СписокРеквизитовТоваров = Новый СписокЗначений();
	Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
		Реквизит = Реквизит.Имя;
		Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
			СписокРеквизитовТоваров.Добавить(Реквизит);	
		КонецЕсли;
	КонецЦикла;
	
	// -- Услуги.
	СписокРеквизитовУслуг = Новый СписокЗначений();
	Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Услуги.Реквизиты Цикл
		Реквизит = Реквизит.Имя;
		Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
			СписокРеквизитовУслуг.Добавить(Реквизит);	
		КонецЕсли;
	КонецЦикла;
	
	// Выборка данных.
	
	// -- Товары.
	Для Каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
		СтрокаДанных = Данные.Добавить();
		
		СтрокаДанных.НомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
		Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
			Реквизит = Реквизит.Значение;
			СтрокаДанных[Реквизит] = СтрокаТабличнойЧасти[Реквизит];
		КонецЦикла;
		
		СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
		СтрокаДанных.Услуга = Ложь;	
	КонецЦикла;
	
	// -- Услуги.
	Для Каждого СтрокаТабличнойЧасти Из Документ.Услуги Цикл
		СтрокаДанных = Данные.Добавить();
		
		СтрокаДанных.НомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
		Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
			Реквизит = Реквизит.Значение;
			Попытка
				СтрокаДанных[Реквизит] = СтрокаТабличнойЧасти[Реквизит];
			Исключение
				// Ветку услуг никто никогда не проверял и не дорабатывал.
			КонецПопытки;
		КонецЦикла;
		
		СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
		СтрокаДанных.Услуга = Истина;	
	КонецЦикла;
	
	// -- Сортировка.
	Данные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");
	
	
	// Обновление
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры // ТаблицаЗаказаПрочитать()

// Процедура актуализации табличного поля заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаЗаписатьУдалить(Документ, ТабличноеПоле) Экспорт
	
	Данные = ТабличноеПоле.Данные();
	
	СписокРеквизитовТоваров = Новый СписокЗначений();
	Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
		Реквизит = Реквизит.Имя;
		Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
			СписокРеквизитовТоваров.Добавить(Реквизит);	
		КонецЕсли;
	КонецЦикла;
	
	СписокРеквизитовУслуг = Новый СписокЗначений();
	Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Услуги.Реквизиты Цикл
		Реквизит = Реквизит.Имя;
		Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
			СписокРеквизитовУслуг.Добавить(Реквизит);	
		КонецЕсли;
	КонецЦикла;
	
	// Перенос данных.
	Документ.Товары.Очистить();
	Документ.Услуги.Очистить();
	
	Для Каждого СтрокаДанных Из Данные Цикл
		Если Не СтрокаДанных.Услуга Тогда
			СтрокаТабличнойЧасти = Документ.Товары.Добавить();
			Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
				Реквизит = Реквизит.Значение;
				СтрокаТабличнойЧасти[Реквизит] = СтрокаДанных[Реквизит];
			КонецЦикла;			
		Иначе		
			// -- Услуги.
			СтрокаТабличнойЧасти = Документ.Услуги.Добавить();
			Для Каждого Реквизит Из СписокРеквизитовУслуг Цикл
				Реквизит = Реквизит.Значение;
				СтрокаТабличнойЧасти[Реквизит] = СтрокаДанных[Реквизит];
			КонецЦикла;		
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // ТаблицаЗаказаЗаписать()

Функция ПолучитьУровненьПоВладельцу(Элемент, Знач Владелец)
	
	Уровень = 0;
	
	Данные	= Элемент.Данные();
	Пока Истина Цикл
		Строка = Данные.Найти(Владелец,"Идентификатор");
		Если Строка=Неопределено Тогда
			Возврат Уровень;
		КонецЕсли;
		Владелец	= Строка.Владелец;
		Уровень		= Уровень + 1;
	КонецЦикла;
	
	Возврат Уровень;
	
КонецФункции

// Процедура обработчик события ПриВыводеСтроки табличного поля заказ документа.
//
Процедура ТаблицаЗаказаВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	Если (ДанныеСтроки.Распечатан = Истина) Тогда
		ОформлениеСтроки.Ячейки("НомерСтроки").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("НоменклатураКод").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("НоменклатураПредставление").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("Количество").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("КоличествоУточненное").ЦветФона = WebЦвета.ВесеннеЗеленый; //Костенюк Александр 27.01.2017
		ОформлениеСтроки.Ячейки("Цена").ЦветФона = WebЦвета.ВесеннеЗеленый;
		//ОформлениеСтроки.Ячейки("СуммаОтображаемая").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("СуммаБезСкидок").ЦветФона = WebЦвета.ВесеннеЗеленый; //Костенюк Александр 27.01.2017
		ОформлениеСтроки.Ячейки("ПорядокПодачи").ЦветФона = WebЦвета.ВесеннеЗеленый;
		ОформлениеСтроки.Ячейки("НаВынос").ЦветФона = WebЦвета.ВесеннеЗеленый; //Костенюк Александр 04.06.2014
		ОформлениеСтроки.Ячейки("НомерКлиента").ЦветФона = WebЦвета.ВесеннеЗеленый; //Костенюк Александр 05.06.2012
	КонецЕсли;
	
	// НомерСтроки.
	ОформлениеСтроки.Ячейки("НомерСтроки").Текст = Строка(Элемент.Данные().Индекс(ДанныеСтроки) + 1);
	
	// НоменклатураКод.
	ОформлениеСтроки.Ячейки("НоменклатураКод").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.НоменклатураКод);
	
	// Чистяков Павел 06.09.2010 8:10:04
	НоменклатураПредставление = ОформлениеСтроки.Ячейки("НоменклатураПредставление");
	
	Уровень = ПолучитьУровненьПоВладельцу(Элемент,ДанныеСтроки.Владелец);
	Пока Уровень > 0 Цикл
		//НоменклатураПредставление.Текст = "    " + НоменклатураПредставление.Текст;
		
		//Костенюк Александр-Старт 29.03.2012
		// Для условий и модификаторов отображаем картинку
		НоменклатураПредставление.ОтображатьКартинку = Истина;
		Если ДанныеСтроки.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Условие Тогда
			НоменклатураПредставление.Картинка = БиблиотекаКартинок.FrontOfficeУсловие;
		ИначеЕсли ДанныеСтроки.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор Тогда
			НоменклатураПредставление.Картинка = БиблиотекаКартинок.FrontOfficeМодификатор;
		ИначеЕсли ДанныеСтроки.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Комплект Тогда
			НоменклатураПредставление.Картинка = БиблиотекаКартинок.FrontOfficeКомплект;
		КонецЕсли;
		НоменклатураПредставление.Текст = НоменклатураПредставление.Текст;
		//Костенюк Александр-Финиш 29.03.2012
		
		Уровень = Уровень - 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Комментарий) Тогда
		//НоменклатураПредставление.Текст = НоменклатураПредставление.Текст + Символы.ПС + "    " + ДанныеСтроки.Комментарий;
		//Костенюк Александр-Старт 29.05.2012
		НоменклатураПредставление.Текст = НоменклатураПредставление.Текст +"("+ ДанныеСтроки.Комментарий +")";
		//Костенюк Александр-Финиш 29.05.2012
	КонецЕсли;
	
	//Костенюк Александр-Старт 09.07.2012
	Если (ДанныеСтроки.Номенклатура.Временной) И (ДанныеСтроки.ДатаОкончанияПериода = ОбщегоНазначенияСервер.ПолучитьПустуюДату()) Тогда
		НоменклатураПредставление.ОтображатьКартинку 	= Истина;
		НоменклатураПредставление.Картинка 				= БиблиотекаКартинок.FrontOfficeТаймер;
	КонецЕсли;
	//Костенюк Александр-Финиш 09.07.2012
	
КонецПроцедуры // ТаблицаЗаказаВывестиСтроку()

// Процедура добавления позиции в табличное поле заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
//Процедура ТаблицаЗаказаДобавитьПозицию(ТабличноеПоле, Номенклатура, Количество = Неопределено, Сворачивать = Истина, ДобавлениеЧерезМеню=Ложь, ТипНоменклатуры=Неопределено) Экспорт
//Костенюк Александр-Старт 04.04.2012
//Процедура ТаблицаЗаказаДобавитьПозицию(ТабличноеПоле, Номенклатура, Количество = Неопределено, Сворачивать = Истина, ДобавлениеЧерезМеню=Ложь, ТипНоменклатуры=Неопределено, ИдентификаторВладелеца = Неопределено) Экспорт
// 30.05.12
Процедура ТаблицаЗаказаДобавитьПозициюСтарая(ТабличноеПоле, Номенклатура, Количество = Неопределено, Сворачивать = Истина, ДобавлениеЧерезМеню=Ложь, ТипНоменклатуры=Неопределено, ИдентификаторВладелеца = Неопределено, НомерКлиента = Неопределено, ПорядокПодачи = Неопределено, ЦенаУточняемая = Неопределено) Экспорт
//Костенюк Александр-Финиш 04.04.2012

	//Костенюк Александр-Старт 13.06.2012
	Компьютер = ПараметрыСеанса.ТекущийКомпьютер;
	//Костенюк Александр-Финиш 13.06.2012
	
	ЕстьСвязаные = Истина;
	// Данные.
	Данные = ТабличноеПоле.Данные();
	
	
	// Формирования набора значений.
	Если (Не ТипЗнч(Номенклатура) = мТипТаблицыЗначений) Тогда
		НаборПозиций = Новый Массив; 
		НаборПозиций.Добавить(Номенклатура);
	Иначе
		НаборПозиций = Номенклатура;
	КонецЕсли;
	
	Если ТипЗнч(Номенклатура.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЗначениеЗаполнено(Номенклатура.Номенклатура.Связана) Тогда
			ЕстьСвязаные = Ложь;
			МассивПозицийСвязанных = Новый Массив;		
			
			Если Номенклатура.Номенклатура.Связана.ЭтоГруппа Тогда
				ПолучитьСвязаныеПозиции(Номенклатура.Номенклатура.Связана, МассивПозицийСвязанных);
			иначе
				МассивПозицийСвязанных.Добавить(Номенклатура.Номенклатура.Связана);
			КонецЕсли;		
			
			ин = 0;
			Пока ин <> МассивПозицийСвязанных.Количество()-1  Цикл
				Если Данные.Найти(МассивПозицийСвязанных[ин],"Номенклатура") <> Неопределено Тогда
					ЕстьСвязаные = Истина;
					Прервать;
				КонецЕсли;
				ин= ин + 1;	
			КонецЦикла; 		
		КонецЕсли;
		
		Если не ЕстьСвязаные Тогда	
			FrontOffice.ВывестиПредупреждение( НСтр("ru=""Для номенклатуры "+ Номенклатура.Номенклатура+" нет связной позиции!""; uk=""Для номенклатури "+ Номенклатура.Номенклатура+" немає зв'язної позиції!"""),,);
			Возврат;	
		КонецЕсли;
	КонецЕсли;

	// Чистяков Павел 09.09.2010 21:47:24 
	НеОбъединятьОдинаковыетовары = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeНеОбъединятьОдинаковыетоварыПриДобавленииТовараЗаказа) И ДобавлениеЧерезМеню;
	
	Для Каждого Позиция Из НаборПозиций Цикл
		
		ТекущиеДанные = Неопределено;
		
		// Проверка совпадения с нераспечатанными позицциями.
		Если Сворачивать Тогда
			Для Каждого СтрокаДанных Из Данные Цикл
				Если (СтрокаДанных.Номенклатура = Позиция.Номенклатура)
					И (Не СтрокаДанных.Распечатан)
					// Чистяков Павел 06.09.2010 14:18:40 
					И (Не ЗначениеЗаполнено(СтрокаДанных.Комментарий))
					И (Не НеОбъединятьОдинаковыетовары)
					И ТипНоменклатуры=Неопределено Тогда
					// Чистяков Павел 26.08.2011 10:27:20 
					// Также поищем позиции, у которых есть модификатор, в этом случае надо добавить новую сторку
					СтруктураПоиска	= Новый Структура("Владелец",СтрокаДанных.Идентификатор);
					СтрокиНайденные	= Данные.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНайденные.Количество()=0 Тогда
						ТекущиеДанные = СтрокаДанных;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Костенюк Александр-Старт 09.07.2012
		// Запрет добавления одной и той же временной позиции в заказ
		Если Позиция.Номенклатура.Временной Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", 			Позиция.Номенклатура);
			СтруктураПоиска.Вставить("ДатаОкончанияПериода", 	ОбщегоНазначенияСервер.ПолучитьПустуюДату());
			НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НЕ НайденнаяСтрока.Номенклатура.Временной Тогда
						Продолжить;
					КонецЕсли;
					FrontOffice.ВывестиПредупреждение(НСтр("ru='Повторение временных позиций запрещено!';uk='Повторення тимчасових позицій заборонено!'"));
					Возврат;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		//Костенюк Александр-Финиш 09.07.2012
		
		// Чистяков Павел 26.08.2011 14:30:46 
		// Проверки на модификаторы или условия
		Строка = ТабличноеПоле.ТекущаяСтрока();
		Если Строка<>Неопределено
			И ТипНоменклатуры<>Неопределено Тогда
			СтруктураПоиска	= Новый Структура("Владелец",Строка.Идентификатор);
			НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаНайденных Из НайденныеСтроки Цикл
				Если СтрокаНайденных.Номенклатура=Позиция.Номенклатура Тогда
					// Чистяков Павел 26.08.2011 10:29:28
					// Модификаторы нельзя добавлять
					Возврат;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		// Действие.
		Если (ТекущиеДанные = Неопределено) Тогда
			
			ЕдиницаИзмерения			= Позиция.ЕдиницаИзмерения;
			//Цена						= Позиция.Цена;
			//Костенюк Александр-Старт 25.09.2012
			// Уточнение цены
			Если Позиция.Номенклатура.Уточняемый Тогда
				Цена 					= ЦенаУточняемая;
			Иначе
				Цена 					= Позиция.Цена;
			КонецЕсли;
			//Костенюк Александр-Финиш 25.09.2012
			ПлановаяСебестоимость		= Позиция.ПлановаяСебестоимость; 
			СтавкаНДС					= Позиция.СтавкаНДС; 
			НоменклатурнаяГруппа		= Позиция.НоменклатурнаяГруппа; 
			Организация					= Позиция.Организация; 
			Услуга						= Позиция.Услуга;
			//ПорядокПодачи				= Позиция.ПорядокПодачи;
			
			//Костенюк Александр-Старт 18.08.2012
			Если (ПорядокПодачи = Неопределено) ИЛИ (ПорядокПодачи = 0) Тогда
				ПорядокПодачи = Позиция.ПорядокПодачи;
			Иначе
				ПорядокПодачи = ПорядокПодачи;
			КонецЕсли;
			//Костенюк Александр-Финиш 18.08.2012
			
			//Костенюк Александр-Старт 25.06.2012
			Попытка
				ТипАкции = Позиция.ТипАкции; 
			Исключение
				ТипАкции = Справочники.ТипыАкций.ПустаяСсылка();
			КонецПопытки;
			//Костенюк Александр-Финиш 25.06.2012
			
			Для Каждого СтрокаДанных Из Данные Цикл
				
				Если (СтрокаДанных.Номенклатура = Позиция.Номенклатура) Тогда
					
					ЕдиницаИзмерения	= СтрокаДанных.ЕдиницаИзмерения;
					//Цена				= СтрокаДанных.Цена;
					//Костенюк Александр-Старт 25.09.2012
					// Уточнение цены
					Если Позиция.Номенклатура.Уточняемый Тогда
						Цена 			= ЦенаУточняемая;
					Иначе
						Цена			= СтрокаДанных.Цена;
					КонецЕсли;
					//Костенюк Александр-Финиш 25.09.2012
					ПлановаяСебестоимость	= СтрокаДанных.ПлановаяСебестоимость;
					СтавкаНДС			= СтрокаДанных.СтавкаНДС;
					НоменклатурнаяГруппа	= СтрокаДанных.НоменклатурнаяГруппа;
					Организация			= СтрокаДанных.Организация;
					Услуга				= СтрокаДанных.Услуга;
					
				КонецЕсли;
				
				Если СтрокаДанных.Распечатан Тогда
					
					ПорядокПодачи		= Макс(ПорядокПодачи, СтрокаДанных.ПорядокПодачи);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Чистяков Павел 05.08.2011 14:10:22
			// Надо добавить модификатор и условие
			// под соответствующей номенклатурой
			Если ТипНоменклатуры<>Неопределено Тогда
				
				Если (ТабличноеПоле.ТекущиеДанные() = Неопределено)
					ИЛИ ТабличноеПоле.ТекущиеДанные().Распечатан Тогда
					// Чистяков Павел 05.08.2011 16:07:15
					// По новым сведениям не надо добавлять вообще
					// Позиции добавляем всегда в конец
					//ТекущиеДанные					= Данные.Добавить();
					//ТекущиеДанные.ВидНоменклатуры	= Перечисления.ТипыСтрокЗаказов.Товар;
					//ТекущиеДанные.ПорядокПодачи		= ПорядокПодачи;
					//
					//Если (ТипЗнч(Номенклатура)<>мТипТаблицыЗначений) Тогда
					//	ТекущиеДанные.Количество	= Количество;
					//Иначе
					//	ТекущиеДанные.Количество	= Позиция.Количество;
					//КонецЕсли;
					
					
					Возврат;
				Иначе
					ОригинальнаяСтрока			= ТабличноеПоле.ТекущиеДанные();
					//ТекущиеДанные				= Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные())+1);
					//ТекущиеДанные.Владелец		= ОригинальнаяСтрока.Идентификатор;
					
					//Костенюк Александр-Старт 04.04.2012
					// Изменение логики поиска/записи владельца модификатора
					Если НЕ ИдентификаторВладелеца = Неопределено Тогда
						// Старт 04.07.12
						Если ТипЗнч(Позиция.Ссылка) = Тип("СправочникСсылка.МодификаторыНоменклатуры") Тогда
							СтрокаВладельца = Данные.Найти(ИдентификаторВладелеца, "Идентификатор");
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Владелец", ИдентификаторВладелеца);
							СтруктураПоиска.Вставить("ВидНоменклатуры", Перечисления.ТипыСтрокЗаказов.Модификатор);
							МассивМодификаторов = Данные.НайтиСтроки(СтруктураПоиска);
							КоличествоМодификаторов = МассивМодификаторов.Количество();
							Если СтрокаВладельца.Номенклатура.МаксимальноеКоличествоМодификаторов <> 0 Тогда
								Если КоличествоМодификаторов >= СтрокаВладельца.Номенклатура.МаксимальноеКоличествоМодификаторов Тогда
									FrontOffice.ВывестиПредупреждение(НСтр("ru='Для блюда "+""""+СтрокаВладельца.Номенклатура+""""+" максимальное количество модификаторов равно "+СтрокаВладельца.Номенклатура.МаксимальноеКоличествоМодификаторов+"!';uk='Для блюда "+""""+СтрокаВладельца.Номенклатура+""""+" максимальна кількість модифікаторів дорівнює "+СтрокаВладельца.Номенклатура.МаксимальноеКоличествоМодификаторов+"!'"));
									Возврат;
								КонецЕсли;
							КонецЕсли;
							Если НЕ СтрокаВладельца.Номенклатура.ПовторениеМодификаторов Тогда
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Владелец", ИдентификаторВладелеца);
								СтруктураПоиска.Вставить("ВидНоменклатуры", Перечисления.ТипыСтрокЗаказов.Модификатор);
								СтруктураПоиска.Вставить("Номенклатура", Позиция.Номенклатура);
								НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
								Если НайденныеСтроки.Количество() Тогда
									FrontOffice.ВывестиПредупреждение(НСтр("ru='Для блюда "+""""+СтрокаВладельца.Номенклатура+""""+" запрещено повторение модификаторов!';uk='Для блюда "+""""+СтрокаВладельца.Номенклатура+""""+" заборонено повторення модифікаторів!'"));
									Возврат;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						// Финиш 04.07.12
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Владелец", ИдентификаторВладелеца);
						МассивПодчиненныхЭлементов = Данные.НайтиСтроки(СтруктураПоиска);
						КолвоПодчиненных = МассивПодчиненныхЭлементов.Количество();
						Если ТабличноеПоле.ТекущиеДанные().ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар Тогда
							ТекущиеДанные = Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные()) + КолвоПодчиненных + 1);
						Иначе
							СтрокаВладельца = Данные.Найти(ИдентификаторВладелеца, "Идентификатор");
							Если НЕ СтрокаВладельца = Неопределено Тогда
								ТекущиеДанные = Данные.Вставить(Данные.Индекс(СтрокаВладельца) + КолвоПодчиненных + 1);
							Иначе
								ТекущиеДанные = Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные()) + 1);
							КонецЕсли;
						КонецЕсли;
						ТекущиеДанные.Владелец = ИдентификаторВладелеца;
					Иначе
						ТекущиеДанные				= Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные())+1);
						ТекущиеДанные.Владелец		= ОригинальнаяСтрока.Идентификатор;
					КонецЕсли;
					//Костенюк Александр-Финиш 04.04.2012
					
					ТекущиеДанные.ВидНоменклатуры = ТипНоменклатуры;
					// Чистяков Павел 08.08.2011 15:26:14 
					// Количество должно совпадать с количеством родителя
					ТекущиеДанные.Количество	= ОригинальнаяСтрока.Количество;
					// Чистяков Павел 08.12.2011 16:42:49 
					// Подача тоже должна совпадать
					ТекущиеДанные.ПорядокПодачи = ОригинальнаяСтрока.ПорядокПодачи;
					//Костенюк Александр-Старт 30.05.2012
					ТекущиеДанные.НомерКлиента 	= ОригинальнаяСтрока.НомерКлиента;
					ТекущиеДанные.Компьютер 	= ОригинальнаяСтрока.Компьютер; //25.06.12
					ТекущиеДанные.ТипАкции 		= ОригинальнаяСтрока.ТипАкции; //25.06.12
					//Костенюк Александр-Финиш 30.05.2012
				КонецЕсли;
				
			Иначе
				
				// Чистяков Павел 26.08.2011 11:00:26
				// Позиции добавляем всегда в конец
				ТекущиеДанные					= Данные.Добавить();
				ТекущиеДанные.ВидНоменклатуры	= Перечисления.ТипыСтрокЗаказов.Товар;
				ТекущиеДанные.ПорядокПодачи		= ПорядокПодачи;
				
				Если (ТипЗнч(Номенклатура)<>мТипТаблицыЗначений) Тогда
					ТекущиеДанные.Количество	= Количество;
				Иначе
					ТекущиеДанные.Количество	= Позиция.Количество;
				КонецЕсли;
				
			КонецЕсли; 
			
			ТекущиеДанные.Идентификатор			= Новый УникальныйИдентификатор;
			ТекущиеДанные.Номенклатура			= Позиция.Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения		= ЕдиницаИзмерения;
			ТекущиеДанные.СтавкаНДС				= СтавкаНДС;
			ТекущиеДанные.Цена					= Цена; 
			ТекущиеДанные.ПлановаяСебестоимость = ПлановаяСебестоимость;
			ТекущиеДанные.НоменклатурнаяГруппа	= НоменклатурнаяГруппа;
			ТекущиеДанные.Организация			= Организация;
			ТекущиеДанные.Услуга				= Услуга;
			ТекущиеДанные.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.НоменклатураКод);
			// Чистяков Павел 11.10.2010 18:52:28 
			// Делаю в попытке так как не знаю по всех ли "позициях" есть
			// комментарий
			Попытка
				ТекущиеДанные.Комментарий		= Позиция.Комментарий;
			Исключение
				//
			КонецПопытки;
			//Костенюк Александр-Старт 
			ТекущиеДанные.НомерКлиента			= НомерКлиента; //30.05.2012
			ТекущиеДанные.Компьютер 			= Компьютер; //13.06.2012
			ТекущиеДанные.ТипАкции 				= ТипАкции; //25.06.12
			//Костенюк Александр-Финиш 
		Иначе
			// Изменение позиции.
			ТекущиеДанные.Количество	= ТекущиеДанные.Количество + Количество;
			// Чистяков Павел 08.08.2011 18:25:41 
			// Изменим количество в подчиненных строках
			ТаблицаЗаказаИзменитьПозициюИзДерева(Данные, ТекущиеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	// TODO: Расчет скидок.
	Документ = ТабличноеПоле.Тег;
	ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, Документ.ДополнительныеСвойства.Скидки);
	
	// Обновление.
	Если (Не ТабличноеПоле.ТекущиеДанные() = ТекущиеДанные) Тогда
		ТабличноеПоле.ТекущаяСтрока(ТекущиеДанные);
	Иначе
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЗаказаДобавитьПозицию()

// Чистяков Павел 08.08.2011 17:47:21 
Процедура ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле, СтрокаТаблицы)
	
	Структура		= Новый Структура("Владелец",СтрокаТаблицы.Идентификатор);
	СтрокиТаблицы	= ТабличноеПоле.НайтиСтроки(Структура);
	
	Для каждого Строка Из СтрокиТаблицы Цикл
		ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле,Строка);
	КонецЦикла;
	
	//Костенюк Александр-Старт 28.04.2012
	// Сомнительная ситуация
	// Удаление блюда в открытом заказе
	Если РегистрироватьУдалениеБлюдаВОткрытомЗаказе Тогда
		РегистрыСведений.СомнительныеСитуации.Зарегистрировать(Справочники.КлассификаторСомнительныхСитуаций.УдалениеБлюдаВОткрытомЗаказе, ,СтрокаТаблицы.Номенклатура);
	КонецЕсли;
	//Костенюк Александр-Финиш 28.04.2012

	ТабличноеПоле.Удалить(СтрокаТаблицы);
	
КонецПроцедуры

// Чистяков Павел 08.08.2011 17:47:21 
Процедура ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле, СтрокаТаблицы) Экспорт
	
	Структура		= Новый Структура("Владелец",СтрокаТаблицы.Идентификатор);
	СтрокиТаблицы	= ТабличноеПоле.НайтиСтроки(Структура);
	
	Для каждого Строка Из СтрокиТаблицы Цикл
		Строка.Количество	= СтрокаТаблицы.Количество;
		Строка.КоличествоУточненное	= СтрокаТаблицы.Количество; //Костенюк Александр 24.01.2017
		Строка.НомерКлиента	= СтрокаТаблицы.НомерКлиента; //Костенюк Александр 25.06.2012
		ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле,Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменение позиции в табличном поле заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
//Процедура ТаблицаЗаказаИзменитьПозицию(ТабличноеПоле, Количество) Экспорт
//Костенюк Александр-Старт 25.06.2012
Процедура ТаблицаЗаказаИзменитьПозицию(ТабличноеПоле, Количество, НомерКлиента = Неопределено) Экспорт
//Костенюк Александр-Финиш 25.06.2012
	
	// Действие.
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные();
	Если Булево(Макс(Количество,0)) Тогда
		// Изменение позиции.
		ТекущиеДанные.Количество = Количество;
		ТекущиеДанные.КоличествоУточненное = Количество; //Костенюк Александр 24.01.2017
		//Костенюк Александр-Старт 25.06.2012
		Если НЕ НомерКлиента = Неопределено Тогда
			ТекущиеДанные.НомерКлиента = НомерКлиента;
		КонецЕсли;
		//Костенюк Александр-Финиш 25.06.2012
		ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле.Данные(),ТекущиеДанные);
	Иначе
		// Чистяков Павел 08.08.2011 13:55:21 
		// Уадлять надо рекурсивно с учетом модификаторов
		ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле.Данные(),ТекущиеДанные);
	КонецЕсли;
	
	// TODO: Расчет скидок.
	Документ = ТабличноеПоле.Тег;
	ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, Документ.ДополнительныеСвойства.Скидки);
	
	// Обновление.
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры // ТаблицаЗаказаИзменитьПозицию()

// Процедура удаления позиции в табличном поле заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаЗаказаУдалитьПозицию(ТабличноеПоле) Экспорт
	
	// Удаление позиции.
	ТаблицаЗаказаИзменитьПозицию(ТабличноеПоле, 0);
	
КонецПроцедуры // ТаблицаЗаказаУдалитьПозицию()


Процедура ПереобновитьЧерныйБелыйСписок() Экспорт
	Если мКешМеню=Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаЦветов = УправлениеНоменклатуройСервер.FrontOfficeПолучитьЧтоВЧерномЧтоВБеломСписке(, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойРесторан));
	
	МассивПозиций = мКешМеню.Строки.НайтиСтроки(Новый Структура("БелыйСписок", Истина), Истина);
	Для Каждого Позиция Из МассивПозиций Цикл
		Позиция.БелыйСписок = Ложь;
	КонецЦикла;
	МассивПозиций = мКешМеню.Строки.НайтиСтроки(Новый Структура("ЧерныйСписок", Истина), Истина);
	Для Каждого Позиция Из МассивПозиций Цикл
		Позиция.ЧерныйСписок = Ложь;
	КонецЦикла;
		
	Для Каждого СтрокаТаблици Из ТаблицаЦветов Цикл
		
		МассивПозиций = мКешМеню.Строки.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблици.Номенклатура), Истина);
		Для Каждого Позиция Из МассивПозиций Цикл
			ЗаполнитьЗначенияСвойств(Позиция, СтрокаТаблици, "БелыйСписок,ЧерныйСписок,ЦветШрифтаЭлементовЧорногоСписка,ЦветФонаЭлементовЧерногоСписка,ШрифтЭлементовЧерногоСписка,ЦветШрифтаЭлементовБелогоСписка,ШрифтЭлементовБелогоСписка,ЦветФонаЭлементовБелогоСписка");
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры


Процедура ДеревоМенюПрочитать(Документ, ТабличноеПоле = Неопределено, Родитель = Неопределено, Ресторан = Неопределено) Экспорт
	
	Если мКешПользователь <> ПараметрыСеанса.ТекущийПользователь
		ИЛИ мКэшМенюТаблица = Неопределено
		ИЛИ мКешМеню = Неопределено Тогда	
		мКешПользователь = ПараметрыСеанса.ТекущийПользователь;	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦветаСтиля.ЦветШрифтаЭлементовБелогоСписка КАК ЦветШрифтаЭлементовБелогоСписка,
		               |	ШрифтыСтиля.ШрифтЭлементовБелогоСписка КАК ШрифтЭлементовБелогоСписка,
		               |	ЦветаФонаСтиля.ЦветФонаЭлементовБелогоСписка КАК ЦветФонаЭлементовБелогоСписка,
		               |	БелыйСписок.Номенклатура КАК БелыйСписокНоменклатура
		               |ПОМЕСТИТЬ ЦветаБелогоСписка
		               |ИЗ
		               |	РегистрСведений.ЦветаСтиля КАК ЦветаСтиля,
		               |	РегистрСведений.ШрифтыСтиля КАК ШрифтыСтиля,
		               |	РегистрСведений.ЦветаФонаСтиля КАК ЦветаФонаСтиля,
		               |	РегистрСведений.БелыйСписокНоменклатуры КАК БелыйСписок
		               |ГДЕ
		               |	БелыйСписок.Ресторан = &Ресторан
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЦветаСтиля.ЦветШрифтаЭлементовЧорногоСписка КАК ЦветШрифтаЭлементовЧорногоСписка,
		               |	ЦветаФонаСтиля.ЦветФонаЭлементовЧерногоСписка КАК ЦветФонаЭлементовЧерногоСписка,
		               |	ШрифтыСтиля.ШрифтЭлементовЧерногоСписка КАК ШрифтЭлементовЧерногоСписка,
		               |	ЧерныйСписок.Номенклатура КАК ЧерныйСписокНоменклатура
		               |ПОМЕСТИТЬ ЦветаЧерногоСписка
		               |ИЗ
		               |	РегистрСведений.ЦветаСтиля КАК ЦветаСтиля,
		               |	РегистрСведений.ШрифтыСтиля КАК ШрифтыСтиля,
		               |	РегистрСведений.ЦветаФонаСтиля КАК ЦветаФонаСтиля,
		               |	РегистрСведений.ЧерныйСписокНоменклатуры КАК ЧерныйСписок
		               |ГДЕ
		               |	ЧерныйСписок.Ресторан = &Ресторан
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МодификаторыНоменклатуры.Номенклатура КАК Номенклатура,
		               |	КОЛИЧЕСТВО(МодификаторыНоменклатуры.Модификатор) КАК Модификатор
		               |ПОМЕСТИТЬ МодификаторыНоменклатуры
		               |ИЗ
		               |	РегистрСведений.МодификаторыНоменклатуры КАК МодификаторыНоменклатуры
		               |ГДЕ
		               |	МодификаторыНоменклатуры.Актуальность
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	МодификаторыНоменклатуры.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УсловияНоменклатуры.Номенклатура КАК Номенклатура,
		               |	КОЛИЧЕСТВО(УсловияНоменклатуры.Условия) КАК Условия
		               |ПОМЕСТИТЬ УсловияНоменклатуры
		               |ИЗ
		               |	РегистрСведений.УсловияНоменклатуры КАК УсловияНоменклатуры
		               |ГДЕ
		               |	УсловияНоменклатуры.Актуальность
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	УсловияНоменклатуры.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Меню.Ссылка КАК Ссылка,
		               |	Меню.ЭтоГруппа КАК ЭтоГруппа,
		               |	Меню.Номенклатура КАК Номенклатура,
		               |	Меню.Наименование КАК Наименование,
		               |	Меню.Ссылка КАК Представление,
		               |	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	НоменклатураМеню.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
		               |	НоменклатураМеню.Код КАК Код,
		               |	НоменклатураМеню.Модифицируемый КАК Модифицируемый,
		               |	НоменклатураМеню.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		               |	НоменклатураМеню.Организация КАК Организация,
		               |	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		               |	НоменклатураМеню.СтавкаНДС КАК СтавкаНДС,
		               |	НоменклатураМеню.ТипНоменклатуры КАК ТипНоменклатуры,
		               |	НоменклатураМеню.Услуга КАК Услуга,
		               |	НоменклатураМеню.Цена КАК Цена,
		               |	НоменклатураМеню.Ценовой КАК Ценовой,
		               |	НоменклатураМеню.Штучный КАК Штучный,
		               |	&ПорядокПодачи КАК ПорядокПодачи,
		               |	&НаВынос КАК НаВынос,
		               |	&НомерКлиента КАК НомерКлиента,
		               |	ВЫБОР
		               |		КОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК БелыйСписок,
		               |	ВЫБОР
		               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ЧерныйСписок,
		               |	ВЫБОР
		               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ НЕ NULL 
		               |			ТОГДА ЦветаЧерногоСписка.ЦветШрифтаЭлементовЧорногоСписка
		               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		               |	КОНЕЦ КАК ЦветШрифтаЭлементовЧорногоСписка,
		               |	ВЫБОР
		               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ НЕ NULL 
		               |			ТОГДА ЦветаЧерногоСписка.ЦветФонаЭлементовЧерногоСписка
		               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		               |	КОНЕЦ КАК ЦветФонаЭлементовЧерногоСписка,
		               |	ВЫБОР
		               |		КОГДА ЦветаЧерногоСписка.ЧерныйСписокНоменклатура ЕСТЬ НЕ NULL 
		               |			ТОГДА ЦветаЧерногоСписка.ШрифтЭлементовЧерногоСписка
		               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		               |	КОНЕЦ КАК ШрифтЭлементовЧерногоСписка,
		               |	ВЫБОР
		               |		КОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура ЕСТЬ НЕ NULL 
		               |			ТОГДА ЦветаБелогоСписка.ЦветШрифтаЭлементовБелогоСписка
		               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		               |	КОНЕЦ КАК ЦветШрифтаЭлементовБелогоСписка,
		               |	ВЫБОР
		               |		КОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура ЕСТЬ НЕ NULL 
		               |			ТОГДА ЦветаБелогоСписка.ШрифтЭлементовБелогоСписка
		               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		               |	КОНЕЦ КАК ШрифтЭлементовБелогоСписка,
		               |	ВЫБОР
		               |		КОГДА ЦветаБелогоСписка.БелыйСписокНоменклатура ЕСТЬ НЕ NULL 
		               |			ТОГДА ЦветаБелогоСписка.ЦветФонаЭлементовБелогоСписка
		               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		               |	КОНЕЦ КАК ЦветФонаЭлементовБелогоСписка,
		               |	ВЫБОР
		               |		КОГДА Меню.ЭтоГруппа
		               |			ТОГДА Меню.Наименование
		               |		ИНАЧЕ Меню.Номенклатура.Наименование
		               |	КОНЕЦ КАК Сортировка,
		               |	ВЫБОР
		               |		КОГДА МодификаторыНоменклатуры.Модификатор ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ИспользуютсяМодификаторы,
		               |	ВЫБОР
		               |		КОГДА УсловияНоменклатуры.Условия ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ИспользуютсяУсловия
		               |ИЗ
		               |	Справочник.Меню КАК Меню
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		               |		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ЦветаБелогоСписка КАК ЦветаБелогоСписка
		               |		ПО Меню.Номенклатура = ЦветаБелогоСписка.БелыйСписокНоменклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ЦветаЧерногоСписка КАК ЦветаЧерногоСписка
		               |		ПО Меню.Номенклатура = ЦветаЧерногоСписка.ЧерныйСписокНоменклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ МодификаторыНоменклатуры КАК МодификаторыНоменклатуры
		               |		ПО Меню.Номенклатура = МодификаторыНоменклатуры.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ УсловияНоменклатуры КАК УсловияНоменклатуры
		               |		ПО Меню.Номенклатура = УсловияНоменклатуры.Номенклатура
		               |ГДЕ
		               |	Меню.Актуальность
		               |	И Меню.Владелец В
		               |			(ВЫБРАТЬ
		               |				ВидыМеню.Ссылка
		               |			ИЗ
		               |				Справочник.ВидыМеню КАК ВидыМеню
		               |			ГДЕ
		               |				&ПериодыДействияВидыМеню)
		               |	И НЕ Меню.ПометкаУдаления
		               |	И НЕ Меню.ЭтоГруппа
		               |	И &ПериодыДействияМеню
		               |	И Меню.Владелец = &ВидМеню
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Наименование
		               |ИТОГИ
		               |	ЕСТЬNULL(ЭтоГруппа, ИСТИНА) КАК ЭтоГруппа,
		               |	ЕСТЬNULL(Меню.Ссылка, Меню.Владелец) КАК Номенклатура,
		               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(Меню.Ссылка, Меню.Владелец)) КАК Представление
		               |ПО
		               |	Меню.Владелец,
		               |	Ссылка ТОЛЬКО ИЕРАРХИЯ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ЦветаБелогоСписка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ЦветаЧерногоСписка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ МодификаторыНоменклатуры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ УсловияНоменклатуры";
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияВидыМеню", "ВидыМеню");			   
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияМеню", "Меню");
		
		Запрос.УстановитьПараметр("ПорядокПодачи",1);
		Запрос.УстановитьПараметр("НомерКлиента", 0);
		Запрос.УстановитьПараметр("НаВынос", Ложь);
		Запрос.УстановитьПараметр("ТекущееВремя", Вычислить("'" +"00010101"+ Формат(ТекущаяДата(),"ДФ=HHmmss; ДЛФ=T")+"'"));
        Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Ресторан", ПараметрыСеанса.ТекущийРесторан);
		Запрос.УстановитьПараметр("ВидМеню", ?(ОсновнойВидМеню = Неопределено, УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойВидМеню), ОсновнойВидМеню));
		мКешМеню = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		мКэшМенюТаблица = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда	
		мВыводитьКартинкиПутиМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиПутиМеню);
		мВыводитьКартинкиГруппМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиГруппМеню);
		мВыводитьКартинкиЭлементовМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиЭлементовМеню);
		мВыводитьЦеныМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьЦеныМеню);
		мКомпактноеПредставлениеМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.КомпактноеПредставлениеМеню);
		мРазмерЭлементовМеню = УправлениеПользователями.ПолучитьНастрокуРазмера(УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.РазмерЭлементовМеню));	
		
		Если мВыводитьКартинкиЭлементовМеню Тогда
			мСтиляЭлементовМеню = FrontOffice.ПараметрыСтиляЭлементовМеню(,,, ТабличноеПоле.БиблиотекаКартинок.ИерархияЭлеменит); 
		Иначе
			мСтиляЭлементовМеню = FrontOffice.ПараметрыСтиляЭлементовМеню(,,, Ложь); 
		КонецЕсли;
		
		СтруктураСтиля = мСтиляЭлементовМеню; 
		СтруктураСтиля.Шрифт = Новый Шрифт(ТабличноеПоле.Шрифт, ,, СтруктураСтиля.Шрифт.Жирный, СтруктураСтиля.Шрифт.Наклонный, СтруктураСтиля.Шрифт.Подчеркивание, СтруктураСтиля.Шрифт.Зачеркивание);
		
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Меню", Новый ОписаниеТипов("Массив"), "Меню");		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("Меню");
		ТабличноеПоле.Колонки.Получить("Меню").ОтображатьВложенныеДанные = Истина;
		ТабличноеПоле.Колонки.Получить("Меню").Ширина = Макс(мРазмерЭлементовМеню.Ширина, 160);
		ТабличноеПоле.Колонки.Получить("Меню").ШиринаЭлементаВложенныхДанных = ТабличноеПоле.Колонки.Получить("Меню").Ширина;
		ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(мРазмерЭлементовМеню.Высота, 40);
		ТабличноеПоле.Шапка = Ложь;		
		Возврат;	
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	// Выборка данных.
	Если ТабличноеПоле.Тег = Неопределено Тогда		
		МассивРезультата	= Новый Массив();
		ЗаполнениеРесторана = ?(Документ<>Неопределено, Документ.Ресторан,Ресторан);	
		УправлениеНоменклатуройСервер.УдалениеНеАктуальныхЗаписей(ТекущаяДата());
		//ТабличноеПоле.Тег = Новый Структура("Данные,Путь,Группы,Элементы,ТаблицаЦвета", мКешМеню, "Ссылка", "Владелец");		
		ТабличноеПоле.Тег	= Новый Структура("Данные,Путь,Группы,Элементы");
		ТабличноеПоле.Тег.Вставить("Данные",мКешМеню);
		ТабличноеПоле.Тег.Вставить("ПустаяЯчейка","Пусто");			
	КонецЕсли;
	
	Если ТабличноеПоле.ТекущаяСтрока() <> Неопределено Тогда
		
		УправлениеНоменклатуройСервер.FrontOfficeПолучитьДеревоОтображенияМеню(МассивРезультата, ЗаполнениеРесторана);
		
	КонецЕсли;
	
	ДеревоМеню = ТабличноеПоле.Тег.Данные;
	
	ТабличноеПоле.Тег.Путь		= Новый Массив;
	ТабличноеПоле.Тег.Группы	= Новый Массив;
	ТабличноеПоле.Тег.Элементы	= Новый Массив;
	
	Если (ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений")) Тогда
		РодительМеню = Родитель;
	Иначе
		РодительМеню = ДеревоМеню.Строки.Найти(Родитель, "Ссылка", Истина);
	КонецЕсли;
	
	Если (Не РодительМеню = Неопределено) Тогда
		ДеревоМеню = РодительМеню;
		
		СтрокаДанных = Данные.Добавить();
		СтрокаДанных.Меню = Новый Массив;
		
		Пока (Не РодительМеню = Неопределено) Цикл
			ТабличноеПоле.Тег.Путь.Добавить(РодительМеню);
			СтрокаДанных.Меню.Вставить(0, РодительМеню);
			РодительМеню = РодительМеню.Родитель;	
		КонецЦикла;
	КонецЕсли;
	
	Если Не мКомпактноеПредставлениеМеню Тогда
		СтрокаДанных = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
		Если СтрокаДереваМеню.ЭтоГруппа Тогда
			Если (СтрокаДанных = Неопределено) Тогда
				СтрокаДанных = Данные.Добавить();
				СтрокаДанных.Меню = Новый Массив;
			КонецЕсли;
			
			ТабличноеПоле.Тег.Группы.Добавить(СтрокаДереваМеню);
			СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
		КонецЕсли;
	КонецЦикла;
	
	// -- Строки.
	Если Не мКомпактноеПредставлениеМеню Тогда
		СтрокаДанных = Неопределено;
	КонецЕсли;
	Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
		Если Не СтрокаДереваМеню.ЭтоГруппа Тогда
			Если (СтрокаДанных = Неопределено) Тогда
				СтрокаДанных = Данные.Добавить();
				СтрокаДанных.Меню = Новый Массив;
			КонецЕсли;
			
			ТабличноеПоле.Тег.Элементы.Добавить(СтрокаДереваМеню);
			СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
		КонецЕсли;
	КонецЦикла;
	
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры

// Процедура обработчик события ПриВыводеСтроки табличного поля меню.
//
Процедура ДеревоМенюВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Ресторан = Неопределено, ИзменятьТаблицу = ложь, ИзФормыМеню = Ложь) Экспорт
	
						  
	ОформлениеСтрокиМеню =  ОформлениеСтроки.Ячейки("Меню");
	КоличествоОбрабЯчеек = ОформлениеСтрокиМеню.Ячейки(Неопределено);
	
	Если не КоличествоОбрабЯчеек > 0 тогда	
		ОформлениеСтрокиМеню.Текст = Элемент.Тег.ПустаяЯчейка;
	Иначе	  
		Для ИндексВложенныхДанных = 0 По КоличествоОбрабЯчеек - 1 Цикл
			
			ВложенныеДанные = ДанныеСтроки.Меню[ИндексВложенныхДанных];
			ВложеннаяЯчейка = ОформлениеСтрокиМеню.Ячейки(ИндексВложенныхДанных);
			ВложеннаяЯчейка.Текст = ВложенныеДанные.Представление;
			
			Если мВыводитьЦеныМеню И (Не Элемент.Тег.Элементы.Найти(ВложенныеДанные) = Неопределено) Тогда
				ВложеннаяЯчейка.Текст = ВложеннаяЯчейка.Текст+ " " + Строка(ВложенныеДанные.ЕдиницаИзмеренияПредставление) + Символы.ПС + Формат(ВложенныеДанные.Цена, "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=") ;		
			КонецЕсли;
			
			Если (Не Элемент.Тег.Путь.Найти(ВложенныеДанные) = Неопределено) Тогда
				Если (Не мКомпактноеПредставлениеМеню) Тогда
					ОформлениеСтрокиМеню.ЦветФона = Элемент.ЦветФонаШапки;
				КонецЕсли;
				ВложеннаяЯчейка.ЦветФона = Элемент.ЦветФонаШапки;
				ВложеннаяЯчейка.Шрифт = Новый Шрифт(ВложеннаяЯчейка.Шрифт, ,, Истина); // Жирный.
				Если мВыводитьКартинкиПутиМеню Тогда
					ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияРодитель;
				КонецЕсли;
			ИначеЕсли (Не Элемент.Тег.Группы.Найти(ВложенныеДанные) = Неопределено) Тогда
				ВложеннаяЯчейка.ЦветТекста = ЦветаСтиля.ЦветФонаВыделенияПоля;
				ВложеннаяЯчейка.Шрифт = Новый Шрифт(ВложеннаяЯчейка.Шрифт, ,, Истина); // Жирный.
				Если мВыводитьКартинкиГруппМеню Тогда
					ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияГруппа;
				КонецЕсли;
			Иначе
				
				// Александр Переверзев 11.03.2012 22:20:44 
				ЗаполнитьЗначенияСвойств(ВложеннаяЯчейка, мСтиляЭлементовМеню);
				
				//Если не ИзФормыМеню Тогда
					Если ТипЗнч(ВложенныеДанные.Ссылка) = Тип("СправочникСсылка.Меню") Тогда
						Если ЗначениеЗаполнено(ВложенныеДанные.ЦветФонаЭлементовБелогоСписка) и ВложенныеДанные.БелыйСписок и не ВложенныеДанные.ЧерныйСписок Тогда	
							ВложеннаяЯчейка.ЦветФона = ВложенныеДанные.ЦветФонаЭлементовБелогоСписка.Получить() ;	
						ИначеЕсли ЗначениеЗаполнено(ВложенныеДанные.ЦветФонаЭлементовЧерногоСписка) и ВложенныеДанные.ЧерныйСписок и не ВложенныеДанные.БелыйСписок Тогда		
							ВложеннаяЯчейка.ЦветФона = ВложенныеДанные.ЦветФонаЭлементовЧерногоСписка.Получить();
						ИначеЕсли ЗначениеЗаполнено(ВложенныеДанные.ЦветФонаЭлементовБелогоСписка) и ЗначениеЗаполнено(ВложенныеДанные.ЦветФонаЭлементовЧерногоСписка) и ВложенныеДанные.ЧерныйСписок и ВложенныеДанные.БелыйСписок Тогда	
							ВложеннаяЯчейка.ЦветФона = ВложенныеДанные.ЦветФонаЭлементовЧерногоСписка.Получить();	
						КонецЕсли;			
						Если ЗначениеЗаполнено(ВложенныеДанные.ШрифтЭлементовБелогоСписка) и  ВложенныеДанные.БелыйСписок и не ВложенныеДанные.ЧерныйСписок Тогда
							ВложеннаяЯчейка.Шрифт  = ВложенныеДанные.ШрифтЭлементовБелогоСписка.Получить();	
						ИначеЕсли ЗначениеЗаполнено(ВложенныеДанные.ШрифтЭлементовЧерногоСписка) и ВложенныеДанные.ЧерныйСписок и не ВложенныеДанные.БелыйСписок Тогда
							ВложеннаяЯчейка.Шрифт  = ВложенныеДанные.ШрифтЭлементовЧерногоСписка.Получить();	
						ИначеЕсли ЗначениеЗаполнено(ВложенныеДанные.ШрифтЭлементовБелогоСписка) и ЗначениеЗаполнено(ВложенныеДанные.ШрифтЭлементовЧерногоСписка) и ВложенныеДанные.БелыйСписок и ВложенныеДанные.ЧерныйСписок Тогда
							ВложеннаяЯчейка.Шрифт  = ВложенныеДанные.ШрифтЭлементовЧерногоСписка.Получить();	
						КонецЕсли;				
						Если ЗначениеЗаполнено(ВложенныеДанные.ЦветШрифтаЭлементовБелогоСписка) и ВложенныеДанные.БелыйСписок и не ВложенныеДанные.ЧерныйСписок Тогда
							ВложеннаяЯчейка.ЦветТекста = ВложенныеДанные.ЦветШрифтаЭлементовБелогоСписка.Получить();
						ИначеЕсли ЗначениеЗаполнено(ВложенныеДанные.ЦветШрифтаЭлементовЧорногоСписка) и ВложенныеДанные.ЧерныйСписок и не ВложенныеДанные.БелыйСписок Тогда
							ВложеннаяЯчейка.ЦветТекста = ВложенныеДанные.ЦветШрифтаЭлементовЧорногоСписка.Получить();
						ИначеЕсли ЗначениеЗаполнено(ВложенныеДанные.ЦветШрифтаЭлементовБелогоСписка) и ЗначениеЗаполнено(ВложенныеДанные.ЦветШрифтаЭлементовЧорногоСписка) и ВложенныеДанные.БелыйСписок и ВложенныеДанные.ЧерныйСписок Тогда
							ВложеннаяЯчейка.ЦветТекста = ВложенныеДанные.ЦветШрифтаЭлементовЧорногоСписка.Получить();
						КонецЕсли;
						////Костенюк Александр-Старт 23.07.2012
						//Если ЗначениеЗаполнено(ВложенныеДанные.Номенклатура.Иконка) Тогда
						//	ВложеннаяЯчейка.ОтображатьКартинку = Истина;								
						//	ВложеннаяЯчейка.Картинка = Новый Картинка(ВложенныеДанные.Номенклатура.Иконка.Изображение.Получить());
						//КонецЕсли;
						////Костенюк Александр-Финиш 23.07.2012
					КонецЕсли;
				//Иначе 
				//	//Игорь Разукрашка
				//	Если  ТаблицаЦвета.Количество() > 0  тогда   
				//		СтрокаПоиска = ТаблицаЦвета.Найти(ВложенныеДанные.Номенклатура, "Номенклатура");
				//		Если СтрокаПоиска <> Неопределено Тогда	
				//			ВложеннаяЯчейка.ЦветФона = СтрокаПоиска.ЦветаФона.Получить();
				//			ВложеннаяЯчейка.Шрифт  = СтрокаПоиска.ШрифтыСтиля.Получить();
				//			ВложеннаяЯчейка.ЦветТекста =СтрокаПоиска.ЦветШрифта.Получить();		
				//		КонецЕсли; 
				//	КонецЕсли;

				//КонецЕсли;
				
				// Александр Переверзев 11.03.2012 22:21:32 
				//Если мВыводитьКартинкиЭлементовМеню Тогда
				//	ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияЭлеменит;
				//КонецЕсли;
			КонецЕсли;
			
			ВложеннаяЯчейка.ГиперСсылка = Истина;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДеревоМенюВывестиСтроку()

// Процедура заполнения табличного поля скидок документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаСкидокПрочитать(Документ, ТабличноеПоле) Экспорт		 
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;		
		Для Каждого Реквизит Из Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты Цикл
			Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
		КонецЦикла;
		
		//ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("СкидкаНаценка,ДисконтнаяКарта,СуммаСкидки,СуммаНаценки,Ручная,Актуальность");
		//ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("СкидкаНаценка,ДисконтнаяКарта,СуммаСкидки,СуммаНаценки,СуммаДепозита,СуммаСертификата,СуммаСкидкиНаСертификат,Ручная,Актуальность");
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("СкидкаНаценка,ДисконтнаяКарта,СуммаСкидки,СуммаНаценки,СуммаДепозита,СуммаСертификата,Ручная,Актуальность"); //Костенюк Александр 21.01.2015
		ТабличноеПоле.Колонки.Получить("СкидкаНаценка").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("ДисконтнаяКарта").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("СуммаСкидки").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСкидки.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСкидки.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаСкидки").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("СуммаНаценки").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаНаценки.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаНаценки.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаНаценки").Ширина = 400 * 0.15;
		//Костенюк Александр-Старт 18.07.2012
		ТабличноеПоле.Колонки.Получить("СуммаДепозита").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаДепозита.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаДепозита.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаДепозита").Ширина = 400 * 0.15;
		//Костенюк Александр-Финиш 18.07.2012
		//Костенюк Александр-Старт 11.12.2014
		ТабличноеПоле.Колонки.Получить("СуммаСертификата").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСертификата.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСертификата.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаСертификата").Ширина = 400 * 0.15;
		//ТабличноеПоле.Колонки.Получить("СуммаСкидкиНаСертификат").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСкидкиНаСертификат.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСкидкиНаСертификат.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		//ТабличноеПоле.Колонки.Получить("СуммаСкидкиНаСертификат").Ширина = 400 * 0.15;
		//Костенюк Александр-Финиш 11.12.2014
		ТабличноеПоле.Колонки.Получить("Ручная").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("Ручная").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Актуальность").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("Актуальность").Ширина = 400 * 0.10;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	// Выборка данных.
	Если (Документ = Неопределено) тогда
		Возврат;
	КонецЕсли;
	Если Не ОбщегоНазначения.ЕстьТабличнаяЧастьДокумента("Скидки", Документ.Метаданные()) тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Документ.Скидки Цикл
		СтрокаДанных = Данные.Добавить();
		
		Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Скидки.Реквизиты Цикл
			СтрокаДанных[Реквизит.Имя] = СтрокаТабличнойЧасти[Реквизит.Имя];
		КонецЦикла;
		
	КонецЦикла;
	
	// Обновление
	ТабличноеПоле.ОбновитьСтроки();		
	
КонецПроцедуры // ТаблицаСкидокПрочитать()

// Игорь 02.09.2011 18:30:25
//
Процедура ТаблицаСкидокОбновить(Документ, ТабличноеПоле) Экспорт 
	// Данные.
	Данные = ТабличноеПоле.Данные();
	Если (Данные = Неопределено) Тогда
		Данные = Новый ТаблицаЗначений;	
		Для Каждого Реквизит Из Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты Цикл
			Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
		КонецЦикла;			
		//ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("СкидкаНаценка,ДисконтнаяКарта,СуммаСкидки,СуммаНаценки,Ручная,Актуальность");
		//ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("СкидкаНаценка,ДисконтнаяКарта,СуммаСкидки,СуммаНаценки,СуммаДепозита,СуммаСертификата,СуммаСкидкиНаСертификат,Ручная,Актуальность");
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("СкидкаНаценка,ДисконтнаяКарта,СуммаСкидки,СуммаНаценки,СуммаДепозита,СуммаСертификата,Ручная,Актуальность"); //Костенюк Александр 21.01.2015
		ТабличноеПоле.Колонки.Получить("СкидкаНаценка").Ширина = 400 * 0.30;
		ТабличноеПоле.Колонки.Получить("ДисконтнаяКарта").Ширина = 400 * 0.20;
		ТабличноеПоле.Колонки.Получить("СуммаСкидки").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСкидки.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСкидки.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаСкидки").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("СуммаНаценки").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаНаценки.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаНаценки.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаНаценки").Ширина = 400 * 0.15;
		//Костенюк Александр-Старт 18.07.2012
		ТабличноеПоле.Колонки.Получить("СуммаДепозита").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаДепозита.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаДепозита.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаДепозита").Ширина = 400 * 0.15;
		//Костенюк Александр-Финиш 18.07.2012
		//Костенюк Александр-Старт 11.12.2014
		ТабличноеПоле.Колонки.Получить("СуммаСертификата").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСертификата.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСертификата.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаСертификата").Ширина = 400 * 0.15;
		//ТабличноеПоле.Колонки.Получить("СуммаСкидкиНаСертификат").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСкидкиНаСертификат.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СуммаСкидкиНаСертификат.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		//ТабличноеПоле.Колонки.Получить("СуммаСкидкиНаСертификат").Ширина = 400 * 0.15;
		//Костенюк Александр-Финиш 11.12.2014
		ТабличноеПоле.Колонки.Получить("Ручная").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("Ручная").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Актуальность").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("Актуальность").Ширина = 400 * 0.10;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;			
	//Костенюк Александр-Старт 20.06.2012
	Иначе
		Данные.Очистить();
	//Костенюк Александр-Финиш 20.06.2012
	КонецЕсли;
	
	Если Документ <> Неопределено и  ОбщегоНазначения.ЕстьТабличнаяЧастьДокумента("Скидки", Документ.Метаданные()) Тогда		
		Для Каждого СтрокаТабличнойЧасти Из Документ.Скидки Цикл
			СтрокаДанных = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТабличнойЧасти);		
		КонецЦикла;		
	КонецЕсли;		
	// Обновление	
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры

// Процедура актуализации табличного поля скидок документа.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ТаблицаСкидокЗаписать(Документ, ТабличноеПоле) Экспорт
	
	// Проверка.
	Если Не ОбщегоНазначения.ЕстьТабличнаяЧастьДокумента("Скидки", Документ.Метаданные()) тогда
		Возврат;
	КонецЕсли;
	
	// Перенос данных.
	Документ.Скидки.Загрузить(ТабличноеПоле.Данные());
	
КонецПроцедуры // ТаблицаСкидокЗаписать()

// Процедура обработчик события ПриВыводеСтроки табличного поля скидок документа.
//
Процедура ТаблицаСкидокВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.ДисконтнаяКарта Тогда
		
		Если не мДисконтнаяКарта.Пустая() Тогда
			ОформлениеСтроки.Ячейки("ДисконтнаяКарта").ОтображатьФлажок = не ДанныеСтроки.ДисконтнаяКарта;
			ОформлениеСтроки.Ячейки("ДисконтнаяКарта").ОтображатьТекст = ДанныеСтроки.ДисконтнаяКарта;
			ОформлениеСтроки.Ячейки("ДисконтнаяКарта").Текст = мДисконтнаяКарта.Наименование ;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	// ТаблицаСкидокВывестиСтроку()

Процедура ТаблицаСкидокДобавитьПозицию(ТабличноеПоле, Позиция) Экспорт
	
	// Поиск позиции.
	Данные = ТабличноеПоле.Данные();
	Документ = ТабличноеПоле.Тег;
	ТекущиеДанные = Данные.Найти(Позиция.Ссылка, "СкидкаНаценка");
	
	// Действие.
	Если (ТекущиеДанные = Неопределено) Тогда
		
		//Костенюк Александр-Старт 10.06.2014
		// Запрос причины применения ручной скидки
		Если ЗапрашиватьПричинуПримененияРучнойСкидки Тогда
			Если НЕ ВыборПричиныПримененияРучнойСкидки(Документ.ПричинаСкидки) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//Костенюк Александр-Финиш 10.06.2014
		
		// -- Добавление.
		ТекущиеДанные = Данные.Добавить();
		ТекущиеДанные.СкидкаНаценка = Позиция.Ссылка;
		ТекущиеДанные.Актуальность = Истина;		
		ТекущиеДанные.Ручная = Истина;
		
		// TODO: Расчет скидок.
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, Документ.ДополнительныеСвойства.Скидки);
		
		// -- Обновление.
		ТабличноеПоле.ТекущаяСтрока(ТекущиеДанные);
	Иначе
		// -- Изменение.
		ТекущиеДанные.Ручная = ТекущиеДанные.Ручная Или (Не ТекущиеДанные.Актуальность);
		ТекущиеДанные.Автоматическая = ТекущиеДанные.Автоматическая И (Не ТекущиеДанные.Ручная);
		ТекущиеДанные.Актуальность = Истина;
		
		// TODO: Расчет скидок.		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, Документ.ДополнительныеСвойства.Скидки);
		
		// -- Обновление.
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСкидокДобавитьПозицию()

Процедура ТаблицаСкидокУдалитьПозицию(ТабличноеПоле, Дисконтная = Ложь, ТекущаяСтрока = Неопределено) Экспорт	
	// Текущая позиция.
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные();
	Если (ТекущиеДанные = Неопределено) Тогда
		Возврат;
	КонецЕсли;				
	// Игорь 09.09.2011 10:21:36	   
	Если не ТекущиеДанные.ДисконтнаяКарта Тогда			
		Если ТекущиеДанные.Автоматическая Тогда	
			ТекущиеДанные.Актуальность = не ТекущиеДанные.Актуальность;
			ТекущиеДанные.Ручная = не ТекущиеДанные.Ручная;	
			ТекущаяСтрока = ТекущиеДанные;
		Иначе 
			// Удаление.
			ТабличноеПоле.Данные().Удалить(ТекущиеДанные);
		КонецЕсли;				
	Иначе
		ТекущиеДанные.Актуальность = не ТекущиеДанные.Актуальность;
		ТекущиеДанные.Ручная = не ТекущиеДанные.Ручная;
		Дисконтная = ТекущиеДанные.ДисконтнаяКарта;	
		ТекущаяСтрока = ТекущиеДанные;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДеревоСкидокПрочитать(ТабличноеПоле) Экспорт		
	//// Выборка данных.
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//					  |	ТипыСкидокНаценок.Ссылка КАК Ссылка,
	//					  |	ТипыСкидокНаценок.Родитель,
	//					  |	ТипыСкидокНаценок.ЭтоГруппа,
	//					  |	ТипыСкидокНаценок.ПроцентСкидкиНаценки,
	//					  |	ТипыСкидокНаценок.СуммоваяСкидкаНаценка,
	//					  |	ТипыСкидокНаценок.Представление
	//					  |ИЗ
	//					  |	Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
	//					  |ГДЕ
	//					  |	ТипыСкидокНаценок.Актуальность
	//					  |	И (НЕ ТипыСкидокНаценок.ПометкаУдаления)
	//					  |
	//					  |УПОРЯДОЧИТЬ ПО
	//					  |	ТипыСкидокНаценок.Наименование
	//					  |АВТОУПОРЯДОЧИВАНИЕ");
	//Данные = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель", ТабличноеПоле.Данные());
	
	//Костенюк Александр-Старт 09.10.2012
	// Ограничение доступности типов скидок/наценок
	ТекущаяГруппаПользователей 	= ПараметрыСеанса.ТекущаяГруппаПользователей;
	ТекущийПользователь 		= ПараметрыСеанса.ТекущийПользователь;
	Если (ТекущаяГруппаПользователей = Неопределено) И (ТекущийПользователь = Неопределено) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ТипыСкидокНаценок.Ссылка КАК Ссылка,
		                      |	ТипыСкидокНаценок.Родитель,
		                      |	ТипыСкидокНаценок.ЭтоГруппа,
		                      |	ТипыСкидокНаценок.ПроцентСкидкиНаценки,
		                      |	ТипыСкидокНаценок.СуммоваяСкидкаНаценка,
		                      |	ТипыСкидокНаценок.Представление
		                      |ИЗ
		                      |	Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
		                      |ГДЕ
		                      |	ТипыСкидокНаценок.Актуальность
		                      |	И НЕ ТипыСкидокНаценок.ПометкаУдаления
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ТипыСкидокНаценок.Наименование
		                      |АВТОУПОРЯДОЧИВАНИЕ");
		Данные = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель", ТабличноеПоле.Данные());
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТипыСкидокНаценок.Ссылка КАК Ссылка,
		               |	ТипыСкидокНаценок.Родитель,
		               |	ТипыСкидокНаценок.ЭтоГруппа КАК ЭтоГруппа,
		               |	ТипыСкидокНаценок.ПроцентСкидкиНаценки,
		               |	ТипыСкидокНаценок.СуммоваяСкидкаНаценка,
		               |	ТипыСкидокНаценок.Представление
		               |ИЗ
		               |	Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
		               |ГДЕ
		               |	ТипыСкидокНаценок.Актуальность
		               |	И НЕ ТипыСкидокНаценок.ПометкаУдаления
		               |	И НЕ ТипыСкидокНаценок.Ссылка В
		               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |					ЕСТЬNULL(Пользователь.ОбъектДоступа, Группа.ОбъектДоступа) КАК ОбъектДоступа
		               |				ИЗ
		               |					(ВЫБРАТЬ
		               |						НастройкиПравДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа,
		               |						НастройкиПравДоступаПользователей.Актуальность КАК Актуальность
		               |					ИЗ
		               |						РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
		               |					ГДЕ
		               |						НастройкиПравДоступаПользователей.ВладелецПравДоступа = &ТекущаяГруппаПользователей
		               |					) КАК Группа ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |							НастройкиПравДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа,
		               |							НастройкиПравДоступаПользователей.Актуальность КАК Актуальность
		               |						ИЗ
		               |							РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
		               |						ГДЕ
		               |							НастройкиПравДоступаПользователей.ВладелецПравДоступа = &ТекущийПользователь
		               |						) КАК Пользователь
		               |						ПО
		               |							Группа.ОбъектДоступа = Пользователь.ОбъектДоступа)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЭтоГруппа УБЫВ,
		               |	Ссылка
		               |АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("ТекущаяГруппаПользователей"	, ТекущаяГруппаПользователей);
		Запрос.УстановитьПараметр("ТекущийПользователь"			, ТекущийПользователь);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Данные = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(РезультатЗапроса, "Ссылка", "Родитель", ТабличноеПоле.Данные());
	КонецЕсли;
	//Костенюк Александр-Финиш 09.10.2012
			
	// Данные.
	Если (ТабличноеПоле.Данные() = Неопределено) Тогда
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("Картинка,Представление,ПроцентСкидкиНаценки");
		ТабличноеПоле.Колонки.Получить("Представление").ТекстШапки = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Скидки.Реквизиты.СкидкаНаценка.Синоним;
		ТабличноеПоле.Колонки.Получить("Представление").Ширина = 400 * 0.80;
		ТабличноеПоле.Колонки.Получить("ПроцентСкидкиНаценки").ТекстШапки = Метаданные.Справочники.ТипыСкидокНаценок.Реквизиты.ПроцентСкидкиНаценки.Синоним;
		ТабличноеПоле.Колонки.Получить("ПроцентСкидкиНаценки").Формат = "ЧЦ=" + Метаданные.Справочники.ТипыСкидокНаценок.Реквизиты.ПроцентСкидкиНаценки.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Справочники.ТипыСкидокНаценок.Реквизиты.ПроцентСкидкиНаценки.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("ПроцентСкидкиНаценки").Ширина = 400 * 0.15;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	КонецЕсли;		
	// Обновление
	ТабличноеПоле.ОбновитьСтроки();	
КонецПроцедуры

Процедура ДеревоСкидокВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Процент = "%"; Сумма = "Σ";
	
	// Оформление строки.
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки("Представление").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("ПроцентСкидкиНаценки").ГиперСсылка = Истина;
	Иначе
		Если ДанныеСтроки.СуммоваяСкидкаНаценка Тогда 
			ОформлениеСтроки.Ячейки("ПроцентСкидкиНаценки").Текст = ОформлениеСтроки.Ячейки("ПроцентСкидкиНаценки").Текст + " " + Сумма;
		Иначе
			ОформлениеСтроки.Ячейки("ПроцентСкидкиНаценки").Текст = ОформлениеСтроки.Ячейки("ПроцентСкидкиНаценки").Текст + " " + Процент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДеревоСкидокНаценокВывестиСтроку()	

// Процедура заполнения табличного поля оплат.
//
// Параметры:
//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
//
Процедура ДеревоОплатПрочитатьУдалить(Документ, ТабличноеПоле) Экспорт
	
	Данные = ТабличноеПоле.Данные();
	
	Если (Данные = Неопределено) Тогда
		Данные = Новый ДеревоЗначений;
		Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
		Данные.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
		Данные.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
		Данные.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Оплата.Синоним);
		Данные.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
		Данные.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
		Данные.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"), "НУ");
		ТабличноеПоле.Данные(Данные); 
		ТабличноеПоле.СоздатьКолонки("Картинка,Представление,ОтражатьВНалоговомУчете");
		ТабличноеПоле.Колонки.Получить("Представление").Ширина = 300 * 0.75;
		ТабличноеПоле.Колонки.Получить("ОтражатьВНалоговомУчете").Ширина = 300 * 0.10;
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;	
		Возврат;
	Иначе
		Данные.Строки.Очистить();
	КонецЕсли;
	
	Если (Документ = Неопределено) тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОплата = Документ.Оплата;
	
	//Костенюк Александр-Старт 06.09.2012
	// Позиционирование на виде оплаты, который указан в настройках пользователя
	Если НЕ ЗначениеЗаполнено(ТекущаяОплата) Тогда
		ТекущаяОплата = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВидОплатыПоУмолчаниюЗаказа);	
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ТекущаяОплата) Тогда
		ТекущаяОплата = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОплатыЧекаККМ);	
	КонецЕсли;
	Если (НЕ Документ.Оплата = ТекущаяОплата) Тогда
		Документ.Оплата 						= ТекущаяОплата;
		Документ.ОтражатьВУправленческомУчете 	= ТекущаяОплата.ОтражатьВУправленческомУчете;
		Документ.ОтражатьВНалоговомУчете 		= ТекущаяОплата.ОтражатьВНалоговомУчете;
		Документ.ОтражатьВБухгалтерскомУчете 	= ТекущаяОплата.ОтражатьВБухгалтерскомУчете;
	КонецЕсли; 
	//Костенюк Александр-Финиш 06.09.2012

	Попытка
		Скидки = Документ.ДополнительныеСвойства.Скидки;
	Исключение
		Скидки = Документ.Скидки.Выгрузить();
	КонецПопытки;
	
	ДанныеОпределены = Ложь;
	
	Если Скидки.Количество() > 0 Тогда		
		
		Запрос = Новый Запрос;
		
		Если Скидки.Колонки.Найти("ВидыОплатККМ") = Неопределено Тогда
			Скидки.Колонки.Добавить("ВидыОплатККМ", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
		КонецЕсли;
		
		Для каждого стр Из Скидки Цикл
			Если ЗначениеЗаполнено(стр.СкидкаНаценка.ВидыОплатЧекаККМ) Тогда
				стр.ВидыОплатККМ = стр.СкидкаНаценка.ВидыОплатЧекаККМ;
				//Костенюк Александр-Старт 19.10.2012
				ТекущаяОплата = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
				//Костенюк Александр-Финиш 19.10.2012
			Иначе
				стр.ВидыОплатККМ = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
			КонецЕсли;                              
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Скидки", Скидки);	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугСкидки.СуммаСкидки КАК СуммаСкидки,
		|	РеализацияТоваровУслугСкидки.ВидыОплатККМ
		|ПОМЕСТИТЬ МаксимальнаяСкидка
		|ИЗ
		|	&Скидки КАК РеализацияТоваровУслугСкидки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	МаксимальнаяСкидка.ВидыОплатККМ
		|ПОМЕСТИТЬ ВидОплат
		|ИЗ
		|	МаксимальнаяСкидка КАК МаксимальнаяСкидка
		|ГДЕ
		|	(НЕ МаксимальнаяСкидка.ВидыОплатККМ = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка))
		|	И МаксимальнаяСкидка.СуммаСкидки > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	МаксимальнаяСкидка.СуммаСкидки УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОплатЧекаККМ.Родитель КАК Родитель,
		|	ВидыОплатЧекаККМ.Ссылка КАК Ссылка,
		|	ВидыОплатЧекаККМ.ЭтоГруппа КАК ЭтоГруппа,
		|	ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
		|	ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
		|	ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете,
		|	ВидыОплатЧекаККМ.Представление КАК Представление
		|ИЗ
		|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
		|ГДЕ
		|	ВидыОплатЧекаККМ.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ВидОплат.ВидыОплатККМ
		|			ИЗ
		|				ВидОплат)
		|	И (НЕ ВидыОплатЧекаККМ.ПометкаУдаления)
		|	И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
		|	И ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг
		|
		|УПОРЯДОЧИТЬ ПО
		//|	Ссылка";
		//Костенюк Александр-Старт 23.10.2012
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаксимальнаяСкидка";
		//Костенюк Александр-Финиш 23.10.2012
		
		Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "и ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете", " ");		
		КонецЕсли;
		
		Результат = Запрос.Выполнить(); 
		Если НЕ Результат.Пустой() Тогда
			ДанныеОпределены = Истина;
			ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Результат.Выгрузить(), "Ссылка", "Родитель", Данные);
		КонецЕсли;
	КонецЕсли;
	
	// Чистяков Павел 05.12.2011 12:52:43
	// Для комнат тоже есть свой вид оплаты, по которому надо делать отбор
	// Причем его приоритет ниже чем у скидок
	Если НЕ ДанныеОпределены Тогда
		Если ЗначениеЗаполнено(Документ.Комната) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВидыОплатЧекаККМ.Родитель КАК Родитель,
			|	ВидыОплатЧекаККМ.Ссылка КАК Ссылка,
			|	ВидыОплатЧекаККМ.ЭтоГруппа КАК ЭтоГруппа,
			|	ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
			|	ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
			|	ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете,
			|	ВидыОплатЧекаККМ.Представление КАК Представление
			|ИЗ
			|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
			|ГДЕ
			|	ВидыОплатЧекаККМ.Ссылка В ИЕРАРХИИ(&Ссылка)
			|	И (НЕ ВидыОплатЧекаККМ.ПометкаУдаления)
			|	И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
			|	И ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг"
			);
			Запрос.УстановитьПараметр("Ссылка",Константы.ВидОплатыКомнат.Получить());
			
			Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете", " ");		
			КонецЕсли;
			
			ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель", Данные);
			
		Иначе
			
			//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//					  |	ВидыОплатЧекаККМ.Ссылка,
			//					  |	ВидыОплатЧекаККМ.Родитель,
			//					  |	ВидыОплатЧекаККМ.ЭтоГруппа,
			//					  |	ВидыОплатЧекаККМ.Представление,
			//					  |	ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете,
			//					  |	ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете,
			//					  |	ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
			//					  |ИЗ
			//					  |	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
			//					  |ГДЕ
			//					  |	(НЕ ВидыОплатЧекаККМ.ПометкаУдаления)
			//					  |	И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
			//					  |	И ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг
			//					  |
			//					  |УПОРЯДОЧИТЬ ПО
			//					  |	ВидыОплатЧекаККМ.Родитель,
			//					  |	ВидыОплатЧекаККМ.ЭтоГруппа УБЫВ,
			//					  |	ВидыОплатЧекаККМ.Представление");
			
			//Костенюк Александр-Старт 13.06.2012
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВидыОплатЧекаККМ.Ссылка КАК Ссылка,
			               |	ВидыОплатЧекаККМ.Родитель,
			               |	ВидыОплатЧекаККМ.ЭтоГруппа,
			               |	ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете,
			               |	ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете,
			               |	ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете,
			               |	ВидыОплатЧекаККМ.Представление
			               |ИЗ
			               |	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
			               |ГДЕ
			               |	ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг
			               |	И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
			               |	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Ссылка ИЕРАРХИЯ";
			//Костенюк Александр-Финиш 13.06.2012
			
			Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете", " ");		
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();			
			Если РезультатЗапроса.Пустой() Тогда
				ТабличноеПоле.ОбновитьСтроки();
				Возврат;
			КонецЕсли;
			ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(РезультатЗапроса.Выгрузить(), "Ссылка", "Родитель", Данные);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяОплата) Тогда
		ТекущаяСтрока = Данные.Строки.Найти(ТекущаяОплата, "Ссылка", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяОплата) Тогда
		ТабличноеПоле.ТекущаяСтрока(ТекущаяСтрока);
	Иначе
		ТабличноеПоле.ОбновитьСтроки();
	КонецЕсли;
	

	
КонецПроцедуры

// Процедура обработчик события ПриВыводеСтроки табличного поля оплат.
//
Процедура ДеревоОплатВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// Оформление строки.
	ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("Представление").ГиперСсылка = Истина;
	ОформлениеСтроки.Ячейки("ОтражатьВНалоговомУчете").ГиперСсылка = Истина;
	
	// ОтражатьВНалоговомУчете.
	ОформлениеСтроки.Ячейки("ОтражатьВНалоговомУчете").ТолькоПросмотр = Истина;
	
КонецПроцедуры // ДеревоОплатВывестиСтроку()

Процедура ТаблицаПереносаПрочитать(Документ, ТабличноеПоле) Экспорт
	
	// Перенаправление.
	Если (Документ = Неопределено) тогда
		ТаблицаЗаказаПрочитать(Документ, ТабличноеПоле);
	Иначе
		ТаблицаЗаказаПрочитать(Документ.Ссылка, ТабличноеПоле);
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПереносаПрочитать()

//Процедура ТаблицаПереносаПеренестиПозицию(Источник, Получатель, Позиция = Неопределено, Количество = Неопределено, ТекущаяСтрокаТаблицыПолучателя = Неопределено) Экспорт
Процедура ТаблицаПереносаПеренестиПозицию(Источник, Получатель, Позиция = Неопределено, Количество = Неопределено, ТекущаяСтрокаТаблицыПолучателя = Неопределено, КоличествоУточненное = Неопределено) Экспорт //Костенюк Александр 26.01.2017
	//Игорь Перенос 
	// Игорь 25.08.2011 17:38:31
	// Данные.
	ИсточникДанные = Источник.Данные();
	ОсновнойИсточник = ИсточникДанные.Скопировать();
	ПолучательДанные = Получатель.Данные();
	ОсновноеКоличество = Количество;
	ОсновноеКоличествоУточненное = КоличествоУточненное; //Костенюк Александр 26.01.2017
	МассивНаУдаление = новый Массив;
	// Действие.
	Если (Позиция = Неопределено) Тогда
		
		// -- Проверка.
		Если Не Булево(ИсточникДанные.Количество()) Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНеРаспечатанных = ИсточникДанные.СкопироватьКолонки();
		ТаблицаПриемникКопия = ПолучательДанные.Скопировать();
		ПолучательДанные.Очистить();
		// -- Пролный перенос.
		Для Каждого СтрокаТаблицыИсточника Из ИсточникДанные Цикл
			
			// ---- Поиск.
			Если СтрокаТаблицыИсточника.Распечатан Тогда
				
				СтрокаТаблицыПолучателя = ТаблицаПриемникКопия.Найти(СтрокаТаблицыИсточника.Идентификатор, "Идентификатор");
				Если (СтрокаТаблицыПолучателя = Неопределено) Тогда
					СтрокаТаблицыПолучателя = ПолучательДанные.Добавить();
					Количество = СтрокаТаблицыИсточника.Количество;
					КоличествоУточненное = СтрокаТаблицыИсточника.КоличествоУточненное; //Костенюк Александр 26.01.2017
				Иначе
					Количество = СтрокаТаблицыИсточника.Количество + СтрокаТаблицыПолучателя.Количество;
					КоличествоУточненное = СтрокаТаблицыИсточника.КоличествоУточненное + СтрокаТаблицыПолучателя.КоличествоУточненное; //Костенюк Александр 26.01.2017
				КонецЕсли;
				// ---- Клонирование.
				ОбработкаТабличныхЧастей.СкопироватьСтрокуТабЧасти(СтрокаТаблицыПолучателя, СтрокаТаблицыИсточника, ИсточникДанные.Колонки);
				// ---- Изменение количества.
				СтрокаТаблицыПолучателя.Количество = Количество;
				СтрокаТаблицыПолучателя.КоличествоУточненное = КоличествоУточненное; //Костенюк Александр 26.01.2017
				// ---- Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТаблицыПолучателя, Форма.ДокументОбъект, "Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицыПолучателя, Форма.ДокументОбъект, "Товары");
				
			иначе				
				ЗаполнитьЗначенияСвойств(ТаблицаНеРаспечатанных.добавить(), СтрокаТаблицыИсточника);	
			КонецЕсли;
			
		КонецЦикла;
		
		// ---- Корректировака источника.
		ИсточникДанные.Очистить();
		ОбщегоНазначенияСервер.ЗаполнитьКоллекциюСвойств(ТаблицаНеРаспечатанных, ИсточникДанные);					 
		ОбщегоНазначенияСервер.ЗаполнитьКоллекциюСвойств(ТаблицаПриемникКопия, ПолучательДанные);
		Источник.ОбновитьСтроки();
		Получатель.ОбновитьСтроки();
		
	Иначе
		
		// -- Перенос позиции.
		СтрокаТаблицыИсточника = Позиция;
		
		Если СтрокаТаблицыИсточника.Распечатан Тогда
			
			КоличествоИсточника = СтрокаТаблицыИсточника.Количество;
			КоличествоУточненноеИсточника = СтрокаТаблицыИсточника.КоличествоУточненное; //Костенюк Александр 26.01.2017
			
			// ---- Поиск.
			СтрокаТаблицыПолучателя = ПолучательДанные.Найти(СтрокаТаблицыИсточника.Идентификатор, "Идентификатор");
			
			Если (СтрокаТаблицыПолучателя = Неопределено) Тогда
				
				СтрокаТаблицыПолучателя = ПолучательДанные.Добавить();
				Если  СтрокаТаблицыИсточника.Количество <> Количество Тогда 
					//Количество = СтрокаТаблицыИсточника.Количество;
				Иначе
					Количество = КоличествоИсточника;
					КоличествоУточненное = КоличествоУточненноеИсточника; //Костенюк Александр 26.01.2017
				КонецЕсли; 
				
			Иначе
				Количество = СтрокаТаблицыПолучателя.Количество + ОсновноеКоличество;
				КоличествоУточненное = СтрокаТаблицыПолучателя.КоличествоУточненное + ОсновноеКоличествоУточненное; //Костенюк Александр 26.01.2017
			КонецЕсли;   
			// ---- Клонирование  
			ОбработкаТабличныхЧастей.СкопироватьСтрокуТабЧасти(СтрокаТаблицыПолучателя, СтрокаТаблицыИсточника, ИсточникДанные.Колонки);					
			// ---- Изменение количества.
			СтрокаТаблицыПолучателя.Количество = Количество;
			СтрокаТаблицыПолучателя.КоличествоУточненное = КоличествоУточненное; //Костенюк Александр 26.01.2017
			// ---- Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТаблицыПолучателя, Форма.ДокументОбъект, "Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицыПолучателя, Форма.ДокументОбъект, "Товары");
			
			// ---- Корректировака источника.
			Если (СтрокаТаблицыИсточника.Количество = ОсновноеКоличество) или СтрокаТаблицыИсточника.Количество = 0 Тогда 
				МассивНаУдаление.Добавить(СтрокаТаблицыИсточника);
			Иначе
				СтрокаТаблицыИсточника.Количество = КоличествоИсточника - ОсновноеКоличество;
				СтрокаТаблицыИсточника.КоличествоУточненное = КоличествоУточненноеИсточника - ОсновноеКоличествоУточненное; //Костенюк Александр 26.01.2017
				//---- Рассчитать реквизиты табличной части.									
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТаблицыИсточника, Форма.ДокументОбъект, "Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицыИсточника, Форма.ДокументОбъект, "Товары");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сортировка.
		ИсточникДанные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");
		ПолучательДанные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");
		
		МассивСтрок = Новый Массив;
		//ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные, МассивСтрок, Позиция, ОсновноеКоличество); 
		ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные, МассивСтрок, Позиция, ОсновноеКоличество, ОсновноеКоличествоУточненное); //Костенюк Александр 26.01.2017
		
		Для каждого СтрокаМассива Из МассивНаУдаление Цикл
			ИсточникДанные.Удалить(СтрокаМассива);
		КонецЦикла;	
		
		// Обновление.
		Если ИсточникДанные.Количество()=0 Тогда
			ТекущаяСтрокаТаблицыПолучателя = Неопределено;
			Источник.ОбновитьСтроки();	
			Получатель.ОбновитьСтроки();
		иначе
			Источник.ОбновитьСтроки();	
			Получатель.ОбновитьСтроки();
			Если ЗначениеЗаполнено(СтрокаТаблицыПолучателя) Тогда 
				ПереносПоискВерхнегоРодителя(ПолучательДанные, СтрокаТаблицыПолучателя, , ТекущаяСтрокаТаблицыПолучателя );
				Получатель.ТекущаяСтрока(ТекущаяСтрокаТаблицыПолучателя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	
//
//
//Процедура ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные, МассивСтрок,  Позиция, Количество) 
Процедура ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные, МассивСтрок,  Позиция, Количество, КоличествоУточненное) //Костенюк Александр 26.01.2017
	
	Если МассивСтрок.Количество()= 0 Тогда
		
		Для каждого СтрТаблицы Из ИсточникДанные Цикл
			
			Если СтрТаблицы.Владелец = Позиция.Идентификатор Тогда
				
				МассивСтрок.Добавить(СтрТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрок.Количество()> 0 тогда
			
			//ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные , МассивСтрок,  Позиция, Количество)  
			ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные , МассивСтрок,  Позиция, Количество, КоличествоУточненное); //Костенюк Александр 26.01.2017
			
		КонецЕсли;
		
	Иначе
		
		Для каждого СтрМассива Из МассивСтрок Цикл
			
			//ТаблицаПереносаПеренестиПозицию(Источник, Получатель, СтрМассива, Количество); 
			ТаблицаПереносаПеренестиПозицию(Источник, Получатель, СтрМассива, Количество, , КоличествоУточненное); //Костенюк Александр 26.01.2017
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПоискКлиента.Выбор элемента.
//
Процедура ПоискКлиентаВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
	// Проверка изменения клиента.
	Если ЗначениеЗаполнено(мКонтрагентПоиска) И (мКонтрагентПоиска = Значение.Объект) Тогда
		Возврат;
	КонецЕсли;
	
	// Подтверждение.
	Если ЗначениеЗаполнено(мКонтрагентПоиска) Тогда
		Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Заменить клиента «';uk='Замінити клієнта «'")  + мКонтрагентПоиска + "» на «" + Значение.Объект + "»?", РежимДиалогаВопрос.ДаНет);
		Если (Не Результат = КодВозвратаДиалога.Да) Тогда
			
			// Наепка друг чекиста :)
			Значение.Объект = мКонтрагентПоиска;
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	// Проверка черного списка клиентов.
	Если УправлениеЗаказами.КонтрагентВЧерномСписке(Значение.Объект) Тогда
		
		СтандартнаяОбработка = (ПодтверждениеВыбораКонтрагентаИзЧерногоСписка(Значение.Объект) = КодВозвратаДиалога.Да) И
		(УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьПринадлежностьКонтрагентаКЧерномуСпискуЗаказов) Или 
		ПолучитьСерверFrontOffice().Авторизация(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьПринадлежностьКонтрагентаКЧерномуСпискуЗаказов, Истина));
		
	КонецЕсли;
	
КонецПроцедуры // ПоискКлиентаВыбор()

// Обработчик события ПоискКлиента.ПриИзмененииДанных элемента.
//
Процедура ПоискКлиентаПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ТаблицаПоискаКлиентаПрочитать()

// Обработчик события ПоискКлиента.ПриПоискеЗначения элемента.
//
Процедура ПоискКлиентаПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// Данные.
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	// Выборка данных.
	Если Не ПустаяСтрока(Значение) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
		|	СправочникКонтрагенты.Ссылка КАК Объект,
		|	СправочникКонтрагенты.Представление КАК ОбъектПредставление
		|ИЗ
		|	Справочник.Контрагенты КАК СправочникКонтрагенты
		|ГДЕ
		|	НЕ СправочникКонтрагенты.ЭтоГруппа
		|	И НЕ СправочникКонтрагенты.ПометкаУдаления
		|	И СправочникКонтрагенты.НаименованиеПолное ПОДОБНО &Значение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектПредставление";
		Запрос.УстановитьПараметр("Значение", "%" + УправлениеКонтактнойИнформацией.ПолучитьСтрокуДляПоискаПоПодобию(Значение) + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();	
			СтрокаТаблицы.Объект = Выборка.Объект;
			СтрокаТаблицы.ОбъектПредставление = Выборка.ОбъектПредставление;
		КонецЦикла;
		
		// TODO: Поиск значения.
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	// Обновление.
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры // ПоискКлиентаПриПоискеЗначения()

// Обработчик события ПоискКлиента.ПриВыводеСтроки элемента.
//
Процедура ПоискКлиентаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// ОбъектПредставление.
	ОформлениеСтроки.Ячейки("ОбъектПредставление").УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
	
КонецПроцедуры // ПоискКлиентаПриВыводеСтроки()

// Обработчик события ПоискТелефона.Выбор элемента.
//
Процедура ПоискТелефонаВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
	// Проверка черного списка клиентов.
	ПоискКлиентаВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры // ПоискТелефонаВыбор()

// Обработчик события ПоискТелефона.ПриИзмененииДанных элемента.
//
Процедура ПоискТелефонаПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	
	ТабличноеПоле.Колонки.Получить("ОбъектПредставление").Ширина = 400 * 0.40;
	ТабличноеПоле.Колонки.Получить("Представление").Ширина = 400 * 0.30;
	ТабличноеПоле.Колонки.Получить("Представление").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ПоискТелефонаПриИзмененииДанных()

// Обработчик события ПоискТелефона.ПриПоискеЗначения элемента.
////
Процедура ПоискТелефонаПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	Перем ТекущаяСтрока;
	
	СтандартнаяОбработка = Ложь;
	
	// Данные.
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	// Выборка данных.
	Если Булево(Значение) Или ЗначениеЗаполнено(мМассивКонтрагентовПоиска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Поле1,
		|	КонтактнаяИнформация.Поле2,
		|	КонтактнаяИнформация.Поле3,
		|	КонтактнаяИнформация.Поле4,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Представление,
		|	КонтактнаяИнформация.Поиск КАК Поиск
		|ПОМЕСТИТЬ ВременнаяКонтактнаяИнформация
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Объект)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
		|	И (КонтактнаяИнформация.Поиск = &Сравнение
		|			ИЛИ КонтактнаяИнформация.Поиск ПОДОБНО &Значение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
		|	КонтактнаяИнформация.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Поле1,
		|	КонтактнаяИнформация.Поле2,
		|	КонтактнаяИнформация.Поле3,
		|	КонтактнаяИнформация.Поле4,
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Поиск КАК Поиск
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИСТИНА КАК РеализацияТоваровУслуг,
		|		КонтактнаяИнформация.Объект КАК Объект,
		|		КонтактнаяИнформация.Поле1 КАК Поле1,
		|		КонтактнаяИнформация.Поле2 КАК Поле2,
		|		КонтактнаяИнформация.Поле3 КАК Поле3,
		|		КонтактнаяИнформация.Поле4 КАК Поле4,
		|		КонтактнаяИнформация.Представление КАК Представление,
		|		КонтактнаяИнформация.Поиск КАК Поиск
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Объект КАК Объект,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле1 КАК Поле1,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле2 КАК Поле2,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле3 КАК Поле3,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле4 КАК Поле4,
		|			ВЫРАЗИТЬ(КонтактнаяИнформацияРеализацииТоваровУслуг.Представление КАК СТРОКА(100)) КАК Представление,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск КАК Поиск
		|		ИЗ
		|			РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КонтактнаяИнформацияРеализацииТоваровУслуг
		|		ГДЕ
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Объект В(&Объект)
		|			И КонтактнаяИнформацияРеализацииТоваровУслуг.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			И (КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск = &Сравнение
		|					ИЛИ КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск ПОДОБНО &Значение)) КАК КонтактнаяИнформация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		КонтактнаяИнформация.Объект,
		|		КонтактнаяИнформация.Поле1,
		|		КонтактнаяИнформация.Поле2,
		|		КонтактнаяИнформация.Поле3,
		|		КонтактнаяИнформация.Поле4,
		|		КонтактнаяИнформация.Представление,
		|		КонтактнаяИнформация.Поиск
		|	ИЗ
		|		ВременнаяКонтактнаяИнформация КАК КонтактнаяИнформация) КАК КонтактнаяИнформация
		|
		|УПОРЯДОЧИТЬ ПО
		//|	Представление";
		//Костенюк Александр-Старт 23.10.2012
		|	Представление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяКонтактнаяИнформация";
		//Костенюк Александр-Финиш 23.10.2012
		Если Не ЗначениеЗаполнено(мМассивКонтрагентовПоиска) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформацияРеализацииТоваровУслуг.Объект В(&Объект)", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Объект В(&Объект)", "ИСТИНА");
		КонецЕсли; 
		Запрос.УстановитьПараметр("Объект", мМассивКонтрагентовПоиска); 
		Запрос.УстановитьПараметр("Сравнение", Формат(Значение, "ЧГ=")); 
		Запрос.УстановитьПараметр("Значение", Формат(Значение, "ЧГ=") + "%"); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();	
			СтрокаТаблицы.РеализацияТоваровУслуг = Выборка.РеализацияТоваровУслуг;
			СтрокаТаблицы.Объект = Выборка.Объект;
			СтрокаТаблицы.ОбъектПредставление = Выборка.Объект;
			СтрокаТаблицы.Поле1 = Выборка.Поле1;
			СтрокаТаблицы.Поле2 = Выборка.Поле2;
			СтрокаТаблицы.Поле3 = Выборка.Поле3;
			СтрокаТаблицы.Поле4 = Выборка.Поле4;
			СтрокаТаблицы.Представление = СокрП(Выборка.Представление);
			СтрокаТаблицы.Поиск = Выборка.Поиск;
			
			Если (ТекущаяСтрока = Неопределено) Тогда
				Если (Не ЗначениеЗаполнено(мМассивКонтрагентовПоиска)) И (СтрокаТаблицы.Поиск = Формат(Значение, "ЧГ=")) Тогда
					ТекущаяСтрока = СтрокаТаблицы;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	// Обновление.
	Если (Не ТекущаяСтрока = Неопределено) Тогда
		Элемент.ТекущаяСтрока(ТекущаяСтрока);
	Иначе
		Элемент.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры // ПоискТелефонаПриПоискеЗначения()

// Обработчик события ПоискТелефона.ПриВыводеСтроки элемента.
//
Процедура ПоискТелефонаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// ОбъектПредставление.
	Если ДанныеСтроки.РеализацияТоваровУслуг Тогда
		ОформлениеСтроки.Ячейки("ОбъектПредставление").УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
	Иначе
		ОформлениеСтроки.Ячейки("ОбъектПредставление").УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
	КонецЕсли;
	
КонецПроцедуры // ПоискТелефонаПриВыводеСтроки()

// Обработчик события ПоискУлицы.Выбор элемента.
//
Процедура ПоискУлицыВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
	// Выбрана улица.
	Если Значение.Справочник Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка черного списка клиентов.
	ПоискКлиентаВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры // ПоискУлицыВыбор()

// Обработчик события ПоискУлицы.ПриИзмененииДанных элемента.
//
Процедура ПоискУлицыПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ПоискУлицыПриИзмененииДанных()

// Обработчик события ПоискУлицы.ПриПоискеЗначения элемента.
//
Процедура ПоискУлицыПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// Данные.
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	// Выборка данных.
	Если Не ПустаяСтрока(Значение) Или ЗначениеЗаполнено(мМассивКонтрагентовПоиска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Поле1,
		|	КонтактнаяИнформация.Поле2,
		|	КонтактнаяИнформация.Поле3,
		|	КонтактнаяИнформация.Поле4,
		|	КонтактнаяИнформация.Поле5,
		|	КонтактнаяИнформация.Поле6,
		|	КонтактнаяИнформация.Поле7,
		|	КонтактнаяИнформация.Поле8,
		|	КонтактнаяИнформация.Поле9,
		|	КонтактнаяИнформация.Поле10,
		|	КонтактнаяИнформация.Поле11,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление,
		|	КонтактнаяИнформация.Поиск КАК Поиск
		|ПОМЕСТИТЬ ВременнаяКонтактнаяИнформация
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
		|	И КонтактнаяИнформация.Объект В(&Объект)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КонтактнаяИнформация.Поиск ПОДОБНО &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
		|	ИСТИНА КАК Справочник,
		|	СправочникКлассификаторУлиц.Сравнимо КАК Сравнимо,
		|	ЛОЖЬ КАК РеализацияТоваровУслуг,
		|	NULL КАК Объект,
		|	NULL КАК Поле1,
		|	NULL КАК Поле2,
		|	NULL КАК Поле3,
		|	NULL КАК Поле4,
		|	NULL КАК Поле5,
		|	СправочникКлассификаторУлиц.Ссылка КАК Поле6,
		|	NULL КАК Поле7,
		|	NULL КАК Поле8,
		|	NULL КАК Поле9,
		|	NULL КАК Поле10,
		|	NULL КАК Поле11,
		|	NULL КАК Комментарий,
		|	СправочникКлассификаторУлиц.Представление КАК Представление,
		|	СправочникКлассификаторУлиц.Представление КАК Поиск
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
		|		СправочникКлассификаторУлиц.Ссылка КАК Ссылка,
		|		СправочникКлассификаторУлиц.Представление КАК Представление,
		|		ВЫБОР
		|			КОГДА СправочникКлассификаторУлиц.НаименованиеСокращенное >= &Сравнение
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК Сравнимо
		|	ИЗ
		|		Справочник.КлассификаторУлиц КАК СправочникКлассификаторУлиц
		|	ГДЕ
		|		&ПоискПоУлицам
		|		И (НЕ СправочникКлассификаторУлиц.ЭтоГруппа)
		|		И (НЕ СправочникКлассификаторУлиц.ПометкаУдаления)
		|		И СправочникКлассификаторУлиц.Наименование ПОДОБНО &Значение
		|	
		|	УПОРЯДОЧИТЬ ПО
		|		Сравнимо УБЫВ) КАК СправочникКлассификаторУлиц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 25
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	КонтактнаяИнформация.РеализацияТоваровУслуг,
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Поле1,
		|	КонтактнаяИнформация.Поле2,
		|	КонтактнаяИнформация.Поле3,
		|	КонтактнаяИнформация.Поле4,
		|	КонтактнаяИнформация.Поле5,
		|	КонтактнаяИнформация.Поле6,
		|	КонтактнаяИнформация.Поле7,
		|	КонтактнаяИнформация.Поле8,
		|	КонтактнаяИнформация.Поле9,
		|	КонтактнаяИнформация.Поле10,
		|	КонтактнаяИнформация.Поле11,
		|	КонтактнаяИнформация.Комментарий,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Поиск
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ИСТИНА КАК РеализацияТоваровУслуг,
		|		КонтактнаяИнформация.Объект КАК Объект,
		|		КонтактнаяИнформация.Поле1 КАК Поле1,
		|		КонтактнаяИнформация.Поле2 КАК Поле2,
		|		КонтактнаяИнформация.Поле3 КАК Поле3,
		|		КонтактнаяИнформация.Поле4 КАК Поле4,
		|		КонтактнаяИнформация.Поле5 КАК Поле5,
		|		КонтактнаяИнформация.Поле6 КАК Поле6,
		|		КонтактнаяИнформация.Поле7 КАК Поле7,
		|		КонтактнаяИнформация.Поле8 КАК Поле8,
		|		КонтактнаяИнформация.Поле9 КАК Поле9,
		|		КонтактнаяИнформация.Поле10 КАК Поле10,
		|		КонтактнаяИнформация.Поле11 КАК Поле11,
		|		КонтактнаяИнформация.Комментарий КАК Комментарий,
		|		КонтактнаяИнформация.Представление КАК Представление,
		|		КонтактнаяИнформация.Поиск КАК Поиск
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 25
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Объект КАК Объект,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле1 КАК Поле1,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле2 КАК Поле2,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле3 КАК Поле3,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле4 КАК Поле4,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле5 КАК Поле5,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле6 КАК Поле6,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле7 КАК Поле7,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле8 КАК Поле8,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле9 КАК Поле9,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле10 КАК Поле10,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле11 КАК Поле11,
		|			ВЫРАЗИТЬ(КонтактнаяИнформацияРеализацииТоваровУслуг.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|			ВЫРАЗИТЬ(КонтактнаяИнформацияРеализацииТоваровУслуг.Представление КАК СТРОКА(1000)) КАК Представление,
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск КАК Поиск
		|		ИЗ
		|			РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КонтактнаяИнформацияРеализацииТоваровУслуг
		|		ГДЕ
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Объект В(&Объект)
		|			И КонтактнаяИнформацияРеализацииТоваровУслуг.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|			И КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск ПОДОБНО &Значение
		|		
		|		УПОРЯДОЧИТЬ ПО
		|			КонтактнаяИнформацияРеализацииТоваровУслуг.Документ.ДатаНачалаПериода УБЫВ) КАК КонтактнаяИнформация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		КонтактнаяИнформация.Объект,
		|		КонтактнаяИнформация.Поле1,
		|		КонтактнаяИнформация.Поле2,
		|		КонтактнаяИнформация.Поле3,
		|		КонтактнаяИнформация.Поле4,
		|		КонтактнаяИнформация.Поле5,
		|		КонтактнаяИнформация.Поле6,
		|		КонтактнаяИнформация.Поле7,
		|		КонтактнаяИнформация.Поле8,
		|		КонтактнаяИнформация.Поле9,
		|		КонтактнаяИнформация.Поле10,
		|		КонтактнаяИнформация.Поле11,
		|		КонтактнаяИнформация.Комментарий,
		|		КонтактнаяИнформация.Представление,
		|		КонтактнаяИнформация.Поиск
		|	ИЗ
		|		ВременнаяКонтактнаяИнформация КАК КонтактнаяИнформация) КАК КонтактнаяИнформация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Справочник УБЫВ,
		|	Сравнимо УБЫВ,
		|	РеализацияТоваровУслуг УБЫВ,
		//|	Представление";
		//Костенюк Александр-Старт 23.10.2012
		|	Представление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяКонтактнаяИнформация";
		//Костенюк Александр-Финиш 23.10.2012
		Если Не ЗначениеЗаполнено(мМассивКонтрагентовПоиска) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформацияРеализацииТоваровУслуг.Объект В(&Объект)", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Объект В(&Объект)", "ИСТИНА");
		КонецЕсли; 
		Запрос.УстановитьПараметр("ПоискПоУлицам", Не ПустаяСтрока(Значение)); 
		Запрос.УстановитьПараметр("Объект", мМассивКонтрагентовПоиска); 
		Запрос.УстановитьПараметр("Сравнение", УправлениеКонтактнойИнформацией.ПолучитьСтрокуДляПоискаПоСравнению(Значение)); 
		Запрос.УстановитьПараметр("Значение", "%" + УправлениеКонтактнойИнформацией.ПолучитьСтрокуДляПоискаПоПодобию(Значение) + "%"); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();	
			СтрокаТаблицы.Справочник = Выборка.Справочник;
			СтрокаТаблицы.РеализацияТоваровУслуг = Выборка.РеализацияТоваровУслуг;
			СтрокаТаблицы.Объект = Выборка.Объект;
			СтрокаТаблицы.ОбъектПредставление = Выборка.Объект;
			СтрокаТаблицы.Поле1 = Выборка.Поле1;
			СтрокаТаблицы.Поле2 = Выборка.Поле2;
			СтрокаТаблицы.Поле3 = Выборка.Поле3;
			СтрокаТаблицы.Поле4 = Выборка.Поле4;
			СтрокаТаблицы.Поле5 = Выборка.Поле5;
			СтрокаТаблицы.Поле6 = Выборка.Поле6;
			СтрокаТаблицы.Поле7 = Выборка.Поле7;
			СтрокаТаблицы.Поле8 = Выборка.Поле8;
			СтрокаТаблицы.Поле9 = Выборка.Поле9;
			СтрокаТаблицы.Поле10 = Выборка.Поле10;
			СтрокаТаблицы.Поле11 = Выборка.Поле11;
			СтрокаТаблицы.Комментарий = СокрП(Выборка.Комментарий);
			СтрокаТаблицы.Представление = СокрП(Выборка.Представление);
			СтрокаТаблицы.Поиск = Выборка.Поиск;
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	// Обновление.
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры // ПоискУлицыПриПоискеЗначения()

// Обработчик события ПоискУлицы.ПриВыводеСтроки элемента.
//
Процедура ПоискУлицыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// ОбъектПредставление.
	Если ДанныеСтроки.Справочник Тогда
		ОформлениеСтроки.Ячейки("ОбъектПредставление").УстановитьКартинку(БиблиотекаКартинок.ЭлементСправочника);
		ОформлениеСтроки.Ячейки("ОбъектПредставление").Текст = ДанныеСтроки.Представление;
	Иначе
		Если ДанныеСтроки.РеализацияТоваровУслуг Тогда
			ОформлениеСтроки.Ячейки("ОбъектПредставление").УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
		Иначе
			ОформлениеСтроки.Ячейки("ОбъектПредставление").УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
		КонецЕсли;
		ОформлениеСтроки.Ячейки("ОбъектПредставление").Текст = ДанныеСтроки.ОбъектПредставление + Символы.ПС + ДанныеСтроки.Представление;
		Если Не ПустаяСтрока(ДанныеСтроки.Комментарий) Тогда
			ОформлениеСтроки.Ячейки("ОбъектПредставление").Текст = ОформлениеСтроки.Ячейки("ОбъектПредставление").Текст + ", " + ДанныеСтроки.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПоискУлицыПриВыводеСтроки()
	
// Функция проверки корректности заполнения документа для печати пречека.
//
// Параметры:
//	Документ - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.СписаниеТоваров. Распечатываемый документ;
//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.СписаниеТоваров. Распечатываемый документ до изменения.
//
// Возвращаемое значение:
//	Булево. Истина в случае если документ прошел проверку.
//
Функция ПроверкаПречека(Документ, Оригинал) Экспорт
	
	// Получение объекта.
	ДокументОбъект = Документ; ДокументОригинал = Оригинал;
	
	// Тип документа.
	ТипДокумента = ТипЗнч(ДокументОбъект); МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Проверка состояния.
	Если (Не ОбщегоНазначения.ЕстьРеквизитДокумента("Распечатан", МетаданныеДокумента)) Или (ДокументОбъект.Распечатан = ДокументОригинал.Распечатан) Тогда
		Возврат Истина;	
	КонецЕсли;
	
	// Проверка документа. Шапка.
	Если Не ДокументОбъект.Распечатан Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка оборудования.
	Если Не ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ВыводитьПречекНаПечать") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// TODO: Проверка оборудования.	
	
	// Документ прошел проверку.
	Возврат Истина;	
	
КонецФункции // ПроверкаПречека()

// Функция проверки работоспособности оборудования (ФР)
// Возвращаемое значение:
//	Булево. Истина в случае если документ прошел проверку.
Функция ПроверкаОборудованияДляПечатиНаККМ(СписокОрганизаций=Неопределено, СписокКассККМ=Неопределено, 
	ОтражатьВНалоговомУчете=Истина) Экспорт
	
	//29/06/2010 КА Если это форма 2 то никакой проверки оборудования не делаем
	Если НЕ(ОтражатьВНалоговомУчете) Тогда
		Возврат Истина;
	КонецЕсли;	
	//Возврат Истина; // ПРОВЕРКА ЗАБАНЕНА ВРЕМЕННО!!!
	
	//Если продажа то получем СписокОрганизаций
	//Если возврат то получаем СписокКассККМ
	ТаблицаТОВсе = Новый ТаблицаЗначений();		
	ТаблицаТОВсе.Колонки.Добавить("Идентификатор");
	ТаблицаТОВсе.Колонки.Добавить("Модель");
	
	СписокТОнеПодкл = Новый СписокЗначений;
	
	Если НЕ(СписокОрганизаций=Неопределено) Тогда
		СписокПроверки = СписокОрганизаций; 
	Иначе
		СписокПроверки = СписокКассККМ; 
	КонецЕсли;	
	
	Для каждого ОрганизацияКасса из СписокПроверки Цикл		
		//Ковтун А. 11/2009 Получить список касс подключенных к даному компьютеру по организации
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	 РегТО.Идентификатор КАК Идентификатор,
		|	 РегТО.Модель КАК Модель
		|ИЗ
		|    РегистрСведений.ТорговоеОборудование КАК РегТО
		|ГДЕ
		|    РегТО.Компьютер = &Компьютер ";
		
		Запрос.УстановитьПараметр("Компьютер"          , ПолучитьСерверТО().ПолучитьКомпьютерТО());
		Если НЕ(СписокОрганизаций=Неопределено) Тогда
			Запрос.Текст = Запрос.Текст +"
			|	И РегТО.КассаККМ.Владелец = &Организация";
			Запрос.УстановитьПараметр("Организация", ОрганизацияКасса.Значение);
		Иначе
			Запрос.Текст = Запрос.Текст +"
			|	И РегТО.КассаККМ = &КассаККМ";
			Запрос.УстановитьПараметр("КассаККМ", ОрганизацияКасса.Значение);
		КонецЕсли;		
		
		Результат = Запрос.Выполнить().Выгрузить();				
		Для Каждого СтрокаЗапроса Из Результат Цикл									
			СтрокаТО = ТаблицаТОВсе.Добавить();
			
			СтрокаТО.Идентификатор      = СтрокаЗапроса.Идентификатор;
			СтрокаТО.Модель = СтрокаЗапроса.Модель;
		КонецЦикла;
	КонецЦикла;	
	
	ТаблицаТОВсе.Свернуть("Идентификатор,Модель");
	
	Для Каждого ЭлСписТО Из ТаблицаТОВсе Цикл
		Попытка
			Ответ = ПолучитьСерверТО().ПроверкаОборудования(ЭлСписТО.Идентификатор);						
			Если ЗначениеЗаполнено(Ответ) Тогда							
				СписокТОнеПодкл.Добавить(ЭлСписТО.Модель);
				НеФормироватьЧекККМ=Истина;
			КонецЕсли;						
		Исключение
			НеФормироватьЧекККМ=Истина;						
		КонецПопытки;
	КонецЦикла; 				
	
	// ---- Чеки ККМ.
	Если НеФормироватьЧекККМ=Истина Тогда
		ТОнеПодключено="( ";
		Для каждого СтрокаТО из СписокТОнеПодкл Цикл
			ТОнеПодключено = ТОнеПодключено+СокрЛП(СтрокаТО.Значение);
			Если СписокТОнеПодкл.Индекс(СтрокаТО)+1<СписокТОнеПодкл.Количество() Тогда
				ТОнеПодключено=ТОнеПодключено+", ";
			КонецЕсли;	
		КонецЦикла;	
		ТОнеПодключено=ТОнеПодключено+" )";
		____Ошибка(НСтр("ru='Чек не может быть сформирован, потому что оборудование ';uk='Чеч не може буди сформовано, тому що обладнання '")  +ТОнеПодключено+НСтр("ru=' не подключено!';uk=' не підключено!'") );
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаТОВсе = Неопределено;
	
	Возврат Истина;
КонецФункции 	

// Функция проверки корректности заполнения документа для печати чека.
//
// Параметры:
//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ до изменения.
//
// Возвращаемое значение:
//	Булево. Истина в случае если документ прошел проверку.
//
Функция ПроверкаККМ(Документ, Оригинал, РежимЗаписи) Экспорт
	
	// Получение объекта.
	ДокументОбъект = Документ; 
	ДокументОригинал = Оригинал;
	
	// Тип документа.
	ТипДокумента = ТипЗнч(ДокументОбъект); 
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Проверка состояния.
	//Если ((Не ОбщегоНазначения.ЕстьРеквизитДокумента("Оплата", МетаданныеДокумента)) Или (ДокументОбъект.Проведен = ДокументОригинал.Проведен)) Тогда	
	//	Возврат Истина;	
	//КонецЕсли;
	
	// Проверка документа.
	Если ЗначениеЗаполнено(ДокументОбъект.Оплата) Тогда
		
		// -- Категория клиентов.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКлиентов", МетаданныеДокумента) И ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОбъект.КатегорияКлиентов) И ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ТребоватьНаличиеКатегорииКлиентовПриПечатиПречека") Тогда
			FrontOffice.СообщитьОбНезаполненомРеквизитеДокумента(ДокументОбъект, "КатегорияКлиентов");
			Возврат Ложь;
		КонецЕсли;
		
		// -- Категория документа.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеДокумента) И ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОбъект.КатегорияДокумента) И ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ТребоватьНаличиеКатегорииДокументаПриПечатиПречека") Тогда
			FrontOffice.СообщитьОбНезаполненомРеквизитеДокумента(ДокументОбъект, "КатегорияДокумента");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// -- Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДокументЧекККМ.Ссылка КАК Ссылка,
	|	ДокументЧекККМ.КассаККМ КАК КассаККМ,
	|	ДокументЧекККМ.КассаККМ.Владелец КАК Организация,
	|	ДокументЧекККМ.Оплата КАК Оплата,
	|	ДокументЧекККМ.ЧекККМ КАК ЧекККМРеализации,
	|	ДокументЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЧекККМ.ЧекПробитНаККМ КАК ЧекПробитНаККМ,
	|	ДокументЧекККМ.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	ДокументЧекККМ.Сделка = &Сделка И 
	|	ДокументЧекККМ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	//|	ДокументЧекККМ.МоментВремени");
	//Костенюк Александр-Старт 07.12.2012
	// Сортируем правильно
	|	НАЧАЛОПЕРИОДА(ДокументЧекККМ.Дата, ДЕНЬ),
	|	ДокументЧекККМ.Номер");
	//Костенюк Александр-Финиш 07.12.2012
	Запрос.УстановитьПараметр("Сделка", ДокументОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	// -- Подготовка таблиц.
	ТаблицаЧековККМРеализации = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаЧековККМРеализации.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	ТаблицаЧековККМВозвратов = ТаблицаЧековККМРеализации.Скопировать();
	
	// -- Анализ данных.
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ЧекККМРеализации) Тогда
				//Если Выборка.ВидОперации=Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				СтрокаТаблицы = ТаблицаЧековККМРеализации.Найти(Выборка.ЧекККМРеализации, "Ссылка");
				Если НЕ(СтрокаТаблицы = Неопределено) Тогда
					Если (СтрокаТаблицы.КассаККМ = Выборка.КассаККМ) И (СтрокаТаблицы.Организация = Выборка.Организация) И (СтрокаТаблицы.Оплата = Выборка.Оплата) И (СтрокаТаблицы.Ссылка = Выборка.ЧекККМРеализации) И (СтрокаТаблицы.СуммаДокумента = Выборка.СуммаДокумента) Тогда
						ТаблицаЧековККМРеализации.Удалить(СтрокаТаблицы);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокаТаблицы = ТаблицаЧековККМВозвратов.Добавить();
			Иначе
				СтрокаТаблицы = ТаблицаЧековККМРеализации.Добавить();
			КонецЕсли;
			
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				Колонка = Колонка.Имя;
				СтрокаТаблицы[Колонка] = Выборка[Колонка];
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// -- Проверка при продаже
	Если Булево(ТаблицаЧековККМРеализации.Количество()) И (РежимЗаписи=РежимЗаписиДокумента.Проведение) Тогда
		ОписаниеОшибки = НСтр("ru=' По текущему документу существуют актуальные документы «';uk=' Для поточного документа існують актуальні документи «'")  + Метаданные.Документы.ЧекККМ.Синоним + "»!"; 
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію.'")  + ОписаниеОшибки); 
		Возврат Ложь;
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ТаблицаЧековККМРеализации", ТаблицаЧековККМРеализации);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ТаблицаЧековККМВозвратов", ТаблицаЧековККМВозвратов);
	
	// Проверка оборудования.
	// ПРОДАЖА 
	//Если НЕ(РежимЗаписи = РежимЗаписиДокумента.Запись) Тогда
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СписокОрганизаций = Новый СписокЗначений;
		СписокКасс = Новый СписокЗначений;
		ТабличныеЧасти = Новый Массив; 
		ТабличныеЧасти.Добавить("Товары"); 
		//ТабличныеЧасти.Добавить("Услуги"); //Костенюк Александр-Закомментировано 22.04.2013
		
		СуществуютПозицииСНулевойСуммой = Ложь; //Костенюк Александр 19.12.2014
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
				
				Если (Не СписокОрганизаций.НайтиПоЗначению(СтрокаТабличнойЧасти.Организация) = Неопределено) Тогда
					Продолжить;
				КонецЕсли;
				
				Если (СтрокаТабличнойЧасти.Сумма = 0) Тогда
					//Продолжить; //Костенюк Александр-Закомментировано 12.01.2015
					//Костенюк Александр-Старт 12.01.2015
					Если (СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Модификатор) И
						(СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Условие) Тогда
						СуществуютПозицииСНулевойСуммой = Истина;
					КонецЕсли;
					//Костенюк Александр-Финиш 12.01.2015
				КонецЕсли;
				
				СписокОрганизаций.Добавить(СтрокаТабличнойЧасти.Организация);								
				
				Результат = РаботаСТорговымОборудованием.ВернутьТЗсоСпискомКассОрганизации(СтрокаТабличнойЧасти.Организация,ПолучитьСерверТО().ПолучитьКомпьютерТО()); 
				Для Каждого СтрокаКассы Из Результат Цикл
					СписокКасс.Добавить(СтрокаКассы.КассаККМ);
				КонецЦикла;	
				
			КонецЦикла;
		КонецЦикла;
		
		//30/10/2010 КА Если нет касс для закрытия, то не печатаем и не закрываем
		Если СписокКасс.Количество()=0 Тогда
			ОписаниеОшибки = НСтр("ru=' Не определены кассы для закрытия!';uk=' Не визначені каси для закриття!'") ;
			FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію.'")  + ОписаниеОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		//Костенюк Александр-Старт 19.12.2014
		// Позиции с нулевой суммой нельзя закрывать на Форму №1(фискальный/товарный чек)
		Если СуществуютПозицииСНулевойСуммой И ДокументОбъект.ОтражатьВНалоговомУчете Тогда
			ОписаниеОшибки = НСтр("ru=' Присутствуют позиции с нулевой суммой!';uk=' Присутні позиції з нульовою сумою!'");
			FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію.'")  + ОписаниеОшибки);
			Возврат Ложь;
		КонецЕсли;
		//Костенюк Александр-Финиш 19.12.2014
		
		Возврат ПроверкаОборудованияДляПечатиНаККМ(СписокОрганизаций, , ДокументОбъект.ОтражатьВНалоговомУчете);
		//ПРАВИЛЬНО: Возврат (Не ДокументОбъект.ОтражатьВНалоговомУчете) Или ПроверкаОборудованияДляПечатиНаККМ(СписокОрганизаций);
	КонецЕсли;
	
	// Документ прошел проверку.
	Возврат Истина;	
	
КонецФункции // ПроверкаККМ()

// Функция печати встречки документа.
//
// Параметры:
//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ до изменения.
//
// Возвращаемое значение:
//	Булево. Истина в случае если документ распечатан успешно;
//  Ответ - Строка. Описание ошибки в случае неудачи.
//
Функция ПечатьВстречки(Документ, Оригинал, Ответ = Неопределено) Экспорт
	
	// Получение объекта.
	ДокументОбъект = Документ;
	
	ДокументОбъект.Печать("Встречка",,,,Истина);	
	
	// Распределение по рабочим центрам.
	//Если Не Булево(ДокументОбъект.РабочиеЦентры().Количество()) Тогда
	//	Возврат Истина;
	//КонецЕсли;
	//
	//// -- Упорядочивание.
	//ДокументОбъект.РабочиеЦентры().Упорядочить();
	//
	//// -- Печать.
	//ТаблицаРабочихЦентров = ДокументОбъект.РабочиеЦентры().РабочиеЦентры(Истина); // В разрезе операции возврата.
	//Для Каждого СтрокаТаблицаРабочихЦентров Из ТаблицаРабочихЦентров Цикл
	//	
	//ДокументОбъект.ПечатьВстречки(СтрокаТаблицаРабочихЦентров.РабочийЦентр, 
	//							  ДокументОбъект.РабочиеЦентры().Отбор(СтрокаТаблицаРабочихЦентров.РабочийЦентр, , СтрокаТаблицаРабочихЦентров.Возврат),
	//							  СтрокаТаблицаРабочихЦентров.Возврат,
	//							  Ложь);
	//	
	//КонецЦикла;
	
	Возврат Истина;		
	
КонецФункции // ПечатьВстречки()

// Функция печати встречки документа повторно.
//
// Параметры:
//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ до изменения;
//	ДатаОкончанияПериода - Дата. Дата печати распечатываемой повторно встречки.
//
// Возвращаемое значение:
//	Булево. Истина в случае если документ распечатан успешно;
//  Ответ - Строка. Описание ошибки в случае неудачи.
//
Функция ПечатьВстречкиПовторно(Документ, Оригинал, ДатаОкончанияПериода, Ответ = Неопределено) Экспорт
	
	// Получение объекта.
	ДокументОбъект = Документ; ДокументОригинал = Оригинал;
	
	// Тип документа.
	ТипДокумента = ТипЗнч(ДокументОбъект); МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Проверка состояния.
	Если Не ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента("Товары", "Распечатан", МетаданныеДокумента) Тогда
		Возврат Истина;	
	КонецЕсли;
	Если Не ДокументПолучитьЗначениеНастройки(ТипДокумента, "ВыводитьВстречкуНаПечать") Тогда
		Возврат Истина;	
	КонецЕсли;
	
	// Подготовка таблиц.
	ТаблицаРелизации = ДокументОбъект.Товары.Выгрузить(Новый Массив, "ВидНоменклатуры,ДатаОкончанияПериода,ЕдиницаИзмерения,Количество,НаВынос,Номенклатура,НоменклатурнаяГруппа,ПорядокПодачи");
	ТаблицаВозврата = ТаблицаРелизации.Скопировать();
	
	// Выборка данных.
	ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить("Товары"); //Костенюк Александр-Закомментировано 18.05.2013 ТабличныеЧасти.Добавить("Услуги");
	
	// -- Реализация.
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПорядокПодачи) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (Не СтрокаТабличнойЧасти.ДатаОкончанияПериода = ДатаОкончанияПериода) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаРелизации.Добавить();
			СтрокаТаблицы.ВидНоменклатуры = СтрокаТабличнойЧасти.ВидНоменклатуры;
			СтрокаТаблицы.ДатаОкончанияПериода = СтрокаТабличнойЧасти.ДатаОкончанияПериода;
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
			СтрокаТаблицы.Количество = СтрокаТабличнойЧасти.Количество;
			СтрокаТаблицы.НаВынос = СтрокаТабличнойЧасти.НаВынос;
			СтрокаТаблицы.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
			СтрокаТаблицы.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
			СтрокаТаблицы.ПорядокПодачи = СтрокаТабличнойЧасти.ПорядокПодачи;
			
		КонецЦикла;
	КонецЦикла;
	ТаблицаРелизации.Сортировать("ПорядокПодачи,ДатаОкончанияПериода");
	
	//ПредОбъект =  ВерсионированиеОбъектов.ПолучитьПредыдущуюВерсию(Документ.Ссылка);
	//Если ПредОбъект <> Неопределено Тогда
	//	СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.ВстречкаПовторно, , ,  Документ.Комментарий );
	//	ВерсионированиеОбъектов.СоздатьЗаписьВРегистреАнализДействий(Документ.Ссылка, СтруктураДействий); 
	//КонецЕсли;
	
	// Печать.
	Возврат ПолучитьСерверFrontOffice().ПечатьВстречки(ДокументОбъект, ТаблицаРелизации, Истина, Истина, Ответ);
	
КонецФункции // ПечатьВстречкиПовторно()

// Функция печати пречека документа.
//
// Параметры:
//	Документ - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.СписаниеТоваров. Распечатываемый документ;
//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.СписаниеТоваров. Распечатываемый документ до изменения.
//
// Возвращаемое значение:
//	Булево. Истина в случае если документ распечатан успешно;
//  Ответ - Строка. Описание ошибки в случае неудачи.
//
Функция ПечатьПречека(Документ, Оригинал, Ответ = Неопределено) Экспорт
	
	// Получение объекта.
	ДокументОбъект = Документ; ДокументОригинал = Оригинал;
	
	Если ДокументОбъект.Распечатан И (Не ДокументОригинал.Распечатан) Тогда
		Если ДокументОбъект.Модуль = Перечисления.МодулиИПодсистемы.Ресторан Тогда
			ДокументОбъект.Печать("Пречек",,,,Истина);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПечатьПречека()

// Функция печати чеков ККМ документа.
//
// Параметры:
//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ до изменения.
//
// Возвращаемое значение:
//	Булево. Истина в случае если документ распечатан успешно;
//  Ответ - Строка. Описание ошибки в случае неудачи.
//
Функция ПечатьККМ(Документ, Оригинал, Ответ = Неопределено) Экспорт
	
	// Получение объекта.
	ДокументОбъект = Документ; ДокументОригинал = Оригинал;
	
	// Тип документа.
	ТипДокумента = ТипЗнч(ДокументОбъект); МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Проверка состояния.
	//Если (Не ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Или (ДокументОбъект.Оплата = ДокументОригинал.Оплата) Тогда
	Если (Не ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Или (ДокументОбъект.Проведен = ДокументОригинал.Проведен) Тогда
		Возврат Истина;	
	КонецЕсли;
	
	// Определение состояния.	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ТаблицаЧековККМРеализации") Тогда
		ТаблицаЧековККМРеализации = ДокументОбъект.ДополнительныеСвойства.ТаблицаЧековККМРеализации;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ТаблицаЧековККМВозвратов") Тогда
		ТаблицаЧековККМВозвратов = ДокументОбъект.ДополнительныеСвойства.ТаблицаЧековККМВозвратов;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	// Действие.
	// Если ЗначениеЗаполнено(ДокументОбъект.Оплата) Тогда	
	Если ДокументОбъект.Проведен Тогда
		
		// -- Реализация.
		СписокОрганизаций = Новый СписокЗначений;
		СписокКасс = Новый СписокЗначений;
		ТабличныеЧасти = Новый Массив; 
		ТабличныеЧасти.Добавить("Товары"); 
		//Костенюк Александр-Закомментировано 18.05.2013 ТабличныеЧасти.Добавить("Услуги");
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
				
				Если (Не СписокОрганизаций.НайтиПоЗначению(СтрокаТабличнойЧасти.Организация) = Неопределено) Тогда
					Продолжить;
				КонецЕсли;                                 
				
				//Заменяемый  // Игорь 09.11.2011 14:46:48
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.Заменяемый) Тогда
					СтрокаТабличнойЧасти.Номенклатура =  СтрокаТабличнойЧасти.Номенклатура.Заменяемый;
				КонецЕсли;   
				
				СписокОрганизаций.Добавить(СтрокаТабличнойЧасти.Организация);
				
				Результат = РаботаСТорговымОборудованием.ВернутьТЗсоСпискомКассОрганизации(СтрокаТабличнойЧасти.Организация,ПолучитьСерверТО().ПолучитьКомпьютерТО()); 
				Для Каждого СтрокаКассы Из Результат Цикл
					СписокКасс.Добавить(СтрокаКассы.КассаККМ);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;		
		
		// ---- Чеки ККМ.		
		Для Каждого ЗначениеСписка Из СписокКасс Цикл			
			ДокументЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
			ДокументЧекККМ.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
			ДокументЧекККМ.Заполнить(Новый Структура("Основание,КассаККМ", ДокументОбъект.Ссылка,ЗначениеСписка.Значение));
			Если Не ПолучитьСерверFrontOffice().ПечатьККМ(ДокументОбъект, ДокументЧекККМ, Ответ) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// -- Возврат.
		//TODO
		//СписокОрганизаций = Новый СписокЗначений;
		//ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить("Товары"); ТабличныеЧасти.Добавить("Услуги");
		//
		//Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		//	Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
		//		
		//		Если (Не СписокОрганизаций.НайтиПоЗначению(СтрокаТабличнойЧасти.Организация) = Неопределено) Тогда
		//			Продолжить;
		//		КонецЕсли;
		//		
		//		//Если (ТаблицаЧековККМВозвратов.Найти(СтрокаТабличнойЧасти.Организация, "Организация") = Неопределено) Тогда
		//		Если (ТаблицаЧековККМРеализации.Найти(СтрокаТабличнойЧасти.Организация, "Организация") = Неопределено) Тогда
		//			Ответ = "Невозможно записать документ, для организации «" + ПолучитьСерверFrontOffice().ПолучитьПредставление(СтрокаТабличнойЧасти.Организация) + "» не наден соответсвующий документ «" + Метаданные.Документы.ЧекККМ.Синоним + "» на возврат!";
		//			Возврат Ложь;
		//		КонецЕсли;
		//		
		//		СписокОрганизаций.Добавить(СтрокаТабличнойЧасти.Организация);
		//		
		//	КонецЦикла;
		//КонецЦикла;
		////Если (Не СписокОрганизаций.Количество() = ТаблицаЧековККМВозвратов.Количество()) Тогда
		//Если (Не СписокОрганизаций.Количество() = ТаблицаЧековККМРеализации.Количество()) Тогда
		//	Ответ = "Невозможно записать документ, количество актуальный документов «" + Метаданные.Документы.ЧекККМ.Синоним + "» на возврат, не соответсвует требуемому!";
		//	Возврат Ложь;
		//КонецЕсли;
		
		СписокКассККМ = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ТаблицаЧековККМРеализации Цикл
			СписокКассККМ.Добавить(СтрокаТаблицы.КассаККМ);
		КонецЦикла;
		
		Если  ПроверкаОборудованияДляПечатиНаККМ(, СписокКассККМ, ДокументОбъект.ОтражатьВНалоговомУчете) Тогда
			// ---- Чеки ККМ.
			Для Каждого СтрокаТаблицы Из ТаблицаЧековККМРеализации Цикл				
				ДокументЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
				ДокументЧекККМ.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
				ДокументЧекККМ.Заполнить(СтрокаТаблицы.Ссылка);
				//Ковтун А. 18/05/2010 Если чек по которому возвращаем не был пробит на ККМ,
				//то и мы и возврат не пробиваем
				Если Не ПолучитьСерверFrontOffice().ПечатьККМ(ДокументОбъект, ДокументЧекККМ, Ответ, СтрокаТаблицы.Ссылка.ЧекПробитНаККМ) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Операция успешно завершена.
	Возврат Истина;	
	
КонецФункции // ПечатьККМ()

Функция ДокументПолучитьЗначениеНастройки(Документ, ТребуемаяНастройка, НастройкаНеНайдена = Ложь) Экспорт
	
	// Нормализация.
	Если (ТипЗнч(Документ) = мТипТипа) Тогда
		ТипДокумента = Документ;
	Иначе
		ТипДокумента = ТипЗнч(Документ.Ссылка);
	КонецЕсли;
	
	// Сопоставление.
	Если (ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Или (ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Тогда
		Попытка
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "Заказов"];	
		Исключение
			Попытка
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "Заказа"];	
			Исключение
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка];	
			КонецПопытки;
		КонецПопытки;
	ИначеЕсли (ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров")) Или (ТипДокумента = Тип("ДокументОбъект.СписаниеТоваров")) Тогда
		Попытка
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "Списаний"];	
		Исключение
			Попытка
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "Списания"];	
			Исключение
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка];	
			КонецПопытки;
		КонецПопытки;
	//Костенюк Александр-Старт 09.08.2012
	ИначеЕсли (ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Или (ТипДокумента = Тип("ДокументОбъект.ОтчетПроизводстваЗаСмену")) Тогда
		Попытка
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "ОтчетовПроизводства"];	
		Исключение
			Попытка
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "ОтчетаПроизводства"];	
			Исключение
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка];	
			КонецПопытки;
		КонецПопытки;
	//Костенюк Александр-Финиш 09.08.2012
	КонецЕсли;
	
	// Сопоставление не выполнено.
	Если (Настройка = Неопределено) Тогда
		НастройкаНеНайдена = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Результат.
	НастройкаНеНайдена = Ложь;
	ЗначениеВозврата = УправлениеПользователями.ПолучитьЗначениеНастройки(Настройка);		
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ДокументПолучитьЗначениеПрава(Документ, ТребуемыеПолномочия, ПолномочиеНеНайдено = Ложь) Экспорт
	
	// Нормализация.
	Если (ТипЗнч(Документ) = мТипТипа) Тогда
		ТипДокумента = Документ;
	Иначе
		ТипДокумента = ТипЗнч(Документ.Ссылка);
	КонецЕсли;
	
	// Сопоставление.
	Если (ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Или (ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг"))  Тогда
		Попытка
			Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "Заказов"];	
		Исключение
			Попытка
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "Заказа"];	
			Исключение
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия];	
			КонецПопытки;
		КонецПопытки;
	ИначеЕсли (ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров")) Или (ТипДокумента = Тип("ДокументОбъект.СписаниеТоваров")) Тогда
		Попытка
			Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "Списаний"];	
		Исключение
			Попытка
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "Списания"];	
			Исключение
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия];	
			КонецПопытки;
		КонецПопытки;
	//Костенюк Александр-Старт 09.08.2012
	ИначеЕсли (ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Или (ТипДокумента = Тип("ДокументОбъект.ОтчетПроизводстваЗаСмену")) Тогда
		Попытка
			Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "ОтчетовПроизводства"];	
		Исключение
			Попытка
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "ОтчетаПроизводства"];	
			Исключение
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия];	
			КонецПопытки;
		КонецПопытки;
	//Костенюк Александр-Финиш 09.08.2012
	КонецЕсли;
	
	// Сопоставление не выполнено.
	Если (Полномочие = Неопределено) Тогда
		ПолномочиеНеНайдено = Истина; 
		Возврат Неопределено;
	КонецЕсли;
	
	// Результат.
	ПолномочиеНеНайдено = Ложь;
	Возврат УправлениеПользователями.ПолучитьЗначениеПрава(Полномочие);
	
КонецФункции

Функция ДокументДоступностьДействия(Документ, ТребуемыеПолномочия) Экспорт
	
	// Нормализация.
	Если (ТипЗнч(ТребуемыеПолномочия) = мТипСтроки) Тогда
		ЗначениеПрава = ДокументПолучитьЗначениеПрава(Документ, ТребуемыеПолномочия); 
	Иначе
		ЗначениеПрава = УправлениеПользователями.ПолучитьЗначениеПрава(ТребуемыеПолномочия);
	КонецЕсли;
	
	Если (Документ = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Изменение состава
	
	Если (ТипЗнч(ЗначениеПрава) = Тип("ПеречислениеСсылка.ПраваДоступаПользователей")) Тогда
		
		Если ЗначениеПрава = Перечисления.ПраваДоступаПользователей.Привилегированные Тогда
			Возврат Истина;
		ИначеЕсли  ЗначениеПрава = Перечисления.ПраваДоступаПользователей.Разрешить  Тогда 	
			Возврат Документ.Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
		Иначе 
			Возврат Ложь;
		КонецЕсли;
	Иначе	
		
		Возврат ЗначениеПрава;
		
	КонецЕсли;
	
КонецФункции

Функция ДокументДоступностьОбщая(Документ,  ТолькоПросмотр = Неопределено, Форма = Неопределено ) Экспорт
	
	// Доступность.
	//Если (Документ = Неопределено) Или Документ.Ссылка.Пустая() Тогда
	Если (Документ = Неопределено) Тогда
		ТолькоПросмотр = Ложь;
		Возврат Ложь;
	КонецЕсли;
	ТолькоПросмотр = Не Документ.Ссылка.Пустая();
	
	Редактирование = ДокументДоступностьДействия(Документ, "Изменение"); 
	ТолькоПросмотр = (Не Редактирование) И ДокументДоступностьДействия(Документ, "Просмотр");
	
	
	Если Редактирование Тогда
		ТолькоПросмотр = не Редактирование;
		Возврат  Редактирование;			
	Иначе 		
		Возврат (Не ТолькоПросмотр = Ложь);
	КонецЕсли;
	
КонецФункции // ДокументДоступность()

// Функция проверки корректности заполнения документа.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Документ который требуется проверить.
//
// Возвращаемое значение:
//	Булево. Истина в случае если документ прошел проверку.
//
Функция ДокументПроверить(Документ) Экспорт
	
	// TODO: Проверка корректности документа.
	
	Возврат Истина;
	
КонецФункции	

// Функция создает требуемый документ переданного типа (интерфейсная).
//
// Параметры:
//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Тип документа который требуется создать;
//	ДокументОснование - ПеречислениеСсылка.МодулиИПодсистемы, ДокументСсылка.РеализацияТоваровУслуг, СправочникСсылка.ИнформационныеКарты. Основание создания документа;
//	ТаблицаПереноса - ТаблицаЗначений. Список переносимых позицый и их количество.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументСоздатьУдалить(Документ, ДокументОснование, ТаблицаПереноса = Неопределено) Экспорт
	
	Перем ТолькоПросмотр;
	
	// Права доступа.
	Если Не ДокументПолучитьЗначениеПрава(Документ, "Создание") Тогда
		FrontOffice.НедостаточноПрав(НСтр("ru='для создания нового документа';uk='для створення нового документа'") );
		Возврат Ложь;
	КонецЕсли;
	
	// Определение типов объектов.
	ТипДокументаРеализацияТоваровУслуг = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг,ДокументОбъект.РеализацияТоваровУслуг");
	ТипДокумента = ТипЗнч(Документ); Если (Не ДокументОснование = Неопределено) Тогда ТипОснования = ТипЗнч(ДокументОснование); КонецЕсли;
	МетаданныеДокумента = Документ.Метаданные(); Если (Не ДокументОснование = Неопределено) Тогда МетаданныеОснования = ДокументОснование.Метаданные(); КонецЕсли;
	ОснованиеДокумент = Метаданные.Документы.Содержит(МетаданныеОснования);
	
	//// Проверка основания (I).
	//Если ОснованиеДокумент И (Не ДокументПроверить(ДокументОснование)) Тогда
	//	FrontOffice.ВывестиОшибку("Невозможно создать документ. Содержимое документа основания не является корректным.");
	//	Возврат Ложь;
	//КонецЕсли;
	
	// Ввод параметров.
	
	// -- Модуль.
	Если Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
		Модуль = ДокументОснование.Модуль;
	Иначе
		Если (ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ИнформационныеКарты")) Тогда
			Модуль = Перечисления.МодулиИПодсистемы.Ресторан;
		Иначе
			Если (ТипЗнч(ДокументОснование) = Тип("ПеречислениеСсылка.МодулиИПодсистемы")) Тогда
				Модуль = ДокументОснование;
			Иначе
				FrontOffice.ОперацияНеВыполнена(НСтр("ru='Не указан модуль документа.';uk='Не вказано модуль документа.'") );
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//// Проверка основания (II).
	//Если (Не ДокументОснование = Неопределено) И Метаданные.Документы.Содержит(МетаданныеОснования) И (Не ДокументОснование.Модуль = Модуль) Тогда
	//	FrontOffice.ВывестиОшибку("Невозможно создать документ. Содержимое документа основания не является корректным.");
	//	Возврат Ложь;
	//КонецЕсли;
	
	// -- Дисконтная карта.
	// TODO: Выбор дисконтной карты.
	
	// -- Номер стола.
	Комната = Неопределено;
	Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Стол", МетаданныеДокумента) Тогда
			Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Стол", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.Стол)) Тогда
				Стол = ДокументОснование.Стол;
			Иначе
				Стол = ДокументПолучитьЗначениеНастройки(Документ, "НомерСтолаПоУмолчанию");
			КонецЕсли;
			Если ДокументПолучитьЗначениеНастройки(Документ, "ВводНомераСтола") Тогда 
				Если Не ВыборСтола(Стол) Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Стол) Тогда
					FrontOffice.ОперацияНеВыполнена(НСтр("ru='Не указан стол документа.';uk='Не вказано стіл документа'") );
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Чистяков Павел 02.12.2011 16:12:49 
		Если НЕ ВыборКомнаты(Комната) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// -- Контрагент.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
			Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.Контрагент)) Тогда
				Контрагент = ДокументОснование.Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// -- Категория контрагента.
	КатегорияКонтрагента = Неопределено; //Костенюк Александр 19.02.2013
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКонтрагента", МетаданныеДокумента) Тогда
		Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКлиентов", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.КатегорияКлиентов)) Тогда
			КатегорияКонтрагента = ДокументОснование.КатегорияКонтрагента;
		Иначе
			КатегорияКонтрагента = ДокументПолучитьЗначениеНастройки(Документ, "КатегорияКонтрагентаПоУмолчанию");
		КонецЕсли;
		Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Тогда
			Если ДокументПолучитьЗначениеНастройки(Документ, "ВводКатегорииКонтрагента") Тогда
				Если Не ВыборКатегорииКонтрагента(КатегорияКонтрагента) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// -- Адрес и телефоны.
	// TODO: Адрес и телефоны.
	
	// -- Количество клиентов.
	Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Тогда
		Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("КоличествоКлиентов", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.КоличествоКлиентов)) Тогда
			КоличествоКлиентов = ДокументОснование.КоличествоКлиентов;
		Иначе
			// Чистяков Павел 09.12.2011 12:53:00 
			КоличествоКлиентов = 1;
		КонецЕсли;
		Если Стол.ТипСтола.КоличествоКлиентов
			И ДокументПолучитьЗначениеНастройки(Документ, "ВводКоличетсваКлиентов") Тогда
			Если Не ВводКоличестваКлиентов(КоличествоКлиентов, Стол.ТипСтола.МаксимальноеКоличествоКлиентов) Тогда
				Возврат Ложь;
			КонецЕсли;
			// ---- Документ основание.
			Если ТипДокументаРеализацияТоваровУслуг.СодержитТип(ТипОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.КоличествоКлиентов)) Тогда
				Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Уменьшить количество клиентов в документе основании?';uk='Зменшити кількість клієнтів у домкументі підставі?'") , РежимДиалогаВопрос.ДаНетОтмена);
				Если (Результат = КодВозвратаДиалога.Да) Тогда
					ДокументОснованиеКоличествоКлиентов = Макс(ДокументОснование.КоличествоКлиентов - КоличествоКлиентов, 1);
				ИначеЕсли Не КодВозвратаДиалога.Нет Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КоличествоКлиентов = Число(Истина);	
	КонецЕсли;
	
	// -- Категория документа.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеДокумента) Тогда
		Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.КатегорияДокумента)) Тогда
			КатегорияДокумента = ДокументОснование.КатегорияДокумента;
		Иначе
			КатегорияДокумента = ДокументПолучитьЗначениеНастройки(Документ, "КатегорияДокументаПоУмолчанию");
		КонецЕсли;
		Если ДокументПолучитьЗначениеНастройки(Документ, "ВводКатегорииДокумента") Тогда
			Если Не ВыборКатегорииДокумента(КатегорияДокумента) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// -- Ответственный.
	// TODO: Перенести в заполнение.
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	
	// -- Ресторан.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеДокумента) Тогда
		Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.Ресторан)) Тогда
			Ресторан = ДокументОснование.Ресторан;
		Иначе
			Ресторан = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойРесторан);
		КонецЕсли;
		Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Тогда
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Ресторан) Тогда
				FrontOffice.ОперацияНеВыполнена("Не указан ресторан документа.");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// -- Сотрудник.
	// TODO: Перенести в заполнение.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеДокумента) Тогда
		Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.Сотрудник)) Тогда
			Сотрудник = ДокументОснование.Сотрудник;
		Иначе
			Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли;
	КонецЕсли;
	
	// -- Сделка.
	// TODO: Перенести в заполнение.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		Если ТипДокументаРеализацияТоваровУслуг.СодержитТип(ТипОснования) Тогда 
			Сделка = ДокументОснование.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	// Создание объекта и модификация основания.
	Попытка
		//Если Не ПолучитьСерверFrontOffice().ДокументОткрыть(Неопределено) Тогда // НачатьТранзакцию()
		//	Возврат Ложь;
		//КонецЕсли;
		
		// -- Документ.
		
		// ---- Создание.
		ДокументОбъект = Документ;
		// Формат Эксперт - SD  31.08.2011 - перенос ядра 
		//Если Не ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект) Тогда
		Если Не РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, Неопределено) Тогда
			//ДокументЗакрыть(Неопределено); // ОтменитьТранзакцию()
			Возврат Ложь;
		КонецЕсли;
		
		// ---- Шапка.
		ДокументОбъект.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
		ДокументОбъект.Модуль = Модуль;
		ДокументОбъект.Ответственный = Ответственный; // TODO: Перенести в заполнение.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда // TODO: Перенести в заполнение.
			ДокументОбъект.Сделка = Сделка;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеДокумента) Тогда
			ДокументОбъект.Ресторан = Ресторан;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеДокумента) Тогда
			ДокументОбъект.Сотрудник = Сотрудник;
		КонецЕсли;
		// TODO: Дисконтная карта.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Стол", МетаданныеДокумента) Тогда
			ДокументОбъект.Стол = Стол;
		КонецЕсли;
		//Костенюк Александр-Старт 11.04.2012
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПостфиксСтола", МетаданныеДокумента) Тогда
			ДокументОбъект.ПостфиксСтола = ДокументОбъект.ПолчитьОчереднойПостфиксСтола();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПолныйНомерСтола", МетаданныеДокумента) Тогда
			ДокументОбъект.ПолныйНомерСтола = ДокументОбъект.ПолчитьПолныйНомерСтола();
		КонецЕсли;
		//Костенюк Александр-Финиш 11.04.2012
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
			ДокументОбъект.Контрагент = Контрагент;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКонтрагента", МетаданныеДокумента) Тогда
			ДокументОбъект.КатегорияКонтрагента = КатегорияКонтрагента;
		КонецЕсли;
		// TODO: Адрес и телефоны.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КоличествоКлиентов", МетаданныеДокумента) Тогда
			ДокументОбъект.КоличествоКлиентов = КоличествоКлиентов;
		КонецЕсли;
		
		// Чистяков Павел 02.12.2011 16:13:38 
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Комната", МетаданныеДокумента) Тогда
			ДокументОбъект.Комната = Комната;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.КатегорияДокумента = КатегорияДокумента;
		КонецЕсли;
		
		// ---- Шапка + МнЧ.
		Если (Не ДокументОснование = Неопределено) И Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
			ДокументОбъект.Заполнить(ДокументОснование, ТаблицаПереноса);
		Иначе
			ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли;
		
		//Костенюк Александр-Старт 23.05.2012
		ПрименитьАкции(ДокументОбъект, Перечисления.УсловияАкции.ПриСозданииЗаказа);
		//Костенюк Александр-Финиш 23.05.2012
		
		// -- Запись.
		//Если Не ДокументЗаписать(ДокументОбъект) Тогда
		//	ДокументЗакрыть(Неопределено); // ОтменитьТранзакцию()
		//	Возврат Ложь;
		//КонецЕсли;
		//
		//
		//// -- ДокументОснование.
		//Если ОснованиеДокумент Тогда
		//	// ---- Шапка.
		//	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КоличествоКлиентов", МетаданныеОснования) И (Не ДокументОснованиеКоличествоКлиентов = Неопределено) Тогда
		//		ДокументОснование.КоличествоКлиентов = ДокументОснованиеКоличествоКлиентов;
		//	КонецЕсли;
		//	
		//	// ---- МнЧ
		//	// TODO: Перенос.
		//	
		//	Если Не ДокументЗаписать(ДокументОснование) Тогда
		//		ДокументЗакрыть(Неопределено); // ОтменитьТранзакцию()
		//		Возврат Ложь;
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если Не ДокументЗаписать(Неопределено) Тогда // ЗафиксироватьТранзакцию()
		//	ДокументЗакрыть(Неопределено); // ОтменитьТранзакцию()
		//	Возврат Ложь;
		//КонецЕсли;
	Исключение
		// Формат Эксперт - SD  31.08.2011 - перенос ядра 
		//ДокументЗакрыть(Неопределено); // ОтменитьТранзакцию()
		РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено);
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно создать документ.';uk='Неможливо створити документ'")  + ОписаниеОшибки() + ".");
		Возврат Ложь;
	КонецПопытки;
	
	
	// Права доступа.
	//Если (Не ДокументДоступность(ДокументОбъект, ТолькоПросмотр)) И (Не ТолькоПросмотр) Тогда
	//	// -- Возможно у нас нет прав для дальнейшего редактирования документа, но документ то мы создали ;)
	//	Возврат Истина;
	//КонецЕсли;                                                       
	
	
	// Отрктие объекта.
	Если (Не ДокументОснование = Неопределено) И Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ДокументОткрыть(ДокументОбъект);
	
КонецФункции // ДокументСоздать()	


// Функция открывает и блокирует требуемый документ (интерфейсная).
//
// Параметры:
//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Документ который требуется открыть, если не указан буедт создан новый документ переданного типа.
//	ДокументОснование - ПеречислениеСсылка.МодулиИПодсистемы, ДокументСсылка.РеализацияТоваровУслуг, СправочникСсылка.ИнформационныеКарты. Основание создания документа, в случае если будет создаваться новый документ;
//	ТаблицаПереноса - ТаблицаЗначений. Список переносимых позицый и их количество, в случае если будет создаваться новый документ.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументОткрыть(Документ, ДокументОснование = Неопределено, ТаблицаПереноса = Неопределено) Экспорт
	
	Перем ТолькоПросмотр;
	
	// Нормализация.
	
	// Создаем новый документ.
	Если (Не Метаданные.НайтиПоТипу(ТипЗнч(Документ)) = Неопределено) И (Документ = Документ.Ссылка) И Документ.Ссылка.Пустая() Тогда
		Возврат ДокументСоздать(Документ.Ссылка, ДокументОснование, ТаблицаПереноса);
	КонецЕсли;
	
	// Права доступа.
	Если (Не ДокументДоступностьОбщая(Документ, ТолькоПросмотр)) И (Не ТолькоПросмотр) Тогда
		FrontOffice.ВывестиОшибку(НСтр("ru='Недостаточно прав доступа для просмотра данного документа!';uk='Недостатньо прав для перегляду документа!'") );
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка.
	Если (Метаданные.НайтиПоТипу(ТипЗнч(Документ)) = Неопределено) Или (Документ = Документ.Ссылка) Тогда
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документ;
	КонецЕсли;
	
	//Если Не ДокументПроверить(Документ) Тогда
	//	FrontOffice.ВывестиПредупреждение(НСтр("ru='Невозможно открыть документ. Содержимое документа не является корректным.';uk='Неможливо відкрити документ. Вміст документу не є коректним.'") );
	//	Возврат Ложь;
	//КонецЕсли;
	
	// Получение и блокирование объекта.
	ПроверкаОткрытия =  ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект, ТолькоПросмотр, Истина);			
	
	Если ПроверкаОткрытия Тогда
		// Чистяков Павел 01.03.2012 15:06:49 Только объекты которые имеют ссылку
		// и НЕ НОВЫЕ (так как сбивается порядок в сомнительных операциях и пользователия недоумевают)
		//ВерсионированиеОбъектов.АнализДействиеЗаказДоЗаказ(ДокументОбъект, , Перечисления.ДействиеНадЗаказами.Открыт);
		Если НЕ ДокументОбъект.ЭтоНовый() Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Открыт,
				ДокументОбъект.Ссылка);
		КонецЕсли; 
	КонецЕсли;
	
	// Мирошниченоко Игорь 22.12.2011 11:58:36
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		// Александр Переверзев 03.03.2012 15:47:19 
		//Форма = Обработки.FrontOfficeМенеджерДокументаСписаний.ПолучитьФорму("Форма"); 
		//Форма.ДокументОбъект = ДокументОбъект;
		//Форма.ТолькоПросмотр = ТолькоПросмотр;
		//ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		Возврат ПолучитьСерверFrontOffice().МенеджерДокументаСписаний.ДокументОткрыть(Документ);
	Иначе
		Форма.ДокументОбъект = ДокументОбъект;
		Форма.ТолькоПросмотр = ТолькоПросмотр;	
		// Открытие формы.
		ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
	КонецЕсли;
	
	// Установка значений.
	Возврат Истина;
	
КонецФункции // ДокументОткрыть()

// Функция cчитывает данные из базы данных.
//
// Параметры:
//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументПрочитать(Документ) Экспорт
	
	// Выборка данных.
	Возврат ПолучитьСерверFrontOffice().ДокументПрочитать(Документ);
	
КонецФункции // ДокументПрочитать()

//Функция ДокументЗаписать(Документ, РежимЗаписи = Неопределено) Экспорт
//Костенюк Александр-Старт 17.05.2012
Функция ДокументЗаписать(Документ, РежимЗаписи = Неопределено, ТабличноеПолеЗаказа = Неопределено, ПечататьПречек = Истина) Экспорт
//Костенюк Александр-Финиш 17.05.2012
	
	Если Документ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
					
	//Если НЕ ПодготовитьДокументКЗаписи(Документ,РежимЗаписи) Тогда
	//Костенюк Александр-Старт 07.08.2012
	ТаблицаБлюдБезГруппыПечати = Новый ТаблицаЗначений;
	Если НЕ ПодготовитьДокументКЗаписи(Документ, РежимЗаписи, ТабличноеПолеЗаказа) Тогда
	//Костенюк Александр-Финиш 07.08.2012
		Возврат Ложь;
	КонецЕсли;
	
	//Костенюк Александр-Старт 25.04.2012
	// Выведем пользователю перечень блюд, для которых не назначены группы печати
	// т.е. они будут пропущены при печати
	Если НЕ ТаблицаБлюдБезГруппыПечати.Количество() = 0 Тогда
		// Выбор.
		ПараметрЗакрытия = Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(, НСтр("ru='Перечень блюд без группы печати';uk='Перелік страв без групи друку'") , ТаблицаБлюдБезГруппыПечати, "Наименование");
	КонецЕсли;
	//Костенюк Александр-Финиш 25.04.2012
	
	////Костенюк Александр-Закомментировано 19.09.2012
	//// Нет необходимости делать это здесь, весь алгоритм изменен и перенесен в модуль объекта докмента
	//Дисконтная = Документ.ДисконтнаяКарта;
	//ПродолжитьРаботу = Истина;

	//Запрос = Новый Запрос;
	//Если Дисконтная.ВидДисконтнойКарты.ТипМонетарности  = Перечисления.ТипыМонетарности.ДепозитнаяДисконтнаяКарта Тогда
	//	Запрос.УстановитьПараметр("ПризнакДисконта", Дисконтная);
	//ИначеЕсли Дисконтная.ВидДисконтнойКарты.ТипМонетарности  = Перечисления.ТипыМонетарности.ДепозитнаяКонтрагент Тогда
	//	Запрос.УстановитьПараметр("ПризнакДисконта", Дисконтная.ВладелецКарты);
	//Иначе
	//	//ОбщегоНазначенияСервер.ПоискВСтруктуре(Документ.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", Неопределено);стиПредупреждение(НСтр("ru='Для дисконтной карты не установлен ""ТипыМонетарности""!';uk='Для дисконтної карти не встановлений ""ТипыМонетарности""!'"));
	//	//Возврат Истина;
	//	ПродолжитьРаботу = Ложь;
	//	Запрос = Неопределено;
	//	ОбщегоНазначенияСервер.ПоискВСтруктуре(Документ.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", Неопределено);
	//КонецЕсли; 	
	//
	////Если Запрос.параметры.ПризнакДисконта = Неопределено Тогда
	////	FrontOffice.ВывестиПредупреждение(НСтр("ru='Проверте правильность заполнения реквизита ""ТипыМонетарности"" у дисконтной карты "+ Дисконтная.ВидДисконтнойКарт + " !';uk='Проверте правильність заповнення реквізиту "" ТипыМонетарности"" у дисконтної карти "+ Дисконтная.ВидДисконтнойКарт + "!'"));
	////	Возврат Истина;
	////КонецЕсли;
	//
	//Если ПродолжитьРаботу Тогда
	//	ДокументТовары = Документ.ДополнительныеСвойства.Позиции.Скопировать();	
	//	
	//	Запрос.УстановитьПараметр("МоментВремени", Документ.МоментВремени());
	//	Запрос.УстановитьПараметр("РеализацияТовары", ДокументТовары);		  
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	//	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	//	|	РеализацияТоваровУслугТовары.СуммаБезСкидок КАК СуммаБезСкидок
	//	|ПОМЕСТИТЬ Товары
	//	|ИЗ
	//	|	&РеализацияТовары КАК РеализацияТоваровУслугТовары
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СУММА(Товары.Сумма) КАК СуммаРасход
	//	|ПОМЕСТИТЬ СуммаТоварыРасход
	//	|ИЗ
	//	|	Товары КАК Товары
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпНоменклатура
	//	|		ПО Товары.Номенклатура = СпНоменклатура.Ссылка
	//	|ГДЕ
	//	|	СпНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СУММА(Товары.СуммаБезСкидок) КАК СуммаПриход
	//	|ПОМЕСТИТЬ СуммаТоварыПриход
	//	|ИЗ
	//	|	Товары КАК Товары
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпНоменклатура
	//	|		ПО Товары.Номенклатура = СпНоменклатура.Ссылка
	//	|ГДЕ
	//	|	СпНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ОстаткиНаКарточке.СуммаОстаток КАК СуммаОстаток,
	//	|	ЕСТЬNULL(СуммаТоварыРасход.СуммаРасход, 0) КАК СуммаРасход,
	//	|	ЕСТЬNULL(СуммаТоварыПриход.СуммаПриход, 0) КАК СуммаПриход,
	//	|	&ПризнакДисконта КАК ПризнакДисконта
	//	|ИЗ
	//	|	РегистрНакопления.ДенежныеСредстваДисконтныхКарт.Остатки(&МоментВремени, ПризнакДисконта = &ПризнакДисконта) КАК ОстаткиНаКарточке
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаТоварыРасход КАК СуммаТоварыРасход
	//	|		ПО (ИСТИНА)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаТоварыПриход КАК СуммаТоварыПриход
	//	|		ПО (ИСТИНА)";	  
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Выборка = РезультатЗапроса.Выбрать();
	//	
	//	Если Выборка.Следующий() Тогда		
	//		Если Выборка.СуммаПриход > 0 и Выборка.СуммаРасход  > 0 Тогда
	//			FrontOffice.ВывестиПредупреждение(НСтр("ru='По данному виду оплаты в табличный части документа "+Символы.ПС +" не должно быть номенклатуры с типом ""Депозит""!';uk='По цьому виду оплати у табличний частині документа "+Символы.ПС +" не повинно бути номенклатури з типом ""Депозіт""!'"));
	//			Возврат Истина;	
	//		ИначеЕсли Выборка.СуммаПриход > 0 тогда 
	//			ОбщегоНазначенияСервер.ПоискВСтруктуре(Документ.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", РезультатЗапроса.Выгрузить());
	//		ИначеЕсли Выборка.СуммаРасход > 0 тогда
	//			Если Дисконтная.ВидДисконтнойКарты.Оплата = Документ.Оплата Тогда	
	//				Если Выборка.СуммаРасход  > Выборка.СуммаОстаток Тогда
	//					//FrontOffice.ВывестиПредупреждение(НСтр("ru='Сумма остатка по дисконтной карты "+ Выборка.СуммаОстаток +" превышает сумму к оплате "+Выборка.РеализацияСумма +" !';uk='Сума залишку по дисконтної карти "+ Выборка.СуммаОстаток +" перевищує суму до оплати "+Выборка.РеализацияСумма +" !'"));
	//					//Костенюк Александр-Старт 17.07.2012
	//					FrontOffice.ВывестиПредупреждение(НСтр("ru='Сумма остатка по дисконтной карте " + Выборка.СуммаОстаток + " превышает сумму к оплате " + Выборка.СуммаРасход + " !';uk='Сума залишку по дисконтної карті " + Выборка.СуммаОстаток + " перевищує суму до оплати " + Выборка.СуммаРасход + " !'"));
	//					//Костенюк Александр-Финиш 17.07.2012
	//					Возврат Истина;	
	//				Иначе
	//					ОбщегоНазначенияСервер.ПоискВСтруктуре(Документ.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", РезультатЗапроса.Выгрузить());	
	//				КонецЕсли;
	//			Иначе 
	//				ОбщегоНазначенияСервер.ПоискВСтруктуре(Документ.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", Неопределено);
	//			КонецЕсли;	
	//		ИначеЕсли Выборка.СуммаПриход = 0 и Выборка.СуммаРасход  = 0 Тогда
	//			ОбщегоНазначенияСервер.ПоискВСтруктуре(Документ.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", Неопределено);	
	//		КонецЕсли;				  
	//	КонецЕсли;
	//КонецЕсли;
	//
	////Костенюк Александр-Старт 20.07.2012
	//// Депозиты
	//РасчетДепозитнойКартой = Ложь;
	//Если Дисконтная.ВидДисконтнойКарты.Оплата = Документ.Оплата Тогда
	//	РасчетДепозитнойКартой = Истина;
	//КонецЕсли;
	//ЭтоСкидка 			= ОпределитьТипДепозита(Документ);
	//РезультатЗапроса 	= СформироватьЗапросПоДепозитам(Документ, Дисконтная, ЭтоСкидка, РасчетДепозитнойКартой);
	//Если РезультатЗапроса <> Неопределено Тогда
	//	ОбщегоНазначенияСервер.ПоискВСтруктуре(Документ.ДополнительныеСвойства, "ТаблицаДвиженияДисконтныхКарт", РезультатЗапроса.Выгрузить());	
	//КонецЕсли;
	////Костенюк Александр-Финиш 20.07.2012
	////Костенюк Александр-Закомментировано 19.09.2012
	
	//Костенюк Александр-Старт 23.05.2012
	// При печати пречека применяем акции
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПрименитьАкции(Документ, Перечисления.УсловияАкции.ПриЗакрытииЗаказа, Истина, ТабличноеПолеЗаказа);
	КонецЕсли;
	//Костенюк Александр-Финиш 23.05.2012
	
	Документ.Записать(РежимЗаписи);
	
	//Возврат ОтложеннаяПечатьРеализации(Документ);
	
	ТаблицаБлюдБезГруппыПечати = Неопределено;
	
	Возврат ОтложеннаяПечатьРеализации(Документ, , , ПечататьПречек); //Костенюк Александр 24.09.2012
	
КонецФункции

Функция ДокументПеренести(Документ, ДокументОснование = Неопределено, ТаблицаПереноса = Неопределено) Экспорт
	
	Возврат Ложь;
	
КонецФункции // ДокументПеренести()	

// Функция закрывает без записи и разблокирует требуемый документ.
//
// Параметры:
//	Документ - ДокументОбъект. Документ который требуется закрыть.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументЗакрыть(Документ) Экспорт
	// Формат Эксперт - SD  31.08.2011 - перенос ядра 
	// Закрытие объекта.
	//Возврат ПолучитьСерверFrontOffice().ДокументЗакрыть(Документ);  
	//Если ЗаполнитьДополнительныеСвойства(Документ) Тогда
	//	ТаблицаДействиеНадЗаказами = Неопределено;
	//	Документ.ДополнительныеСвойства.Свойство("ДействиеНадЗаказами", ТаблицаДействиеНадЗаказами);
	//	УправлениеРеализациямиТоваровУслуг.ЗаполнитьСтруктуруАнализаДействий(ТаблицаДействиеНадЗаказами, Перечисления.ДействиеНадЗаказами.Закрыт , ТекущаяДата(), глЗначениеПеременной("глТекущийПользователь").Сотрудник);					
	//КонецЕсли;
	
	// Чистяков Павел 01.03.2012 15:13:31 
	//Анализ Действий
	// Игорь 24.10.2011 17:15:04
	//ВерсионированиеОбъектов.АнализДействиеЗаказДоЗаказ(Документ, , Перечисления.ДействиеНадЗаказами.Закрыт);
	Если Документ<>Неопределено
		И Документ<>NULL Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Закрыт,
			Документ.Ссылка,"");
	КонецЕсли; 
	
	Возврат РаботаСДиалогами.ДокументЗакрыть(Документ, Неопределено);	
	
КонецФункции // ДокументЗакрыть()

// Чистяков Павел 28.07.2011 16:48:46 
Процедура ПоискНоменклатурыВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:48:48 
Процедура ПоискНоменклатурыПриИзмененииДанных(Элемент) Экспорт
	
	ТабличноеПоле = Элемент; 
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:50:03 
Процедура ПоискНоменклатурыПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	Если Не ПустаяСтрока(Значение) Тогда
		
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 25
		//|	Меню.ЭтоГруппа КАК ЭтоГруппа,
		//|	Меню.Номенклатура КАК Номенклатура,
		//|	НоменклатураМеню.Код КАК Код,
		////|	ПРЕДСТАВЛЕНИЕ(Меню.Номенклатура) КАК Наименование,
		////Костенюк Александр-Старт 07.05.2012
		//|	ПРЕДСТАВЛЕНИЕ(Меню.Ссылка) КАК Наименование,
		////Костенюк Александр-Финиш 07.05.2012
		//|	НоменклатураМеню.Артикул КАК Артикул,
		//|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//|	НоменклатураМеню.НоменклатурнаяГруппа,
		//|	НоменклатураМеню.Организация,
		//|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		//|	НоменклатураМеню.СтавкаНДС,
		//|	НоменклатураМеню.Услуга,
		//|	НоменклатураМеню.Цена,
		//|	0 КАК ПорядокПодачи
		//|ИЗ
		//|	Справочник.Меню КАК Меню
		////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню //Костенюк Александр 27.04.2015
		//|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
		//|ГДЕ
		//|	ВЫБОР
		//|			КОГДА Меню.ЭтоГруппа
		////|				ТОГДА Меню.Номенклатура ПОДОБНО &Значение
		////Костенюк Александр-Старт 07.05.2012
		//|				ТОГДА Меню.Наименование ПОДОБНО &Значение
		////Костенюк Александр-Финиш 07.05.2012
		//|			ИНАЧЕ Меню.Номенклатура.Наименование ПОДОБНО &Значение
		//|		КОНЕЦ
		////Костенюк Александр-Старт 29.04.2013
		//|	И Меню.Владелец В
		//|			(ВЫБРАТЬ
		//|				ВидыМеню.Ссылка
		//|			ИЗ
		//|				Справочник.ВидыМеню КАК ВидыМеню
		//|			ГДЕ
		//|				&ПериодыДействияВидыМеню)
		//|	И &ПериодыДействияМеню
		////Костенюк Александр-Финиш 29.04.2013
		//|	И Меню.Актуальность");
		
		//Костенюк Александр-Старт 06.05.2015
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 25
		               |	Меню.ЭтоГруппа КАК ЭтоГруппа,
		               |	Меню.Номенклатура КАК Номенклатура,
		               |	НоменклатураМеню.Код КАК Код,
		               |	ПРЕДСТАВЛЕНИЕ(Меню.Ссылка) КАК Наименование,
		               |	НоменклатураМеню.Артикул КАК Артикул,
		               |	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	НоменклатураМеню.НоменклатурнаяГруппа,
		               |	НоменклатураМеню.Организация,
		               |	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		               |	НоменклатураМеню.СтавкаНДС,
		               |	НоменклатураМеню.Услуга,
		               |	НоменклатураМеню.Цена,
		               |	0 КАК ПорядокПодачи,
		               |	ЛОЖЬ КАК НаВынос
		               |ИЗ
		               |	Справочник.Меню КАК Меню
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		               |		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
		               |ГДЕ
		               |	Меню.Актуальность
		               |	И Меню.Владелец = &ВидМеню
		               |	И ВЫБОР
		               |			КОГДА Меню.ЭтоГруппа
		               |				ТОГДА Меню.Наименование ПОДОБНО &Значение
		               |			ИНАЧЕ Меню.Номенклатура.Наименование ПОДОБНО &Значение
		               |		КОНЕЦ
		               |	И Меню.Владелец В
		               |			(ВЫБРАТЬ
		               |				ВидыМеню.Ссылка
		               |			ИЗ
		               |				Справочник.ВидыМеню КАК ВидыМеню
		               |			ГДЕ
		               |				&ПериодыДействияВидыМеню)
		               |	И &ПериодыДействияМеню";
		//Костенюк Александр-Финиш 06.05.2015
		
		//Костенюк Александр-Старт 29.04.2013
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияВидыМеню", "ВидыМеню");
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияМеню", "Меню");
		//Костенюк Александр-Финиш 29.04.2013
		Запрос.УстановитьПараметр("ВидМеню", ОсновнойВидМеню); //Костенюк Александр 06.05.2015
		Запрос.УстановитьПараметр("Значение", "%" + УправлениеКонтактнойИнформацией.ПолучитьСтрокуДляПоискаПоПодобию(Значение) + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:50:04 
Процедура ПоискНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:48:46 
Процедура ПоискНоменклатурыПоКодуВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:48:48 
Процедура ПоискНоменклатурыПоКодуПриИзмененииДанных(Элемент) Экспорт
	
	ТабличноеПоле = Элемент; 
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:50:03 
Процедура ПоискНоменклатурыПоКодуПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
		|	НоменклатураМеню.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	НоменклатураМеню.Номенклатура КАК Номенклатура,
		|	НоменклатураМеню.Наименование КАК Наименование,
		|	НоменклатураМеню.Артикул,
		|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураМеню.Код,
		|	НоменклатураМеню.НоменклатурнаяГруппа,
		|	НоменклатураМеню.Организация,
		|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		|	НоменклатураМеню.СтавкаНДС,
		|	НоменклатураМеню.Услуга,
		|	НоменклатураМеню.Цена,
		|	0 КАК ПорядокПодачи,
		|	ЛОЖЬ КАК НаВынос
		|ИЗ
		|	Справочник.Меню КАК Меню
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
		|ГДЕ
		|	НоменклатураМеню.Код ПОДОБНО &Значение
		|	И Меню.Владелец В
		|			(ВЫБРАТЬ
		|				ВидыМеню.Ссылка
		|			ИЗ
		|				Справочник.ВидыМеню КАК ВидыМеню
		|			ГДЕ
		|				&ПериодыДействияВидыМеню)
		|	И &ПериодыДействияМеню
		|	И Меню.Владелец = &ВидМеню
		|	И Меню.Актуальность");
		
		//Костенюк Александр-Старт 29.04.2013
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияВидыМеню", "ВидыМеню");
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияМеню", "Меню");
		//Костенюк Александр-Финиш 29.04.2013
		Запрос.УстановитьПараметр("ВидМеню", ОсновнойВидМеню); //Костенюк Александр 06.05.2015
		Запрос.УстановитьПараметр("Значение", "%" + Формат(Значение,"ЧН=0; ЧГ=") + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:50:04 
Процедура ПоискНоменклатурыПоКодуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:48:46 
Процедура ПоискНоменклатурыПоАртикулуВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:48:48 
Процедура ПоискНоменклатурыПоАртикулуПриИзмененииДанных(Элемент) Экспорт
	
	ТабличноеПоле = Элемент; 
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:50:03 
Процедура ПоискНоменклатурыПоАртикулуПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элемент.Данные();
	Данные.Очистить();
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
		|	НоменклатураМеню.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	НоменклатураМеню.Номенклатура КАК Номенклатура,
		|	НоменклатураМеню.Наименование КАК Наименование,
		|	НоменклатураМеню.Артикул,
		|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураМеню.Код,
		|	НоменклатураМеню.НоменклатурнаяГруппа,
		|	НоменклатураМеню.Организация,
		|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		|	НоменклатураМеню.СтавкаНДС,
		|	НоменклатураМеню.Услуга,
		|	НоменклатураМеню.Цена,
		|	0 КАК ПорядокПодачи,
		|	ЛОЖЬ КАК НаВынос
		|ИЗ
		|	Справочник.Меню КАК Меню
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
		|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
		|ГДЕ
		|	Меню.Актуальность
		|	И Меню.Владелец В
		|			(ВЫБРАТЬ
		|				ВидыМеню.Ссылка
		|			ИЗ
		|				Справочник.ВидыМеню КАК ВидыМеню
		|			ГДЕ
		|				&ПериодыДействияВидыМеню)
		|	И &ПериодыДействияМеню
		|	И Меню.Владелец = &ВидМеню
		|	И НоменклатураМеню.Артикул ПОДОБНО &Значение");
		
		//Костенюк Александр-Старт 29.04.2013
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияВидыМеню", "ВидыМеню");
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияМеню", "Меню");
		//Костенюк Александр-Финиш 29.04.2013
		Запрос.УстановитьПараметр("ВидМеню", ОсновнойВидМеню); //Костенюк Александр 06.05.2015
		Запрос.УстановитьПараметр("Значение", "%" + Формат(Значение,"ЧН=0; ЧГ=") + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

// Чистяков Павел 28.07.2011 16:50:04 
Процедура ПоискНоменклатурыПоАртикулуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
	
КонецПроцедуры

//Игорь
//////////////////////////////////////Дополнительно ////////////////////////////////////////
//
Процедура СделатьЗаписьРегистрСведенийЧерныйБелыйСписокНоменклатуры(ИмяРегистра, Номенклатура, Ресторан, Актуальность = Ложь) Экспорт
	
	Если  ИмяРегистра  = "ЧерныйСписокНоменклатуры" тогда                                   
		ИмяКонст = "ВремяЖизниЭлементовЧерногоСписка";
	ИначеЕсли  ИмяРегистра = "БелыйСписокНоменклатуры" тогда
		ИмяКонст = "ВремяЖизниЭлементовБелогоСписка";	
	КонецЕсли;
	
	ТаблицаФормы = Новый ТаблицаЗначений; 	
	УправлениеНоменклатуройСервер.ЗаполнитьПараметрыЗаписиДляЧорноБелогоСписка(ложь, Номенклатура, ИмяРегистра, ИмяКонст, ТаблицаФормы );
	
	Для каждого СтрТаблицы Из ТаблицаФормы Цикл
		Если СтрТаблицы.Ресторан <> Ресторан Тогда
			ТаблицаФормы.Удалить(СтрТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если  Актуальность Тогда 
		ТаблицаФормы[0].Актуальность = не Актуальность;
	Иначе 
		ТаблицаФормы[0].Актуальность = ?(ТаблицаФормы[0].Актуальность, ложь, Истина); 
	КонецЕсли;
	РаботаСКДДСписокСервер.СоздатьЗаписиВРегистреСведенийПострочно(ИмяРегистра, ТаблицаФормы ,,,Истина, Ложь);
	
КонецПроцедуры

Процедура FrontOfficeЗаполнитьТабличноеПолеМодификаторовУсловий(ИмяСправочника, Номенклатура, ТабличноеПоле,  Родитель= Неопределено, КешМодиФикаторы = Неопределено, ИзменитьКеш = Ложь)  Экспорт 
	
	Данные = ТабличноеПоле.Данные();
	
	Если Данные = Неопределено Тогда	
		мВыводитьКартинкиПутиМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиПутиМеню);
		мВыводитьКартинкиГруппМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиГруппМеню);
		мВыводитьКартинкиЭлементовМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиЭлементовМеню);
		мВыводитьЦеныМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьЦеныМеню);
		мКомпактноеПредставлениеМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.КомпактноеПредставлениеМеню);
		мРазмерЭлементовМеню = УправлениеПользователями.ПолучитьНастрокуРазмера(УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.РазмерЭлементовМеню));
		//
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Меню", Новый ОписаниеТипов("Массив"), "Меню");
		
		ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("Меню");
		ТабличноеПоле.Колонки.Получить("Меню").ОтображатьВложенныеДанные = Истина;
		ТабличноеПоле.Колонки.Получить("Меню").Ширина = Макс(мРазмерЭлементовМеню.Ширина, 160);
		ТабличноеПоле.Колонки.Получить("Меню").ШиринаЭлементаВложенныхДанных = ТабличноеПоле.Колонки.Получить("Меню").Ширина;
		ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(мРазмерЭлементовМеню.Высота, 40);
		ТабличноеПоле.Шапка = Ложь;
	
		Возврат;
	Иначе
		Данные.Очистить();		
	КонецЕсли;
	
	// Выборка данных.
	Если (ТабличноеПоле.Тег = Неопределено) Тогда
		Если КешМодиФикаторы = Неопределено Или ИзменитьКеш Тогда
			КешМодиФикаторы = УправлениеНоменклатуройСервер.FrontOfficeПолучитьДеревоОтображенияМеню(ИмяСправочника, Номенклатура);
		КонецЕсли;
		Дерево = КешМодиФикаторы;
		ТабличноеПоле.Тег = Новый Структура("Данные,Путь,Группы,Элементы,ТаблицаЦвета", Дерево, "Ссылка", "Владелец");	
	КонецЕсли;
	
	ДеревоМеню = ТабличноеПоле.Тег.Данные;
	ТабличноеПоле.Тег.Элементы = Новый Массив;
	ТабличноеПоле.Тег.Группы = Новый Массив; 
	ТабличноеПоле.Тег.Путь = Новый Массив; 
	
	Если (ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений")) Тогда
		РодительМеню = Родитель;
	Иначе
		РодительМеню = ДеревоМеню.Строки.Найти(Родитель, "Ссылка", Истина);
	КонецЕсли;
	
	Если (Не РодительМеню = Неопределено) Тогда
		ДеревоМеню = РодительМеню;
		
		СтрокаДанных = Данные.Добавить();
		СтрокаДанных.Меню = Новый Массив;
		
		Пока (Не РодительМеню = Неопределено) Цикл
			ТабличноеПоле.Тег.Путь.Добавить(РодительМеню);
			СтрокаДанных.Меню.Вставить(0, РодительМеню);
			РодительМеню = РодительМеню.Родитель;	
		КонецЦикла;
	КонецЕсли;
	
	Если Не мКомпактноеПредставлениеМеню Тогда
		СтрокаДанных = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
		Если СтрокаДереваМеню.ЭтоГруппа Тогда
			Если (СтрокаДанных = Неопределено) Тогда
				СтрокаДанных = Данные.Добавить();
				СтрокаДанных.Меню = Новый Массив;
			КонецЕсли;
			
			ТабличноеПоле.Тег.Группы.Добавить(СтрокаДереваМеню);
			СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
		КонецЕсли;
	КонецЦикла;
	
	// -- Строки.
	Если Не мКомпактноеПредставлениеМеню Тогда
		СтрокаДанных = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
		Если Не СтрокаДереваМеню.ЭтоГруппа Тогда
			Если (СтрокаДанных = Неопределено) Тогда
				СтрокаДанных = Данные.Добавить();
				СтрокаДанных.Меню = Новый Массив;
			КонецЕсли;
			
			ТабличноеПоле.Тег.Элементы.Добавить(СтрокаДереваМеню);
			СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
		КонецЕсли;
	КонецЦикла;
	
	ТабличноеПоле.ОбновитьСтроки();
 			
КонецПроцедуры

Процедура ПереносПоискВерхнегоРодителя(ТаблицаИсточник, СтрокаПоиска, Ключ = "Идентификатор", ВозвратСтрока = Неопределено)  Экспорт
	
	Если ВозвратСтрока = Неопределено Тогда
		НайденаСтр =  ТаблицаИсточник.Найти(СтрокаПоиска.Владелец, Ключ);
		Если НайденаСтр <> Неопределено Тогда
			ПереносПоискВерхнегоРодителя(ТаблицаИсточник, НайденаСтр, Ключ, ВозвратСтрока);
		Иначе
			ВозвратСтрока = СтрокаПоиска;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискКарточкиПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт		
	
	СтандартнаяОбработка = Ложь;
	
	// Данные.	
	Данные = Элемент.Данные();
	Данные.Очистить();		 
	
	// Выборка данных.
	// Поиск по номеру карты
	Если Данные.Колонки.Количество() = 1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИнформационныеКарты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		               |ГДЕ
		               |	НЕ ИнформационныеКарты.ПометкаУдаления
		               |	И ИнформационныеКарты.КодКарты ПОДОБНО &Значение";
		Запрос.УстановитьПараметр("Значение", "%" + Значение + "%");
	// Поиск по владельцу
	ИначеЕсли Данные.Колонки.Количество() = 2 Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 25
		               |	ИнформационныеКарты.Ссылка КАК Ссылка,
		               |	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты
		               |ИЗ
		               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		               |ГДЕ
		               |	НЕ ИнформационныеКарты.ПометкаУдаления
					   |	И ИнформационныеКарты.ВладелецКарты ПОДОБНО &Значение";
		Запрос.УстановитьПараметр("Значение", "%" + Значение + "%");	
	// Поиск по номеру телефона
	ИначеЕсли Данные.Колонки.Количество() = 3 Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 25
		               |	ИнформационныеКарты.Ссылка КАК Ссылка,
		               |	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты,
		               |	ИнформационныеКарты.Телефон КАК Телефон
		               |ИЗ
		               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		               |ГДЕ
		               |	НЕ ИнформационныеКарты.ПометкаУдаления
		               |	И ИнформационныеКарты.Телефон ПОДОБНО &Значение";
		Запрос.УстановитьПараметр("Значение", "%" + Значение + "%");			
	КонецЕсли; 
	
	// Выборка.
	Выборка = Запрос.Выполнить().Выбрать();			
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;			
	
	Выборка = Неопределено;
	
	// Обновление.
	Элемент.ОбновитьСтроки();	
	
КонецПроцедуры

Процедура ПоискКарточкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	//ОформлениеСтроки.Ячейки("ДисконтнаяКарта").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
	
КонецПроцедуры

Процедура ПоискКарточкиВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПоискКарточкиПриИзмененииДанных(Элемент) Экспорт
	
	ТабличноеПоле = Элемент; 
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры


/////////////////////////////// Магн. карточки /////////////////////////////////////////////////	
//2011-0211:КВВ добавляет скидку по дисконтной карте	
// Игорь 01.09.2011 10:06:21
//
Процедура FrontOfficeУстановкаСкидкиНаКлиенте(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Проверка = Истина , ЗначениеСсылка = Неопределено, ЗначениеСертификат = Неопределено) Экспорт
	
	ИзменитьДокумент = Истина;
	Данные = ТабличноеПолеСкидок.Данные();
	
	Если не ДокументОбъект.Ссылка.Пустая() и ДокументОбъект.Скидки.Количество() > 0 Тогда
		ДокументОбъект.Скидки.Очистить();
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ДокументОбъект.Сертификат)  Тогда		
		Если ЗначениеСертификат = Неопределено Тогда
			СтандартнаяУстановкаДисконтнойКарты(ДокументОбъект, ТабличноеПолеСкидок, Данные, ЗначениеСертификат, ЗначениеСсылка );		
		Иначе		
			Если не ЗначениеСертификат.ВидСертификата.НеобходимаДисконтнаяКатрочка тогда
				СтандартнаяУстановкаДисконтнойКарты(ДокументОбъект, ТабличноеПолеСкидок, Данные, ЗначениеСертификат, ЗначениеСсылка );							
			Иначе
				СертификатомУстановкаДисконтнойКарты(ДокументОбъект, ТабличноеПолеСкидок, Данные, Проверка, ЗначениеСертификат, ЗначениеСсылка);			
				ИзменитьДокумент = Ложь;
			КонецЕсли;		
		КонецЕсли;	
	Иначе	
		Если не ДокументОбъект.Сертификат.ВидСертификата.НеобходимаДисконтнаяКатрочка тогда
			СтандартнаяУстановкаДисконтнойКарты(ДокументОбъект, ТабличноеПолеСкидок, Данные, ЗначениеСертификат, ЗначениеСсылка);							
		Иначе                                                 
			// Сертификат с дисконтной карточкой
			СертификатомУстановкаДисконтнойКарты(ДокументОбъект, ТабличноеПолеСкидок, Данные, Проверка, ЗначениеСертификат, ЗначениеСсылка);			
			ИзменитьДокумент = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если ИзменитьДокумент тогда
		// Определяем дальнейшее поведение системы 
		// Рассчитывать либо не рассчитывать скидку
		// Это касается как основного заказа так и дозаказа(количество гостей = 0)
		РассчитатьСкидку = Истина;
		Если ЗначениеЗаполнено(ДокументОбъект.Активность) Тогда
			Ответ = FrontOffice.ВывестиВопрос(НСтр("ru='Рассчитать скидку?';uk='Розрахувати знижку?'"), РежимДиалогаВопрос.ДаНет);		
			Если (Ответ = КодВозвратаДиалога.Нет) Тогда			
				РассчитатьСкидку = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если РассчитатьСкидку Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ДокументОбъект, ДокументОбъект.ДополнительныеСвойства.Позиции, ДокументОбъект.ДополнительныеСвойства.Скидки);
		КонецЕсли;
		ФормаОбъекта.Модифицированность = Истина;
		ДокументОбъект.Товары.Загрузить(ДокументОбъект.ДополнительныеСвойства.Позиции);
		ДокументОбъект.Скидки.Загрузить(ДокументОбъект.ДополнительныеСвойства.Скидки);
		ТаблицаСкидокОбновить(ДокументОбъект, ТабличноеПолеСкидок);
		ТаблицаЗаказаПрочитать(ДокументОбъект, ТабличноеПолеЗаказа); 
		ФормаОбъекта.УстановитьВидимость();
		ФормаОбъекта.УстановитьДоступность();
		Если ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта) Тогда
			ПроверитьСообщение(ДокументОбъект);
			ПроверитьДеньРождение(ДокументОбъект);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	
  

Процедура СтандартнаяУстановкаДисконтнойКарты(ДокументОбъект, ТабличноеПолеСкидок, Данные, ЗначениеСертификат = Неопределено, ЗначениеСсылка = Неопределено) 
	
	Если не ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта) тогда			
		
		Если ТипЗнч(ЗначениеСсылка) = Тип("СправочникСсылка.ИнформационныеКарты") и не ЗначениеСсылка.Пустая()  Тогда			
			ИзменениеАктуальностиДисконтнойКарты(Данные);		
			ДокументОбъект.ДисконтнаяКарта = ЗначениеСсылка;
			мДисконтнаяКарта = ЗначениеСсылка;
			
		ИначеЕсли ТипЗнч(ЗначениеСсылка) = Тип("СтрокаТаблицыЗначений") тогда 
			
			ИзменениеАктуальностиДисконтнойКарты(Данные);		
			ДокументОбъект.ДисконтнаяКарта = ЗначениеСсылка.Ссылка;
			мДисконтнаяКарта = ЗначениеСсылка.Ссылка;
			
		КонецЕсли; 
		
	Иначе                                                                                        
		
		Если ТипЗнч(ЗначениеСсылка) = Тип("СправочникСсылка.ИнформационныеКарты") и не ЗначениеСсылка.Пустая()  Тогда
			
			Если ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты  = ЗначениеСсылка.ВидДисконтнойКарты Тогда 
				ТабличноеПолеСкидок.ОбновитьСтроки();
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Дисконтная карта с номиналом "+ ЗначениеСсылка.ВидДисконтнойКарты.Наименование+" уже определена!';uk='Дисконтна карта з номіналом "+ ЗначениеСсылка.ВидДисконтнойКарты.Наименование+" вже визначена!'"));
				Возврат;
			Иначе 	
				ИзменениеАктуальностиДисконтнойКарты(Данные);
				ДокументОбъект.ДисконтнаяКарта = ЗначениеСсылка;
				мДисконтнаяКарта = ЗначениеСсылка;
				
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(ЗначениеСсылка) = Тип("СтрокаТаблицыЗначений") тогда 
			
			Если ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты  = ЗначениеСсылка.Ссылка.ВидДисконтнойКарты Тогда 
				ТабличноеПолеСкидок.ОбновитьСтроки();
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Дисконтная карта с номиналом "+ ЗначениеСсылка.Ссылка.ВидДисконтнойКарты.Наименование+" уже определена!';uk='Дисконтна карта з номіналом "+ ЗначениеСсылка.Ссылка.ВидДисконтнойКарты.Наименование+" вже визначена!'"));
				Возврат;
			Иначе 						
				ИзменениеАктуальностиДисконтнойКарты(Данные);
				ДокументОбъект.ДисконтнаяКарта = ЗначениеСсылка.Ссылка;
				мДисконтнаяКарта = ЗначениеСсылка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЕсли;
	
	Если мДисконтнаяКарта.ВидДисконтнойКарты.СкидкаПоУсловию Тогда
		УсловияСкидок = Неопределено;
		Если УстановитьУсловиеСкидки(УсловияСкидок) Тогда
			ДокументОбъект.УсловияСкидок = УсловияСкидок;
		КонецЕсли;		                    
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатомУстановкаДисконтнойКарты(ДокументОбъект, ТабличноеПолеСкидок, Данные, Проверка, ЗначениеСертификат= Неопределено, ЗначениеСсылка= Неопределено ) 
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта)  тогда			                                                                                    
		
		Если ТипЗнч(ЗначениеСсылка) = Тип("СправочникСсылка.ИнформационныеКарты") и не ЗначениеСсылка.Пустая()  Тогда
			
			Если ДокументОбъект.Сертификат.ДисконтнаяКарта <> ЗначениеСсылка.ВидДисконтнойКарты Тогда 
				//ТабличноеПолеСкидок.ОбновитьСтроки();                                                        
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Для данного сертификата "+ УправлениеСертификатами.ПолучитьТекстСКодомИНомеромСертификата(ДокументОбъект.Сертификат)+ "используеться другая дисконтная карта!';uk='Для даного сертифікату "+ УправлениеСертификатами.ПолучитьТекстСКодомИНомеромСертификата(ДокументОбъект.Сертификат)+"  використана інша дисконтна картка!'"));
				Проверка = Ложь;
				Возврат;				
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(ЗначениеСсылка) = Тип("СтрокаТаблицыЗначений") тогда 
			
			Если ДокументОбъект.Сертификат.ДисконтнаяКарта <> ЗначениеСсылка.Ссылка.ВидДисконтнойКарты Тогда 
				//ТабличноеПолеСкидок.ОбновитьСтроки();
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Дисконтная карта с номиналом "+ ЗначениеСсылка.ВидДисконтнойКарты.Наименование+" уже определена!';uk='Дисконтна карта з номіналом "+ ЗначениеСсылка.ВидДисконтнойКарты+" вже визначена!'"));
				Проверка = Ложь;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;				
	Иначе
		ДокументОбъект.ДисконтнаяКарта = ЗначениеСсылка;
		мДисконтнаяКарта = ЗначениеСсылка;
	КонецЕсли;
	
КонецПроцедуры		

Процедура ИзменениеАктуальностиДисконтнойКарты(Таблица)	
	СтрокаСДисконтнойСкидкой = Таблица.найти(Истина, "ДисконтнаяКарта");
	Если СтрокаСДисконтнойСкидкой <> Неопределено Тогда
		Если СтрокаСДисконтнойСкидкой.Ручная и не СтрокаСДисконтнойСкидкой.Актуальность Тогда
			СтрокаСДисконтнойСкидкой.Ручная  = Ложь;
			СтрокаСДисконтнойСкидкой.Актуальность = Истина;		
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры	

// Функция осуществляет поиск М карточки.
//	
Функция ПоискМКарточкиСкидок(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Значение = Неопределено, Сертификат = Неопределено) Экспорт	
	
	Если (ДокументОбъект.Распечатался <> ОбщегоНазначенияСервер.ПолучитьПустуюДату()) 
		И (НЕ УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeРазрешитьПрокаткуКартыПослеПречека)) Тогда
		FrontOffice.ВывестиПредупреждение(НСтр("ru='Нельзя применить скидку на распечатанный документ!';uk='Не можна застосувати знижку на роздрукований документ!'"));		
		Возврат Ложь;
	КонецЕсли;
	
	// Данные.
	Если ТипЗнч(Сертификат) = Тип("СтрокаТаблицыЗначений") Тогда
		Сертификат = Сертификат.Ссылка;	
	КонецЕсли;		
	
	мСертификат = Сертификат;		
	НеИзменять = ЗначениеЗаполнено(Сертификат) и не Сертификат.ВидСертификата.НеобходимаДисконтнаяКатрочка;	
	ФормаПоиска = ЭтотОбъект.ПолучитьФорму("ФормаПоискаДисконтныхКарт"); 
	РезультатВыбораФормы = ФормаПоиска.ОткрытьМодально();
	
	Если РезультатВыбораФормы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Проверка = Истина;
	Данные = Новый ТаблицаЗначений;	
	Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"), НСтр("ru='Номер карты';uk='Номер картки'"));		 			 				
	
	Если Значение = Неопределено Тогда
		Значение = "";
	КонецЕсли;
	
	// Поиск по номеру карты
	Если РезультатВыбораФормы = "Код" Тогда	
		Если НЕ FrontOffice.ПоискСтрокиЧисла(Значение, НСтр("ru='Введите номер карты';uk='Введіть номер картки'"),,,, Данные, "Ссылка", Истина, ЭтотОбъект, "ПоискКарточки") Тогда		
			Возврат Ложь;			
		КонецЕсли;
	// Поиск по владельцу
	ИначеЕсли РезультатВыбораФормы = "Наименование" Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		Данные.Колонки.Добавить("ВладелецКарты", Новый ОписаниеТипов(МассивТипов), НСтр("ru='ФИО';uk='ПІБ'"));		 			 					
		Колонки = "Ссылка,ВладелецКарты";		
		Если НЕ FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите ФИО';uk='Введіть ПІБ'"),,,, Данные, Колонки, Истина, ЭтотОбъект, "ПоискКарточки") Тогда
			Возврат Ложь;			
		КонецЕсли;
	// Поиск по номеру телефона
	ИначеЕсли РезультатВыбораФормы = "Телефон" Тогда
		Данные.Колонки.Добавить("ВладелецКарты", Новый ОписаниеТипов("Строка"), НСтр("ru='ФИО';uk='ПІБ'"));
		Данные.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка"), НСтр("ru='Телефон';uk='Телефон'"));
		Колонки = "Ссылка,ВладелецКарты,Телефон";		
		Если НЕ FrontOffice.ПоискСтроки(Значение, НСтр("ru='Введите номер телефона';uk='Введіть номер телефону'"),,,, Данные, Колонки, Истина, ЭтотОбъект, "ПоискКарточки") Тогда
			Возврат Ложь;			
		КонецЕсли;
	КонецЕсли;
	
	Если НеИзменять Тогда
		УдалитьКарточкуНажатие(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Ложь, Проверка);
	КонецЕсли;
	Если мСертификат = Неопределено Тогда
		FrontOfficeУстановкаСкидкиНаКлиенте(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Проверка, Значение);
	Иначе
		FrontOfficeУстановкаСкидкиНаКлиенте(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Проверка, Значение, мСертификат);
	КонецЕсли;
	
	// Результат.  
	Сертификат = мСертификат;	
	Значение = Значение.Ссылка;
	
	Возврат Проверка;								
	
КонецФункции // ПоискМКарточкиСкидок()

Процедура УдалитьКарточкуНажатие(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа,  ВыдаватьСообщение = истина, Проверка = Истина) Экспорт	
	
	Если ДокументОбъект.Распечатан Тогда
		FrontOffice.ВывестиПредупреждение(НСтр("ru='Нельзя удалить скидку с распечатанного документа!';uk='Не можна видалити знижку з роздрукованого документу!'"));	
		Проверка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта) Тогда	
		Если  ВыдаватьСообщение тогда				
			МожноОтменятьКарту = Истина;
			ЗапрашиватьПодтверждение = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьПодтверждениеПриОтменеДисконтнойКартыЗаказа);
			Если ЗапрашиватьПодтверждение Тогда
				Ответ = FrontOffice.ВывестиВопрос(НСтр("ru='Вы действительно хотите удалить дисконтную карту из документа?"+Символы.ПС+"Суммы скидок будут пересчитаны. Продолжить?';uk='Ви дійсно хочете видалити дисконтну карту з документу?"+Символы.ПС+"Суми дисконту будуть перераховані. Продовжити?'"), РежимДиалогаВопрос.ДаНетОтмена);		
				Если (Ответ = КодВозвратаДиалога.Нет) ИЛИ (Ответ = КодВозвратаДиалога.Отмена) Тогда			
					МожноОтменятьКарту = Ложь;
				КонецЕсли;	
			КонецЕсли;
			Если НЕ МожноОтменятьКарту Тогда
				Проверка = Ложь;
				Возврат;				
			КонецЕсли;
			ЧисткаСкидок(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа);
		Иначе 
			ЧисткаСкидок(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа);					
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЧисткаСкидок(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа) 
	// Игорь 08.09.2011 16:44:19
	Если не ДокументОбъект.Ссылка.Пустая() и ДокументОбъект.Скидки.Количество()>0 Тогда
		ДокументОбъект.Скидки.Очистить();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.Сертификат) Тогда
		Если ДокументОбъект.Сертификат.ВидСертификата.НеобходимаДисконтнаяКатрочка Тогда
			Возврат;                                           
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.ДисконтнаяКарта = Неопределено;
	мДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
	ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ДокументОбъект, ДокументОбъект.ДополнительныеСвойства.Позиции ,ДокументОбъект.ДополнительныеСвойства.Скидки);					
	ДокументОбъект.Товары.Загрузить(ДокументОбъект.ДополнительныеСвойства.Позиции);	
	//Модифицированность = Истина;
	//Костенюк Александр-Старт 20.06.2012
	ЭтаФорма.Модифицированность = Истина;
	//Костенюк Александр-Финиш 20.06.2012
	ТаблицаСкидокОбновить(ДокументОбъект, ТабличноеПолеСкидок);
	ТаблицаЗаказаПрочитать(ДокументОбъект, ТабличноеПолеЗаказа);
	ЭтаФорма.УстановитьВидимость();
	ЭтаФорма.УстановитьДоступность();
	
КонецПроцедуры

//УсловиеСкидки	              
Функция УстановитьУсловиеСкидки(Значение = Неопределено) Экспорт                    	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияСкидок.Ссылка
	|ИЗ
	|	Справочник.УсловияСкидок КАК УсловияСкидок
	|ГДЕ
	|	УсловияСкидок.ПометкаУдаления = ЛОЖЬ
	|	И УсловияСкидок.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", мДисконтнаяКарта.ВидДисконтнойКарты );
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить(); 
	//Данные.
	СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Ссылка");
	//Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выбирите условие скидки';uk='Виберіть умови знижки'") , ТаблицаЗначений, "Ссылка") И (Не Значение = СтрокаТаблицы.Ссылка) Тогда
		Значение = СтрокаТаблицы.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Игорь 12.09.2011 15:50:25
//////////////////////////////////Сертификаты//////////////////////////////////////////////

Процедура ПоискСертификатаПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт		
	СтандартнаяОбработка = Ложь;	
	ВыполнитьПоискЗначенияСертификата(Элемент, Значение); 					
КонецПроцедуры

Процедура ВыполнитьПоискЗначенияСертификата(Элемент, Значение) Экспорт
	
	Данные= Элемент.Данные();
	Данные.Очистить();		 
	Если Значение <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = УправлениеСертификатами.ПолучитьТекстЗапросаПоСертификатам("ПоКодуСертификата", 25);
		Запрос.УстановитьПараметр("Значение", Формат(Значение, "ЧГ=") + "%");
		Выборка = Запрос.Выполнить().Выбрать();			
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЦикла;			
	КонецЕсли;
	
	Выборка = Неопределено;
	
	Элемент.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ПоискСертификатаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	//ОформлениеСтроки.Ячейки("ДисконтнаяКарта").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
	
КонецПроцедуры

Процедура ПоискСертификатаВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПоискСертификатаПриИзмененииДанных(Элемент) Экспорт
	ТабличноеПоле = Элемент; 
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
КонецПроцедуры

Функция ПоискСертификатаНажатие(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Значение=0) Экспорт	
	// Данные.	
	Если ДокументОбъект.Распечатался = ОбщегоНазначенияСервер.ПолучитьПустуюДату() Тогда		
		Данные = Новый ТаблицаЗначений;	
		Проверка = Истина;
		Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Сертификаты"),НСтр("ru='Номер сертификата';uk='Номер сертифікату'"));		 			 			
		// Поиск.			
		Проверка = FrontOffice.ПоискЧисла(Значение, НСтр("ru='Введите номер сертификата';uk='Введіть номер сертифікату'") , 16, ,,, "ЧЦ=16; ЧДЦ=0; ЧГ=", Данные, "Ссылка", , ЭтотОбъект, "ПоискСертификата");				
		
		// Позиционирование.
		Если Проверка Тогда			
			УдалитьСертификатНажатие(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Ложь, Проверка);			
		КонецЕсли;		
		
		Если Проверка Тогда
			FrontOfficeУстановкаСертификаНаКлиенте(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Проверка , Значение);
		КонецЕсли;
		//Вызываем второй раз что-бы почистить 
		
		Если не Проверка Тогда
			УдалитьСертификатНажатие(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа,  Ложь, Проверка);
		КонецЕсли;
		// Результат.
		Возврат Проверка;	
	Иначе
		FrontOffice.ВывестиПредупреждение(НСтр("ru='Нельзя применить сертификат на распечатанный документ!';uk='Не можна застосувати сертифікат на роздрукований документ!'"));		
	КонецЕсли;	
КонецФункции // ТаблицаОткрытыхДокументовНайти()

//Процедура УдалитьСертификатНажатие(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа,  ВыдаватьСообщение = истина, Проверка = Истина) Экспорт	
//Костенюк Александр-Старт 26.06.2012
Процедура УдалитьСертификатНажатие(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа,  ТабличноеПолеПереноса, ВыдаватьСообщение = истина, Проверка = Истина) Экспорт	
//Костенюк Александр-Финиш 26.06.2012
	
	Если ДокументОбъект.Распечатался <> ОбщегоНазначенияСервер.ПолучитьПустуюДату() Тогда
		FrontOffice.ВывестиПредупреждение(НСтр("ru='Нельзя удалить сертификат с распечатанного документа!';uk='Не можна видалити сертифікат з роздрукованого документу!'"));	
		Проверка = Ложь;
		Возврат;
	КонецЕсли;
	
	// Игорь 12.09.2011 16:52:07		  		   
	Если не ЗначениеЗаполнено(ДокументОбъект.Сертификат) Тогда	
		Возврат;
	КонецЕсли;
	
	Если  ВыдаватьСообщение тогда						   
		Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Вы действительно хотите удалить сертификат из документа."+ Символы.ПС+"Суммы скидок будут пересчитаны. Продолжить?';uk='Ви дійсно хочете видалити сертифікат з документу."+ Символы.ПС+"Суми дисконту будуть перераховані. Продовжити?'") , РежимДиалогаВопрос.ДаНет);
		Если (Результат = КодВозвратаДиалога.Да) Тогда
			//ЧисткаСертификатов(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа);					
			//Костенюк Александр-Старт 20.06.2012
			Если РегистрыСведений.НастройкиСервисаPodarIm.ПолучитьДоступностьСервиса() Тогда
				ОтменитьСерфификатPodarIm(ДокументОбъект);
				ЧисткаСертификатов(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, ТабличноеПолеПереноса);
				ЭтаФорма.Модифицированность = НЕ ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.Запись);
			Иначе
				ЧисткаСертификатов(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, ТабличноеПолеПереноса);
			КонецЕсли;
			//Костенюк Александр-Финиш 20.06.2012
		ИначеЕсли (Результат = КодВозвратаДиалога.Нет) Тогда
			Проверка = Ложь;
			Возврат;				
		КонецЕсли;			
	Иначе 			
		//ЧисткаСертификатов(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа);					
		//Костенюк Александр-Старт 20.06.2012
		Если РегистрыСведений.НастройкиСервисаPodarIm.ПолучитьДоступностьСервиса() Тогда
			ОтменитьСерфификатPodarIm(ДокументОбъект);
			ЧисткаСертификатов(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, ТабличноеПолеПереноса);
			ЭтаФорма.Модифицированность = НЕ ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.Запись);
		Иначе
			ЧисткаСертификатов(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, ТабличноеПолеПереноса);
		КонецЕсли;
		//Костенюк Александр-Финиш 20.06.2012
	КонецЕсли;
	
	
КонецПроцедуры

//Процедура ЧисткаСертификатов(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа)
//Костенюк Александр-Старт 26.06.2012
Процедура ЧисткаСертификатов(ЭтаФорма, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, ТабличноеПолеПереноса)
//Костенюк Александр-Финиш 26.06.2012
	
	//Если не ДокументОбъект.Ссылка.Пустая() и ДокументОбъект.Скидки.Количество()>0 Тогда
	//Костенюк Александр-Старт 27.06.2012
	// Если документ еще не записан, то скидки тоже нужно очищать
	Если ДокументОбъект.Скидки.Количество()>0 Тогда
	//Костенюк Александр-Финиш 27.06.2012
		ДокументОбъект.Скидки.Очистить();
	КонецЕсли;
	
	Если ДокументОбъект.Сертификат.ВидСертификата.НеобходимаДисконтнаяКатрочка Тогда
		ДокументОбъект.ДисконтнаяКарта = Неопределено;
		мДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();                                           
	КонецЕсли;
	
	//Костенюк Александр-Старт 25.06.2012
	// При удалении сертификата необходимо удалить из документа все связанные с ним подарочные блюда
	УдалитьПодарочныеБлюда(ЭтаФорма, ДокументОбъект, ТабличноеПолеЗаказа, ТабличноеПолеСкидок, ТабличноеПолеПереноса);
	//Костенюк Александр-Финиш 25.06.2012

	ДокументОбъект.Сертификат = Неопределено;
	мСертификат = Справочники.Сертификаты.ПустаяСсылка();
	ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ДокументОбъект, ДокументОбъект.ДополнительныеСвойства.Позиции ,ДокументОбъект.ДополнительныеСвойства.Скидки);					
	ДокументОбъект.Товары.Загрузить(ДокументОбъект.ДополнительныеСвойства.Позиции);	
	//Модифицированность = Истина;
	ТаблицаСкидокОбновить(ДокументОбъект, ТабличноеПолеСкидок);
	ТаблицаЗаказаПрочитать(ДокументОбъект, ТабличноеПолеЗаказа);
	//Костенюк Александр-Старт 20.06.2012
	ЭтаФорма.Модифицированность = Истина;
	//Костенюк Александр-Финиш 20.06.2012
	ЭтаФорма.УстановитьВидимость();
	ЭтаФорма.УстановитьДоступность();
	
КонецПроцедуры

Процедура FrontOfficeУстановкаСертификаНаКлиенте(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Проверка = Истина , ЗначениеСсылка = Неопределено) Экспорт
	// Игорь 01.09.2011 11:17:48 		
	Данные = ТабличноеПолеСкидок.Данные();
	
	Если не ДокументОбъект.Ссылка.Пустая() и ДокументОбъект.Скидки.Количество() > 0 Тогда			
		ДокументОбъект.Скидки.Очистить();			
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеСсылка) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Если ЗначениеСсылка.Ссылка.ВидСертификата.НеобходимаДисконтнаяКатрочка  Тогда  // не ЗначениеСсылка.Ссылка.ДисконтнаяКарта.Пустая()
			ДК=0;		
			Если ПоискМКарточкиСкидок(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, ДК, ЗначениеСсылка) Тогда
				Если  ЗначениеСсылка.Ссылка.ДисконтнаяКарта = ДК.Ссылка Тогда
					ДокументОбъект.ДисконтнаяКарта = ДК.Ссылка;
					мДисконтнаяКарта = ДК.Ссылка;
				Иначе
					FrontOffice.ВывестиПредупреждение(НСтр("ru='Код дисконтной карточки в сертификате "+ УправлениеСертификатами.ПолучитьТекстСКодомИНомеромСертификата(ДокументОбъект.Сертификат, "КодДисконтнаяКарта") +" не совпадает с примененной дисконтной карточкой!';uk='Код дисконтної картки в сертифікаті "+ УправлениеСертификатами.ПолучитьТекстСКодомИНомеромСертификата(ДокументОбъект.Сертификат, "КодДисконтнаяКарта") +" не співпадає із застосованою дисконтною карткою!'"));															
					Проверка = Ложь;
					Возврат;
				КонецЕсли;
			Иначе 	
				Проверка = Ложь;
				Возврат;
			КонецЕсли;										                       				
		КонецЕсли;
		
		Если ЗначениеСсылка.Ссылка.ВидСертификата.НеобходимПароль Тогда				
			ЗначениеПароля = "";
			Если FrontOffice.ВводЧисла(ЗначениеПароля, НСтр("ru='Введите пароль';uk='Введіть пароль'") , 10 ) Тогда
				Проверка = ЗначениеСсылка.Ссылка.Пароль = Строка(ЗначениеПароля);
				Если не Проверка Тогда
					FrontOffice.ВывестиПредупреждение(НСтр("ru='Введенный пароль не совпадает с паролем сертификата!';uk='Введений пароль не збігається з паролем сертифікату!'"));							
					Возврат;
				КонецЕсли;
			Иначе
				Проверка = Ложь;
				Возврат;
			КонецЕсли;			
		КонецЕсли;                                           
		
	КонецЕсли; 
	
	ДокументОбъект.Сертификат = ЗначениеСсылка.Ссылка;
	мСертификат = ЗначениеСсылка.Ссылка;
	
	////////////////////////////////////////////////////////////////////////////////
	ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ДокументОбъект ,ДокументОбъект.ДополнительныеСвойства.Позиции , ДокументОбъект.ДополнительныеСвойства.Скидки);
	//ФормаОбъекта.Модифицированность = Истина;
	ДокументОбъект.Товары.Загрузить(ДокументОбъект.ДополнительныеСвойства.Позиции);
	ДокументОбъект.Скидки.Загрузить(ДокументОбъект.ДополнительныеСвойства.Скидки);
	ТаблицаСкидокОбновить(ДокументОбъект, ТабличноеПолеСкидок);
	ТаблицаЗаказаПрочитать(ДокументОбъект, ТабличноеПолеЗаказа); 
	//Костенюк Александр-Старт 20.06.2012
	ФормаОбъекта.Модифицированность = Истина;
	//Костенюк Александр-Финиш 20.06.2012
	ФормаОбъекта.УстановитьВидимость();
	ФормаОбъекта.УстановитьДоступность();
	
КонецПроцедуры	

// Чистяков Павел 02.09.2011 12:38:15 
//Функция ПодготовитьДокументКЗаписи(ОбъектДляЗаписи, РежимЗаписи = Неопределено) Экспорт
//Костенюк Александр-Старт 07.08.2012
Функция ПодготовитьДокументКЗаписи(ОбъектДляЗаписи, РежимЗаписи = Неопределено, ТабличноеПолеЗаказа = Неопределено) Экспорт
//Костенюк Александр-Финиш 07.08.2012
	
	МетаданныеДокумента = ОбъектДляЗаписи.Метаданные();
	ОписаниеОшибки		= "";
	
	Попытка
		
		ТекущаяДата = ТекущаяДата();
		
		Если ОбъектДляЗаписи.ПометкаУдаления Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе
			Если (РежимЗаписи = Неопределено) Тогда
				РежимЗаписи = РежимЗаписиДокумента.Запись;	
			КонецЕсли;
		КонецЕсли;
		
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		
		ОбъектДляЗаписи.ПодготовитьШапку(РежимЗаписи, РежимПроведения);
		//ОбъектДляЗаписи.ПодготовитьТабличнуюЧастьТоварыИУслуги(РежимЗаписи, РежимПроведения);
		ОбъектДляЗаписи.ПодготовитьТабличнуюЧастьТовары(РежимЗаписи, РежимПроведения); //Костенюк Александр 22.04.2013
		
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			ДокументОригинал = ОбъектДляЗаписи.Ссылка;
			ОбъектДляЗаписи.ДополнительныеСвойства.Вставить("Оригинал",ОбъектДляЗаписи.Ссылка);
		Иначе
			ДокументОригинал = ОбъектДляЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектДляЗаписи.ДополнительныеСвойства.Вставить("Оригинал",ДокументОригинал);
		КонецЕсли;		
					
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Оплата", МетаданныеДокумента) Тогда
			Если (РежимЗаписи = РежимЗаписиДокумента.Проведение)
				Или (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
				ОбъектДляЗаписи.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
			КонецЕсли;
		КонецЕсли;
		
		Если (Не ПроверкаВстречки(ОбъектДляЗаписи, ДокументОригинал)) Или
			(Не ПроверкаПречека(ОбъектДляЗаписи, ДокументОригинал)) Или
			(Не ПроверкаККМ(ОбъектДляЗаписи, ДокументОригинал, РежимЗаписи)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		
		Попытка
			Если РежимЗаписи<>РежимЗаписиДокумента.Запись Тогда
				Если ОбъектДляЗаписи.Проведен Тогда
					ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
				Иначе
					ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);	
				КонецЕсли;
			КонецЕсли;
		Исключение
			____Сообщение(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецПопытки;
	
	Если Не ОбъектДляЗаписи.ЭтоНовый() Тогда
		ОбъектДляЗаписи.Номер		= ДокументОригинал.Номер;
		ОбъектДляЗаписи.Дата		= ДокументОригинал.Дата;
	КонецЕсли;
	
	ОбъектДляЗаписи.ПометкаУдаления = ДокументОригинал.ПометкаУдаления;
	ОбъектДляЗаписи.Проведен		= ДокументОригинал.Проведен;
	ОбъектДляЗаписи.Модуль			= ДокументОригинал.Модуль;
	ОбъектДляЗаписи.Распечатан		= ДокументОригинал.Распечатан;
	ОбъектДляЗаписи.Сотрудник		= ДокументОригинал.Сотрудник;
	ОбъектДляЗаписи.Стол			= ДокументОригинал.Стол;
	
	// Из-за каких-то внутренних ошибок 1С, полсе открытия окна процесса печати, активизированной может окозаться не текущая форма.
	ПолучитьСерверFrontOffice().АктивизироватьФорму();
	
	// Предупреждение.
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОписаниеОшибки = НСтр("ru=' Причина неопределенна';uk=' Причину помилки не визначено'") ;
	КонецЕсли;
	FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію'")  + ОписаниеОшибки + ".");	
	Возврат Ложь;
	
КонецФункции

// Чистяков Павел 02.09.2011 12:38:15 
Функция ОтложеннаяПечатьРеализации(ОбъектДляЗаписи, ПечататьВстречку=Истина, ПечататьККМ=Истина, ПечататьПречек=Истина) Экспорт
	
	ОписаниеОшибки		= "";
	МетаданныеДокумента = ОбъектДляЗаписи.Метаданные();
	ДокументОригинал	= ОбъектДляЗаписи.ДополнительныеСвойства.Оригинал;
	Ответ				= Неопределено;
	
	Попытка //Костенюк Александр 06.11.2013
		//Если ПечататьВстречку Тогда
		//Костенюк Александр-Старт 11.06.2012
		Если ПечататьВстречку И ВыводитьВстречкуНаПечать Тогда
			//Костенюк Александр-Финиш 11.06.2012
			ОбъектДляЗаписи.Печать("Встречка",,,,Истина);	
		КонецЕсли;
	Исключение //Костенюк Александр 06.11.2013
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Ошибка печати встречки.';uk='Помилка друку зустрічки.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Попытка //Костенюк Александр 06.11.2013
		Если ПечататьПречек
			И ОбъектДляЗаписи.Модуль=Перечисления.МодулиИПодсистемы.Ресторан
			И ОбъектДляЗаписи.Распечатан
			И Не ОбъектДляЗаписи.ДополнительныеСвойства.Оригинал.Распечатан Тогда
			ОбъектДляЗаписи.Печать("Пречек",,,,Истина);	
		КонецЕсли;
	Исключение //Костенюк Александр 06.11.2013
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Ошибка печати пречека.';uk='Помилка друку пречеку.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
		////Костенюк Александр-Старт 31.07.2012
		//// Раздельная печать предчеков по гостям
		//Если ПечататьПречек
		//	И ОбъектДляЗаписи.Модуль = Перечисления.МодулиИПодсистемы.Ресторан
		//	И Не ОбъектДляЗаписи.ДополнительныеСвойства.Оригинал.Распечатан Тогда
		//	Если ОбъектДляЗаписи.НомерКлиента = 0 Тогда
		//		Если ОбъектДляЗаписи.Распечатан Тогда
		//			ОбъектДляЗаписи.Печать("Пречек",,,,Истина);
		//		КонецЕсли;
		//	Иначе
		//		НайденнаяСтрока = ОбъектДляЗаписи.Клиенты.Найти(ОбъектДляЗаписи.НомерКлиента, "НомерКлиента");
		//		Если НайденнаяСтрока <> Неопределено Тогда
		//			Если НайденнаяСтрока.ПречекРаспечатан Тогда
		//				ОбъектДляЗаписи.Печать("Пречек",,,,Истина);
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		////Костенюк Александр-Финиш 31.07.2012
		
	Попытка //Костенюк Александр 06.11.2013
			
		Если ПечататьККМ
			И ТипЗнч(ОбъектДляЗаписи)=Тип("ДокументОбъект.РеализацияТоваровУслуг")
			И (ДокументОригинал=Неопределено ИЛИ ОбъектДляЗаписи.Проведен<>ДокументОригинал.Проведен) Тогда
			
			Если ОбъектДляЗаписи.ДополнительныеСвойства.Свойство("ТаблицаЧековККМРеализации") Тогда
				ТаблицаЧековККМРеализации = ОбъектДляЗаписи.ДополнительныеСвойства.ТаблицаЧековККМРеализации;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
			Если ОбъектДляЗаписи.ДополнительныеСвойства.Свойство("ТаблицаЧековККМВозвратов") Тогда
				ТаблицаЧековККМВозвратов = ОбъектДляЗаписи.ДополнительныеСвойства.ТаблицаЧековККМВозвратов;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
			Если ОбъектДляЗаписи.Проведен Тогда
				
				СписокОрганизаций	= Новый СписокЗначений;
				СписокКасс			= Новый СписокЗначений;
				ТабличныеЧасти = Новый Массив; 
				ТабличныеЧасти.Добавить("Товары"); 
				//ТабличныеЧасти.Добавить("Услуги"); //Костенюк Александр-Закомментировано 22.04.2013
				
				Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
					Для Каждого СтрокаТабличнойЧасти Из ОбъектДляЗаписи[ТабличнаяЧасть] Цикл
						Если (Не СписокОрганизаций.НайтиПоЗначению(СтрокаТабличнойЧасти.Организация) = Неопределено) Тогда
							Продолжить;
						КонецЕсли;
						
						Если (СтрокаТабличнойЧасти.Сумма = 0) Тогда
							//Продолжить; //Костенюк Александр-Закомментировано 12.01.2015
							//Костенюк Александр-Старт 12.01.2015
							Если (СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Модификатор) ИЛИ
								(СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Условие) Тогда
								Продолжить;
							КонецЕсли;
							//Костенюк Александр-Финиш 12.01.2015
						КонецЕсли;
						
						СписокОрганизаций.Добавить(СтрокаТабличнойЧасти.Организация);
						
						Результат = РаботаСТорговымОборудованием.ВернутьТЗсоСпискомКассОрганизации(СтрокаТабличнойЧасти.Организация,ПолучитьСерверТО().ПолучитьКомпьютерТО()); 
						Для Каждого СтрокаКассы Из Результат Цикл
							СписокКасс.Добавить(СтрокаКассы.КассаККМ);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;		
				
				Для Каждого ЗначениеСписка Из СписокКасс Цикл			
					ДокументЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
					ДокументЧекККМ.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
					ДокументЧекККМ.Заполнить(Новый Структура("Основание,КассаККМ", ОбъектДляЗаписи.Ссылка,ЗначениеСписка.Значение));
					Если Не ПолучитьСерверFrontOffice().ПечатьККМ(ОбъектДляЗаписи, ДокументЧекККМ, Ответ) Тогда
						FrontOffice.ВывестиПредупреждение(Ответ);
						ДокументЧекККМ = Неопределено;
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				СписокКассККМ = Новый СписокЗначений;
				
				Для Каждого СтрокаТаблицы Из ТаблицаЧековККМРеализации Цикл
					СписокКассККМ.Добавить(СтрокаТаблицы.КассаККМ);
				КонецЦикла;
				
				Если ПроверкаОборудованияДляПечатиНаККМ(, СписокКассККМ, ОбъектДляЗаписи.ОтражатьВНалоговомУчете) Тогда
					Для Каждого СтрокаТаблицы Из ТаблицаЧековККМРеализации Цикл				
						ДокументЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
						ДокументЧекККМ.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
						ДокументЧекККМ.Заполнить(СтрокаТаблицы.Ссылка);
						Если Не ПолучитьСерверFrontOffice().ПечатьККМ(ОбъектДляЗаписи, ДокументЧекККМ, Ответ, СтрокаТаблицы.Ссылка.ЧекПробитНаККМ) Тогда
							ДокументЧекККМ = Неопределено;
							Возврат Ложь;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПолучитьСерверFrontOffice().АктивизироватьФорму();

	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		
		// Из-за каких-то внутренних ошибок 1С, полсе открытия окна процесса печати, активизированной может окозаться не текущая форма.
		ПолучитьСерверFrontOffice().АктивизироватьФорму();
		
		// Предупреждение.
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = НСтр("ru=' Причина неопределенна';uk=' Причину помилки не визначено'") ;
		КонецЕсли;
		
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію'")  + ОписаниеОшибки + ".");
		
		ДокументЧекККМ = Неопределено;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ТаблицаЧековККМРеализации 	= Неопределено;
	ТаблицаЧековККМВозвратов 	= Неопределено;
	
	Возврат Истина;
	
КонецФункции

// Игорь 09.11.2011 15:04:05
Процедура ПолучитьСвязаныеПозиции(Родитель, МассивПозиций) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Родитель);		
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель = &Родитель
	|	И (НЕ Номенклатура.ПометкаУдаления)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивПозиций = Результат.ВыгрузитьКолонку("Ссылка");			
КонецПроцедуры

// Чистяков Павел 07.11.2011 12:37:06 
Процедура ПроверитьСообщение(ДокументОбъект)
	    ДисконтнаяКарта = ДокументОбъект.ДисконтнаяКарта;
	Если НЕ УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКоментарииИнформационныхКарт) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта.Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		FrontOffice.ВывестиПредупреждение(ДисконтнаяКарта.Комментарий);
		
		Если УправлениеПользователями.УпроститьЗначениеПрава(УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.ПодтверждатьСообщенияДисконтныхКарт)) Тогда
			Прервать;
		КонецЕсли;
		
		Если ПолучитьСерверFrontOffice().Авторизация(ПланыВидовХарактеристик.ПраваПользователей.ПодтверждатьСообщенияДисконтныхКарт, Истина) Тогда
			прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДеньРождение(ДокументОбъект)
	    ДисконтнаяКарта = ДокументОбъект.ДисконтнаяКарта;
	Если НЕ УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.ИспользоватьДниРождения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта.ДатаРождения) Тогда
		Возврат;
	КонецЕсли;
	
	ЭталонВремени	= ТекущаяДата();
	РазницаВДнях	= (Дата(1,Месяц(ЭталонВремени),День(ЭталонВремени))
	- Дата(1,Месяц(ДисконтнаяКарта.ДатаРождения),День(ДисконтнаяКарта.ДатаРождения)))/(24*60*60);
	Если РазницаВДнях<0 Тогда
		РазницаВДнях = -РазницаВДнях;
	КонецЕсли; 
	РазницаВДнях1	= (Дата(2,Месяц(ЭталонВремени),День(ЭталонВремени))
	- Дата(1,Месяц(ДисконтнаяКарта.ДатаРождения),День(ДисконтнаяКарта.ДатаРождения)))/(24*60*60);
	Если РазницаВДнях1<0 Тогда
		РазницаВДнях1 = -РазницаВДнях1;
	КонецЕсли; 
	РазницаВДнях2	= (Дата(1,Месяц(ЭталонВремени),День(ЭталонВремени))
	- Дата(2,Месяц(ДисконтнаяКарта.ДатаРождения),День(ДисконтнаяКарта.ДатаРождения)))/(24*60*60);
	Если РазницаВДнях2<0 Тогда
		РазницаВДнях2 = -РазницаВДнях2;
	КонецЕсли;
	
	РазницаВДнях	= Мин(РазницаВДнях1,Мин(РазницаВДнях2,РазницаВДнях));
	
	Если РазницаВДнях>Константы.ИнтервалКонтроляДнейРождений.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДнейРождений = ПолучитьФорму("ФормаПоздравления");
	ФормаДнейРождений.ДисконтнаяКарта = ДисконтнаяКарта;
	Результат = ФормаДнейРождений.ОткрытьМодально();
	
	Если Результат=Истина  Тогда
		ОбъектКарты = ДисконтнаяКарта.ПолучитьОбъект();
		ОбъектКарты.ПоследнееПоздравление = ТекущаяДата();
		ОбъектКарты.Записать();
	КонецЕсли; 
	
КонецПроцедуры
	
////Сообщения	
Процедура ПоискСообщенияВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры // ПоискКлиентаВыбор()

Процедура ПоискСообщенияПриИзмененииДанных(Элемент) Экспорт
	
	// Табличное поле.
	ТабличноеПоле = Элемент; 
	ТабличноеПоле.Шапка = Ложь;
	ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
	
КонецПроцедуры // ТаблицаПоискаКлиентаПрочитать()

Процедура ПоискСообщенияПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт		
	СтандартнаяОбработка = Ложь;		
	// Данные.
	Данные = Элемент.Данные();
	Данные.Очистить();	
	// Выборка данных.
	Если ЗначениеЗаполнено(Значение) Тогда	
		Запрос = Новый Запрос; 
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 25
		|	РегистрСведенийСообщения.Сообщения КАК Сообщения
		|ИЗ
		|	РегистрСведений.РегистрСведенийСообщения КАК РегистрСведенийСообщения
		|ГДЕ
		|	РегистрСведенийСообщения.Сообщения ПОДОБНО &Сообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сообщения";		
		Запрос.УстановитьПараметр("Сообщения", "%" + Значение + "%");
		
		Выборка= Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы				= Данные.Добавить();	
			СтрокаТаблицы.Сообщения	= Выборка.Сообщения;
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = Неопределено;
	
	// Обновление.
	Элемент.ОбновитьСтроки();		
КонецПроцедуры // ПоискКлиентаПриПоискеЗначения()

Процедура ПоискСообщенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	// ОбъектПредставление.
	ОформлениеСтроки.Ячейки("Сообщения").УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
	
КонецПроцедуры // ПоискКлиентаПриВыводеСтроки()

Функция ВыводСообщенийРабочимЦентрам(ДокументОбъект, Значение = Неопределено) Экспорт   	
	
	Если УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeВозможностьЗапоминатьТекстСообщения) Тогда
		
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Сообщения", Метаданные.РегистрыСведений.РегистрСведенийСообщения.Измерения.Сообщения.Тип);	
		ЗначениеВозврата = Значение;
		
		Если FrontOffice.ПоискСтроки(ЗначениеВозврата, НСтр("ru='Сообщение';uk='Повідомлення'") ,,,, Данные, "Сообщения" , Ложь , ЭтотОбъект , "ПоискСообщения") Тогда
			
			Если ТипЗнч(ЗначениеВозврата)=Тип("Строка") Тогда
				Значение = СокрЛП(ЗначениеВозврата);
			Иначе
				Значение = СокрЛП(ЗначениеВозврата.Сообщения);
			КонецЕсли;
			
			РабочийЦентр = Неопределено;						
			Если ВыборРабочегоЦентра(РабочийЦентр) Тогда	
				
				ТабДокумент = РегистрыСведений.РегистрСведенийСообщения.ПечатьСообщения(ДокументОбъект, РабочийЦентр, Значение);
				ОшибкаТО = ПолучитьСерверТО().ПечатьСообщения(РабочийЦентр.Оборудование, ТабДокумент);
				
				Если УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeВозможностьЗапоминатьТекстСообщения) Тогда
					РегистрыСведений.РегистрСведенийСообщения.СоздатьЗаписьСообщения(Значение);
				КонецЕсли;
				
				Возврат Истина;
			Иначе		
				Возврат Ложь;	
			КонецЕсли;
		Иначе	
			Возврат Ложь;
		КонецЕсли;		
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РегистрСведенийСообщения.Сообщения КАК Ссылка,
		|	ЛОЖЬ КАК ЭтоГруппа,
		|	ВЫРАЗИТЬ(РегистрСведенийСообщения.Сообщения КАК СТРОКА(50)) КАК Наименование,
		|	РегистрСведенийСообщения.Сообщения КАК Представление
		|ИЗ
		|	РегистрСведений.РегистрСведенийСообщения КАК РегистрСведенийСообщения");
		ТаблицаСообщений = Запрос.Выполнить().Выгрузить();
		
		СтрокаТаблицы = Неопределено;
		
		// Выбор.
		Если Не Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите сообщение';uk='Виберіть повідомлення'"), ТаблицаСообщений, "Картинка,Наименование") Тогда
			Возврат Ложь;
		КонецЕсли;
		Значение = СтрокаТаблицы.Представление;
		
		РабочийЦентр = Неопределено;						
		Если ВыборРабочегоЦентра(РабочийЦентр) Тогда	
			ТабДокумент = РегистрыСведений.РегистрСведенийСообщения.ПечатьСообщения(ДокументОбъект, РабочийЦентр, Значение);
			ОшибкаТО = ПолучитьСерверТО().ПечатьСообщения(РабочийЦентр.Оборудование, ТабДокумент);
			Возврат Истина;
		Иначе		
			Возврат Ложь;	
		КонецЕсли;
		
		ТаблицаСообщений = Неопределено;
		
	КонецЕсли;		
	
КонецФункции

// Мирошниченоко Игорь 25.11.2011 13:16:21
Процедура УстановитьВременыеПозиции(Документ, ТабличноеПолеЗаказа , ОбновлятьСтроки = Истина) Экспорт 
	
	ПересчитатьСтроки = Ложь;    
	Для каждого Стр Из Документ.ДополнительныеСвойства.Позиции Цикл    
		Если Стр.Номенклатура.Временной и Стр.Распечатан Тогда
			Если Стр.ДатаОкончанияПериода = ОбщегоНазначенияСервер.ПолучитьПустуюДату() и не Стр.Выполненн Тогда
				Секунды = ОбщегоНазначения.ПолучитьРазностьДат(Стр.ДатаНачалаПериода, ТекущаяДата() );
				Стр.Количество = ?(Секунды = 0, 0 , Число(Формат(Секунды /60 /60 ,"ЧЦ=15; ЧДЦ=3; ЧГ=")));      
				ПересчитатьСтроки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПересчитатьСтроки Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, Документ.ДополнительныеСвойства.Скидки );
		Если ОбновлятьСтроки Тогда
			ТабличноеПолеЗаказа.ОбновитьСтроки();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаСправочников(ИмяСправочника, ТекущееИмя, ТекущаяСтрокаЗаказа = Неопределено, ВыбранноеЗначениеМеню = Неопределено) Экспорт	
	Если ВыбранноеЗначениеМеню <> Неопределено  Тогда
		РезультатПроверки = ТипЗнч(ВыбранноеЗначениеМеню.Номенклатура) = Тип("СправочникСсылка.Номенклатура") и ТекущаяСтрокаЗаказа.Номенклатура <> ВыбранноеЗначениеМеню.Номенклатура;
	Иначе 	
		РезультатПроверки = Истина;	
	КонецЕсли; 
	
	Если ИмяСправочника <> ТекущееИмя или РезультатПроверки Тогда
		Возврат Истина;	
	Иначе 
		Возврат Ложь; 
	КонецЕсли; 
	
КонецФункции

Функция ЕстьЛиМодификаторы(Данные, Идентификатор) Экспорт
	
	Если Данные.НайтиСтроки(Новый Структура("Владелец,ВидНоменклатуры", Идентификатор, Перечисления.ТипыСтрокЗаказов.Модификатор)).Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

//Костенюк Александр-Старт 28.04.2012
// Функция автоматически создает документ заказ при включенной соответствующей настройке пользователя
Функция АвтоматическоеСозданиеЗаказа() Экспорт
Если УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeАвтоматическоеСозданиеЗаказаПриВходеВСистему) Тогда
	ДокументСоздать(Документы.РеализацияТоваровУслуг.ПустаяСсылка(), Перечисления.МодулиИПодсистемы.Ресторан);
	Возврат Истина;
Иначе
	Возврат Ложь;
КонецЕсли;
КонецФункции
//Костенюк Александр-Финиш 28.04.2012

//Костенюк Александр-Старт 11.05.2012
// Функция осуществляет ввод/поиск маршрута.
//
Функция ВыборМаршрута(Значение = Неопределено) Экспорт

// Таблица маршрутов.
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	МаршрутыДоставки.Ссылка КАК Ссылка,
               |	МаршрутыДоставки.Владелец КАК Владелец
               |ИЗ
               |	Справочник.МаршрутыДоставки КАК МаршрутыДоставки
               |ГДЕ
               |	НЕ МаршрутыДоставки.ПометкаУдаления
               |
               |УПОРЯДОЧИТЬ ПО
               |	Владелец УБЫВ
               |ИТОГИ
               |	МАКСИМУМ(Владелец) КАК Ссылка
               |ПО
               |	Владелец";
Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Владелец");
СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);

// Выбор.
Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите маршрут доставки';uk='Виберіть маршрут доставки'"), ДеревоЗначений, "Картинка,Ссылка") Тогда
	Значение = СтрокаДерева.Ссылка;
	Возврат Истина;
КонецЕсли;

Возврат Ложь;

КонецФункции // ВыборМаршрута()
//Костенюк Александр-Финиш 11.05.2012

//Костенюк Александр-Старт 23.05.2012
// Процедура добавляет акции в документ
//
// Параметры
// ДокументОбъект – Тип: ДокументОбъект.РеализацияТоваровУслуг, документ в которые будут добавлены акции 
// УсловиеАкции - Тип: Перечисления.УсловияАкции, условие акции, которое применимо к документу
// ПроверятьАктуальность - Тип: Булево, признак необходимости проверки на актуальность ранее добавленных в документ акций
//
Процедура ПрименитьАкции(ДокументОбъект, УсловиеАкции, ПроверятьАктуальность = Ложь, ТабличноеПолеЗаказа = Неопределено) Экспорт

Если ДокументОбъект.Проведен ИЛИ
	ДокументОбъект.ПометкаУдаления Тогда
	Возврат;
КонецЕсли;

ТаблицаАкций = ОбработкаТабличныхЧастей.ПолучитьТаблицуАкцийРаспространяющихсяНаДокумент(ДокументОбъект, УсловиеАкции);

Акции = Новый ТаблицаЗначений;
Акции.Колонки.Добавить("Актуальность");
Акции.Колонки.Добавить("ТипАкции");
Акции.Колонки.Добавить("Номенклатура");
Акции.Колонки.Добавить("Количество");

Если НЕ ТаблицаАкций = Неопределено Тогда
	
	Для Каждого СтрокаТаблицы Из ТаблицаАкций Цикл
		
		ТипАкции 		= СокрЛП(Строка(СтрокаТаблицы.ТипАкции));
		Номенклатура 	= СокрЛП(Строка(СтрокаТаблицы.Номенклатура));
		Количество 		= 1;
		Актуальность 	= Ложь;
		
		Если СтрокаТаблицы.ТипАкции.Условие = Перечисления.УсловияАкции.ПоВидуСертификата Тогда
			Текст = НСтр("ru='Документ попадает под тип акции "+""""+ТипАкции+""""+"."+Символы.ПС+"Отмена сертификата будет невозможна!"+Символы.ПС+"Добавить акционный товар "+""""+Номенклатура+""""+" в документ?';uk='Документ потрапляє тип акції "+""""+ТипАкции+""""+"."+Символы.ПС+"Скасування сертифіката буде неможливим!"+Символы.ПС+"Додати акційний товар "+""""+Номенклатура+""""+" в документ?'");
		Иначе
			Текст = НСтр("ru='Документ попадает под тип акции "+""""+ТипАкции+""""+"."+Символы.ПС+"Добавить акционный товар "+""""+Номенклатура+""""+" в документ?';uk='Документ потрапляє тип акції "+""""+ТипАкции+""""+"."+Символы.ПС+"Додати акційний товар "+""""+Номенклатура+""""+" в документ?'");
		КонецЕсли;
		
		Если ПроверятьАктуальность Тогда
			// Производим поиск акций в табличной части документа
			НайденнаяСтрока = ДокументОбъект.Акции.Найти(СтрокаТаблицы.ТипАкции, "ТипАкции");
		Иначе
			НайденнаяСтрока = Неопределено;
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			Если FrontOffice.ВывестиВопрос(Текст, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				// Запрос количества
				ВводКоличестваАкционногоТовара(Количество, , ДокументОбъект.КоличествоКлиентов);
				Актуальность = Истина;
			КонецЕсли;
			
			// Добавляем акции в таблицу
			НоваяСтрока 				= Акции.Добавить();
			НоваяСтрока.Актуальность	= Актуальность;
			НоваяСтрока.ТипАкции 		= СтрокаТаблицы.ТипАкции;
			НоваяСтрока.Номенклатура	= СтрокаТаблицы.Номенклатура;
			НоваяСтрока.Количество 		= Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавляем акции в документ
	Если Акции.Количество() Тогда
		Для Каждого ИсходнаяСтрока ИЗ Акции Цикл
			НоваяСтрока = ДокументОбъект.Акции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		КонецЦикла;
		АкцииКопия = Акции.Скопировать();
		АкцииКопия.Свернуть("Актуальность");
		// актуальные позиции добавим в табличную часть товаров
		Если АкцииКопия.Количество() Тогда
			Товары = ДокументОбъект.Товары.Выгрузить();
			ОбработкаТабличныхЧастей.ЗаполнитьТаблицуАкционнымиТоварами(ДокументОбъект, Товары, Акции);
			Товары.Колонки.Добавить("Услуга");
			Товары.ЗаполнитьЗначения(Ложь, "Услуга");
			Для Каждого СтрокаТаблицы ИЗ Товары Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТипАкции) Тогда
					Продолжить;
				КонецЕсли;
				ТаблицаЗаказаДобавитьПозицию(ТабличноеПолеЗаказа, СтрокаТаблицы, СтрокаТаблицы.Количество);
				Если СтрокаТаблицы.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Комплект Тогда
					РезультатВыбора = ОткрытьФормуВыбораКомплекта(ТабличноеПолеЗаказа); 
				КонецЕсли;
			КонецЦикла;
			ДокументОбъект.Товары.Загрузить(Товары);
		КонецЕсли;
	КонецЕсли;
	
КонецЕсли;

ТаблицаАкций 	= Неопределено;
Акции 			= Неопределено;
АкцииКопия 		= Неопределено;

КонецПроцедуры
//Костенюк Александр-Финиш 23.05.2012

//Костенюк Александр-Старт 22.05.2012
// Функция осуществляет ввод количества акционного товара
//
// Параметры
// Значение - значение по умолчанию для подстановки
// Мин - Тип: Число, минимальное значение
// Макс - Тип: Число, максимальное значение
//
// Возвращаемое значение:
// Истина, Ложь
//
Функция ВводКоличестваАкционногоТовара(Значение = Неопределено, Мин = Неопределено, Макс = Неопределено) Экспорт

// Ввод (допускаетсяя ввод количетсва в два раза превышающее максимально допустимое).
Возврат FrontOffice.ВводЧисла(Значение, НСтр("ru='К-во акционного товара';uk='К-сть акційного товару'") , Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, Мин, Макс);

КонецФункции
//Костенюк Александр-Финиш 22.05.2012

//Костенюк Александр-Старт 28.05.2012
//
// Процедура добавляет блюдо/изменяет количество блюда в черном/белом списке
// 
// Параметры:
// Номенклатура - Тип: СправочникСсылка.Номенклатура, номенклатура, которую нужно добавить в список
// Ресторан - Тип: СправочникСсылка.Рестораны, ресторан, к которому относится данное блюдо
// ИмяРегистра - Тип: Строка, имя регистра, в который нужно добавить блюдо
//
Процедура УстановитьПозициюСписка(Номенклатура, Количество = 0, Ресторан, ИмяРегистра = "ЧерныйСписокНоменклатуры") Экспорт

ПараметрыУчета = ПолучитьПараметрыУчета();
Если ИмяРегистра = "ЧерныйСписокНоменклатуры" Тогда
	УчетКоличества = ПараметрыУчета.ЧерныйСписокНоменклатурыУчетКоличества;
ИначеЕсли ИмяРегистра = "БелыйСписокНоменклатуры" Тогда
	УчетКоличества = ПараметрыУчета.БелыйСписокНоменклатурыУчетКоличества;
КонецЕсли;

Если УчетКоличества Тогда
	Если НЕ ВводКоличестваТовара(Количество, Номенклатура) Тогда
		Возврат;
	КонецЕсли;
КонецЕсли;

РегистрыСведений[ИмяРегистра].УстановитьПозицию(Номенклатура, Количество, ?(ЗначениеЗаполнено(Ресторан), Ресторан, ПараметрыСеанса.ТекущийРесторан), ИмяРегистра);

ПереобновитьЧерныйБелыйСписок();

КонецПроцедуры
//Костенюк Александр-Финиш 28.05.2012

//Костенюк Александр-Старт 28.05.2012
//
// Процедура удаляет блюдо из черного/белого списка
// 
// Параметры:
// Номенклатура - Тип: СправочникСсылка.Номенклатура, блюдо, которое нужно удалить из списка
// Ресторан - Тип: СправочникСсылка.Рестораны, ресторан, к которому относится данное блюдо
// ИмяРегистра - Тип: Строка, имя регистра, из которого нужно удалить блюдо
//
Процедура УдалитьПозициюИзСписка(Номенклатура, Ресторан, ИмяРегистра = "ЧерныйСписокНоменклатуры") Экспорт

РегистрыСведений[ИмяРегистра].УдалитьПозицию(Номенклатура, ?(ЗначениеЗаполнено(Ресторан), Ресторан, ПараметрыСеанса.ТекущийРесторан), ИмяРегистра);

ПереобновитьЧерныйБелыйСписок();

КонецПроцедуры
//Костенюк Александр-Финиш 28.05.2012

//Костенюк Александр-Старт 12.06.2012
//
// Процедура производит заполнение кнопок командной панели
// 
// Параметры:
// КоманднаяПанель - Тип: ОбработкаОбъект.TouchКоманднаяПанель
// Количество - Тип: Число, количество добавляемых кнопок
//
Процедура ЗаполнитьКнопкиКоманднойПанели(КоманднаяПанель, Количество = 1, ВыделятьКнопкуПоУмолчанию = Ложь, ДокументОбъект = Неопределено) Экспорт

КоманднаяПанель.Кнопки.Очистить();
КоманднаяПанель.МежкнопочныйИнтервал = 0;

КнопкаПоУмолчанию 		= КоманднаяПанель.Кнопки.Добавить("Действие"+"0", , НСтр("ru='Все';uk='Всі'"), "ДействияФормыГостиНомерГостяНажатие");
КнопкаПоУмолчанию.Тег 	= "Действие"+"0";

Если ВыделятьКнопкуПоУмолчанию Тогда
	КнопкаПоУмолчанию.ЦветФонаКнопки = ЦветаСтиля.ЦветФонаВыделенияПоля;
КонецЕсли;

Для Инд = 0 По (Количество - 1) Цикл
	
	ИмяКнопки 		= Строка(Инд + 1);
	НомерКлиента 	= Инд + 1;
	
	Кнопка 			= КоманднаяПанель.Кнопки.Добавить("Действие"+ИмяКнопки, , ИмяКнопки, "ДействияФормыГостиНомерГостяНажатие");
	Кнопка.Тег 		= "Действие"+ИмяКнопки;
	
	ТипКлиента = ПолучитьТипКлиентаПоНомеру(ДокументОбъект, НомерКлиента);
	
	Если НЕ ТипКлиента = Неопределено Тогда
		ЗаполнитьКнопкуКоманднойПанели(КоманднаяПанель, Кнопка, ТипКлиента.Иконка, ТипКлиента);
	КонецЕсли;
	
КонецЦикла;

КоманднаяПанель.ОбновитьКнопки();

КонецПроцедуры
//Костенюк Александр-Финиш 12.06.2012

//Костенюк Александр-Старт 29.05.2012
//
// Процедура производит перекрашивание кнопок командной панели
// 
// Параметры:
// КоманднаяПанель - Тип: ОбработкаОбъект.TouchКоманднаяПанель
// КнопкаИсключение - Тип: ОбработкаОбъект.TouchКнопкаКоманднойПанели, кнопка, которую не нужно перекрашивать
//
Процедура ПерекраситьКнопкиКоманднойПанели(КоманднаяПанель, КнопкаИсключение) Экспорт

Для Инд = 0 По (КоманднаяПанель.Кнопки.Количество() - 1) Цикл
	Кнопка = КоманднаяПанель.Кнопки.Получить(Инд);
	Если Кнопка.Текст = КнопкаИсключение.Текст Тогда
		УстановитьЦветКнопки(Кнопка, ЦветаСтиля.ЦветФонаВыделенияПоля);
	Иначе
		УстановитьЦветКнопки(Кнопка, ЦветаСтиля.ЦветФонаКнопки);
	КонецЕсли;
КонецЦикла;

КоманднаяПанель.ОбновитьКнопки();

КонецПроцедуры
//Костенюк Александр-Финиш 29.05.2012

//Костенюк Александр-Старт 30.05.2012
//
// Процедура устанавливает цвет кнопки командной панели
// 
// Параметры:
// КоманднаяПанель - Тип: ОбработкаОбъект.TouchКоманднаяПанель
// Цвет - Тип: ЦветаСтиля
//
Процедура УстановитьЦветКнопки(Кнопка, Цвет = Неопределено) Экспорт
Если Цвет = Неопределено Тогда
	Цвет = ЦветаСтиля.ЦветФонаКнопки;
КонецЕсли;
Кнопка.ЦветФонаКнопки = Цвет;
КонецПроцедуры
//Костенюк Александр-Финиш 30.05.2012

//Костенюк Александр-Старт 30.05.2012
//
// Процедура устанавливает отбор строк заказа по текущему клиенту
// 
// Параметры:
// ТабличноеПоле - Тип: ОбработкаОбъект.TouchТабличноеПоле
// НомерКлиента - Тип: Число, номер текущего клиента
//
Процедура УстановитьОтборСтрокЗаказаПоНомеруКлиента(ТабличноеПоле, НомерКлиента) Экспорт

Отбор = Новый Структура;
Если НомерКлиента <> 0 Тогда
	Отбор.Вставить("НомерКлиента", НомерКлиента);
Иначе
	Отбор.Очистить();
КонецЕсли;

ТабличноеПоле.Отбор = Отбор;
ТабличноеПоле.ОбновитьСтроки();

КонецПроцедуры
//Костенюк Александр-Финиш 30.05.2012

//Костенюк Александр-Старт 05.06.2012
//
// Процедура ввода номера клиента
// 
// Параметры:
// Значение - Тип: Число
// Мин - Тип: Число, минимальное значение
// Макс - Тип: Число, максимальное значение
//
Функция ВводНомераКлиента(Значение = Неопределено, Мин = Неопределено, Макс = Неопределено) Экспорт

// Нормализация.
Если (Значение = Неопределено) Тогда
	Значение = Число(Истина);
КонецЕсли;

Разрядность 			= Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.НомерКлиента.Тип.КвалификаторыЧисла.Разрядность; 
РазрядностьДробнойЧасти = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.НомерКлиента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;

// Ввод.
Возврат FrontOffice.ВводЧисла(Значение, НСтр("ru='Введите номер клиента';uk='Введіть номер клієнта'") , Разрядность, РазрядностьДробнойЧасти, Мин, Макс);

КонецФункции // ВводНомераКлиента()
//Костенюк Александр-Финиш 05.06.2012

//Костенюк Александр-Старт 11.06.2012
//
// Процедура выбора типа контрагента
// 
// Параметры:
// Значение - Тип: СправочникСсылка.ТипыКонтрагентов
//
Функция ВыборТипаКонтрагента(Значение = Неопределено) Экспорт

// Данные.
Запрос = Новый Запрос("ВЫБРАТЬ *, Иконка КАК Иконка, Представление КАК Наименование ИЗ ВременнаяТипыКонтрагентов ГДЕ НЕ ПометкаУдаления");
Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
ТаблицаЗначений = Запрос.Выполнить().Выгрузить();

СписокЗначений = Новый СписокЗначений;
Для Каждого СтрокаТаблицы ИЗ ТаблицаЗначений Цикл
	Картинка 			= Новый Картинка(СтрокаТаблицы.Иконка.Изображение.Получить());
	ЗначениеЭлемента 	= СтрокаТаблицы.Ссылка;
	Наименование 		= СокрЛП(СтрокаТаблицы.НаименованиеСокращенное);
	СписокЗначений.Добавить(ЗначениеЭлемента, Наименование, Истина, Картинка);
КонецЦикла;
СтрокаСписка = СписокЗначений.НайтиПоЗначению(Значение);
	
// Выбор.
Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзСпискаЗначений(СтрокаСписка, НСтр("ru='Выберите тип клиента';uk='Виберіть тип клієнта'"), СписокЗначений, "Картинка,Значение,Представление") Тогда
	Значение = СтрокаСписка.Значение;
	Возврат Истина;
КонецЕсли;

ТаблицаЗначений = Неопределено;

Возврат Ложь;

КонецФункции
//Костенюк Александр-Финиш 11.06.2012

//Костенюк Александр-Старт 12.06.2012
//
// Процедура производит заполнение текущей кнопи командной панели
// 
// Параметры:
// КоманднаяПанель - Тип: ОбработкаОбъект.TouchКоманднаяПанель
// Кнопка - Тип: ОбработкаОбъект.TouchКнопкаКоманднойПанели
// Картинка - Тип: СправочникСсылка.__Изображения
// ТипКлиента - Тип: СправочникСсылка.ТипыКонтрагентов
//
Процедура ЗаполнитьКнопкуКоманднойПанели(КоманднаяПанель, Кнопка, Картинка, ТипКлиента) Экспорт

Кнопка.Отображение 	= ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
Кнопка.Картинка 	= Новый Картинка(Картинка.Изображение.Получить());
Кнопка.Текст 		= "";
Кнопка.Текст 		= СтрЗаменить(Кнопка.Тег, "Действие", "");
Кнопка.Текст 		= Кнопка.Текст + Символы.ПС + СокрЛП(ТипКлиента.НаименованиеСокращенное);

КоманднаяПанель.ОбновитьКнопки();

КонецПроцедуры
//Костенюк Александр-Финиш 12.06.2012

//Костенюк Александр-Старт 11.06.2012
//
// Процедура добавляет строку в табличную часть документа
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// НомерКлиента - Тип: Число
// ТипКлиента - Тип: СправочникСсылка.ТипыКонтрагентов
//
Процедура ТабличнаяЧастьКлиентыДобавитьСтроку(ДокументОбъект, НомерКлиента, ТипКлиента, ДокументИзменен) Экспорт

Если ДокументОбъект.Проведен ИЛИ
	ДокументОбъект.ПометкаУдаления Тогда
	Возврат;
КонецЕсли;

// Производим поиск клиента в табличной части документа
НайденнаяСтрока = ДокументОбъект.Клиенты.Найти(НомерКлиента, "НомерКлиента");
Если НайденнаяСтрока = Неопределено Тогда
	СтрокаТабличнойЧасти = ДокументОбъект.Клиенты.Добавить();
	СтрокаТабличнойЧасти.НомерКлиента 	= НомерКлиента;
	СтрокаТабличнойЧасти.ТипКонтрагента = ТипКлиента;
	ДокументИзменен = Истина;
Иначе
	СтрокаТабличнойЧасти = НайденнаяСтрока;
	Если ТипКлиента <> Неопределено Тогда
		СтрокаТабличнойЧасти.ТипКонтрагента = ТипКлиента;
		ДокументИзменен = Истина;
	КонецЕсли;
КонецЕсли;

КонецПроцедуры
//Костенюк Александр-Финиш 11.06.2012

//Костенюк Александр-Старт 12.06.2012
//
// Функция получает тип клиента по его номеру
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// НомерКлиента - Тип: Число
// 
// Возвращаемое значение:
// ТипКлиента - Тип: СправочникСсылка.ТипыКонтрагентов
//
Функция ПолучитьТипКлиентаПоНомеру(ДокументОбъект, НомерКлиента) Экспорт
ТипКлиента = Неопределено;
Если НЕ ДокументОбъект = Неопределено Тогда
	Если ДокументОбъект.Клиенты.Количество() Тогда
		НайденнаяСтрока = ДокументОбъект.Клиенты.Найти(НомерКлиента, "НомерКлиента");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ТипКлиента = НайденнаяСтрока.ТипКонтрагента;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;
Возврат ТипКлиента;
КонецФункции
//Костенюк Александр-Финиш 12.06.2012

//Костенюк Александр-Старт 19.06.2012
//
// Процедура применяет сертификат к документу
// 
// Параметры:
// ФормаОбъекта - Тип: ОбработкаОбъект.FrontOfficeМенеджерДокумента.Форма
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// ТабличноеПолеСкидок - Тип: ОбработкаОбъект.TouchТабличноеПоле
// ТабличноеПолеЗаказа - Тип: ОбработкаОбъект.TouchТабличноеПоле
// Значение - Тип: Число
//
Процедура ПрименитьСертификатPodarIm(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Значение = "") Экспорт

Если НЕ РегистрыСведений.НастройкиСервисаPodarIm.ПолучитьДоступностьСервиса() Тогда
	Возврат;
КонецЕсли;

Если ДокументОбъект.Распечатался = ОбщегоНазначенияСервер.ПолучитьПустуюДату() Тогда
	
	Проверка = FrontOffice.ВводЧисла(Значение, НСтр("ru='Введите код сертификата';uk='Введіть код сертифіката'") , 16, 0);
	
	Если Проверка Тогда			
		УдалитьСертификатНажатие(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Ложь, Проверка);			
	КонецЕсли;		

	Если ДокументОбъект.ЭтоНовый() Тогда
		Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Данні було змінено. Зберегти зміни?'") , РежимДиалогаВопрос.ОКОтмена);
		Если (Результат = КодВозвратаДиалога.Отмена) Тогда
			Возврат;
		КонецЕсли;
		ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	// Поиск сертификата
	Если Проверка Тогда
		// Установка соедениения
		WebService = РегистрыСведений.НастройкиСервисаPodarIm.УстановитьСоединение();
		Если WebService = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// Проверка существования сертификата
		// Инициирование начала операции получения подтверждения применения сертификата посетителем заведения
		code 		= Формат(Значение, "ЧЦ=16; ЧДЦ=0; ЧН=; ЧГ=");
		summ 		= ТабличноеПолеЗаказа.Данные().Итог("СуммаБезСкидок");
		checkid 	= СокрЛП(ДокументОбъект.Номер); 
		discount 	= Неопределено;
		id 			= Неопределено;
		РегистрыСведений.НастройкиСервисаPodarIm.BeginCertificateApplying(WebService, code, summ, checkid, discount, id);
		Если (discount = Неопределено) ИЛИ (id = Неопределено) Тогда
			Возврат;
		КонецЕсли;
		ПараметрЗакрытия = ОткрытьФормуОжидания(НСтр("ru='Ожидается подтверждение посетителя заведения на применение сертификата!';uk='Очікується підтвердження відвідувача закладу на застосування сертифіката!'"), , БиблиотекаКартинок.TouchПредупреждение, WebService, code, discount, id);
		Если ТипЗнч(ПараметрЗакрытия) = Тип("СправочникОбъект.Сертификаты") Тогда
			FrontOfficeУстановкаСертификаНаКлиенте(ФормаОбъекта, ДокументОбъект, ТабличноеПолеСкидок, ТабличноеПолеЗаказа, Проверка, ПараметрЗакрытия);
			ФормаОбъекта.Модифицированность = НЕ ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		// Разрыв соедениения 
		WebService = РегистрыСведений.НастройкиСервисаPodarIm.РазорватьСоединение(WebService);
	КонецЕсли;
Иначе
	FrontOffice.ВывестиПредупреждение(НСтр("ru='Нельзя применить сертификат на распечатанный документ!';uk='Не можна застосувати сертифікат на роздрукований документ!'"));		
КонецЕсли;	

КонецПроцедуры
//Костенюк Александр-Финиш 19.06.2012

//Костенюк Александр-Старт 20.06.2012
// Функция вывода на экран диалогового окна.
//
// Параметры:
//	ТекстВопроса - Строка. Текст задаваемого вопроса;
//	Заголовок - Строка. Заголовок окна;
//	Картинка - Картинка. Картинка диалогового окна.
//
// Возвращаемое значение:
//	КодВозвратаДиалога. В зависимости от реакции пользователя возвращается одно из значений системного перечисления.
//
Функция ОткрытьФормуОжидания(Текст, Заголовок = "", Картинка = Неопределено, WebService, code, discount, id) Экспорт

// Получаем форму.
ФормаОжидания = ЭтотОбъект.ПолучитьФорму("ФормаОжидания");

Если Не ПустаяСтрока(Заголовок) Тогда
	ФормаОжидания.Заголовок = Заголовок;
КонецЕсли;

ФормаОжидания.Текст 		= Текст;
ФормаОжидания.Картинка 		= Картинка;
ФормаОжидания.WebService 	= WebService;
ФормаОжидания.code 			= code;
ФормаОжидания.discount 		= discount;
ФормаОжидания.id 			= id;

// Открываем форму.
ПараметрЗакрытия = ФормаОжидания.ОткрытьМодально();

// Результат.
Если (ПараметрЗакрытия = Неопределено) Тогда
	Возврат КодВозвратаДиалога.Таймаут;
КонецЕсли;
	
Возврат ПараметрЗакрытия;

КонецФункции // ВывестиФормуОжидания()
//Костенюк Александр-Финиш 20.06.2012

//Костенюк Александр-Старт 20.06.2012
//
// Процедура отменяет ранее примененный сертификат
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
//
Процедура ОтменитьСерфификатPodarIm(ДокументОбъект) Экспорт

Если ДокументОбъект.Сертификат.ВидСертификата <> РегистрыСведений.НастройкиСервисаPodarIm.ПолучитьВидСертификата() Тогда
	Возврат;
КонецЕсли;

// Установка соедениения
WebService = РегистрыСведений.НастройкиСервисаPodarIm.УстановитьСоединение();
Если WebService = Неопределено Тогда
	Возврат;
КонецЕсли;

status = РегистрыСведений.НастройкиСервисаPodarIm.RejectCertificate(WebService, ДокументОбъект.Сертификат.КодСертификата);

Если status = "fail" Тогда
	FrontOffice.ВывестиПредупреждение(НСтр("ru='Сертификат не может быть аннулирован в данный момент, повторите запрос позже!';uk='Сертифікат не може бути анульований в даний момент, повторіть запит пізніше!'"));		
ИначеЕсли status = "success" Тогда
	FrontOffice.ВывестиПредупреждение(НСтр("ru='Сертификат аннулирован!';uk='Сертифікат анульований!'"));		
КонецЕсли;

// Разрыв соедениения 
WebService = РегистрыСведений.НастройкиСервисаPodarIm.РазорватьСоединение(WebService);

КонецПроцедуры
//Костенюк Александр-Финиш 20.06.2012

//Костенюк Александр-Старт 21.06.2012
//
// Функция открывает форму выбора значений
// 
// Параметры:
// ТабличноеПолеЗаказа - Тип: ОбработкаОбъект.TouchТабличноеПоле
//
// Возвращаемое значение:
// Тип: Булево
//
Функция ОткрытьФормуВыбораКомплекта(ТабличноеПолеЗаказа, Позиция = Неопределено) Экспорт

ТекущиеДанные 			= ТабличноеПолеЗаказа.ТекущиеДанные();
Данные 					= ТабличноеПолеЗаказа.Данные();
ИдентификаторВладелеца 	= ТекущиеДанные.Идентификатор;
ТекущийНомерКлиента 	= ТекущиеДанные.НомерКлиента;

ТаблицаДанных = Новый ТаблицаЗначений;
Для Каждого Реквизит Из Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты Цикл
	ТаблицаДанных.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
КонецЦикла;
ТаблицаДанных.Колонки.Добавить("Родитель");
ТаблицаДанных.Колонки.Добавить("Ссылка");
ТаблицаДанных.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
ТаблицаДанных.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), "Представление");
ТаблицаДанных.Колонки.Добавить("ЭтоГруппа");
ТаблицаДанных.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
ТаблицаДанных.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));

// Заполнение таблицы данных
РезультатЗапросаКомплекта 	= Справочники.КомплектыНоменклатуры.ПолучитьКомплект(ТекущиеДанные.Номенклатура);
Выборка 					= РезультатЗапросаКомплекта.Выбрать();

Пока Выборка.Следующий() Цикл
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	НоваяСтрока.НоменклатураПредставление = Выборка.Представление;
	
	Если Выборка.ЭтоГруппа Тогда
		Продолжить;
	КонецЕсли;
	
	Цена = 0;
	РегистрыСведений.ЦеныНоменклатуры.ПолучитьЦеновыеПараметры(Выборка.Номенклатура, , Цена);
	НоваяСтрока.Владелец				= ИдентификаторВладелеца;
	НоваяСтрока.НоменклатураКод			= Выборка.Код;
	НоваяСтрока.Номенклатура			= Выборка.Номенклатура;
	НоваяСтрока.Количество 				= ТекущиеДанные.Количество;
	НоваяСтрока.Цена 					= Цена;
	НоваяСтрока.Сумма 					= НоваяСтрока.Количество * НоваяСтрока.Цена;
	НоваяСтрока.ПорядокПодачи 			= Макс(ТекущиеДанные.ПорядокПодачи, 1);
	НоваяСтрока.НомерКлиента 			= ТекущиеДанные.НомерКлиента;
	НоваяСтрока.НоменклатурнаяГруппа 	= Выборка.Номенклатура.НоменклатурнаяГруппа;
	НоваяСтрока.ТипАкции 				= ТекущиеДанные.ТипАкции; 
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Владелец", ИдентификаторВладелеца);
	СтруктураПоиска.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
	
	НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		НоваяСтрока.Пометка = Истина;
	КонецЕсли;
	
КонецЦикла;

// Открытие формы выбора значений
ФормаВыбора = Обработки.TouchВыборЗначений.ПолучитьФорму("Форма");
ФормаВыбора.ЗаполнитьПоТаблице(ТаблицаДанных);
РезультатВыбораФормы = ФормаВыбора.ОткрытьМодально();

Если РезультатВыбораФормы = КодВозвратаДиалога.Отмена Тогда
	
	Возврат Ложь;
	
Иначе
	
	ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(РезультатВыбораФормы, "Ссылка", "Родитель");
	
	// Удаление предыдущиих значений выбора
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Владелец", ИдентификаторВладелеца);
	
	НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
			Данные.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		ПеребратьПодчиненныеСтроки(ТабличноеПолеЗаказа, СтрокаДерева, ИдентификаторВладелеца);
	КонецЦикла;
	
	Возврат Истина;
	
КонецЕсли;

Выборка 		= Неопределено;
ТаблицаДанных 	= Неопределено;	

КонецФункции
//Костенюк Александр-Финиш 21.06.2012

//Костенюк Александр-Старт 21.06.2012
//
// Процедура добавляет все выбранные комплектующие для блюда в документ
// 
// Параметры:
// ТабличноеПолеЗаказа - Тип: ОбработкаОбъект.TouchТабличноеПоле
// Дерево - Тип: ДеревоЗначений
// ИдентификаторВладелеца - Тип: УникальныйИдентификатор
//
Процедура ПеребратьПодчиненныеСтроки(ТабличноеПолеЗаказа, Дерево, ИдентификаторВладелеца) Экспорт
Для Каждого СтрокаДерева ИЗ Дерево.Строки Цикл
	Если СтрокаДерева.Пометка Тогда
		ТаблицаЗаказаДобавитьПозицию(ТабличноеПолеЗаказа, СтрокаДерева, СтрокаДерева.Количество, , , Перечисления.ТипыСтрокЗаказов.Комплект, ИдентификаторВладелеца, СтрокаДерева.НомерКлиента);
	КонецЕсли;
КонецЦикла;
КонецПроцедуры
//Костенюк Александр-Финиш 21.06.2012

//Костенюк Александр-Старт 25.06.2012
//
// Функция устанавливает пометку на удаление в пустом документе
// 
// Параметры:
// ЭтаФорма - Тип: Форма
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// ТабличноеПолеЗаказа - Тип: ОбработкаОбъект.TouchТабличноеПоле
// ТабличноеПолеСкидок - Тип: ОбработкаОбъект.TouchТабличноеПоле
//
Функция УдалитьДокументОбъект(ЭтаФорма, ДокументОбъект, ТабличноеПолеЗаказа, ТабличноеПолеСкидок) Экспорт

// Запрос на удаление пустого
Если ТабличноеПолеЗаказа.Данные().Количество() = 0
	И ДокументДоступностьДействия(ДокументОбъект, "Удаление") Тогда
	Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Пустой документ. Удалить текущий документ?';uk='Пустий документ. Видалити поточний документ?'") , РежимДиалогаВопрос.ДаНетОтмена);
	Если (Результат = КодВозвратаДиалога.Отмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДокументОбъект.ПометкаУдаления = (Результат = КодВозвратаДиалога.Да);
	ЭтаФорма.Модифицированность = Истина;
КонецЕсли;

ТаблицаСкидокЗаписать(ДокументОбъект, ТабличноеПолеСкидок);
ТаблицаЗаказаЗаписать(ДокументОбъект, ТабличноеПолеЗаказа);
ДокументОбъект.ДополнительныеСвойства.Вставить("Компьютер", ПараметрыСеанса.ТекущийКомпьютер);

Возврат Истина;

КонецФункции
//Костенюк Александр-Финиш 25.06.2012

//Костенюк Александр-Старт 26.06.2012
//
// Процедура производит удаление подарочных блюд из документа
// 
// Параметры:
// ЭтаФорма - Тип: Форма
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// ТабличноеПолеЗаказа - Тип: ОбработкаОбъект.TouchТабличноеПоле
// ТабличноеПолеСкидок - Тип: ОбработкаОбъект.TouchТабличноеПоле
// ТабличноеПолеПереноса - Тип: ОбработкаОбъект.TouchТабличноеПоле
//
Процедура УдалитьПодарочныеБлюда(ЭтаФорма, ДокументОбъект, ТабличноеПолеЗаказа, ТабличноеПолеСкидок, ТабличноеПолеПереноса) Экспорт

ДанныеЗаказа	= ТабличноеПолеЗаказа.Данные();
ДанныеСкидок 	= ТабличноеПолеСкидок.Данные();
ДанныеПереноса 	= ТабличноеПолеПереноса.Данные(); 
МассивУдаляемых = Новый Массив;

Для Каждого СтрокаТаблицы ИЗ ДанныеЗаказа Цикл
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТипАкции) Тогда
		Продолжить;
	КонецЕсли;
	Если СтрокаТаблицы.Распечатан Тогда
		НоваяСтрока = ДанныеПереноса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЕсли;
	МассивУдаляемых.Добавить(СтрокаТаблицы);
КонецЦикла;

Для Каждого СтрокаМассива Из МассивУдаляемых Цикл
	ДанныеЗаказа.Удалить(СтрокаМассива);
КонецЦикла;

МассивСкидокНаУдаление = Новый Массив;

Для Каждого СтрокаТаблицыСкидки ИЗ ДанныеСкидок Цикл
	Если НЕ СтрокаТаблицыСкидки.СкидкаНаценка.Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуСертификата Тогда
		Продолжить;
	КонецЕсли;
	МассивСкидокНаУдаление.Добавить(СтрокаТаблицыСкидки);
КонецЦикла;

Для Каждого СтрокаМассива Из МассивСкидокНаУдаление Цикл
	ДанныеСкидок.Удалить(СтрокаМассива);
КонецЦикла;

ТабличноеПолеЗаказа.ОбновитьСтроки();
ТабличноеПолеСкидок.ОбновитьСтроки();
	
ТаблицаДанных = ТабличноеПолеПереноса.Данные().Скопировать();
ТаблицаДанных.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
ТаблицаДанных.ЗаполнитьЗначения(Истина,"Пометка");

НоменклатураПереноса = Новый Соответствие;
НоменклатураУдаления = Новый Соответствие;
//Костенюк Александр-Старт 01.02.2017
// Для весовых блюд, у которых уточняется вес
НоменклатураПереносаУточненная	= Новый Соответствие;
НоменклатураУдаленияУточненная	= Новый Соответствие;
//Костенюк Александр-Финиш 01.02.2017

Для Каждого Строка Из ТаблицаДанных Цикл
	Если Строка.Пометка Тогда
		Если Строка.Распечатан Тогда
			НоменклатураПереноса[Строка.Идентификатор] = Строка.Количество;
			НоменклатураПереносаУточненная[Строка.Идентификатор] = Строка.КоличествоУточненное; //Костенюк Александр 01.02.2017
		КонецЕсли;
		НоменклатураУдаления[Строка.Идентификатор] = Строка.Количество;
		НоменклатураУдаленияУточненная[Строка.Идентификатор] = Строка.КоличествоУточненное; //Костенюк Александр 01.02.2017
	КонецЕсли;
КонецЦикла;

Если Булево(НоменклатураПереноса.Количество()) Тогда
	
	ДокументСписанияПереноса = Документы.СписаниеТоваров.СоздатьДокумент();
	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ДокументСписанияПереноса, ДокументОбъект);
	ПричинаОтказа = Справочники.ПричиныОтказов.ПустаяСсылка();
	ДополнительныеРеквизиты = Новый Структура("Списание,ПричинаОтказа,ДокументРезерва", Истина, ПричинаОтказа, ДокументОбъект.Ссылка);
	
	//ОбработкаТабличныхЧастей.ПеренестиСодержимоеТабЧасти(ДокументОбъект, ДокументСписанияПереноса, НоменклатураПереноса, НоменклатураУдаления, ДополнительныеРеквизиты);
	ОбработкаТабличныхЧастей.ПеренестиСодержимоеТабЧасти(ДокументОбъект, ДокументСписанияПереноса, НоменклатураПереноса, НоменклатураУдаления, ДополнительныеРеквизиты, НоменклатураПереносаУточненная, НоменклатураУдаленияУточненная); //Костенюк Александр 01.02.2017
	
	Если НЕ УдалитьДокументОбъект(ЭтаФорма, ДокументОбъект, ТабличноеПолеЗаказа, ТабличноеПолеСкидок) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСписанияПереноса.Записать(РежимЗаписиДокумента.Проведение);
	
	ДокументОбъект.Сертификат = Неопределено;
	ЭтаФорма.Модифицированность = НЕ ДокументЗаписать(ДокументОбъект, РежимЗаписиДокумента.Запись);
	
	ТабличноеПолеПереноса.Данные().Очистить();
	ТабличноеПолеПереноса.ОбновитьСтроки();
	
	Если ТабличноеПолеЗаказа.Данные().Количество() = 0 Тогда
		ПолучитьСерверFrontOffice().ЗакрытьФорму(ЭтаФорма);
	КонецЕсли;
	
КонецЕсли;	

КонецПроцедуры
//Костенюк Александр-Финиш 26.06.2012

//Костенюк Александр-Старт 10.07.2012
//
// Процедура обрабатывает временные позиции в документе
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
//
Функция ОбработатьВременныеПозиции(ДокументОбъект) Экспорт

Ошибка = Ложь;

Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
	
	Если НЕ СтрокаТабличнойЧасти.Номенклатура.Временной Тогда
		Продолжить;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.Оборудование) Тогда
		Продолжить;
	КонецЕсли;
	
	// Получение состояния канала
	Обработка 		= Неопределено;
	Объект    		= Неопределено;
	СостояниеКанала = ПолучитьСостояниеКанала(СтрокаТабличнойЧасти.Номенклатура.Оборудование, Обработка, Объект);
	
	// Сохранение заказа
	Если НЕ СтрокаТабличнойЧасти.Распечатан Тогда
		
		// Печеть пречека без предварительного сохранения, 
		// т.е. сразу после добавления позиций в заказ
		Если ДокументОбъект.Распечатан Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТабличнойЧасти);
			
		Иначе
			
			// Канал занят
			Если СостояниеКанала Тогда
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Канал № "+Объект.Параметры.Канал+" "+" занят!';uk='Канал № "+Объект.Параметры.Канал+" "+" зайнятий!'"));
				Ошибка = Истина;
			КонецЕсли;
			
			ОшибкаТО = ПолучитьСерверТО().УстановитьСостояниеКанала(Обработка, Объект, Истина);
			
			Если ОшибкаТО = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается Тогда
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Возникла ошибка при попытке включения канала № "+Объект.Параметры.Канал+"!';uk='Виникла помилка при спробі включення каналу № "+Объект.Параметры.Канал+"!'"));
				Ошибка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	// Печать пречека
	Иначе
		
		// Канал включен
		Если СостояниеКанала Тогда
			
			ОшибкаТО = ПолучитьСерверТО().УстановитьСостояниеКанала(Обработка, Объект, Ложь);
			
			СтрокаТабличнойЧасти.Выполненн 				= Истина;
			СтрокаТабличнойЧасти.ДатаОкончанияПериода 	= ТекущаяДата();
			
			РазностьДат = ОбщегоНазначения.ПолучитьРазностьДат(СтрокаТабличнойЧасти.ДатаНачалаПериода, ТекущаяДата());
			МинимальноеВремяЗаказа = СтрокаТабличнойЧасти.Номенклатура.МинимальноеВремяЗаказа;
			Если (ЗначениеЗаполнено(МинимальноеВремяЗаказа)) И (РазностьДат < (МинимальноеВремяЗаказа - '00010101')) Тогда
			Иначе
				Продолжительность = СтрокаТабличнойЧасти.Количество * (СтрокаТабличнойЧасти.Номенклатура.ПродолжительностьПроизводства - '00010101');
				СтрокаТабличнойЧасти.Количество = РазностьДат/Продолжительность;
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ДокументОбъект);
			
			Если ОшибкаТО = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается Тогда
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Возникла ошибка при попытке выключения канала № "+Объект.Параметры.Канал+"!';uk='Виникла помилка при спробі виключення каналу № "+Объект.Параметры.Канал+"!'"));
				Ошибка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецЦикла;

Возврат Ошибка;

КонецФункции
//Костенюк Александр-Финиш 10.07.2012

//Костенюк Александр-Старт 29.08.2012
// Функция получает состояние канала
//
// Параметры
// Оборудование - Тип: УникальныйИдентификатор. Идентификатор устройства.
// Обработка - Тип: ОбработкаОбъект. Обработка обслуживания ТО.
// Объект - Тип: Структура. Драйвер ТО.
//
// Возвращаемое значение
// СостояниеКанала - Тип: ПеречислениеСсылка.ТООшибкиОбщие.
// 
Функция ПолучитьСостояниеКанала(Оборудование, Обработка, Объект) Экспорт

Результат = ПолучитьСерверТО().ПолучитьОбъектДрайвера(Оборудование, Обработка, Объект, ПараметрыСеанса.ТекущийКомпьютер);

Если ЗначениеЗаполнено(Результат) Тогда
	FrontOffice.ВывестиПредупреждение(НСтр("ru='Возникла ошибка при попытке подключения к устройству!';uk='Виникла помилка при спробі підключення до пристрою!'"));
КонецЕсли;

СостояниеКанала = Неопределено;
СостояниеКанала = ПолучитьСерверТО().ПолучитьСостояниеКанала(Обработка, Объект);

Если СостояниеКанала = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается Тогда
	FrontOffice.ВывестиПредупреждение(НСтр("ru='Возникла ошибка при попытке получения состояния устройства!';uk='Виникла помилка при спробі отримання статусу пристрою!'"));
	СостояниеКанала = Неопределено;
КонецЕсли;

Возврат СостояниеКанала;

КонецФункции
//Костенюк Александр-Финиш 29.08.2012

//Костенюк Александр-Старт 20.07.2012
//
// Функция формирует запрос по депозитам
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// ДисконтнаяКарта - Тип: СправочникСсылка.ИнформационнаяКарта
//
Функция СформироватьЗапросПоДепозитам(ДокументОбъект, ДисконтнаяКарта, ЭтоСкидка, РасчетДепозитнойКартой) Экспорт

Если НЕ ((ДисконтнаяКарта.ВидДисконтнойКарты.ТипМонетарности = Перечисления.ТипыМонетарности.ДепозитнаяДисконтнаяКарта ИЛИ 
	ДисконтнаяКарта.ВидДисконтнойКарты.ТипМонетарности = Перечисления.ТипыМонетарности.ДепозитнаяКонтрагент) И 
	ДисконтнаяКарта.ВидДисконтнойКарты.Накопительная) Тогда
	Результат = Неопределено;
КонецЕсли;

СуммаДокумента = ДокументОбъект.Товары.Итог("СуммаБезСкидок");

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ВЫБОР
               |		КОГДА ТипыСкидокНаценок.Уточняемая
               |			ТОГДА ВЫБОР
               |					КОГДА ТипыСкидокНаценок.СуммоваяСкидкаНаценка
               |						ТОГДА ИнформационныеКарты.ПроцентУточняемый
               |					ИНАЧЕ ВЫБОР
               |							КОГДА &ЭтоСкидка
               |								ТОГДА &СуммаДокумента * ИнформационныеКарты.ПроцентУточняемый / 100
               |							ИНАЧЕ ВЫБОР
               |									КОГДА &РасчетДепозитнойКартой
               |										ТОГДА &СуммаДокумента * ИнформационныеКарты.ПроцентУточняемый / 100
               |									ИНАЧЕ &СуммаДокумента
               |								КОНЕЦ
               |						КОНЕЦ
               |				КОНЕЦ
               |		ИНАЧЕ ВЫБОР
               |				КОГДА ТипыСкидокНаценок.СуммоваяСкидкаНаценка
               |					ТОГДА ТипыСкидокНаценок.ПроцентСкидкиНаценки
               |				ИНАЧЕ ВЫБОР
               |						КОГДА &ЭтоСкидка
               |							ТОГДА &СуммаДокумента * ТипыСкидокНаценок.ПроцентСкидкиНаценки / 100
               |						ИНАЧЕ ВЫБОР
               |								КОГДА &РасчетДепозитнойКартой
               |									ТОГДА &СуммаДокумента * ТипыСкидокНаценок.ПроцентСкидкиНаценки / 100
               |								ИНАЧЕ &СуммаДокумента
               |							КОНЕЦ
               |					КОНЕЦ
               |			КОНЕЦ
               |	КОНЕЦ КАК СуммаПриход,
               |	ВЫБОР
               |		КОГДА &ЭтоСкидка
               |			ТОГДА 0
               |		ИНАЧЕ ВЫБОР
               |				КОГДА &РасчетДепозитнойКартой
               |					ТОГДА &СуммаДокумента
               |				ИНАЧЕ 0
               |			КОНЕЦ
               |	КОНЕЦ КАК СуммаРасход,
               |	ВЫБОР
               |		КОГДА ИнформационныеКарты.ВидДисконтнойКарты.ТипМонетарности = ЗНАЧЕНИЕ(Перечисление.ТипыМонетарности.ДепозитнаяДисконтнаяКарта)
               |			ТОГДА ИнформационныеКарты.Ссылка
               |		ИНАЧЕ ИнформационныеКарты.ВладелецКарты
               |	КОНЕЦ КАК ПризнакДисконта
               |ИЗ
               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
               |		ПО ИнформационныеКарты.ВидДисконтнойКарты = ТипыСкидокНаценок.ЗначениеУсловия
               |ГДЕ
               |	ИнформационныеКарты.ВидДисконтнойКарты.Накопительная
               |	И ИнформационныеКарты.Ссылка = &ДисконтнаяКарта";
Запрос.УстановитьПараметр("ДисконтнаяКарта", 		ДисконтнаяКарта);			   
Запрос.УстановитьПараметр("СуммаДокумента", 		СуммаДокумента);
Запрос.УстановитьПараметр("ЭтоСкидка", 				ЭтоСкидка);
Запрос.УстановитьПараметр("РасчетДепозитнойКартой", РасчетДепозитнойКартой);
РезультатЗапроса = Запрос.Выполнить();

Если РезультатЗапроса.Пустой() Тогда
	Результат = Неопределено;
Иначе
	Результат = РезультатЗапроса;
КонецЕсли;

Возврат Результат;

КонецФункции
//Костенюк Александр-Финиш 20.07.2012

//Костенюк Александр-Старт 30.07.2012
//
// Функция проверяет наличие пречеков по документу
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
//
Функция НаличиеПречековПоДокументу(ДокументОбъект) Экспорт

ПречекРаспечатан = Ложь;
ПараметрыОтбора = Новый Структура;
Если ДокументОбъект.НомерКлиента = 0 Тогда
	ПараметрыОтбора.Вставить("ПречекРаспечатан", Истина);
	НайденныеСтроки = ДокументОбъект.Клиенты.НайтиСтроки(ПараметрыОтбора);
	Если (НайденныеСтроки.Количество() = ДокументОбъект.КоличествоКлиентов) Тогда 
		ПречекРаспечатан = Истина;
	КонецЕсли;
Иначе
	ПараметрыОтбора.Вставить("НомерКлиента", 		ДокументОбъект.НомерКлиента);
	ПараметрыОтбора.Вставить("ПречекРаспечатан", 	Истина);
	НайденныеСтроки = ДокументОбъект.Клиенты.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() Тогда
		ПречекРаспечатан = Истина;
	КонецЕсли;
КонецЕсли;

Возврат ПречекРаспечатан;

КонецФункции
//Костенюк Александр-Финиш 30.07.2012

//Костенюк Александр-Старт 03.08.2012
//
// Функция проверяет тип депозита применяемого к документу
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
//
// Возвращаемое значение:
// ЭтоСкидка - Тип: Булево
// 
Функция ОпределитьТипДепозита(ДокументОбъект) Экспорт

Товары = ДокументОбъект.Товары.Выгрузить();
ЭтоСкидка = Истина;

Если ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты.Оплата = ДокументОбъект.Оплата Тогда
	ЭтоСкидка = Ложь;
КонецЕсли;

Для Каждого СтрокаТаблицы Из Товары Цикл
	Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Депозит Тогда
		ЭтоСкидка = Ложь;
		Прервать;
	КонецЕсли;
КонецЦикла;

Возврат ЭтоСкидка;

КонецФункции
//Костенюк Александр-Финиш 03.08.2012

//Костенюк Александр-Старт 03.08.2012
// Процедура производит паковку одинаковых блюд в закаке.
// Принцип работы примерно такой же как типовой метод "Свернуть"
//
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// ФормаОбъекта - Тип: Форма
// ТабличноеПолеЗаказа - Тип: ОбработкаОбъект.TouchТабличноеПоле
// 
Процедура ПаковкаЗаказа(ДокументОбъект, ФормаОбъекта, ТабличноеПолеЗаказа) Экспорт

ТаблицаЗаказа 		= ТабличноеПолеЗаказа.Данные();
ТабРаспечатанных 	= ТаблицаЗаказа.СкопироватьКолонки();
ТабНеРаспечатанных 	= ТаблицаЗаказа.СкопироватьКолонки();
ТабНеПаковочных 	= ТаблицаЗаказа.СкопироватьКолонки();
ТабПаковка 			= ТаблицаЗаказа.СкопироватьКолонки();

Для Каждого СтрокаТаблицы Из ТаблицаЗаказа Цикл
	
	// Проверка на модификаторы и условия
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец", СтрокаТаблицы.Идентификатор);
	ПодчиненныеСтроки = ТаблицаЗаказа.НайтиСтроки(ПараметрыОтбора); 
	Если ПодчиненныеСтроки.Количество() Тогда
		СтрокаНеПаковочных = ТабНеПаковочных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНеПаковочных, СтрокаТаблицы);
		Для Каждого СтрокаМассива Из ПодчиненныеСтроки Цикл
			СтрокаНеПаковочных = ТабНеПаковочных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНеПаковочных, СтрокаМассива);
		КонецЦикла;
	Иначе
		Если (СтрокаТаблицы.ВидНоменклатуры <> Перечисления.ТипыСтрокЗаказов.Товар) ИЛИ (ПодчиненныеСтроки.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.Распечатан = Истина Тогда
			СтрокаРаспечатанных = ТабРаспечатанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспечатанных, СтрокаТаблицы);
		ИначеЕсли СтрокаТаблицы.Распечатан = Ложь Тогда
			СтрокаНеРаспечатанных = ТабНеРаспечатанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНеРаспечатанных, СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;
	
КонецЦикла;

//// Распечатанные блюда паковать нельзя, т.к. будут выходить встречки на возврат
//// Подготовка таблицы распечатанных блюд
//ТабРаспечатанныхСвернутая = ТабРаспечатанных.Скопировать();
//ТабРаспечатанныхСвернутая.Свернуть("Номенклатура, Цена, НомерКлиента, Комментарий", "Количество, Сумма, СуммаБезСкидок, СуммаНаценки, СуммаСкидки, СуммаНДС");
//Для Каждого Колонка Из ТабРаспечатанных.Колонки Цикл
//	ИмяКолонки = Колонка.Имя;
//	Если ТабРаспечатанныхСвернутая.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
//		ТабРаспечатанныхСвернутая.Колонки.Добавить(ИмяКолонки);
//	КонецЕсли;
//КонецЦикла;
//Для Каждого СтрокаПриемник Из ТабРаспечатанныхСвернутая Цикл
//	ПараметрыОтбора = Новый Структура;
//	ПараметрыОтбора.Вставить("Номенклатура", СтрокаПриемник.Номенклатура);
//	НайденныеСтроки = ТабРаспечатанных.НайтиСтроки(ПараметрыОтбора); 
//	Если НайденныеСтроки.Количество() Тогда
//		СтрокаИсточник = НайденныеСтроки[0];
//		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, , "НомерСтроки, Номенклатура, Цена, НомерКлиента, Комментарий, Количество, Сумма, СуммаБезСкидок, СуммаНаценки, СуммаСкидки, СуммаНДС");
//	КонецЕсли;
//КонецЦикла;

// Подготовка таблицы нераспечатанных блюд
ТабНеРаспечатанныхСвернутая = ТабНеРаспечатанных.Скопировать();
ТабНеРаспечатанныхСвернутая.Свернуть("Номенклатура, Цена, НомерКлиента, Комментарий", "Количество, Сумма, СуммаБезСкидок, СуммаНаценки, СуммаСкидки, СуммаНДС");
Для Каждого Колонка Из ТабНеРаспечатанных.Колонки Цикл
	ИмяКолонки = Колонка.Имя;
	Если ТабНеРаспечатанныхСвернутая.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ТабНеРаспечатанныхСвернутая.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;
КонецЦикла;
Для Каждого СтрокаПриемник Из ТабНеРаспечатанныхСвернутая Цикл
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", СтрокаПриемник.Номенклатура);
	НайденныеСтроки = ТабНеРаспечатанных.НайтиСтроки(ПараметрыОтбора); 
	Если НайденныеСтроки.Количество() Тогда
		СтрокаИсточник = НайденныеСтроки[0];
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, , "НомерСтроки, Номенклатура, Цена, НомерКлиента, Комментарий, Количество, Сумма, СуммаБезСкидок, СуммаНаценки, СуммаСкидки, СуммаНДС");
	КонецЕсли;
КонецЦикла;

Если НЕ ТабНеРаспечатанныхСвернутая.Количество() Тогда
	Возврат;
КонецЕсли;

// Подготовка сводной таблицы
//Для Каждого СтрокаТаблицы Из ТабРаспечатанныхСвернутая Цикл
Для Каждого СтрокаТаблицы Из ТабРаспечатанных Цикл
	НоваяСтрока = ТабПаковка.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
КонецЦикла;
Для Каждого СтрокаТаблицы Из ТабНеРаспечатанныхСвернутая Цикл
	НоваяСтрока = ТабПаковка.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
КонецЦикла;
Для Каждого СтрокаТаблицы Из ТабНеПаковочных Цикл
	НоваяСтрока = ТабПаковка.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
КонецЦикла;

// Загружаем таблицу в документ
ДокументОбъект.Товары.Загрузить(ТабПаковка);
ФормаОбъекта.Модифицированность = Истина;

ТаблицаЗаказаПрочитать(ДокументОбъект, ТабличноеПолеЗаказа);

ТаблицаЗаказа 				= Неопределено;
ТабРаспечатанных 			= Неопределено;
ТабНеРаспечатанных 			= Неопределено;
ТабНеПаковочных 			= Неопределено;
ТабПаковка 					= Неопределено;
ТабРаспечатанныхСвернутая 	= Неопределено;
ТабНеРаспечатанныхСвернутая = Неопределено;

КонецПроцедуры
//Костенюк Александр-Финиш 03.08.2012

//Костенюк Александр-Старт 24.09.2012
//
// Функция служит для ввода цены товара
//
// Параметры:
// Значение - Тип: Число
// Мин - Тип: Число, минимальное значение
// Макс - Тип: Число, максимальное значение
//
Функция ВводЦеныТовара(Значение = Неопределено, Мин = Неопределено, Макс = Неопределено) Экспорт

// Нормализация.
Если (Значение = Неопределено) Тогда
	Значение = Число(Истина);
КонецЕсли;

Разрядность 			= Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность;
РазрядностьДробнойЧасти = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;

// Ввод.
Возврат FrontOffice.ВводЧисла(Значение, НСтр("ru='Введите цену';uk='Введіть ціну'") , Разрядность, РазрядностьДробнойЧасти, Мин, Макс);

КонецФункции // ВводЦеныТовара()
//Костенюк Александр-Финиш 24.09.2012

//Костенюк Александр-Старт 27.11.2012
// Процедура добавления позиции в табличное поле заказа документа.
//
// Параметры:
//	ТабличноеПоле - Тип: ОбработкаОбъект.TouchТабличноеПоле.
//	Номенклатура - Тип: СправочникСсылка.Номенклатура, ТаблицаЗначений. Позиция либо таблица позиций, которые нужно добавить в заказ.
//	Количество - Тип: Число. Количество товара.
//	Сворачивать - Тип: Булево. Признак того, что нужно сворачивать таблицу при добавлении позиции.
//	ДобавлениеЧерезМеню - Тип: Булево. Признак добавления через меню.
//	ТипНоменклатуры - Тип: ПеречислениеСсылка.ТипыСтрокЗаказов. Тип номенклатуры, добавляемой в заказ.
//	ИдентификаторВладелеца - Тип: УникальныйИдентификатор. Идентификатор владельца.
//	НомерКлиента - Тип: Число. Текущий номер клиента, для которого добавляется блюдо в заказ.
//	ПорядокПодачи - Тип: Число. Текущий порядок подачи.
//	ЦенаУточняемая - Тип: Число. Уточняемая цена, для уточняемых блюд.
//	Компьютер - Тип: СправочникСсылка.Компьютеры. Компьютер на котором вносится заказ.
//	НаВынос - Тип: Булево. Признак блюда на вынос.
//
Процедура ТаблицаЗаказаДобавитьПозицию(ТабличноеПоле, Номенклатура, Количество = Неопределено, Сворачивать = Истина, ДобавлениеЧерезМеню = Ложь, ТипНоменклатуры = Неопределено, ИдентификаторВладелеца = Неопределено, НомерКлиента = Неопределено, ПорядокПодачи = Неопределено, ЦенаУточняемая = Неопределено, Компьютер = Неопределено, НаВынос = Неопределено) Экспорт

ЕстьСвязаные = Истина;

// Данные.
Данные 			= ТабличноеПоле.Данные();
//ТекущиеДанные 	= ТабличноеПоле.ТекущиеДанные();

// Формирования набора значений.
Если (НЕ ТипЗнч(Номенклатура) = мТипТаблицыЗначений) Тогда
	НаборПозиций = Новый Массив; 
	НаборПозиций.Добавить(Номенклатура);
Иначе
	НаборПозиций = Номенклатура;
КонецЕсли;

Если ТипЗнч(Номенклатура.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
	Если ЗначениеЗаполнено(Номенклатура.Номенклатура.Связана) Тогда
		ЕстьСвязаные = Ложь;
		МассивПозицийСвязанных = Новый Массив;		
		Если Номенклатура.Номенклатура.Связана.ЭтоГруппа Тогда
			ПолучитьСвязаныеПозиции(Номенклатура.Номенклатура.Связана, МассивПозицийСвязанных);
		иначе
			МассивПозицийСвязанных.Добавить(Номенклатура.Номенклатура.Связана);
		КонецЕсли;		
		ин = 0;
		Пока ин <> МассивПозицийСвязанных.Количество()-1  Цикл
			Если Данные.Найти(МассивПозицийСвязанных[ин],"Номенклатура") <> Неопределено Тогда
				ЕстьСвязаные = Истина;
				Прервать;
			КонецЕсли;
			ин = ин + 1;	
		КонецЦикла; 		
	КонецЕсли;
	Если НЕ ЕстьСвязаные Тогда	
		FrontOffice.ВывестиПредупреждение(НСтр("ru=""Для номенклатуры "+ Номенклатура.Номенклатура+" нет связной позиции!""; uk=""Для номенклатури "+ Номенклатура.Номенклатура+" немає зв'язної позиції!"""),,);
		Возврат;	
	КонецЕсли;
КонецЕсли;

НеОбъединятьОдинаковыеТовары = НеОбъединятьОдинаковыеТоварыПриДобавленииТовара И ДобавлениеЧерезМеню;

Для Каждого Позиция Из НаборПозиций Цикл
	
	ТекущиеДанные = Неопределено;
	//ТекущаяСтрокаДанных = Неопределено;
	
	// Проверка совпадения с нераспечатанными позициями.
	Если Сворачивать Тогда
		Для Каждого СтрокаДанных Из Данные Цикл
			Если (СтрокаДанных.Номенклатура = Позиция.Номенклатура)
				И (НЕ СтрокаДанных.Распечатан)
				И (НЕ ЗначениеЗаполнено(СтрокаДанных.Комментарий))
				И (НЕ НеОбъединятьОдинаковыеТовары)
				И (ТипНоменклатуры = Неопределено) Тогда
				СтруктураПоиска	= Новый Структура("Владелец", СтрокаДанных.Идентификатор);
				СтрокиНайденные	= Данные.НайтиСтроки(СтруктураПоиска);
				Если СтрокиНайденные.Количество() = 0 Тогда
					ТекущиеДанные = СтрокаДанных;
					//ТекущаяСтрокаДанных = СтрокаДанных;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Запрет добавления одной и той же временной позиции в заказ
	Если Позиция.Номенклатура.Временной Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", 			Позиция.Номенклатура);
		СтруктураПоиска.Вставить("ДатаОкончанияПериода", 	ОбщегоНазначенияСервер.ПолучитьПустуюДату());
		НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НЕ НайденнаяСтрока.Номенклатура.Временной Тогда
					Продолжить;
				КонецЕсли;
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Повторение временных позиций запрещено!';uk='Повторення тимчасових позицій заборонено!'"));
				Возврат;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверки на модификаторы или условия
	Строка = ТабличноеПоле.ТекущаяСтрока();
	Если (Строка <> Неопределено) И (ТипНоменклатуры <> Неопределено) Тогда
		СтруктураПоиска	= Новый Структура("Владелец", Строка.Идентификатор);
		НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл
			Если СтрокаНайденных.Номенклатура = Позиция.Номенклатура Тогда
				// Модификаторы нельзя добавлять
				Возврат;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	// Действие.
	Если (ТекущиеДанные = Неопределено) Тогда
	//Если (ТекущаяСтрокаДанных = Неопределено) Тогда
		
		ЕдиницаИзмерения			= Позиция.ЕдиницаИзмерения;
		ПлановаяСебестоимость		= Позиция.ПлановаяСебестоимость; 
		СтавкаНДС					= Позиция.СтавкаНДС; 
		НоменклатурнаяГруппа		= Позиция.НоменклатурнаяГруппа;
		ГруппаБлюда					= Позиция.Номенклатура.ГруппаБлюда; //Костенюк Александр 07.08.2015
		Организация					= Позиция.Организация; 
		//Услуга						= Позиция.Услуга;
		
		// Уточнение цены
		Если Позиция.Номенклатура.Уточняемый Тогда
			Цена 					= ЦенаУточняемая;
		Иначе
			Цена 					= Позиция.Цена;
		КонецЕсли;
		
		Если (ПорядокПодачи = Неопределено) ИЛИ (ПорядокПодачи = 0) Тогда
			ПорядокПодачи = Позиция.ПорядокПодачи;
		Иначе
			ПорядокПодачи = ПорядокПодачи;
		КонецЕсли;
		
		Попытка
			ТипАкции = Позиция.ТипАкции; 
		Исключение
			ТипАкции = Справочники.ТипыАкций.ПустаяСсылка();
		КонецПопытки;
		
		//Костенюк Александр-Старт 02.11.2015
		Если НаВынос = Неопределено Тогда
			НаВынос = Позиция.НаВынос;
		Иначе
			НаВынос = НаВынос;
		КонецЕсли;
		//Костенюк Александр-Финиш 02.11.2015
		
		Для Каждого СтрокаДанных Из Данные Цикл
			
			Если (СтрокаДанных.Номенклатура = Позиция.Номенклатура) Тогда
				
				ЕдиницаИзмерения		= СтрокаДанных.ЕдиницаИзмерения;
				ПлановаяСебестоимость 	= СтрокаДанных.ПлановаяСебестоимость;
				СтавкаНДС				= СтрокаДанных.СтавкаНДС;
				НоменклатурнаяГруппа 	= СтрокаДанных.НоменклатурнаяГруппа;
				ГруппаБлюда 			= СтрокаДанных.Номенклатура.ГруппаБлюда; //Костенюк Александр 07.08.2015
				Организация				= СтрокаДанных.Организация;
				//Услуга					= СтрокаДанных.Услуга; // услуги не используются
				НаВынос 				= СтрокаДанных.НаВынос; //Костенюк Александр 02.11.2015
				
				// Уточнение цены
				Если Позиция.Номенклатура.Уточняемый Тогда
					Цена 				= ЦенаУточняемая;
				Иначе
					Цена				= СтрокаДанных.Цена;
				КонецЕсли;

			КонецЕсли;
			
			////Костенюк Александр-Закомментировано 04.04.2013
			//// При повторном открытии заказа новые позиции должны пробиваться не в последнюю выдачу, а в первую
			//Если СтрокаДанных.Распечатан Тогда
			//	ПорядокПодачи = Макс(ПорядокПодачи, СтрокаДанных.ПорядокПодачи);
			//КонецЕсли;
			////Костенюк Александр-Закомментировано 04.04.2013
			
		КонецЦикла;
		
		// Надо добавить модификатор и условие
		// под соответствующей номенклатурой
		Если ТипНоменклатуры <> Неопределено Тогда
			
			//Если (ТабличноеПоле.ТекущиеДанные() = Неопределено) ИЛИ ТабличноеПоле.ТекущиеДанные().Распечатан Тогда
			//Если (ТекущиеДанные = Неопределено) ИЛИ ТекущиеДанные.Распечатан Тогда
			Если (Строка = Неопределено) ИЛИ Строка.Распечатан Тогда
				Возврат;
			Иначе
				
				//ОригинальнаяСтрока = ТабличноеПоле.ТекущиеДанные();
				//ОригинальнаяСтрока = ТекущиеДанные;
				ОригинальнаяСтрока = Строка;
				
				// Изменение логики поиска/записи владельца модификатора
				Если НЕ ИдентификаторВладелеца = Неопределено Тогда
					Если ТипЗнч(Позиция.Ссылка) = Тип("СправочникСсылка.МодификаторыНоменклатуры") Тогда
						СтрокаВладельца = Данные.Найти(ИдентификаторВладелеца, "Идентификатор");
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Владелец", 		ИдентификаторВладелеца);
						СтруктураПоиска.Вставить("ВидНоменклатуры", Перечисления.ТипыСтрокЗаказов.Модификатор);
						МассивМодификаторов = Данные.НайтиСтроки(СтруктураПоиска);
						КоличествоМодификаторов = МассивМодификаторов.Количество();
						Если СтрокаВладельца.Номенклатура.МаксимальноеКоличествоМодификаторов <> 0 Тогда
							Если КоличествоМодификаторов >= СтрокаВладельца.Номенклатура.МаксимальноеКоличествоМодификаторов Тогда
								FrontOffice.ВывестиПредупреждение(НСтр("ru='Для блюда "+""""+СтрокаВладельца.Номенклатура+""""+" максимальное количество модификаторов равно "+СтрокаВладельца.Номенклатура.МаксимальноеКоличествоМодификаторов+"!';uk='Для блюда "+""""+СтрокаВладельца.Номенклатура+""""+" максимальна кількість модифікаторів дорівнює "+СтрокаВладельца.Номенклатура.МаксимальноеКоличествоМодификаторов+"!'"));
								Возврат;
							КонецЕсли;
						КонецЕсли;
						Если НЕ СтрокаВладельца.Номенклатура.ПовторениеМодификаторов Тогда
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Владелец", 		ИдентификаторВладелеца);
							СтруктураПоиска.Вставить("ВидНоменклатуры", Перечисления.ТипыСтрокЗаказов.Модификатор);
							СтруктураПоиска.Вставить("Номенклатура", 	Позиция.Номенклатура);
							НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
							Если НайденныеСтроки.Количество() Тогда
								FrontOffice.ВывестиПредупреждение(НСтр("ru='Для блюда "+""""+СтрокаВладельца.Номенклатура+""""+" запрещено повторение модификаторов!';uk='Для блюда "+""""+СтрокаВладельца.Номенклатура+""""+" заборонено повторення модифікаторів!'"));
								Возврат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Владелец", ИдентификаторВладелеца);
					МассивПодчиненныхЭлементов = Данные.НайтиСтроки(СтруктураПоиска);
					КолвоПодчиненных = МассивПодчиненныхЭлементов.Количество();
					//Если ТабличноеПоле.ТекущиеДанные().ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар Тогда
					//	ТекущиеДанные = Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные()) + КолвоПодчиненных + 1);
					//Если ТекущиеДанные.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар Тогда
					Если Строка.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар Тогда
						//ТекущиеДанные = Данные.Вставить(Данные.Индекс(ТекущиеДанные) + КолвоПодчиненных + 1);
						ТекущиеДанные = Данные.Вставить(Данные.Индекс(Строка) + КолвоПодчиненных + 1);
					Иначе
						СтрокаВладельца = Данные.Найти(ИдентификаторВладелеца, "Идентификатор");
						Если НЕ СтрокаВладельца = Неопределено Тогда
							ТекущиеДанные = Данные.Вставить(Данные.Индекс(СтрокаВладельца) + КолвоПодчиненных + 1);
						Иначе
							//ТекущиеДанные = Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные()) + 1);
							ТекущиеДанные = Данные.Вставить(Данные.Индекс(ТекущиеДанные) + 1);
						КонецЕсли;
					КонецЕсли;
					ТекущиеДанные.Владелец = ИдентификаторВладелеца;
				Иначе
					//ТекущиеДанные			= Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные())+1);
					ТекущиеДанные			= Данные.Вставить(Данные.Индекс(ТекущиеДанные)+1);
					ТекущиеДанные.Владелец	= ОригинальнаяСтрока.Идентификатор;
				КонецЕсли;
				
				ТекущиеДанные.ВидНоменклатуры 	= ТипНоменклатуры;
				ТекущиеДанные.Количество		= ОригинальнаяСтрока.Количество;
				ТекущиеДанные.КоличествоУточненное = ОригинальнаяСтрока.Количество; //Костенюк Александр 24.01.2017
				ТекущиеДанные.ПорядокПодачи 	= ОригинальнаяСтрока.ПорядокПодачи;
				ТекущиеДанные.НомерКлиента 		= ОригинальнаяСтрока.НомерКлиента;
				ТекущиеДанные.Компьютер 		= ОригинальнаяСтрока.Компьютер; 
				ТекущиеДанные.ТипАкции 			= ОригинальнаяСтрока.ТипАкции; 
				
			КонецЕсли;
			
		Иначе
			
			// Позиции добавляем всегда в конец
			ТекущиеДанные					= Данные.Добавить();
			ТекущиеДанные.ВидНоменклатуры	= Перечисления.ТипыСтрокЗаказов.Товар;
			ТекущиеДанные.ПорядокПодачи		= ПорядокПодачи;
			
			Если (ТипЗнч(Номенклатура) <> мТипТаблицыЗначений) Тогда
				ТекущиеДанные.Количество	= Количество;
				ТекущиеДанные.КоличествоУточненное = Количество; //Костенюк Александр 24.01.2017
			Иначе
				ТекущиеДанные.Количество	= Позиция.Количество;
				ТекущиеДанные.КоличествоУточненное = Позиция.Количество; //Костенюк Александр 24.01.2017
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущиеДанные.Идентификатор				= Новый УникальныйИдентификатор;
		ТекущиеДанные.Номенклатура				= Позиция.Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения			= ЕдиницаИзмерения;
		ТекущиеДанные.СтавкаНДС					= СтавкаНДС;
		ТекущиеДанные.Цена						= Цена; 
		ТекущиеДанные.ПлановаяСебестоимость 	= ПлановаяСебестоимость;
		ТекущиеДанные.НоменклатурнаяГруппа		= НоменклатурнаяГруппа;
		ТекущиеДанные.ГруппаБлюда				= ГруппаБлюда; //Костенюк Александр 07.08.2015
		ТекущиеДанные.Организация				= Организация;
		//ТекущиеДанные.Услуга					= Услуга;
		ТекущиеДанные.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.НоменклатураКод);
		ТекущиеДанные.НомерКлиента				= НомерКлиента; 
		ТекущиеДанные.Компьютер 				= Компьютер; 
		ТекущиеДанные.ТипАкции 					= ТипАкции;
		ТекущиеДанные.НаВынос					= НаВынос; //Костенюк Александр 02.11.2015
		
		Попытка
			ТекущиеДанные.Комментарий			= Позиция.Комментарий;
		Исключение
		КонецПопытки;
		
	Иначе
		// Изменение позиции.
		ТекущиеДанные.Количество = ТекущиеДанные.Количество + Количество;
		ТекущиеДанные.КоличествоУточненное = ТекущиеДанные.Количество; //Костенюк Александр 24.01.2017
		// Изменим количество в подчиненных строках
		ТаблицаЗаказаИзменитьПозициюИзДерева(Данные, ТекущиеДанные);
	КонецЕсли;
	
КонецЦикла;

// TODO: Расчет скидок.
Документ = ТабличноеПоле.Тег;
ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, Документ.ДополнительныеСвойства.Скидки);

// Обновление.
Если (Не ТабличноеПоле.ТекущиеДанные() = ТекущиеДанные) Тогда
	ТабличноеПоле.ТекущаяСтрока(ТекущиеДанные);
Иначе
	ТабличноеПоле.ОбновитьСтроки();
КонецЕсли;

КонецПроцедуры // ТаблицаЗаказаДобавитьПозицию()
//Костенюк Александр-Финиш 27.11.2012

//Костенюк Александр-Старт 30.01.2013
//
// Функция служит для выбора источника обращения клиента
//
// Параметры:
// Значение - Тип: СправочникСсылка.ИсточникиОбращения
//
// ВозвращаемоеЗначение:
// Булево. Признак того выбран ли источник обращения, либо нажата кнопка "Отмена"
//
Функция ВыборИсточникаОбращения(Значение = Неопределено) Экспорт

// Таблица источников обращения.
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ИсточникиОбращения.Ссылка,
               |	ИсточникиОбращения.Представление КАК Наименование
               |ИЗ
               |	Справочник.ИсточникиОбращения КАК ИсточникиОбращения
               |ГДЕ
               |	НЕ ИсточникиОбращения.ПометкаУдаления";
Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Ссылка");

// Выбор.
Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите источник обращения';uk='Виберіть джерело звернення'") , ТаблицаЗначений, "Картинка,Наименование") Тогда
	Значение = СтрокаТаблицы.Ссылка;
	Возврат Истина;
КонецЕсли;

Возврат Ложь;

КонецФункции // ВыборИсточникаОбращения()
//Костенюк Александр-Финиш 30.01.2013

//Костенюк Александр-Старт 01.04.2013
// Функция создает требуемый документ переданного типа (интерфейсная).
//
// Параметры:
//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Тип документа который требуется создать;
//	ДокументОснование - ПеречислениеСсылка.МодулиИПодсистемы, ДокументСсылка.РеализацияТоваровУслуг, СправочникСсылка.ИнформационныеКарты. Основание создания документа;
//	ТаблицаПереноса - ТаблицаЗначений. Список переносимых позицый и их количество.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументСоздать(Документ, ДокументОснование, ТаблицаПереноса = Неопределено) Экспорт

Перем ТолькоПросмотр;

МодульРесторан = Перечисления.МодулиИПодсистемы.Ресторан;
МодульДоставка = Перечисления.МодулиИПодсистемы.Доставка;

ПрочитатьНастройкиПользователя();
ПрочитатьПраваПользователя();

// Права доступа.
Если НЕ СозданиеЗаказов Тогда
	FrontOffice.НедостаточноПрав(НСтр("ru='для создания нового документа';uk='для створення нового документа'") );
	Возврат Ложь;
КонецЕсли;

// Определение типов объектов.
ТипДокументаРеализацияТоваровУслуг = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг,ДокументОбъект.РеализацияТоваровУслуг");
ТипДокумента = ТипЗнч(Документ); 
МетаданныеДокумента = Документ.Метаданные();
Если (НЕ ДокументОснование = Неопределено) Тогда 
	ТипОснования = ТипЗнч(ДокументОснование); 
	МетаданныеОснования = ДокументОснование.Метаданные();
КонецЕсли;
ОснованиеДокумент = Метаданные.Документы.Содержит(МетаданныеОснования);

// Ввод параметров.

// -- Модуль.
Если ОснованиеДокумент Тогда
	Модуль = ДокументОснование.Модуль;
Иначе
	Если (ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ИнформационныеКарты")) Тогда
		Модуль = МодульРесторан;
	Иначе
		Если (ТипЗнч(ДокументОснование) = Тип("ПеречислениеСсылка.МодулиИПодсистемы")) Тогда
			Модуль = ДокументОснование;
		Иначе
			FrontOffice.ОперацияНеВыполнена(НСтр("ru='Не указан модуль документа.';uk='Не вказано модуль документа.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

// -- Номер стола.
Комната = Неопределено;
Если Модуль = МодульРесторан Тогда
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Стол", МетаданныеДокумента) Тогда
		Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Стол", МетаданныеОснования) И ЗначениеЗаполнено(ДокументОснование.Стол) Тогда
			Стол = ДокументОснование.Стол;
		Иначе
			Стол = НомерСтолаПоУмолчанию;
		КонецЕсли;
		Если ВводНомераСтола Тогда 
			Если НЕ ВыборСтола(Стол) Тогда
				Возврат Ложь;
			КонецЕсли;
			//Костенюк Александр-Старт 05.06.2014
			// Проверка уникальности номера стола
			ПостфиксСтола = ПолчитьОчереднойПостфиксСтола(Документ, ОсновнойРесторан, Стол);
			Если ПостфиксСтола <> 0 Тогда
				Если ЗапросНаОткрытиеСтолаСНеуникальнымНомером Тогда
					ТекстРус = "Стол №" + Стол + " существует. Вы уверены, что хотите открыть стол с таким же номером?";
					ТекстУкр = "Стіл №" + Стол + " існує. Ви впевнені, що хочете відкрити стіл з таким самим номером?";
					Если НЕ (FrontOffice.ВывестиВопрос(НСтр("ru='"+ТекстРус+"';uk='"+ТекстУкр+"'"), РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да) Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//Костенюк Александр-Финиш 05.06.2014
		Иначе
			Если НЕ ЗначениеЗаполнено(Стол) Тогда
				FrontOffice.ОперацияНеВыполнена(НСтр("ru='Не указан стол документа.';uk='Не вказано стіл документа.'") );
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ВыборКомнаты(Комната) Тогда
		Возврат Ложь;
	КонецЕсли;
КонецЕсли;

// -- Контрагент.
Если Модуль = МодульДоставка Тогда
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
		Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеОснования) И ЗначениеЗаполнено(ДокументОснование.Контрагент) Тогда
			Контрагент = ДокументОснование.Контрагент;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

// -- Категория документа.
Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеДокумента) Тогда
	Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеОснования) И ЗначениеЗаполнено(ДокументОснование.КатегорияДокумента) Тогда
		КатегорияДокумента = ДокументОснование.КатегорияДокумента;
	Иначе
		КатегорияДокумента = КатегорияДокументаПоУмолчанию;
	КонецЕсли;
	Если ВводКатегорииДокумента Тогда
		Если НЕ ВыборКатегорииДокумента(КатегорияДокумента) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

// -- Категория контрагента.
КатегорияКонтрагента = Неопределено;
Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКонтрагента", МетаданныеДокумента) Тогда
	Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКонтрагента", МетаданныеОснования) И ЗначениеЗаполнено(ДокументОснование.КатегорияКонтрагента) Тогда
		КатегорияКонтрагента = ДокументОснование.КатегорияКонтрагента;
	Иначе
		КатегорияКонтрагента = КатегорияКонтрагентаПоУмолчанию;
	КонецЕсли;
	Если Модуль = МодульРесторан Тогда
		Если ВводКатегорииКонтрагента Тогда
			Если НЕ ВыборКатегорииКонтрагента(КатегорияКонтрагента) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

// -- Активность.
Активность = Неопределено;
Если ОбщегоНазначения.ЕстьРеквизитДокумента("Активность", МетаданныеДокумента) Тогда
	Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Активность", МетаданныеОснования) И ЗначениеЗаполнено(ДокументОснование.Активность) Тогда
		Активность = ДокументОснование.Активность;
	КонецЕсли;
	Если ЗапрашиватьАктивность Тогда
		ВыборАктивности(Активность);
	КонецЕсли;
КонецЕсли;

// -- Количество клиентов.
КоличествоКлиентов = 1;
Если Модуль = МодульРесторан Тогда
	Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("КоличествоКлиентов", МетаданныеОснования) И ЗначениеЗаполнено(ДокументОснование.КоличествоКлиентов) Тогда
		КоличествоКлиентов = ДокументОснование.КоличествоКлиентов;
	КонецЕсли;
	Если Стол.ТипСтола.КоличествоКлиентов И ВводКоличетсваКлиентов Тогда
		Если НЕ ВводКоличестваКлиентов(КоличествоКлиентов, Стол.ТипСтола.МаксимальноеКоличествоКлиентов) Тогда
			Возврат Ложь;
		КонецЕсли;
		// ---- Документ основание.
		Если ТипДокументаРеализацияТоваровУслуг.СодержитТип(ТипОснования) И ЗначениеЗаполнено(ДокументОснование.КоличествоКлиентов) Тогда
			Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Уменьшить количество клиентов в документе основании?';uk='Зменшити кількість клієнтів у домкументі підставі?'") , РежимДиалогаВопрос.ДаНетОтмена);
			Если (Результат = КодВозвратаДиалога.Да) Тогда
				ДокументОснованиеКоличествоКлиентов = Макс(ДокументОснование.КоличествоКлиентов - КоличествоКлиентов, 1);
			ИначеЕсли НЕ КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

// -- Ресторан.
Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеДокумента) Тогда
	Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеОснования) И ЗначениеЗаполнено(ДокументОснование.Ресторан) Тогда
		Ресторан = ДокументОснование.Ресторан;
	Иначе
		Ресторан = ОсновнойРесторан;
	КонецЕсли;
	Если Модуль = МодульРесторан Тогда
		Если НЕ ЗначениеЗаполнено(Ресторан) Тогда
			FrontOffice.ОперацияНеВыполнена("Не указан ресторан документа.");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

// -- Ответственный.
Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");

// -- Сотрудник.
Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеДокумента) Тогда
	Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеОснования) И ЗначениеЗаполнено(ДокументОснование.Сотрудник) Тогда
		Сотрудник = ДокументОснование.Сотрудник;
	Иначе
		Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
	КонецЕсли;
КонецЕсли;

// -- Сделка.
Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
	Если ТипДокументаРеализацияТоваровУслуг.СодержитТип(ТипОснования) Тогда 
		Сделка = ДокументОснование.Ссылка;
	КонецЕсли;
КонецЕсли;

// Создание объекта и модификация основания.
Попытка
	// -- Документ.
	
	// ---- Создание.
	ДокументОбъект = Документ;
	Если НЕ РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ---- Шапка.
	ДокументОбъект.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
	ДокументОбъект.Модуль = Модуль;
	ДокументОбъект.Ответственный = Ответственный;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда 
		ДокументОбъект.Сделка = Сделка;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеДокумента) Тогда
		ДокументОбъект.Ресторан = Ресторан;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеДокумента) Тогда
		ДокументОбъект.Сотрудник = Сотрудник;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Стол", МетаданныеДокумента) Тогда
		ДокументОбъект.Стол = Стол;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПостфиксСтола", МетаданныеДокумента) Тогда
		ДокументОбъект.ПостфиксСтола = ДокументОбъект.ПолчитьОчереднойПостфиксСтола();
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПолныйНомерСтола", МетаданныеДокумента) Тогда
		ДокументОбъект.ПолныйНомерСтола = ДокументОбъект.ПолчитьПолныйНомерСтола();
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
		ДокументОбъект.Контрагент = Контрагент;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКонтрагента", МетаданныеДокумента) Тогда
		ДокументОбъект.КатегорияКонтрагента = КатегорияКонтрагента;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Активность", МетаданныеДокумента) Тогда
		ДокументОбъект.Активность = Активность;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КоличествоКлиентов", МетаданныеДокумента) Тогда
		ДокументОбъект.КоличествоКлиентов = КоличествоКлиентов;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Комната", МетаданныеДокумента) Тогда
		ДокументОбъект.Комната = Комната;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеДокумента) Тогда
		ДокументОбъект.КатегорияДокумента = КатегорияДокумента;
	КонецЕсли;
	
	// ---- Шапка + МнЧ.
	Если (НЕ ДокументОснование = Неопределено) И Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
		ДокументОбъект.Заполнить(ДокументОснование, ТаблицаПереноса);
	Иначе
		ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
	КонецЕсли;
	
	ПрименитьАкции(ДокументОбъект, Перечисления.УсловияАкции.ПриСозданииЗаказа);
	
Исключение
	
	РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено);
	FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно создать документ.';uk='Неможливо створити документ.'")  + ОписаниеОшибки() + ".");
	Возврат Ложь;
	
КонецПопытки;

// Отрктие объекта.
Если (НЕ ДокументОснование = Неопределено) И ОснованиеДокумент Тогда
	Возврат Истина;
КонецЕсли;

Возврат ДокументОткрыть(ДокументОбъект);

КонецФункции // ДокументСоздать()
//Костенюк Александр-Финиш 01.04.2013

//Костенюк Александр-Старт 01.04.2013
//
// Процедура получает настройки пользователя/группы пользователей.
//
// Параметры:
// Нет.
//
Процедура ПрочитатьНастройкиПользователя() Экспорт

	ЗапрашиватьАктивность 									= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьАктивность);
	НомерСтолаПоУмолчанию 									= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeНомерСтолаПоУмолчаниюЗаказа);
	ВводНомераСтола 										= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВводНомераСтолаЗаказа);
	КатегорияКонтрагентаПоУмолчанию 						= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeКатегорияКонтрагентаПоУмолчаниюЗаказа);
	ВводКатегорииКонтрагента 								= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВводКатегорииКонтрагентаЗаказа);
	ВводКоличетсваКлиентов 									= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВводКоличетсваКлиентовЗаказа);
	КатегорияДокументаПоУмолчанию 							= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeКатегорияДокументаПоУмолчаниюЗаказа);
	ВводКатегорииДокумента 									= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВводКатегорииДокументаЗаказа);
	ОсновнойРесторан 										= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойРесторан);
	ОсновнойВидМеню 										= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойВидМеню);

	АвтоматическоеСозданиеЗаказаПриВходеВСистему 			= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeАвтоматическоеСозданиеЗаказаПриВходеВСистему);	
	ЗапрашиватьКоличество 									= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьПодтверждениеКоличестваПриДобавленииТовараЗаказа);
	НеОбъединятьОдинаковыеТоварыПриДобавленииТовара 		= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeНеОбъединятьОдинаковыеТоварыПриДобавленииТовараЗаказа);
	НеРазделятьПечатьПречекаИПриемОплатыВоВремени 			= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeНеРазделятьПечатьПречекаИПриемОплатыВоВремениЗаказа);
	ЗапрашиватьАктивностьПриПечати 							= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьАктивностьПриПечати);
	ЗапрашиватьИсточникОбращения 							= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьИсточникОбращения);

	ВидОплатыПоУмолчанию 									= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВидОплатыПоУмолчаниюЗаказа);
	ОсновнойВидОплатыЧекаККМ 								= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОплатыЧекаККМ);
	ИзменениеДисконтнойКарты 								= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeИзменениеДисконтнойКартыЗаказа);
	ВыводитьВстречкуНаПечать 								= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьВстречкуНаПечатьЗаказа);
	ЗапрашиватьПодтверждениеПриПриемеОплаты 				= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьПодтверждениеПриПриемеОплатыЗаказа); 
	ЗапрашиватьПодтверждениеПриОтменеОплаты 				= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьПодтверждениеПриОтменеОплатыЗаказа); 
	ЗапрашиватьПечатьПречекаПриПриемеОплаты 				= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьПечатьПречекаПриПриемеОплатыЗаказа); 
	ЗапрашиватьПодтверждениеПриОтменеПречека 				= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьПодтверждениеПриОтменеПречекаЗаказа); 
	ВводНомераСтолаЗаказаПриПереносе 						= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВводНомераСтолаЗаказаПриПереносе); 
	ВыводитьВстречкуНаОтменуПриПереносе						= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьВстречкуНаОтменуПриПереносе);
	ВыводитьВстречкуПриПереносе								= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВыводитьВстречкуПриПереносе);
	ЗапрашиватьПодтверждениеПриПечатиПречека				= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьПодтверждениеПриПечатиПречекаЗаказа);
	РаздельнаяПечатьПречековПоГостям 						= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeРаздельнаяПечатьПречековПоГостям);
	РегистрироватьУдалениеБлюдаВОткрытомЗаказе 				= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeРегистрироватьУдалениеБлюдаВОткрытомЗаказе);
	ЗапросНаОткрытиеСтолаСНеуникальнымНомером 				= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапросНаОткрытиеСтолаСНеуникальнымНомером);
	ЗапрашиватьПричинуПримененияРучнойСкидки 				= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeЗапрашиватьПричинуПримененияРучнойСкидки);
	ТребоватьНаличиеКатегорииКлиентовПриПечатиПречека		= УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeТребоватьНаличиеКатегорииКлиентовПриПечатиПречекаЗаказа);

КонецПроцедуры
//Костенюк Александр-Финиш 01.04.2013

//Костенюк Александр-Старт 01.04.2013
//
// Процедура получает права пользователя/группы пользователей.
//
// Параметры:
// Нет.
//
Процедура ПрочитатьПраваПользователя() Экспорт

СозданиеЗаказов 					= УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeСозданиеЗаказов); 
ПереносСоставаЗаказов 				= УправлениеПользователями.УпроститьЗначениеПрава(УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПереносСоставаЗаказов));
СозданиеСписаний 					= УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeСозданиеСписаний);
ПереносСоставаСписаний 				= УправлениеПользователями.УпроститьЗначениеПрава(УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПереносСоставаСписаний));
ЗапретитьСохранениеЗаказов 			= УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeЗапретитьСохранениеЗаказов);
ПриемОплатыЗаказов 					= УправлениеПользователями.УпроститьЗначениеПрава(УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПриемОплатыЗаказов));
ИзменениеНомераПодачи 				= УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИзменениеНомераПодачи);
РазрешитьИспользованиеСообщений 	= УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeРазжешитьИспользованиеСообщенийВЗаказе);
РазрешитьИспользованиеРучныхСкидок	= УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeРазрешитьИспользованиеРучныхСкидок);
РазрешитьПросмотрВторойФормы 		= УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПросмотрВторойФормы);
ИзменениеКонтактнойИнформацииЗаказов = УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИзменениеКонтактнойИнформацииЗаказов);

КонецПроцедуры
//Костенюк Александр-Финиш 01.04.2013

//Костенюк Александр-Старт 11.04.2013
// Процедура производит заполнение табличного поля видов оплат
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг.
// ТабличноеПоле - Тип: ОбработкаОбъект.TouchТабличноеПоле.
// 
Процедура ДеревоОплатПрочитать(ДокументОбъект, ТабличноеПоле) Экспорт

Данные = ТабличноеПоле.Данные();

Если (Данные = Неопределено) Тогда
	Данные = Новый ДеревоЗначений;
	Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
	Данные.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
	Данные.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Оплата.Синоним);
	Данные.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"), "НУ");
	ТабличноеПоле.Данные(Данные); 
	ТабличноеПоле.СоздатьКолонки("Картинка,Представление,ОтражатьВНалоговомУчете");
	ТабличноеПоле.Колонки.Получить("Представление").Ширина = 300 * 0.75;
	ТабличноеПоле.Колонки.Получить("ОтражатьВНалоговомУчете").Ширина = 300 * 0.10;
	ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;	
	Возврат;
Иначе
	Данные.Строки.Очистить();
КонецЕсли;

Если (ДокументОбъект = Неопределено) Тогда
	Возврат;
КонецЕсли;

ТекущаяОплата = ДокументОбъект.Оплата;	

Если НЕ ЗначениеЗаполнено(ТекущаяОплата) Тогда
	ТекущаяОплата = ?(ЗначениеЗаполнено(ВидОплатыПоУмолчанию), ВидОплатыПоУмолчанию, ОсновнойВидОплатыЧекаККМ);
КонецЕсли;
Если ДокументОбъект.Оплата <> ТекущаяОплата Тогда
	ДокументОбъект.Оплата = ТекущаяОплата;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ТекущаяОплата, "ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете");
КонецЕсли; 

Попытка
	Скидки = ДокументОбъект.ДополнительныеСвойства.Скидки;
Исключение
	Скидки = ДокументОбъект.Скидки.Выгрузить();
КонецПопытки;

ДанныеОпределены = Ложь;

Если Скидки.Количество() > 0 Тогда		
	
	Если Скидки.Колонки.Найти("ВидыОплатККМ") = Неопределено Тогда
		Скидки.Колонки.Добавить("ВидыОплатККМ", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
	КонецЕсли;
	
	ПустойВидОплат = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы Из Скидки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СкидкаНаценка.ВидыОплатЧекаККМ) Тогда
			СтрокаТаблицы.ВидыОплатККМ = СтрокаТаблицы.СкидкаНаценка.ВидыОплатЧекаККМ;
			ТекущаяОплата = ПустойВидОплат;
		Иначе
			СтрокаТаблицы.ВидыОплатККМ = ПустойВидОплат;
		КонецЕсли;                              
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугСкидки.СуммаСкидки КАК СуммаСкидки,
	               |	РеализацияТоваровУслугСкидки.ВидыОплатККМ
	               |ПОМЕСТИТЬ МаксимальнаяСкидка
	               |ИЗ
	               |	&Скидки КАК РеализацияТоваровУслугСкидки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	МаксимальнаяСкидка.ВидыОплатККМ
	               |ПОМЕСТИТЬ ВидОплат
	               |ИЗ
	               |	МаксимальнаяСкидка КАК МаксимальнаяСкидка
	               |ГДЕ
	               |	НЕ МаксимальнаяСкидка.ВидыОплатККМ = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	               |	И МаксимальнаяСкидка.СуммаСкидки > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МаксимальнаяСкидка.СуммаСкидки УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидыОплатЧекаККМ.Родитель КАК Родитель,
	               |	ВидыОплатЧекаККМ.Ссылка КАК Ссылка,
	               |	ВидыОплатЧекаККМ.ЭтоГруппа КАК ЭтоГруппа,
	               |	ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
	               |	ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	               |	ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете,
	               |	ВидыОплатЧекаККМ.Представление КАК Представление
	               |ИЗ
	               |	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	               |ГДЕ
	               |	ВидыОплатЧекаККМ.Ссылка В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				ВидОплат.ВидыОплатККМ
	               |			ИЗ
	               |				ВидОплат)
	               |	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	               |	И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
	               |	И ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ МаксимальнаяСкидка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВидОплат";
	
	Если РазрешитьПросмотрВторойФормы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Скидки", Скидки);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Результат.Выгрузить(), "Ссылка", "Родитель", Данные);
		ДанныеОпределены = Истина;
	КонецЕсли;

КонецЕсли;

Если НЕ ДанныеОпределены Тогда
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидыОплатЧекаККМ.Ссылка КАК Ссылка,
	               |	ВидыОплатЧекаККМ.Родитель КАК Родитель,
	               |	ВидыОплатЧекаККМ.ЭтоГруппа КАК ЭтоГруппа,
	               |	ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете,
	               |	ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	               |	ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете,
	               |	ВидыОплатЧекаККМ.Представление КАК Представление
	               |ИЗ
	               |	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	               |ГДЕ
	               |	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	               |	И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
	               |	И ВидыОплатЧекаККМ.ИспользоватьВРеализацияТоваровУслуг
	               |	И ВидыОплатЧекаККМ.Ссылка В ИЕРАРХИИ(&Ссылка)";
	Если РазрешитьПросмотрВторойФормы Тогда
		// Такая замена здесь не работает, т.к. система устанавливает значение ОтражатьВНалоговомУчете = Истина
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете", "");
	КонецЕсли;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ДокументОбъект.Комната) Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Константы.ВидОплатыКомнат.Получить());
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВидыОплатЧекаККМ.Ссылка В ИЕРАРХИИ(&Ссылка)", "");
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();			
	Если РезультатЗапроса.Пустой() Тогда
		ТабличноеПоле.ОбновитьСтроки();
		Возврат;
	КонецЕсли;
	ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(РезультатЗапроса.Выгрузить(), "Ссылка", "Родитель", Данные);
КонецЕсли;

Если ЗначениеЗаполнено(ТекущаяОплата) Тогда
	ТекущаяСтрока = Данные.Строки.Найти(ТекущаяОплата, "Ссылка", Истина);
	ТабличноеПоле.ТекущаяСтрока(ТекущаяСтрока);
Иначе
	ТабличноеПоле.ОбновитьСтроки();
КонецЕсли;
	
КонецПроцедуры
//Костенюк Александр-Финиш 11.04.2013

//Костенюк Александр-Старт 16.04.2013
// Процедура переноса данных табличного поля в документ.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.РеализацияТоваровУслуг.
//	ТабличноеПоле - Тип: ОбработкаОбъект.TouchТабличноеПоле.
//
Процедура ТаблицаЗаказаЗаписать(ДокументОбъект, ТабличноеПоле) Экспорт

Данные = ТабличноеПоле.Данные();

СписокРеквизитов = Новый СписокЗначений;
Для Каждого Реквизит Из ДокументОбъект.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
	Реквизит = Реквизит.Имя;
	Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
		СписокРеквизитов.Добавить(Реквизит);	
	КонецЕсли;
КонецЦикла;

// Перенос данных.
ДокументОбъект.Товары.Очистить();

Для Каждого СтрокаДанных Из Данные Цикл
	СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		Реквизит = Реквизит.Значение;
		СтрокаТабличнойЧасти[Реквизит] = СтрокаДанных[Реквизит];
	КонецЦикла;			
КонецЦикла;

КонецПроцедуры // ТаблицаЗаказаЗаписать()
//Костенюк Александр-Финиш 16.04.2013

//Костенюк Александр-Старт 30.04.2013
// Процедура заполнения табличного поля заказа документа.
//
// Параметры:
//	Документ - ДокументОбъект.РеализацияТоваровУслуг.
//	ТабличноеПоле - Тип: ОбработкаОбъект.TouchТабличноеПоле.
//
Процедура ТаблицаЗаказаПрочитать(ДокументОбъект, ТабличноеПоле) Экспорт

// Данные.
Данные = ТабличноеПоле.Данные();
Если (Данные = Неопределено) Тогда
	
	Данные = Новый ТаблицаЗначений;
	
	Данные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)), "N");
	Для Каждого Реквизит Из Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты Цикл
		Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
	КонецЦикла;
	Данные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
	Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), Данные.Колонки.Номенклатура.Заголовок);
	
	ТабличноеПоле.Данные(Данные);
	//ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество,КоличествоУточненное,Цена,СуммаОтображаемая,ПорядокПодачи,НаВынос,НомерКлиента");
	ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество,КоличествоУточненное,Цена,СуммаБезСкидок,ПорядокПодачи,НаВынос,НомерКлиента");
	ТабличноеПоле.Колонки.Получить("НомерСтроки").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ТабличноеПоле.Колонки.Получить("НомерСтроки").Ширина = 400 * 0.01;
	ТабличноеПоле.Колонки.Получить("НомерСтроки").ТекстШапки = НСтр("ru='N';uk='N'");
	ТабличноеПоле.Колонки.Получить("НомерСтроки").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	ТабличноеПоле.Колонки.Получить("НоменклатураКод").Ширина = 400 * 0.10;
	ТабличноеПоле.Колонки.Получить("НоменклатураКод").ТекстШапки = НСтр("ru='Код';uk='Код'");
	ТабличноеПоле.Колонки.Получить("НоменклатураКод").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 400 * 0.40;
	ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").ТекстШапки = НСтр("ru='Номенклатура';uk='Номенклатура'");
	ТабличноеПоле.Колонки.Получить("Количество").Ширина = 400 * 0.10;
	ТабличноеПоле.Колонки.Получить("Количество").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	ТабличноеПоле.Колонки.Получить("Количество").ТекстШапки = НСтр("ru='Кол-во';uk='Кіл-сть'");
	ТабличноеПоле.Колонки.Получить("КоличествоУточненное").Ширина = 400 * 0.10;
	ТабличноеПоле.Колонки.Получить("КоличествоУточненное").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.КоличествоУточненное.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.КоличествоУточненное.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	ТабличноеПоле.Колонки.Получить("КоличествоУточненное").ТекстШапки = НСтр("ru='Кол-во порц';uk='Кіл-сть порц'");
	ТабличноеПоле.Колонки.Получить("Цена").Ширина = 400 * 0.10;
	ТабличноеПоле.Колонки.Получить("Цена").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	ТабличноеПоле.Колонки.Получить("Цена").ТекстШапки = НСтр("ru='Цена';uk='Ціна'");
	//ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Ширина = 400 * 0.10;
	//ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").ТекстШапки = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Синоним;
	//ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	//ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").ТекстШапки = НСтр("ru='Сумма';uk='Сума'");
	ТабличноеПоле.Колонки.Получить("СуммаБезСкидок").Ширина = 400 * 0.10;
	ТабличноеПоле.Колонки.Получить("СуммаБезСкидок").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.СуммаБезСкидок.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.СуммаБезСкидок.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
	ТабличноеПоле.Колонки.Получить("СуммаБезСкидок").ТекстШапки = НСтр("ru='Сумма';uk='Сума'");
	ТабличноеПоле.Колонки.Получить("ПорядокПодачи").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ТабличноеПоле.Колонки.Получить("ПорядокПодачи").Ширина = 400 * 0.05;
	ТабличноеПоле.Колонки.Получить("ПорядокПодачи").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.ПорядокПодачи.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.ПорядокПодачи.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	ТабличноеПоле.Колонки.Получить("ПорядокПодачи").ТекстШапки = НСтр("ru='Подача';uk='Подача'");
	ТабличноеПоле.Колонки.Получить("ПорядокПодачи").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	ТабличноеПоле.Колонки.Получить("НаВынос").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ТабличноеПоле.Колонки.Получить("НаВынос").Ширина = 400 * 0.10;
	ТабличноеПоле.Колонки.Получить("НаВынос").ТекстШапки = НСтр("ru='На вынос';uk='На винос'");
	ТабличноеПоле.Колонки.Получить("НаВынос").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	ТабличноеПоле.Колонки.Получить("НомерКлиента").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ТабличноеПоле.Колонки.Получить("НомерКлиента").Ширина = 400 * 0.05;
	ТабличноеПоле.Колонки.Получить("НомерКлиента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.НомерКлиента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.НомерКлиента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	ТабличноеПоле.Колонки.Получить("НомерКлиента").ТекстШапки = НСтр("ru='Клиент';uk='Клієнт'");
	ТабличноеПоле.Колонки.Получить("НомерКлиента").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
	ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
	
	Возврат;
Иначе
	Данные.Очистить();
КонецЕсли;

Если (ДокументОбъект = Неопределено) тогда
	Возврат;
КонецЕсли;

// Настройка отображаемой суммы и порядка подачи.
МетаданныеДокумента = ДокументОбъект.Метаданные();
//ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Данные = "СуммаБезСкидок";

Если (ДокументОбъект = ДокументОбъект.Ссылка) тогда
	Возврат;
КонецЕсли;

// Список реквизитов.
// -- Товары.
СписокРеквизитовТоваров = Новый СписокЗначений();
Для Каждого Реквизит Из ДокументОбъект.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
	Реквизит = Реквизит.Имя;
	Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
		СписокРеквизитовТоваров.Добавить(Реквизит);	
	КонецЕсли;
КонецЦикла;

// Выборка данных.
// -- Товары.
Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
	СтрокаДанных = Данные.Добавить();
	СтрокаДанных.НомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
	Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
		Реквизит = Реквизит.Значение;
		СтрокаДанных[Реквизит] = СтрокаТабличнойЧасти[Реквизит];
	КонецЦикла;
	СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
КонецЦикла;

// -- Сортировка.
Данные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");

// Обновление
ТабличноеПоле.ОбновитьСтроки();

КонецПроцедуры // ТаблицаЗаказаПрочитать()
//Костенюк Александр-Финиш 30.04.2013

//Костенюк Александр-Старт 24.05.2013
//
// Функция служит для выбора активности
//
// Параметры:
// Значение - Тип: СправочникСсылка.Активности
//
// ВозвращаемоеЗначение:
// Булево. Признак того выбрана активность, либо нажата кнопка "Отмена"
//
Функция ВыборАктивности(Значение = Неопределено) Экспорт

// Таблица активностей.
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	Активности.Ссылка,
               |	Активности.Представление КАК Наименование
               |ИЗ
               |	Справочник.Активности КАК Активности
               |ГДЕ
               |	НЕ Активности.ПометкаУдаления
               |	И &ПериодыДействия";
Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействия", "Активности", ТекущаяДата());

РезультатЗапроса = Запрос.Выполнить();

Если НЕ РезультатЗапроса.Пустой() Тогда
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Ссылка");
	// Выбор.
	Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите активность';uk='Виберіть активність'") , ТаблицаЗначений, "Картинка,Наименование") Тогда
		Значение = СтрокаТаблицы.Ссылка;
		Возврат Истина;
	КонецЕсли;
КонецЕсли;

Возврат Ложь;
	
КонецФункции // ВыборАктивности()
//Костенюк Александр-Финиш 24.05.2013

//Костенюк Александр-Старт 07.10.2013
//
// Функция служит для расчета встречки
//
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// ДокументСсылка - Тип: ДокументСсылка.РеализацияТоваровУслуг
// ДатаПечатиВстречки - Тип: Дата
//
// ВозвращаемоеЗначение:
// Булево. Признак успешной проверки
//
Функция ПроверкаВстречки(ДокументОбъект, ДокументСсылка, ДатаПечатиВстречки = Неопределено) Экспорт

Если НЕ ОбщегоНазначения.РежимFrontOffice() Тогда
	Возврат Истина;
КонецЕсли;

// Рабочие центры.
РегистрыСведений.СостояниеРабочихЦентровРеализацийТоваровУслуг.РасчетВстречки(ДокументОбъект, ДокументСсылка, ДатаПечатиВстречки, ТаблицаБлюдБезГруппыПечати);

Возврат Истина;

КонецФункции
//Костенюк Александр-Финиш 07.10.2013

//Костенюк Александр-Старт 05.06.2014
// Функция возвращает очередной постфикс стола.
//
Функция ПолчитьОчереднойПостфиксСтола(Документ, Ресторан, Стол) Экспорт

УстановитьПривилегированныйРежим(Истина);

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	СостояниеДокументов.ПостфиксСтола КАК ПостфиксСтола
               |ИЗ
               |	РегистрСведений.СостояниеДокументов КАК СостояниеДокументов
               |ГДЕ
               |	СостояниеДокументов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
               |	И СостояниеДокументов.Стол = &Стол
               |	И СостояниеДокументов.Ресторан = &Ресторан";
Запрос.УстановитьПараметр("Ресторан", Ресторан);

Запрос.УстановитьПараметр("Стол", Стол);
ТаблицаПостфиксовСтола = Запрос.Выполнить().Выгрузить();

УстановитьПривилегированныйРежим(Ложь);

// Перебор постфиксов.
Если Булево(ТаблицаПостфиксовСтола.Количество()) Тогда
	Для Индекс = 0 По Pow(10, Документ.Метаданные().Реквизиты.ПостфиксСтола.Тип.КвалификаторыЧисла.Разрядность) - 1 Цикл
		Если (ТаблицаПостфиксовСтола.Найти(Индекс, "ПостфиксСтола") = Неопределено) Тогда
			Возврат Индекс;
		КонецЕсли;
	КонецЦикла;
КонецЕсли;

// Последний вариант.
Возврат Число(Ложь);

КонецФункции // ПолчитьОчереднойПостфиксСтола()
//Костенюк Александр-Финиш 05.06.2014

//Костенюк Александр-Старт 04.06.2014
// 
// Функция выполняет проверку уникальности номера стола
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// Стол - Тип: СправочникСсылка.Столы
//
// ВозвращаемоеЗначение:
// Булево. Признак успешной проверки
//
Функция ПроверкаУникальностиНомераСтола(ДокументОбъект) Экспорт
Если (ДокументОбъект.ПостфиксСтола <> 0) И (ДокументОбъект.ЭтоНовый()) Тогда
	Если ЗапросНаОткрытиеСтолаСНеуникальнымНомером Тогда
		ТекстРус = "Стол №" + ДокументОбъект.Стол + " существует. Вы уверены, что хотите открыть стол с таким же номером?";
		ТекстУкр = "Стіл №" + ДокументОбъект.Стол + " існує. Ви впевнені, що хочете відкрити стіл з таким самим номером?";
		Если НЕ (FrontOffice.ВывестиВопрос(НСтр("ru='"+ТекстРус+"';uk='"+ТекстУкр+"'"), РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;
Возврат Истина;
КонецФункции
//Костенюк Александр-Финиш 04.06.2014

//Костенюк Александр-Старт 10.06.2014
//
// Функция служит для выбора активности
//
// Параметры:
// Значение - Тип: СправочникСсылка.ПричиныРучныхСкидок
//
// ВозвращаемоеЗначение:
// Булево. Признак того выбрана причина, либо нажата кнопка "Отмена"
//
Функция ВыборПричиныПримененияРучнойСкидки(Значение = Неопределено) Экспорт

// Данные.
Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяПричиныРучныхСкидок");
Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Ссылка");

// Выбор.
Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите причину применения ручной скидки';uk='Виберіть причину застосування ручної знижки'") , ТаблицаЗначений, "Картинка,Наименование") Тогда
	Значение = СтрокаТаблицы.Ссылка;
	Возврат Истина;
КонецЕсли;

Возврат Ложь;

КонецФункции // ВыборПричиныПримененияРучнойСкидки()
//Костенюк Александр-Финиш 10.06.2014

//Костенюк Александр-Старт 19.02.2016
// 
// Функция служит для определения подписи, которую нужно вывести в перчек
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
//
// ВозвращаемоеЗначение:
// Подпись - Тип: СправочникСсылка.ТипыПодписей. Подпись, которую нужно вывести в перчек
//
Функция ПолучитьПодпись(ДокументОбъект, ТипСкидкиНаценки, Сумма) Экспорт

Запрос = Новый Запрос;
ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ТипыПодписей.Ссылка,
               |	ТипыПодписей.Условие,
               |	ТипыПодписей.ЗначениеУсловия,
               |	ТипыПодписей.ЗначениеУсловияДоп,
               |	ТипыПодписей.ПериодДействия,
               |	ВЫБОР
               |		КОГДА ТипыПодписей.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПодписей.ДисконтнаяКарта)
               |			ТОГДА 0
               |		ИНАЧЕ ТипыПодписей.Приоритет
               |	КОНЕЦ КАК Приоритет
               |ИЗ
               |	Справочник.ТипыПодписей КАК ТипыПодписей
               |ГДЕ
               |	ТипыПодписей.Актуальность
               |	И НЕ ТипыПодписей.ЭтоГруппа
               |	И ВЫБОР
               |			КОГДА ТипыПодписей.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПодписей.БезУсловий)
               |				ТОГДА ИСТИНА
               |			КОГДА ТипыПодписей.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПодписей.Активность)
               |					И ТипыПодписей.ЗначениеУсловия = &Активность
               |				ТОГДА ИСТИНА
               |			КОГДА ТипыПодписей.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПодписей.ДисконтнаяКарта)
               |					И ТипыПодписей.ЗначениеУсловия = &ДисконтнаяКарта
               |				ТОГДА ИСТИНА
               |			КОГДА ТипыПодписей.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПодписей.ТипСкидкиНаценки)
               |					И ТипыПодписей.ЗначениеУсловия = &ТипСкидкиНаценки
               |				ТОГДА ИСТИНА
               |			КОГДА ТипыПодписей.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПодписей.КоличествоГостей)
               |					И ТипыПодписей.ЗначениеУсловия <= &КоличествоГостей
               |					И ТипыПодписей.ЗначениеУсловияДоп >= &КоличествоГостей
               |				ТОГДА ИСТИНА
               |			КОГДА ТипыПодписей.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПодписей.Сумма)
               |					И ТипыПодписей.ЗначениеУсловия <= &Сумма
               |					И ТипыПодписей.ЗначениеУсловияДоп >= &Сумма
               |				ТОГДА ИСТИНА
               |		КОНЕЦ
               |	И &ПериодДействия
               |
               |УПОРЯДОЧИТЬ ПО
               |	Приоритет";
Запрос.Текст = ТекстЗапроса;
РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодДействия", "ТипыПодписей");

Запрос.УстановитьПараметр("Активность", ?(ЗначениеЗаполнено(ДокументОбъект.Активность), ДокументОбъект.Активность, Справочники.Активности.ПустаяСсылка()));
Запрос.УстановитьПараметр("ДисконтнаяКарта", ?(ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта), ДокументОбъект.ДисконтнаяКарта, Справочники.ИнформационныеКарты.ПустаяСсылка()));
Запрос.УстановитьПараметр("ТипСкидкиНаценки", ?(ЗначениеЗаполнено(ТипСкидкиНаценки), ТипСкидкиНаценки, Справочники.ТипыСкидокНаценок.ПустаяСсылка()));
Запрос.УстановитьПараметр("КоличествоГостей", ДокументОбъект.КоличествоКлиентов);
Запрос.УстановитьПараметр("Сумма", Сумма);
Результат = Запрос.Выполнить().Выгрузить();

Если Результат.Количество() Тогда
	Возврат Результат[0].Ссылка;
КонецЕсли;

Возврат Справочники.ТипыПодписей.ПустаяСсылка();

КонецФункции
//Костенюк Александр-Финиш 19.02.2016

Функция ВводНоминалаСкдики(Значение = Неопределено, Мин = Неопределено, Макс = Неопределено, ЗаголовокОкна = "ru='Введите номинал скидки';uk='Введіть номінал знижки'") Экспорт
	
	// Нормализация.
	Если (Значение = Неопределено) Тогда
		Значение = Число(Истина);
	КонецЕсли;
	
	// Ввод.
	Возврат FrontOffice.ВводЧисла(Значение, НСтр(ЗаголовокОкна), Метаданные.Справочники.ТипыСкидокНаценок.Реквизиты.ПроцентСкидкиНаценки.Тип.КвалификаторыЧисла.Разрядность, Метаданные.Справочники.ТипыСкидокНаценок.Реквизиты.ПроцентСкидкиНаценки.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, Мин, Макс);
	
КонецФункции // ВводНоминалаСкдики()


///////////////////////////////////////////////////////////////////////////////////////////	
// Инициализация переменных.

мТипТипа = Тип("Тип");
мТипЧисла = Тип("Число");
мТипСтроки = Тип("Строка");
мТипТаблицыЗначений = Тип("ТаблицаЗначений");

мВыводитьКартинкиПутиМеню = Ложь;
мВыводитьКартинкиГруппМеню = Ложь;
мВыводитьКартинкиЭлементовМеню = Ложь;
мВыводитьЦеныМеню = Ложь;
мКомпактноеПредставлениеМеню = Ложь;
мРазмерЭлементовМеню = УправлениеПользователями.ПолучитьНастрокуРазмера("160x40");
мДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
мСертификат = Справочники.Сертификаты.ПустаяСсылка();

#КонецЕсли
