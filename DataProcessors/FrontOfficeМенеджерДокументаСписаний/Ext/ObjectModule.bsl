#Если Клиент Тогда
	
	Перем мКонтрагентПоиска, мМассивКонтрагентовПоиска;	
	Перем мКешМеню,мКешПользователь;
	Перем мТипТипа, мТипЧисла, мТипСтроки, мТипТаблицыЗначений;
	Перем мВыводитьКартинкиПутиМеню, мВыводитьКартинкиГруппМеню, мВыводитьКартинкиЭлементовМеню, мВыводитьЦеныМеню, мКомпактноеПредставлениеМеню, мРазмерЭлементовМеню;
	Перем мТабличноеПолеВнешнихДанных;
	Перем мДисконтнаяКарта;
	Перем мСертификат;
	
	// Процедура инициализация модуля рабочего места.
	//
	Процедура Инициализация() Экспорт
		
		// Проверка режима.
		Если ПолучитьСерверFrontOffice().РежимBackOffice Тогда
			Возврат;
		КонецЕсли;
		
		// Создание формы.
		Если (Форма = Неопределено) Тогда
			Форма = ЭтотОбъект.ПолучитьФорму("Форма");
			ПолучитьСерверFrontOffice().__ОткрытьФорму(Форма);
		КонецЕсли;
		
	КонецПроцедуры // Инициализация()
		
	Функция ПолучитьПредставлениеНоменклатуры(Номенклатура, Код = Неопределено) Экспорт
		
		НоменклатураОбъект = ПолучитьСерверFrontOffice().ПолучитьОбъект(Номенклатура, "НоменклатураМеню");
		
		Код = НоменклатураОбъект.Код;
		
		Возврат НоменклатураОбъект.Наименование;
		
	КонецФункции // ПолучитьПредставлениеНоменклатуры()
	
	Функция ПодтверждениеВыбораКонтрагентаИзЧерногоСписка(Контрагент) Экспорт
		
		// Открываем форму.
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаКонтрагентаВЧерномСписке");
		ФормаВыбора.Контрагент = Контрагент;
		
		// Подтверждение.
		Возврат ФормаВыбора.ОткрытьМодально();
		
	КонецФункции // ПодтверждениеВыбораКонтрагентаИзЧерногоСписка()
	
	Функция ВыборВидаОплаты(Значение = Неопределено) Экспорт
		
		// Данные.
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяВидыОплатЧекаККМ ГДЕ НЕ ПометкаУдаления УПОРЯДОЧИТЬ ПО Родитель, ЭтоГруппа Убыв, Представление");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
		СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
		
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите вид оплаты';uk='Виберіть вид оплати'") , ДеревоЗначений, "Картинка,Наименование") Тогда
			Значение = СтрокаДерева.Ссылка;
			ДеревоЗначений = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
		ДеревоЗначений = Неопределено;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ВыборРесторана(Значение = Неопределено) Экспорт
		
		// Данные.
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяРестораны ГДЕ Актуальность И (НЕ ПометкаУдаления)");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ТаблицыЗначений = Запрос.Выполнить().Выгрузить();
		СтрокаТаблицы = ТаблицыЗначений.Найти(Значение, "Ссылка");
		
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите ресторан';uk='Виберіть ресторан'") , ТаблицыЗначений, "Картинка,Наименование") Тогда
			Значение = СтрокаТаблицы.Ссылка;
			ТаблицыЗначений = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
		ТаблицыЗначений = Неопределено;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ВыборРабочегоЦентра(Значение = Неопределено) Экспорт
		
		// Данные.
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяРабочиеЦентры ГДЕ Актуальность И (НЕ ПометкаУдаления)");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ТаблицыЗначений = Запрос.Выполнить().Выгрузить();
		СтрокаТаблицы = ТаблицыЗначений.Найти(Значение, "Ссылка");
		
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите на какой рабочий центр';uk='Виберіть на який робочий центр'") , ТаблицыЗначений, "Картинка,Наименование") Тогда
			Значение = СтрокаТаблицы.Ссылка;
			ТаблицыЗначений = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
		ТаблицыЗначений = Неопределено;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ВыборРесторанаДляОдногоАктивного(Значение = Неопределено) Экспорт
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|*,
		|	Рестораны.Представление КАК Наименование
		|ИЗ
		|	Справочник.Рестораны КАК Рестораны
		|ГДЕ
		|	(НЕ Рестораны.ПометкаУдаления)
		|	И Рестораны.Актуальность");
		Если не Запрос.Выполнить().Пустой() тогда
			ТаблицыЗначений = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицыЗначений.Количество() = 1  Тогда
				Значение=ТаблицыЗначений[0].ССылка;
				ТаблицыЗначений = Неопределено;
				Возврат Истина;
			иначе
				СтрокаТаблицы = ТаблицыЗначений.Найти(Значение, "Ссылка");
				Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите ресторан';uk='Виберіть ресторан'") , ТаблицыЗначений, "Картинка,Наименование") Тогда
					Значение = СтрокаТаблицы.Ссылка;
					ТаблицыЗначений = Неопределено;
					Возврат Истина;
				иначе
					ТаблицыЗначений = Неопределено;
					Возврат ложь;
					FrontOffice.СообщитьОбОшибке(НСтр("ru='Ресторан не выбран.';uk='Ресторан не вибраний.'"));   
				конецЕсли;
			КонецЕсли;                                                          
		Иначе
			FrontOffice.СообщитьОбОшибке(НСтр("ru='Нет актуальных ресторанов!';uk='Немає актуальних ресторанів!'"));
			Возврат ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция ВыборКатегорииКонтрагента(Значение = Неопределено) Экспорт
		
		// Данные.
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяКатегорииКонтрагентов ГДЕ НЕ ПометкаУдаления");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
		СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
		
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите категорию клиентов';uk='Виберіть категорію клієнтів'") , ДеревоЗначений, "Картинка,Наименование") Тогда
			Значение = СтрокаДерева.Ссылка;
			ДеревоЗначений = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ВыборКатегорииДокумента(Значение = Неопределено) Экспорт
		
		// Данные.
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяКатегорииДокументов ГДЕ НЕ ПометкаУдаления");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
		СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
		
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите категорию документа';uk='Виберіть категорію документа'") , ДеревоЗначений, "Картинка,Наименование") Тогда
			Значение = СтрокаДерева.Ссылка;
			ДеревоЗначений = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	//Функция ВыборСотрудника(Значение = Неопределено) Экспорт
	//Костенюк Александр-Старт 24.07.2012
	Функция ВыборСотрудника(Значение = Неопределено, ДокументОбъект = Неопределено) Экспорт
	//Костенюк Александр-Финиш 24.07.2012
		
		//// Данные.
		//Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяСотрудникиОрганизаций ГДЕ НЕ ПометкаУдаления");
		//Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		//ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
		//СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
		//
		//// Выбор.
		//Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ДеревоЗначений, "Картинка,Наименование") Тогда
		//	Значение = СтрокаДерева.Ссылка;
		//	Возврат Истина;
		//КонецЕсли;
		
		//Костенюк Александр-Старт 24.07.2012
		// Вывод только тех сотрудников, которые в данный момент на смене
		Если ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ВыводитьСотрудниковНаСменеПриИзмененииСотрудника") Тогда
			Документ = Неопределено;
			ПолучитьСерверFrontOffice().МенеджерУчетаРабочегоВремени.НайтиДокументУчетаРабочегоВремени(Документ);
			// -- Актуальность.
			ТаблицаАктуальных = Новый ТаблицаЗначений;
			ТаблицаАктуальных.Колонки.Добавить("Ссылка", Метаданные.Документы.ТабельУчетаРабочегоВремениОрганизации.ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.Сотрудник.Тип);
			Для Каждого СтрокаТабличнойЧасти Из Документ.ОтработанноеВремяВЦеломЗаПериод Цикл
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицы = ТаблицаАктуальных.Добавить();
				СтрокаТаблицы.Ссылка = СтрокаТабличнойЧасти.Сотрудник;
			КонецЦикла;
			СтрокаТаблицы = ТаблицаАктуальных.Найти(Значение, "Ссылка");
			// Выбор.
			Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ТаблицаАктуальных, "Ссылка") Тогда
				Значение = СтрокаТаблицы.Ссылка;
				ТаблицаАктуальных = Неопределено;
				Возврат Истина;
			КонецЕсли;
		Иначе
			// Вывод всех сотрудников
			// Данные.
			Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяСотрудникиОрганизаций ГДЕ НЕ ПометкаУдаления");
			Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
			ДеревоЗначений = ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(Запрос.Выполнить().Выгрузить(), "Ссылка", "Родитель");
			СтрокаДерева = ДеревоЗначений.Строки.Найти(Значение, "Ссылка", Истина);
			// Выбор.
			Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзДереваЗначений(СтрокаДерева, НСтр("ru='Выберите сотрудника';uk='Виберіть працівника'") , ДеревоЗначений, "Картинка,Наименование") Тогда
				Значение = СтрокаДерева.Ссылка;
				ДеревоЗначений = Неопределено;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		//Костенюк Александр-Финиш 24.07.2012
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ВывборПозицийИзИстории(Значение = Неопределено, Документ) Экспорт
		
		// Открываем форму.
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаИстории");
		ФормаВыбора.ДокументОбъект = Документ;
		
		// Выбор.
		ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
		Если (ТипЗнч(ПараметрЗакрытия) = Тип("ТаблицаЗначений")) Тогда
			Значение = ПараметрЗакрытия;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции // ВывборПозицийИзИстории()
	
	Процедура ВыборПозицийИзМеню(Владелец = Неопределено ,Ресторан = Неопределено) Экспорт
		
		// Открываем форму.
		Если Владелец <> Неопределено Тогда
			ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаМеню" , Владелец );
			ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
			
		Иначе
			ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаМеню");
		КонецЕсли;
		
		Если Ресторан <> Неопределено Тогда                      
			ФормаВыбора.ресторан = Ресторан;
		КонецЕсли;
		
		Если ФормаВыбора.Открыта() Тогда
			ФормаВыбора.Активизировать();
		Иначе 
			ФормаВыбора.ОткрытьМодально();
		КонецЕсли;
		
	КонецПроцедуры 
	
	Процедура ВыборЧерногоСписка(Владелец = Неопределено, Ресторан = Неопределено) Экспорт
		
		// Открываем форму.  
		Если Владелец <> Неопределено Тогда
			ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаЧерногоСписка" , Владелец );
			ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
		Иначе
			ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаЧерногоСписка");
		КонецЕсли;
		
		Если Ресторан <> Неопределено Тогда
			ФормаВыбора.ресторан = Ресторан;
		КонецЕсли;		
		
		Если ФормаВыбора.Открыта() Тогда
			ФормаВыбора.Активизировать();
		Иначе 
			ФормаВыбора.ОткрытьМодально();
		КонецЕсли;                                     
		
	КонецПроцедуры 
	
	Процедура ВыборБелогоСписка(Владелец = Неопределено, Ресторан = Неопределено) Экспорт
		
		// Открываем форму.
		Если Владелец <> Неопределено Тогда
			ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаБелогоСписка" , Владелец );
			ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Ложь;
		Иначе
			ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаБелогоСписка");
		КонецЕсли;
		
		Если Ресторан <> Неопределено Тогда
			ФормаВыбора.ресторан = Ресторан;
		КонецЕсли;	
		
		Если ФормаВыбора.Открыта() Тогда
			ФормаВыбора.Активизировать();
		Иначе 
			ФормаВыбора.ОткрытьМодально();
		КонецЕсли;                                     
		
	КонецПроцедуры 
	
	//// Открываем форму. выбора меню	
	Функция ВыборМеню(Значение = Неопределено) Экспорт	
		//// Открываем форму.
		ФормаВыбора = ЭтотОбъект.ПолучитьФорму("ФормаВыбораМеню");	
		ПараметрЗакрытия = ФормаВыбора.ОткрытьМодально();
		Если (ТипЗнч(ПараметрЗакрытия) = Тип("ТаблицаЗначений")) Тогда
			Значение = ПараметрЗакрытия;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции 
		
	Функция ВыборВстречки(Значение = Неопределено, ТабличноеПоле) Экспорт
		
		// Данные.
		Данные = ТабличноеПоле.Данные();
		
		// Список встречек.
		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"), НСтр("ru='Наименование';uk='Назва'") );
		ТаблицаЗначений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		ТекущаяДата = ТекущаяДата();
		
		Для Каждого СтрокаДанных Из Данные Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДанных.ДатаНачалаПериода)
				ИЛИ ТаблицаЗначений.Найти(СтрокаДанных.ДатаНачалаПериода,"Дата")<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаЗначений.Добавить();
			Если (НачалоДня(СтрокаДанных.ДатаНачалаПериода) = НачалоДня(ТекущаяДата)) Тогда
				СтрокаТаблицы.Наименование = НСтр("ru='Встречка в ';uk='Зустрічка у '")   + Формат(СтрокаДанных.ДатаНачалаПериода, "ДФ=hh:mm");
			Иначе
				СтрокаТаблицы.Наименование = НСтр("ru='Встречка от ';uk='Зустрічка від '")  + Формат(СтрокаДанных.ДатаНачалаПериода, "ДФ='dd:MM:yyyy hh:mm'");
			КонецЕсли;
			СтрокаТаблицы.Дата = СтрокаДанных.ДатаНачалаПериода;
			
		КонецЦикла;
		
		Если ТаблицаЗначений.Количество()=0 Тогда
			FrontOffice.ВывестиПредупреждение(НСтр("ru='На текущий момент по документу нет ни одной распечатанной встречки.';uk='На поточний час немає жодної роздрукованої зустрічки'") );
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаЗначений.Добавить().Наименование = НСтр("ru='Все встречки';uk='Всі зустрічки'") ;
		
		СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Дата");
		
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите встречку';uk='Виберіть зустрічку'") , ТаблицаЗначений, "Наименование") Тогда
			Значение = СтрокаТаблицы.Дата;
			ТаблицаЗначений = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ВыборСобытия(Значение = Неопределено) Экспорт
		
		// Данные.
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление КАК Наименование ИЗ ВременнаяГруппыСобытий ГДЕ НЕ ПометкаУдаления");
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		СтрокаТаблицы = ТаблицаЗначений.Найти(Значение, "Ссылка");
		
		// Выбор.
		Если Обработки.FrontOfficeВыборЗначения.Создать().ВыборИзТаблицыЗначений(СтрокаТаблицы, НСтр("ru='Выберите событие';uk='Виберіть подію'") , ТаблицаЗначений, "Картинка,Наименование") Тогда
			Значение = СтрокаТаблицы.Ссылка;
			ТаблицаЗначений = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции // ВыборСобытия()
	
	Функция ПолучитьКонтрагентовПоиска(Контрагент = Неопределено, Телефон = Неопределено, ТелефонДополнительный = Неопределено)
		
		Если ПустаяСтрока(Телефон) И ПустаяСтрока(ТелефонДополнительный) Тогда
			
			МассивКонтрагентов = Новый Массив;
			
		Иначе
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтактнаяИнформация.Объект КАК Контрагенты
			|ИЗ
			|	(ВЫБРАТЬ
			|		КонтактнаяИнформация.Объект КАК Объект
			|	ИЗ
			|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|	ГДЕ
			|		КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|		И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|		И (КонтактнаяИнформация.Поиск = &Телефон
			|				ИЛИ КонтактнаяИнформация.Поиск = &ТелефонДополнительный)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КонтактнаяИнформация.Объект
			|	ИЗ
			|		РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КонтактнаяИнформация
			|	ГДЕ
			|		КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|		И (КонтактнаяИнформация.Поиск = &Телефон
			|				ИЛИ КонтактнаяИнформация.Поиск = &ТелефонДополнительный)) КАК КонтактнаяИнформация");
			Запрос.УстановитьПараметр("Телефон", Телефон);							  
			Запрос.УстановитьПараметр("ТелефонДополнительный", ТелефонДополнительный);
			Если ПустаяСтрока(Телефон) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Поиск = &Телефон", "ЛОЖЬ");
			КонецЕсли;
			Если ПустаяСтрока(ТелефонДополнительный) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Поиск = &ТелефонДополнительный", "ЛОЖЬ");
			КонецЕсли;
			МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагенты");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			МассивКонтрагентов.Добавить(Контрагент);
		КонецЕсли;
		
		Если Булево(МассивКонтрагентов.Количество()) Тогда
			Возврат МассивКонтрагентов;
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецФункции
	
	// Чистяков Павел 06.09.2010 10:43:38 
	Процедура ПоискКомментарияНоменклатурыПриИзмененииДанных(Элемент) Экспорт
		
		// Табличное поле.
		ТабличноеПоле = Элемент; 
		
		ТабличноеПоле.Шапка = Ложь;
		
		ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
		
	КонецПроцедуры // ПоискУлицыПриИзмененииДанных()
	
	// Чистяков Павел 06.09.2010 10:43:38 
	Процедура ПоискКомментарияНоменклатурыПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		// Данные.
		Данные = Элемент.Данные();
		Данные.Очистить();
		
		Если ЗначениеЗаполнено(Значение) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 25
			|	КомментарииНоменклатуры.Комментарий КАК Комментарий
			|ИЗ
			|	РегистрСведений.КомментарииНоменклатуры КАК КомментарииНоменклатуры
			|ГДЕ
			|	КомментарииНоменклатуры.Комментарий ПОДОБНО &Комментарий
			|
			|УПОРЯДОЧИТЬ ПО
			|	Комментарий"
			);
			Запрос.УстановитьПараметр("Комментарий", "%" + Значение + "%"); 
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицы				= Данные.Добавить();	
				СтрокаТаблицы.Комментарий	= Выборка.Комментарий;
			КонецЦикла;
			
		КонецЕсли;
		
		Выборка = Неопределено;
		
		Элемент.ОбновитьСтроки();
		
	КонецПроцедуры
	
	// Чистяков Павел 06.09.2010 10:43:38 
	Процедура ПоискКомментарияНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		ОформлениеСтроки.Ячейки("Комментарий").УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
		
	КонецПроцедуры
	
	
	Функция ВводКоличестваТовара(Значение = Неопределено, Номенклатура, Мин = Неопределено, Макс = Неопределено) Экспорт
		
		// Нормализация.
		Если (Значение = Неопределено) Тогда
			Значение = Число(Истина);
		КонецЕсли;
		
		// Игорь 09.11.2011 16:13:51
		//не понятно зачем нужно? 
		
		//// Разрядность дробной части.
		//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	НоменклатураМеню.Штучный КАК Штучный
		//|ИЗ
		//|	ВременнаяНоменклатураМеню КАК НоменклатураМеню
		//|ГДЕ
		//|	НоменклатураМеню.Номенклатура = &Номенклатура");
		//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		//Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		//РезультатЗапроса = Запрос.Выполнить();
		Если ЗначениеЗаполнено(Номенклатура) и Номенклатура.Штучный Тогда
			РазрядностьДробнойЧасти = 0;
		Иначе
			РазрядностьДробнойЧасти = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		КонецЕсли;
		
		// Ввод.
		Возврат FrontOffice.ВводЧисла(Значение, НСтр("ru='Введите количество';uk='Введіть кількість'") , Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность, РазрядностьДробнойЧасти, Мин, Макс);
	КонецФункции // ВводКоличестваТовара()
	
	// Процедура заполнения табличного поля ресторанов.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ТаблицаРесторановПрочитать(Документ, ТабличноеПоле) Экспорт
		
		// Данные.
		Данные = ТабличноеПоле.Данные();
		Если (Данные = Неопределено) Тогда
			
			// -- Дополнительные колонки.
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПроизводственныеГруппы.Ссылка,
			|	ПроизводственныеГруппы.Представление
			|ИЗ
			|	ВременнаяПроизводственныеГруппы КАК ПроизводственныеГруппы
			|ГДЕ
			|	ПроизводственныеГруппы.Актуальность");
			Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
			ТаблицаДополнительныхКолонок = Запрос.Выполнить().Выгрузить();
			СоответсвиеДополнительныхКолонок = Новый Соответствие;
			
			Данные = Новый ТаблицаЗначений;
			
			Данные.Колонки.Добавить("Ресторан", Новый ОписаниеТипов("СправочникСсылка.Рестораны"));
			Данные.Колонки.Добавить("РесторанПредставление", Новый ОписаниеТипов("Строка"), "Ресторан");
			Если Булево(ТаблицаДополнительныхКолонок.Количество()) Тогда
				ДополнительныеКолонки = Строка(Неопределено);
				Для Каждого СтрокаТаблицыДополнительныхКолонок Из ТаблицаДополнительныхКолонок Цикл
					ДополнительнаяКолонка = "Колонка" + Строка(ТаблицаДополнительныхКолонок.Индекс(СтрокаТаблицыДополнительныхКолонок));
					СоответсвиеДополнительныхКолонок.Вставить(СтрокаТаблицыДополнительныхКолонок.Ссылка, ДополнительнаяКолонка);
					Данные.Колонки.Добавить(ДополнительнаяКолонка, Новый ОписаниеТипов("Строка,Дата"), СтрокаТаблицыДополнительныхКолонок.Представление);
					ДополнительныеКолонки = ДополнительныеКолонки + "," + ДополнительнаяКолонка;
				КонецЦикла
			КонецЕсли;
			
			ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("Картинка,РесторанПредставление" + ДополнительныеКолонки);
			ТабличноеПоле.Колонки.Получить("РесторанПредставление").Ширина = 400 * 0.50;
			Для Каждого ДополнительнаяКолонка Из СоответсвиеДополнительныхКолонок Цикл
				ДополнительнаяКолонка = ДополнительнаяКолонка.Значение; // Наепка :)
				ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).Ширина = 50;
				ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).Формат = "ДФ=HH:mm";
				ТабличноеПоле.Колонки.Получить(ДополнительнаяКолонка).ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			КонецЦикла;
			ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
			ТабличноеПоле.Тег = СоответсвиеДополнительныхКолонок;
			
			Возврат;
		Иначе
			Данные.Очистить();
		КонецЕсли;
		
		Если (Документ = Неопределено) тогда
			Возврат;
		КонецЕсли;
		
		// -- Текущая позиция (I).
		ТекущийРесторан = Документ.Ресторан;
		
		// Выборка данных.
		РесторанДокумента = Новый ТаблицаЗначений;
		РесторанДокумента.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Рестораны"));
		РесторанДокумента.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Метаданные.Справочники.Рестораны.ДлинаНаименования)));
		Если ЗначениеЗаполнено(Документ.Ресторан) Тогда
			СтрокаТаблицы = РесторанДокумента.Добавить(); СтрокаТаблицы.Ссылка = Документ.Ресторан; СтрокаТаблицы.Представление = ПолучитьСерверFrontOffice().ПолучитьПредставление(Документ.Ресторан);
		КонецЕсли;
		
		Закреплен = Документ.Распечатан Или (Документ.Закреплен И (Не ДокументДоступностьДействия(Документ, "ИгнорироватьЗакрепленностьПриИзмененииРесторана")));
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Рестораны.Ссылка,
		|	Рестораны.Представление
		|ПОМЕСТИТЬ ВременнаяРесторанДокумента
		|ИЗ
		|	&РесторанДокумента КАК Рестораны
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ресторан,
		|	ВложенныйЗапрос.РесторанПредставление КАК РесторанПредставление,
		|	ВложенныйЗапрос.ПроизводственнаяГруппа КАК ПроизводственнаяГруппа,
		|	НастройкиПроизводства.ПродолжительностьВыполнения КАК ПродолжительностьВыполнения
		|ИЗ
		|	(ВЫБРАТЬ
		|		Рестораны.Ресторан КАК Ресторан,
		|		Рестораны.РесторанПредставление КАК РесторанПредставление,
		|		ПроизводственныеГруппы.Ссылка КАК ПроизводственнаяГруппа
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Рестораны.Ссылка КАК Ресторан,
		|			Рестораны.Представление КАК РесторанПредставление
		|		ИЗ
		|			ВременнаяРесторанДокумента КАК Рестораны
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			Рестораны.Ссылка,
		|			Рестораны.Представление
		|		ИЗ
		|			ВременнаяРестораны КАК Рестораны
		|		ГДЕ
		|			(НЕ &Закреплен)
		|			И (НЕ Рестораны.ПометкаУдаления)
		|			И Рестораны.Актуальность
		|			И (НЕ Рестораны.Ссылка = &Ресторан)) КАК Рестораны,
		|		ВременнаяПроизводственныеГруппы КАК ПроизводственныеГруппы
		|	ГДЕ
		|		ПроизводственныеГруппы.Актуальность) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПроизводства КАК НастройкиПроизводства
		|		ПО ВложенныйЗапрос.Ресторан = НастройкиПроизводства.Ресторан
		|			И ВложенныйЗапрос.ПроизводственнаяГруппа = НастройкиПроизводства.ПроизводственнаяГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	РесторанПредставление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяРесторанДокумента");
		Запрос.УстановитьПараметр("РесторанДокумента", РесторанДокумента);
		Запрос.УстановитьПараметр("Ресторан", Документ.Ресторан);
		Запрос.УстановитьПараметр("Закреплен", Закреплен);
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		РезультатЗапроса = Запрос.Выполнить();
		
		// -- Пустая выборка.
		Если РезультатЗапроса.Пустой() Тогда
			ТабличноеПоле.ОбновитьСтроки();
			Возврат;
		КонецЕсли;
		
		// Перенос данных в табличное поле.
		СоответсвиеДополнительныхКолонок = ТабличноеПоле.Тег;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаДанных = Данные.Найти(Выборка.Ресторан, "Ресторан");
			Если (СтрокаДанных = Неопределено) Тогда
				СтрокаДанных = Данные.Добавить();
				СтрокаДанных.Ресторан = Выборка.Ресторан;
				СтрокаДанных.РесторанПредставление = Выборка.РесторанПредставление;
			КонецЕсли;
			
			ДополнительнаяКолонка = СоответсвиеДополнительныхКолонок.Получить(Выборка.ПроизводственнаяГруппа);
			Если (Не ДополнительнаяКолонка = Неопределено) Тогда
				СтрокаДанных[ДополнительнаяКолонка] = Выборка.ПродолжительностьВыполнения;
			КонецЕсли;
			
			// -- Текущая позиция (II).
			Если (СтрокаДанных.Ресторан = ТекущийРесторан) Тогда
				ТекущаяСтрока = СтрокаДанных;
			КонецЕсли;
		КонецЦикла;
		
		Данные.Сортировать("РесторанПредставление");
		
		// -- Текущая позиция (III).
		Если Закреплен Тогда
			ТекущаяСтрока = Неопределено;
		КонецЕсли;
		
		// Обновление.
		Если (Не ТабличноеПоле.ТекущаяСтрока() = ТекущаяСтрока) Тогда
			ТабличноеПоле.ТекущаяСтрока(ТекущаяСтрока);
		Иначе
			ТабличноеПоле.ОбновитьСтроки();
		КонецЕсли;
		
		Выборка = Неопределено;
		
	КонецПроцедуры // ТаблицаРесторановПрочитать()
	
	// Процедура обработчик события ПриВыводеСтроки табличного поля ресторанов.
	//
	Процедура ТаблицаРесторановВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		СоответсвиеДополнительныхКолонок = Элемент.Тег;
		
		// Оформление строки.
		ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("РесторанПредставление").ГиперСсылка = Истина;
		Для Каждого ДополнительнаяКолонка Из СоответсвиеДополнительныхКолонок Цикл
			ОформлениеСтроки.Ячейки(ДополнительнаяКолонка.Значение).ГиперСсылка = Истина;
		КонецЦикла;
		
		// Картинка.
		ОформлениеСтроки.Ячейки("Картинка").УстановитьКартинку(БиблиотекаКартинок.TouchИерархияЭлеменит);
		
	КонецПроцедуры // ТаблицаРесторановВывестиСтроку()	
	
	// Процедура заполнения табличного поля закрытх документов истории.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ТаблицаЗакрытыхДокументовИсторииПрочитать(Документ, ТабличноеПоле) Экспорт
		
		// Данные.
		Данные = ТабличноеПоле.Данные();
		Если (Данные = Неопределено) Тогда
			Данные = Новый ТаблицаЗначений;
			Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
			Данные.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"), "Документ");
			Данные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"), "Дата");
			Данные.Колонки.Добавить("АдресДоставкиПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Адрес';uk='Адреса'")); 
			Данные.Колонки.Добавить("ТелефонПредставление", Новый ОписаниеТипов("Строка"), "Телефон");
			Данные.Колонки.Добавить("ТелефонДополнительныйПредставление", Новый ОписаниеТипов("Строка"), НСтр("ru='Телефон (доп.)';uk='Телефон (дод.)'") );
			Данные.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число"), НСтр("ru='Сумма';uk='Сума'") );
			
			ТабличноеПоле.Данные(Данные);
			ТабличноеПоле.СоздатьКолонки("Номер,АдресДоставкиПредставление,ТелефонПредставление,СуммаДокумента");
			ТабличноеПоле.Колонки.Получить("Номер").Ширина = 400 * 0.15;
			ТабличноеПоле.Колонки.Получить("Номер").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			//ТабличноеПоле.Колонки.Получить("Дата").Ширина = 400 * 0.10;
			//ТабличноеПоле.Колонки.Получить("Дата").Положение = ПоложениеКолонки.НаСледующейСтроке;
			//ТабличноеПоле.Колонки.Получить("Дата").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			ТабличноеПоле.Колонки.Получить("АдресДоставкиПредставление").Ширина = 400 * 0.45;
			ТабличноеПоле.Колонки.Получить("ТелефонПредставление").Ширина = 400 * 0.25;
			ТабличноеПоле.Колонки.Получить("ТелефонПредставление").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			//ТабличноеПоле.Колонки.Получить("ТелефонДополнительныйПредставление").Ширина = 400 * 0.25;
			//ТабличноеПоле.Колонки.Получить("ТелефонДополнительныйПредставление").Положение = ПоложениеКолонки.НаСледующейСтроке;
			//ТабличноеПоле.Колонки.Получить("ТелефонДополнительныйПредставление").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			ТабличноеПоле.Колонки.Получить("СуммаДокумента").Ширина = 400 * 0.10;
			ТабличноеПоле.Колонки.Получить("СуммаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.СуммаДокумента.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
			ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		Иначе
			Данные.Очистить();
		КонецЕсли;
		
		Если (Документ = Неопределено) Тогда
			ТабличноеПоле.ОбновитьСтроки();
			Возврат;
		КонецЕсли;
		
		// Выборка данных.
		
		// -- Типы и виды контактной информации реализации товаров и услуг.
		СписокТипов = Новый СписокЗначений; 
		СписокТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес); 
		СписокТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		СписокВидов = Новый СписокЗначений; 
		СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиРеализацииТоваровУслуг); 
		СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРеализацииТоваровУслуг); 
		СписокВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДополнительныйРеализацииТоваровУслуг);
		
		// -- Запрос.
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеДокументов.Ссылка,
		|	СостояниеДокументов.Номер,
		|	СостояниеДокументов.Дата,
		|	СостояниеДокументов.СуммаДокумента,
		|	СостояниеДокументов.Документ
		|ПОМЕСТИТЬ ВременнаяВыборкаДокументов
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.Номер КАК Номер,
		|		РеализацияТоваровУслуг.Дата КАК Дата,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|		РеализацияТоваровУслуг.Ссылка КАК Документ
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Контрагент = &Контрагент
		|		И РеализацияТоваровУслуг.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиИПодсистемы.Доставка)
		|		И (НЕ РеализацияТоваровУслуг.Ссылка = &Ссылка)
		|		И РеализацияТоваровУслуг.Проведен) КАК СостояниеДокументов
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КИРТУ.Документ КАК Ссылка,
		|	КИРТУ.Тип КАК Тип,
		|	КИРТУ.Вид КАК Вид,
		|	КИРТУ.Представление КАК Представление,
		|	КИРТУ.Поиск КАК Поиск
		|ПОМЕСТИТЬ ВременнаяКИРТУ
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КИРТУ
		|ГДЕ
		|	КИРТУ.Документ В
		|			(ВЫБРАТЬ
		|				ВременнаяВыборкаДокументов.Ссылка
		|			ИЗ
		|				ВременнаяВыборкаДокументов)
		|	И КИРТУ.Тип В(&СписокТипов)
		|	И КИРТУ.Вид В(&СписокВидов)
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеДокументов.Ссылка,
		|	СостояниеДокументов.Номер КАК Номер,
		|	СостояниеДокументов.Дата КАК Дата,
		|	СостояниеДокументов.СуммаДокумента,
		|	КИРТУАдресДоставки.Представление КАК АдресДоставкиПредставление,
		|	КИРТУАдресДоставки.Поиск КАК АдресДоставкиПоиск,
		|	КИРТУТелефон.Представление КАК ТелефонПредставление,
		|	КИРТУТелефон.Поиск КАК ТелефонПоиск,
		|	КИРТУТелефонДополнительный.Представление КАК ТелефонДополнительныйПредставление,
		|	КИРТУТелефонДополнительный.Поиск КАК ТелефонДополнительныйПоиск
		|ИЗ
		|	ВременнаяВыборкаДокументов КАК СостояниеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КИРТУ.Ссылка КАК Ссылка,
		|			КИРТУ.Представление КАК Представление,
		|			КИРТУ.Поиск КАК Поиск
		|		ИЗ
		|			ВременнаяКИРТУ КАК КИРТУ
		|		ГДЕ
		|			КИРТУ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|			И КИРТУ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиРеализацииТоваровУслуг)) КАК КИРТУАдресДоставки
		|		ПО СостояниеДокументов.Ссылка = КИРТУАдресДоставки.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КИРТУ.Ссылка КАК Ссылка,
		|			КИРТУ.Представление КАК Представление,
		|			КИРТУ.Поиск КАК Поиск
		|		ИЗ
		|			ВременнаяКИРТУ КАК КИРТУ
		|		ГДЕ
		|			КИРТУ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			И КИРТУ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРеализацииТоваровУслуг)) КАК КИРТУТелефон
		|		ПО СостояниеДокументов.Ссылка = КИРТУТелефон.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КИРТУ.Ссылка КАК Ссылка,
		|			КИРТУ.Представление КАК Представление,
		|			КИРТУ.Поиск КАК Поиск
		|		ИЗ
		|			ВременнаяКИРТУ КАК КИРТУ
		|		ГДЕ
		|			КИРТУ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			И КИРТУ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонДополнительныйРеализацииТоваровУслуг)) КАК КИРТУТелефонДополнительный
		|		ПО СостояниеДокументов.Ссылка = КИРТУТелефонДополнительный.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		//|	Номер");
		//Костенюк Александр-Старт 23.10.2012
		|	Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяВыборкаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяКИРТУ");
		//Костенюк Александр-Финиш 23.10.2012
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
		Запрос.УстановитьПараметр("СписокТипов", СписокТипов);
		Запрос.УстановитьПараметр("СписокВидов", СписокВидов);
		
		// Перенос данных в табличное поле.
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаДанных = Данные.Добавить();
			
			СтрокаДанных.Ссылка = Выборка.Ссылка;
			СтрокаДанных.Номер = Выборка.Номер;
			СтрокаДанных.Дата = Выборка.Дата;
			СтрокаДанных.АдресДоставкиПредставление = Выборка.АдресДоставкиПредставление;
			СтрокаДанных.ТелефонПредставление = Выборка.ТелефонПредставление;
			СтрокаДанных.ТелефонДополнительныйПредставление = Выборка.ТелефонДополнительныйПредставление;
			СтрокаДанных.СуммаДокумента = Выборка.СуммаДокумента;
		КонецЦикла;
		
		// Обновление.
		ТабличноеПоле.ОбновитьСтроки();
		
		Выборка = Неопределено;
		
	КонецПроцедуры // ТаблицаЗакрытыхДокументовИсторииПрочитать()
	
	// Процедура обработчик события ПриВыводеСтроки табличного поля закрытх документов истории.
	//
	Процедура ТаблицаЗакрытыхДокументовИсторииВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		
		// Номер.
		ОформлениеСтроки.Ячейки("Номер").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.Номер) + Символы.ПС + FrontOffice.ПредставлениеДаты(ДанныеСтроки.Дата);
		
		// ТелефонПредставление.
		ОформлениеСтроки.Ячейки("ТелефонПредставление").Текст = ДанныеСтроки.ТелефонПредставление + УправлениеКонтактнойИнформацией.ПроверкаПустойСтроки(ДанныеСтроки.ТелефонДополнительныйПредставление, Символы.ПС) + ДанныеСтроки.ТелефонДополнительныйПредставление;
		
		
	КонецПроцедуры // ТаблицаЗакрытыхДокументовИсторииВывестиСтроку()
	
	// Процедура заполнения табличного поля заказа документа истории.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ТаблицаЗаказаИсторииПрочитать(Документ, ТабличноеПоле) Экспорт
		
		// Данные.
		Данные = ТабличноеПоле.Данные();
		Если (Данные = Неопределено) Тогда
			Данные = Новый ТаблицаЗначений;
			
			Данные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)), "N");
			Для Каждого Реквизит Из Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты Цикл
				Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
			КонецЦикла;
			Данные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
			Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), Данные.Колонки.Номенклатура.Заголовок);
			Данные.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"), НСтр("ru='Услуга';uk='Послуга'") );
			Данные.Колонки.Добавить("Проверенная", Новый ОписаниеТипов("Булево"), НСтр("ru='Проверенная';uk='Перевірена'") );
			Данные.Колонки.Добавить("ЦенаДокумента", Данные.Колонки.Цена.ТипЗначения, Данные.Колонки.Цена.Заголовок);
			
			ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество,ЦенаДокумента,СуммаОтображаемая");
			ТабличноеПоле.Колонки.Получить("НомерСтроки").ИзменениеРазмера = ИзменениеРазмераКолонки.Изменять;
			ТабличноеПоле.Колонки.Получить("НомерСтроки").Ширина = 400 * 0.05;
			ТабличноеПоле.Колонки.Получить("НоменклатураКод").Ширина = 400 * 0.10;
			ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 400 * 0.40;
			ТабличноеПоле.Колонки.Получить("Количество").Ширина = 400 * 0.15;
			ТабличноеПоле.Колонки.Получить("Количество").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
			ТабличноеПоле.Колонки.Получить("ЦенаДокумента").Ширина = 400 * 0.10;
			ТабличноеПоле.Колонки.Получить("ЦенаДокумента").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
			ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Ширина = 400 * 0.20;
			ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").ТекстШапки = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Синоним;
			ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
			ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
			
			Возврат;
		Иначе
			Данные.Очистить();
		КонецЕсли;
		
		Если (Документ = Неопределено) тогда
			ТабличноеПоле.ОбновитьСтроки();
			Возврат;
		КонецЕсли;
		
		// Настройка отображаемой суммы и порядка подачи.
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Данные = "Сумма";
		
		// Выборка данных.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	РеализацияТоваровУслугТовары.ВидНоменклатуры КАК ВидНоменклатуры,
		|	РеализацияТоваровУслугТовары.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	РеализацияТоваровУслугТовары.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Цена КАК ЦенаДокумента,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	НоменклатураМеню.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураМеню.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	НоменклатураМеню.Организация КАК Организация,
		|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
		|	НоменклатураМеню.СтавкаНДС КАК СтавкаНДС,
		|	НоменклатураМеню.ТипНоменклатуры КАК ТипНоменклатуры,
		|	НоменклатураМеню.Услуга КАК Услуга,
		|	НоменклатураМеню.Цена КАК Цена,
		|	НоменклатураМеню.Проверенная КАК Проверенная,
		|	РеализацияТоваровУслугТовары.Комментарий
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяНоменклатураМеню КАК НоменклатураМеню
		|		ПО РеализацияТоваровУслугТовары.Номенклатура = НоменклатураМеню.Номенклатура
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСтрокЗаказов.Товар),
		|	РеализацияТоваровУслугУслуги.ДатаНачалаПериода,
		|	РеализацияТоваровУслугУслуги.ДатаОкончанияПериода,
		|	РеализацияТоваровУслугУслуги.Количество,
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	НоменклатураМеню.ЕдиницаИзмерения,
		|	НоменклатураМеню.НоменклатурнаяГруппа,
		|	НоменклатураМеню.Организация,
		|	НоменклатураМеню.Себестоимость,
		|	НоменклатураМеню.СтавкаНДС,
		|	НоменклатураМеню.ТипНоменклатуры,
		|	НоменклатураМеню.Услуга,
		|	НоменклатураМеню.Цена,
		|	НоменклатураМеню.Проверенная,
		|	РеализацияТоваровУслугУслуги.Комментарий
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяНоменклатураМеню КАК НоменклатураМеню
		|		ПО РеализацияТоваровУслугУслуги.Номенклатура = НоменклатураМеню.Номенклатура
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		
		// Перенос данных в табличное поле.
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаДанных = Данные.Добавить();
			
			СтрокаДанных.НомерСтроки = Выборка.НомерСтроки;
			СтрокаДанных.ВидНоменклатуры = Выборка.ВидНоменклатуры;
			СтрокаДанных.ДатаНачалаПериода = Выборка.ДатаНачалаПериода;
			СтрокаДанных.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
			СтрокаДанных.Количество = Выборка.Количество;
			СтрокаДанных.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаДанных.Номенклатура = Выборка.Номенклатура;
			СтрокаДанных.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			СтрокаДанных.Организация = Выборка.Организация;
			СтрокаДанных.ПлановаяСебестоимость = Выборка.ПлановаяСебестоимость;
			СтрокаДанных.СтавкаНДС = Выборка.СтавкаНДС;
			СтрокаДанных.Сумма = Выборка.Сумма;
			СтрокаДанных.Услуга = Выборка.Услуга;
			СтрокаДанных.Цена = Выборка.Цена;
			СтрокаДанных.Комментарий = Выборка.Комментарий;
			
			СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
			СтрокаДанных.Услуга = Выборка.Услуга;
			СтрокаДанных.Проверенная = (Выборка.Проверенная = Истина);
			СтрокаДанных.ЦенаДокумента = Выборка.ЦенаДокумента;
		КонецЦикла;
		
		// -- Сортировка.
		Данные.Сортировать("ДатаНачалаПериода,НомерСтроки");
		
		// Обновление
		ТабличноеПоле.ОбновитьСтроки();
		
		Выборка = Неопределено;
		
	КонецПроцедуры // ТаблицаЗаказаПрочитать()
	
	// Процедура обработчик события ПриВыводеСтроки табличного поля заказ документа истории.
	//
	Процедура ТаблицаЗаказаИсторииВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		// Гиппр ссылка.
		ОформлениеСтроки.Ячейки("НомерСтроки").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("НоменклатураКод").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("НоменклатураПредставление").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("Количество").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("ЦенаДокумента").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("СуммаОтображаемая").ГиперСсылка = Истина;
		
		// Оформление строки.
		Если Не ДанныеСтроки.Проверенная Тогда
			ОформлениеСтроки.Ячейки("НомерСтроки").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			ОформлениеСтроки.Ячейки("НоменклатураКод").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			ОформлениеСтроки.Ячейки("НоменклатураПредставление").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			ОформлениеСтроки.Ячейки("Количество").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			ОформлениеСтроки.Ячейки("ЦенаДокумента").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			ОформлениеСтроки.Ячейки("СуммаОтображаемая").ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
		
		// НомерСтроки.
		ОформлениеСтроки.Ячейки("НомерСтроки").Текст = Строка(Элемент.Данные().Индекс(ДанныеСтроки) + 1);
		
		// НоменклатураКод.
		ОформлениеСтроки.Ячейки("НоменклатураКод").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.НоменклатураКод);
		
		// Чистяков Павел 06.09.2010 8:10:04
		Если ЗначениеЗаполнено(ДанныеСтроки.Комментарий) Тогда
			ОформлениеСтроки.Ячейки("НоменклатураПредставление").Текст = ОформлениеСтроки.Ячейки("НоменклатураПредставление").Текст + Символы.ПС + "    " + ДанныеСтроки.Комментарий;
		КонецЕсли; 
		
	КонецПроцедуры // ТаблицаЗаказаИсторииВывестиСтроку()
	
	// Процедура заполнения табличного поля заказа документа.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ТаблицаЗаказаПрочитатьУдалить(Документ, ТабличноеПоле) Экспорт
		
		// Данные.
		Данные = ТабличноеПоле.Данные();
		Если (Данные = Неопределено) Тогда
			Данные = Новый ТаблицаЗначений;
			
			Данные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)), "N");
			Для Каждого Реквизит Из Метаданные.Документы.СписаниеТоваров.ТабличныеЧасти.Товары.Реквизиты Цикл
				Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
			КонецЦикла;
			Данные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
			Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), Данные.Колонки.Номенклатура.Заголовок);
			Данные.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
			
			ТабличноеПоле.Данные(Данные);
			ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество,Цена,СуммаОтображаемая");
			ТабличноеПоле.Колонки.Получить("НомерСтроки").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
			ТабличноеПоле.Колонки.Получить("НомерСтроки").Ширина = 400 * 0.05;
			ТабличноеПоле.Колонки.Получить("НомерСтроки").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			ТабличноеПоле.Колонки.Получить("НоменклатураКод").Ширина = 400 * 0.10;
			ТабличноеПоле.Колонки.Получить("НоменклатураКод").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
			ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 400 * 0.40;
			ТабличноеПоле.Колонки.Получить("Количество").Ширина = 400 * 0.15;
			ТабличноеПоле.Колонки.Получить("Количество").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
			ТабличноеПоле.Колонки.Получить("Цена").Ширина = 400 * 0.10;
			ТабличноеПоле.Колонки.Получить("Цена").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
			ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Ширина = 400 * 0.15;
			ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").ТекстШапки = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Синоним;
			ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
			ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
			
			Возврат;
		Иначе
			Данные.Очистить();
		КонецЕсли;
		
		Если (Документ = Неопределено) тогда
			Возврат;
		КонецЕсли;
		
		// Настройка отображаемой суммы и порядка подачи.
		МетаданныеДокумента = Документ.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента("Товары", "СуммаБезСкидок", МетаданныеДокумента) Тогда
			ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Данные = "СуммаБезСкидок";
		Иначе
			ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Данные = "Сумма";
		КонецЕсли;
		
		//Если Не ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента("Товары", "ПорядокПодачи", МетаданныеДокумента) Тогда
		//	ТабличноеПоле.Колонки.Получить("ПорядокПодачи").Данные = Неопределено;
		//КонецЕсли;
		
		Если (Документ = Документ.Ссылка) тогда
			Возврат;
		КонецЕсли;
		
		// Список реквизитов.
		
		// -- Товары.
		СписокРеквизитовТоваров = Новый СписокЗначений();
		Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
			Реквизит = Реквизит.Имя;
			Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
				СписокРеквизитовТоваров.Добавить(Реквизит);	
			КонецЕсли;
		КонецЦикла;
		
		// -- Услуги.
		СписокРеквизитовУслуг = Новый СписокЗначений();
		Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Услуги.Реквизиты Цикл
			Реквизит = Реквизит.Имя;
			Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
				СписокРеквизитовУслуг.Добавить(Реквизит);	
			КонецЕсли;
		КонецЦикла;
		
		// Выборка данных.
		
		// -- Товары.
		Для Каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
			СтрокаДанных = Данные.Добавить();
			
			СтрокаДанных.НомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
			Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
				Реквизит = Реквизит.Значение;
				СтрокаДанных[Реквизит] = СтрокаТабличнойЧасти[Реквизит];
			КонецЦикла;
			
			СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
			СтрокаДанных.Услуга = Ложь;	
		КонецЦикла;
		
		// -- Услуги.
		Для Каждого СтрокаТабличнойЧасти Из Документ.Услуги Цикл
			СтрокаДанных = Данные.Добавить();
			
			СтрокаДанных.НомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
			Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
				Реквизит = Реквизит.Значение;
				Попытка
					СтрокаДанных[Реквизит] = СтрокаТабличнойЧасти[Реквизит];
				Исключение
					// Ветку услуг никто никогда не проверял и не дорабатывал.
				КонецПопытки;
			КонецЦикла;
			
			СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
			СтрокаДанных.Услуга = Истина;	
		КонецЦикла;
		
		// -- Сортировка.
		Данные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");
		
		
		// Обновление
		ТабличноеПоле.ОбновитьСтроки();
		
	КонецПроцедуры // ТаблицаЗаказаПрочитать()
	
	// Процедура актуализации табличного поля заказа документа.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ТаблицаЗаказаЗаписатьУдалить(Документ, ТабличноеПоле) Экспорт
		
		Данные = ТабличноеПоле.Данные();
		
		СписокРеквизитовТоваров = Новый СписокЗначений();
		Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
			Реквизит = Реквизит.Имя;
			Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
				СписокРеквизитовТоваров.Добавить(Реквизит);	
			КонецЕсли;
		КонецЦикла;
		
		СписокРеквизитовУслуг = Новый СписокЗначений();
		Для Каждого Реквизит Из Документ.Метаданные().ТабличныеЧасти.Услуги.Реквизиты Цикл
			Реквизит = Реквизит.Имя;
			Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
				СписокРеквизитовУслуг.Добавить(Реквизит);	
			КонецЕсли;
		КонецЦикла;
		
		// Перенос данных.
		Документ.Товары.Очистить();
		Документ.Услуги.Очистить(); 
		
		Для Каждого СтрокаДанных Из Данные Цикл
			Если Не СтрокаДанных.Услуга Тогда
				
				// -- Товары.
				СтрокаТабличнойЧасти = Документ.Товары.Добавить();
				Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
					Реквизит = Реквизит.Значение;
					СтрокаТабличнойЧасти[Реквизит] = СтрокаДанных[Реквизит];
					//Костенюк Александр-Старт 24.01.2013
					СтрокаТабличнойЧасти.Списание = Истина;
					//Костенюк Александр-Финиш 24.01.2013
				КонецЦикла;
				
			Иначе
				
				// -- Услуги.
				СтрокаТабличнойЧасти = Документ.Услуги.Добавить();
				Для Каждого Реквизит Из СписокРеквизитовУслуг Цикл
					Реквизит = Реквизит.Значение;
					СтрокаТабличнойЧасти[Реквизит] = СтрокаДанных[Реквизит];
					//Костенюк Александр-Старт 24.01.2013
					СтрокаТабличнойЧасти.Списание = Истина;
					//Костенюк Александр-Финиш 24.01.2013
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры // ТаблицаЗаказаЗаписать()
	
	Функция ПолучитьУровненьПоВладельцу(Элемент, Знач Владелец)
		
		Уровень = 0;
		
		Данные	= Элемент.Данные();
		Пока Истина Цикл
			Строка = Данные.Найти(Владелец,"Идентификатор");
			Если Строка=Неопределено Тогда
				Возврат Уровень;
			КонецЕсли;
			Владелец	= Строка.Владелец;
			Уровень		= Уровень + 1;
		КонецЦикла;
		
		Возврат Уровень;
		
	КонецФункции
	
	// Процедура обработчик события ПриВыводеСтроки табличного поля заказ документа.
	//
	Процедура ТаблицаЗаказаВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		// Оформление строки.
		Если (ДанныеСтроки.Распечатан = Истина) Тогда
			ОформлениеСтроки.Ячейки("НомерСтроки").ЦветФона = WebЦвета.ВесеннеЗеленый;
			ОформлениеСтроки.Ячейки("НоменклатураКод").ЦветФона = WebЦвета.ВесеннеЗеленый;
			ОформлениеСтроки.Ячейки("НоменклатураПредставление").ЦветФона = WebЦвета.ВесеннеЗеленый;
			ОформлениеСтроки.Ячейки("Количество").ЦветФона = WebЦвета.ВесеннеЗеленый;
			ОформлениеСтроки.Ячейки("Цена").ЦветФона = WebЦвета.ВесеннеЗеленый;
			ОформлениеСтроки.Ячейки("СуммаОтображаемая").ЦветФона = WebЦвета.ВесеннеЗеленый;
			//Костенюк Александр-Закомментировано 20.05.2013 ОформлениеСтроки.Ячейки("ПорядокПодачи").ЦветФона = WebЦвета.ВесеннеЗеленый;
		КонецЕсли;
		
		// НомерСтроки.
		ОформлениеСтроки.Ячейки("НомерСтроки").Текст = Строка(Элемент.Данные().Индекс(ДанныеСтроки) + 1);
		
		// НоменклатураКод.
		ОформлениеСтроки.Ячейки("НоменклатураКод").Текст = FrontOffice.ПредставлениеНомера(ДанныеСтроки.НоменклатураКод);
		
		// Чистяков Павел 06.09.2010 8:10:04
		НоменклатураПредставление = ОформлениеСтроки.Ячейки("НоменклатураПредставление");
		
		Уровень = ПолучитьУровненьПоВладельцу(Элемент,ДанныеСтроки.Владелец);
		Пока Уровень > 0 Цикл
			НоменклатураПредставление.Текст = "    " + НоменклатураПредставление.Текст;
			Уровень = Уровень - 1;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Комментарий) Тогда
			НоменклатураПредставление.Текст = НоменклатураПредставление.Текст + Символы.ПС + "    " + ДанныеСтроки.Комментарий;
		КонецЕсли;
		
	КонецПроцедуры // ТаблицаЗаказаВывестиСтроку()
	
	// Процедура добавления позиции в табличное поле заказа документа.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ТаблицаЗаказаДобавитьПозицию(ТабличноеПоле, Номенклатура, Количество = Неопределено, Сворачивать = Истина, ДобавлениеЧерезМеню=Ложь, ТипНоменклатуры=Неопределено) Экспорт
		
		ЕстьСвязаные = Истина;
		// Данные.
		Данные = ТабличноеПоле.Данные();
		
		
		// Формирования набора значений.
		Если (Не ТипЗнч(Номенклатура) = мТипТаблицыЗначений) Тогда
			НаборПозиций = Новый Массив; 
			НаборПозиций.Добавить(Номенклатура);
		Иначе
			НаборПозиций = Номенклатура;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Номенклатура.Номенклатура.Связана) Тогда
			ЕстьСвязаные = Ложь;
			МассивПозицийСвязанных = Новый Массив;		
			
			Если Номенклатура.Номенклатура.Связана.ЭтоГруппа Тогда
				ПолучитьСвязаныеПозиции(Номенклатура.Номенклатура.Связана, МассивПозицийСвязанных);
			иначе
				МассивПозицийСвязанных.Добавить(Номенклатура.Номенклатура.Связана);
			КонецЕсли;		
			
			ин = 0;
			Пока ин <> МассивПозицийСвязанных.Количество()-1  Цикл
				Если Данные.Найти(МассивПозицийСвязанных[ин],"Номенклатура") <> Неопределено Тогда
					ЕстьСвязаные = Истина;
					Прервать;
				КонецЕсли;
				ин= ин + 1;	
			КонецЦикла; 		
			
		КонецЕсли;

		
						
		Если не ЕстьСвязаные Тогда	
			FrontOffice.ВывестиПредупреждение( НСтр("ru=""Для номенклатуры "+ Номенклатура.Номенклатура+" нет связной позиции!""; uk=""Для номенклатури "+ Номенклатура.Номенклатура+" немає зв'язної позиції!"""),,);
			Возврат;	
		КонецЕсли;
		
		// Чистяков Павел 09.09.2010 21:47:24 
		НеОбъединятьОдинаковыетовары = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeНеОбъединятьОдинаковыетоварыПриДобавленииТовараЗаказа) И ДобавлениеЧерезМеню;
		
		Для Каждого Позиция Из НаборПозиций Цикл
			
			ТекущиеДанные = Неопределено;
			
			// Проверка совпадения с нераспечатанными позицциями.
			Если Сворачивать Тогда
				Для Каждого СтрокаДанных Из Данные Цикл
					Если (СтрокаДанных.Номенклатура = Позиция.Номенклатура)
						И (Не СтрокаДанных.Распечатан)
						// Чистяков Павел 06.09.2010 14:18:40 
						И (Не ЗначениеЗаполнено(СтрокаДанных.Комментарий))
						И (Не НеОбъединятьОдинаковыетовары)
						И ТипНоменклатуры=Неопределено Тогда
						// Чистяков Павел 26.08.2011 10:27:20 
						// Также поищем позиции, у которых есть модификатор, в этом случае надо добавить новую сторку
						СтруктураПоиска	= Новый Структура("Владелец",СтрокаДанных.Идентификатор);
						СтрокиНайденные	= Данные.НайтиСтроки(СтруктураПоиска);
						Если СтрокиНайденные.Количество()=0 Тогда
							ТекущиеДанные = СтрокаДанных;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Чистяков Павел 26.08.2011 14:30:46 
			// Проверки на модификаторы или условия
			Строка = ТабличноеПоле.ТекущаяСтрока();
			Если Строка<>Неопределено
				И ТипНоменклатуры<>Неопределено Тогда
				СтруктураПоиска	= Новый Структура("Владелец",Строка.Идентификатор);
				НайденныеСтроки = Данные.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаНайденных Из НайденныеСтроки Цикл
					Если СтрокаНайденных.Номенклатура=Позиция.Номенклатура Тогда
						// Чистяков Павел 26.08.2011 10:29:28
						// Модификаторы нельзя добавлять
						Возврат;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			
			// Действие.
			Если (ТекущиеДанные = Неопределено) Тогда
				
				ЕдиницаИзмерения			= Позиция.ЕдиницаИзмерения;
				Цена						= Позиция.Цена; 
				ПлановаяСебестоимость		= Позиция.ПлановаяСебестоимость; 
				СтавкаНДС					= Позиция.СтавкаНДС; 
				НоменклатурнаяГруппа		= Позиция.НоменклатурнаяГруппа; 
				Организация					= Позиция.Организация; 
				//Услуга						= Позиция.Услуга; //Костенюк Александр-Закомментировано 20.05.2013
				//ПорядокПодачи				= Позиция.ПорядокПодачи;
				
				Для Каждого СтрокаДанных Из Данные Цикл
					
					Если (СтрокаДанных.Номенклатура = Позиция.Номенклатура) Тогда
						
						ЕдиницаИзмерения	= СтрокаДанных.ЕдиницаИзмерения;
						Цена				= СтрокаДанных.Цена;
						ПлановаяСебестоимость	= СтрокаДанных.ПлановаяСебестоимость;
						СтавкаНДС			= СтрокаДанных.СтавкаНДС;
						НоменклатурнаяГруппа	= СтрокаДанных.НоменклатурнаяГруппа;
						Организация			= СтрокаДанных.Организация;
						//Услуга				= СтрокаДанных.Услуга; //Костенюк Александр-Закомментировано 20.05.2013
						
					КонецЕсли;
					
					//Если СтрокаДанных.Распечатан Тогда
					//	
					//	ПорядокПодачи		= Макс(ПорядокПодачи, СтрокаДанных.ПорядокПодачи);
					//	
					//КонецЕсли;
					
				КонецЦикла;
				
				// Чистяков Павел 05.08.2011 14:10:22
				// Надо добавить модификатор и условие
				// под соответствующей номенклатурой
				Если ТипНоменклатуры<>Неопределено Тогда
					
					Если (ТабличноеПоле.ТекущиеДанные() = Неопределено)
						ИЛИ ТабличноеПоле.ТекущиеДанные().Распечатан Тогда
						// Чистяков Павел 05.08.2011 16:07:15
						// По новым сведениям не надо добавлять вообще
						Возврат;
					Иначе
						ОригинальнаяСтрока			= ТабличноеПоле.ТекущиеДанные();
						ТекущиеДанные				= Данные.Вставить(Данные.Индекс(ТабличноеПоле.ТекущиеДанные())+1);
						ТекущиеДанные.Владелец		= ОригинальнаяСтрока.Идентификатор;
						ТекущиеДанные.ВидНоменклатуры = ТипНоменклатуры;
						// Чистяков Павел 08.08.2011 15:26:14 
						// Количество должно совпадать с количеством родителя
						ТекущиеДанные.Количество	= ОригинальнаяСтрока.Количество;
						// Чистяков Павел 08.12.2011 16:42:49 
						// Подача тоже должна совпадать
						//ТекущиеДанные.ПорядокПодачи = ОригинальнаяСтрока.ПорядокПодачи;
					КонецЕсли;
					
				Иначе
					
					// Чистяков Павел 26.08.2011 11:00:26
					// Позиции добавляем всегда в конец
					ТекущиеДанные					= Данные.Добавить();
					ТекущиеДанные.ВидНоменклатуры	= Перечисления.ТипыСтрокЗаказов.Товар;
					//ТекущиеДанные.ПорядокПодачи		= ПорядокПодачи;
					
					Если (ТипЗнч(Номенклатура)<>мТипТаблицыЗначений) Тогда
						ТекущиеДанные.Количество	= Количество;
					Иначе
						ТекущиеДанные.Количество	= Позиция.Количество;
					КонецЕсли;
					
				КонецЕсли; 
				
				ТекущиеДанные.Идентификатор			= Новый УникальныйИдентификатор;
				ТекущиеДанные.Номенклатура			= Позиция.Номенклатура;
				ТекущиеДанные.ЕдиницаИзмерения		= ЕдиницаИзмерения;
				ТекущиеДанные.СтавкаНДС				= СтавкаНДС;
				ТекущиеДанные.Цена					= Цена;
				ТекущиеДанные.ПлановаяСебестоимость = ПлановаяСебестоимость;
				ТекущиеДанные.НоменклатурнаяГруппа	= НоменклатурнаяГруппа;
				ТекущиеДанные.Организация			= Организация;
				//ТекущиеДанные.Услуга				= Услуга;
				ТекущиеДанные.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.НоменклатураКод);
				// Чистяков Павел 11.10.2010 18:52:28 
				// Делаю в попытке так как не знаю по всех ли "позициях" есть
				// комментарий
				Попытка
					ТекущиеДанные.Комментарий		= Позиция.Комментарий;
				Исключение
					//
				КонецПопытки; 
			Иначе
				// Изменение позиции.
				ТекущиеДанные.Количество	= ТекущиеДанные.Количество + Количество;
				// Чистяков Павел 08.08.2011 18:25:41 
				// Изменим количество в подчиненных строках
				ТаблицаЗаказаИзменитьПозициюИзДерева(Данные, ТекущиеДанные);
			КонецЕсли;
			
		КонецЦикла;
		
		// TODO: Расчет скидок.
		Документ = ТабличноеПоле.Тег;
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, );//Документ.ДополнительныеСвойства.Скидки
		
		// Обновление.
		Если (Не ТабличноеПоле.ТекущиеДанные() = ТекущиеДанные) Тогда
			ТабличноеПоле.ТекущаяСтрока(ТекущиеДанные);
		Иначе
			ТабличноеПоле.ОбновитьСтроки();
		КонецЕсли;
		
	КонецПроцедуры // ТаблицаЗаказаДобавитьПозицию()
	
	// Чистяков Павел 08.08.2011 17:47:21 
	Процедура ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле, СтрокаТаблицы)
		
		Структура		= Новый Структура("Владелец",СтрокаТаблицы.Идентификатор);
		СтрокиТаблицы	= ТабличноеПоле.НайтиСтроки(Структура);
		
		Для каждого Строка Из СтрокиТаблицы Цикл
			ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле,Строка);
		КонецЦикла;
		
		ТабличноеПоле.Удалить(СтрокаТаблицы);
		
	КонецПроцедуры
	
	// Чистяков Павел 08.08.2011 17:47:21 
	Процедура ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле, СтрокаТаблицы)
		
		Структура		= Новый Структура("Владелец",СтрокаТаблицы.Идентификатор);
		СтрокиТаблицы	= ТабличноеПоле.НайтиСтроки(Структура);
		
		Для каждого Строка Из СтрокиТаблицы Цикл
			Строка.Количество	= СтрокаТаблицы.Количество;
			ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле,Строка);
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура изменение позиции в табличном поле заказа документа.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ТаблицаЗаказаИзменитьПозицию(ТабличноеПоле, Количество) Экспорт
		
		// Действие.
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные();
		Если Булево(Макс(Количество,0)) Тогда
			// Изменение позиции.
			ТекущиеДанные.Количество = Количество;
			ТаблицаЗаказаИзменитьПозициюИзДерева(ТабличноеПоле.Данные(),ТекущиеДанные);
		Иначе
			// Чистяков Павел 08.08.2011 13:55:21 
			// Уадлять надо рекурсивно с учетом модификаторов
			ТаблицаЗаказаУдалитьПозициюИзДерева(ТабличноеПоле.Данные(),ТекущиеДанные);
		КонецЕсли;
		
		// TODO: Расчет скидок.
		Документ = ТабличноеПоле.Тег;
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции, ); //Документ.ДополнительныеСвойства.Скидки
		
		// Обновление.
		ТабличноеПоле.ОбновитьСтроки();
		
	КонецПроцедуры // ТаблицаЗаказаИзменитьПозицию()
	
	// Процедура удаления позиции в табличном поле заказа документа.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ТаблицаЗаказаУдалитьПозицию(ТабличноеПоле) Экспорт
		
		// Удаление позиции.
		ТаблицаЗаказаИзменитьПозицию(ТабличноеПоле, 0);
		
	КонецПроцедуры // ТаблицаЗаказаУдалитьПозицию()
		
	// Чистяков Павел 17.11.2011 11:18:00 
	// Попыка выгрузить из запроса дерево
	Процедура ДеревоМенюПрочитать(Документ, ТабличноеПоле = Неопределено, Родитель = Неопределено, Ресторан = Неопределено) Экспорт
		
		Если мКешПользователь<>ПараметрыСеанса.ТекущийПользователь
			ИЛИ мКешМеню = Неопределено Тогда	
			мКешПользователь = ПараметрыСеанса.ТекущийПользователь;
			
			//Запрос = Новый Запрос(
			//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//|	Меню.Ссылка КАК Ссылка,
			//|	Меню.ЭтоГруппа КАК ЭтоГруппа,
			//|	Меню.Номенклатура КАК Номенклатура,
			//|	ПРЕДСТАВЛЕНИЕ(Меню.Номенклатура) КАК Представление,
			//|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			//|	НоменклатураМеню.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
			//|	НоменклатураМеню.Код КАК Код,
			//|	НоменклатураМеню.Модифицируемый КАК Модифицируемый,
			//|	НоменклатураМеню.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			//|	НоменклатураМеню.Организация КАК Организация,
			//|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
			//|	НоменклатураМеню.СтавкаНДС КАК СтавкаНДС,
			//|	НоменклатураМеню.ТипНоменклатуры КАК ТипНоменклатуры,
			//|	НоменклатураМеню.Услуга КАК Услуга,
			//|	НоменклатураМеню.Цена КАК Цена,
			//|	НоменклатураМеню.Ценовой КАК Ценовой,
			//|	НоменклатураМеню.Штучный КАК Штучный
			//|ИЗ
			//|	Справочник.Меню КАК Меню
			//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
			//|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
			//|ГДЕ
			//|	Меню.Актуальность
			//|	И (НЕ Меню.ЭтоГруппа)
			//|	И Меню.Владелец В
			//|			(ВЫБРАТЬ
			//|				ВидыМеню.Ссылка
			//|			ИЗ
			//|				Справочник.ВидыМеню КАК ВидыМеню
			//|			ГДЕ
			//|				ВЫБОР
			//|					КОГДА ВидыМеню.ПоДнямНедели
			//|						ТОГДА ВидыМеню.Ссылка В
			//|								(ВЫБРАТЬ
			//|									ВидыМенюВремяПоДнямНедели.Ссылка
			//|								ИЗ
			//|									Справочник.ВидыМеню.ВремяПоДнямНедели КАК ВидыМенюВремяПоДнямНедели
			//|								ГДЕ
			//|									ВидыМенюВремяПоДнямНедели.ДеньНедели В
			//|										(ВЫБРАТЬ РАЗЛИЧНЫЕ
			//|											ВЫБОР
			//|												КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 1
			//|													ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
			//|												КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 2
			//|													ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
			//|												КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 3
			//|													ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
			//|												КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 4
			//|													ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
			//|												КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 5
			//|													ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
			//|												КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 6
			//|													ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
			//|												КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 7
			//|													ТОГДА ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
			//|											КОНЕЦ КАК ДниНедели
			//|										ИЗ
			//|											Перечисление.ДниНедели КАК ДниНедели)
			//|									И ВЫБОР
			//|										КОГДА ВидыМенюВремяПоДнямНедели.ВремяНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|												ИЛИ ВидыМенюВремяПоДнямНедели.ВремяОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|											ТОГДА ВЫБОР
			//|													КОГДА ВидыМенюВремяПоДнямНедели.ВремяНачала > &ТекущееВремя
			//|														ТОГДА ВидыМенюВремяПоДнямНедели.ВремяОкончания < &ТекущееВремя
			//|													ИНАЧЕ ВидыМенюВремяПоДнямНедели.ВремяОкончания > &ТекущееВремя
			//|												КОНЕЦ
			//|										ИНАЧЕ ИСТИНА
			//|									КОНЕЦ)
			//|					ИНАЧЕ ВЫБОР
			//|							КОГДА ВидыМеню.ОбщееВремяНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|									ИЛИ ВидыМеню.ОбщееВремяОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			//|								ТОГДА ВЫБОР
			//|										КОГДА ВидыМеню.ОбщееВремяНачала > &ТекущееВремя
			//|											ТОГДА ВидыМеню.ОбщееВремяОкончания < &ТекущееВремя
			//|										ИНАЧЕ ВидыМеню.ОбщееВремяОкончания > &ТекущееВремя
			//|									КОНЕЦ
			//|							ИНАЧЕ ИСТИНА
			//|						КОНЕЦ
			//|				КОНЕЦ)
			//|ИТОГИ
			//|	ЕСТЬNULL(ЭтоГруппа, ИСТИНА) КАК ЭтоГруппа,
			//|	ЕСТЬNULL(Номенклатура, Меню.Владелец) КАК Номенклатура,
			//|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(Номенклатура, Меню.Владелец)) КАК Представление
			//|ПО
			//|	Меню.Владелец,
			//|	Ссылка ТОЛЬКО ИЕРАРХИЯ");

			//Костенюк Александр-Старт 08.05.2012
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Меню.Ссылка КАК Ссылка,
			               |	Меню.ЭтоГруппа КАК ЭтоГруппа,
			               |	Меню.Номенклатура КАК Номенклатура,
			               |	ПРЕДСТАВЛЕНИЕ(Меню.Ссылка) КАК Представление,
			               |	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			               |	НоменклатураМеню.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
			               |	НоменклатураМеню.Код КАК Код,
			               |	НоменклатураМеню.Модифицируемый КАК Модифицируемый,
			               |	НоменклатураМеню.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			               |	НоменклатураМеню.Организация КАК Организация,
			               |	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
			               |	НоменклатураМеню.СтавкаНДС КАК СтавкаНДС,
			               |	НоменклатураМеню.ТипНоменклатуры КАК ТипНоменклатуры,
			               |	НоменклатураМеню.Услуга КАК Услуга,
			               |	НоменклатураМеню.Цена КАК Цена,
			               |	НоменклатураМеню.Ценовой КАК Ценовой,
			               |	НоменклатураМеню.Штучный КАК Штучный
			               |ИЗ
			               |	Справочник.Меню КАК Меню
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
			               |		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
			               |ГДЕ
			               |	Меню.Актуальность
			               |	И НЕ Меню.ЭтоГруппа
			               |	И Меню.Владелец В
			               |			(ВЫБРАТЬ
			               |				ВидыМеню.Ссылка
			               |			ИЗ
			               |				Справочник.ВидыМеню КАК ВидыМеню
			               |			ГДЕ
			               |				&ПериодыДействияВидыМеню)
			               |	И &ПериодыДействияМеню
			               |ИТОГИ
			               |	ЕСТЬNULL(ЭтоГруппа, ИСТИНА) КАК ЭтоГруппа,
			               |	ЕСТЬNULL(Меню.Ссылка, Меню.Владелец) КАК Номенклатура,
			               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(Меню.Ссылка, Меню.Владелец)) КАК Представление
			               |ПО
			               |	Меню.Владелец,
			               |	Ссылка ТОЛЬКО ИЕРАРХИЯ";
			РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияВидыМеню", "ВидыМеню");			   
			РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействияМеню", "Меню");
			//Костенюк Александр-Финиш 08.05.2012
			
			Запрос.УстановитьПараметр("ТекущееВремя", Вычислить("'" +"00010101"+ Формат(ТекущаяДата(),"ДФ=HHmmss; ДЛФ=T")+"'"));
            Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

			Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
			
			мКешМеню = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
		КонецЕсли;
		
		Данные = ТабличноеПоле.Данные();
		Если (Данные = Неопределено) Тогда
			
			мВыводитьКартинкиПутиМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиПутиМеню);
			мВыводитьКартинкиГруппМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиГруппМеню);
			мВыводитьКартинкиЭлементовМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиЭлементовМеню);
			мВыводитьЦеныМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьЦеныМеню);
			мКомпактноеПредставлениеМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.КомпактноеПредставлениеМеню);
			мРазмерЭлементовМеню = УправлениеПользователями.ПолучитьНастрокуРазмера(УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.РазмерЭлементовМеню));
			
			Данные = Новый ТаблицаЗначений;
			Данные.Колонки.Добавить("Меню", Новый ОписаниеТипов("Массив"), "Меню");
			
			ТабличноеПоле.Данные(Данные); ТабличноеПоле.СоздатьКолонки("Меню");
			ТабличноеПоле.Колонки.Получить("Меню").ОтображатьВложенныеДанные = Истина;
			ТабличноеПоле.Колонки.Получить("Меню").Ширина = Макс(мРазмерЭлементовМеню.Ширина, 160);
			ТабличноеПоле.Колонки.Получить("Меню").ШиринаЭлементаВложенныхДанных = ТабличноеПоле.Колонки.Получить("Меню").Ширина;
			ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(мРазмерЭлементовМеню.Высота, 40);
			ТабличноеПоле.Шапка = Ложь;
						
			Возврат;
			
		Иначе
			Данные.Очистить();
		КонецЕсли;
		
		// Выборка данных.
		Если ТабличноеПоле.Тег=Неопределено Тогда
			
			МассивРезультата	= Новый Массив();
			ЗаполнениеРесторана = ?(Документ<>Неопределено, Документ.Ресторан,Ресторан);
			
			УправлениеНоменклатуройСервер.УдалениеНеАктуальныхЗаписей(ТекущаяДата());
			ТаблицаЦвета		= УправлениеНоменклатуройСервер.FrontOfficeПолучитьЧтоВЧерномЧтоВБеломСписке(МассивРезультата,ЗаполнениеРесторана,,ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц);
			
			ТабличноеПоле.Тег	= Новый Структура("Данные,Путь,Группы,Элементы,ТаблицаЦвета");
			ТабличноеПоле.Тег.Вставить("Данные",мКешМеню);
			ТабличноеПоле.Тег.Вставить("ТаблицаЦвета",ТаблицаЦвета);
			ТабличноеПоле.Тег.Вставить("ПустаяЯчейка","Пусто");
			
		КонецЕсли;
		
		Если ТабличноеПоле.ТекущаяСтрока() <> Неопределено Тогда
			
			УправлениеНоменклатуройСервер.FrontOfficeПолучитьДеревоОтображенияМеню(МассивРезультата, ЗаполнениеРесторана);
			
		КонецЕсли;
		
		ДеревоМеню = ТабличноеПоле.Тег.Данные;
		
		ТабличноеПоле.Тег.Путь		= Новый Массив;
		ТабличноеПоле.Тег.Группы	= Новый Массив;
		ТабличноеПоле.Тег.Элементы	= Новый Массив;
		
		Если (ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений")) Тогда
			РодительМеню = Родитель;
		Иначе
			РодительМеню = ДеревоМеню.Строки.Найти(Родитель, "Ссылка", Истина);
		КонецЕсли;
		
		Если (Не РодительМеню = Неопределено) Тогда
			ДеревоМеню = РодительМеню;
			
			СтрокаДанных = Данные.Добавить();
			СтрокаДанных.Меню = Новый Массив;
			
			Пока (Не РодительМеню = Неопределено) Цикл
				ТабличноеПоле.Тег.Путь.Добавить(РодительМеню);
				СтрокаДанных.Меню.Вставить(0, РодительМеню);
				РодительМеню = РодительМеню.Родитель;	
			КонецЦикла;
		КонецЕсли;
		
		Если Не мКомпактноеПредставлениеМеню Тогда
			СтрокаДанных = Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
			Если СтрокаДереваМеню.ЭтоГруппа Тогда
				Если (СтрокаДанных = Неопределено) Тогда
					СтрокаДанных = Данные.Добавить();
					СтрокаДанных.Меню = Новый Массив;
				КонецЕсли;
				
				ТабличноеПоле.Тег.Группы.Добавить(СтрокаДереваМеню);
				СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
			КонецЕсли;
		КонецЦикла;
		
		// -- Строки.
		Если Не мКомпактноеПредставлениеМеню Тогда
			СтрокаДанных = Неопределено;
		КонецЕсли;
		Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
			Если Не СтрокаДереваМеню.ЭтоГруппа Тогда
				Если (СтрокаДанных = Неопределено) Тогда
					СтрокаДанных = Данные.Добавить();
					СтрокаДанных.Меню = Новый Массив;
				КонецЕсли;
				
				ТабличноеПоле.Тег.Элементы.Добавить(СтрокаДереваМеню);
				СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
			КонецЕсли;
		КонецЦикла;
		
		ТабличноеПоле.ОбновитьСтроки();
		
	КонецПроцедуры
	
	// Процедура обработчик события ПриВыводеСтроки табличного поля меню.
	//
	Процедура ДеревоМенюВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки, Ресторан = Неопределено, ИзменятьТаблицу = ложь ) Экспорт
		//ОформлениеСтроки.ЦветФона
		// Меню.
		Если ИзменятьТаблицу и Элемент.Тег.данные <> Неопределено и Ресторан <> Неопределено Тогда	 
			//МассивНоменклатуры = ОбщегоНазначенияСервер.ВыгрузитьДеревоЗначенийВТаблицуЗначений(Элемент.Тег.данные).ВыгрузитьКолонку("Номенклатура");
			МассивРезультата = Новый Массив;
			//Для НомерСтроки=0 По МассивНоменклатуры.Количество() -1 Цикл
			//	Если ТипЗнч(МассивНоменклатуры[НомерСтроки]) = Тип("СправочникСсылка.Номенклатура") Тогда
			//		МассивРезультата.Добавить(МассивНоменклатуры[НомерСтроки]);
			//	КонецЕсли;  
			//КонецЦикла;
			
			Если Элемент.Тег.ТаблицаЦвета<> Неопределено Тогда 
				Элемент.Тег.ТаблицаЦвета.Очистить(); 
			КонецЕсли;
			
			Элемент.Тег.ТаблицаЦвета= УправлениеНоменклатуройСервер.FrontOfficeПолучитьЧтоВЧерномЧтоВБеломСписке(МассивРезультата, Ресторан,,ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц);
		КонецЕсли; 
		
		ОформлениеСтрокиМеню =  ОформлениеСтроки.Ячейки("Меню");
		КоличествоОбрабЯчеек = ОформлениеСтрокиМеню.Ячейки(Неопределено);
		
		Если не КоличествоОбрабЯчеек > 0 тогда	
			ОформлениеСтрокиМеню.Текст = Элемент.Тег.ПустаяЯчейка;
		Иначе	  
			
			Для ИндексВложенныхДанных = 0 По КоличествоОбрабЯчеек - 1 Цикл
				
				ВложенныеДанные = ДанныеСтроки.Меню[ИндексВложенныхДанных];
				ВложеннаяЯчейка = ОформлениеСтрокиМеню.Ячейки(ИндексВложенныхДанных);
				ВложеннаяЯчейка.Текст = ВложенныеДанные.Представление;
				
				Если мВыводитьЦеныМеню И (Не Элемент.Тег.Элементы.Найти(ВложенныеДанные) = Неопределено) Тогда
					ВложеннаяЯчейка.Текст = ВложеннаяЯчейка.Текст+ " " + Строка(ВложенныеДанные.ПредставлениеЕдиницыИзмерения) + Символы.ПС + Формат(ВложенныеДанные.Цена, "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=") ;		
					
				КонецЕсли;
				
				Если (Не Элемент.Тег.Путь.Найти(ВложенныеДанные) = Неопределено) Тогда
					Если (Не мКомпактноеПредставлениеМеню) Тогда
						ОформлениеСтрокиМеню.ЦветФона = Элемент.ЦветФонаШапки;
					КонецЕсли;
					ВложеннаяЯчейка.ЦветФона = Элемент.ЦветФонаШапки;
					ВложеннаяЯчейка.Шрифт = Новый Шрифт(ВложеннаяЯчейка.Шрифт, ,, Истина); // Жирный.
					Если мВыводитьКартинкиПутиМеню Тогда
						ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияРодитель;
					КонецЕсли;
				ИначеЕсли (Не Элемент.Тег.Группы.Найти(ВложенныеДанные) = Неопределено) Тогда
					ВложеннаяЯчейка.ЦветТекста = ЦветаСтиля.ЦветФонаВыделенияПоля;
					ВложеннаяЯчейка.Шрифт = Новый Шрифт(ВложеннаяЯчейка.Шрифт, ,, Истина); // Жирный.
					Если мВыводитьКартинкиГруппМеню Тогда
						ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияГруппа;
					КонецЕсли;
				Иначе
					//Игорь Разукрашка
					Если  Элемент.Тег.ТаблицаЦвета <> Неопределено  тогда    //and Элемент.Тег.ТаблицаЦвета.количество()>0
						СтрокаПоиска = Элемент.Тег.ТаблицаЦвета.Найти(ВложенныеДанные.Номенклатура,"Номенклатура");
						Если СтрокаПоиска <> Неопределено Тогда
							
							ВложеннаяЯчейка.ЦветФона = СтрокаПоиска.ЦветаФона.Получить();
							ВложеннаяЯчейка.Шрифт  = СтрокаПоиска.ШрифтыСтиля.Получить();
							ВложеннаяЯчейка.ЦветТекста =СтрокаПоиска.ЦветШрифта.Получить();
							
						КонецЕсли; 
					КонецЕсли;
					
					Если мВыводитьКартинкиЭлементовМеню Тогда
						ВложеннаяЯчейка.Картинка = Элемент.БиблиотекаКартинок.ИерархияЭлеменит;
					КонецЕсли;
				КонецЕсли;
				
				ВложеннаяЯчейка.ГиперСсылка = Истина;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецПроцедуры // ДеревоМенюВывестиСтроку()
	
	// Процедура заполнения табличного поля оплат.
	//
	// Параметры:
	//	Документ - ДокументОбъект.ТабельУчетаРабочегоВремениОрганизации. Документ;
	//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей. Требуемые полномочия при просмотре документов.
	//
	Процедура ДеревоОплатПрочитать(Документ, ТабличноеПоле) Экспорт

		Данные = ТабличноеПоле.Данные();
		
		Если (Данные = Неопределено) Тогда
			Данные = Новый ДеревоЗначений;
			Данные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
			Данные.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"));
			Данные.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
			Данные.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Оплата.Синоним);
			Данные.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
			Данные.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
			Данные.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"), "НУ");
			ТабличноеПоле.Данные(Данные); 
			ТабличноеПоле.СоздатьКолонки("Картинка,Представление,ОтражатьВНалоговомУчете");
			ТабличноеПоле.Колонки.Получить("Представление").Ширина = 300 * 0.75;
			ТабличноеПоле.Колонки.Получить("ОтражатьВНалоговомУчете").Ширина = 300 * 0.10;
			ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;	
			Возврат;
		Иначе
			Данные.Строки.Очистить();
		КонецЕсли;
		
		Если (Документ = Неопределено) тогда
			Возврат;
		КонецЕсли;
		
		// Александр Переверзев 03.03.2012 14:55:24 
		ТекущаяОплата = Документ.Оплата;	
		Если Не ЗначениеЗаполнено(ТекущаяОплата) Тогда
			ТекущаяОплата = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeВидОплатыПоУмолчаниюСписания);	
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(ТекущаяОплата) Тогда
			ТекущаяОплата = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОплатыЧекаККМ);	
		КонецЕсли; 
		// Александр Переверзев 12.03.2012 18:46:42 
		Если (Не Документ.Оплата = ТекущаяОплата) Тогда
			Документ.Оплата = ТекущаяОплата;
			Документ.ОтражатьВУправленческомУчете = ТекущаяОплата.ОтражатьВУправленческомУчете;
			Документ.ОтражатьВНалоговомУчете = ТекущаяОплата.ОтражатьВНалоговомУчете;
			Документ.ОтражатьВБухгалтерскомУчете = ТекущаяОплата.ОтражатьВБухгалтерскомУчете;
		КонецЕсли; 
		
		// Александр Переверзев 03.03.2012 14:55:24 
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ВидыОплатЧекаККМ.Ссылка,
		                      |	ВидыОплатЧекаККМ.Родитель,
		                      |	ВидыОплатЧекаККМ.ЭтоГруппа,
		                      |	ВидыОплатЧекаККМ.Представление,
		                      |	ВидыОплатЧекаККМ.ОтражатьВУправленческомУчете,
		                      |	ВидыОплатЧекаККМ.ОтражатьВБухгалтерскомУчете,
		                      |	ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
		                      |ИЗ
		                      |	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
		                      |ГДЕ
		                      |	(НЕ ВидыОплатЧекаККМ.ПометкаУдаления)
		                      |	И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете
		                      |	И ВидыОплатЧекаККМ.ИспользоватьВСписаниеТоваров
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ВидыОплатЧекаККМ.Родитель,
		                      |	ВидыОплатЧекаККМ.ЭтоГруппа УБЫВ,
		                      |	ВидыОплатЧекаККМ.Представление");
		
		Если ОбщегоНазначения.ВидимостьВторойФормы() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидыОплатЧекаККМ.ОтражатьВНалоговомУчете", " ");		
		КонецЕсли;

		Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
		РезультатЗапроса = Запрос.Выполнить();			
		Если РезультатЗапроса.Пустой() Тогда ТабличноеПоле.ОбновитьСтроки(); Возврат; КонецЕсли;
		
		ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(РезультатЗапроса.Выгрузить(), "Ссылка", "Родитель", Данные);
		
		Если ЗначениеЗаполнено(ТекущаяОплата) Тогда
			ТекущаяСтрока = Данные.Строки.Найти(ТекущаяОплата, "Ссылка", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяОплата) Тогда
			ТабличноеПоле.ТекущаяСтрока(ТекущаяСтрока);
		Иначе
			ТабличноеПоле.ОбновитьСтроки();
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обработчик события ПриВыводеСтроки табличного поля оплат.
	//
	Процедура ДеревоОплатВывестиСтроку(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		// Оформление строки.
		ОформлениеСтроки.Ячейки("Картинка").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("Представление").ГиперСсылка = Истина;
		ОформлениеСтроки.Ячейки("ОтражатьВНалоговомУчете").ГиперСсылка = Истина;
		
		// ОтражатьВНалоговомУчете.
		ОформлениеСтроки.Ячейки("ОтражатьВНалоговомУчете").ТолькоПросмотр = Истина;
		
	КонецПроцедуры // ДеревоОплатВывестиСтроку()
	
	Процедура ТаблицаПереносаПрочитать(Документ, ТабличноеПоле) Экспорт
		
		// Перенаправление.
		Если (Документ = Неопределено) тогда
			ТаблицаЗаказаПрочитать(Документ, ТабличноеПоле);
		Иначе
			ТаблицаЗаказаПрочитать(Документ.Ссылка, ТабличноеПоле);
		КонецЕсли;
		
	КонецПроцедуры // ТаблицаПереносаПрочитать()
	
	Процедура ТаблицаПереносаПеренестиПозицию(Источник, Получатель, Позиция = Неопределено, Количество = Неопределено, ТекущаяСтрокаТаблицыПолучателя = Неопределено) Экспорт
		//Игорь Перенос 
		// Игорь 25.08.2011 17:38:31
		// Данные.
		ИсточникДанные = Источник.Данные();
		ОсновнойИсточник = ИсточникДанные.Скопировать();
		ПолучательДанные = Получатель.Данные();
		ОсновноеКоличество = Количество;
		МассивНаУдаление = новый Массив;
		// Действие.
		Если (Позиция = Неопределено) Тогда
			
			// -- Проверка.
			Если Не Булево(ИсточникДанные.Количество()) Тогда
				Возврат;
			КонецЕсли;
			
			ТаблицаНеРаспечатанных = ИсточникДанные.СкопироватьКолонки();
			ТаблицаПриемникКопия = ПолучательДанные.Скопировать();
			ПолучательДанные.Очистить();
			// -- Пролный перенос.
			Для Каждого СтрокаТаблицыИсточника Из ИсточникДанные Цикл
				
				// ---- Поиск.
				Если СтрокаТаблицыИсточника.Распечатан Тогда
					
					СтрокаТаблицыПолучателя = ТаблицаПриемникКопия.Найти(СтрокаТаблицыИсточника.Идентификатор, "Идентификатор");
					Если (СтрокаТаблицыПолучателя = Неопределено) Тогда
						СтрокаТаблицыПолучателя = ПолучательДанные.Добавить();
						Количество = СтрокаТаблицыИсточника.Количество; 		
					Иначе
						Количество = СтрокаТаблицыИсточника.Количество + СтрокаТаблицыПолучателя.Количество; 		
					КонецЕсли;
					// ---- Клонирование.
					ОбработкаТабличныхЧастей.СкопироватьСтрокуТабЧасти(СтрокаТаблицыПолучателя, СтрокаТаблицыИсточника, ИсточникДанные.Колонки);
					// ---- Изменение количества.
					СтрокаТаблицыПолучателя.Количество = Количество;
					// ---- Рассчитать реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТаблицыПолучателя, Форма.ДокументОбъект, "Товары");
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицыПолучателя, Форма.ДокументОбъект, "Товары");
					
				иначе				
					ЗаполнитьЗначенияСвойств(ТаблицаНеРаспечатанных.добавить(), СтрокаТаблицыИсточника);	
				КонецЕсли;
				
			КонецЦикла;
			
			// ---- Корректировака источника.
			ИсточникДанные.Очистить();
			ОбщегоНазначенияСервер.ЗаполнитьКоллекциюСвойств(ТаблицаНеРаспечатанных, ИсточникДанные);					 
			ОбщегоНазначенияСервер.ЗаполнитьКоллекциюСвойств(ТаблицаПриемникКопия, ПолучательДанные);
			Источник.ОбновитьСтроки();
			Получатель.ОбновитьСтроки();
			
		Иначе
			
			// -- Перенос позиции.
			СтрокаТаблицыИсточника = Позиция;
			
			Если СтрокаТаблицыИсточника.Распечатан Тогда
				
				КоличествоИсточника = СтрокаТаблицыИсточника.Количество;
				// ---- Поиск.
				СтрокаТаблицыПолучателя = ПолучательДанные.Найти(СтрокаТаблицыИсточника.Идентификатор, "Идентификатор");
				
				Если (СтрокаТаблицыПолучателя = Неопределено) Тогда
					
					СтрокаТаблицыПолучателя = ПолучательДанные.Добавить();
					Если  СтрокаТаблицыИсточника.Количество <> Количество Тогда 
						//Количество = СтрокаТаблицыИсточника.Количество;
					Иначе
						Количество = КоличествоИсточника;
					КонецЕсли; 
					
				Иначе
					Количество = СтрокаТаблицыПолучателя.Количество + ОсновноеКоличество  ;
				КонецЕсли;   
				// ---- Клонирование  
				ОбработкаТабличныхЧастей.СкопироватьСтрокуТабЧасти(СтрокаТаблицыПолучателя, СтрокаТаблицыИсточника, ИсточникДанные.Колонки);					
				// ---- Изменение количества.
				СтрокаТаблицыПолучателя.Количество = Количество;
				// ---- Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТаблицыПолучателя, Форма.ДокументОбъект, "Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицыПолучателя, Форма.ДокументОбъект, "Товары");
				
				// ---- Корректировака источника.
				Если (СтрокаТаблицыИсточника.Количество = ОсновноеКоличество) или СтрокаТаблицыИсточника.Количество = 0 Тогда
					МассивНаУдаление.Добавить(СтрокаТаблицыИсточника);
				Иначе
					СтрокаТаблицыИсточника.Количество = КоличествоИсточника - ОсновноеКоличество;
					//---- Рассчитать реквизиты табличной части.									
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТаблицыИсточника, Форма.ДокументОбъект, "Товары");
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицыИсточника, Форма.ДокументОбъект, "Товары");
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Сортировка.
			ИсточникДанные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");
			ПолучательДанные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");
			
			МассивСтрок = Новый Массив;
			ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные, МассивСтрок, Позиция, ОсновноеКоличество); 
			
			Для каждого СтрокаМассива Из МассивНаУдаление Цикл
				ИсточникДанные.Удалить(СтрокаМассива);
			КонецЦикла;	
			
			// Обновление.
			Если ИсточникДанные.Количество()=0 Тогда
				ТекущаяСтрокаТаблицыПолучателя = Неопределено;
				Источник.ОбновитьСтроки();	
				Получатель.ОбновитьСтроки();
			иначе
				Источник.ОбновитьСтроки();	
				Получатель.ОбновитьСтроки();
				Если ЗначениеЗаполнено(СтрокаТаблицыПолучателя) Тогда 
					ПереносПоискВерхнегоРодителя(ПолучательДанные, СтрокаТаблицыПолучателя, , ТекущаяСтрокаТаблицыПолучателя );
					Получатель.ТекущаяСтрока(ТекущаяСтрокаТаблицыПолучателя);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИсточникДанные 		= Неопределено;
		ОсновнойИсточник 	= Неопределено;
		ПолучательДанные 	= Неопределено;
		
	КонецПроцедуры	
		
	Процедура ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные, МассивСтрок,  Позиция, Количество) 
		
		Если МассивСтрок.Количество()= 0 Тогда
			
			Для каждого СтрТаблицы Из ИсточникДанные Цикл
				
				Если СтрТаблицы.Владелец = Позиция.Идентификатор Тогда
					
					МассивСтрок.Добавить(СтрТаблицы);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивСтрок.Количество()> 0 тогда
				
				ПолучитьСтрокиПоИерархии(Источник, Получатель, ИсточникДанные , МассивСтрок,  Позиция, Количество)  
				
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрМассива Из МассивСтрок Цикл
				
				ТаблицаПереносаПеренестиПозицию(Источник, Получатель, СтрМассива, Количество); 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
		
	Функция ПроверкаВстречки(ДокументОбъект, ДокументОригинал, ДатаПечатиВстречки=Неопределено) Экспорт
		
		Если ОбщегоНазначения.РежимFrontOffice() Тогда
			
			МетаданныеДокумента = ДокументОбъект.Метаданные();
			
			Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента("Товары", "Распечатан", МетаданныеДокумента) Тогда
				ДокументОбъект.РабочиеЦентры().Очистить();
			Иначе
				Возврат Истина;	
			КонецЕсли;
			
			ТабличныеЧасти = Новый Массив; 
			ТабличныеЧасти.Добавить("Товары"); 
			ТабличныеЧасти.Добавить("Услуги");
			
			ТаблицаПозиций = ДокументОбъект.Товары.Выгрузить().СкопироватьКолонки("НоменклатурнаяГруппа,Номенклатура,Количество");
			ТаблицаПозиций.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
			ТаблицаПозиций.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Строка"));       			
			ТаблицаПозиций.Колонки.Добавить("Возврат", Новый ОписаниеТипов("Булево"));
			
			ДокуметыПроверки = Новый Массив; // Именно в таком порядке добаления.
			ДокуметыПроверки.Добавить(Новый Структура("ДокументИсходный,ДокументПроверки", ДокументОбъект, ДокументОригинал));
			
			Если ДатаПечатиВстречки=Неопределено Тогда
				
				ДокуметыПроверки.Добавить(Новый Структура("ДокументИсходный,ДокументПроверки", ДокументОригинал, ДокументОбъект));
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПовторВстречки",Ложь);
				
				Возвратная = Ложь; 
				
				СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
				ПустойУИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID);
				
				Для Каждого Докуметы Из ДокуметыПроверки Цикл
					
					ДокументИсходный = Докуметы.ДокументИсходный; 
					ДокументПроверки = Докуметы.ДокументПроверки;
					
					Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
						
						Для Каждого СтрокаТабличнойЧасти Из ДокументИсходный[ТабличнаяЧасть] Цикл
							
							Если СтрокаТабличнойЧасти.Владелец=ПустойУИдентификатор тогда
								
								Если //НЕ СтрокаТабличнойЧасти.Распечатан ИЛИ
									СтрокаТабличнойЧасти.Количество=0 ИЛИ
									СтрокаТабличнойЧасти.ВидНоменклатуры<>Перечисления.ТипыСтрокЗаказов.Товар Тогда
									Продолжить;
								КонецЕсли;
								
								СтрокаСравниваемойТабличнойЧасти = ДокументПроверки[ТабличнаяЧасть].Найти(СтрокаТабличнойЧасти.Идентификатор, "Идентификатор");
								
								Если СтрокаСравниваемойТабличнойЧасти=Неопределено
									ИЛИ НЕ СтрокаСравниваемойТабличнойЧасти.Распечатан Тогда
									Количество = СтрокаТабличнойЧасти.Количество;
								ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.Весовой Тогда
									Продолжить;
								ИначеЕсли СтрокаСравниваемойТабличнойЧасти.Количество>=СтрокаТабличнойЧасти.Количество Тогда
									Продолжить;
								Иначе
									Количество = СтрокаТабличнойЧасти.Количество-СтрокаСравниваемойТабличнойЧасти.Количество;
								КонецЕсли;
								
							КонецЕсли;
							
							СтрокаТаблицы = ТаблицаПозиций.Добавить();
							СтрокаТаблицы.Идентификатор = Строка(СтрокаТабличнойЧасти.Идентификатор);
							СтрокаТаблицы.Владелец = Строка(СтрокаТабличнойЧасти.Владелец);
							СтрокаТаблицы.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
							СтрокаТаблицы.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
							СтрокаТаблицы.Количество = Количество;
							СтрокаТаблицы.Возврат = Возвратная;
							
						КонецЦикла;
						
					КонецЦикла;
					
					Возвратная = Истина; 
					
				КонецЦикла;
				
			Иначе
				
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПовторВстречки",Истина);
				
				Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
					
					Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
						
						Если ДатаПечатиВстречки<>Дата(1,1,1) Тогда
							Если СтрокаТабличнойЧасти.ДатаНачалаПериода<>ДатаПечатиВстречки
								ИЛИ СтрокаТабличнойЧасти.Количество=0 Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли; 
						
						СтрокаТаблицы = ТаблицаПозиций.Добавить();
						СтрокаТаблицы.Идентификатор	= Строка(СтрокаТабличнойЧасти.Идентификатор);
						СтрокаТаблицы.Владелец		= Строка(СтрокаТабличнойЧасти.Владелец);
						СтрокаТаблицы.Номенклатура	= СтрокаТабличнойЧасти.Номенклатура;
						СтрокаТаблицы.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
						СтрокаТаблицы.Количество	= Количество;
						СтрокаТаблицы.Возврат		= Ложь;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// -- Распределение по рабочим центрам.
			Если Булево(ТаблицаПозиций.Количество()) Тогда
				
				// -- Установка выполненного статуса распечатанных, но не напечатанных (II).
				МассивРаспечатываемыхИдентификаторов = ТаблицаПозиций.ВыгрузитьКолонку("Идентификатор"); 
				
				// ---- Выборка данных (I).
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаПозиций.Идентификатор,
				|	ТаблицаПозиций.Владелец,
				|	ТаблицаПозиций.Номенклатура,
				|	ТаблицаПозиций.НоменклатурнаяГруппа,
				|	ТаблицаПозиций.Количество,
				|	ТаблицаПозиций.Возврат
				|ПОМЕСТИТЬ ТаблицаПозицийДокумента
				|ИЗ
				|	&ТаблицаПозиций КАК ТаблицаПозиций
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
				|	ТаблицаПозиций.Идентификатор,
				|	ТаблицаПозиций.Владелец,
				|	ТаблицаПозиций.Номенклатура,
				|	ТаблицаПозиций.НоменклатурнаяГруппа,
				|	ТаблицаПозиций.Количество,
				|	ТаблицаПозиций.Возврат
				|ПОМЕСТИТЬ ПозицииБезОтбора
				|ИЗ
				|	ВременнаяРабочиеЦентры КАК РабочиеЦентры,
				|	ТаблицаПозицийДокумента КАК ТаблицаПозиций
				|ГДЕ
				|	РабочиеЦентры.Владелец = &Ресторан
				|	И (НЕ РабочиеЦентры.Ссылка В
				|				(ВЫБРАТЬ
				|					ВложенныйЗапрос.ОбъектДоступа
				|				ИЗ
				|					(ВЫБРАТЬ
				|						НастройкиПравДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа,
				|						МИНИМУМ(НастройкиПравДоступаПользователей.Актуальность) КАК Актуальность
				|					ИЗ
				|						РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
				|					ГДЕ
				|						НастройкиПравДоступаПользователей.ОбъектДоступа ССЫЛКА Справочник.РабочиеЦентры
				|						И (НастройкиПравДоступаПользователей.ВладелецПравДоступа = &ТекущаяГруппаПользователей
				|							ИЛИ НастройкиПравДоступаПользователей.ВладелецПравДоступа = &ТекущийПользователь
				|							ИЛИ НастройкиПравДоступаПользователей.ВладелецПравДоступа = &ТекущийРежимРаботы)
				|					СГРУППИРОВАТЬ ПО
				|										НастройкиПравДоступаПользователей.ОбъектДоступа
				|					) КАК ВложенныйЗапрос
				|				ГДЕ
				|					(НЕ ВложенныйЗапрос.Актуальность)))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаПозиций.РабочийЦентр,
				|	ТаблицаПозиций.Идентификатор,
				|	ТаблицаПозиций.Владелец,
				|	ТаблицаПозиций.Количество,
				|	ТаблицаПозиций.Возврат
				|ИЗ
				|	ПозицииБезОтбора КАК ТаблицаПозиций
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПравилаИспользования КАК ПравилаИспользованияНоменклатурнойГруппы
				|		ПО ТаблицаПозиций.НоменклатурнаяГруппа = ПравилаИспользованияНоменклатурнойГруппы.ОбъектИспользования
				|			И ТаблицаПозиций.РабочийЦентр = ПравилаИспользованияНоменклатурнойГруппы.ВладелецПравилИспользования
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяПравилаИспользования КАК ПравилаИспользованияНоменклатуры
				|		ПО ТаблицаПозиций.Номенклатура = ПравилаИспользованияНоменклатуры.ОбъектИспользования
				|			И ТаблицаПозиций.РабочийЦентр = ПравилаИспользованияНоменклатуры.ВладелецПравилИспользования
				|ГДЕ
				|	(ПравилаИспользованияНоменклатурнойГруппы.Актуальность ЕСТЬ NULL 
				|			ИЛИ ПравилаИспользованияНоменклатурнойГруппы.Актуальность)
				|	И (ПравилаИспользованияНоменклатуры.Актуальность ЕСТЬ NULL 
				//|			ИЛИ ПравилаИспользованияНоменклатуры.Актуальность)");
				//Костенюк Александр-Старт 23.10.2012
				|			ИЛИ ПравилаИспользованияНоменклатуры.Актуальность)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТаблицаПозицийДокумента
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ПозицииБезОтбора");
				//Костенюк Александр-Финиш 23.10.2012
				Запрос.УстановитьПараметр("Ресторан", ДокументОбъект.Ресторан);
				Запрос.УстановитьПараметр("ТекущаяГруппаПользователей", ПараметрыСеанса.ТекущаяГруппаПользователей);
				Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
				Запрос.УстановитьПараметр("ТекущийРежимРаботы", ПараметрыСеанса.ТекущийРежимРаботы);
				Запрос.УстановитьПараметр("ТаблицаПозиций", ТаблицаПозиций);
				Запрос.МенеджерВременныхТаблиц = ПолучитьСерверFrontOffice().МенеджерВременныхТаблиц;
				РезультатЗапроса = Запрос.Выполнить();
				
				// ---- Выборка данных (II).
				Запрос.Текст = "УНИЧТОЖИТЬ ТаблицаПозицийДокумента; УНИЧТОЖИТЬ ПозицииБезОтбора;";
				Запрос.Выполнить();
				
				// Перенос данных.
				ТаблицаПозиций = РезультатЗапроса.Выгрузить();
				
				Если Булево(ТаблицаПозиций.Количество()) Тогда
					
					Возвратная = Ложь; 
					
					Для Каждого Докуметы Из ДокуметыПроверки Цикл
						ДокументИсходный = Докуметы.ДокументИсходный;
						
						Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
							МассивСтрокТаблицыПозиций = Неопределено;
							
							Для Каждого СтрокаТабличнойЧасти Из ДокументИсходный[ТабличнаяЧасть] Цикл
								
								// FrontOffice 01.12.2011 17:58:58
								Если СтрокаТабличнойЧасти.Распечатан и СтрокаТабличнойЧасти.Номенклатура.Временной Тогда
									Продолжить;
								КонецЕсли;
								
								Если (СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар) Тогда
									//квв
									МассивСтрокТаблицыПозиций = ТаблицаПозиций.НайтиСтроки(Новый Структура("Идентификатор,Возврат",Строка( СтрокаТабличнойЧасти.Идентификатор), Возвратная));
									КоличествоСтрокиТабличнойЧастиОтбора = СтрокаТабличнойЧасти.Количество;
								КонецЕсли;
								
																 
								 Если (МассивСтрокТаблицыПозиций = Неопределено) Тогда
									Продолжить;
								КонецЕсли;
								
								Для Каждого СтрокаТаблицыПозиций Из МассивСтрокТаблицыПозиций Цикл
									
									Если (СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар) Тогда
										Количество = СтрокаТаблицыПозиций.Количество;
									Иначе
										Если (КоличествоСтрокиТабличнойЧастиОтбора = СтрокаТаблицыПозиций.Количество) Тогда
											Количество = СтрокаТаблицыПозиций.Количество;
										Иначе
											Количество = СтрокаТабличнойЧасти.Количество * (СтрокаТаблицыПозиций.Количество / КоличествоСтрокиТабличнойЧастиОтбора); // На ноль проверять не нужно, нулевые строки были отброшены еще при подготовке данных для запроса.
										КонецЕсли;
									КонецЕсли;
									
									ДокументОбъект.РабочиеЦентры().Добавить(ДокументИсходный, СтрокаТабличнойЧасти, СтрокаТаблицыПозиций.РабочийЦентр, СтрокаТабличнойЧасти.Идентификатор, Возвратная, Количество);
									
								КонецЦикла;
								
							КонецЦикла;
						КонецЦикла;
						
						Возвратная = Истина; 
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			// -- Установка выполненного статуса распечатанных, но не напечатанных (III).
			
			Если (Не МассивРаспечатываемыхИдентификаторов = Неопределено) Тогда
				МассивРаспечатанныхИдентификаторов = ТаблицаПозиций.ВыгрузитьКолонку("Идентификатор"); 
				
				Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
					Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
						
						СтрокаТабличнойЧасти.Выполненн = СтрокаТабличнойЧасти.Выполненн Или
						//квв
						((Не МассивРаспечатываемыхИдентификаторов.Найти(Строка(СтрокаТабличнойЧасти.Идентификатор)) = Неопределено) И (МассивРаспечатанныхИдентификаторов.Найти(Строка(СтрокаТабличнойЧасти.Идентификатор)) = Неопределено));
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблицаПозиций = Неопределено;
		
		Возврат Истина;	
		
	КонецФункции // ПроверкаВстречки()
	
	// Функция проверки корректности заполнения документа для печати пречека.
	//
	// Параметры:
	//	Документ - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.СписаниеТоваров. Распечатываемый документ;
	//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.СписаниеТоваров. Распечатываемый документ до изменения.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае если документ прошел проверку.
	//
	Функция ПроверкаПречека(Документ, Оригинал) Экспорт
		
		// Получение объекта.
		ДокументОбъект = Документ; ДокументОригинал = Оригинал;
		
		// Тип документа.
		ТипДокумента = ТипЗнч(ДокументОбъект); МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// Проверка состояния.
		Если (Не ОбщегоНазначения.ЕстьРеквизитДокумента("Распечатан", МетаданныеДокумента)) Или (ДокументОбъект.Распечатан = ДокументОригинал.Распечатан) Тогда
			Возврат Истина;	
		КонецЕсли;
		
		// Проверка документа. Шапка.
		Если Не ДокументОбъект.Распечатан Тогда
			Возврат Истина;
		КонецЕсли;
		
		// Проверка оборудования.
		Если Не ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ВыводитьПречекНаПечать") Тогда
			Возврат Истина;
		КонецЕсли;
		
		// TODO: Проверка оборудования.	
		
		// Документ прошел проверку.
		Возврат Истина;	
		
	КонецФункции // ПроверкаПречека()
	
	// Функция проверки работоспособности оборудования (ФР)
	// Возвращаемое значение:
	//	Булево. Истина в случае если документ прошел проверку.
	Функция ПроверкаОборудованияДляПечатиНаККМ(СписокОрганизаций=Неопределено, СписокКассККМ=Неопределено, 
		ОтражатьВНалоговомУчете=Истина) Экспорт
		
		//29/06/2010 КА Если это форма 2 то никакой проверки оборудования не делаем
		Если НЕ(ОтражатьВНалоговомУчете) Тогда
			Возврат Истина;
		КонецЕсли;	
		Возврат Истина; // ПРОВЕРКА ЗАБАНЕНА ВРЕМЕННО!!!
		
		//Если продажа то получем СписокОрганизаций
		//Если возврат то получаем СписокКассККМ
		ТаблицаТОВсе = Новый ТаблицаЗначений();		
		ТаблицаТОВсе.Колонки.Добавить("Идентификатор");
		ТаблицаТОВсе.Колонки.Добавить("Модель");
		
		СписокТОнеПодкл = Новый СписокЗначений;
		
		Если НЕ(СписокОрганизаций=Неопределено) Тогда
			СписокПроверки = СписокОрганизаций; 
		Иначе
			СписокПроверки = СписокКассККМ; 
		КонецЕсли;	
		
		Для каждого ОрганизацияКасса из СписокПроверки Цикл		
			//Ковтун А. 11/2009 Получить список касс подключенных к даному компьютеру по организации
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	 РегТО.Идентификатор КАК Идентификатор,
			|	 РегТО.Модель КАК Модель
			|ИЗ
			|    РегистрСведений.ТорговоеОборудование КАК РегТО
			|ГДЕ
			|    РегТО.Компьютер = &Компьютер ";
			
			Запрос.УстановитьПараметр("Компьютер"          , ПолучитьСерверТО().ПолучитьКомпьютерТО());
			Если НЕ(СписокОрганизаций=Неопределено) Тогда
				Запрос.Текст = Запрос.Текст +"
				|	И РегТО.КассаККМ.Владелец = &Организация";
				Запрос.УстановитьПараметр("Организация", ОрганизацияКасса.Значение);
			Иначе
				Запрос.Текст = Запрос.Текст +"
				|	И РегТО.КассаККМ = &КассаККМ";
				Запрос.УстановитьПараметр("КассаККМ", ОрганизацияКасса.Значение);
			КонецЕсли;		
			
			Результат = Запрос.Выполнить().Выгрузить();				
			Для Каждого СтрокаЗапроса Из Результат Цикл									
				СтрокаТО = ТаблицаТОВсе.Добавить();
				
				СтрокаТО.Идентификатор      = СтрокаЗапроса.Идентификатор;
				СтрокаТО.Модель = СтрокаЗапроса.Модель;
			КонецЦикла;
		КонецЦикла;	
		
		ТаблицаТОВсе.Свернуть("Идентификатор,Модель");
		
		Для Каждого ЭлСписТО Из ТаблицаТОВсе Цикл
			Попытка
				Ответ = ПолучитьСерверТО().ПроверкаОборудования(ЭлСписТО.Идентификатор);						
				Если ЗначениеЗаполнено(Ответ) Тогда							
					СписокТОнеПодкл.Добавить(ЭлСписТО.Модель);
					НеФормироватьЧекККМ=Истина;
				КонецЕсли;						
			Исключение
				НеФормироватьЧекККМ=Истина;						
			КонецПопытки;
		КонецЦикла; 				
		
		// ---- Чеки ККМ.
		Если НеФормироватьЧекККМ=Истина Тогда
			ТОнеПодключено="( ";
			Для каждого СтрокаТО из СписокТОнеПодкл Цикл
				ТОнеПодключено = ТОнеПодключено+СокрЛП(СтрокаТО.Значение);
				Если СписокТОнеПодкл.Индекс(СтрокаТО)+1<СписокТОнеПодкл.Количество() Тогда
					ТОнеПодключено=ТОнеПодключено+", ";
				КонецЕсли;	
			КонецЦикла;	
			ТОнеПодключено=ТОнеПодключено+" )";
			____Ошибка(НСтр("ru='Чек не может быть сформирован, потому что оборудование ';uk='Чеч не може буди сформовано, тому що обладнання '")  +ТОнеПодключено+НСтр("ru=' не подключено!';uk=' не підключено!'") );
			Возврат Ложь;
		КонецЕсли;		
		
		Возврат Истина;
	КонецФункции 	
	
	// Функция проверки корректности заполнения документа для печати чека.
	//
	// Параметры:
	//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
	//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ до изменения.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае если документ прошел проверку.
	//
	Функция ПроверкаККМ(Документ, Оригинал, РежимЗаписи) Экспорт
		
		// Получение объекта.
		ДокументОбъект = Документ; 
		ДокументОригинал = Оригинал;
		
		// Тип документа.
		ТипДокумента = ТипЗнч(ДокументОбъект); 
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// Проверка состояния.
		//Если ((Не ОбщегоНазначения.ЕстьРеквизитДокумента("Оплата", МетаданныеДокумента)) Или (ДокументОбъект.Проведен = ДокументОригинал.Проведен)) Тогда	
		//	Возврат Истина;	
		//КонецЕсли;
		
		// Проверка документа.
		Если ЗначениеЗаполнено(ДокументОбъект.Оплата) Тогда
			
			// -- Категория клиентов.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКлиентов", МетаданныеДокумента) И ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОбъект.КатегорияКлиентов) И ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ТребоватьНаличиеКатегорииКлиентовПриПечатиПречека") Тогда
				FrontOffice.СообщитьОбНезаполненомРеквизитеДокумента(ДокументОбъект, "КатегорияКлиентов");
				Возврат Ложь;
			КонецЕсли;
			
			// -- Категория документа.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеДокумента) И ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОбъект.КатегорияДокумента) И ДокументПолучитьЗначениеНастройки(ДокументОбъект, "ТребоватьНаличиеКатегорииДокументаПриПечатиПречека") Тогда
				FrontOffice.СообщитьОбНезаполненомРеквизитеДокумента(ДокументОбъект, "КатегорияДокумента");
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// -- Выборка данных.
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДокументЧекККМ.Ссылка КАК Ссылка,
		|	ДокументЧекККМ.КассаККМ КАК КассаККМ,
		|	ДокументЧекККМ.КассаККМ.Владелец КАК Организация,
		|	ДокументЧекККМ.Оплата КАК Оплата,
		|	ДокументЧекККМ.ЧекККМ КАК ЧекККМРеализации,
		|	ДокументЧекККМ.СуммаДокумента КАК СуммаДокумента,
		|	ДокументЧекККМ.ЧекПробитНаККМ КАК ЧекПробитНаККМ,
		|	ДокументЧекККМ.ВидОперации КАК ВидОперации
		|ИЗ
		|	Документ.ЧекККМ КАК ДокументЧекККМ
		|ГДЕ
		|	ДокументЧекККМ.Сделка = &Сделка И 
		|	ДокументЧекККМ.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументЧекККМ.МоментВремени");
		Запрос.УстановитьПараметр("Сделка", ДокументОбъект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		// -- Подготовка таблиц.
		ТаблицаЧековККМРеализации = Новый ТаблицаЗначений;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ТаблицаЧековККМРеализации.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		ТаблицаЧековККМВозвратов = ТаблицаЧековККМРеализации.Скопировать();
		
		// -- Анализ данных.
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.ЧекККМРеализации) Тогда
					//Если Выборка.ВидОперации=Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
					СтрокаТаблицы = ТаблицаЧековККМРеализации.Найти(Выборка.ЧекККМРеализации, "Ссылка");
					Если НЕ(СтрокаТаблицы = Неопределено) Тогда
						Если (СтрокаТаблицы.КассаККМ = Выборка.КассаККМ) И (СтрокаТаблицы.Организация = Выборка.Организация) И (СтрокаТаблицы.Оплата = Выборка.Оплата) И (СтрокаТаблицы.Ссылка = Выборка.ЧекККМРеализации) И (СтрокаТаблицы.СуммаДокумента = Выборка.СуммаДокумента) Тогда
							ТаблицаЧековККМРеализации.Удалить(СтрокаТаблицы);
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					СтрокаТаблицы = ТаблицаЧековККМВозвратов.Добавить();
				Иначе
					СтрокаТаблицы = ТаблицаЧековККМРеализации.Добавить();
				КонецЕсли;
				
				Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
					Колонка = Колонка.Имя;
					СтрокаТаблицы[Колонка] = Выборка[Колонка];
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// -- Проверка при продаже
		Если Булево(ТаблицаЧековККМРеализации.Количество()) И (РежимЗаписи=РежимЗаписиДокумента.Проведение) Тогда
			ОписаниеОшибки = НСтр("ru=' По текущему документу существуют актуальные документы «';uk=' Для поточного документа існують актуальні документи «'")  + Метаданные.Документы.ЧекККМ.Синоним + "»!"; 
			FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію.'")  + ОписаниеОшибки); 
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ТаблицаЧековККМРеализации", ТаблицаЧековККМРеализации);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ТаблицаЧековККМВозвратов", ТаблицаЧековККМВозвратов);
		
		// Проверка оборудования.
		// ПРОДАЖА 
		//Если НЕ(РежимЗаписи = РежимЗаписиДокумента.Запись) Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			СписокОрганизаций = Новый СписокЗначений;
			СписокКасс = Новый СписокЗначений;
			ТабличныеЧасти = Новый Массив; 
			ТабличныеЧасти.Добавить("Товары"); 
			ТабличныеЧасти.Добавить("Услуги");
			
			Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
					
					Если (Не СписокОрганизаций.НайтиПоЗначению(СтрокаТабличнойЧасти.Организация) = Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					Если (СтрокаТабличнойЧасти.Сумма = 0) Тогда
						Продолжить;
					КонецЕсли;
					
					СписокОрганизаций.Добавить(СтрокаТабличнойЧасти.Организация);								
					
					Результат = РаботаСТорговымОборудованием.ВернутьТЗсоСпискомКассОрганизации(СтрокаТабличнойЧасти.Организация,ПолучитьСерверТО().ПолучитьКомпьютерТО()); 
					Для Каждого СтрокаКассы Из Результат Цикл
						СписокКасс.Добавить(СтрокаКассы.КассаККМ);
					КонецЦикла;				
				КонецЦикла;
			КонецЦикла;
			
			//30/10/2010 КА Если нет касс для закрытия, то не печатаем и не закрываем
			Если СписокКасс.Количество()=0 Тогда
				ОписаниеОшибки = НСтр("ru=' Не определены кассы для закрытия!';uk=' Не визначені каси для закриття!'") ;
				FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію.'")  + ОписаниеОшибки);
				Возврат Ложь;
			КонецЕсли;		
			
			Возврат ПроверкаОборудованияДляПечатиНаККМ(СписокОрганизаций, , ДокументОбъект.ОтражатьВНалоговомУчете);
			//ПРАВИЛЬНО: Возврат (Не ДокументОбъект.ОтражатьВНалоговомУчете) Или ПроверкаОборудованияДляПечатиНаККМ(СписокОрганизаций);
		КонецЕсли;
		
		// Документ прошел проверку.
		Возврат Истина;	
		
	КонецФункции // ПроверкаККМ()
	
	// Функция печати встречки документа.
	//
	// Параметры:
	//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
	//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ до изменения.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае если документ распечатан успешно;
	//  Ответ - Строка. Описание ошибки в случае неудачи.
	//
	Функция ПечатьВстречки(Документ, Оригинал, Ответ = Неопределено) Экспорт
		
		// Получение объекта.
		ДокументОбъект = Документ;
		
		ДокументОбъект.Печать("Встречка",,,,Истина);	
		
		// Распределение по рабочим центрам.
		//Если Не Булево(ДокументОбъект.РабочиеЦентры().Количество()) Тогда
		//	Возврат Истина;
		//КонецЕсли;
		//
		//// -- Упорядочивание.
		//ДокументОбъект.РабочиеЦентры().Упорядочить();
		//
		//// -- Печать.
		//ТаблицаРабочихЦентров = ДокументОбъект.РабочиеЦентры().РабочиеЦентры(Истина); // В разрезе операции возврата.
		//Для Каждого СтрокаТаблицаРабочихЦентров Из ТаблицаРабочихЦентров Цикл
		//	
		//ДокументОбъект.ПечатьВстречки(СтрокаТаблицаРабочихЦентров.РабочийЦентр, 
		//							  ДокументОбъект.РабочиеЦентры().Отбор(СтрокаТаблицаРабочихЦентров.РабочийЦентр, , СтрокаТаблицаРабочихЦентров.Возврат),
		//							  СтрокаТаблицаРабочихЦентров.Возврат,
		//							  Ложь);
		//	
		//КонецЦикла;
		
		Возврат Истина;		
		
	КонецФункции // ПечатьВстречки()
	
	// Функция печати встречки документа повторно.
	//
	// Параметры:
	//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
	//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ до изменения;
	//	ДатаОкончанияПериода - Дата. Дата печати распечатываемой повторно встречки.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае если документ распечатан успешно;
	//  Ответ - Строка. Описание ошибки в случае неудачи.
	//
	Функция ПечатьВстречкиПовторно(Документ, Оригинал, ДатаОкончанияПериода, Ответ = Неопределено) Экспорт
		
		// Получение объекта.
		ДокументОбъект = Документ; ДокументОригинал = Оригинал;
		
		// Тип документа.
		ТипДокумента = ТипЗнч(ДокументОбъект); МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// Проверка состояния.
		Если Не ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента("Товары", "Распечатан", МетаданныеДокумента) Тогда
			Возврат Истина;	
		КонецЕсли;
		Если Не ДокументПолучитьЗначениеНастройки(ТипДокумента, "ВыводитьВстречкуНаПечать") Тогда
			Возврат Истина;	
		КонецЕсли;
		
		// Подготовка таблиц.
		ТаблицаРелизации = ДокументОбъект.Товары.Выгрузить(Новый Массив, "ВидНоменклатуры,ДатаОкончанияПериода,ЕдиницаИзмерения,Количество,НаВынос,Номенклатура,НоменклатурнаяГруппа");
		ТаблицаВозврата = ТаблицаРелизации.Скопировать();
		
		// Выборка данных.
		ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить("Товары"); ТабличныеЧасти.Добавить("Услуги");
		
		// -- Реализация.
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
				
							
				СтрокаТаблицы = ТаблицаРелизации.Добавить();
				СтрокаТаблицы.ВидНоменклатуры = СтрокаТабличнойЧасти.ВидНоменклатуры;
				//СтрокаТаблицы.ДатаОкончанияПериода = СтрокаТабличнойЧасти.ДатаОкончанияПериода;
				СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
				СтрокаТаблицы.Количество = СтрокаТабличнойЧасти.Количество;
				//СтрокаТаблицы.НаВынос = СтрокаТабличнойЧасти.НаВынос;
				СтрокаТаблицы.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
				СтрокаТаблицы.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
				//СтрокаТаблицы.ПорядокПодачи = СтрокаТабличнойЧасти.ПорядокПодачи;
				
			КонецЦикла;
		КонецЦикла;
		ТаблицаРелизации.Сортировать("ПорядокПодачи,ДатаОкончанияПериода");
		
		//ПредОбъект =  ВерсионированиеОбъектов.ПолучитьПредыдущуюВерсию(Документ.Ссылка);
		//Если ПредОбъект <> Неопределено Тогда
		//	СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.ВстречкаПовторно, , ,  Документ.Комментарий );
		//	ВерсионированиеОбъектов.СоздатьЗаписьВРегистреАнализДействий(Документ.Ссылка, СтруктураДействий); 
		//КонецЕсли;
		
		// Печать.
		Возврат ПолучитьСерверFrontOffice().ПечатьВстречки(ДокументОбъект, ТаблицаРелизации, Истина, Истина, Ответ);
		
	КонецФункции // ПечатьВстречкиПовторно()
	
	// Функция печати пречека документа.
	//
	// Параметры:
	//	Документ - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.СписаниеТоваров. Распечатываемый документ;
	//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.СписаниеТоваров. Распечатываемый документ до изменения.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае если документ распечатан успешно;
	//  Ответ - Строка. Описание ошибки в случае неудачи.
	//
	Функция ПечатьПречека(Документ, Оригинал, Ответ = Неопределено) Экспорт
		
		// Получение объекта.
		ДокументОбъект = Документ; ДокументОригинал = Оригинал;
		
		Если ДокументОбъект.Распечатан И (Не ДокументОригинал.Распечатан) Тогда
			Если ДокументОбъект.Модуль = Перечисления.МодулиИПодсистемы.Ресторан Тогда
				ДокументОбъект.Печать("Пречек",,,,Истина);	
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции // ПечатьПречека()
	
	// Функция печати чеков ККМ документа.
	//
	// Параметры:
	//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
	//	Оригинал - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ до изменения.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае если документ распечатан успешно;
	//  Ответ - Строка. Описание ошибки в случае неудачи.
	//
	Функция ПечатьККМ(Документ, Оригинал, Ответ = Неопределено) Экспорт
		
		// Получение объекта.
		ДокументОбъект = Документ; ДокументОригинал = Оригинал;
		
		// Тип документа.
		ТипДокумента = ТипЗнч(ДокументОбъект); МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// Проверка состояния.
		//Если (Не ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Или (ДокументОбъект.Оплата = ДокументОригинал.Оплата) Тогда
		Если (Не ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Или (ДокументОбъект.Проведен = ДокументОригинал.Проведен) Тогда
			Возврат Истина;	
		КонецЕсли;
		
		// Определение состояния.	
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ТаблицаЧековККМРеализации") Тогда
			ТаблицаЧековККМРеализации = ДокументОбъект.ДополнительныеСвойства.ТаблицаЧековККМРеализации;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ТаблицаЧековККМВозвратов") Тогда
			ТаблицаЧековККМВозвратов = ДокументОбъект.ДополнительныеСвойства.ТаблицаЧековККМВозвратов;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		// Действие.
		// Если ЗначениеЗаполнено(ДокументОбъект.Оплата) Тогда	
		Если ДокументОбъект.Проведен Тогда
			
			// -- Реализация.
			СписокОрганизаций = Новый СписокЗначений;
			СписокКасс = Новый СписокЗначений;
			ТабличныеЧасти = Новый Массив; 
			ТабличныеЧасти.Добавить("Товары"); 
			ТабличныеЧасти.Добавить("Услуги");
			
			Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
					
					Если (Не СписокОрганизаций.НайтиПоЗначению(СтрокаТабличнойЧасти.Организация) = Неопределено) Тогда
						Продолжить;
					КонецЕсли;                                 
					
					//Заменяемый  // Игорь 09.11.2011 14:46:48
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.Заменяемый) Тогда
						СтрокаТабличнойЧасти.Номенклатура =  СтрокаТабличнойЧасти.Номенклатура.Заменяемый;
					КонецЕсли;   
					
					СписокОрганизаций.Добавить(СтрокаТабличнойЧасти.Организация);
					
					Результат = РаботаСТорговымОборудованием.ВернутьТЗсоСпискомКассОрганизации(СтрокаТабличнойЧасти.Организация,ПолучитьСерверТО().ПолучитьКомпьютерТО()); 
					Для Каждого СтрокаКассы Из Результат Цикл
						СписокКасс.Добавить(СтрокаКассы.КассаККМ);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;		
			
			// ---- Чеки ККМ.		
			Для Каждого ЗначениеСписка Из СписокКасс Цикл			
				ДокументЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
				ДокументЧекККМ.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
				ДокументЧекККМ.Заполнить(Новый Структура("Основание,КассаККМ", ДокументОбъект.Ссылка,ЗначениеСписка.Значение));
				Если Не ПолучитьСерверFrontOffice().ПечатьККМ(ДокументОбъект, ДокументЧекККМ, Ответ) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			// -- Возврат.
			//TODO
			//СписокОрганизаций = Новый СписокЗначений;
			//ТабличныеЧасти = Новый Массив; ТабличныеЧасти.Добавить("Товары"); ТабличныеЧасти.Добавить("Услуги");
			//
			//Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			//	Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧасть] Цикл
			//		
			//		Если (Не СписокОрганизаций.НайтиПоЗначению(СтрокаТабличнойЧасти.Организация) = Неопределено) Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		
			//		//Если (ТаблицаЧековККМВозвратов.Найти(СтрокаТабличнойЧасти.Организация, "Организация") = Неопределено) Тогда
			//		Если (ТаблицаЧековККМРеализации.Найти(СтрокаТабличнойЧасти.Организация, "Организация") = Неопределено) Тогда
			//			Ответ = "Невозможно записать документ, для организации «" + ПолучитьСерверFrontOffice().ПолучитьПредставление(СтрокаТабличнойЧасти.Организация) + "» не наден соответсвующий документ «" + Метаданные.Документы.ЧекККМ.Синоним + "» на возврат!";
			//			Возврат Ложь;
			//		КонецЕсли;
			//		
			//		СписокОрганизаций.Добавить(СтрокаТабличнойЧасти.Организация);
			//		
			//	КонецЦикла;
			//КонецЦикла;
			////Если (Не СписокОрганизаций.Количество() = ТаблицаЧековККМВозвратов.Количество()) Тогда
			//Если (Не СписокОрганизаций.Количество() = ТаблицаЧековККМРеализации.Количество()) Тогда
			//	Ответ = "Невозможно записать документ, количество актуальный документов «" + Метаданные.Документы.ЧекККМ.Синоним + "» на возврат, не соответсвует требуемому!";
			//	Возврат Ложь;
			//КонецЕсли;
			
			СписокКассККМ = Новый СписокЗначений;
			Для Каждого СтрокаТаблицы Из ТаблицаЧековККМРеализации Цикл
				СписокКассККМ.Добавить(СтрокаТаблицы.КассаККМ);
			КонецЦикла;
			
			Если  ПроверкаОборудованияДляПечатиНаККМ(, СписокКассККМ, ДокументОбъект.ОтражатьВНалоговомУчете) Тогда
				// ---- Чеки ККМ.
				Для Каждого СтрокаТаблицы Из ТаблицаЧековККМРеализации Цикл				
					ДокументЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
					ДокументЧекККМ.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
					ДокументЧекККМ.Заполнить(СтрокаТаблицы.Ссылка);
					//Ковтун А. 18/05/2010 Если чек по которому возвращаем не был пробит на ККМ,
					//то и мы и возврат не пробиваем
					Если Не ПолучитьСерверFrontOffice().ПечатьККМ(ДокументОбъект, ДокументЧекККМ, Ответ, СтрокаТаблицы.Ссылка.ЧекПробитНаККМ) Тогда
						Возврат Ложь;
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Операция успешно завершена.
		Возврат Истина;	
		
	КонецФункции // ПечатьККМ()
	
	Функция ДокументПолучитьЗначениеНастройки(Документ, ТребуемаяНастройка, НастройкаНеНайдена = Ложь) Экспорт
		
		// Нормализация.
		Если (ТипЗнч(Документ) = мТипТипа) Тогда
			ТипДокумента = Документ;
		Иначе
			ТипДокумента = ТипЗнч(Документ.Ссылка);
		КонецЕсли;
		
		// Сопоставление.
		Если (ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Или (ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")) Тогда
			Попытка
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "Заказов"];	
			Исключение
				Попытка
					Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "Заказа"];	
				Исключение
					Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка];	
				КонецПопытки;
			КонецПопытки;
		ИначеЕсли (ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров")) Или (ТипДокумента = Тип("ДокументОбъект.СписаниеТоваров")) Тогда
			Попытка
				Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "Списаний"];	
			Исключение
				Попытка
					Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка + "Списания"];	
				Исключение
					Настройка = ПланыВидовХарактеристик.НастройкиПользователей["FrontOffice" + ТребуемаяНастройка];	
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		
		// Сопоставление не выполнено.
		Если (Настройка = Неопределено) Тогда
			НастройкаНеНайдена = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		// Результат.
		НастройкаНеНайдена = Ложь;
		ЗначениеВозврата = УправлениеПользователями.ПолучитьЗначениеНастройки(Настройка);		
		Возврат ЗначениеВозврата;
		
	КонецФункции
	
	Функция ДокументПолучитьЗначениеПрава(Документ, ТребуемыеПолномочия, ПолномочиеНеНайдено = Ложь) Экспорт
		
		// Нормализация.
		Если (ТипЗнч(Документ) = мТипТипа) Тогда
			ТипДокумента = Документ;
		Иначе
			ТипДокумента = ТипЗнч(Документ.Ссылка);
		КонецЕсли;
		
		// Сопоставление.
		Если (ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Или (ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг"))  Тогда
			Попытка
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "Заказов"];	
			Исключение
				Попытка
					Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "Заказа"];	
				Исключение
					Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия];	
				КонецПопытки;
			КонецПопытки;
		ИначеЕсли (ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров")) Или (ТипДокумента = Тип("ДокументОбъект.СписаниеТоваров")) Тогда
			Попытка
				Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "Списаний"];	
			Исключение
				Попытка
					Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия + "Списания"];	
				Исключение
					Полномочие = ПланыВидовХарактеристик.ПраваПользователей["FrontOffice" + ТребуемыеПолномочия];	
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		
		// Сопоставление не выполнено.
		Если (Полномочие = Неопределено) Тогда
			ПолномочиеНеНайдено = Истина; 
			Возврат Неопределено;
		КонецЕсли;
		
		// Результат.
		ПолномочиеНеНайдено = Ложь;
		Возврат УправлениеПользователями.ПолучитьЗначениеПрава(Полномочие);
		
	КонецФункции
	
	Функция ДокументДоступностьДействия(Документ, ТребуемыеПолномочия) Экспорт
		
		// Нормализация.
		Если (ТипЗнч(ТребуемыеПолномочия) = мТипСтроки) Тогда
			ЗначениеПрава = ДокументПолучитьЗначениеПрава(Документ, ТребуемыеПолномочия); 
		Иначе
			ЗначениеПрава = УправлениеПользователями.ПолучитьЗначениеПрава(ТребуемыеПолномочия);
		КонецЕсли;
		
		Если (Документ = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		//Изменение состава
		
		Если (ТипЗнч(ЗначениеПрава) = Тип("ПеречислениеСсылка.ПраваДоступаПользователей")) Тогда
			
			Если ЗначениеПрава = Перечисления.ПраваДоступаПользователей.Привилегированные Тогда
				Возврат Истина;
			ИначеЕсли  ЗначениеПрава = Перечисления.ПраваДоступаПользователей.Разрешить  Тогда 	
				Возврат Документ.Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
			Иначе 
				Возврат Ложь;
			КонецЕсли;
		Иначе	
			
			Возврат ЗначениеПрава;
			
		КонецЕсли;
		
	КонецФункции
	
	Функция ДокументДоступность(Документ,  ТолькоПросмотр = Неопределено, Форма = Неопределено ) Экспорт
		
		// Доступность.
		//Если (Документ = Неопределено) Или Документ.Ссылка.Пустая() Тогда
		Если (Документ = Неопределено) Тогда
			ТолькоПросмотр = Ложь;
			Возврат Ложь;
		КонецЕсли;
		ТолькоПросмотр = Не Документ.Ссылка.Пустая();
		
		Редактирование = ДокументДоступностьДействия(Документ, "Изменение"); 
		ТолькоПросмотр = (Не Редактирование) И ДокументДоступностьДействия(Документ, "Просмотр");
		
		
		Если Редактирование Тогда
			ТолькоПросмотр = не Редактирование;
			Возврат  Редактирование;			
		Иначе 		
			Возврат (Не ТолькоПросмотр = Ложь);
		КонецЕсли;
		
	КонецФункции // ДокументДоступность()
	
	// Функция проверки корректности заполнения документа.
	//
	// Параметры:
	//	ДокументОснование - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Документ который требуется проверить.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае если документ прошел проверку.
	//
	Функция ДокументПроверить(Документ) Экспорт
		
		// TODO: Проверка корректности документа.
		
		Возврат Истина;
		
	КонецФункции	
		
	// Функция открывает и блокирует требуемый документ (интерфейсная).
	//
	// Параметры:
	//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Документ который требуется открыть, если не указан буедт создан новый документ переданного типа.
	//	ДокументОснование - ПеречислениеСсылка.МодулиИПодсистемы, ДокументСсылка.РеализацияТоваровУслуг, СправочникСсылка.ИнформационныеКарты. Основание создания документа, в случае если будет создаваться новый документ;
	//	ТаблицаПереноса - ТаблицаЗначений. Список переносимых позицый и их количество, в случае если будет создаваться новый документ.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае успешного выполнения операции.
	//
	Функция ДокументОткрыть(Документ, ДокументОснование = Неопределено, ТаблицаПереноса = Неопределено) Экспорт
		
		Перем ТолькоПросмотр;
				
		// Права доступа.
		Если (Не ДокументДоступность(Документ, ТолькоПросмотр)) И (Не ТолькоПросмотр) Тогда
			FrontOffice.ВывестиОшибку(НСтр("ru='Недостаточно прав доступа для просмотра данного документа!';uk='Недостатньо прав для перегляду документа!'") );
			Возврат Ложь;
		КонецЕсли;
		
		// Проверка.
		Если (Метаданные.НайтиПоТипу(ТипЗнч(Документ)) = Неопределено) Или (Документ = Документ.Ссылка) Тогда
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документ;
		КонецЕсли;
		
				
		// Получение и блокирование объекта.
		ПроверкаОткрытия =  ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект, ТолькоПросмотр, Истина);			
		
		Если ПроверкаОткрытия Тогда
			//	ВерсионированиеОбъектов.АнализДействиеЗаказДоЗаказ(ДокументОбъект, , Перечисления.ДействиеНадЗаказами.Открыт);
			//Костенюк Александр-Старт 13.04.2012
			// АнализДействий
			Если НЕ ДокументОбъект.ЭтоНовый() Тогда
				РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Открыт, ДокументОбъект.Ссылка);
			КонецЕсли; 
			//Костенюк Александр-Финиш 13.04.2012
		КонецЕсли;
		
		ФормаОбъекта = ЭтотОбъект.ПолучитьФорму("Форма");
		
		// Установка значений.
		ФормаОбъекта.ДокументОбъект = ДокументОбъект;
		ФормаОбъекта.ТолькоПросмотр = ТолькоПросмотр;
		
		// Открытие формы.
		ПолучитьСерверFrontOffice().__ОткрытьФорму(ФормаОбъекта);
		
		Возврат Истина;
		
	КонецФункции // ДокументОткрыть()
	
	// Функция создает требуемый документ переданного типа (интерфейсная).
	//
	// Параметры:
	//	Документ - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.СписаниеТоваров. Тип документа который требуется создать;
	//	ДокументОснование - ПеречислениеСсылка.МодулиИПодсистемы, ДокументСсылка.РеализацияТоваровУслуг, СправочникСсылка.ИнформационныеКарты. Основание создания документа;
	//	ТаблицаПереноса - ТаблицаЗначений. Список переносимых позицый и их количество.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае успешного выполнения операции.
	//
	Функция ДокументСоздать(Документ, ДокументОснование, ТаблицаПереноса = Неопределено) Экспорт
		
		Перем ТолькоПросмотр;
		
		глПользователь = глЗначениеПеременной("глТекущийПользователь");
		// Мирошниченоко Игорь 03.01.2012 15:01:15 
		//Чтобы не на основании
		Если ДокументОснование <> Неопределено Тогда
			ДокументОснование = Неопределено;
		КонецЕсли;	
		
		// Права доступа.
		Если Не ДокументПолучитьЗначениеПрава(Документ, "Создание") Тогда
			FrontOffice.НедостаточноПрав(НСтр("ru='для создания нового документа';uk='для створення нового документа'") );
			Возврат Ложь;
		КонецЕсли;
		
		// Определение типов объектов.
		ТипДокумента = ТипЗнч(Документ); Если (Не ДокументОснование = Неопределено) Тогда ТипОснования = ТипЗнч(ДокументОснование); КонецЕсли;
		МетаданныеДокумента = Документ.Метаданные();
		
		МетаданныеОснования = Неопределено;
		Если (Не ДокументОснование = Неопределено) Тогда
			Попытка
				МетаданныеОснования = ДокументОснование.Метаданные();
			Исключение
				//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли;
		
		Если МетаданныеОснования <> Неопределено Тогда
			ОснованиеДокумент = Метаданные.Документы.Содержит(МетаданныеОснования);
		КонецЕсли;
				
		// Ввод параметров.
		
		// -- Модуль.
		Если МетаданныеОснования <> Неопределено Тогда
			Если Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
				Модуль = ДокументОснование.Модуль;
			КонецЕсли;		
		КонецЕсли;
						
		// -- Контрагент.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
				Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.Контрагент)) Тогда
					Контрагент = ДокументОснование.Контрагент;
				КонецЕсли;
			КонецЕсли;
		
		// -- Категория контрагента.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКонтрагента", МетаданныеДокумента) Тогда
			Если ОснованиеДокумент И ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКлиентов", МетаданныеОснования) И (Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ДокументОснование.КатегорияКлиентов)) Тогда
				КатегорияКонтрагента = ДокументОснование.КатегорияКонтрагента;
			Иначе
				КатегорияКонтрагента = ДокументПолучитьЗначениеНастройки(Документ, "КатегорияКонтрагентаПоУмолчанию");
			КонецЕсли;
			Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Тогда
				Если ДокументПолучитьЗначениеНастройки(Документ, "ВводКатегорииКонтрагента") Тогда
					Если Не ВыборКатегорииКонтрагента(КатегорияКонтрагента) Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
		//// -- Категория документа.
		//Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеДокумента) Тогда
		//	//КатегорияДокумента = ДокументПолучитьЗначениеНастройки(Документ, "КатегорияДокументаПоУмолчанию");		
		//	//Если ДокументПолучитьЗначениеНастройки(Документ, "ВводКатегорииДокумента") Тогда
		//	//	Если Не ВыборКатегорииДокумента(КатегорияДокумента) Тогда
		//	//		Возврат Ложь;
		//	//	КонецЕсли;
		//	//КонецЕсли;
		//КонецЕсли;
		
		// -- Ответственный.
		// TODO: Перенести в заполнение.
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глПользователь, "ОсновнойОтветственный");
		Если Ответственный.Пустая() Тогда
			Ответственный = глПользователь;
		КонецЕсли;
		// -- Ресторан.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеДокумента) Тогда
			Ресторан = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойРесторан);
			Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Тогда
				Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Ресторан) Тогда
					FrontOffice.ОперацияНеВыполнена("Не указан ресторан документа.");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// -- Сотрудник.
		// TODO: Перенести в заполнение.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеДокумента) Тогда
				Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глПользователь);
		КонецЕсли;
				
		// Создание объекта и модификация основания.
		Попытка
			// -- Документ.	
			// ---- Создание.
			ДокументОбъект = Документ;
			// Формат Эксперт - SD  31.08.2011 - перенос ядра 
			//Если Не ПолучитьСерверFrontOffice().ДокументОткрыть(ДокументОбъект) Тогда
			Если Не РаботаСДиалогами.ДокументОткрыть(ДокументОбъект, Неопределено) Тогда
				//ДокументЗакрыть(Неопределено); // ОтменитьТранзакцию()
				Возврат Ложь;
			КонецЕсли;
			
			// ---- Шапка.
			ДокументОбъект.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
			ДокументОбъект.Модуль = Модуль;
			ДокументОбъект.Ответственный = Ответственный; // TODO: Перенести в заполнение.
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", МетаданныеДокумента) Тогда
				ДокументОбъект.Ресторан = Ресторан;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сотрудник", МетаданныеДокумента) Тогда
				ДокументОбъект.Сотрудник = Сотрудник;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
				ДокументОбъект.Контрагент = Контрагент;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияКонтрагена", МетаданныеДокумента) Тогда
				ДокументОбъект.КатегорияКонтрагена = КатегорияКонтрагента;
			КонецЕсли;
					
			//Если ОбщегоНазначения.ЕстьРеквизитДокумента("КатегорияДокумента", МетаданныеДокумента) Тогда
			//	ДокументОбъект.КатегорияДокумента = КатегорияДокумента;
			//КонецЕсли;
			
			// ---- Шапка + МнЧ.
			Если (Не ДокументОснование = Неопределено) И Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
				ДокументОбъект.Заполнить(ДокументОснование, ТаблицаПереноса);
			Иначе
				ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, глПользователь);
			КонецЕсли;
			
			Исключение
			// Формат Эксперт - SD  31.08.2011 - перенос ядра 
			//ДокументЗакрыть(Неопределено); // ОтменитьТранзакцию()
			РаботаСДиалогами.ДокументЗакрыть(ДокументОбъект, Неопределено);
			FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно создать документ.';uk='Неможливо створити документ'")  + ОписаниеОшибки() + ".");
			Возврат Ложь;
		КонецПопытки;                                                 
			
		// Отрктие объекта.
		Если (Не ДокументОснование = Неопределено) И Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат ДокументОткрыть(ДокументОбъект);
		
	КонецФункции // ДокументСоздать()	
	
	Функция ВводКомментария(Значение = Неопределено) Экспорт	
		// Ввод.
		Возврат FrontOffice.ВводСтроки(Значение, НСтр("ru='Введите комментарий';uk='Введіть коментар'") , Метаданные.РегистрыСведений.КонтактнаяИнформацияРеализацииТоваровУслуг.Ресурсы.Комментарий.Тип.КвалификаторыСтроки.Длина);
		
	КонецФункции // ВводКомментария()
	
	// Функция cчитывает данные из базы данных.
	//
	// Параметры:
	//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае успешного выполнения операции.
	//
	Функция ДокументПрочитать(Документ) Экспорт
		
		// Выборка данных.
		Возврат ПолучитьСерверFrontOffice().ДокументПрочитать(Документ);
		
	КонецФункции // ДокументПрочитать()
	
	Функция ДокументЗаписать(Документ, РежимЗаписи = Неопределено) Экспорт
		
		Если Документ=Неопределено Тогда
			Возврат Истина;
			//Возврат ПолучитьСерверFrontOffice().ДокументЗаписать(Неопределено);
		КонецЕсли;
		
		Если НЕ ПодготовитьДокументКЗаписи(Документ,РежимЗаписи) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			Документ.Записать(РежимЗаписи);
		Исключение
			Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
		Возврат ОтложеннаяПечатьРеализации(Документ ,ложь ,ложь ,);
		
	КонецФункции
	
	Функция ДокументПеренести(Документ, ДокументОснование = Неопределено, ТаблицаПереноса = Неопределено) Экспорт
		
		Возврат Ложь;
		
	КонецФункции // ДокументПеренести()	
	
	// Функция закрывает без записи и разблокирует требуемый документ.
	//
	// Параметры:
	//	Документ - ДокументОбъект. Документ который требуется закрыть.
	//
	// Возвращаемое значение:
	//	Булево. Истина в случае успешного выполнения операции.
	//
	Функция ДокументЗакрыть(Документ) Экспорт
		// Формат Эксперт - SD  31.08.2011 - перенос ядра 
		// Закрытие объекта.
		//Возврат ПолучитьСерверFrontOffice().ДокументЗакрыть(Документ);  
		//Если ЗаполнитьДополнительныеСвойства(Документ) Тогда
		//	ТаблицаДействиеНадЗаказами = Неопределено;
		//	Документ.ДополнительныеСвойства.Свойство("ДействиеНадЗаказами", ТаблицаДействиеНадЗаказами);
		//	УправлениеРеализациямиТоваровУслуг.ЗаполнитьСтруктуруАнализаДействий(ТаблицаДействиеНадЗаказами, Перечисления.ДействиеНадЗаказами.Закрыт , ТекущаяДата(), глЗначениеПеременной("глТекущийПользователь").Сотрудник);					
		//КонецЕсли;
		
		
		// Чистяков Павел 01.03.2012 15:15:13 
		// Закоментил так как анализ действий регистрирует только ссылки РЕАЛИЗАЦИЙ, а это списание
		//Анализ Действий
		// Игорь 24.10.2011 17:15:04
		//ВерсионированиеОбъектов.АнализДействиеЗаказДоЗаказ(Документ, , Перечисления.ДействиеНадЗаказами.Закрыт);
		
		//Костенюк Александр-Старт 13.04.2012
		// АнализДействий
		Если Документ <> Неопределено
			И Документ <> NULL Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Закрыт, Документ.Ссылка);
		КонецЕсли; 
		//Костенюк Александр-Финиш 13.04.2012
		
		Возврат РаботаСДиалогами.ДокументЗакрыть(Документ, Неопределено);	
		
	КонецФункции // ДокументЗакрыть()
	
	// Чистяков Павел 28.07.2011 16:48:46 
	Процедура ПоискНоменклатурыВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:48:48 
	Процедура ПоискНоменклатурыПриИзмененииДанных(Элемент) Экспорт
		
		ТабличноеПоле = Элемент; 
		ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:50:03 
	Процедура ПоискНоменклатурыПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		Данные = Элемент.Данные();
		Данные.Очистить();
		
		Если Не ПустаяСтрока(Значение) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 25
			|	Меню.ЭтоГруппа КАК ЭтоГруппа,
			|	Меню.Номенклатура КАК Номенклатура,
			|	НоменклатураМеню.Код КАК Код,
			|	ПРЕДСТАВЛЕНИЕ(Меню.Номенклатура) КАК Наименование,
			|	НоменклатураМеню.Артикул КАК Артикул,
			|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	НоменклатураМеню.НоменклатурнаяГруппа,
			|	НоменклатураМеню.Организация,
			|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
			|	НоменклатураМеню.СтавкаНДС,
			|	НоменклатураМеню.Услуга,
			|	НоменклатураМеню.Цена,
			|	0 КАК ПорядокПодачи
			|ИЗ
			|	Справочник.Меню КАК Меню
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
			|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
			|ГДЕ
			|	ВЫБОР
			|			КОГДА Меню.ЭтоГруппа
			//|				ТОГДА Меню.Номенклатура ПОДОБНО &Значение
			//Костенюк Александр-Старт 29.03.2013
			|				ТОГДА Меню.Наименование ПОДОБНО &Значение
			//Костенюк Александр-Финиш 29.03.2013
			|			ИНАЧЕ Меню.Номенклатура.Наименование ПОДОБНО &Значение
			|		КОНЕЦ
			|	И Меню.Актуальность");
			Запрос.УстановитьПараметр("Значение", "%" + УправлениеКонтактнойИнформацией.ПолучитьСтрокуДляПоискаПоПодобию(Значение) + "%");
			Выборка = Запрос.Выполнить().Выбрать();
						
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицы = Данные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
		Выборка = Неопределено;
		
		Элемент.ОбновитьСтроки();
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:50:04 
	Процедура ПоискНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:48:46 
	Процедура ПоискНоменклатурыПоКодуВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:48:48 
	Процедура ПоискНоменклатурыПоКодуПриИзмененииДанных(Элемент) Экспорт
		
		ТабличноеПоле = Элемент; 
		ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:50:03 
	Процедура ПоискНоменклатурыПоКодуПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		Данные = Элемент.Данные();
		Данные.Очистить();
		
		Если ЗначениеЗаполнено(Значение) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
			|	НоменклатураМеню.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
			|	НоменклатураМеню.Номенклатура КАК Номенклатура,
			|	НоменклатураМеню.Наименование КАК Наименование,
			|	НоменклатураМеню.Артикул,
			|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	НоменклатураМеню.Код,
			|	НоменклатураМеню.НоменклатурнаяГруппа,
			|	НоменклатураМеню.Организация,
			|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
			|	НоменклатураМеню.СтавкаНДС,
			|	НоменклатураМеню.Услуга,
			|	НоменклатураМеню.Цена,
			|	0 КАК ПорядокПодачи
			|ИЗ
			|	Справочник.Меню КАК Меню
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
			|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
			|ГДЕ
			|	НоменклатураМеню.Код ПОДОБНО &Значение
			|	И Меню.Актуальность");
			Запрос.УстановитьПараметр("Значение", "%" + Формат(Значение,"ЧН=0; ЧГ=") + "%");
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицы = Данные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
		Выборка = Неопределено;
		
		Элемент.ОбновитьСтроки();
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:50:04 
	Процедура ПоискНоменклатурыПоКодуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:48:46 
	Процедура ПоискНоменклатурыПоАртикулуВыбор(Элемент, Значение, Колонка, СтандартнаяОбработка) Экспорт
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:48:48 
	Процедура ПоискНоменклатурыПоАртикулуПриИзмененииДанных(Элемент) Экспорт
		
		ТабличноеПоле = Элемент; 
		ПолучитьСерверFrontOffice().ТабличноеПолеПоместить(ТабличноеПоле);
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:50:03 
	Процедура ПоискНоменклатурыПоАртикулуПриПоискеЗначения(Элемент, Значение, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		Данные = Элемент.Данные();
		Данные.Очистить();
		
		Если ЗначениеЗаполнено(Значение) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 25
			|	НоменклатураМеню.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
			|	НоменклатураМеню.Номенклатура КАК Номенклатура,
			|	НоменклатураМеню.Наименование КАК Наименование,
			|	НоменклатураМеню.Артикул,
			|	НоменклатураМеню.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	НоменклатураМеню.Код,
			|	НоменклатураМеню.НоменклатурнаяГруппа,
			|	НоменклатураМеню.Организация,
			|	НоменклатураМеню.Себестоимость КАК ПлановаяСебестоимость,
			|	НоменклатураМеню.СтавкаНДС,
			|	НоменклатураМеню.Услуга,
			|	НоменклатураМеню.Цена,
			|	0 КАК ПорядокПодачи
			|ИЗ
			|	Справочник.Меню КАК Меню
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню
			|		ПО Меню.Номенклатура = НоменклатураМеню.Номенклатура
			|ГДЕ
			|	Меню.Актуальность
			|	И НоменклатураМеню.Артикул ПОДОБНО &Значение");
			Запрос.УстановитьПараметр("Значение", "%" + Формат(Значение,"ЧН=0; ЧГ=") + "%");
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицы = Данные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
		Выборка = Неопределено;
		
		Элемент.ОбновитьСтроки();
		
	КонецПроцедуры
	
	// Чистяков Павел 28.07.2011 16:50:04 
	Процедура ПоискНоменклатурыПоАртикулуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		ОформлениеСтроки.Ячейки("Код").УстановитьКартинку(?(ДанныеСтроки.ЭтоГруппа,БиблиотекаКартинок.ГруппаСправочника,БиблиотекаКартинок.СправочникОбъект));
		
	КонецПроцедуры
	
	//Игорь
	//////////////////////////////////////Дополнительно ////////////////////////////////////////
	//
	Процедура СделатьЗаписьРегистрСведенийЧерныйБелыйСписокНоменклатуры(ИмяРегистра, Номенклатура, Ресторан, Актуальность = Ложь) Экспорт
		
		Если  ИмяРегистра  = "ЧерныйСписокНоменклатуры" тогда                                   
			ИмяКонст = "ВремяЖизниЭлементовЧерногоСписка";
		ИначеЕсли  ИмяРегистра = "БелыйСписокНоменклатуры" тогда
			ИмяКонст = "ВремяЖизниЭлементовБелогоСписка";	
		КонецЕсли;
		
		ТаблицаФормы = Новый ТаблицаЗначений; 	
		УправлениеНоменклатуройСервер.ЗаполнитьПараметрыЗаписиДляЧорноБелогоСписка(ложь, Номенклатура, ИмяРегистра, ИмяКонст, ТаблицаФормы );
		
		Для каждого СтрТаблицы Из ТаблицаФормы Цикл
			Если СтрТаблицы.Ресторан <> Ресторан Тогда
				ТаблицаФормы.Удалить(СтрТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Если  Актуальность Тогда 
			ТаблицаФормы[0].Актуальность = не Актуальность;
		Иначе 
			ТаблицаФормы[0].Актуальность = ?(ТаблицаФормы[0].Актуальность, ложь, Истина); 
		КонецЕсли;
		РаботаСКДДСписокСервер.СоздатьЗаписиВРегистреСведенийПострочно(ИмяРегистра, ТаблицаФормы ,,,Истина, Ложь);
		
		ТаблицаФормы = Неопределено;
		
	КонецПроцедуры
	
	Процедура FrontOfficeЗаполнитьТабличноеПолеМодификаторовУсловий(ИмяСправочника, Номенклатура, ТабличноеПоле,  Родитель= Неопределено)  Экспорт 
		
		Данные = ТабличноеПоле.Данные();
		
		Если Данные = Неопределено Тогда	
			мВыводитьКартинкиПутиМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиПутиМеню);
			мВыводитьКартинкиГруппМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиГруппМеню);
			мВыводитьКартинкиЭлементовМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьКартинкиЭлементовМеню);
			мВыводитьЦеныМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ВыводитьЦеныМеню);
			мКомпактноеПредставлениеМеню = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.КомпактноеПредставлениеМеню);
			мРазмерЭлементовМеню = УправлениеПользователями.ПолучитьНастрокуРазмера(УправлениеПользователями.ПолучитьЗначениеНастройкиДляТекущегоПользователя(ПланыВидовХарактеристик.НастройкиПользователей.РазмерЭлементовМеню));
			//
			Данные = Новый ТаблицаЗначений;
			Данные.Колонки.Добавить("Меню", Новый ОписаниеТипов("Массив"), "Меню");		
			ТабличноеПоле.Данные(Данные);
			ТабличноеПоле.СоздатьКолонки("Меню");
			ТабличноеПоле.Колонки.Получить("Меню").ОтображатьВложенныеДанные = Истина;
			ТабличноеПоле.Колонки.Получить("Меню").Ширина = Макс(мРазмерЭлементовМеню.Ширина, 160);
			ТабличноеПоле.Колонки.Получить("Меню").ШиринаЭлементаВложенныхДанных = ТабличноеПоле.Колонки.Получить("Меню").Ширина;
			ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(мРазмерЭлементовМеню.Высота, 40);
			ТабличноеПоле.Шапка = Ложь;
		Иначе
			Данные.Очистить();		
		КонецЕсли;
		
		// Выборка данных.
		Если (ТабличноеПоле.Тег = Неопределено) Тогда
			
			Дерево = УправлениеНоменклатуройСервер.FrontOfficeПолучитьДеревоОтображенияМеню(ИмяСправочника, Номенклатура);	
			ТабличноеПоле.Тег = Новый Структура();
			ТабличноеПоле.Тег.Вставить("Данные", Дерево); 		
			ТабличноеПоле.Тег.Вставить("ПустаяЯчейка", "Пусто");
			ТабличноеПоле.Тег.Вставить("Группы", Новый Массив);
			ТабличноеПоле.Тег.Вставить("Элементы", Новый Массив);
			ТабличноеПоле.Тег.Вставить("Путь", Новый Массив);
			ТабличноеПоле.Тег.Вставить("ТаблицаЦвета", Неопределено);
			
		КонецЕсли;
		
		ДеревоМеню = ТабличноеПоле.Тег.Данные;
		ТабличноеПоле.Тег.Элементы = Новый Массив;
		ТабличноеПоле.Тег.Группы = Новый Массив; 
		ТабличноеПоле.Тег.Путь = Новый Массив; 
		//
		Если (ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений")) Тогда
			РодительМеню = Родитель;
		Иначе                  
			РодительМеню = ДеревоМеню.Строки.Найти(Родитель, "Ссылка", Истина);
		КонецЕсли;
		//
		// Перенос данных.	
		// -- Родители.
		Если (Не РодительМеню = Неопределено) Тогда
			ДеревоМеню = РодительМеню;
			
			СтрокаДанных = Данные.Добавить();
			СтрокаДанных.Меню = Новый Массив;
			
			Пока (Не РодительМеню = Неопределено) Цикл
				ТабличноеПоле.Тег.Путь.Добавить(РодительМеню);
				СтрокаДанных.Меню.Вставить(0, РодительМеню);
				РодительМеню = РодительМеню.Родитель;	
			КонецЦикла;
		КонецЕсли;
		
		// -- Группы.
		//Если Не мКомпактноеПредставлениеМеню Тогда
		//	СтрокаДанных = Неопределено;
		//КонецЕсли;
		
		Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
			
			Если СтрокаДереваМеню.Строки.Количество()>0 тогда
				Если СтрокаДереваМеню.ССылка.ЭтоГруппа Тогда
					Если (СтрокаДанных = Неопределено) Тогда
						СтрокаДанных = Данные.Добавить();
						СтрокаДанных.Меню = Новый Массив;
					КонецЕсли;
					
					ТабличноеПоле.Тег.Группы.Добавить(СтрокаДереваМеню);
					СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// -- Строки.
		//Если Не мКомпактноеПредставлениеМеню Тогда
		//	СтрокаДанных = Неопределено;
		//КонецЕсли;
		
		Для Каждого СтрокаДереваМеню Из ДеревоМеню.Строки Цикл
			
			Если Не СтрокаДереваМеню.Ссылка.ЭтоГруппа Тогда
				Если (СтрокаДанных = Неопределено) Тогда
					СтрокаДанных = Данные.Добавить();
					СтрокаДанных.Меню = Новый Массив;
				КонецЕсли;
				
				ТабличноеПоле.Тег.Элементы.Добавить(СтрокаДереваМеню);
				СтрокаДанных.Меню.Добавить(СтрокаДереваМеню);
				
			КонецЕсли;	
		КонецЦикла;
		
		// Обновление.
		ТабличноеПоле.ОбновитьСтроки();
		
	КонецПроцедуры
	
	Процедура ПереносПоискВерхнегоРодителя(ТаблицаИсточник, СтрокаПоиска, Ключ = "Идентификатор", ВозвратСтрока = Неопределено)  Экспорт
		
		Если ВозвратСтрока = Неопределено Тогда
			НайденаСтр =  ТаблицаИсточник.Найти(СтрокаПоиска.Владелец, Ключ);
			Если НайденаСтр <> Неопределено Тогда
				ПереносПоискВерхнегоРодителя(ТаблицаИсточник, НайденаСтр, Ключ, ВозвратСтрока);
			Иначе
				ВозвратСтрока = СтрокаПоиска;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
			
	// Чистяков Павел 02.09.2011 12:38:15 
	Функция ПодготовитьДокументКЗаписи(ОбъектДляЗаписи, РежимЗаписи = Неопределено) Экспорт
		
		МетаданныеДокумента = ОбъектДляЗаписи.Метаданные();
		ОписаниеОшибки		= "";
		
		Попытка
			
			ТекущаяДата = ТекущаяДата();
			
			Если ОбъектДляЗаписи.ЭтоНовый() Тогда
				ДокументОригинал = ОбъектДляЗаписи.Ссылка;
				ОбъектДляЗаписи.ДополнительныеСвойства.Вставить("Оригинал",ОбъектДляЗаписи.Ссылка);
			Иначе
				ДокументОригинал = ОбъектДляЗаписи.Ссылка.ПолучитьОбъект();
				ОбъектДляЗаписи.ДополнительныеСвойства.Вставить("Оригинал",ДокументОригинал);
			КонецЕсли;		
			
			Если ОбъектДляЗаписи.ПометкаУдаления Тогда
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			Иначе
				Если (РежимЗаписи = Неопределено) Тогда
					РежимЗаписи = РежимЗаписиДокумента.Запись;	
				КонецЕсли;
			КонецЕсли;
			
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Оплата", МетаданныеДокумента) Тогда
				Если (РежимЗаписи = РежимЗаписиДокумента.Проведение)
					Или (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
					ОбъектДляЗаписи.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
				КонецЕсли;
			КонецЕсли;
			
			//Если (Не ПроверкаВстречки(ОбъектДляЗаписи, ДокументОригинал)) Или
			//	(Не ПроверкаПречека(ОбъектДляЗаписи, ДокументОригинал)) Или
			//	(Не ПроверкаККМ(ОбъектДляЗаписи, ДокументОригинал, РежимЗаписи)) Тогда
			//	Возврат Ложь;
			//КонецЕсли;
			
			Возврат Истина;
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			
			Попытка
				Если РежимЗаписи<>РежимЗаписиДокумента.Запись Тогда
					Если ОбъектДляЗаписи.Проведен Тогда
						ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
					Иначе
						ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);	
					КонецЕсли;
				КонецЕсли;
			Исключение
				____Сообщение(ОписаниеОшибки());
			КонецПопытки;
			
		КонецПопытки;
		
		Если Не ОбъектДляЗаписи.ЭтоНовый() Тогда
			ОбъектДляЗаписи.Номер		= ДокументОригинал.Номер;
			ОбъектДляЗаписи.Дата		= ДокументОригинал.Дата;
		КонецЕсли;
		
		ОбъектДляЗаписи.ПометкаУдаления = ДокументОригинал.ПометкаУдаления;
		ОбъектДляЗаписи.Проведен		= ДокументОригинал.Проведен;
		ОбъектДляЗаписи.Модуль			= ДокументОригинал.Модуль;
		ОбъектДляЗаписи.Распечатан		= ДокументОригинал.Распечатан;
		ОбъектДляЗаписи.Сотрудник		= ДокументОригинал.Сотрудник;
		//ОбъектДляЗаписи.Стол			= ДокументОригинал.Стол;
		
		// Из-за каких-то внутренних ошибок 1С, полсе открытия окна процесса печати, активизированной может окозаться не текущая форма.
		ПолучитьСерверFrontOffice().АктивизироватьФорму();
		
		// Предупреждение.
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = НСтр("ru=' Причина неопределенна';uk=' Причину помилки не визначено'") ;
		КонецЕсли;
		FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію'")  + ОписаниеОшибки + ".");
		
		Возврат Ложь;
		
	КонецФункции
	
	// Чистяков Павел 02.09.2011 12:38:15 
	Функция ОтложеннаяПечатьРеализации(ОбъектДляЗаписи, ПечататьВстречку=Истина, ПечататьККМ=Истина, ПечататьПречек=Истина) Экспорт
		
		ОписаниеОшибки		= "";
		МетаданныеДокумента = ОбъектДляЗаписи.Метаданные();
		ДокументОригинал	= ОбъектДляЗаписи.ДополнительныеСвойства.Оригинал;
		Ответ				= Неопределено;
		
		Попытка
			
			Если ПечататьВстречку Тогда
				ОбъектДляЗаписи.Печать("Встречка",,,,Истина);	
			КонецЕсли;
			
			Если ТипЗнч(ОбъектДляЗаписи)= Тип("ДокументОбъект.СписаниеТоваров") Тогда
				Если ПечататьПречек и ОбъектДляЗаписи.Распечатан Тогда		
					ОбъектДляЗаписи.Печать("Пречек",,,,Истина,,Истина);	
				КонецЕсли;
			Иначе
				Если ПечататьПречек
				И ОбъектДляЗаписи.Модуль=Перечисления.МодулиИПодсистемы.Ресторан
				И ОбъектДляЗаписи.Распечатан
				И Не ОбъектДляЗаписи.ДополнительныеСвойства.Оригинал.Распечатан Тогда
				ОбъектДляЗаписи.Печать("Пречек",,,,Истина);	
			КонецЕсли;

			КонецЕсли;
						
			Если ПечататьККМ
				И ТипЗнч(ОбъектДляЗаписи)=Тип("ДокументОбъект.РеализацияТоваровУслуг")
				И (ДокументОригинал=Неопределено ИЛИ ОбъектДляЗаписи.Проведен<>ДокументОригинал.Проведен) Тогда
				
				Если ОбъектДляЗаписи.ДополнительныеСвойства.Свойство("ТаблицаЧековККМРеализации") Тогда
					ТаблицаЧековККМРеализации = ОбъектДляЗаписи.ДополнительныеСвойства.ТаблицаЧековККМРеализации;
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
				Если ОбъектДляЗаписи.ДополнительныеСвойства.Свойство("ТаблицаЧековККМВозвратов") Тогда
					ТаблицаЧековККМВозвратов = ОбъектДляЗаписи.ДополнительныеСвойства.ТаблицаЧековККМВозвратов;
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
				Если ОбъектДляЗаписи.Проведен Тогда
					
					СписокОрганизаций	= Новый СписокЗначений;
					СписокКасс			= Новый СписокЗначений;
					ТабличныеЧасти = Новый Массив; 
					ТабличныеЧасти.Добавить("Товары"); 
					ТабличныеЧасти.Добавить("Услуги");
					
					Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
						Для Каждого СтрокаТабличнойЧасти Из ОбъектДляЗаписи[ТабличнаяЧасть] Цикл
							Если (Не СписокОрганизаций.НайтиПоЗначению(СтрокаТабличнойЧасти.Организация) = Неопределено) Тогда
								Продолжить;
							КонецЕсли;
							
							Если (СтрокаТабличнойЧасти.Сумма = 0) Тогда
								Продолжить;
							КонецЕсли;
							
							СписокОрганизаций.Добавить(СтрокаТабличнойЧасти.Организация);
							
							Результат = РаботаСТорговымОборудованием.ВернутьТЗсоСпискомКассОрганизации(СтрокаТабличнойЧасти.Организация,ПолучитьСерверТО().ПолучитьКомпьютерТО()); 
							Для Каждого СтрокаКассы Из Результат Цикл
								СписокКасс.Добавить(СтрокаКассы.КассаККМ);
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;		
					
					Для Каждого ЗначениеСписка Из СписокКасс Цикл			
						ДокументЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
						ДокументЧекККМ.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
						ДокументЧекККМ.Заполнить(Новый Структура("Основание,КассаККМ", ОбъектДляЗаписи.Ссылка,ЗначениеСписка.Значение));
						Если Не ПолучитьСерверFrontOffice().ПечатьККМ(ОбъектДляЗаписи, ДокументЧекККМ, Ответ) Тогда
							FrontOffice.ВывестиПредупреждение(Ответ);
							Возврат Ложь;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					СписокКассККМ = Новый СписокЗначений;
					
					Для Каждого СтрокаТаблицы Из ТаблицаЧековККМРеализации Цикл
						СписокКассККМ.Добавить(СтрокаТаблицы.КассаККМ);
					КонецЦикла;
					
					Если ПроверкаОборудованияДляПечатиНаККМ(, СписокКассККМ, ОбъектДляЗаписи.ОтражатьВНалоговомУчете) Тогда
						Для Каждого СтрокаТаблицы Из ТаблицаЧековККМРеализации Цикл				
							ДокументЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
							ДокументЧекККМ.Дата = ПолучитьСерверFrontOffice().ТекущаяКассоваяДата();
							ДокументЧекККМ.Заполнить(СтрокаТаблицы.Ссылка);
							Если Не ПолучитьСерверFrontOffice().ПечатьККМ(ОбъектДляЗаписи, ДокументЧекККМ, Ответ, СтрокаТаблицы.Ссылка.ЧекПробитНаККМ) Тогда
								Возврат Ложь;
							КонецЕсли;
						КонецЦикла;
					Иначе
						Возврат Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПолучитьСерверFrontOffice().АктивизироватьФорму();
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			
			// Из-за каких-то внутренних ошибок 1С, полсе открытия окна процесса печати, активизированной может окозаться не текущая форма.
			ПолучитьСерверFrontOffice().АктивизироватьФорму();
			
			// Предупреждение.
			Если ПустаяСтрока(ОписаниеОшибки) Тогда
				ОписаниеОшибки = НСтр("ru=' Причина неопределенна';uk=' Причину помилки не визначено'") ;
			КонецЕсли;
			
			FrontOffice.СообщитьОбОшибке(НСтр("ru='Невозможно выполнить операциию.';uk='Неможливо виконати операцію'")  + ОписаниеОшибки + ".");
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Возврат Истина;
		
	КонецФункции	
	
	// Игорь 09.11.2011 15:04:05
	Процедура ПолучитьСвязаныеПозиции(Родитель, МассивПозиций) 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Родитель", Родитель);		
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Родитель = &Родитель
		|	И (НЕ Номенклатура.ПометкаУдаления)";
		
		Результат = Запрос.Выполнить().Выгрузить();
		МассивПозиций = Результат.ВыгрузитьКолонку("Ссылка");			
	КонецПроцедуры
	// Чистяков Павел 06.09.2010 9:26:46 
	Функция ВводКомментарияНоменклатуы(Значение = Неопределено) Экспорт
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Комментарий",Метаданные.РегистрыСведений.КонтактнаяИнформацияРеализацииТоваровУслуг.Ресурсы.Комментарий.Тип);
		
		Строкой = Значение;
		
		
		Если FrontOffice.ПоискСтроки(Строкой, НСтр("ru='Введите комментарий';uk='Введіть коментар'") , ,,, Таблица, "Комментарий", Ложь, ЭтотОбъект, "ПоискКомментарияНоменклатуры") Тогда
			
			Если ТипЗнч(Строкой)=Тип("Строка") Тогда
				Значение = Строкой;
			Иначе
				Значение = Строкой.Комментарий;
			КонецЕсли;
			
			Таблица = Неопределено;
			
			Возврат Истина;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
			
	// Мирошниченоко Игорь 25.11.2011 13:16:21
	Процедура УстановитьВременыеПозиции(Документ, ТабличноеПолеЗаказа , ОбновлятьСтроки = Истина) Экспорт 
		
		ПересчитатьСтроки = Ложь;    
		Для каждого Стр Из Документ.ДополнительныеСвойства.Позиции Цикл    
			Если Стр.Номенклатура.Временной и Стр.Распечатан Тогда
				Если Стр.ДатаОкончанияПериода = ОбщегоНазначенияСервер.ПолучитьПустуюДату() и не Стр.Выполненн Тогда
					Секунды = ОбщегоНазначения.ПолучитьРазностьДат(Стр.ДатаНачалаПериода, ТекущаяДата() );
					Стр.Количество = ?(Секунды = 0, 0 , Число(Формат(Секунды /60 /60 ,"ЧЦ=15; ЧДЦ=3; ЧГ=")));      
					ПересчитатьСтроки = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПересчитатьСтроки Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(Документ, Документ.ДополнительныеСвойства.Позиции,  ); //Документ.ДополнительныеСвойства.Скидки
			Если ОбновлятьСтроки Тогда
				ТабличноеПолеЗаказа.ОбновитьСтроки();
			КонецЕсли;	
		КонецЕсли;
		
	КонецПроцедуры
	
//Костенюк Александр-Старт 20.05.2013
// Процедура переноса данных табличного поля в документ.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.СписаниеТоваров.
//	ТабличноеПоле - Тип: ОбработкаОбъект.TouchТабличноеПоле.
//
Процедура ТаблицаЗаказаЗаписать(ДокументОбъект, ТабличноеПоле) Экспорт
	
	Данные = ТабличноеПоле.Данные();
	
	СписокРеквизитов = Новый СписокЗначений;
	Для Каждого Реквизит Из ДокументОбъект.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
		Реквизит = Реквизит.Имя;
		Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
			СписокРеквизитов.Добавить(Реквизит);	
		КонецЕсли;
	КонецЦикла;
	
	// Перенос данных.
	ДокументОбъект.Товары.Очистить();
	
	Для Каждого СтрокаДанных Из Данные Цикл
		СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
		Для Каждого Реквизит Из СписокРеквизитов Цикл
			Реквизит = Реквизит.Значение;
			СтрокаТабличнойЧасти[Реквизит] = СтрокаДанных[Реквизит];
			СтрокаТабличнойЧасти.Списание = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ТаблицаЗаказаЗаписать()
//Костенюк Александр-Финиш 20.05.2013

//Костенюк Александр-Старт 20.05.2013
// Процедура заполнения табличного поля заказа документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.СписаниеТоваров.
//	ТабличноеПоле - Тип: ОбработкаОбъект.TouchТабличноеПоле.
//
Процедура ТаблицаЗаказаПрочитать(ДокументОбъект, ТабличноеПоле) Экспорт
	
	// Данные.
	Данные = ТабличноеПоле.Данные();
	
	Если (Данные = Неопределено) Тогда
		
		Данные = Новый ТаблицаЗначений;
		
		Данные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)), "N");
		Для Каждого Реквизит Из Метаданные.Документы.СписаниеТоваров.ТабличныеЧасти.Товары.Реквизиты Цикл
			Данные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, Реквизит.Синоним);
		КонецЦикла;
		Данные.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка"), "Код");
		Данные.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"), Данные.Колонки.Номенклатура.Заголовок);
		
		ТабличноеПоле.Данные(Данные);
		ТабличноеПоле.СоздатьКолонки("НомерСтроки,НоменклатураКод,НоменклатураПредставление,Количество,Цена,СуммаОтображаемая");
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		ТабличноеПоле.Колонки.Получить("НомерСтроки").Ширина = 400 * 0.05;
		ТабличноеПоле.Колонки.Получить("НомерСтроки").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("НоменклатураКод").ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабличноеПоле.Колонки.Получить("НоменклатураПредставление").Ширина = 400 * 0.40;
		ТабличноеПоле.Колонки.Получить("Количество").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("Количество").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("Цена").Ширина = 400 * 0.10;
		ТабличноеПоле.Колонки.Получить("Цена").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Ширина = 400 * 0.15;
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").ТекстШапки = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Синоним;
		ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Формат = "ЧЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.Разрядность + "; ЧДЦ=" + Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Сумма.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + "; ЧН=";
		ТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;
		
		Возврат;
	Иначе
		Данные.Очистить();
	КонецЕсли;
	
	Если (ДокументОбъект = Неопределено) тогда
		Возврат;
	КонецЕсли;
	
	// Настройка отображаемой суммы.
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ТабличноеПоле.Колонки.Получить("СуммаОтображаемая").Данные = "Сумма";
	
	Если (ДокументОбъект = ДокументОбъект.Ссылка) тогда
		Возврат;
	КонецЕсли;
	
	// Список реквизитов.
	// -- Товары.
	СписокРеквизитовТоваров = Новый СписокЗначений();
	Для Каждого Реквизит Из ДокументОбъект.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
		Реквизит = Реквизит.Имя;
		Если (Не Данные.Колонки.Найти(Реквизит) = Неопределено) Тогда
			СписокРеквизитовТоваров.Добавить(Реквизит);	
		КонецЕсли;
	КонецЦикла;
	
	// Выборка данных.
	// -- Товары.
	Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
		СтрокаДанных = Данные.Добавить();
		СтрокаДанных.НомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
		Для Каждого Реквизит Из СписокРеквизитовТоваров Цикл
			Реквизит = Реквизит.Значение;
			СтрокаДанных[Реквизит] = СтрокаТабличнойЧасти[Реквизит];
		КонецЦикла;
		СтрокаДанных.НоменклатураПредставление = ПолучитьПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.НоменклатураКод);
	КонецЦикла;
	
	// -- Сортировка.
	Данные.Сортировать("Распечатан Убыв,ДатаНачалаПериода,НомерСтроки");
	
	// Обновление
	ТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры // ТаблицаЗаказаПрочитать()
//Костенюк Александр-Финиш 20.05.2013


	
	///////////////////////////////////////////////////////////////////////////////////////////	
	// Инициализация переменных.
	
	мТипТипа = Тип("Тип");
	мТипЧисла = Тип("Число");
	мТипСтроки = Тип("Строка");
	мТипТаблицыЗначений = Тип("ТаблицаЗначений");
	
	мВыводитьКартинкиПутиМеню = Ложь;
	мВыводитьКартинкиГруппМеню = Ложь;
	мВыводитьКартинкиЭлементовМеню = Ложь;
	мВыводитьЦеныМеню = Ложь;
	мКомпактноеПредставлениеМеню = Ложь;
	мРазмерЭлементовМеню = УправлениеПользователями.ПолучитьНастрокуРазмера("160x40");
	мДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
	мСертификат = Справочники.Сертификаты.ПустаяСсылка();
	
#КонецЕсли