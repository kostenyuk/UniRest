
Процедура ВыполнитьОбработку(НачалоПериода = Неопределено, КонецПериода = Неопределено, Ресторан = Неопределено, Выгружать = Истина, Адрес = "", Пользователь = "", Пароль = "", Каталог = "", УдалятьФайлы = Истина) Экспорт
	
	ВремяНачала = ТекущаяДата();
	Сообщить("Время начала: " + ВремяНачала);
	
	РегламентноеЗадание = (НЕ ЗначениеЗаполнено(НачалоПериода)) И (НЕ ЗначениеЗаполнено(КонецПериода));
	НачалоПериода 	= ?(ЗначениеЗаполнено(НачалоПериода), НачалоПериода, НачалоДня(ТекущаяДата() - 86400));
	КонецПериода 	= ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, КонецДня(ТекущаяДата() - 86400));
	Адрес 			= ?(ЗначениеЗаполнено(Адрес), Адрес, ПолучитьАдрес());
	Пользователь 	= ?(ЗначениеЗаполнено(Пользователь), Пользователь, ПолучитьПользователя());
	Пароль 			= ?(ЗначениеЗаполнено(Пароль), Пароль, ПолучитьПароль());
	Каталог 		= ?(ЗначениеЗаполнено(Каталог), Каталог, ПолучитьКаталог());
	
	СформироватьФайлы(НачалоПериода, КонецПериода, Ресторан, Каталог, РегламентноеЗадание);
	ВыгрузитьНаFTP(Выгружать, Адрес, Пользователь, Пароль, Каталог, УдалятьФайлы);
	
	ВремяОкончания 	= ТекущаяДата();
	ВремяОбработки	= ВремяОкончания - ВремяНачала; //в секундах
	Длительность 	= ОбщегоНазначения.ЧЧММСС(ВремяОбработки);
	Сообщить(                                                         
	"Длительность 		: " + Длительность 		+ Символы.ПС +
	"Время окончания 	: " + ВремяОкончания 	+ Символы.ПС
	, СтатусСообщения.Информация);
	
КонецПроцедуры

Функция СформироватьЗапросПоПродажам(НачалоПериода, КонецПериода, Ресторан)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПродажиОбороты.Ресторан КАК Ресторан,
	               |	ПродажиОбороты.Регистратор КАК Регистратор,
	               |	СУММА(ПродажиОбороты.СтоимостьБезСкидокОборот) КАК СуммаБезСкидок,
	               |	СУММА(ПродажиОбороты.СтоимостьОборот) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК ПродажиОбороты
	               |ГДЕ
	               |	ПродажиОбороты.Ресторан = &Ресторан
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПродажиОбороты.Ресторан,
	               |	ПродажиОбороты.Регистратор
	               |ИТОГИ
	               |	СУММА(СуммаБезСкидок),
	               |	СУММА(Сумма)
	               |ПО
	               |	Ресторан,
	               |	Регистратор";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Если ЗначениеЗаполнено(Ресторан) Тогда
		Запрос.УстановитьПараметр("Ресторан", Ресторан);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПродажиОбороты.Ресторан = &Ресторан", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьАдрес() Экспорт
	
	АдресСервераОбменаКК 		= СокрЛП(Константы.АдресСервераОбменаКК.Получить());
	КаталогСервераОбменаЧеками 	= СокрЛП(Константы.КаталогСервераОбменаЧеками.Получить());
	
	Если Прав(АдресСервераОбменаКК, 1) <> "/" Тогда
		АдресСервераОбменаКК = АдресСервераОбменаКК + "/"; 
	КонецЕсли;
	
	Если Прав(КаталогСервераОбменаЧеками, 1) <> "/" Тогда
		КаталогСервераОбменаЧеками = КаталогСервераОбменаЧеками + "/"; 
	КонецЕсли;
	
	Результат = АдресСервераОбменаКК + КаталогСервераОбменаЧеками;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПользователя() Экспорт
	Возврат СокрЛП(Константы.ПользовательСервераОбменаКК.Получить());
КонецФункции

Функция ПолучитьПароль() Экспорт
	Возврат СокрЛП(Константы.ПарольСервераОбменаКК.Получить());
КонецФункции

Функция ПолучитьКаталог() Экспорт
	Возврат РаботаСФайлами.НормализоватьКаталог(СокрЛП(Константы.КаталогОбмена.Получить()));
КонецФункции

Процедура СформироватьФайлы(НачалоПериода, КонецПериода, Ресторан, Каталог, РегламентноеЗадание = Ложь)
	
	РезультатЗапроса = СформироватьЗапросПоПродажам(НачалоПериода, КонецПериода, Ресторан);
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Отсутствуют данные по продажам за выбранный период", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = Каталог + "out\" + "check.dbf";
	
	ТекущаяДата = ТекущаяДата();
	ТаблицаСостояниийУспешныхОбменовДанными = РегистрыСведений.СостоянияУспешныхОбменовДанными.ПолучитьТаблицуСостояниий(, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
	ВыборкаПоРесторанам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ресторан");
	
	Пока ВыборкаПоРесторанам.Следующий() Цикл
		
		ТекущийРесторан = ВыборкаПоРесторанам.Ресторан;
		
		Если ТаблицаСостояниийУспешныхОбменовДанными.Количество() Тогда
			НайденнаяСтрока = ТаблицаСостояниийУспешныхОбменовДанными.Найти(ТекущийРесторан, "Ресторан");
			Если НайденнаяСтрока <> Неопределено Тогда
				РазностьДат = ОбщегоНазначения.ПолучитьРазностьДат(НайденнаяСтрока.ДатаОкончания, ?(РегламентноеЗадание, ТекущаяДата, КонецПериода), "ДЕНЬ");
				Если РазностьДат > 0 Тогда
					Сообщить("Файл выгрузки по ресторану " +""""+ ТекущийРесторан +""""+ " не сформирован. Необходимо запустить обмен и выполнить выгрузку повторно.", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Файл = Новый xBase();
		Файл.Поля.Добавить("UNI"		, "N", 11, 0); // не заполняется
		Файл.Поля.Добавить("DATE"		, "D", 11, 0); // Дата чека
		Файл.Поля.Добавить("CNUM"		, "S", 11,  ); // Номер чека
		Файл.Поля.Добавить("CARDCODE"	, "N", 20, 4); // Номер карты КК
		Файл.Поля.Добавить("REST"		, "N", 11, 0); // Код ресторана
		Файл.Поля.Добавить("SUM"		, "N", 12, 2); // Сумма без скидок
		Файл.Поля.Добавить("SUM1"		, "N", 12, 2); // Сумма к оплате
		Файл.СоздатьФайл(ПолноеИмяФайла);
		Файл.АвтоСохранение = Истина;
		
		ВыборкаПоДокументам = ВыборкаПоРесторанам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			Документ = ВыборкаПоДокументам.Регистратор;
			
			Номер = СокрЛП(Документ.Номер);
			Позиция = Найти(СокрЛП(Документ.Номер), "-"); 
			Если Позиция > 0 Тогда
				Номер = Сред(СокрЛП(Документ.Номер), Позиция + 1);
			КонецЕсли;
			
			Файл.Добавить();
			Файл.DATE 		= Документ.Дата;
			Файл.CNUM 		= Номер;
			Файл.CARDCODE 	= ?(ЗначениеЗаполнено(Документ.ДисконтнаяКарта), Число(СокрЛП(Документ.ДисконтнаяКарта.КодКарты)), "");
			Файл.REST 		= Число(СокрЛП(ТекущийРесторан.КодКК));
			Файл.SUM 		= Формат(ВыборкаПоДокументам.СуммаБезСкидок, "ЧЦ=12; ЧДЦ=2");
			Файл.SUM1 		= Формат(ВыборкаПоДокументам.Сумма, "ЧЦ=12; ЧДЦ=2");
			
		КонецЦикла;
		
		Файл.ЗакрытьФайл();
		
		ИмяАрхива 		= "r" + СокрЛП(ТекущийРесторан.КодКК) + "-" + СтрЗаменить(Строка(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")), "-", "") + ".zip";
		ПолноеИмяАрхива = Каталог + "out\" + ИмяАрхива; 
		
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ПолноеИмяАрхива);
		ЗаписьZipФайла.Добавить(ПолноеИмяФайла);		
		ЗаписьZipФайла.Записать();
		
		Попытка
			УдалитьФайлы(ПолноеИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Файл = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазложитьСсылку(Знач Link, Server, Directory)
	
	Если Лев(Link, 6) = "ftp://" Тогда
		Link = Сред(Link, 7);
	КонецЕсли;
	
	Позиция	= Найти(Link, "/");
	
	Если Позиция = 0 Тогда
		Server = Link;
	Иначе
		Server = Лев(Link, Позиция - 1);
		Directory = Сред(Link, Позиция + 1);
	КонецЕсли;
	
	Если Прав(Directory, 1) = "/" Тогда
		Directory = Сред(Directory, 1, СтрДлина(Directory) - 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьНаFTP(Выгружать, Адрес, Пользователь, Пароль, Каталог, УдалятьФайлы)
	
	Если НЕ Выгружать Тогда
		Возврат;
	КонецЕсли;
	
	Сервер 			= "";
	КаталогСервера 	= "";
	
	РазложитьСсылку(Адрес, Сервер, КаталогСервера);
	
	Попытка
		FTPСоединение = Новый FTPСоединение(Сервер, 21, Пользователь, Пароль, , Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	FTPСоединение.УстановитьТекущийКаталог(КаталогСервера);
	Массивфайлов = НайтиФайлы(Каталог + "out\", "*.zip");
	
	Для Каждого Файл Из Массивфайлов Цикл
		Попытка
			FTPСоединение.Записать(Файл.ПолноеИмя, Файл.Имя);
			Сообщить("Отправлен файл " + Файл.Имя);
			Если УдалятьФайлы Тогда
				УдалитьФайлы(Файл.ПолноеИмя);
			КонецЕсли;
		Исключение
			Сообщить("При отправке файла " + Файл.Имя + " произошла ошибка: " + ОписаниеОшибки());
		КонецПопытки; 
	КонецЦикла; 
	
КонецПроцедуры
