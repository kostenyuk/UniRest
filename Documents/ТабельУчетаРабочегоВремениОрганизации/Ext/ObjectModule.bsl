Перем мТекущаяДата; // Используется при подготовке реквизитов документа, обеспечивая синхронность даты.
Перем мЗаголовок; // Заголовок служебных сообщений.

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура. Каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();

	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Функция возвращает либо переданную дату, либубо текущую если переданное значение не заполнено.
//
Функция ПолучитьНеПустуюДату(Значение, Алетернатива = Неопределено)
	
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Значение) Тогда
		Если (Алетернатива = Неопределено) Тогда
			Возврат мТекущаяДата;
		Иначе
			Возврат Алетернатива;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции // ПолучитьНеПустуюДату()


// Подготавливает (автоматически заполнениет) шапку документа.
//
Процедура ПодготовитьШапку(РежимЗаписи, РежимПроведения)
	
	// Текущая дата.
	мТекущаяДата = ТекущаяДата();
	
	// Распечатан.
	Распечатан = (Проведен Или (РежимЗаписи = РежимЗаписиДокумента.Проведение)) И (Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);

	// ДатаНачалаПериода.
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДатаНачалаПериода) Тогда
		ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(ДатаОкончанияПериода), мТекущаяДата);
	КонецЕсли;
	
	// ДатаОкончанияПериода.
	Если Распечатан Тогда
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(ДатаОкончанияПериода) Тогда
			ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(ДатаНачалаПериода), мТекущаяДата);
		КонецЕсли;
	КонецЕсли;
	
	// КраткийСоставДокумента.
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОтработанноеВремяВЦеломЗаПериод);
	
КонецПроцедуры // ПодготовитьШапку()

// Подготавливает (автоматически заполнениет) строки табличной части документов оснований.
//
Процедура ПодготовитьТабличнуюЧастьОтработанноеВремяВЦеломЗаПериод(РежимЗаписи, РежимПроведения)
	
	Для Каждого СтрокаТабличнойЧасти Из ОтработанноеВремяВЦеломЗаПериод Цикл
		
		// Идентификатор.
		Если ПустаяСтрока(СтрокаТабличнойЧасти.Идентификатор) Тогда
			СтрокаТабличнойЧасти.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		// КодВнештатногоСотрудника.
		Если Не СтрокаТабличнойЧасти.ВнештатныйСотрудник Тогда
			СтрокаТабличнойЧасти.КодВнештатногоСотрудника = Неопределено;
		КонецЕсли;
		
		// ДатаНачалаПериода.
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
			СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаОкончанияПериода), ПолучитьНеПустуюДату(ДатаОкончанияПериода), Макс(ПолучитьНеПустуюДату(ДатаНачалаПериода), мТекущаяДата));
		КонецЕсли;
		
		// ДатаОкончанияПериода.
		Если Распечатан Тогда
			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
				СтрокаТабличнойЧасти.ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаНачалаПериода), ПолучитьНеПустуюДату(ДатаНачалаПериода), Мин(ПолучитьНеПустуюДату(ДатаОкончанияПериода), мТекущаяДата));
			КонецЕсли;
		КонецЕсли;
		
		// Дней и Часов.
		//ОбщегоНазначения.РассчитатьПродолжительность(СтрокаТабличнойЧасти.ДатаНачалаПериода, СтрокаТабличнойЧасти.ДатаОкончанияПериода, СтрокаТабличнойЧасти.Дней, СтрокаТабличнойЧасти.Часов);
		ОбщегоНазначения.РассчитатьПродолжительность(СтрокаТабличнойЧасти.ДатаНачалаПериода, СтрокаТабличнойЧасти.ДатаОкончанияПериода, СтрокаТабличнойЧасти.Дней, СтрокаТабличнойЧасти.Часов, СтрокаТабличнойЧасти.КоличествоЧасовРасчетное); //Костенюк Александр 30.06.2016

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТабличнуюЧастьОтработанноеВремяВЦеломЗаПериод()


// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, Заголовок)

	// Обязательные.
	Если (СтруктураОбязательныхПолей = Неопределено) Тогда
		СтруктураОбязательныхПолей = Новый Структура;
	КонецЕсли;
	СтруктураОбязательныхПолей.Вставить("Ответственный");
	СтруктураОбязательныхПолей.Вставить("Ресторан");
	СтруктураОбязательныхПолей.Вставить("ДатаНачалаПериода");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Дополнительная проверка булевых типов.
	Если СтруктураОбязательныхПолей.Свойство("Распечатан") Тогда
		Если Не Распечатан Тогда
			ОбщегоНазначения.СообщитьОбНезаполненомРеквизитеДокумента(ЭтотОбъект, "Распечатан", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Дополнительная проверка кореляции значений.
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(ДатаНачалаПериода) И ЗначениеЗаполнено(ДатаОкончанияПериода) И (ДатаНачалаПериода > ДатаОкончанияПериода) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().Реквизиты.ДатаНачалаПериода.Синоним + "» документа «" + Метаданные().Синоним + "» не может быть больше значения реквизита «" + Метаданные().Реквизиты.ДатаОкончанияПериода.Синоним + "».", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части документов оснований.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОтработанноеВремяВЦеломЗаПериод(СтруктураОбязательныхПолей, Отказ, Заголовок)

	// Обязательные.
	Если (СтруктураОбязательныхПолей = Неопределено) Тогда
		СтруктураОбязательныхПолей = Новый Структура;
	КонецЕсли;
	СтруктураОбязательныхПолей.Вставить("Сотрудник");
	СтруктураОбязательныхПолей.Вставить("ВидВремени");
	СтруктураОбязательныхПолей.Вставить("ДатаНачалаПериода");
	СтруктураОбязательныхПолей.Вставить("Организация");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОтработанноеВремяВЦеломЗаПериод", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка корректности заполнения и кореляции значений.
	//Если Не Отказ Тогда
	//	
	//	Для Каждого СтрокаТабличнойЧасти Из ОтработанноеВремяВЦеломЗаПериод Цикл
	//		
	//		НомерСтроки = Строка(ОтработанноеВремяВЦеломЗаПериод.Индекс(СтрокаТабличнойЧасти) + 1);
	//		
	//		// -- Кореляция значений.
	//		Если СтруктураОбязательныхПолей.Свойство("ДатаНачалаПериода") Тогда
	//			Если ЗначениеЗаполнено(ДатаНачалаПериода) И ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
	//				Если (СтрокаТабличнойЧасти.ДатаНачалаПериода < ДатаНачалаПериода) Или (ДатаОкончанияПериода < СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
	//					ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.ДатаНачалаПериода.Синоним + "» документа «" + Метаданные().Синоним + "» может быть только в пределах основного периода документа. Номер строки: " + НомерСтроки + ".", Отказ, Заголовок);
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если СтруктураОбязательныхПолей.Свойство("ДатаОкончанияПериода") Тогда
	//			Если (СтрокаТабличнойЧасти.ДатаНачалаПериода > СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
	//				ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.ДатаНачалаПериода.Синоним + "» документа «" + Метаданные().Синоним + "» не может быть больше значения реквизита «" + Метаданные().ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.ДатаОкончанияПериода.Синоним + "». Номер строки: " + НомерСтроки + ".", Отказ, Заголовок);
	//			КонецЕсли;
	//			Если (СтрокаТабличнойЧасти.ДатаОкончанияПериода < ДатаНачалаПериода) Или (ДатаОкончанияПериода < СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
	//				ОбщегоНазначения.СообщитьОбОшибке("Значение реквизита «" + Метаданные().ТабличныеЧасти.ОтработанноеВремяВЦеломЗаПериод.Реквизиты.ДатаОкончанияПериода.Синоним + "» документа «" + Метаданные().Синоним + "» может быть только в пределах основного периода документа. Номер строки: " + НомерСтроки + ".", Отказ, Заголовок);
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		// -- Корректность заполнения.
	//		Если СтрокаТабличнойЧасти.ВнештатныйСотрудник Тогда
	//			Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.КодВнештатногоСотрудника) Тогда
	//				ОбщегоНазначения.СообщитьОбНезаполненомРеквизитеТабличнойЧастиДокумента(Ссылка, "ОтработанноеВремяВЦеломЗаПериод", "КодВнештатногоСотрудника", НомерСтроки, Отказ, Заголовок);
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОтработанноеВремяВЦеломЗаПериод()


// Выполняет движения документа по регистрам состояний.
//
Процедура ДвиженияПоРегистрамСостояний(РежимПроведения, Отказ, Заголовок);

	// Состояние сотрудников (только с незакрытым периодом).
	Если Не Отказ Тогда
		
		УчтенныеСотрудники = Новый Соответствие;
		
		НаборЗаписей = РегистрыСведений.СостояниеОтработанногоВремениВЦеломЗаПериодТабелейУчетаРабочегоВремениОрганизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (Не Проведен) И (Не ПометкаУдаления) Тогда
			
			Для Каждого СтрокаТабличнойЧасти Из ОтработанноеВремяВЦеломЗаПериод Цикл
				Если СтрокаТабличнойЧасти.ВнештатныйСотрудник Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
					Продолжить;
				КонецЕсли;
				
				Запись = УчтенныеСотрудники.Получить(СтрокаТабличнойЧасти.Сотрудник);
				Если (Запись = Неопределено) Тогда
					Запись = НаборЗаписей.Добавить();
					Запись.Период = Дата;
					Запись.Документ = Ссылка;
					Запись.Ресторан = Ресторан;
					Запись.Сотрудник = СтрокаТабличнойЧасти.Сотрудник;
					
					УчтенныеСотрудники.Вставить(СтрокаТабличнойЧасти.Сотрудник, Запись);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Запись.ДатаНачалаПериода) Тогда
					Запись.ДатаНачалаПериода = Мин(Запись.ДатаНачалаПериода, СтрокаТабличнойЧасти.ДатаНачалаПериода);
				Иначе
					Запись.ДатаНачалаПериода = СтрокаТабличнойЧасти.ДатаНачалаПериода;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
					Запись.ДатаОкончанияПериода = Макс(ДатаОкончанияПериода);
				Иначе
					Запись.ДатаОкончанияПериода = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Запись Из УчтенныеСотрудники Цикл
				Запись = Запись.Значение;
				
				Если ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
					НаборЗаписей.Удалить(Запись);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
	
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамСостояний()

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
	
	// Рассчет.
	Если Не Отказ Тогда
		
		СекундВДне = 86400; СекундВЧасе = 3600;
		
		//СводнаяТаблицаДвижений = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(ОтработанноеВремяВЦеломЗаПериод.Выгрузить(), "ВнештатныйСотрудник,Сотрудник,КодВнештатногоСотрудника,ВидВремени,Организация", "Дней,Часов");
		СводнаяТаблицаДвижений = ОбщегоНазначения.ТаблицуЗначенийПолучитьВРазрезе(ОтработанноеВремяВЦеломЗаПериод.Выгрузить(), "ВнештатныйСотрудник,КодВнештатногоСотрудника,Сотрудник,РабочаяСмена,Должность,ВидВремени,Организация", "Дней,Часов,НормаЧасов,КоэффициентОкругленияПериода,КоличествоЧасовРасчетное,КоличествоСменРасчетное,КоличествоСменРучное"); //Костенюк Александр 24.06.2016
		
	КонецЕсли;
	
	// РабочееВремяРаботниковОрганизаций.
	Если Не Отказ Тогда
		
		Движения.РабочееВремяРаботниковОрганизаций.Очистить();
		
		Для Каждого СтрокаТаблицы Из СводнаяТаблицаДвижений Цикл
			
			Если Не Булево(СтрокаТаблицы.Дней + СтрокаТаблицы.Часов) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение			= Движения.РабочееВремяРаботниковОрганизаций.Добавить();
			Движение.Период		= Дата;
			Движение.Сотрудник	= СтрокаТаблицы.Сотрудник;
			Движение.Должность 	= СтрокаТаблицы.Должность; //Костенюк Александр 29.06.2016
			Движение.Ресторан	= Ресторан;
			Движение.Организация = СтрокаТаблицы.Организация;
			Движение.ВидИспользованияРабочегоВремени = СтрокаТаблицы.ВидВремени;
			Движение.РабочееВремя = СтрокаТаблицы.ВидВремени.РабочееВремя;
			Движение.ВнештатныйСотрудник = СтрокаТаблицы.ВнештатныйСотрудник;
			Движение.КодВнештатногоСотрудника = СтрокаТаблицы.КодВнештатногоСотрудника;
			//Движение.РабочаяСмена = РабочаяСмена;
			//Костенюк Александр-Старт 06.04.2016
			Движение.РабочаяСмена = СтрокаТаблицы.РабочаяСмена;
			Движение.НормаЧасов = СтрокаТаблицы.НормаЧасов;
			Движение.КоличествоЧасовРасчетное = СтрокаТаблицы.КоличествоЧасовРасчетное;
			Движение.КоэффициентОкругленияПериода = СтрокаТаблицы.КоэффициентОкругленияПериода;
			Движение.КоличествоСменРасчетное = СтрокаТаблицы.КоличествоСменРасчетное;
			Движение.КоличествоСменРучное = СтрокаТаблицы.КоличествоСменРучное;
			//Костенюк Александр-Финиш 06.04.2016
			
			//ОбщегоНазначения.РассчитатьПродолжительность(ДатаНачалаПериода, ДатаНачалаПериода + СтрокаТаблицы.Дней * СекундВДне + СтрокаТаблицы.Часов * СекундВЧасе, Движение.Дней, Движение.Часов);
			ОбщегоНазначения.РассчитатьПродолжительность(ДатаНачалаПериода, ДатаНачалаПериода + СтрокаТаблицы.Дней * СекундВДне + СтрокаТаблицы.Часов * СекундВЧасе, Движение.Дней, Движение.Часов, Движение.КоличествоЧасовРасчетное); //Костенюк Александр 12.07.2016
			
		КонецЦикла;
		
		Попытка
			Движения.РабочееВремяРаботниковОрганизаций.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , Движения.РабочееВремяРаботниковОрганизаций, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление движения документа по регистрам учета.
//
Процедура УдалениеДвиженияПоРегистрам(Отказ, Заголовок)

КонецПроцедуры // УдалениеДвиженияПоРегистрам()


// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Удаляем значения некопируемых реквизитов шапки.
	Если Не ОбъектКопирования.ПометкаУдаления Тогда
		ДатаНачалаПериода = Неопределено;
		ДатаОкончанияПериода = Неопределено;
		Распечатан = Неопределено;
	КонецЕсли;
	
	// Удаляем значения некопируемых реквизитов табличных частей.
	Если Не ОбъектКопирования.ПометкаУдаления Тогда
		
		МассивУдаляемыхСтрокаТабличнойЧасти = Новый Массив;
		
		Для Каждого СтрокаТабличнойЧасти Из ОтработанноеВремяВЦеломЗаПериод Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
				МассивУдаляемыхСтрокаТабличнойЧасти.Добавить(СтрокаТабличнойЧасти);
			КонецЕсли;

		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из МассивУдаляемыхСтрокаТабличнойЧасти Цикл
			
			ОтработанноеВремяВЦеломЗаПериод.Удалить(СтрокаТабличнойЧасти);

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПриКопировании()

// Обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(Основание)
	
	// Рестораны.
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Рестораны") Тогда
		Если Не Основание.ЭтоГруппа Тогда
			
			Ресторан = Основание;
			
		КонецЕсли;
	КонецЕсли;

	// Табеля учета рабочего времени организации.
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТабельУчетаРабочегоВремениОрганизации") Тогда
		
		ТекущаяДата = ТекущаяДата();
		
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, Новый Структура("КраткийСоставДокумента"));
		
		Если Не Основание.ПометкаУдаления Тогда
			Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
				ДатаНачалаПериода = ДатаОкончанияПериода + 1;
			Иначе
				ДатаНачалаПериода = ТекущаяДата();
			КонецЕсли;
			ДатаОкончанияПериода = Неопределено;
		КонецЕсли;
		
		Если Не Основание.ПометкаУдаления Тогда
			
			Для Каждого СтрокаТабличнойЧастиОснования Из Основание.ОтработанноеВремяВЦеломЗаПериод Цикл
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧастиОснования.ДатаОкончанияПериода) Тогда
					Продолжить;
				КонецЕсли;

				СтрокаТабличнойЧасти = ОтработанноеВремяВЦеломЗаПериод.Добавить();
				СтрокаТабличнойЧасти.ВнештатныйСотрудник = СтрокаТабличнойЧастиОснования.ВнештатныйСотрудник;
				СтрокаТабличнойЧасти.Сотрудник = СтрокаТабличнойЧастиОснования.Сотрудник;
				СтрокаТабличнойЧасти.КодВнештатногоСотрудника = СтрокаТабличнойЧастиОснования.КодВнештатногоСотрудника;
				СтрокаТабличнойЧасти.ВидВремени = СтрокаТабличнойЧастиОснования.ВидВремени;
				СтрокаТабличнойЧасти.ДатаНачалаПериода = ТекущаяДата;
				СтрокаТабличнойЧасти.Организация = СтрокаТабличнойЧастиОснования.Организация;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение значений по умолчанию.
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Нормализация.
	ПодготовитьШапку(РежимЗаписи, РежимПроведения);
	ПодготовитьТабличнуюЧастьОтработанноеВремяВЦеломЗаПериод(РежимЗаписи, РежимПроведения);
	
	Состояние = УправлениеЗаказами.ПолучитьСостояниеДокумента(ЭтотОбъект, РежимЗаписи);
	
	// Проверка заполнения реквизитов.
	мЗаголовок = Строка(РежимЗаписи) + " документа «" + СокрЛП(ЭтотОбъект) + "»: ";
	
	// Проверка заполнения реквизитов шапки.
	СтруктураОбязательныхПолей = Новый Структура;
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаОкончанияПериода");
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, мЗаголовок);

	// Проверка заполнения реквизитов табличных частей.
	
	// -- Отработанное время в целом за период.
	СтруктураОбязательныхПолей = Новый Структура;
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаОкончанияПериода");
	КонецЕсли;
	
	ПроверитьЗаполнениеТабличнойЧастиОтработанноеВремяВЦеломЗаПериод(СтруктураОбязательныхПолей, Отказ, мЗаголовок);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Движения документа.
	ДвиженияПоРегистрамСостояний(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Движения документа.
	ДвиженияПоРегистрам(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	// Удаление движений документа.
	УдалениеДвиженияПоРегистрам(Отказ, мЗаголовок);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()
