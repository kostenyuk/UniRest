
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
                  
	Если Количество() Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Если Не Константы.РазрешитьНеуникальныеШтрихкоды.Получить() Тогда
		
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	НаборЗаписей.Штрихкод,
			                      |	НаборЗаписей.Владелец
			                      |ПОМЕСТИТЬ НаборЗаписей
			                      |ИЗ
			                      |	&НаборЗаписей КАК НаборЗаписей
			                      |;
			                      |
			                      |////////////////////////////////////////////////////////////////////////////////
			                      |ВЫБРАТЬ
			                      |	Штрихкоды.Штрихкод,
			                      |	Штрихкоды.Владелец
			                      |ИЗ
			                      |	РегистрСведений.Штрихкоды КАК Штрихкоды
			                      |ГДЕ
			                      |	Штрихкоды.Штрихкод В(&НаборЗаписей)
			                      |	И НЕ (Штрихкоды.Штрихкод, Штрихкоды.Владелец) В (&НаборЗаписей)
			                      |;
			                      |
			                      |////////////////////////////////////////////////////////////////////////////////
			                      |УНИЧТОЖИТЬ НаборЗаписей");
			Запрос.УстановитьПараметр("НаборЗаписей", Выгрузить( , "Штрихкод,Владелец"));
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				// TODO: Регистрация ошибки.
				ТекстСообщения = Шаблон(НСтр("ru = 'Штрих-код [Код] принадлежит элементу [Ссылка]'; uk = 'Штрих-код [Код] належить елементу [Ссылка]'"),
					Новый Структура("Код,Ссылка", Кавычки(СокрП(Выборка.Штрихкод)), Кавычки(Выборка.Владелец)));
				__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , "Штрихкод", "Штрихкод", Отказ);
			КонецЕсли; 	
			
		КонецЕсли; 
	
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

