
Перем мТекущаяДата; 							// Используется при подготовке реквизитов документа, обеспечивая синхронность даты.
Перем мЗаголовок; 								// Заголовок служебных сообщений.
Перем мНоменклатурныеГруппы; 					// Состав номенклатурных групп.
Перем мПроизводственныеГруппы; 					// Состав производственных групп производства.
Перем мВалютаРегламентированногоУчета Экспорт; 	// Валюта.
Перем мТекущаяНоменклатура Экспорт; 			// Хранит текущую номенклатуру - для проверки реальности изменения номенклатуры.


// Обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Движения документа.
	ДвиженияПоРегистрам(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
КонецПроцедуры

// Обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
КонецПроцедуры

// Обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("Оригинал",	Ссылка);
	Иначе
		ДополнительныеСвойства.Вставить("Оригинал", Ссылка.ПолучитьОбъект());
	КонецЕсли; 
	
	// Нормализация.
	ПодготовитьШапку(РежимЗаписи, РежимПроведения);
	ПодготовитьТабличнуюЧасть(РежимЗаписи, РежимПроведения, "Товары");
	
	Состояние = УправлениеЗаказами.ПолучитьСостояниеДокумента(ЭтотОбъект, РежимЗаписи);
	
	// Проверка заполнения реквизитов.
	мЗаголовок = Строка(РежимЗаписи) + " документа «" + СокрЛП(ЭтотОбъект) + "»: ";
	
	// Проверка заполнения реквизитов шапки.
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Склад");
	ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, мЗаголовок);

	// Проверка заполнения реквизитов табличной части.
	СтруктураОбязательныхПолей = Новый Структура;
	ПроверитьЗаполнениеТабличнойЧасти(СтруктураОбязательныхПолей, Отказ, мЗаголовок, "Товары");
	
КонецПроцедуры

// Обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Анализ действий
	АнализДействий();
	
	// Движения документа.
	ДвиженияПоРегистрамСостояний(РежимПроведенияДокумента.Неоперативный, Отказ, мЗаголовок);
	
	// Обнуление данных.                                                       
	мПроизводственныеГруппы = Неопределено;

КонецПроцедуры

// Обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Удаляем значения некопируемых реквизитов шапки.
	Если Не ОбъектКопирования.ПометкаУдаления Тогда
		
		ДатаНачалаПериода 		= Неопределено;
		ДатаОкончанияПериода 	= Неопределено;
		Распечатан 				= Неопределено;
		
	КонецЕсли;
	
	// Табличная часть.
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		СтрокаТабличнойЧасти.Идентификатор 			= Неопределено;
		СтрокаТабличнойЧасти.ДатаНачалаПериода 		= Неопределено;
		СтрокаТабличнойЧасти.ДатаОкончанияПериода 	= Неопределено;
		СтрокаТабличнойЧасти.Распечатан 			= Неопределено;
		СтрокаТабличнойЧасти.Выполненн 				= Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет движения документа по регистрам учета.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	ДвиженияПоРегиструВыпускПродукцииУслуг(Отказ);
	ДвиженияПоРегиструВыпускПродукцииУслугСебестоимость(Отказ);
	ДвиженияПоРегиструСписанияТоваров(Отказ);
	ДвиженияПоРегиструСписанияТоваровСебестоимость(Отказ);	
	
КонецПроцедуры

// Выполняет движения документа по регистру ВыпускПродукцииУслуг.
//
Процедура ДвиженияПоРегиструВыпускПродукцииУслуг(Отказ)
	
	// регистр ВыпускПродукцииУслуг 
	Движения.ВыпускПродукцииУслуг.Записывать = Истина;
	Движения.ВыпускПродукцииУслуг.Очистить();
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение 						= Движения.ВыпускПродукцииУслуг.Добавить();
		Движение.Период 				= Дата;
		Движение.ВидОперации 			= ВидОперации; //Костенюк Александр 14.03.2013
		Движение.Номенклатура 			= ТекСтрокаТовары.Номенклатура;
		Движение.НоменклатурнаяГруппа 	= ТекСтрокаТовары.НоменклатурнаяГруппа;
		Движение.Сделка 				= Ссылка;
		Движение.ДокументВыпуска 		= Ссылка;
		Движение.Ресторан 				= Ресторан;
		Движение.Организация 			= ТекСтрокаТовары.Организация;
		Движение.Склад 					= Склад;
		Движение.Сотрудник 				= Сотрудник;
		Движение.СтавкаНДС 				= ТекСтрокаТовары.СтавкаНДС;
		Движение.ПенсионныйФонд 		= ТекСтрокаТовары.ПенсионныйФонд;
		Движение.БухгалтерскийУчет 		= ОтражатьВБухгалтерскомУчете;
		Движение.Количество 			= ТекСтрокаТовары.Количество;
		Движение.Стоимость 				= ТекСтрокаТовары.Цена;
		Движение.НДС 					= ТекСтрокаТовары.СуммаНДС;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет движения документа по регистру ВыпускПродукцииУслугСебестоимость.
//
Процедура ДвиженияПоРегиструВыпускПродукцииУслугСебестоимость(Отказ)
	
	// регистр ВыпускПродукцииУслугСебестоимость 
	Движения.ВыпускПродукцииУслугСебестоимость.Записывать = Истина;
	Движения.ВыпускПродукцииУслугСебестоимость.Очистить();
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение 						= Движения.ВыпускПродукцииУслугСебестоимость.Добавить();
		Движение.Период 				= Дата;
		Движение.ВидОперации 			= ВидОперации; //Костенюк Александр 14.03.2013
		Движение.Номенклатура 			= ТекСтрокаТовары.Номенклатура;
		Движение.НоменклатурнаяГруппа 	= ТекСтрокаТовары.НоменклатурнаяГруппа;
		Движение.Сделка 				= Ссылка;
		Движение.ДокументВыпуска 		= Ссылка;
		Движение.Ресторан 				= Ресторан;
		Движение.Организация 			= ТекСтрокаТовары.Организация;
		Движение.Склад 					= Склад;
		Движение.БухгалтерскийУчет 		= ОтражатьВБухгалтерскомУчете;
		Движение.Количество 			= ТекСтрокаТовары.Количество;
		Движение.Стоимость 				= ТекСтрокаТовары.Цена;
		Движение.НДС 					= ТекСтрокаТовары.СуммаНДС;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет движения документа по регистру СписанияТоваров.
//
Процедура ДвиженияПоРегиструСписанияТоваров(Отказ)
	
	// регистр СписанияТоваров 
	Движения.СписанияТоваров.Записывать = Истина;
	Движения.СписанияТоваров.Очистить();
	
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		
		Если НЕ ТекСтрокаТовары.Списание Тогда
			Продолжить;
		КонецЕсли;
		
		Движение 						= Движения.СписанияТоваров.Добавить();
		Движение.Период 				= Дата;
		Движение.Номенклатура 			= ТекСтрокаТовары.Номенклатура;
		Движение.НоменклатурнаяГруппа 	= ТекСтрокаТовары.НоменклатурнаяГруппа;
		Движение.Сделка 				= Ссылка;
		Движение.ДокументПродажи 		= Ссылка;
		Движение.Ресторан 				= Ресторан;
		Движение.Организация 			= ТекСтрокаТовары.Организация;
		Движение.Сотрудник 				= Сотрудник;
		Движение.СтавкаНДС 				= ТекСтрокаТовары.СтавкаНДС;
		Движение.ПенсионныйФонд 		= ТекСтрокаТовары.ПенсионныйФонд;
		Движение.БухгалтерскийУчет 		= ОтражатьВБухгалтерскомУчете;
		Движение.Количество 			= ТекСтрокаТовары.Количество;
		//Движение.Стоимость 				= ТекСтрокаТовары.Цена;
		Движение.Стоимость 				= ТекСтрокаТовары.Сумма;
		Движение.НДС 					= ТекСтрокаТовары.СуммаНДС;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет движения документа по регистру СписанияТоваровСебестоимость.
//
Процедура ДвиженияПоРегиструСписанияТоваровСебестоимость(Отказ)
	
	// регистр СписанияТоваровСебестоимость 
	Движения.СписанияТоваровСебестоимость.Записывать = Истина;
	Движения.СписанияТоваровСебестоимость.Очистить();
	
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		
		Если НЕ ТекСтрокаТовары.Списание Тогда
			Продолжить;
		КонецЕсли;
		
		Движение 						= Движения.СписанияТоваровСебестоимость.Добавить();
		Движение.Период 				= Дата;
		Движение.Номенклатура 			= ТекСтрокаТовары.Номенклатура;
		Движение.НоменклатурнаяГруппа 	= ТекСтрокаТовары.НоменклатурнаяГруппа;
		Движение.Сделка 				= Ссылка;
		Движение.ДокументПродажи 		= Ссылка;
		Движение.Ресторан 				= Ресторан;
		Движение.Организация 			= ТекСтрокаТовары.Организация;
		Движение.БухгалтерскийУчет 		= ОтражатьВБухгалтерскомУчете;
		Движение.Количество 			= ТекСтрокаТовары.Количество;
		//Движение.Стоимость 				= ТекСтрокаТовары.Цена;
		Движение.Стоимость 				= ТекСтрокаТовары.Сумма;
		Движение.НДС 					= ТекСтрокаТовары.СуммаНДС;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает (автоматически заполнениет) шапку документа.
//
Процедура ПодготовитьШапку(РежимЗаписи, РежимПроведения) Экспорт
	
	// Выборка данных.
	ПолучитьПроизводственныеГруппы();
	
	// Текущая дата.
	мТекущаяДата = ТекущаяДата();
	
	// Распечатан.
	Распечатан = Распечатан И (Не ПометкаУдаления);
	
	// ДатаНачалаПериода.
	Если НЕ ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
		ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(ДатаОкончанияПериода), мТекущаяДата);
	КонецЕсли;
	
	// ДатаОкончанияПериода.
	Если (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Если НЕ ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
			ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(ДатаНачалаПериода), мТекущаяДата);
		КонецЕсли;
	КонецЕсли;
	
	// СуммаДокумента.
	СуммаДокумента = ПолучитьСуммуСНДС();
	
	// ПричинаОтказа.
	Если Не ПометкаУдаления Тогда
		ПричинаОтказа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьШапку()

// Подготавливает (автоматически заполнениет) строки табличной части товары и услуги.
//
Процедура ПодготовитьТабличнуюЧасть(РежимЗаписи, РежимПроведения, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ТабличнаяЧасть 		= ЭтотОбъект[ИмяТабличнойЧасти];
	ПричинаОтказаШапки 	= Справочники.ПричиныОтказов.ПустаяСсылка();
	ПерваяСтрока 		= Истина;
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
		// Идентификатор.
		Если ПустаяСтрока(СтрокаТабличнойЧасти.Идентификатор) Тогда
			СтрокаТабличнойЧасти.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		// ВидНоменклатуры.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНоменклатуры) Тогда
			Если ПерваяСтрока Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
				СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар;
			Иначе
				СтрокаТабличнойЧасти.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор;
			КонецЕсли;
		КонецЕсли;
		
		//// Распечатан.
		//СтрокаТабличнойЧасти.Распечатан = (РежимЗаписи = РежимЗаписиДокумента.Проведение);
		
		// Распечатан.
		СтрокаТабличнойЧасти.Распечатан = Распечатан;
		
		// Выполненн.
		СтрокаТабличнойЧасти.Выполненн = СтрокаТабличнойЧасти.Выполненн Или СтрокаТабличнойЧасти.Списание;
		
		// ДатаНачалаПериода.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) Тогда
			СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаОкончанияПериода), мТекущаяДата);
		КонецЕсли;
		
		// ДатаОкончанияПериода.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
			СтрокаТабличнойЧасти.ДатаОкончанияПериода = Макс(ПолучитьНеПустуюДату(СтрокаТабличнойЧасти.ДатаНачалаПериода), мТекущаяДата);
		КонецЕсли;
		
		// Комментарий.
		СтрокаТабличнойЧасти.Комментарий = ОбщегоНазначения.СокрЛСП(СтрокаТабличнойЧасти.Комментарий);
		
		// Причина отказа.
		Если (Не ПричинаОтказаШапки = Неопределено) Тогда
			Если ПричинаОтказаШапки.Пустая() Тогда
				ПричинаОтказаШапки = СтрокаТабличнойЧасти.ПричинаОтказа;
			Иначе
				Если (Не ПричинаОтказаШапки = СтрокаТабличнойЧасти.ПричинаОтказа) Тогда
					ПричинаОтказаШапки = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПерваяСтрока = Ложь;
		
	КонецЦикла;
	
	// Шапка.
	ПричинаОтказа = ПричинаОтказаШапки;
	
КонецПроцедуры // ПодготовитьТабличнуюЧастьТоварыИУслуги()

// Процедура получает набор номенклатурных и производственных групп.
//
Процедура ПолучитьПроизводственныеГруппы() Экспорт
	
	мНоменклатурныеГруппы 	= Новый Массив;
	мПроизводственныеГруппы = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		мНоменклатурныеГруппы.Добавить(СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
	КонецЦикла;
	
	// Выборка данных.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа,
	               |	ПроизводственныеГруппы.Ссылка КАК ПроизводственнаяГруппа
	               |ИЗ
	               |	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеГруппы КАК ПроизводственныеГруппы
	               |		ПО НоменклатурныеГруппы.ПроизводственнаяГруппа = ПроизводственныеГруппы.Ссылка
	               |ГДЕ
	               |	НоменклатурныеГруппы.Ссылка В(&НоменклатурныеГруппы)
	               |	И ПроизводственныеГруппы.Актуальность";
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", мНоменклатурныеГруппы);
	РезультатЗапроса = Запрос.Выполнить();
	
	мПроизводственныеГруппы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПроизводственнаяГруппа");
	
КонецПроцедуры // ПолучитьПроизводственныеГруппы()

// Функция возвращает либо переданную дату, либубо текущую если переданное значение не заполнено.
//
Функция ПолучитьНеПустуюДату(Значение, Алетернатива = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Значение) Тогда
		Если (Алетернатива = Неопределено) Тогда
			Возврат мТекущаяДата;
		Иначе
			Возврат Алетернатива;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьНеПустуюДату()

// Функция возвращает сумму документа.
//
Функция ПолучитьСуммуСНДС() Экспорт
	
	Возврат Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
КонецФункции // ПолучитьСуммуСНДС()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		
		Значение 				= ЭтотОбъект[КлючЗначение.Ключ];
		ПредставлениеРеквизита 	= МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
			
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(СтруктураОбязательныхПолей, Отказ, Заголовок, ИмяТабличнойЧасти) Экспорт
	
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	ТабличнаяЧасть 				= ЭтотОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты 		= ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;

	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
										""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыИУслуги()

// Выполняет движения документа по регистру АнализДействий.
//
Процедура АнализДействий()
	
	Перем Оригинал;
	
	Если НЕ ДополнительныеСвойства.Свойство("Оригинал", Оригинал) Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтказаДокумент 	= Неопределено; 
	
	ДополнительныеСвойства.Свойство("ПричинаОтказа", ПричинаОтказаДокумент);

	// АД: Создан
	Если Оригинал.Ссылка = Оригинал Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Создан, Ссылка);
	КонецЕсли; 
	
	// АД: Отмена Пречека
	Если Оригинал.Распечатан
		И НЕ Распечатан Тогда
		РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.ОтменаПречека, Ссылка, ПричинаОтказаДокумент, ПричинаОтказаДокумент);
	КонецЕсли;

	ИмяТабличнойЧасти = "Товары";
	
	// АД: Удаление блюда
	Для Каждого СтрокаТаблицы Из Оригинал[ИмяТабличнойЧасти] Цикл
		НайденнаяСтрока = ЭтотОбъект[ИмяТабличнойЧасти].Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если НайденнаяСтрока = Неопределено Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.УдалениеБлюда, Ссылка, СтрокаТаблицы.Номенклатура, "", СтрокаТаблицы.Количество);
		КонецЕсли; 
	КонецЦикла; 
	
	// АД: Заказ и Дозаказ
	Для Каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		НайденнаяСтрока = Оригинал[ИмяТабличнойЧасти].Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока.Количество <> СтрокаТаблицы.Количество Тогда
				РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Дозаказано, Ссылка, СтрокаТаблицы.Номенклатура, "Количество изменено с " + НайденнаяСтрока.Количество + " на " + СтрокаТаблицы.Количество, СтрокаТаблицы.Количество);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	// АД: Удален
	Если Оригинал.Ссылка <> Оригинал
		И Оригинал.ПометкаУдаления <> ПометкаУдаления Тогда
		Если ПометкаУдаления Тогда
			РегистрыСведений.АнализДействий.Зарегистрировать(Перечисления.ДействиеНадЗаказами.Удален, Ссылка, ПричинаОтказа, ПричинаОтказа);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения документа по регистрам состояний.
//
Процедура ДвиженияПоРегистрамСостояний(РежимПроведения, Отказ, Заголовок)
	
	// Состояние документа.
	Если НЕ Отказ Тогда
		
		НаборЗаписей = РегистрыСведений.СостояниеДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		
		Если (НЕ Проведен) И (НЕ ПометкаУдаления) Тогда
			
			НаборЗаписей.Прочитать();
			
			Если Булево(НаборЗаписей.Количество()) Тогда
				Запись = НаборЗаписей[0];
			Иначе
				Запись = НаборЗаписей.Добавить();
			КонецЕсли;
			
			Запись.Документ 			= Ссылка;
			Запись.Модуль 				= Перечисления.МодулиИПодсистемы.Ресторан;
			Запись.Ресторан 			= Ресторан;
			Запись.Сотрудник 			= Сотрудник;
			Запись.Дата 				= Дата;
			Запись.ДатаНачалаПериода 	= ДатаНачалаПериода;
			Запись.ДатаОкончанияПериода = ДатаОкончанияПериода;
			Запись.Номер 				= Номер;
			Запись.Распечатан 			= Распечатан;
			Запись.Состояние 			= Состояние;
			Запись.СуммаДокумента 		= СуммаДокумента;
			Запись.Комментарий 			= Комментарий;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, мЗаголовок, , НаборЗаписей, ЭтотОбъект);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамСостояний()

// Функция формирует запрос для печати
//
// Параметры:
// Режим - Тип: Строка. Режим формирования запроса.
//
// ВозвращаемоеЗначение:
// РезультатЗапроса - Тип: РезультатЗапроса. Результат выполнения запроса.
//
Функция СформироватьЗапросДляПечати(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ОтчетПроизводстваЗаСмену.Номер,
		               |	ОтчетПроизводстваЗаСмену.Дата,
		               |	ОтчетПроизводстваЗаСмену.ВидОперации,
		               |	ОтчетПроизводстваЗаСмену.Ресторан,
		               |	ОтчетПроизводстваЗаСмену.Ресторан КАК Поставщик,
		               |	ОтчетПроизводстваЗаСмену.Сотрудник КАК Отпустил,
		               |	ОтчетПроизводстваЗаСмену.Комментарий,
		               |	ОтчетПроизводстваЗаСмену.СуммаДокумента
		               |ИЗ
		               |	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
		               |ГДЕ
		               |	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиТовары" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗапросПоТоварам.НомерСтроки,
		               |	ЗапросПоТоварам.Владелец,
		               |	ЗапросПоТоварам.Идентификатор,
		               |	ЗапросПоТоварам.Номенклатура,
		               |	ЗапросПоТоварам.ЕдиницаИзмерения,
		               |	ЗапросПоТоварам.Количество,
		               |	ЗапросПоТоварам.Цена,
		               |	ЗапросПоТоварам.СтавкаНДС,
		               |	ЗапросПоТоварам.Сумма,
		               |	ЗапросПоТоварам.СуммаНДС,
		               |	ЗапросПоТоварам.Номенклатура.Код КАК Код,
		               |	ВЫРАЗИТЬ(ЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ОтчетПроизводстваЗаСменуТовары.НомерСтроки КАК НомерСтроки,
		               |		ОтчетПроизводстваЗаСменуТовары.Владелец КАК Владелец,
		               |		ОтчетПроизводстваЗаСменуТовары.Идентификатор КАК Идентификатор,
		               |		ОтчетПроизводстваЗаСменуТовары.Номенклатура КАК Номенклатура,
		               |		ОтчетПроизводстваЗаСменуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |		СУММА(ОтчетПроизводстваЗаСменуТовары.Количество) КАК Количество,
		               |		ОтчетПроизводстваЗаСменуТовары.Цена КАК Цена,
		               |		ОтчетПроизводстваЗаСменуТовары.СтавкаНДС КАК СтавкаНДС,
		               |		СУММА(ОтчетПроизводстваЗаСменуТовары.Сумма) КАК Сумма,
		               |		СУММА(ОтчетПроизводстваЗаСменуТовары.СуммаНДС) КАК СуммаНДС
		               |	ИЗ
		               |		Документ.ОтчетПроизводстваЗаСмену.Товары КАК ОтчетПроизводстваЗаСменуТовары
		               |	ГДЕ
		               |		ОтчетПроизводстваЗаСменуТовары.Ссылка = &ТекущийДокумент
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ОтчетПроизводстваЗаСменуТовары.Номенклатура,
		               |		ОтчетПроизводстваЗаСменуТовары.ЕдиницаИзмерения,
		               |		ОтчетПроизводстваЗаСменуТовары.Владелец,
		               |		ОтчетПроизводстваЗаСменуТовары.Идентификатор,
		               |		ОтчетПроизводстваЗаСменуТовары.Цена,
		               |		ОтчетПроизводстваЗаСменуТовары.СтавкаНДС,
		               |		ОтчетПроизводстваЗаСменуТовары.НомерСтроки) КАК ЗапросПоТоварам";

	Иначе
		Возврат Неопределено;		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат РезультатЗапроса;
	
КонецФункции

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, АвтоопределениеПринтера = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если (ИмяМакета = "Накладная") Тогда
		ТабДокумент = ПечатьДокумента(АвтоопределениеПринтера);
	ИначеЕсли (ИмяМакета = "ЗаборныйЛист") Тогда
		ТабДокумент = ПечатьЗаборногоЛиста(АвтоопределениеПринтера);
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
	Возврат Истина;
	
КонецФункции // Печать()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(АвтоопределениеПринтера = Ложь) Экспорт
	
	Если АвтоопределениеПринтера Тогда
		ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.Принтеры);
		Если (ПринтерПечати = Неопределено) Тогда
			Возврат Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	УчитыватьНДС = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтчетПроизводстваЗаСмену.Номер,
	               |	ОтчетПроизводстваЗаСмену.Дата,
	               |	ОтчетПроизводстваЗаСмену.ВидОперации,
	               |	ОтчетПроизводстваЗаСмену.Ресторан,
	               |	ОтчетПроизводстваЗаСмену.Ресторан КАК Поставщик,
	               |	ОтчетПроизводстваЗаСмену.Сотрудник КАК Отпустил,
	               |	ОтчетПроизводстваЗаСмену.Комментарий,
	               |	ОтчетПроизводстваЗаСмену.СуммаДокумента
	               |ИЗ
	               |	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	               |ГДЕ
	               |	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗапросПоТоварам.НомерСтроки,
	               |	ЗапросПоТоварам.Владелец,
	               |	ЗапросПоТоварам.Идентификатор,
	               |	ЗапросПоТоварам.Номенклатура,
	               |	ЗапросПоТоварам.ЕдиницаИзмерения,
	               |	ЗапросПоТоварам.Количество,
	               |	ЗапросПоТоварам.Цена,
	               |	ЗапросПоТоварам.СтавкаНДС,
	               |	ЗапросПоТоварам.Сумма,
	               |	ЗапросПоТоварам.СуммаНДС,
	               |	ЗапросПоТоварам.Номенклатура.Код КАК Код,
	               |	ЗапросПоТоварам.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	               |	ВЫРАЗИТЬ(ЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ОтчетПроизводстваЗаСменуТовары.НомерСтроки КАК НомерСтроки,
	               |		ОтчетПроизводстваЗаСменуТовары.Владелец КАК Владелец,
	               |		ОтчетПроизводстваЗаСменуТовары.Идентификатор КАК Идентификатор,
	               |		ОтчетПроизводстваЗаСменуТовары.Номенклатура КАК Номенклатура,
	               |		ОтчетПроизводстваЗаСменуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		СУММА(ОтчетПроизводстваЗаСменуТовары.Количество) КАК Количество,
	               |		ОтчетПроизводстваЗаСменуТовары.Цена КАК Цена,
	               |		ОтчетПроизводстваЗаСменуТовары.СтавкаНДС КАК СтавкаНДС,
	               |		СУММА(ОтчетПроизводстваЗаСменуТовары.Сумма) КАК Сумма,
	               |		СУММА(ОтчетПроизводстваЗаСменуТовары.СуммаНДС) КАК СуммаНДС
	               |	ИЗ
	               |		Документ.ОтчетПроизводстваЗаСмену.Товары КАК ОтчетПроизводстваЗаСменуТовары
	               |	ГДЕ
	               |		ОтчетПроизводстваЗаСменуТовары.Ссылка = &ТекущийДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ОтчетПроизводстваЗаСменуТовары.Номенклатура,
	               |		ОтчетПроизводстваЗаСменуТовары.ЕдиницаИзмерения,
	               |		ОтчетПроизводстваЗаСменуТовары.Владелец,
	               |		ОтчетПроизводстваЗаСменуТовары.Идентификатор,
	               |		ОтчетПроизводстваЗаСменуТовары.Цена,
	               |		ОтчетПроизводстваЗаСменуТовары.СтавкаНДС,
	               |		ОтчетПроизводстваЗаСменуТовары.НомерСтроки) КАК ЗапросПоТоварам";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_Накладная";
	
	Макет = ПолучитьМакет("Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьМакетаЗаголовок				= Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаВидОперации			= Макет.ПолучитьОбласть("ВидОперации");
	ОбластьМакетаПоставщик				= Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакетаДопИнформация			= Макет.ПолучитьОбласть("ДопИнформация");
	ОбластьМакетаОтступ 				= Макет.ПолучитьОбласть("Отступ");
	ОбластьМакетаШапкаТаблицы			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаСтрокаКомментарий 		= Макет.ПолучитьОбласть("СтрокаКомментарий");
	ОбластьМакетаСтрока 				= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого 					= Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаИтогоНДС				= Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакетаПодписи				= Макет.ПолучитьОбласть("Подписи");

	// Заголовок.
	ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заборный лист';uk='Заборний лист'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	// Вид операции.
	ОбластьМакетаВидОперации.Параметры.ВидОперации = СокрЛП(Строка(Шапка.ВидОперации));
	ТабДокумент.Вывести(ОбластьМакетаВидОперации);
	
	// Поставщик.
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакетаПоставщик.Параметры.Заполнить(Шапка);
	ОбластьМакетаПоставщик.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакетаПоставщик.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,/,Телефоны,Факсы,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакетаПоставщик);
	
	СписокДополнительныхПараметров = "";
	
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакетаДопИнформация.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакетаДопИнформация);
	КонецЦикла;		
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;
	
	// Табличная часть.
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;                        	
	
	Суффикс = "";
	
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Сумма    = 0;
	СуммаНДС = 0;
	
	Для каждого ВыборкаСтрокДерева из ЗапросТовары Цикл 
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокДерева.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокДерева);
		ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрокДерева.НомерСтроки;
		ОбластьМакета.Параметры.Товар   	= СокрЛП(ВыборкаСтрокДерева.Товар);			
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокДерева.КодАртикул;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		Сумма    = Сумма    + ВыборкаСтрокДерева.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокДерева.СуммаНДС;          
		
	КонецЦикла;
	
	// Итого.
	ОбластьМакетаИтого.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// ИтогоНДС.
	Если УчитыватьНДС Тогда
		
		ОбластьМакетаИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакетаИтогоНДС.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакетаИтогоНДС);
		
		// всего с НДС (если сумма не включает НДС)
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьМакетаИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ОбластьМакетаИтогоНДС.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Вывести(ОбластьМакетаИтогоНДС);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Сумма прописью.
	СуммаВключаетНДС = Истина;
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
	НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить()) + ".";
	
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить(),КодЯзыкаПечать)
	+ ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать));
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Подписи.
	ОбластьМакетаПодписи.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакетаПодписи);
	
	Если АвтоопределениеПринтера Тогда
		ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
		ТабДокумент = Неопределено;
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьДокумента()

Функция ПечатьЗаборногоЛиста(АвтоопределениеПринтера = Ложь) Экспорт
	
	Если АвтоопределениеПринтера Тогда
		ПринтерПечати = ПолучитьСерверТО().ПолучитьПервоеУстройство(Перечисления.ВидыТорговогоОборудования.ПринтерыПречеков);
		Если (ПринтерПечати = Неопределено) Тогда
			Возврат Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	// Данные для печати
	РезультатЗапросаШапка 	= СформироватьЗапросДляПечати("ПоРеквизитамДокумента");
	РезультатЗапросаТовары 	= СформироватьЗапросДляПечати("ПоТабличнойЧастиТовары");
	
	// Шапка
	Шапка = РезультатЗапросаШапка.Выбрать();
	Шапка.Следующий();
	
	// Товары
	ВыборкаТовары = РезультатЗапросаТовары.Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_ЗаборныйЛист";
	
	Макет = ПолучитьМакет("ЗаборныйЛист");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Области макета
	ОбластьМакетаЗаголовок		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаВидОперации	= Макет.ПолучитьОбласть("ВидОперации");
	ОбластьМакетаДата			= Макет.ПолучитьОбласть("Дата");
	ОбластьМакетаШапкаТаблицы	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого 			= Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодписи		= Макет.ПолучитьОбласть("Подписи");
	ОбластьМакетаОтступ 		= Макет.ПолучитьОбласть("Отступ");
	
	// Заголовок
	//ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = НСтр("ru='Заборный лист';uk='Заборний лист'", КодЯзыкаПечать) + " № " + СокрЛП(Шапка.Номер);
	ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заборный лист';uk='Забірний лист'", КодЯзыкаПечать), КодЯзыкаПечать, Истина);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	// Вид операции
	ОбластьМакетаВидОперации.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакетаВидОперации);
	
	// Дата печати
	//ОбластьМакетаДата.Параметры.Заполнить(Шапка);
	ОбластьМакетаДата.Параметры.Дата = ТекущаяДата();
	ТабДокумент.Вывести(ОбластьМакетаДата);
	
	// Шапка таблицы
	ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
	
	// Товары
	Итого = 0;
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаТовары);
		ОбластьМакетаСтрока.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(ВыборкаТовары.Сумма);
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		//Итого = Итого + ВыборкаТовары.Сумма;
		
	КонецЦикла;
	
	// Отступ
	ТабДокумент.Вывести(ОбластьМакетаОтступ);
	
	// Итого
	//ОбластьМакетаИтого.Параметры.Итого = ОбщегоНазначения.ФорматСумм(Итого);
	ОбластьМакетаИтого.Параметры.Итого = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Подписи
	ОбластьМакетаПодписи.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакетаПодписи);
	
	Если АвтоопределениеПринтера Тогда
		ОшибкаТО = ПолучитьСерверТО().ПечатьДокумента(ПринтерПечати, ТабДокумент);
		ТабДокумент = Неопределено;
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции


#КонецЕсли
