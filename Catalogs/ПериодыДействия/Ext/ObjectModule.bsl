
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Нормализация.
	МассивУдаляемых = Новый Массив; Для Каждого СтрокаТабличнойЧасти Из Периодические Цикл
		Если Не __ОбщегоНазначенияКлиентСервер.ЗначенияЗаполненныОбъединение(СтрокаТабличнойЧасти, "МесяцГода,ДеньНедели,ВремяНачала,ВремяОкончания") Тогда
			Периодические.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли; 
	КонецЦикла;
	__ОбщегоНазначенияКлиентСервер.УдалитьСтроки(Периодические, МассивУдаляемых);
	
	МассивУдаляемых = Новый Массив; Для Каждого СтрокаТабличнойЧасти Из Астрономические Цикл
		Если Не __ОбщегоНазначенияКлиентСервер.ЗначенияЗаполненныОбъединение(СтрокаТабличнойЧасти, "ДатаНачала,ДатаОкончания,ВремяНачала,ВремяОкончания") Тогда
			Астрономические.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли; 
	КонецЦикла;
	__ОбщегоНазначенияКлиентСервер.УдалитьСтроки(Астрономические, МассивУдаляемых);

	
	// Проверка.
	Если Не Астрономические.Количество() + Периодические.Количество() Тогда
		Отказ = Истина; // ERR
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ)

	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Комбинированные.
	Если Не Отказ Тогда
		Если Не ЭтоГруппа Тогда
			
			Если Периодические.Количество() Тогда
				КоллекцияПериодических = Периодические;
			Иначе
				КоллекцияПериодических = Новый Массив;
				КоллекцияПериодических.Добавить(Новый Структура("МесяцГода,ДеньНедели,ВремяНачала,ВремяОкончания",
					Перечисления.МесяцаГода.ПустаяСсылка(),
					Перечисления.ДниНедели.ПустаяСсылка(),
					'00010101',
					'00010101'));
			КонецЕсли; 
			Если Астрономические.Количество() Тогда
				КоллекцияАстрономических = Астрономические;
			Иначе
				КоллекцияАстрономических = Новый Массив;
				КоллекцияАстрономических.Добавить(Новый Структура("ДатаНачала,ДатаОкончания,ВремяНачала,ВремяОкончания",
					'00010101',
					'00010101',
					'00010101',
					'00010101'));
			КонецЕсли; 
			Комбинированные.Очистить();
			
			Для Каждого СтрокаПериодическойТабличнойЧасти Из КоллекцияПериодических Цикл
				Для Каждого СтрокаАстрономическойТабличнойЧасти Из КоллекцияАстрономических Цикл
					
					ДатаНачала = СтрокаАстрономическойТабличнойЧасти.ДатаНачала;
					Если ЗначениеЗаполнено(СтрокаАстрономическойТабличнойЧасти.ДатаОкончания) Тогда
						ДатаОкончания = СтрокаАстрономическойТабличнойЧасти.ДатаОкончания;
					Иначе
						ДатаОкончания = __ОбщегоНазначенияКлиентСервер.МаксДата();
					КонецЕсли; 
					ВремяНачала = Макс(СтрокаПериодическойТабличнойЧасти.ВремяНачала, СтрокаАстрономическойТабличнойЧасти.ВремяНачала);
					Если ЗначениеЗаполнено(СтрокаПериодическойТабличнойЧасти.ВремяОкончания) И ЗначениеЗаполнено(СтрокаАстрономическойТабличнойЧасти.ВремяОкончания) Тогда
						ВремяОкончания = Мин(СтрокаПериодическойТабличнойЧасти.ВремяОкончания, СтрокаАстрономическойТабличнойЧасти.ВремяОкончания);
					Иначе
						ВремяОкончания = Макс(СтрокаПериодическойТабличнойЧасти.ВремяОкончания, СтрокаАстрономическойТабличнойЧасти.ВремяОкончания);
					КонецЕсли; 
					НомерДняНедели = Перечисления.ДниНедели.НомерДняНедели(СтрокаПериодическойТабличнойЧасти.ДеньНедели);
					НомерМесяцаГода = Перечисления.МесяцаГода.НомерМесяцаГода(СтрокаПериодическойТабличнойЧасти.МесяцГода);
					Раздвоение = ЗначениеЗаполнено(ВремяОкончания) И (ВремяНачала > ВремяОкончания);
					
					СтрокаКомбинированнойТабличнойЧасти = Комбинированные.Добавить();
					СтрокаКомбинированнойТабличнойЧасти.ДатаНачала = ДатаНачала;
					СтрокаКомбинированнойТабличнойЧасти.ДатаОкончания = ДатаОкончания;
					Если Раздвоение Тогда
						СтрокаКомбинированнойТабличнойЧасти.ВремяНачала = Неопределено;
						СтрокаКомбинированнойТабличнойЧасти.ВремяОкончания = ВремяОкончания;
					Иначе
						СтрокаКомбинированнойТабличнойЧасти.ВремяНачала = ВремяНачала;
						Если ЗначениеЗаполнено(ВремяОкончания) Тогда
							СтрокаКомбинированнойТабличнойЧасти.ВремяОкончания = ВремяОкончания;
						Иначе
							СтрокаКомбинированнойТабличнойЧасти.ВремяОкончания = __ОбщегоНазначенияКлиентСервер.МаксДата();
						КонецЕсли; 
					КонецЕсли; 
					СтрокаКомбинированнойТабличнойЧасти.ДеньНедели = СтрокаПериодическойТабличнойЧасти.ДеньНедели;
					СтрокаКомбинированнойТабличнойЧасти.МесяцГода = СтрокаПериодическойТабличнойЧасти.МесяцГода;
					СтрокаКомбинированнойТабличнойЧасти.НомерДняНедели = НомерДняНедели;
					СтрокаКомбинированнойТабличнойЧасти.НомерМесяцаГода = НомерМесяцаГода;
					
					Если Раздвоение Тогда
						СтрокаКомбинированнойТабличнойЧасти = Комбинированные.Добавить();
						СтрокаКомбинированнойТабличнойЧасти.ДатаНачала = ДатаНачала;
						СтрокаКомбинированнойТабличнойЧасти.ДатаОкончания = ДатаОкончания;
						СтрокаКомбинированнойТабличнойЧасти.ВремяНачала = ВремяНачала;
						СтрокаКомбинированнойТабличнойЧасти.ВремяОкончания = __ОбщегоНазначенияКлиентСервер.МаксДата();
						СтрокаКомбинированнойТабличнойЧасти.ДеньНедели = СтрокаПериодическойТабличнойЧасти.ДеньНедели;
						СтрокаКомбинированнойТабличнойЧасти.МесяцГода = СтрокаПериодическойТабличнойЧасти.МесяцГода;
						СтрокаКомбинированнойТабличнойЧасти.НомерДняНедели = НомерДняНедели;
						СтрокаКомбинированнойТабличнойЧасти.НомерМесяцаГода = НомерМесяцаГода;
					КонецЕсли; 
					
				КонецЦикла; 
			КонецЦикла; 
		
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)

	// При обмене данными ничего не проверяем.
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Реконфигурация.
	Если Не Отказ Тогда
		Если Не ЭтоГруппа Тогда
			РегистрыСведений.ПериодыДействия.ПриЗаписиПериодаДействия(ЭтотОбъект, Отказ);
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры // ПриЗаписи()
