
Функция Ping()
	
	// Доступности сервиса.
	Возврат __ВебСервисСервер.ПолучитьДоступностьСервиса();
	
КонецФункции // Ping()

Функция Версия()
	
	// Проверака доступности сервиса.
	__ВебСервисСервер.ПроверитьДоступностьСервиса();
	
	// Версия.
	Возврат Метаданные.Версия;
	
КонецФункции // Версия()

Функция Загрузка(Модуль)
	
	// Проверака доступности сервиса.
	__ВебСервисСервер.ПроверитьДоступностьСервиса();
	
	// Модуль.
	Если ПустаяСтрока(Модуль) Тогда
		Макет = "Загрузка";
	Иначе
		Макет = Модуль;
	КонецЕсли;
	
	// Проверка.
	Если (Метаданные.РегистрыСведений.__НастройкиВебСервиса.Макеты.Найти(Макет) = Неопределено) Тогда
		ВызватьИсключение НСтр("ru = 'Не найден модуль.'; uk = 'Не знайдено модуль.'");
	КонецЕсли;
	
	// Получене модуля.
	Возврат РегистрыСведений.__НастройкиВебСервиса.ПолучитьМакет(Макет).ПолучитьТекст();
	
КонецФункции // Загрузка()

Функция НачалоСеанса(Устройство, Наименование, Пароль, Восстановление = Ложь)
	
	// Начало сеанса.
	Результат = __ВебСервисСервер.НачалоСеанса(Устройство, Пароль, Восстановление);
	Возврат __В(Результат);
	
КонецФункции // НачалоСеанса()

Функция ПараметрыСеанса(Сеанс)

	// Восстановление сеанса.
	__ВебСервисСервер.ВосстановлениеСеанса(__Из(Сеанс));
	
	// Результат.
	Возврат __В(Новый Структура("ГруппаПользователей,Пользователь,РежимРаботы,Сотрудник,Компьютер",
		Строка(ПараметрыСеанса.ТекущаяГруппаПользователей),
		Строка(ПараметрыСеанса.ТекущийПользователь),
		Строка(ПараметрыСеанса.ТекущийРежимРаботы),
		Строка(ПараметрыСеанса.ТекущийСотрудник),
		Строка(ПараметрыСеанса.ТекущийКомпьютер)));
	
КонецФункции // ПараметрыСеанса()

Функция ПродлениеСеанса(Сеанс)
	
	// Продление сеанса.
	__ВебСервисСервер.ПродлениеСеанса(__Из(Сеанс));
	Возврат Истина;
	
КонецФункции // ПродлениеСеанса()

Функция ЗавершениеСеанса(Сеанс)
	
	// Завршение сеанса.
	__ВебСервисСервер.ЗавершениеСеанса(__Из(Сеанс));
	Возврат Истина;
	
КонецФункции // ЗавершениеСеанса()

Функция ВосстановитьЗначение(Сеанс, Имя)
	
	// Восстановление значения.
	Возврат __В(__ВебСервисСервер.ВосстановитьЗначениеСеанса(__Из(Сеанс), Имя));
							
КонецФункции // ВосстановитьЗначение()

Функция СохранитьЗначение(Сеанс, Имя, Значение)
	
	// Сохранение значения.
	__ВебСервисСервер.СохранитьЗначениеСеанса(__Из(Сеанс), Имя, __Из(Значение));
	Возврат Истина;
							
КонецФункции // СохранитьЗначение()

Функция ВычислитьЗначение(Сеанс, Значение)
	
	// Восстановление сеанса.
	__ВебСервисСервер.ВосстановлениеСеанса(__Из(Сеанс));
	
	// Результат.
	Возврат __В(Вычислить(Значение));

КонецФункции // ВычислитьЗначение()

Функция ПолучитьПредопределенноеЗначение(Сеанс, Значение)
	
	// Восстановление сеанса.
	__ВебСервисСервер.ВосстановлениеСеанса(__Из(Сеанс));
	
	// Значение.
	Результат = __Из(Значение);
	Если (ТипЗнч(Результат) = Тип("Строка")) Тогда
		Результат = ПредопределенноеЗначение(Результат);
	Иначе
		Для Каждого Элемент Из Результат Цикл
			Результат[Элемент.Ключ] = ПредопределенноеЗначение(Элемент.Значение); 
		КонецЦикла;
	КонецЕсли;
	
	// Результат.
	Возврат __В(Результат);

КонецФункции // ПолучитьПредопределенноеЗначение()

Функция Ощибка()
	
	ВызватьИсключение "Тестовая ошибка ;)";
	
КонецФункции

Функция json(Параметр)
	
	Результат = __Из(Параметр);
	
	Параметр = __В(Результат);
	
	Возврат __В(Результат);
	
КонецФункции

Функция __test(__in, __out)

	Возврат ТекущаяДата();
	
КонецФункции

Функция StartSession(Device, Name, Password, Recovery = False)
	
	// Начало сеанса.
	Результат = __ВебСервисСервер.НачалоСеанса(Device, Password, Recovery);
	
	// Результат.
	Возврат __В(Результат);
	
КонецФункции

Функция RestoreValue(Session, Name)
	
	// Восстановление значения.
	Возврат __В(__ВебСервисСервер.ВосстановитьЗначениеСеанса(__Из(Session), Name));

КонецФункции

Функция CalculateValue(Session, Value)
	
	// Восстановление сеанса.
	__ВебСервисСервер.ВосстановлениеСеанса(__Из(Session));
	
	// Результат.
	Возврат __В(Вычислить(Value));
	
КонецФункции

Функция CompletionSession(Session)
	
	// Завршение сеанса.
	__ВебСервисСервер.ЗавершениеСеанса(__Из(Session));
	
	Возврат Истина;
	
КонецФункции

Функция Loading(Module)
	
	// Проверака доступности сервиса.
	__ВебСервисСервер.ПроверитьДоступностьСервиса();
	
	// Модуль.
	Если ПустаяСтрока(Module) Тогда
		Макет = "Загрузка";
	Иначе
		Макет = Module;
	КонецЕсли;
	
	// Проверка.
	Если (Метаданные.РегистрыСведений.__НастройкиВебСервиса.Макеты.Найти(Макет) = Неопределено) Тогда
		ВызватьИсключение НСтр("ru = 'Не найден модуль.'; uk = 'Не знайдено модуль.'");
	КонецЕсли;
	
	// Получене модуля.
	Возврат РегистрыСведений.__НастройкиВебСервиса.ПолучитьМакет(Макет).ПолучитьТекст();
	
КонецФункции

Функция Error()
	
	ВызватьИсключение "Тестовая ошибка ;)";
	
КонецФункции

Функция PredeterminedValue(Session, Value)
	
	// Восстановление сеанса.
	__ВебСервисСервер.ВосстановлениеСеанса(__Из(Session));
	
	// Значение.
	Результат = __Из(Value);
	Если (ТипЗнч(Результат) = Тип("Строка")) Тогда
		Результат = ПредопределенноеЗначение(Результат);
	Иначе
		Для Каждого Элемент Из Результат Цикл
			Результат[Элемент.Ключ] = ПредопределенноеЗначение(Элемент.Значение); 
		КонецЦикла;
	КонецЕсли;
	
	// Результат.
	Возврат __В(Результат);
	
КонецФункции

Функция ExtendingSession(Session)
	
	// Продление сеанса.
	__ВебСервисСервер.ПродлениеСеанса(__Из(Session));
	
	Возврат Истина;
	
КонецФункции

Функция SaveValue(Session, Name, Value)
	
	// Сохранение значения.
	__ВебСервисСервер.СохранитьЗначениеСеанса(__Из(Session), Name, __Из(Value));
	
	Возврат Истина;
	
КонецФункции

Функция SessionOptions(Session)
	
	// Восстановление сеанса.
	__ВебСервисСервер.ВосстановлениеСеанса(__Из(Session));
	
	// Результат.
	Возврат __В(Новый Структура("ГруппаПользователей,Пользователь,РежимРаботы,Сотрудник,Компьютер",
	Строка(ПараметрыСеанса.ТекущаяГруппаПользователей),
	Строка(ПараметрыСеанса.ТекущийПользователь),
	Строка(ПараметрыСеанса.ТекущийРежимРаботы),
	Строка(ПараметрыСеанса.ТекущийСотрудник),
	Строка(ПараметрыСеанса.ТекущийКомпьютер)));
	
КонецФункции

Функция Version()
	
	// Проверака доступности сервиса.
	__ВебСервисСервер.ПроверитьДоступностьСервиса();
	
	// Версия.
	Возврат Метаданные.Версия;
	
КонецФункции
