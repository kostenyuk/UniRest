
&НаКлиенте
Функция ПолучитьНаименование()

	////Костенюк Александр-Закомментировано 14.01.2015
	//Если ЗначениеЗаполнено(Объект.ВидСертификата) И (Не ПустаяСтрока(Объект.КодСертификата)) Тогда
	//	Возврат Шаблон("[ВидСертификата] № [КодСертификата]", 
	//	Новый Структура("ВидСертификата,КодСертификата", Объект.ВидСертификата, Объект.КодСертификата));
	//КонецЕсли;
	////Костенюк Александр-Закомментировано 14.01.2015
	
	Возврат "№" + Объект.КодСертификата; 
		
КонецФункции // ПолучитьНаименование()

&НаСервере
Функция ПолучитьНаименованиеНаСервере()

	Если ЗначениеЗаполнено(Объект.ВидСертификата) И (Не ПустаяСтрока(Объект.КодСертификата)) Тогда
		Возврат Шаблон("[ВидСертификата] № [КодСертификата]", 
			Новый Структура("ВидСертификата,КодСертификата", Объект.ВидСертификата, Объект.КодСертификата));
	КонецЕсли; 
	
	Возврат "№ " + Объект.КодСертификата; 
		
КонецФункции // ПолучитьНаименованиеНаСервере()


&НаКлиенте
Процедура КодСертификатаПриИзменении(Элемент)
	
	// Автоматическое формирование наименования.
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеСформировать(ФормироватьНаименованиеАвтоматически, Объект.Наименование, ПолучитьНаименование(), Элементы.Наименование);
	
КонецПроцедуры // КодСертификатаПриИзменении()

&НаКлиенте
Процедура ВидСертификатаПриИзменении(Элемент)
	
	// Автоматическое формирование наименования.
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеСформировать(ФормироватьНаименованиеАвтоматически, Объект.Наименование, ПолучитьНаименование(), Элементы.Наименование);
	
	// Настройка формы.
	ВидСертификатаПриИзмененииСервер();
	
КонецПроцедуры // ВидСертификатаПриИзменении()

&НаСервере
Процедура ВидСертификатаПриИзмененииСервер()
	
	Элементы.ВидСертификата.ТолькоПросмотр = Объект.Ссылка.ВидСертификата.OnLine;
	Элементы.КодСертификата.ТолькоПросмотр = Элементы.ВидСертификата.ТолькоПросмотр;
	Элементы.Сумма.ТолькоПросмотр = Элементы.ВидСертификата.ТолькоПросмотр;
	Элементы.ДекорацияИзменитьАктуальность.Видимость = (Не Элементы.ВидСертификата.ТолькоПросмотр);
	Элементы.ТипШтрихкода.ТолькоПросмотр = Элементы.ВидСертификата.Доступность;
	Элементы.Штрихкод.ТолькоПросмотр = Элементы.ВидСертификата.ТолькоПросмотр;
	
	Элементы.ДисконтнаяКарта.Доступность = (Не Элементы.ВидСертификата.ТолькоПросмотр) И Объект.ВидСертификата.НеобходимаДисконтнаяКатрочка;
	Элементы.Пароль.Доступность = (Не Элементы.ВидСертификата.ТолькоПросмотр) И Объект.ВидСертификата.НеобходимПароль;
	
	Элементы.ДисконтнаяКарта.АвтоОтметкаНезаполненного = Элементы.ДисконтнаяКарта.Доступность;
	Элементы.Пароль.АвтоОтметкаНезаполненного = Элементы.Пароль.Доступность;
	
	Объект.НоминалПогашения = Объект.ВидСертификата.НоминалПогашения; //Костенюк Александр 12.12.2014

КонецПроцедуры // ВидСертификатаПриИзменении()

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// Автоматическое формирование наименования.
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеУстановитьПризнак(ФормироватьНаименованиеАвтоматически, Объект.Наименование, ПолучитьНаименование(), Элементы.Наименование);
	
КонецПроцедуры // НаименованиеПриИзменении()

&НаКлиенте
Процедура ДекорацияИзменитьАктуальностьНажатие(Элемент)

	// Настройка формы.
	ДекорацияИзменитьАктуальностьНажатиеСервер();
	
КонецПроцедуры // ДекорацияИзменитьАктуальностьНажатие()

&НаСервере
Процедура ДекорацияИзменитьАктуальностьНажатиеСервер()
	
	// Настройка формы.
	Элементы.Актуальность.Видимость = Истина;
	Элементы.ДекорацияАктуальность.Видимость = Ложь;
	Элементы.ДекорацияНеАктуальность.Видимость = Ложь;
	Элементы.ДекорацияИзменитьАктуальность.Видимость = Ложь;

КонецПроцедуры // ДекорацияИзменитьАктуальностьНажатие()


&НаКлиенте
Процедура ТипШтрихкодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Штрихкод.ТипШтрихкода) Тогда
		Штрихкод.ТипШтрихкода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");
	КонецЕсли; 
	
КонецПроцедуры // ТипШтрихкодаПриИзменении()

&НаКлиенте
Процедура ШтрихкодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ШтрихкодНачалоВыбораСервер();
	
КонецПроцедуры // ШтрихкодНачалоВыбора()

&НаСервере
Процедура ШтрихкодНачалоВыбораСервер()
	
	Штрихкод.Штрихкод = РегистрыСведений.Штрихкоды.СформироватьШтрихКод(Неопределено, Штрихкод.ТипШтрихкода);
	
КонецПроцедуры // ШтрихкодНачалоВыбораСервер()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Данные.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииНаСервере(Объект);	
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Автоматическое формирование наименования.
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеУстановитьПризнак(ФормироватьНаименованиеАвтоматически, Объект.Наименование, ПолучитьНаименованиеНаСервере(), Элементы.Наименование);
	
	// Штрих код.
	ЗначениеВРеквизитФормы(РегистрыСведений.Штрихкоды.ПолучитьПараметрыШтрихКода(ТекущийОбъект), "Штрихкод");
	
	// Настройка формы.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДекорацияИзменитьАктуальностьНажатиеСервер();
	Иначе
		Элементы.Актуальность.Видимость = Ложь;
		Элементы.ДекорацияАктуальность.Видимость = Объект.Актуальность;
		Элементы.ДекорацияНеАктуальность.Видимость = Не Объект.Актуальность;
		Элементы.ДекорацияИзменитьАктуальность.Видимость = Истина;
	КонецЕсли;
	
	ВидСертификатаПриИзмененииСервер();

КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Штрих код.
	РегистрыСведений.Штрихкоды.УстановитьШтрихКод(ТекущийОбъект, Штрихкод.ТипШтрихкода, Штрихкод.Штрихкод, Отказ);
	
КонецПроцедуры // ПриЗаписиНаСервере()
