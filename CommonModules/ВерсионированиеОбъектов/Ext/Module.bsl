
// Возвращает количество версий объекта переданного по ссылке
// Параметры
// Объект        - СправочникСсылка/ДокументСсылка - ссылка на объект ИБ
// Возвращаемое значение
// Число         - количество версий объекта Объект в регистре сведений ВерсииОбъектов
//
Функция ПолучитьКоличествоВерсийОбъекта(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(НомерВерсии) КАК Количество
	| ИЗ РегистрСведений.ВерсииОбъектов
	| ГДЕ Объект=&Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Число(Выборка.Количество);
	
КонецФункции

// Удаляет хранимые версии объекта по ссылке Ссылка из регистра ВерсииОбъектов
//
Процедура УдалитьХранимыеВерсииПоОбъекту(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	НаборЗаписей.Отбор.Объект.Значение = Ссылка;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняется при обновлении конфигурации.
// 1. Очищает настройки версионирования по объектам, для которых версионирование не применено
// 2. Устанавливает настройки версионирования по умолчанию
//
Процедура ОбновитьНастройкиВерсионированияОбъектов() Экспорт
	
	ВерсионируемыеОбъекты = ПолучитьВерсионируемыеОбъекты();
	
	ВыборкаЗаписей = РегистрыСведений.НастройкаВерсионированияОбъектов.Выбрать();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ВерсионируемыеОбъекты.Найти(ВыборкаЗаписей.ТипОбъекта) = Неопределено Тогда
			МенеджерЗаписи = ВыборкаЗаписей.ПолучитьМенеджерЗаписи();
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	// составной тип из строки и ссылки на справочник Номенклатуры.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	ВерсионируемыеОбъектыТЗ = Новый ТаблицаЗначений;
	ВерсионируемыеОбъектыТЗ.Колонки.Добавить("ТипОбъекта", 
	Новый ОписаниеТипов(МассивТипов, , Метаданные.РегистрыСведений.НастройкаВерсионированияОбъектов.Измерения.ТипОбъекта.Тип.КвалификаторыСтроки) );
	Для Каждого ТипОбъекта Из ВерсионируемыеОбъекты Цикл
		ВерсионируемыеОбъектыТЗ.Добавить();
	КонецЦикла;
	ВерсионируемыеОбъектыТЗ.ЗагрузитьКолонку(ВерсионируемыеОбъекты, "ТипОбъекта");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсионируемыеОбъекты.ТипОбъекта
	|ПОМЕСТИТЬ ТаблицаВерсионируемыхОбъектов
	|ИЗ
	|	&ВерсионируемыеОбъекты КАК ВерсионируемыеОбъекты
	|;
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВерсионируемыхОбъектов.ТипОбъекта
	|ИЗ
	|	ТаблицаВерсионируемыхОбъектов КАК ТаблицаВерсионируемыхОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаВерсионированияОбъектов КАК НастройкаВерсионированияОбъектов
	|			ПО НастройкаВерсионированияОбъектов.ТипОбъекта = ТаблицаВерсионируемыхОбъектов.ТипОбъекта
	|ГДЕ
	|	НастройкаВерсионированияОбъектов.Вариант ЕСТЬ NULL ";
	
	Запрос.Параметры.Вставить("ВерсионируемыеОбъекты", ВерсионируемыеОбъектыТЗ);
	ВерсионируемыеОбъектыБезНастройки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипОбъекта");
	
	НаборЗаписейНастроек = РегистрыСведений.НастройкаВерсионированияОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейНастроек.Прочитать();
	Для Каждого ВерсионируемыйОбъект Из ВерсионируемыеОбъектыБезНастройки Цикл
		НоваяЗапись = НаборЗаписейНастроек.Добавить();
		НоваяЗапись.ТипОбъекта = ВерсионируемыйОбъект;
		НоваяЗапись.Вариант = ПолучитьНастройкуВерсионированияПоУмолчанию(ВерсионируемыйОбъект);
		НоваяЗапись.Использовать = ? (НоваяЗапись.Вариант = Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать, Ложь, Истина);
	КонецЦикла;
	
	НаборЗаписейНастроек.Записать(Истина);
	
КонецПроцедуры

// Получает объекты информационной базы, для которых применена подсистема версионирования
// Возвращаемое значение
// Массив, элемент массива - строка, идентифицирующая объект метаданных в формате
//                           Справочник.<Имя справочника> или Документ.<Имя документа>
//
Функция ПолучитьВерсионируемыеОбъекты()
	
	Результат = Новый Массив;
	
	Для Каждого ЭлементМетаданных Из Метаданные.Справочники Цикл
		Если Метаданные.ОбщиеКоманды.ИсторияИзменений.ТипПараметраКоманды.СодержитТип(
			Тип("СправочникСсылка."+ЭлементМетаданных.Имя)) Тогда
			Результат.Добавить(ЭлементМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
		Если Метаданные.ОбщиеКоманды.ИсторияИзменений.ТипПараметраКоманды.СодержитТип(
			Тип("ДокументСсылка."+ЭлементМетаданных.Имя)) Тогда
			Результат.Добавить(ЭлементМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкуВерсионированияПоУмолчанию(ПолноеИмя)
	
	РазложенныйПуть = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
	
	Если	РазложенныйПуть[0] = "Документы" Тогда
		Если Метаданные.НайтиПоПолномуИмени(ПолноеИмя).Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Возврат Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении;
		Иначе
			Возврат Перечисления.ВариантыВерсионированияОбъектов.Версионировать;
		КонецЕсли
	КонецЕсли;
	
	Возврат Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блок функций для работы с настройками значений

// Записывает настройку версионирования по объекту в регистр сведений
//
Процедура ЗаписатьНастройкуВерсионированияПоОбъекту(
	Объект,
	ВариантВерсионирования) Экспорт
	
	ВариантМВ = РегистрыСведений.НастройкаВерсионированияОбъектов.СоздатьМенеджерЗаписи();
	ВариантМВ.ТипОбъекта = Объект;
	ВариантМВ.Вариант = ВариантВерсионирования;
	ВариантМВ.Записать();
	
КонецПроцедуры

// Выполняет с формой действия, необходимые для подключения подсистемы версионирования
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ИмяФормыМассив = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
		ПолноеИмяМетаданных = ИмяФормыМассив[0] + "." + ИмяФормыМассив[1];
	Иначе
		ПолноеИмяМетаданных = Неопределено;
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипОбъектаКонфигурации", ПолноеИмяМетаданных));
	
КонецПроцедуры

// Возвращает версию адресных объектов, записанную при последнем обновлении
// Если записи об адресном объекте нет - возвращается дата 01.09.2008
// Возвращаемое значение
// Массив соответствий: ключ - номер адресного объекта, значение - дата выпуска версии
//
Функция ПолучитьВерсииАдресныхОбъектов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать АдресныйОбъект, ДатаВыпускаВерсии
	|ИЗ РегистрСведений.ВерсииОбъектовАдресногоКлассификатора";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Результат.Вставить(ВыборкаЗапроса.АдресныйОбъект, ВыборкаЗапроса.ДатаВыпускаВерсии);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Функция СоздатьСтруктуруДействий(Действие = Неопределено, ЧтоИзменялось = Неопределено, Количество = Неопределено, Коментарий = Неопределено ) Экспорт
	
	Действия = Новый Структура;	
	Действия.Вставить("Действие", Действие);
	Действия.Вставить("ЧтоИзменялось", ЧтоИзменялось);
	Действия.Вставить("Количество", Количество);
	Действия.Вставить("Коментарий", Коментарий);	
	Возврат Действия;
	
КонецФункции

Функция ПолучитьПредыдущуюВерсию(СсылкаНаОбъект, мТаблица = Неопределено) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СсылкаНаОбъект= СсылкаНаОбъект.ПолучитьОбъект();
	КонецЕсли;
	
	Если мТаблица = Неопределено Тогда
		мТаблица = Новый ТаблицаЗначений;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииОбъектов.АвторВерсии,
	|	ВерсииОбъектов.ДатаВерсии,
	|	ВерсииОбъектов.ВерсияОбъекта,
	|	ВерсииОбъектов.НомерВерсии КАК НомерВерсии,
	|	ВерсииОбъектов.КомпьютерВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.Объект = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВерсии УБЫВ";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.Ссылка);	
	
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)); 	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Для каждого стр Из  МетаданныеОбъекта.Реквизиты Цикл
	//	Если мТаблица.Колонки.Найти(стр.Имя) = Неопределено Тогда
	//		мТаблица.Колонки.Добавить(стр.Имя, стр.Тип, стр.Синоним);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для каждого стр Из  МетаданныеОбъекта.ТабличныеЧасти Цикл
	//	Если мТаблица.Колонки.Найти(стр.Имя) = Неопределено Тогда
	//		мТаблица.Колонки.Добавить(стр.Имя, стр.Тип, стр.Синоним);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если Выборка.Следующий() Тогда
		
		//НоваяСтр =  мТаблица.Добавить();
		ОбрабатываемыйОбъект = ПолучитьОбъектИзXML(Выборка.ВерсияОбъекта.Получить());	
		
		//Для каждого СтрОбъекта Из МетаданныеОбъекта.Реквизиты Цикл
		//	НоваяСтр[СтрОбъекта.Имя] = ОбрабатываемыйОбъект[СтрОбъекта.Имя]; 
		//КонецЦикла;	
		//
		//Для каждого СтрОбъекта Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		//	НоваяСтр[СтрОбъекта.Имя] = ОбрабатываемыйОбъект[СтрОбъекта.Имя]; 
		//КонецЦикла;
		
		Возврат ОбрабатываемыйОбъект;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	//АнализВерсий();
	//Анализ = Новый АнализДанных;	
	//Анализ.ТипАнализа = Тип("АнализДанныхКластеризация");
	//Анализ.ИсточникДанных = мТаблица;
	//РезультатАнализа = Анализ.Выполнить();
	//
	//Построитель = Новый ПостроительОтчетаАнализаДанных();
	//Построитель.Макет = Неопределено;
	//Построитель.ТипАнализа = Тип("АнализДанныхКластеризация");
	//
	//ТабДок = Новый ТабличныйДокумент;
	//Построитель.Вывести(РезультатАнализа, ТабДок);
	//ТабДок.Показать();
	
КонецФункции

//Анализ Действий
Процедура АнализДействиеЗаказДоЗаказ(Знач Док , ПроверкаДействий = Неопределено , ДействиеНадЗаказами = Неопределено ) Экспорт 
	
	Если Док = Неопределено Тогда
	 	Возврат;
	КонецЕсли;
	
	ПредОбъект =  ВерсионированиеОбъектов.ПолучитьПредыдущуюВерсию(Док);
	
	Если ПроверкаДействий = "ЗаписьДокумента" Тогда	
		
		Если ПредОбъект = Неопределено Тогда
			
			//Заказ 
			Если Док.Товары.Количество() > 0 Тогда
				Для каждого Стр Из Док.Товары Цикл
					СтруктураДействий = СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Заказано, Стр.Номенклатура, Стр.Количество,   );
					РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий); 
				КонецЦикла;	
			КонецЕсли;
			
			//Скидка
			Если Док.Скидки.Количество() > 0 Тогда
				Для каждого Стр Из Док.Скидки Цикл
					СтруктураДействий = СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Скидка, Стр.СкидкаНаценка , , );
					РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий); 
				КонецЦикла;
			КонецЕсли;                                   
			
			//Пречек
			Если Док.Распечатан Тогда
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Пречек, , ,  );
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			КонецЕсли; 
			
			//Оплачен
			Если Док.Оплачен  Тогда
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Оплата, , ,  );
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);	
			КонецЕсли; 
			
			Если  ЗначениеЗаполнено(Док.Оплата) Тогда
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Оплата, Док.Оплата , ,  );
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);	
			КонецЕсли; 

			
		Иначе		
			
			Если  ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.Перенос  Тогда 	               
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(ДействиеНадЗаказами, , , "Перенос " + ТекущаяДата() );   //?
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			КонецЕсли;
	
			//Заказ 
			Если ПредОбъект.Товары.Количество() > Док.Товары.Количество() Тогда		
				Для каждого Стр Из ПредОбъект.Товары Цикл
					Если Док.Товары.Найти(Стр.Номенклатура, "Номенклатура")= Неопределено Тогда
						СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.УдалениеБлюда, Стр.Номенклатура, Стр.Количество,   );
						РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий); 		
					КонецЕсли; 
				КонецЦикла;							
			ИначеЕсли ПредОбъект.Товары.Количество() < Док.Товары.Количество() Тогда		
				Для каждого Стр Из Док.Товары Цикл
					Если ПредОбъект.Товары.Найти(Стр.Номенклатура, "Номенклатура")= Неопределено Тогда
						СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Дозаказано, Стр.Номенклатура, Стр.Количество,   );
						РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий); 		
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			
			//Скидка
			Если Док.Скидки.Количество() > 0 Тогда
				Если ПредОбъект.Скидки.Количество() > Док.Скидки.Количество() Тогда
					
					Для каждого Стр Из ПредОбъект.Скидки Цикл			
						Если Док.Скидки.Найти(Стр.СкидкаНаценка, "СкидкаНаценка") = Неопределено Тогда
							СтруктураДействий = СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.УдалениеСкидки, Стр.СкидкаНаценка , , Стр.СкидкаНаценка);
							РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий); 
						КонецЕсли;				
					КонецЦикла;
					
				ИначеЕсли ПредОбъект.Скидки.Количество() < Док.Скидки.Количество() Тогда			
					Для каждого Стр Из Док.Скидки Цикл			
						Если ПредОбъект.Скидки.Найти(Стр.СкидкаНаценка, "СкидкаНаценка") = Неопределено Тогда
							СтруктураДействий = СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Скидка, Стр.СкидкаНаценка , , Стр.СкидкаНаценка.НАименование);
							РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий); 
						КонецЕсли;	
					КонецЦикла;				
				КонецЕсли;	
			КонецЕсли;                              
			
			//Пречек
			Если Число(ПредОбъект.Распечатан) > Число(Док.Распечатан)  Тогда
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.ОтменаПречека, , ,  );
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);	
			ИначеЕсли Число(ПредОбъект.Распечатан) < Число(Док.Распечатан)  Тогда 
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Пречек, , ,  );
			РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);	
			КонецЕсли; 
			
			//Оплата
			Если Число(ПредОбъект.Оплачен) > Число(Док.Оплачен) или ПредОбъект.Оплата <> Док.Оплата Тогда
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.ИзменениеОплаты, Док.Оплата , ,  );
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);	
			ИначеЕсли Число(ПредОбъект.Оплачен) < Число(Док.Оплачен)  Тогда 
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Оплата, , ,  );
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);	
			КонецЕсли; 
			
			Если ПредОбъект.Оплата <> Док.Оплата Тогда
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.ИзменениеОплаты, Док.Оплата , ,  );
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);	
			КонецЕсли; 
			
			
		КонецЕсли;
		
	Иначе
		
		Если ПредОбъект = Неопределено Тогда		
			
			Если ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.Открыт  Тогда 
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Создан, , ,  "Создан " + ТекущаяДата() ); //
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			КонецЕсли;
		
		Иначе
			
			Если ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.Открыт  Тогда 
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Открыт, , ,  "Открыт " + ТекущаяДата() );  //
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			КонецЕсли;
			
			Если ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.Удален  Тогда 
				СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(Перечисления.ДействиеНадЗаказами.Удален, , ,  "Удален " + ТекущаяДата() );  //
				РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			КонецЕсли;

		КонецЕсли;
		
				
		Если  ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.Закрыт  Тогда 
			СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(ДействиеНадЗаказами, , ,  "Закрыт " + ТекущаяДата() ); //
			РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
						
		ИначеЕсли  ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.ВстречкаПовторно  Тогда 
			СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(ДействиеНадЗаказами, , ,  "Встречка повторно " + ТекущаяДата() );   //Кнопка
			РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			
		ИначеЕсли ДействиеНадЗаказами =  Перечисления.ДействиеНадЗаказами.СтолОбъединен  Тогда 
			СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(ДействиеНадЗаказами, , ,  "Стол объединён " + ТекущаяДата() );
			РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			
		ИначеЕсли  ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.СтолРазделен  Тогда 
			СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(ДействиеНадЗаказами, , ,  "Стол разделён " + ТекущаяДата() );
			РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			
		ИначеЕсли  ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.Регистрация  Тогда 
			СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(ДействиеНадЗаказами, , , "Регистрация " + ТекущаяДата() ); //
			РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);
			
		ИначеЕсли  ДействиеНадЗаказами = Перечисления.ДействиеНадЗаказами.Сообщение  Тогда 
			СтруктураДействий = ВерсионированиеОбъектов.СоздатьСтруктуруДействий(ДействиеНадЗаказами, , ,  "Сообщение " + ТекущаяДата() );
			РегистрыСведений.АнализДействий.СоздатьЗаписьВРегистреАнализДействий(Док.Ссылка, СтруктураДействий);	
		КонецЕсли;  
		
	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает сериализованный в XML объект. 
// Параметры
// ИмяФайла - строка - путь к файлу, в котором хранится сериализованное 
//                     представление объекта
//
Функция ПолучитьОбъектИзXML(ДвоичныеДанные)  Экспорт
	
	ЧтениеXML = Новый ЧтениеFastInfoSet;
	ЧтениеXML.УстановитьДвоичныеДанные(ДвоичныеДанные);
	Попытка
		Если ЧтениеXML.Прочитать() Тогда
			Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				Объект = ПрочитатьXML(ЧтениеXML);
				ЧтениеXML.Закрыть();
				Возврат Объект;
			Иначе
				ЧтениеXML.Закрыть();
				ВызватьИсключение НСтр("ru = 'Ошибка при восстановлении объекта'");
			КонецЕсли;
		Иначе
			ЧтениеXML.Закрыть();
			ВызватьИсключение НСтр("ru = 'Ошибка чтения данных'");
		КонецЕсли;		
	Исключение
		//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
		
КонецФункции
