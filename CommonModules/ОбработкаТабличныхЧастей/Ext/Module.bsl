
Процедура УстановитьИдентификаторТабЧасти(ЭтотОбъект, СтрокаТабличнойЧасти) Экспорт
	
	Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Идентификатор) Тогда		
		СтрокаТабличнойЧасти.Идентификатор = Новый УникальныйИдентификатор;		
	КонецЕсли;
	
	Если  ТипЗнч(ЭтотОбъект)= Тип("ДокументСсылка.РеализацияТоваровУслуг")
		или ТипЗнч(ЭтотОбъект)= Тип("ДокументСсылка.СписаниеТоваров") Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Родитель) Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Родитель.Идентификатор) Тогда
				СтрокаТабличнойЧасти.Владелец = СтрокаТабличнойЧасти.Родитель.Идентификатор;
			Иначе 
				УстановитьИдентификаторТабЧасти(ЭтотОбъект, СтрокаТабличнойЧасти.Родитель) ; 
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // УстановитьИдентификаторТабЧасти()

Функция СкопироватьСтрокуТабЧасти(Получатель, Источник, Колонки) Экспорт
	
	// Копирование.
	Для Каждого Колонка Из Колонки Цикл
		Колонка = Колонка.Имя;
		Получатель[Колонка] = Источник[Колонка];
	КонецЦикла;
	
	// Результат.
	Возврат Получатель;
	
КонецФункции // СкопироватьСтрокуТабЧасти()

Функция ПолучитьСводнуюТаблицуТабличныхЧастей(Документ, ИменаТабличныхЧастей, Колонки = Неопределено, СводнаяТаблица = Неопределено) Экспорт
	
	// Метаданные.
	МетаданныеДокумента = Документ.Метаданные();
	
	// Данные.
	Если (СводнаяТаблица = Неопределено) Тогда
		Если (ТипЗнч(ИменаТабличныхЧастей) = Тип("Строка")) Тогда
			ОсновнаяТабличнаяЧасть = ИменаТабличныхЧастей;
		Иначе
			ОсновнаяТабличнаяЧасть = ИменаТабличныхЧастей.Получить(0);
		КонецЕсли;
		СводнаяТаблица = Документ[ОсновнаяТабличнаяЧасть].Выгрузить(Новый Массив, Колонки);
	Иначе
		СводнаяТаблица.Очистить();
	КонецЕсли;
	
	// Колокна идентификатора принадлежности к табличной части.
	Если (СводнаяТаблица.Колонки.Найти("ИмяТабличнойЧасти") = Неопределено) Тогда
		СводнаяТаблица.Колонки.Добавить("ИмяТабличнойЧасти", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	// Перенос данных.
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		
		// -- Доступные колонки.
		ДоступныеКолонки = Новый Массив; Реквизиты = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
		Для Каждого Колонка Из СводнаяТаблица.Колонки Цикл
			Если (Не Реквизиты.Найти(Колонка.Имя) = Неопределено) Тогда
				ДоступныеКолонки.Добавить(Колонка);
			КонецЕсли;
		КонецЦикла;
		Если Не Булево(ДоступныеКолонки.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		
		// -- Данные табличной части.
		Для Каждого СтрокаТабличнойЧасти Из Документ[ИмяТабличнойЧасти] Цикл
			
			СкопироватьСтрокуТабЧасти(СводнаяТаблица.Добавить(), 
			СтрокаТабличнойЧасти, 
			ДоступныеКолонки).ИмяТабличнойЧасти = ИмяТабличнойЧасти; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Результат.
	Возврат СводнаяТаблица;	
	
КонецФункции // ПолучитьСводнуюТаблицуТабличныхЧастей()

Функция ПолучитьПараметрыНоменклатуры(Номенклатура, ДокументОбъект = Неопределено, ПоРегистру = Ложь, ТаблицаПараметров = Неопределено) Экспорт
	
	// По уже имеющимся данным.
	Если (Не ТаблицаПараметров = Неопределено) Тогда
		
		СтрокаТаблицы = ТаблицаПараметров.Найти(Номенклатура, "Номенклатура");
		Если (СтрокаТаблицы = Неопределено) Тогда
			СтрокаТаблицы = СкопироватьСтрокуТабЧасти(ТаблицаПараметров.Добавить(), ПолучитьПараметрыНоменклатуры(Номенклатура, ДокументОбъект, ПоРегистру), ТаблицаПараметров.Колонки);
		КонецЕсли;
		
		Возврат СтрокаТаблицы;
		
	КонецЕсли;
	
	// По запросу.
	Если (ПоРегистру = Истина) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыНоменклатуры.Номенклатура,
		|	ПараметрыНоменклатуры.Артикул,
		|	ПараметрыНоменклатуры.БазоваяЕдиницаИзмерения,
		|	ПараметрыНоменклатуры.Безнадбавочный,
		|	ПараметрыНоменклатуры.Безскидочный,
		|	ПараметрыНоменклатуры.Заменяемый,
		|	ПараметрыНоменклатуры.Код,
		|	ПараметрыНоменклатуры.Набор,
		|	ПараметрыНоменклатуры.Наименование,
		|	ПараметрыНоменклатуры.НаименованиеПолное,
		|	ПараметрыНоменклатуры.НаименованиеСокращенное,
		|	ПараметрыНоменклатуры.НоменклатурнаяГруппа,
		|	ПараметрыНоменклатуры.Организация,
		|	ПараметрыНоменклатуры.ПенсионныйФонд,
		|	ПараметрыНоменклатуры.СтавкаНДС,
		|	ПараметрыНоменклатуры.Услуга,
		//Костенюк Александр-Старт 25.06.12
		|	ПараметрыНоменклатуры.ТипНоменклатуры,
		//Костенюк Александр-Финиш 25.06.12
		|	ПараметрыНоменклатуры.Цена
		|ИЗ
		|	РегистрСведений.НоменклатураМеню КАК ПараметрыНоменклатуры
		|ГДЕ
		|	ПараметрыНоменклатуры.Номенклатура = &Номенклатура");
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыНоменклатуры.Ссылка КАК Номенклатура,
		|	ПараметрыНоменклатуры.Артикул,
		|	ПараметрыНоменклатуры.БазоваяЕдиницаИзмерения,
		|	ПараметрыНоменклатуры.Безнадбавочный,
		|	ПараметрыНоменклатуры.Безскидочный,
		|	ПараметрыНоменклатуры.Заменяемый,
		|	ПараметрыНоменклатуры.Код,
		|	ПараметрыНоменклатуры.Набор,
		|	ПараметрыНоменклатуры.Наименование,
		|	ПараметрыНоменклатуры.НаименованиеПолное,
		|	ПараметрыНоменклатуры.НаименованиеСокращенное,
		|	ПараметрыНоменклатуры.НоменклатурнаяГруппа,
		|	ПараметрыНоменклатуры.НоменклатурнаяГруппа.Организация КАК Организация,
		|	ПараметрыНоменклатуры.ПенсионныйФонд,
		|	ПараметрыНоменклатуры.СтавкаНДС,
		|	ПараметрыНоменклатуры.Услуга,
		//Костенюк Александр-Старт 25.06.12
		|	ПараметрыНоменклатуры.ТипНоменклатуры,
		//Костенюк Александр-Финиш 25.06.12
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	Справочник.Номенклатура КАК ПараметрыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура.Ссылка = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ПараметрыНоменклатуры.Ссылка
		|ГДЕ
		|	ПараметрыНоменклатуры.Ссылка = &Номенклатура");
		
		//.. Начало изменения Dim)on  6 октября 2013 г. 21:18:44
		//
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Ссылка = &Номенклатура", "Номенклатура.Ссылка = &Номенклатура И ТипЦены = &ТипЦеныРесторана");
		
		Если (Не ДокументОбъект = Неопределено) И ОбщегоНазначения.ЕстьРеквизитДокумента("Ресторан", ДокументОбъект.Метаданные()) Тогда
			ТипЦены = ДокументОбъект.Ресторан.ТипЦен
		Иначе
			ТипЦены = ОбменДаннымиПовтИсп.ПолучитьТипЦенТекущегоРесторана()
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТипЦеныРесторана", ТипЦены);
		//
		//.. Конец изменения Dim)on  6 октября 2013 г. 21:18:44
		
	КонецЕсли;                                                
	
	Если (Не ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")) Тогда
		Если (ПоРегистру = Истина) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура = &Номенклатура", "Номенклатура В (&Номенклатура)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Ссылка = &Номенклатура", "Ссылка В (&Номенклатура)");
		КонецЕсли;
	КонецЕсли;
	Если (Не ДокументОбъект = Неопределено) Тогда
		Дата = ДокументОбъект.Дата;
	Иначе
		Дата = ТекущаяДата();
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	// Выборка данных.
	ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
	
	Если (Не ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")) Тогда
		Возврат ТаблицаПараметров;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПараметров.Найти(Номенклатура, "Номенклатура");
	Если (СтрокаТаблицы = Неопределено) Тогда
		СтрокаТаблицы = ТаблицаПараметров.Добавить();
		СтрокаТаблицы.Номенклатура = Номенклатура;
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
	
КонецФункции // СкопироватьСтрокуТабЧасти()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти. Строка табличной части документа;
//  ДокументОбъект. Объект редактируемого документа;
//  ... . Не поддерживается;
//	ИмяТабличнойЧасти - Строка. Имя табличной части которой принадлежит строка.
//
Процедура ЗаполнитьАртикулКодТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт
	
	// Метаданные.
	Если (ИмяТабличнойЧасти = Неопределено) Тогда
		ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Код.
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Код", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		СтрокаТабличнойЧасти.Код = СтрокаТабличнойЧасти.Номенклатура.Код;
		
	КонецЕсли;
	
	// Артикул.
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Артикул", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		СтрокаТабличнойЧасти.Артикул = СтрокаТабличнойЧасти.Номенклатура.Артикул;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти. Строка табличной части документа;
//  ДокументОбъект. Объект редактируемого документа;
//  ... . Не поддерживается;
//	ИмяТабличнойЧасти - Строка. Имя табличной части которой принадлежит строка.
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета = Неопределено,
	ВалютаДокумента = Неопределено, ТипЦен = Неопределено, ЭтоРозница = Ложь, ИмяТабличнойЧасти="Товары") Экспорт
	
	Если СтрокаТабличнойЧасти.Номенклатура.Этогруппа тогда
		Возврат;	
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Цена.
	
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ,, ДокументОбъект.Дата);
		
	КонецЕсли;
	
	// Единица измерения.									
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		Если СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЕсли;
	
	// Количество.
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Процедура заполняет ставку НДС в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти. Строка табличной части документа;
//  ДокументОбъект. Объект редактируемого документа.
//  ... . Не поддерживается;
//	ИмяТабличнойЧасти - Строка. Имя табличной части которой принадлежит строка.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВидДокумента="Реализация", ИмяТабличнойЧасти="Товары") Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Ставка НДС.
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		
	КонецЕсли;
	
	// Пенсионный фонд.
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПенсионныйФонд", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		СтрокаТабличнойЧасти.ПенсионныйФонд = СтрокаТабличнойЧасти.Номенклатура.ПенсионныйФонд;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()


// Рассчитывает количество  в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти. Строка табличной части документа;
//  ДокументОбъект. Объект редактируемого документа;
//	ИмяТабличнойЧасти - Строка. Имя табличной части которой принадлежит строка.
//
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт
	
	// Метаданные.
	Если (ИмяТабличнойЧасти = Неопределено) Тогда
		ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Количество.
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		Если ОбщегоНазначения.ЗначениеНЕЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
			СтрокаТабличнойЧасти.Количество = 1.0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКоличествоТабЧасти()

// Рассчитывает сумму в строке табличной части документа (без учета скидок/наценок).
//
// Параметры:
//  СтрокаТабличнойЧасти. Строка табличной части документа;
//  ДокументОбъект. Объект редактируемого документа;
//	ИмяТабличнойЧасти - Строка. Имя табличной части которой принадлежит строка.
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт
	
	// Метаданные.
	Если (ИмяТабличнойЧасти = Неопределено) Тогда
		ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Расчет.
	Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество; Наценка = 0; Скидка = 0;
	// -- Поправка скидок.
	Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "СуммаБезСкидок", МетаданныеДокумента) Тогда
		СуммаДоИзменения = СтрокаТабличнойЧасти.СуммаБезСкидок;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "Сумма", МетаданныеДокумента) Тогда
			СуммаДоИзменения = СтрокаТабличнойЧасти.Сумма;
			Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "СуммаСкидки", МетаданныеДокумента) Тогда
				СуммаДоИзменения = СуммаДоИзменения + СтрокаТабличнойЧасти.СуммаСкидки;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "СуммаНаценки", МетаданныеДокумента) Тогда
				СуммаДоИзменения = СуммаДоИзменения - СтрокаТабличнойЧасти.СуммаНаценки;
			КонецЕсли;
			СуммаДоИзменения = Макс(СуммаДоИзменения, 0.0);
		Иначе
			СуммаДоИзменения = Сумма;
		КонецЕсли;
	КонецЕсли;
	Если Булево(СуммаДоИзменения) Тогда
		Поправка = Сумма / СуммаДоИзменения;
	Иначе
		Поправка = 1.0;
	КонецЕсли;
	
	
	// Сумма без скидок.
	Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "СуммаБезСкидок", МетаданныеДокумента) Тогда
		СтрокаТабличнойЧасти.СуммаБезСкидок = Сумма;
	КонецЕсли;
	
	// Сумма наценки.
	Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "СуммаНаценки", МетаданныеДокумента) Тогда
		СтрокаТабличнойЧасти.СуммаНаценки = СтрокаТабличнойЧасти.СуммаНаценки * Поправка;
		Наценка = СтрокаТабличнойЧасти.СуммаНаценки;
	КонецЕсли;
	
	// Сумма скидки.
	Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "СуммаСкидки", МетаданныеДокумента) Тогда
		//СтрокаТабличнойЧасти.СуммаСкидки = Мин(СтрокаТабличнойЧасти.СуммаСкидки * Поправка, Макс(Сумма + Наценка - 0.01, 0));
		СтрокаТабличнойЧасти.СуммаСкидки = Мин(СтрокаТабличнойЧасти.СуммаСкидки * Поправка, Макс(Сумма - 0.01, 0));
		Скидка = СтрокаТабличнойЧасти.СуммаСкидки;
	КонецЕсли;
	
	// Сумма.
	Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "Сумма", МетаданныеДокумента) Тогда
		СтрокаТабличнойЧасти.Сумма = Сумма + Наценка - Скидка;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Расчет НДС исходя из постоянной суммы.
//
// Параметры:
//  СтрокаТабличнойЧасти. Строка табличной части документа;
//  ДокументОбъект. Объект редактируемого документа;
//	ИмяТабличнойЧасти - Строка. Имя табличной части которой принадлежит строка.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт
	
	// Метаданные.
	Если (ИмяТабличнойЧасти = Неопределено) Тогда
		ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Если в документе нет флагов учета НДС, то в конфигурации считатется, что суммы включают НДС.
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Истина;
	
	// Расчет.
	Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "Сумма", МетаданныеДокумента)
		И ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента("Товары", "СуммаНДС", МетаданныеДокумента) Тогда
		
		//СтрокаТабличнойЧасти.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		СтрокаТабличнойЧасти.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаАкцизногоНалога, УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)); //Костенюк Александр 04.02.2015
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

//Костенюк Александр-Старт 29.01.2015
// Расчет акизного налога исходя из постоянной суммы.
//
// Параметры:
//  СтрокаТабличнойЧасти. Строка табличной части документа;
//  ДокументОбъект. Объект редактируемого документа;
//	ИмяТабличнойЧасти - Строка. Имя табличной части которой принадлежит строка.
//
Процедура РассчитатьСуммуАкцизногоНалогаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт
	
	// Метаданные.
	Если (ИмяТабличнойЧасти = Неопределено) Тогда
		ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Расчет.
	Если ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "Сумма", МетаданныеДокумента)
		И ОбщегоНазначения.ЕстьРеквизитТабличнойЧастьДокумента(ИмяТабличнойЧасти, "СуммаАкцизногоНалога", МетаданныеДокумента) Тогда
		
		СтрокаТабличнойЧасти.СуммаАкцизногоНалога = Ценообразование.РассчитатьСуммуАкцизногоНалога(СтрокаТабличнойЧасти.Сумма, Ценообразование.ПолучитьСтавкуАкцизногоНалога());
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуАкцизногоНалогаТабЧасти()
//Костенюк Александр-Финиш 29.01.2015


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения", ИмяТабличнойЧасти = "Товары") Экспорт
	
	// Артикул и код.
	ЗаполнитьАртикулКодТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();	
	
	// Номенклатурная группа
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НоменклатурнаяГруппа", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда			
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;                  			
		// Организация
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Организация", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда         			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
				СтрокаТабличнойЧасти.Организация = СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Организация;               			
			КонецЕсли;
		КонецЕсли;                                    		
	КонецЕсли; 
	
	//Костенюк Александр-Старт 13.06.2012
	// Компьютер
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Компьютер", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда         			
		СтрокаТабличнойЧасти.Компьютер = ПараметрыСеанса.ТекущийКомпьютер;               			
	КонецЕсли;                                    		
	//Костенюк Александр-Финиш 13.06.2012
	
	//Костенюк Александр-Старт 07.08.2015
	// Группа блюда
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ГруппаБлюда", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда			
		СтрокаТабличнойЧасти.ГруппаБлюда = СтрокаТабличнойЧасти.Номенклатура.ГруппаБлюда;                  			
	КонецЕсли;
	//Костенюк Александр-Финиш 07.08.2015
	
КонецПроцедуры // ПриИзмененииНоменклатурыТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь, РасчетАвтоматическихСкидок = Ложь) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе	
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
			Если (ПересчитыватьСкидку И СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0) Тогда
				Если (СтрокаТабличнойЧасти.Цена = 0) Или (СтрокаТабличнойЧасти.Количество = 0) Тогда
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
					Если СтрокаТабличнойЧасти.Цена = 0 Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Цена равна 0, после изменения суммы установлена нулевая скидка!");
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Количество равно 0, после изменения суммы установлена нулевая скидка!");
					КонецЕсли;
				Иначе
					СуммаСоСкидками = СтрокаТабличнойЧасти.Сумма;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
					ПроцентСкидки   = 100 - (СуммаСоСкидками*100)/СуммаБезСкидок;
					ПроцентАвтоматическихСкидок = 0;
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки - ПроцентАвтоматическихСкидок;
				КонецЕсли;
			Иначе
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки >= 100 Тогда
					СтрокаТабличнойЧасти.Цена = 0;
					ОбщегоНазначения.СообщитьОбОшибке("Скидка равна 100%, после изменения суммы установлена нулевая цена!");
				Иначе
					ПроцентАвтоматическихСкидок = 0;
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Сумма * 100/
					(100 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки - ПроцентАвтоматическихСкидок);
					СтрокаТабличнойЧасти.Цена = СуммаБезСкидок / СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // ПриИзмененииСуммыТабЧасти()

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура УстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт
	
	// устанавливаем стандартные запреты на изменение видимости колонок
	Для каждого КолонкаТаблицы из Колонки Цикл
		КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
	КонецЦикла;
	
КонецПроцедуры // УстановитьИзменятьВидимостьКолонокТабЧасти()

// Изменяет видимость колонки табличного поля (напрмер, табличной части документа).
//
// Параметры:
//  Колонка   - колонка табличного поля, 
//  Видимость - булево, устанавливаемый флаг видимости колонки.
//
Процедура УстановитьВидимостьКолонкиТабЧасти(Колонка, Видимость) Экспорт
	
	Колонка.Видимость = Видимость;
	
КонецПроцедуры // УстановитьВидимостьКолонкиТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт
	
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
		
		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.Содержание = НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

// Процедура находит или создает нужную номенклатурную позицию по ее составляющим
//
Функция ПолучитьНоменклатурнуюПозициюПоСоставляющим(Номенклатура, ПараметрХарактеристика = Неопределено, ПараметрСерия = Неопределено, ПараметрКачество = Неопределено, ПараметрЗаказ = Неопределено) Экспорт
	
	// Если не заполнена номенклатура-владелец, то вернем пустую ссылку
	Если НЕ ЗначениеЗаполнено(Номенклатура) ИЛИ ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Справочники.НоменклатурныеПозиции.ПустаяСсылка();
	КонецЕсли;
	
	// Приводим значения параметров к нужным типам
	// Если Качество = Новое, то делаем его пустой ссылкой
	Характеристика = ?(ЗначениеЗаполнено(ПараметрХарактеристика), ПараметрХарактеристика, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Серия          = ?(ЗначениеЗаполнено(ПараметрСерия), ПараметрСерия, Справочники.СерииНоменклатуры.ПустаяСсылка());
	Качество       = ?(ЗначениеЗаполнено(ПараметрКачество), ПараметрКачество, Справочники.Качество.Новый);
	Качество       = ?(Качество = Справочники.Качество.Новый, Справочники.Качество.ПустаяСсылка(), Качество);
	
	// Если задан неверный заказ, тогда используем вместо него пустую ссылку
	Если НЕ ЗначениеЗаполнено(ПараметрЗаказ) ИЛИ ТипЗНЧ(ПараметрЗаказ) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	Иначе
		ЕстьЗаказ = ПараметрЗаказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		Заказ = ? (ЕстьЗаказ, ПараметрЗаказ, Документы.ЗаказПокупателя.ПустаяСсылка());
	КонецЕсли;
	
	// Если не заполнен ни один из параметров, то вернем пустую ссылку
	Если НЕ ЗначениеЗаполнено(Характеристика) И НЕ ЗначениеЗаполнено(Серия) И НЕ ЗначениеЗаполнено(Заказ) И НЕ ЗначениеЗаполнено(Качество) Тогда
		Возврат Справочники.НоменклатурныеПозиции.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Качество", Качество);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатурныеПозиции.Ссылка КАК Ссылка
	|ИЗ
	|   Справочник.НоменклатурныеПозиции КАК НоменклатурныеПозиции
	|ГДЕ
	| 	НоменклатурныеПозиции.Владелец                   = &Владелец И
	| 	НоменклатурныеПозиции.ХарактеристикаНоменклатуры = &Характеристика И
	|	НоменклатурныеПозиции.СерияНоменклатуры          = &Серия И
	|	НоменклатурныеПозиции.Качество                   = &Качество И
	|	НоменклатурныеПозиции.ЗаказПокупателя            = &Заказ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда 
		НайденныйОбъект = Результат[0].Ссылка;
	Иначе 
		НайденныйОбъект = Неопределено;
	КонецЕсли;	
	
	Если НайденныйОбъект = Неопределено Тогда
		
		// Если не нашли существующую номенклатурную позицию, то создадим новую
		НовыйОбъект = Справочники.НоменклатурныеПозиции.СоздатьЭлемент();
		НовыйОбъект.Владелец = Номенклатура;
		НовыйОбъект.ХарактеристикаНоменклатуры = Характеристика;
		НовыйОбъект.СерияНоменклатуры          = Серия;
		НовыйОбъект.Качество                   = Качество;
		НовыйОбъект.ЗаказПокупателя            = Заказ;
		НовыйОбъект.Наименование = "";
		НовыйОбъект.Записать();
		
		НайденныйОбъект = НовыйОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат НайденныйОбъект.Ссылка;
	
КонецФункции

// Процедура заполняет номенклатурные позиции в указанной строке указанной табличной части
//
Процедура ЗаполнитьНоменклатурнуюПозициюВСтрокеТабЧасти(ДокументОбъект, СтрокаТЧ, ИмяТабличнойЧасти)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ТабЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	ТекущаяНоменклатурнаяПозиция = СтрокаТЧ.НоменклатурнаяПозиция;
	
	// Проверим наличие нужных нам реквизитов у документа и табличной части
	ЕстьХарактеристика      = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьХарактеристикаНовая = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатурыНовая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСерия               = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСерияНовая          = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатурыНовая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьКачество            = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьКачествоНовое       = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КачествоНовое", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЗаказВТЧ            = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьДокументРезерваВТЧ  = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ДокументРезерва", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЗаказВШапке         = ОбщегоНазначения.ЕстьРеквизитДокумента("ЗаказПокупателя", МетаданныеДокумента);
	ЕстьСделкаВШапке        = ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента);
	
	// Заполним характеристику
	Если ЕстьХарактеристикаНовая Тогда
		Характеристика = СтрокаТЧ.ХарактеристикаНоменклатурыНовая;
	ИначеЕсли ЕстьХарактеристика Тогда
		Характеристика = СтрокаТЧ.ХарактеристикаНоменклатуры;
	Иначе
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	// Заполним серию
	Если ЕстьСерияНовая Тогда
		Серия = СтрокаТЧ.СерияНоменклатурыНовая;
	ИначеЕсли ЕстьСерия Тогда
		Серия = СтрокаТЧ.СерияНоменклатуры;
	Иначе
		Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	// Заполним качество
	Если ЕстьКачествоНовое Тогда
		Качество = СтрокаТЧ.КачествоНовое;
	ИначеЕсли ЕстьКачество Тогда
		Качество = СтрокаТЧ.Качество;
	Иначе
		Качество = Справочники.Качество.ПустаяСсылка();
	КонецЕсли;
	
	Если Качество = Справочники.Качество.Новый Тогда
		Качество = Справочники.Качество.ПустаяСсылка();
	КонецЕсли;
	
	// Заполним заказ
	Если ЕстьЗаказВТЧ Тогда
		Заказ = СтрокаТЧ.ЗаказПокупателя;
	ИначеЕсли ЕстьДокументРезерваВТЧ Тогда
		Заказ = СтрокаТЧ.ДокументРезерва;
	ИначеЕсли ЕстьЗаказВШапке Тогда
		Заказ = ДокументОбъект.ЗаказПокупателя;
	ИначеЕсли ЕстьСделкаВШапке Тогда
		Заказ = ДокументОбъект.Сделка;
	Иначе
		Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	// Если заказ по договору, который не предусматривает ведение обособленного учета, тогда очистим заказ
	Если НЕ ЗначениеЗаполнено(Заказ) ИЛИ ТипЗНЧ(Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	Иначе
		ЕстьЗаказ = Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		Заказ = ? (ЕстьЗаказ, Заказ, Документы.ЗаказПокупателя.ПустаяСсылка());
	КонецЕсли;
	
	// Если не заполнен ни один из параметров, то вернем пустую ссылку
	Если НЕ ЗначениеЗаполнено(Характеристика) И НЕ ЗначениеЗаполнено(Серия) И НЕ ЗначениеЗаполнено(Заказ) И НЕ ЗначениеЗаполнено(Качество) Тогда
		СтрокаТЧ.НоменклатурнаяПозиция = Справочники.НоменклатурныеПозиции.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	// Проверим, возможно нужная нам номенклатурная позиция уже выбрана в строке табличной части...
	СовпалВладелец        = ТекущаяНоменклатурнаяПозиция.Владелец = СтрокаТЧ.Номенклатура;
	СовпалаХарактеристика = ТекущаяНоменклатурнаяПозиция.ХарактеристикаНоменклатуры = Характеристика;
	СовпалаСерия          = ТекущаяНоменклатурнаяПозиция.СерияНоменклатуры = Серия;
	СовпалоКачество       = ТекущаяНоменклатурнаяПозиция.Качество = Качество;
	СовпалЗаказ           = ТекущаяНоменклатурнаяПозиция.ЗаказПокупателя = Заказ;
	
	ПолноеСовпадение      = СовпалВладелец И СовпалаХарактеристика И СовпалаСерия И СовпалоКачество И СовпалЗаказ;
	
	// ... если нет, тогда
	Если НЕ ПолноеСовпадение Тогда
		
		СтрокаТЧ.НоменклатурнаяПозиция = ПолучитьНоменклатурнуюПозициюПоСоставляющим(СтрокаТЧ.Номенклатура, Характеристика, Серия, Качество, Заказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет номенлатурные позиции для всех строк указанной табличной части
//
Процедура ЗаполнитьНоменклатурныеПозицииВТабЧасти(ДокументОбъект, ИмяТабличнойЧасти, ЗаказПокупателя = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ТабЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	
	// Проверим, есть ли в табличной части реквизит, который мы собираемся заполнять
	ЕстьНоменклатурнаяПозиция = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НоменклатурнаяПозиция", МетаданныеДокумента, ИмяТабличнойЧасти);
	
	Если НЕ ЕстьНоменклатурнаяПозиция Тогда
		Возврат;
	КонецЕсли;
	
	// Получим значение настройки ведения учета по дополнительным разрезам
	БУ = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе.ПолучитьОбъект();
	ВестиУчетПоДопРазрезамРегл  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеПозиции, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Для каждого СтрокаТЧ из ТабЧасть Цикл
		
		Если ВестиУчетПоДопРазрезамРегл Тогда
			ЗаполнитьНоменклатурнуюПозициюВСтрокеТабЧасти(ДокументОбъект, СтрокаТЧ, ИмяТабличнойЧасти);
		Иначе
			СтрокаТЧ.НоменклатурнаяПозиция = Справочники.НоменклатурныеПозиции.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет номенклатурную позицию, которая является реквизитом документа
Процедура ЗаполнитьНоменклатурнуюПозициюВШапке(ДокументОбъект) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ЕстьНоменклатурнаяПозиция = ОбщегоНазначения.ЕстьРеквизитДокумента("НоменклатурнаяПозиция", МетаданныеДокумента);
	
	Если НЕ ЕстьНоменклатурнаяПозиция Тогда
		Возврат;
	КонецЕсли;
	
	// Получим значение настройки ведения учета по дополнительным разрезам
	БУ = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе.ПолучитьОбъект();
	ВестиУчетПоДопРазрезамРегл  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеПозиции, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Если Не ВестиУчетПоДопРазрезамРегл Тогда
		ДокументОбъект.НоменклатурнаяПозиция = Справочники.НоменклатурныеПозиции.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	ТекущаяНоменклатурнаяПозиция = ДокументОбъект.НоменклатурнаяПозиция;
	
	// Проверим наличие нужных нам реквизитов у документа
	ЕстьХарактеристика = ОбщегоНазначения.ЕстьРеквизитДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента);
	ЕстьСерия          = ОбщегоНазначения.ЕстьРеквизитДокумента("СерияНоменклатуры", МетаданныеДокумента);
	ЕстьКачество       = ОбщегоНазначения.ЕстьРеквизитДокумента("Качество", МетаданныеДокумента);
	ЕстьЗаказ          = ОбщегоНазначения.ЕстьРеквизитДокумента("ЗаказПокупателя", МетаданныеДокумента);
	
	// Заполним нужные параметры
	Характеристика     = ? (ЕстьХарактеристика, ДокументОбъект.ХарактеристикаНоменклатуры, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Серия              = ? (ЕстьСерия, ДокументОбъект.СерияНоменклатуры, Справочники.СерииНоменклатуры.ПустаяСсылка());
	Качество           = ? (ЕстьКачество, ДокументОбъект.Качество, Справочники.Качество.ПустаяСсылка());
	Заказ              = ? (ЕстьЗаказ, ДокументОбъект.ЗаказПокупателя, Документы.ЗаказПокупателя.ПустаяСсылка());
	
	// Если заказ по договору, который не предусматривает ведение обособленного учета, тогда очистим заказ
	Если НЕ ЗначениеЗаполнено(Заказ) ИЛИ ТипЗНЧ(Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	Иначе
		ЕстьЗаказ = Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		Заказ = ? (ЕстьЗаказ, Заказ, Документы.ЗаказПокупателя.ПустаяСсылка());
	КонецЕсли;
	
	// Если не заполнен ни один из параметров, то вернем пустую ссылку
	Если НЕ ЗначениеЗаполнено(Характеристика) И НЕ ЗначениеЗаполнено(Серия) И НЕ ЗначениеЗаполнено(Заказ) И НЕ ЗначениеЗаполнено(Качество) Тогда
		ДокументОбъект.НоменклатурнаяПозиция = Справочники.НоменклатурныеПозиции.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	
	// Проверим, возможно нужная нам номенклатурная позиция уже выбрана в документе...
	СовпалВладелец        = ТекущаяНоменклатурнаяПозиция.Владелец = ДокументОбъект.Номенклатура;
	СовпалаХарактеристика = ТекущаяНоменклатурнаяПозиция.ХарактеристикаНоменклатуры = Характеристика;
	СовпалаСерия          = ТекущаяНоменклатурнаяПозиция.СерияНоменклатуры = Серия;
	СовпалоКачество       = ТекущаяНоменклатурнаяПозиция.Качество = Качество;
	СовпалЗаказ           = ТекущаяНоменклатурнаяПозиция.ЗаказПокупателя = Заказ;
	
	ПолноеСовпадение      = СовпалВладелец И СовпалаХарактеристика И СовпалаСерия И СовпалоКачество И СовпалЗаказ;
	
	// ... если нет, тогда
	Если НЕ ПолноеСовпадение Тогда
		
		ДокументОбъект.НоменклатурнаяПозиция = ПолучитьНоменклатурнуюПозициюПоСоставляющим(ДокументОбъект.Номенклатура, Характеристика, Серия, Качество, Заказ);
		ДокументОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает значение нужного реквизита в переданной ТЧ.
//
// Параметры:
//  ТабЧаст      - табличная часть,
//  ИмяРеквизита - строка, имя реквизита.
//
Процедура ОчиститьРеквизитТЧ(ТабЧасть, ИмяРеквизита) Экспорт
	
	Для Каждого Строка Из ТабЧасть Цикл
		Если ЗначениеЗаполнено(Строка[ИмяРеквизита]) Тогда
			Строка[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОчиститьРеквизитТЧ()

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт
	
	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти;
	
КонецФункции // НайтиСтрокуТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ 

#Если Клиент Тогда
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ
	
	// Универсальная процедура, которая инициирует механизм подбора
	// номенклатуры в документы (открывает основную форму обработки подбор).
	//
	// Параметры:
	//  ФормаДокумента - форма документа, в который осуществляется подбор,
	//  СтруктураПараметров - параметры, которые передаются в форму подбора.
	//
	Процедура ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, МетаданныеДокумента = Неопределено, ФормаПодбора = Неопределено) Экспорт
		
		// Открываем форму подбора.
		ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
		ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
		ФормаПодбора.Открыть();
		
	КонецПроцедуры // ОткрытьПодборНоменклатуры()
	
	// Процедура, которая обновляет параметры подбора номенклатуры и
	// инициирует обновление формы подбора, если она открыта
	//
	// Параметры:
	//  ДокументОбъект     - объект документа, в котором производится подбор.
	//  ФормаДокумента     - форма документа, в который осуществляется подбор,
	//  ПолноеИмяРеквизита - полное имя реквизита, который изменился.
	//
	Процедура ОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаДокумента, ПолноеИмяРеквизита) Экспорт
		
		ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
		
		Если ФормаПодбора.Открыта() Тогда
			
			ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");
			ИмяКлюча     = ?(ИмяРеквизита = "СкладОрдер" ИЛИ ИмяРеквизита = "СкладОтправитель", "Склад", ИмяРеквизита);
			
			Если ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяКлюча) Тогда
				
				ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяКлюча, ДокументОбъект[ИмяРеквизита]);
				СтруктураЗапроса = ФормаПодбора.ЭлементыФормы.СписокВидовПодбора.Значение;
				Родитель         = ФормаПодбора.ПолучитьТекущегоРодителя();
				
				ФормаПодбора.ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса);
				ФормаПодбора.ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры // ОбновитьПараметрыИФормуПодбора()
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРЕТАСКИВАНИЕМ НОМЕНКЛАТУРЫ ИЗ ПОДБОРА
	
	// Функция выполняет проверку перетаскивания из подбора номенклатуры.
	//
	// Параметры:
	//  ПараметрыПеретаскивания - параметры перетаскивания.
	//
	// Возвращаемое значение: 
	//  Флаг проверки.
	//
	Функция ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Экспорт
		
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
			Возврат ПараметрыПеретаскивания.Значение.Свойство("ИзПодбора");
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции // ПолучитьСтруктуруЗначенийПеретаскивания()
	
	// Процедура проверки перетаскивания из подбора номенклатуры.
	//
	// Параметры:
	//  ПараметрыПеретаскивания - параметры перетаскивания.
	//  СтандартнаяОбработка    - cтандартная обработка.
	//  ДокументСсылка          - ссылка на документ.
	//  ИмяТЧ                   - имя табличной части.
	//
	Процедура ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ДокументСсылка, ИмяТЧ) Экспорт
		
		СтандартнаяОбработка = Ложь;
		//Если ДокументСсылка = ПараметрыПеретаскивания.Значение.Владелец
		//   И ИмяТЧ = ПараметрыПеретаскивания.Значение.ИмяТЧ Тогда
		Если ИмяТЧ = ПараметрыПеретаскивания.Значение.ИмяТЧ Тогда
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
		
	КонецПроцедуры // ПроверкаПеретаскиванияИзПодбора()
	
	// Процедура подтверждающая перетаскивание из подбора номенклатуры.
	//
	// Параметры:
	//  ПараметрыПеретаскивания - параметры перетаскивания.
	//  СтандартнаяОбработка    - cтандартная обработка.
	//
	Процедура ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт
		
		// Игорь 29.02.2012 11:42:37

		СтандартнаяОбработка                       = Ложь;
		Если НЕ(ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Структура")) Тогда
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
			//Данный перенос только для справочника МЕНЮ	
		ИначеЕсли ПараметрыПеретаскивания.Значение.ИмяТЧ="Меню" Тогда
			//перенос элемента
			Если НЕ(ПараметрыПеретаскивания.Значение.ВыбСтрока.ЭтоГруппа) Тогда
				// проверка уникальности
				СпрМенюВыборка = Справочники.Меню.Выбрать(,ПараметрыПеретаскивания.Значение.Владелец,,);
				Пока СпрМенюВыборка.Следующий() Цикл
					Если (ПараметрыПеретаскивания.Значение.ВыбСтрока=СпрМенюВыборка.ПолучитьОбъект().Номенклатура) Тогда
						ПараметрыПеретаскивания.Значение.Вставить("СтруктураПараметровПереноса", Обработки.ПодборНоменклатуры.ПолучитьФорму("ВводПараметровПереносаЭлемента", ПараметрыПеретаскивания.Значение.ФормаПодбора).ОткрытьМодально());				
						//Получаем настройки
						Если Не(ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса)) Тогда
							Возврат;
						КонецЕсли;						
						Если НЕ(ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ОбновлятьСуществующие)И
							НЕ(ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ПеремещатьСуществующие) Тогда						
							Возврат;
						КонецЕсли;
						Если (Элемент.ТекущийРодитель.Ссылка<>СпрМенюВыборка.ПолучитьОбъект().Родитель.Ссылка)И
							(ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ПеремещатьСуществующие) Тогда
							ПолученныйОбъект = СпрМенюВыборка.ПолучитьОбъект();
							ПолученныйОбъект.Родитель = Элемент.ТекущийРодитель.Ссылка;
							//ПолученныйОбъект.ПометкаУдаления = Номенклатура.ПометкаУдаления;
							
							Попытка
								ПолученныйОбъект.Записать();
							Исключение
								Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
							КонецПопытки;
							
						ИначеЕсли ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ОбновлятьСуществующие Тогда
							ПолученныйОбъект = СпрМенюВыборка.ПолучитьОбъект();
							//ПолученныйОбъект.НоменклатураПрочитать(ПолученныйОбъект, ПараметрыПеретаскивания.Значение.ВыбСтрока, ПараметрыПеретаскивания.Значение.ФормаПодбора.ДатаРасчетов);							
							Если НЕ(Обработки.ОбновлениеМеню.Создать().ДобавитьОбновитьНоменклатуруМеню(ПараметрыПеретаскивания.Значение.ВыбСтрока,ПараметрыПеретаскивания.Значение.ФормаПодбора.ДатаРасчетов)) Тогда
								Сообщить("Ошибка добавления информации в регистр!");
							КонецЕсли;	
							ПолученныйОбъект.Актуальность				= Истина;
							Попытка
								ПолученныйОбъект.Записать();
							Исключение
								Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
							КонецПопытки;
						КонецЕсли;	
						Попытка
							ПараметрыПеретаскивания.Значение.ФормаПодбора.ЭтаФорма.ВладелецФормы.СправочникСписок.Обновить();
						Исключение КонецПопытки;
						Возврат;						
					КонецЕсли;	
				КонецЦикла;	
				
				Номенклатура = ПараметрыПеретаскивания.Значение.ВыбСтрока;
				НовыйОбъектМеню = Справочники.Меню.СоздатьЭлемент();
				НовыйОбъектМеню.Владелец = ПараметрыПеретаскивания.Значение.Владелец;
				НовыйОбъектМеню.Родитель = Элемент.ТекущийРодитель;
				НовыйОбъектМеню.Номенклатура				= Номенклатура.Ссылка;
				НовыйОбъектМеню.ПометкаУдаления = Номенклатура.ПометкаУдаления;
				Если НЕ(Обработки.ОбновлениеМеню.Создать().ДобавитьОбновитьНоменклатуруМеню(Номенклатура)) Тогда
					Сообщить("Ошибка добавления информации в регистр!");
				КонецЕсли;							
				НовыйОбъектМеню.Актуальность				= Истина;	
				Попытка
					НовыйОбъектМеню.Записать();	
				Исключение
					Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
				
			Иначе  //перенос группы
				Если ПараметрыПеретаскивания.Значение.ВыбСтрока.ЭтоГруппа Тогда
					ПараметрыПеретаскивания.Значение.Вставить("СтруктураПараметровПереноса", Обработки.ПодборНоменклатуры.ПолучитьФорму("ВводПараметровПереносаГруппы", ПараметрыПеретаскивания.Значение.ФормаПодбора).ОткрытьМодально());
				КонецЕсли;					
				//Попытка
					//Получаем настройки
					Если Не(ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса)) Тогда
						Возврат;
					КонецЕсли;	
					Режим = ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ПараметрыПереносаГрупп;
					ИерархическийСписок = ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ИерархическийСписок;
					ИсключаяВерхнийУровень = ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ИсключаяВерхнийУровень;
					ОбновлятьСуществующие = ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ОбновлятьСуществующие;
					ПеремещатьСуществующие = ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ПеремещатьСуществующие;
					ПомеченныеНаУдаление = ПараметрыПеретаскивания.Значение.СтруктураПараметровПереноса.ПомеченныеНаУдаление;
					
					// -- перенос
					спГруппы = Новый СписокЗначений; 
					ТЗВыборка = ПараметрыПеретаскивания.Значение.ТЗВыборка;
					ПереносимыйЭлемент = ПараметрыПеретаскивания.Значение.ВыбСтрока;
					Вложенность = ПараметрыПеретаскивания.Значение.ВыбСтрока.Уровень()+1;
					ВладелМеню = ПараметрыПеретаскивания.Значение.Владелец; 
					
					Меню = Справочники.Меню;	
					НачатьТранзакцию();
					//Режим = 1 Переносим только группы
					//Режим = 2 Перенос группы и подчиненных элементов
					// ---- верхний уровень
					Если НЕ(Режим) ИЛИ ((ИерархическийСписок) И НЕ(ИсключаяВерхнийУровень)) Тогда					
						НазвГруппы = ПараметрыПеретаскивания.Значение.ВыбСтрока.Наименование;					
						//ищем группу в папке куда хотим перенести
						НовыйОбъектСсылка = Меню.НайтиПоРеквизиту("Номенклатура",НазвГруппы, Элемент.ТекущийРодитель, ВладелМеню);
						Если НовыйОбъектСсылка = Меню.ПустаяСсылка() Тогда				
							Если НЕ(НовыйОбъектСсылка.ЭтоГруппа) Тогда
								//если не находим группы в переносимую папку - то создаем
								НовыйОбъектМеню = Справочники.Меню.СоздатьГруппу();
								НовыйОбъектМеню.Владелец = ВладелМеню;
								НовыйОбъектМеню.Родитель = Элемент.ТекущийРодитель;
								НовыйОбъектМеню.Номенклатура		= Строка(ПараметрыПеретаскивания.Значение.ВыбСтрока);							
								НовыйОбъектМеню.Актуальность			= Истина;
								НовыйОбъектМеню.Записать();
								НовыйОбъектСсылка = НовыйОбъектМеню.Ссылка;
							КонецЕсли;
						КонецЕсли;
						//если нашли группу в папке куда хотели перенести, то проверям удалена группа или нет					
						Если НЕ(ПереносимыйЭлемент.ПометкаУдаления = НовыйОбъектСсылка.ПометкаУдаления) Тогда
							Если ПереносимыйЭлемент.ПометкаУдаления Тогда
								НовыйОбъектСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Ложь);//помечаем на удаление
							Иначе
								НовыйОбъектСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь,Ложь);
							КонецЕсли;
						КонецЕсли;
						спГруппы.Добавить(НовыйОбъектСсылка);					
					КонецЕсли;
					
					// ---- структура (перенос группы и подчиненных элементов)
					Если Режим Тогда
						Состояние("Обработка справочника ...");		
						Если ИсключаяВерхнийУровень Тогда
							спГруппы.Добавить(Элемент.ТекущийРодитель);
						КонецЕсли;
						
						спИсключаемых = Новый СписокЗначений; 
						//СпрНоменклатураВыборка = Справочники.Номенклатура.ВыбратьИерархически(ПереносимыйЭлемент);
						//выбираем все элементы структуры которую переносим
						Для каждого ТМЦ из  ТЗВыборка Цикл
							СпрНоменклатураВыборка = ТМЦ.Номенклатура;
							// ------ помеченные на удаление
							Для Поз = 0 По спИсключаемых.Количество()-1 Цикл
								Если ТипЗнч(СпрНоменклатураВыборка) = Тип("СправочникОбъект.Номенклатура") Тогда
									Если СпрНоменклатураВыборка.Ссылка.ПринадлежитЭлементу(спИсключаемых.Получить(Поз).Значение) Тогда
										Продолжить;
									КонецЕсли;
								ИначеЕсли  ТипЗнч(СпрНоменклатураВыборка) = Тип("СправочникСсылка.Номенклатура") Тогда 
									Если СпрНоменклатураВыборка.ПринадлежитЭлементу(спИсключаемых.Получить(Поз).Значение) Тогда
										Продолжить;
									КонецЕсли;
								КонецЕсли;			
							КонецЦикла;
							
							Если НЕ(ПомеченныеНаУдаление) И (СпрНоменклатураВыборка.ПометкаУдаления) Тогда
								Если (СпрНоменклатураВыборка.ЭтоГруппа) Тогда
									спИсключаемых.Добавить(СпрНоменклатураВыборка);
								КонецЕсли;
								Продолжить;
							КонецЕсли;
							
							// ------ группа
							Если (ИерархическийСписок) И (СпрНоменклатураВыборка.ЭтоГруппа) Тогда
								ВладЭлемента = ВладелМеню;
								ГрЭлемента = спГруппы.Получить(СпрНоменклатураВыборка.Уровень() - Вложенность).Значение;	
								ЧтоИщем = СпрНоменклатураВыборка.Наименование;
								НовыйОбъектСсылка = Меню.НайтиПоРеквизиту("Номенклатура",ЧтоИщем, ГрЭлемента.Ссылка, ВладЭлемента);							
								Если (НовыйОбъектСсылка = Меню.ПустаяСсылка())или(НЕ(НовыйОбъектСсылка.ЭтоГруппа)) Тогда
									НовыйОбъектМеню = Справочники.Меню.СоздатьГруппу();
									НовыйОбъектМеню.Владелец = ВладЭлемента;
									НовыйОбъектМеню.Родитель = ГрЭлемента.Ссылка;
									НовыйОбъектМеню.Номенклатура		= Строка(ЧтоИщем);								
									НовыйОбъектМеню.Актуальность			= Истина;
									НовыйОбъектМеню.Записать();
									НовыйОбъектСсылка = НовыйОбъектМеню.Ссылка; 
								КонецЕсли;
								
								СпрНоменклатура = Неопределено;
								ОбщегоНазначенияРабочий.ПолучитьСсылкуИзОбъектаСправочника("Номенклатура" , "Ссылка" , СпрНоменклатураВыборка , СпрНоменклатура);
								СпрНоменклатураВыборка = СпрНоменклатура; 
								
								Если НЕ(СпрНоменклатураВыборка.ПометкаУдаления = НовыйОбъектСсылка.ПометкаУдаления) Тогда
									Если СпрНоменклатураВыборка.ПометкаУдаления Тогда
										Если ТипЗнч(НовыйОбъектСсылка) = Тип("СправочникОбъект.Меню") Тогда
											НовыйОбъектСсылка.УстановитьПометкуУдаления(Истина,Ложь);//помечаем на удаление
										ИначеЕсли  ТипЗнч(НовыйОбъектСсылка) = Тип("СправочникСсылка.Меню") Тогда 
											НовыйОбъектСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Ложь);//помечаем на удаление
										КонецЕсли;
									Иначе
										Если ТипЗнч(НовыйОбъектСсылка) = Тип("СправочникОбъект.Меню") Тогда
											НовыйОбъектСсылка.УстановитьПометкуУдаления(Истина,Ложь);//помечаем на удаление
										ИначеЕсли  ТипЗнч(НовыйОбъектСсылка) = Тип("СправочникСсылка.Меню") Тогда 
											НовыйОбъектСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина,Ложь);//помечаем на удаление
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
								Если (спГруппы.Количество() < СпрНоменклатураВыборка.Уровень() - Вложенность + 1) Тогда
									спГруппы.Добавить(НовыйОбъектСсылка);
								Иначе
									спГруппы.Вставить(СпрНоменклатураВыборка.Уровень() - Вложенность + 1,НовыйОбъектСсылка);
								КонецЕсли;
								Продолжить;
							КонецЕсли;
							
							// ------ элемент
							Если НЕ(СпрНоменклатураВыборка.ПолучитьОбъект().ЭтоГруппа) Тогда													
								Отбор = новый Структура("Номенклатура", СпрНоменклатураВыборка.Ссылка); 
								СпрМенюВыборка = Справочники.Меню.Выбрать(,,Отбор,);
								фНеНайден = Истина;
								Если ИерархическийСписок Тогда
									//переносим сохраняя группу
									МенюРодитель = спГруппы.Получить(СпрНоменклатураВыборка.Уровень() - Вложенность).Значение;
								Иначе
									//просто переносим в указанную группу
									МенюРодитель = Элемент.ТекущийРодитель;
								КонецЕсли;
								
								Пока СпрМенюВыборка.Следующий() Цикл
									СпрМенюВыборкаОбъект = СпрМенюВыборка.ПолучитьОбъект();

									Если НЕ(СпрМенюВыборкаОбъект.Владелец = ПараметрыПеретаскивания.Значение.Владелец) Тогда
										Продолжить;
									КонецЕсли;
									
									Если ПеремещатьСуществующие Тогда
										Если НЕ(СпрМенюВыборкаОбъект.Родитель = МенюРодитель) Тогда
											ПолученныйОбъект = СпрМенюВыборкаОбъект;
											ПолученныйОбъект.Родитель = МенюРодитель.Ссылка;
											ПолученныйОбъект.Записать();
										КонецЕсли;
										Если НЕ(СпрНоменклатураВыборка.ПометкаУдаления = СпрМенюВыборкаОбъект.ПометкаУдаления) Тогда
											Если СпрНоменклатураВыборка.ПометкаУдаления Тогда
												СпрМенюВыборкаОбъект.УстановитьПометкуУдаления(Истина,Ложь);//помечаем на удаление
											Иначе
												СпрМенюВыборкаОбъект.УстановитьПометкуУдаления(Ложь,Ложь);
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
									
									Если ОбновлятьСуществующие Тогда
										ПолученныйОбъект = СпрМенюВыборкаОбъект;
										//ПолученныйОбъект.НоменклатураПрочитать(ПолученныйОбъект, СпрНоменклатураВыборка, ПараметрыПеретаскивания.Значение.ФормаПодбора.ДатаРасчетов);							
										Если НЕ(Обработки.ОбновлениеМеню.Создать().ДобавитьОбновитьНоменклатуруМеню(СпрНоменклатураВыборка.ПолучитьОбъект(), ПараметрыПеретаскивания.Значение.ФормаПодбора.ДатаРасчетов)) Тогда
											Сообщить("Ошибка добавления информации в регистр!");
										КонецЕсли;	
										ПолученныйОбъект.Актуальность				= Истина;
										ПолученныйОбъект.Записать();
									КонецЕсли;
									фНеНайден = Ложь; 
									Прервать;
								КонецЦикла;
								
								Если фНеНайден Тогда
									НовыйОбъектМеню = Справочники.Меню.СоздатьЭлемент();
									НовыйОбъектМеню.Владелец					= ПараметрыПеретаскивания.Значение.Владелец;
									НовыйОбъектМеню.Родитель 					= МенюРодитель.Ссылка;
									НовыйОбъектМеню.Номенклатура				= СпрНоменклатураВыборка.Ссылка;
									//НовыйОбъектМеню.НоменклатураПрочитать(НовыйОбъектМеню, СпрНоменклатураВыборка);							
									Если НЕ(Обработки.ОбновлениеМеню.Создать().ДобавитьОбновитьНоменклатуруМеню(СпрНоменклатураВыборка.ПолучитьОбъект())) Тогда
										Сообщить("Ошибка добавления информации в регистр!");
									КонецЕсли;																
									
									НовыйОбъектМеню.Актуальность				= Истина;
									НовыйОбъектМеню.Записать();
									
									Если СпрНоменклатураВыборка.ПометкаУдаления Тогда
										СпрНоменклатураВыборка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					Попытка
						ПараметрыПеретаскивания.Значение.ФормаПодбора.ЭтаФорма.ВладелецФормы.СправочникСписок.Обновить();
					Исключение КонецПопытки;
				//Исключение
					//Предупреждение("Не возможно выполнить выбор данного элемента!",30);
				//КонецПопытки;			
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры // ПеретаскиваниеИзПодбора()
	
	// Процедура отменяющая перетаскивание из подбора номенклатуры.
	//
	// Параметры:
	//  ПараметрыПеретаскивания - параметры перетаскивания.
	//  СтандартнаяОбработка    - cтандартная обработка.
	//
	Процедура ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка                       = Ложь;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	КонецПроцедуры // ПеретаскиваниеОтменить()
	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАССЧЕТА СКИДОК ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

Функция ЗаполнитьТаблицуЗначений(ЧтоОбходим, ТаблицаПриемник, Скидки=Ложь)
	// Нисходящий обход дерева.
	СписокПодчиненных = Новый СписокЗначений();
	СписокПодчиненных.Добавить(ЧтоОбходим);
	
	Для Каждого СтрокаВладелец Из СписокПодчиненных Цикл
		СтрокаВладелец = СтрокаВладелец.Значение;	// Друг чекиста ;)
		
		Если ТипЗнч (ЧтоОбходим) = Тип("ДеревоЗначений") Тогда
			Источник = СтрокаВладелец.Строки;
		Иначе
			Источник = СтрокаВладелец;
		КонецЕсли;
		
		Для Каждого СтрокаВладельца Из Источник Цикл
			// -- Добавление данных 
			Если Не(Скидки) Тогда
				СтрокаТЧ = ТаблицаПриемник.Добавить();
				СтрокаТЧ.Ссылка = СтрокаВладельца;				
				СтрокаТЧ.СуммаБезСкидок = СтрокаВладельца.СуммаБезСкидок;
				СтрокаТЧ.Номенклатура = СтрокаВладельца.Номенклатура;
			Иначе
				СтрокаТЧ = ТаблицаПриемник.Добавить();
				СтрокаТЧ.Ссылка = СтрокаВладельца;				
				СтрокаТЧ.Актуальность = СтрокаВладельца.Актуальность;
				СтрокаТЧ.СкидкаНаценка = СтрокаВладельца.СкидкаНаценка;
			КонецЕсли;	
			
			Если ТипЗнч (ЧтоОбходим) = Тип("ДеревоЗначений") Тогда
				Если (Не СтрокаВладельца.Строки.Количество() = 0) Тогда
					СписокПодчиненных.Добавить(СтрокаВладельца);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат ТаблицаПриемник;
КонецФункции	

// Чистяков Павел 07.10.2010 15:03:02 
//Процедура РасчитатьСкидкуПоСтроке(Строка,Скидки,ТаблицаТоваровУслуг,СуммаСкидки,СуммаНаценки)
//Костенюк Александр-Старт 19.07.2012
Процедура РасчитатьСкидкуПоСтроке(Строка,Скидки,ТаблицаТоваровУслуг,СуммаСкидки,СуммаНаценки,СуммаДепозита,ДисконтнаяКарта)
//Костенюк Александр-Финиш 19.07.2012
	
	Если Строка.СуммоваяСкидка Тогда
		
		НайденныеСтроки		= Скидки.НайтиСтроки(Новый Структура("Ссылка",Строка.Ссылка));
		МассивСтрок			= Новый Массив;
		//Для каждого СтрокаТоваров Из ТаблицаТоваровУслуг Цикл
		//	ДобавлятьСтроку = Истина;
		//	Для каждого СтрокаМассив Из НайденныеСтроки Цикл
		//		Если (СтрокаМассив.Номенклатура=СтрокаТоваров.Номенклатура
		//			ИЛИ СтрокаМассив.Номенклатура=СтрокаТоваров.НоменклатурнаяГруппа)
		//			И СтрокаМассив.ПроцентСкидкиНаценки=0 Тогда
		//			ДобавлятьСтроку = Ложь;
		//			Прервать;
		//		КонецЕсли;
		//	КонецЦикла;
		//	Если ДобавлятьСтроку Тогда
		//		МассивСтрок.Добавить(СтрокаТоваров);
		//	КонецЕсли; 
		//КонецЦикла; 
		
		//Костенюк Александр-Старт 16.08.2012
		Для каждого СтрокаТоваров Из ТаблицаТоваровУслуг Цикл
			Для каждого СтрокаМассив Из НайденныеСтроки Цикл
				Если (СтрокаМассив.Номенклатура = СтрокаТоваров.Номенклатура)
					ИЛИ (СтрокаМассив.Номенклатура = СтрокаТоваров.НоменклатурнаяГруппа)
					ИЛИ (СтрокаМассив.Номенклатура = Справочники.Номенклатура.ПустаяСсылка()) Тогда
					Если СтрокаМассив.ПроцентСкидкиНаценки > 0 Тогда
						МассивСтрок.Добавить(СтрокаТоваров);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла; 
		//Костенюк Александр-Финиш 16.08.2012
		
		СуммаРаспределения		= Строка.ПроцентСкидкиНаценки;
		СтрокаМаксимум			= Неопределено;
		ЗначениеМаксимум		= 0;
		МаксимумСкидки			= 0;
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Сумма = СтрокаМассива.СуммаБезСкидок - 0.01 - СтрокаМассива.СуммаСкидки;
			Если ЗначениеМаксимум<Сумма Тогда
				ЗначениеМаксимум	= Сумма;
				СтрокаМаксимум		= СтрокаМассива;
			КонецЕсли; 
			МаксимумСкидки		= МаксимумСкидки + Сумма;
		КонецЦикла;
		
		Если СуммаРаспределения>0
			И СуммаРаспределения>МаксимумСкидки Тогда
			СуммаРаспределения = МаксимумСкидки;
		КонецЕсли;
		
		//Костенюк Александр-Старт 03.08.2012
		// Депозиты
		Если ДисконтнаяКарта.ВидДисконтнойКарты.Накопительная Тогда
			СуммаДепозита = СуммаРаспределения;
		Иначе
		//Костенюк Александр-Финиш 03.08.2012
			Если МаксимумСкидки<>0 Тогда
				
				Для каждого СтрокаМассива Из МассивСтрок Цикл
					Если СуммаРаспределения>0 Тогда
						Сумма						= СуммаРаспределения*((СтрокаМассива.СуммаБезСкидок-0.01-СтрокаМассива.СуммаСкидки)/МаксимумСкидки);
						СтароеЗначение				= СтрокаМассива.СуммаСкидки;
						СтрокаМассива.СуммаСкидки	= СтрокаМассива.СуммаСкидки + Сумма;
						СуммаСкидки					= СуммаСкидки + СтрокаМассива.СуммаСкидки - СтароеЗначение;
					Иначе
						Сумма						= -СуммаРаспределения*((СтрокаМассива.СуммаБезСкидок - 0.01 - СтрокаМассива.СуммаСкидки + СтрокаМассива.СуммаНаценки)/МаксимумСкидки);
						СтароеЗначение				= СтрокаМассива.СуммаНаценки;
						СтрокаМассива.СуммаНаценки	= СтрокаМассива.СуммаНаценки + Сумма;
						СуммаСкидки					= СуммаСкидки + СтрокаМассива.СуммаНаценки - СтароеЗначение;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаМаксимум<>Неопределено Тогда
					Если СуммаРаспределения>=0 Тогда
						СтрокаМаксимум.СуммаСкидки	= СтрокаМаксимум.СуммаСкидки + (СуммаРаспределения-СуммаСкидки);
						СуммаСкидки					= СуммаРаспределения;
					Иначе
						СтрокаМаксимум.СуммаНаценки = СтрокаМаксимум.СуммаНаценки - СуммаРаспределения - СуммаНаценки;
						СуммаНаценки				= СуммаРаспределения;
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Для каждого СтрокаТоваров Из ТаблицаТоваровУслуг Цикл
			
			УточняющиеУсловия	= Скидки.НайтиСтроки(Новый Структура("Ссылка",Строка.Ссылка));		
			СуммаСкидкиТекущая	= 0;
			СуммаНаценкиТекущая	= 0;
			
			//Костенюк Александр-Старт 03.08.2012
			// Депозиты
			СуммаДепозитаТекущая = 0;
			Если ДисконтнаяКарта.ВидДисконтнойКарты.Накопительная Тогда
				Для каждого СтрокаУсловия Из УточняющиеУсловия Цикл
					Сумма = СтрокаТоваров.СуммаБезСкидок;
					// Внесение денег на депозит
					Если СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Депозит Тогда
						СуммаДепозитаТекущая = СтрокаТоваров.СуммаБезСкидок;
					// Сумма скидки на депозит
					Иначе
						СуммаДепозитаТекущая = (СтрокаТоваров.СуммаБезСкидок*СтрокаУсловия.ПроцентСкидкиНаценки)/100;
					КонецЕсли;
					Если СуммаДепозитаТекущая > Сумма Тогда
						СуммаДепозитаТекущая = Сумма;
					КонецЕсли;
				КонецЦикла;
			Иначе
			//Костенюк Александр-Финиш 03.08.2012
				Для каждого СтрокаУсловия Из УточняющиеУсловия Цикл
					Сумма = СтрокаТоваров.СуммаБезСкидок - 0.01 - СтрокаТоваров.СуммаСкидки;
					Если СтрокаУсловия.Номенклатура=СтрокаТоваров.Номенклатура
						ИЛИ СтрокаУсловия.Номенклатура=СтрокаТоваров.НоменклатурнаяГруппа
						ИЛИ СтрокаУсловия.Номенклатура=Справочники.Номенклатура.ПустаяСсылка() Тогда
						Если СтрокаУсловия.ПроцентСкидкиНаценки>=0 Тогда
							СуммаСкидкиТекущая = (СтрокаТоваров.СуммаБезСкидок*СтрокаУсловия.ПроцентСкидкиНаценки)/100;
							Если СуммаСкидкиТекущая>Сумма Тогда
								СуммаСкидкиТекущая = Сумма;
							КонецЕсли;
						Иначе
							СуммаНаценкиТекущая = (СтрокаТоваров.СуммаБезСкидок*(-СтрокаУсловия.ПроцентСкидкиНаценки))/100;
						КонецЕсли;
						Если СтрокаУсловия.ОграничениеСкидкиНаценки<>0 Тогда
							Если СтрокаУсловия.ОграничениеСкидкиНаценки<СуммаСкидкиТекущая Тогда
								СуммаСкидкиТекущая = СтрокаУсловия.ОграничениеСкидкиНаценки;
							КонецЕсли;
							Если СтрокаУсловия.ОграничениеСкидкиНаценки<СуммаНаценкиТекущая Тогда
								СуммаНаценкиТекущая = СтрокаУсловия.ОграничениеСкидкиНаценки;
							КонецЕсли;
						КонецЕсли;
						// Скидка по номенклатуре имеет приоритет перед скидкой по номенклатурной группе
						// в то же время скидка по номенклатурной группе имеет
						// приоретет перед остальными скидками
						// Приоритет устанавливается в запросе и по нему идет сортировка
						//Костенюк Александр-Закомментировано 15.08.2012 Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Костенюк Александр-Старт 03.08.2012
			СтрокаТоваров.СуммаДепозита	= СтрокаТоваров.СуммаДепозита + СуммаДепозитаТекущая;
			СуммаДепозита 				= СуммаДепозита + СуммаДепозитаТекущая;
			//Костенюк Александр-Финиш 03.08.2012
			
			СтрокаТоваров.СуммаСкидки	= СтрокаТоваров.СуммаСкидки + СуммаСкидкиТекущая;
			СтрокаТоваров.СуммаНаценки	= СтрокаТоваров.СуммаНаценки + СуммаНаценкиТекущая;
			СуммаСкидки					= СуммаСкидки + СуммаСкидкиТекущая;
			СуммаНаценки				= СуммаНаценки + СуммаНаценкиТекущая;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Чистяков Павел 27.09.2010 10:30:23 
//Процедура РассчитатьСуммыПриПродаже(ДокументОбъект, ТаблицаПозиции = Неопределено, ТабличнаяЧастьСкидок=Неопределено) Экспорт
//Костенюк Александр-Старт 17.09.2012
Процедура РассчитатьСуммыПриПродажеСтарая(ДокументОбъект, ТаблицаПозиции = Неопределено, ТабличнаяЧастьСкидок=Неопределено) Экспорт
//Костенюк Александр-Финиш 17.09.2012
	
	ЕстьТаблицаСкидок = Ложь;
	Если ТипЗнч(ТаблицаПозиции) = Тип("ТаблицаЗначений") Тогда
		ЕстьТаблицаСкидок = (ТаблицаПозиции.Колонки.Найти("СуммаСкидки")<>Неопределено);
		ТаблицаТоваровУслуг = ТаблицаПозиции;
	ИначеЕсли ТипЗнч(ТаблицаПозиции) = Тип("ДеревоЗначений") Тогда
		ЕстьТаблицаСкидок = (ТаблицаПозиции.Колонки.Найти("СуммаСкидки")<>Неопределено);
		ТаблицаТоваровУслуг = Новый Массив;
		Для Каждого СтрокаВладелец Из ТаблицаПозиции.Строки Цикл
			ТаблицаТоваровУслуг.Добавить(СтрокаВладелец);
		КонецЦикла;
		Для Каждого СтрокаВладелец Из ТаблицаТоваровУслуг Цикл
			Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
				ТаблицаТоваровУслуг.Добавить(СтрокаВладельца);
			КонецЦикла;
		КонецЦикла;
	Иначе
		МетаданныеОбъекта = ДокументОбъект.Метаданные();
		ЕстьТаблицаСкидок = (МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты.Найти("СуммаСкидки")<>Неопределено);
		ТаблицаТоваровУслуг = Новый Массив;
		Для каждого Строка Из ДокументОбъект.Товары Цикл
			ТаблицаТоваровУслуг.Добавить(Строка);
		КонецЦикла;
		Если ЕстьТаблицаСкидок Тогда
			Для каждого Строка Из ДокументОбъект.Услуги Цикл
				ТаблицаТоваровУслуг.Добавить(Строка);
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЕстьТаблицаСкидок Тогда
		
		Если ТабличнаяЧастьСкидок = Неопределено Тогда
			ТабличнаяЧастьСкидок = ДокументОбъект.Скидки;
		КонецЕсли;
		
		Если ДокументОбъект.Проведен
			ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Если ДокументОбъект.РучноеУправлениеСкидками Тогда
			
			Для каждого Строка Из ТабличнаяЧастьСкидок Цикл
				Строка.СуммаСкидки	= 0;
				Строка.СуммаНаценки	= 0;
				Строка.СуммаДепозита = 0; //Костенюк Александр 15.08.2012
			КонецЦикла;
			
			Для каждого Строка Из ТаблицаТоваровУслуг Цикл
				
				Сумма	= Строка.Цена*Строка.Количество;
				Наценка = 0;
				Скидка	= 0;
				СуммаДепозита = 0; //Костенюк Александр 15.08.2012

				СуммаДоИзменения = Строка.СуммаБезСкидок;
				
				Если Булево(СуммаДоИзменения) Тогда
					Поправка = Сумма / СуммаДоИзменения;
				Иначе
					Поправка = 1.0;
				КонецЕсли;
				
				Строка.СуммаБезСкидок	= Сумма;
				Строка.СуммаНаценки		= Строка.СуммаНаценки*Поправка;
				Наценка					= Строка.СуммаНаценки;
				Строка.СуммаСкидки		= Мин(Строка.СуммаСкидки*Поправка,Макс(Сумма-0.01,0));
				Скидка					= Строка.СуммаСкидки;
				//Костенюк Александр-Старт 15.08.2012
				// Депозиты
				Строка.СуммаДепозита	= Строка.СуммаДепозита*Поправка;
				СуммаДепозита			= Строка.СуммаДепозита;
				//Костенюк Александр-Финиш 15.08.2012
				Строка.Сумма			= Сумма + Наценка - Скидка;
				Строка.СуммаНДС			= Ценообразование.РассчитатьСуммуНДС(Строка.Сумма,Истина,Истина,Ценообразование.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				
			КонецЦикла; 
			
			Возврат;
		КонецЕсли; 
		
		МассивСтрок = ТабличнаяЧастьСкидок.НайтиСтроки(Новый Структура("Актуальность,Автоматическая",Истина,Истина));
		Для каждого Строка Из МассивСтрок Цикл
			ТабличнаяЧастьСкидок.Удалить(Строка);
		КонецЦикла;
		
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ТипыСкидокНаценок.Ссылка КАК Ссылка,
		//|	ТипыСкидокНаценок.СуммоваяСкидкаНаценка КАК СуммоваяСкидка,
		//|	ТипыСкидокНаценок.Условие КАК Условие,
		//|	ТипыСкидокНаценок.ЗначениеУсловия,
		////Костенюк Александр-Старт 11.05.12
		//|	ТипыСкидокНаценок.ЗначениеУсловияДополнительное,
		////Костенюк Александр-Финиш 11.05.12
		//|	ТипыСкидокНаценок.ПоДнямНедели,
		//|	ВЫБОР
		//|		КОГДА ТИПЗНАЧЕНИЯ(ТипыСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.Сертификаты)
		//|				ИЛИ ТИПЗНАЧЕНИЯ(ТипыСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.видыСертификатов)
		//|			ТОГДА ВЫБОР
		//|					КОГДА Элементы.ПроцентСкидкиНаценки = 0
		//|						ТОГДА 0
		//|					ИНАЧЕ ВЫБОР
		//|							КОГДА ТипыСкидокНаценок.Ссылка.Уточняемая
		//|								ТОГДА &ЗначениеСкидки
		//|							ИНАЧЕ Элементы.ПроцентСкидкиНаценки
		//|						КОНЕЦ
		//|				КОНЕЦ
		//|		КОГДА ТИПЗНАЧЕНИЯ(ТипыСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.ВидыДисконтныхКарт)
		//|			ТОГДА ВЫБОР
		//|					КОГДА Элементы.ПроцентСкидкиНаценки = 0
		//|						ТОГДА 0
		//|					ИНАЧЕ ВЫБОР
		//|							КОГДА &УсловиеСкидки <> НЕОПРЕДЕЛЕНО
		//|								ТОГДА &ПроцентПоУсловию
		//|							КОГДА ТипыСкидокНаценок.Ссылка.Уточняемая
		//|								ТОГДА &ПроцентУточняемый
		//|							ИНАЧЕ Элементы.ПроцентСкидкиНаценки
		//|						КОНЕЦ
		//|				КОНЕЦ
		//|		ИНАЧЕ Элементы.ПроцентСкидкиНаценки
		//|	КОНЕЦ КАК ПроцентСкидкиНаценки,
		//|	Элементы.ОграничениеСкидкиНаценки КАК ОграничениеСкидкиНаценки,
		//|	Элементы.Номенклатура КАК Номенклатура,
		//|	ВЫБОР
		//|		КОГДА Элементы.Приоритет = 0
		//|			ТОГДА ВЫБОР
		//|					КОГДА Элементы.Номенклатура ССЫЛКА Справочник.Номенклатура
		//|						ТОГДА 10
		//|					КОГДА Элементы.Номенклатура ССЫЛКА Справочник.НоменклатурныеГруппы
		//|						ТОГДА 11
		//|				КОНЕЦ
		//|		ИНАЧЕ Элементы.Приоритет
		//|	КОНЕЦ КАК Приоритет,
		//|	ТипыСкидокНаценок.ВытесняющаяСкидка,
		//|	ЕСТЬNULL(События.Документ, ЗНАЧЕНИЕ(Документ.Событие.ПустаяСсылка)) КАК ДокументСобытия
		//|ИЗ
		//|	Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
		//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			События.ГруппаСобытия КАК ГруппаСобытия,
		//|			СостояниеСобытий.Документ КАК Документ
		//|		ИЗ
		//|			(ВЫБРАТЬ
		//|				События.ГруппаСобытия КАК ГруппаСобытия,
		//|				МИНИМУМ(События.Дата) КАК Дата
		//|			ИЗ
		//|				РегистрСведений.СостояниеСобытий КАК События
		//|			ГДЕ
		//|				События.Контрагент = &Контрагент
		//|				И События.Дата < &ДатаДокумента
		//|			
		//|			СГРУППИРОВАТЬ ПО
		//|				События.ГруппаСобытия) КАК События
		//|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСобытий КАК СостояниеСобытий
		//|				ПО События.ГруппаСобытия = СостояниеСобытий.ГруппаСобытия
		//|					И События.Дата = СостояниеСобытий.Дата
		//|		ГДЕ
		//|			СостояниеСобытий.Контрагент = &Контрагент
		//|			И События.Дата < &ДатаДокумента) КАК События
		//|		ПО (События.ГруппаСобытия = ТипыСкидокНаценок.ЗначениеУсловия)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			ЭлементыРегистр.Номенклатура КАК Номенклатура,
		//|			ЭлементыРегистр.ТипСкидкиНаценки КАК ТипСкидкиНаценки,
		//|			ЭлементыРегистр.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		//|			0 КАК ОграничениеСкидкиНаценки,
		//|			0 КАК Приоритет
		//|		ИЗ
		//|			РегистрСведений.СкидкиНаценкиНоменклатуры КАК ЭлементыРегистр
		//|		ГДЕ
		//|			ЭлементыРегистр.Номенклатура В(&Номенклатура)
		//|		
		//|		ОБЪЕДИНИТЬ ВСЕ
		//|		
		//|		ВЫБРАТЬ
		//|			Товары.Ссылка,
		//|			ТипыСкидокНаценок.Ссылка,
		//|			0,
		//|			0,
		//|			1
		//|		ИЗ
		//|			(ВЫБРАТЬ
		//|				Номенклатура.Ссылка КАК Ссылка,
		//|				Номенклатура.Безнадбавочный КАК Безнадбавочный,
		//|				Номенклатура.Безскидочный КАК Безскидочный
		//|			ИЗ
		//|				Справочник.Номенклатура КАК Номенклатура
		//|			ГДЕ
		//|				(Номенклатура.Безнадбавочный
		//|						ИЛИ Номенклатура.Безскидочный)
		//|				И (НЕ Номенклатура.ЭтоГруппа)
		//|				И Номенклатура.Ссылка В(&Номенклатура)) КАК Товары
		//|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
		//|				ПО (ИСТИНА)
		//|		ГДЕ
		//|			ТипыСкидокНаценок.Актуальность
		//|			И (НЕ ТипыСкидокНаценок.ЭтоГруппа)
		//|			И ВЫБОР
		//|					КОГДА ТипыСкидокНаценок.ПроцентСкидкиНаценки > 0
		//|							И Товары.Безскидочный
		//|						ТОГДА ИСТИНА
		//|					КОГДА ТипыСкидокНаценок.ПроцентСкидкиНаценки < 0
		//|							И Товары.Безнадбавочный
		//|						ТОГДА ИСТИНА
		//|					ИНАЧЕ ЛОЖЬ
		//|				КОНЕЦ
		//|		
		//|		ОБЪЕДИНИТЬ ВСЕ
		//|		
		//|		ВЫБРАТЬ
		//|			ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		//|			ТипыСкидокНаценок.Ссылка,
		//|			ТипыСкидокНаценок.ПроцентСкидкиНаценки,
		//|			ТипыСкидокНаценок.ОграничениеСкидкиНаценки,
		//|			100
		//|		ИЗ
		//|			Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
		//|		ГДЕ
		//|			(НЕ ТипыСкидокНаценок.ЭтоГруппа)
		//|			И ТипыСкидокНаценок.Актуальность) КАК Элементы
		//|		ПО (Элементы.ТипСкидкиНаценки = ТипыСкидокНаценок.Ссылка)
		//|ГДЕ
		//|	ТипыСкидокНаценок.Актуальность
		//|	И (НЕ ТипыСкидокНаценок.ПометкаУдаления)
		//|	И (НЕ ТипыСкидокНаценок.ЭтоГруппа)
		//|	И ВЫБОР
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.РучнаяСкидка)
		//|					И ТипыСкидокНаценок.Ссылка В (&РучныеСкидки)
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.БезУсловий)
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)
		//|					И ТипыСкидокНаценок.ЗначениеУсловия = &ВидДисконтнойКарты
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
		//|					И ТипыСкидокНаценок.ЗначениеУсловия = &ДисконтнаяКарта
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСертификату)
		//|					И ТипыСкидокНаценок.ЗначениеУсловия = &Сертификат
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуСертификата)
		//|					И ТипыСкидокНаценок.ЗначениеУсловия = &ВидСертификата
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоКоличествуТовара)
		//|					И &Количество >= ТипыСкидокНаценок.ЗначениеУсловия
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
		//|					И &Сумма >= ТипыСкидокНаценок.ЗначениеУсловия
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоКатегорииКонтрагента)
		//|					И &КатегорияКонтрагента = ТипыСкидокНаценок.ЗначениеУсловия
		//|				ТОГДА ИСТИНА
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоГруппеСобытия)
		//|				ТОГДА (НЕ События.Документ ЕСТЬ NULL )
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойПрограмме)
		//|					И ТипыСкидокНаценок.ЗначениеУсловия = &ВидДисконтнойКарты
		//|					И &ДисконтСумма >= ТипыСкидокНаценок.ПорогДисконтнойПрограммы
		//|				ТОГДА ИСТИНА
		////Костенюк Александр-Старт 10.05.12
		//|			"+ТекстУсловияСкидкаПоДР+"
		////Костенюк Александр-Старт 10.05.12
		////Костенюк Александр-Старт 14.05.12
		//|			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоМаршрутуДоставки)
		//|					И ТипыСкидокНаценок.ЗначениеУсловия = &МаршрутДоставки
		//|				ТОГДА ИСТИНА
		////Костенюк Александр-Финиш 14.05.12
		//|			ИНАЧЕ ЛОЖЬ
		//|		КОНЕЦ
		//|	И ((НЕ ТипыСкидокНаценок.ПоДнямНедели)
		//|			ИЛИ ТипыСкидокНаценок.Ссылка В
		//|				(ВЫБРАТЬ
		//|					ТипыСкидокНаценок.Ссылка
		//|				ИЗ
		//|					Справочник.ТипыСкидокНаценок.ВремяПоДнямНедели КАК ТипыСкидокНаценок
		//|				ГДЕ
		//|					ТипыСкидокНаценок.Ссылка.ПоДнямНедели
		//|					И ТипыСкидокНаценок.ДеньНедели = &ДеньНедели
		//|					И &Время МЕЖДУ ТипыСкидокНаценок.ВремяНачала И ТипыСкидокНаценок.ВремяОкончания))
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Приоритет"
		//);
		
		//Костенюк Александр-Старт 12.06.2012
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |	ТипыСкидокНаценок.Ссылка КАК Ссылка,
					   |	ТипыСкидокНаценок.СуммоваяСкидкаНаценка КАК СуммоваяСкидка,
					   |	ТипыСкидокНаценок.Условие КАК Условие,
					   |	ТипыСкидокНаценок.ЗначениеУсловия,
					   |	ТипыСкидокНаценок.ЗначениеУсловияДополнительное,
					   |	ВЫБОР
					   |		КОГДА ТИПЗНАЧЕНИЯ(ТипыСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.Сертификаты)
					   |				ИЛИ ТИПЗНАЧЕНИЯ(ТипыСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.видыСертификатов)
					   |			ТОГДА ВЫБОР
					   |					КОГДА Элементы.ПроцентСкидкиНаценки = 0
					   |						ТОГДА 0
					   |					ИНАЧЕ ВЫБОР
					   |							КОГДА ТипыСкидокНаценок.Ссылка.Уточняемая
					   |								ТОГДА &ЗначениеСкидки
					   |							ИНАЧЕ Элементы.ПроцентСкидкиНаценки
					   |						КОНЕЦ
					   |				КОНЕЦ
					   |		КОГДА ТИПЗНАЧЕНИЯ(ТипыСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.ВидыДисконтныхКарт)
					   |			ТОГДА ВЫБОР
					   |					КОГДА Элементы.ПроцентСкидкиНаценки = 0
					   |						ТОГДА 0
					   |					ИНАЧЕ ВЫБОР
					   |							КОГДА &УсловиеСкидки <> НЕОПРЕДЕЛЕНО
					   |								ТОГДА &ПроцентПоУсловию
					   |							КОГДА ТипыСкидокНаценок.Ссылка.Уточняемая
					   |								ТОГДА &ПроцентУточняемый
					   |							ИНАЧЕ Элементы.ПроцентСкидкиНаценки
					   |						КОНЕЦ
					   |				КОНЕЦ
					   |		ИНАЧЕ Элементы.ПроцентСкидкиНаценки
					   |	КОНЕЦ КАК ПроцентСкидкиНаценки,
					   |	Элементы.ОграничениеСкидкиНаценки КАК ОграничениеСкидкиНаценки,
					   |	Элементы.Номенклатура КАК Номенклатура,
					   |	ВЫБОР
					   |		КОГДА Элементы.Приоритет = 0
					   |			ТОГДА ВЫБОР
					   |					КОГДА Элементы.Номенклатура ССЫЛКА Справочник.Номенклатура
					   |						ТОГДА 10
					   |					КОГДА Элементы.Номенклатура ССЫЛКА Справочник.НоменклатурныеГруппы
					   |						ТОГДА 11
					   |				КОНЕЦ
					   |		ИНАЧЕ Элементы.Приоритет
					   |	КОНЕЦ КАК Приоритет,
					   |	ТипыСкидокНаценок.ВытесняющаяСкидка,
					   |	ЕСТЬNULL(События.Документ, ЗНАЧЕНИЕ(Документ.Событие.ПустаяСсылка)) КАК ДокументСобытия
					   |ИЗ
					   |	Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
					   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					   |			События.ГруппаСобытия КАК ГруппаСобытия,
					   |			СостояниеСобытий.Документ КАК Документ
					   |		ИЗ
					   |			(ВЫБРАТЬ
					   |				События.ГруппаСобытия КАК ГруппаСобытия,
					   |				МИНИМУМ(События.Дата) КАК Дата
					   |			ИЗ
					   |				РегистрСведений.СостояниеСобытий КАК События
					   |			ГДЕ
					   |				События.Контрагент = &Контрагент
					   |				И События.Дата < &ДатаДокумента
					   |			
					   |			СГРУППИРОВАТЬ ПО
					   |				События.ГруппаСобытия) КАК События
					   |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСобытий КАК СостояниеСобытий
					   |				ПО События.ГруппаСобытия = СостояниеСобытий.ГруппаСобытия
					   |					И События.Дата = СостояниеСобытий.Дата
					   |		ГДЕ
					   |			СостояниеСобытий.Контрагент = &Контрагент
					   |			И События.Дата < &ДатаДокумента) КАК События
					   |		ПО (События.ГруппаСобытия = ТипыСкидокНаценок.ЗначениеУсловия)
					   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					   |			ЭлементыРегистр.Номенклатура КАК Номенклатура,
					   |			ЭлементыРегистр.ТипСкидкиНаценки КАК ТипСкидкиНаценки,
					   |			ЭлементыРегистр.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
					   |			0 КАК ОграничениеСкидкиНаценки,
					   |			0 КАК Приоритет
					   |		ИЗ
					   |			РегистрСведений.СкидкиНаценкиНоменклатуры КАК ЭлементыРегистр
					   |		ГДЕ
					   |			ЭлементыРегистр.Номенклатура В(&Номенклатура)
					   |		
					   |		ОБЪЕДИНИТЬ ВСЕ
					   |		
					   |		ВЫБРАТЬ
					   |			Товары.Ссылка,
					   |			ТипыСкидокНаценок.Ссылка,
					   |			0,
					   |			0,
					   |			1
					   |		ИЗ
					   |			(ВЫБРАТЬ
					   |				Номенклатура.Ссылка КАК Ссылка,
					   |				Номенклатура.Безнадбавочный КАК Безнадбавочный,
					   |				Номенклатура.Безскидочный КАК Безскидочный
					   |			ИЗ
					   |				Справочник.Номенклатура КАК Номенклатура
					   |			ГДЕ
					   |				(Номенклатура.Безнадбавочный
					   |						ИЛИ Номенклатура.Безскидочный)
					   |				И НЕ Номенклатура.ЭтоГруппа
					   |				И Номенклатура.Ссылка В(&Номенклатура)) КАК Товары
					   |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
					   |				ПО (ИСТИНА)
					   |		ГДЕ
					   |			ТипыСкидокНаценок.Актуальность
					   |			И НЕ ТипыСкидокНаценок.ЭтоГруппа
					   |			И ВЫБОР
					   |					КОГДА ТипыСкидокНаценок.ПроцентСкидкиНаценки > 0
					   |							И Товары.Безскидочный
					   |						ТОГДА ИСТИНА
					   |					КОГДА ТипыСкидокНаценок.ПроцентСкидкиНаценки < 0
					   |							И Товары.Безнадбавочный
					   |						ТОГДА ИСТИНА
					   |					ИНАЧЕ ЛОЖЬ
					   |				КОНЕЦ
					   |		
					   |		ОБЪЕДИНИТЬ ВСЕ
					   |		
					   |		ВЫБРАТЬ
					   |			ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
					   |			ТипыСкидокНаценок.Ссылка,
					   |			ТипыСкидокНаценок.ПроцентСкидкиНаценки,
					   |			ТипыСкидокНаценок.ОграничениеСкидкиНаценки,
					   |			100
					   |		ИЗ
					   |			Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок
					   |		ГДЕ
					   |			НЕ ТипыСкидокНаценок.ЭтоГруппа
					   |			И ТипыСкидокНаценок.Актуальность) КАК Элементы
					   |		ПО (Элементы.ТипСкидкиНаценки = ТипыСкидокНаценок.Ссылка)
					   |ГДЕ
					   |	ТипыСкидокНаценок.Актуальность
					   |	И НЕ ТипыСкидокНаценок.ПометкаУдаления
					   |	И НЕ ТипыСкидокНаценок.ЭтоГруппа
					   |	И ВЫБОР
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.РучнаяСкидка)
					   |					И ТипыСкидокНаценок.Ссылка В (&РучныеСкидки)
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.БезУсловий)
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)
					   |					И ТипыСкидокНаценок.ЗначениеУсловия = &ВидДисконтнойКарты
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
					   |					И ТипыСкидокНаценок.ЗначениеУсловия = &ДисконтнаяКарта
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСертификату)
					   |					И ТипыСкидокНаценок.ЗначениеУсловия = &Сертификат
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуСертификата)
					   |					И ТипыСкидокНаценок.ЗначениеУсловия = &ВидСертификата
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоКоличествуТовара)
					   |					И ТипыСкидокНаценок.ЗначениеУсловия В (&Номенклатура)
					   |					И &Количество >= ТипыСкидокНаценок.ЗначениеУсловияДополнительное
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
					   |					И &Сумма >= ТипыСкидокНаценок.ЗначениеУсловия
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоКатегорииКонтрагента)
					   |					И &КатегорияКонтрагента = ТипыСкидокНаценок.ЗначениеУсловия
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоГруппеСобытия)
					   |				ТОГДА НЕ События.Документ ЕСТЬ NULL 
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойПрограмме)
					   |					И ТипыСкидокНаценок.ЗначениеУсловия = &ВидДисконтнойКарты
					   |					И &ДисконтСумма >= ТипыСкидокНаценок.ПорогДисконтнойПрограммы
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоМаршрутуДоставки)
					   |					И ТипыСкидокНаценок.ЗначениеУсловия = &МаршрутДоставки
					   |				ТОГДА ИСТИНА
					   |			КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДнюРождения) ТОГДА ИСТИНА
					   |			ИНАЧЕ ЛОЖЬ
					   |		КОНЕЦ
					   |	И &ПериодыДействия
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	Приоритет";
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта.ДатаРождения) Тогда // 18.07.12 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОГДА ТипыСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДнюРождения) ТОГДА ИСТИНА", "");
		КонецЕсли; 
		РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействия", "ТипыСкидокНаценок", ДокументОбъект.ДатаНачалаПериода); // 12.07.12
		//Костенюк Александр-Финиш 12.06.2012
		
		СуммаБезСкидок	= 0;
		Количество		= 0;
		МассивТоваров	= Новый Массив;
		МассивРучныхСкидок = Новый Массив;
		
		Для каждого Строка Из ТаблицаТоваровУслуг Цикл
			
			Строка.СуммаБезСкидок = Строка.Количество*Строка.Цена;
			Строка.СуммаСкидки	= 0;
			Строка.СуммаНаценки	= 0;
			Строка.СуммаДепозита = 0; //Костенюк Александр 15.08.2012
			
			СуммаБезСкидок		= СуммаБезСкидок + Строка.СуммаБезСкидок;
			Количество			= Количество + Строка.Количество;
			
			Если МассивТоваров.Найти(Строка.Номенклатура)=Неопределено Тогда
				МассивТоваров.Добавить(Строка.Номенклатура);
			КонецЕсли;
			
			Если МассивТоваров.Найти(Строка.НоменклатурнаяГруппа)=Неопределено Тогда
				МассивТоваров.Добавить(Строка.НоменклатурнаяГруппа);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого Строка Из ТабличнаяЧастьСкидок Цикл
			Если НЕ (Строка.Ручная И Строка.Актуальность)  Тогда
				Продолжить;
			КонецЕсли;
			Строка.СуммаСкидки	= 0;
			Строка.СуммаНаценки	= 0;
			Строка.СуммаДепозита = 0; //Костенюк Александр 15.08.2012
			
			МассивРучныхСкидок.Добавить(Строка.СкидкаНаценка);
		КонецЦикла; 
		
		ДатаСкидокДокумента = ?(ЗначениеЗаполнено(ДокументОбъект.ДатаНачалаПериода),ДокументОбъект.ДатаНачалаПериода,ТекущаяДата());
		//Запрос.УстановитьПараметр("ДеньНедели",Перечисления.ДниНедели[ДеньНедели(ДатаСкидокДокумента)-1]);
		// Администратор 12.10.2011 11:30:23 В запрос надо передавать время, а не разность секунд 
		// Было: ДокументОбъект.ДатаНачалаПериода - НачалоДня(ДокументОбъект.ДатаНачалаПериода)
		//Запрос.УстановитьПараметр("Время",Дата(1,1,1,Час(ДатаСкидокДокумента),Минута(ДатаСкидокДокумента),0));
		Запрос.УстановитьПараметр("ДатаДокумента",ДатаСкидокДокумента);
		Запрос.УстановитьПараметр("Сумма",СуммаБезСкидок);
		Запрос.УстановитьПараметр("Количество",Количество);
		Запрос.УстановитьПараметр("КатегорияКонтрагента", ДокументОбъект.КатегорияКонтрагента);
		Запрос.УстановитьПараметр("КатегорияДокумента", ДокументОбъект.КатегорияДокумента);       	
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ДокументОбъект.ДисконтнаяКарта);
		Запрос.УстановитьПараметр("ВидДисконтнойКарты", ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты);
		
		// Игорь 13.09.2011 11:15:04                                                   
		Запрос.УстановитьПараметр("Сертификат", ДокументОбъект.Сертификат);
		Запрос.УстановитьПараметр("ВидСертификата", ?(ЗначениеЗаполнено(ДокументОбъект.Сертификат),ДокументОбъект.Сертификат.ВидСертификата , Справочники.ВидыСертификатов.ПустаяСсылка()));
		Запрос.УстановитьПараметр("ЗначениеСкидки", ?(ЗначениеЗаполнено(ДокументОбъект.Сертификат), ДокументОбъект.Сертификат.Сумма , 0));
		Запрос.УстановитьПараметр("УсловиеСкидки", ?(ЗначениеЗаполнено(ДокументОбъект.УсловияСкидок), ДокументОбъект.УсловияСкидок, Неопределено ));
		Запрос.УстановитьПараметр("ПроцентПоУсловию", ?(ЗначениеЗаполнено(ДокументОбъект.УсловияСкидок), ДокументОбъект.УсловияСкидок.ТипыСкидокНаценок.ПроцентСкидкиНаценки, 0));
		Запрос.УстановитьПараметр("ПроцентУточняемый", ?(ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта.ПроцентУточняемый), ДокументОбъект.ДисконтнаяКарта.ПроцентУточняемый, 0));
		
		Запрос.УстановитьПараметр("ТипыСкидокНаценокСсылка", ?(ЗначениеЗаполнено(ДокументОбъект.УсловияСкидок),ДокументОбъект.УсловияСкидок.ТипыСкидокНаценок, Неопределено ));                                                                                                                  			
		Запрос.УстановитьПараметр("Номенклатура",МассивТоваров);
		Запрос.УстановитьПараметр("Контрагент",ДокументОбъект.Контрагент);                
		Запрос.УстановитьПараметр("РучныеСкидки",МассивРучныхСкидок);
		
		//Костенюк Александр-Старт 14.05.2012
		Запрос.УстановитьПараметр("МаршрутДоставки", ?(ЗначениеЗаполнено(ДокументОбъект.МаршрутДоставки), ДокументОбъект.МаршрутДоставки, Справочники.МаршрутыДоставки.ПустаяСсылка()));
		//Костенюк Александр-Финиш 14.05.2012
		
		// Чистяков Павел 25.11.2011 12:17:19
		СуммаНакопления = 0;
		Если ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта) Тогда
			ЗапросСкидки = Новый Запрос(
			"ВЫБРАТЬ
			|	СУММА(Продажи.СуммаОборот) КАК СуммаОборот
			|ИЗ
			|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(, &ДатаДок, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК Продажи"
			);
			ЗапросСкидки.УстановитьПараметр("ДисконтнаяКарта",ДокументОбъект.ДисконтнаяКарта);
			ЗапросСкидки.УстановитьПараметр("ДатаДок",ДатаСкидокДокумента-1); // Чтобы не включать текущий документ
			Выборка = ЗапросСкидки.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СуммаНакопления = Выборка.СуммаОборот;
			КонецЕсли; 
		КонецЕсли;
		Запрос.УстановитьПараметр("ДисконтСумма",СуммаНакопления);
		
		Скидки = Запрос.Выполнить().Выгрузить();
		
		// Александр Переверзев 21.07.2012 20:55:22 
		//
		//	Данный алгоритм совершенно неправильный, так не учитывает возможность переназначения номинала у скидки!
		//	Нужно переделать на правильный.
		//
		//Если ЗначениеЗаполнено(ДокументОбъект.УсловияСкидок) Тогда	
		//	Для каждого Стр Из Скидки Цикл
		//		Если Стр.Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт Тогда
		//			Стр.Ссылка  = ДокументОбъект.УсловияСкидок.ТипыСкидокНаценок;
		//		КонецЕсли;		
		//	КонецЦикла;	
		//КонецЕсли;
		
		Скидки.Колонки.Добавить("МассивСтрок");
		
		// Добавим автоматические и ручные скидки,
		// полученные из запроса без дублей
		// в массив для последующей обработки.
		// Отсеем не актуальные скидки сразу.
		ТаблицаСкидок = Новый Массив;
		Для каждого Строка Из Скидки Цикл
			Если not Строка.Номенклатура.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			НайденнаяСкидка = ТабличнаяЧастьСкидок.Найти(Строка.Ссылка,"СкидкаНаценка");
			Если НайденнаяСкидка<>Неопределено
				И НЕ НайденнаяСкидка.Актуальность Тогда
				Продолжить;
			КонецЕсли;
			
			//Костенюк Александр-Старт 10.05.2012
			// Если день рождения клиента, указанный в его информационной карте
			// попадает в интервал скидки по случаю дня рождения, то добавим ему эту скидку
			Если ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта) Тогда
				ДлинаСуток = 24*60*60;
				Если Строка.Ссылка.Условие = Перечисления.УсловияСкидкиНаценки.ПоДнюРождения Тогда
					ДатаРождения = ДокументОбъект.ДисконтнаяКарта.ДатаРождения;
					Если НЕ ЗначениеЗаполнено(ДатаРождения) Тогда
						Продолжить;
					КонецЕсли;
					ДеньРожденияТекущегоГода  	= ДобавитьМесяц((ДобавитьМесяц(НачалоДня(ДатаРождения), -(Год(ДатаРождения) - 1) * 12)) , ((Год(ТекущаяДата()) - 1) * 12));
					НачалоДиапазонаВхождения 	= НачалоДня(ДеньРожденияТекущегоГода - (Строка.Ссылка.ЗначениеУсловия*ДлинаСуток));
					КонецДиапазонаВхождения 	= КонецДня(ДеньРожденияТекущегоГода + (Строка.Ссылка.ЗначениеУсловияДополнительное*ДлинаСуток));
					// Должно быть так
					// НачалоДиапазонаВхождения <= ТекущаяДата() <= КонецДиапазонаВхождения
					Если (НачалоДня(ТекущаяДата()) < НачалоДиапазонаВхождения) ИЛИ (ТекущаяДата() > КонецДиапазонаВхождения) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//Костенюк Александр-Финиш 10.05.2012
			
			//Костенюк Александр-Старт 12.07.2012
			// Если количество определенного товара превышает количество по условию скидки, то добавим такую скидку
			Если Строка.Ссылка.Условие = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
				Если ЗначениеЗаполнено(Строка.Ссылка.ЗначениеУсловия) Тогда
					Если ТипЗнч(ТаблицаТоваровУслуг) = Тип("ТаблицаЗначений") Тогда
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура", Строка.Ссылка.ЗначениеУсловия);
						МассивСтрок = ТаблицаТоваровУслуг.НайтиСтроки(ПараметрыОтбора);
						// Подсчитаем количество товара в документе
						Если МассивСтрок.Количество() Тогда
							Кол = 0;
							Для Каждого СтрокаМассива Из МассивСтрок Цикл
								Кол = Кол + СтрокаМассива.Количество;
							КонецЦикла;
						КонецЕсли;
					ИначеЕсли ТипЗнч(ТаблицаТоваровУслуг) = Тип("Массив") Тогда
						// Подсчитаем количество товара в документе
						Кол = 0;
						Для Каждого СтрокаМассива Из ТаблицаТоваровУслуг Цикл
							Если СтрокаМассива.Номенклатура <> Строка.Ссылка.ЗначениеУсловия Тогда
								Продолжить;
							КонецЕсли;
							Кол = Кол + СтрокаМассива.Количество;
						КонецЦикла;
					КонецЕсли;
					Если Кол <= Строка.Ссылка.ЗначениеУсловияДополнительное Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//Костенюк Александр-Финиш 12.07.2012
						
			ТаблицаСкидок.Добавить(Строка);
		КонецЦикла;
		
		// Пройдемся по ручным и не вытесняемым скидкам
		// и обработаем их "на месте" сразу записывая результат в таблицу
		// товаров добавляя к предыдущей сумме скидке/наценке
		Для каждого Строка Из ТаблицаСкидок Цикл
			
			Если Строка.ВытесняющаяСкидка Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСкидки		= 0;
			СуммаНаценки	= 0;
			
			//РасчитатьСкидкуПоСтроке(Строка,Скидки,ТаблицаТоваровУслуг,СуммаСкидки,СуммаНаценки);
			
			//Костенюк Александр-Старт 19.07.2012
			// Депозиты
			СуммаДепозита 	= 0;
			РасчитатьСкидкуПоСтроке(Строка,Скидки,ТаблицаТоваровУслуг,СуммаСкидки,СуммаНаценки,СуммаДепозита,ДокументОбъект.ДисконтнаяКарта);
			//Костенюк Александр-Финиш 19.07.2012
			
			НоваяСтрока = ТабличнаяЧастьСкидок.Найти(Строка.Ссылка,"СкидкаНаценка");
			Если НоваяСтрока=Неопределено Тогда
				НоваяСтрока = ТабличнаяЧастьСкидок.Добавить();
				НоваяСтрока.Автоматическая	= Истина;
				НоваяСтрока.Актуальность	= Истина;
				Если Строка.Условие=Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт
					ИЛИ Строка.Условие=Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
					ИЛИ Строка.Условие=Перечисления.УсловияСкидкиНаценки.ПоДисконтнойПрограмме Тогда
					НоваяСтрока.ДисконтнаяКарта	= Истина;
				ИначеЕсли Строка.Условие=Перечисления.УсловияСкидкиНаценки.ПоГруппеСобытия Тогда
					НоваяСтрока.Событие	= Строка.ДокументСобытия;
					НоваяСтрока.ГруппаСобытия = Строка.ЗначениеУсловия;
				КонецЕсли;
				НоваяСтрока.СкидкаНаценка	= Строка.Ссылка;
			КонецЕсли; 
			НоваяСтрока.СуммаСкидки		= НоваяСтрока.СуммаСкидки + СуммаСкидки;
			НоваяСтрока.СуммаНаценки	= НоваяСтрока.СуммаНаценки + СуммаНаценки;
			НоваяСтрока.СуммаДепозита	= НоваяСтрока.СуммаДепозита + СуммаДепозита; //Костенюк Александр 19.07.2012
		КонецЦикла;
		
		
		// Обработаем вытесняемые скидки
		// Они должны добавить результат своего вытеснения к результату строки
		Для каждого СтрокаТоваров Из ТаблицаТоваровУслуг Цикл
			
			СтруктураПоиска	= Новый Структура("Номенклатура",СтрокаТоваров.Номенклатура);
			МассивСкидок	= Скидки.НайтиСтроки(СтруктураПоиска);
			СтруктураПоиска.Номенклатура = СтрокаТоваров.НоменклатурнаяГруппа;
			МассивНайденных	= Скидки.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаМассива Из МассивНайденных Цикл
				МассивСкидок.Добавить(СтрокаМассива);
			КонецЦикла; 
			СтруктураПоиска.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			МассивНайденных	= Скидки.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаМассива Из МассивНайденных Цикл
				МассивСкидок.Добавить(СтрокаМассива);
			КонецЦикла;
			ЛучшаяСкидка	= Неопределено;
			ЛучшаяНаценка	= Неопределено;
			МаксимумСкидки	= 0;
			МаксимумНаценки	= 0;
			
			//Костенюк Александр-Старт 15.08.2012
			// Депозиты
			ЛучшийДепозит 		= Неопределено;
			МаксимумДепозита 	= 0;
			//Костенюк Александр-Финиш 15.08.2012
			
			Для каждого Строка Из МассивСкидок Цикл
				
				Если НЕ Строка.ВытесняющаяСкидка Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаСкидки		= 0;
				СуммаНаценки	= 0;
				СуммаДепозита 	= 0; //Костенюк Александр 15.08.2012
				
				Если Строка.СуммоваяСкидка Тогда
					
					НайденныеСтроки		= Скидки.НайтиСтроки(Новый Структура("Ссылка",Строка.Ссылка));
					МассивСтрок			= Новый Массив;
					//Для каждого СтрокаТоваров Из ТаблицаТоваровУслуг Цикл
					//	ДобавлятьСтроку = Истина;
					//	Для каждого СтрокаМассив Из НайденныеСтроки Цикл
					//		Если (СтрокаМассив.Номенклатура=СтрокаТоваров.Номенклатура
					//			ИЛИ СтрокаМассив.Номенклатура=СтрокаТоваров.НоменклатурнаяГруппа)
					//			И СтрокаМассив.ПроцентСкидкиНаценки=0 Тогда
					//			ДобавлятьСтроку = Ложь;
					//			Прервать;
					//		КонецЕсли;
					//	КонецЦикла;
					//	Если ДобавлятьСтроку Тогда
					//		МассивСтрок.Добавить(СтрокаТоваров);
					//	КонецЕсли; 
					//КонецЦикла;
					
					//Костенюк Александр-Старт 16.08.2012
					Для каждого СтрокаТоваров Из ТаблицаТоваровУслуг Цикл
						Для каждого СтрокаМассив Из НайденныеСтроки Цикл
							Если (СтрокаМассив.Номенклатура = СтрокаТоваров.Номенклатура)
								ИЛИ (СтрокаМассив.Номенклатура = СтрокаТоваров.НоменклатурнаяГруппа)
								ИЛИ (СтрокаМассив.Номенклатура = Справочники.Номенклатура.ПустаяСсылка()) Тогда
								Если СтрокаМассив.ПроцентСкидкиНаценки > 0 Тогда
									МассивСтрок.Добавить(СтрокаТоваров);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла; 
					//Костенюк Александр-Финиш 16.08.2012
					
					СуммаРаспределения = Строка.ПроцентСкидкиНаценки;
					МаксимумСкидки	   = 0;
					
					Для каждого СтрокаМассива Из МассивСтрок Цикл
						Если СуммаРаспределения>0 Тогда
							Сумма		= СтрокаМассива.СуммаБезСкидок - 0.01 - СтрокаМассива.СуммаСкидки;
						Иначе
							Сумма		= СтрокаМассива.СуммаБезСкидок;
						КонецЕсли;
						МаксимумСкидки	= МаксимумСкидки + Сумма;
					КонецЦикла;
					
					Если СуммаРаспределения>0
						И СуммаРаспределения>МаксимумСкидки Тогда
						СуммаРаспределения = МаксимумСкидки;
					КонецЕсли; 
					
					Если СуммаРаспределения>0 Тогда
						СуммаСкидки			= СуммаРаспределения*((СтрокаТоваров.СуммаБезСкидок-0.01-СтрокаТоваров.СуммаСкидки)/МаксимумСкидки);
					Иначе
						СуммаНаценки		= -СуммаРаспределения*СтрокаТоваров.СуммаБезСкидок/МаксимумСкидки;
					КонецЕсли;
					
					//Костенюк Александр-Старт 15.08.2012
					// Депозиты
					Если ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты.Накопительная Тогда
						МаксимумДепозита = 0;
						Для каждого СтрокаМассива Из МассивСтрок Цикл
							Если СуммаРаспределения > 0 Тогда
								Сумма = СтрокаМассива.СуммаБезСкидок - 0.01 - СтрокаМассива.СуммаДепозита;
							КонецЕсли; 
							МаксимумДепозита = МаксимумДепозита + Сумма;
						КонецЦикла;
						Если СуммаРаспределения > 0	И СуммаРаспределения > МаксимумДепозита Тогда
							СуммаРаспределения = МаксимумДепозита;
						КонецЕсли; 
						Если СуммаРаспределения > 0 Тогда
							СуммаСкидки = СуммаРаспределения*((СтрокаТоваров.СуммаБезСкидок - 0.01 - СтрокаТоваров.СуммаДепозита)/МаксимумДепозита);
						КонецЕсли;
					КонецЕсли;
					//Костенюк Александр-Финиш 15.08.2012
					
				Иначе
					
					УточняющиеУсловия	= Скидки.НайтиСтроки(Новый Структура("Ссылка",Строка.Ссылка));
					
					//Костенюк Александр-Старт 15.08.2012
					// Депозиты
					СуммаДепозитаТекущая = 0;
					Если ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты.Накопительная Тогда
						
						Для каждого СтрокаУсловия Из УточняющиеУсловия Цикл
							Сумма = СтрокаТоваров.СуммаБезСкидок;
							Если СтрокаУсловия.Номенклатура = СтрокаТоваров.Номенклатура
								ИЛИ СтрокаУсловия.Номенклатура = СтрокаТоваров.НоменклатурнаяГруппа
								ИЛИ СтрокаУсловия.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
								Если СтрокаУсловия.ПроцентСкидкиНаценки > 0 Тогда
									// Внесение денег на депозит
									Если СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Депозит Тогда
										СуммаДепозита = СтрокаТоваров.СуммаБезСкидок;
									// Сумма скидки на депозит
									Иначе
										СуммаДепозита = (СтрокаТоваров.СуммаБезСкидок*СтрокаУсловия.ПроцентСкидкиНаценки)/100;
									КонецЕсли;
									Если СуммаДепозита > Сумма Тогда
										СуммаДепозита = Сумма;
									КонецЕсли; 
								КонецЕсли;
								Если СтрокаУсловия.ОграничениеСкидкиНаценки <> 0 Тогда
									Если СтрокаУсловия.ОграничениеСкидкиНаценки < СуммаДепозита Тогда
										СуммаДепозита = СтрокаУсловия.ОграничениеСкидкиНаценки;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
					//Костенюк Александр-Финиш 15.08.2012
						
						Для каждого СтрокаУсловия Из УточняющиеУсловия Цикл
							Сумма = СтрокаТоваров.СуммаБезСкидок - 0.01 - СтрокаТоваров.СуммаСкидки;
							Если СтрокаУсловия.Номенклатура=СтрокаТоваров.Номенклатура
								ИЛИ СтрокаУсловия.Номенклатура=СтрокаТоваров.НоменклатурнаяГруппа
								ИЛИ СтрокаУсловия.Номенклатура=Справочники.Номенклатура.ПустаяСсылка() Тогда
								Если СтрокаУсловия.ПроцентСкидкиНаценки>=0 Тогда
									СуммаСкидки = (СтрокаТоваров.СуммаБезСкидок*СтрокаУсловия.ПроцентСкидкиНаценки)/100;
									Если СуммаСкидки>Сумма Тогда
										СуммаСкидки = Сумма;
									КонецЕсли; 
								Иначе
									СуммаНаценки = (СтрокаТоваров.СуммаБезСкидок*(-СтрокаУсловия.ПроцентСкидкиНаценки))/100;
								КонецЕсли;
								Если СтрокаУсловия.ОграничениеСкидкиНаценки<>0 Тогда
									Если СтрокаУсловия.ОграничениеСкидкиНаценки<СуммаСкидки Тогда
										СуммаСкидки = СтрокаУсловия.ОграничениеСкидкиНаценки;
									КонецЕсли;
									Если СтрокаУсловия.ОграничениеСкидкиНаценки<СуммаНаценки Тогда
										СуммаНаценки = СтрокаУсловия.ОграничениеСкидкиНаценки;
									КонецЕсли;
								КонецЕсли;
								// Скидка по номенклатуре имеет приоритет перед скидкой по номенклатурной группе
								// в то же время скидка по номенклатурной группе имеет
								// приоретет перед остальными скидками
								// Приоритет устанавливается в запросе и по нему идет сортировка
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если Строка.ПроцентСкидкиНаценки>0 Тогда
					Если МаксимумСкидки<СуммаСкидки Тогда
						ЛучшаяСкидка	= Строка;
						МаксимумСкидки	= СуммаСкидки;
					КонецЕсли;
				Иначе
					Если СуммаНаценки>0
						И (МаксимумНаценки=0 ИЛИ МаксимумНаценки>СуммаНаценки) Тогда
						ЛучшаяНаценка	= Строка;
						МаксимумНаценки	= СуммаНаценки;
					КонецЕсли; 
				КонецЕсли;
				
				//Костенюк Александр-Старт 15.08.2012
				// Депозиты
				Если ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты.Накопительная Тогда
					Если Строка.ПроцентСкидкиНаценки > 0 Тогда
						Если МаксимумДепозита < СуммаДепозита Тогда
							ЛучшийДепозит		= Строка;
							МаксимумДепозита 	= СуммаДепозита;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				//Костенюк Александр-Финиш 15.08.2012
				
			КонецЦикла;
			
			// Администратор 12.10.2011 11:32:36 
			// Вытесняемая скидка - ее суть следующая она берется одна на строку и вытесняет себе(!!!) подобных.
			// То есть сейчас она вытесняет только "Вытесняемые" скидки.
			Если ЛучшаяСкидка<>Неопределено Тогда
				НоваяСтрока = ТабличнаяЧастьСкидок.Найти(ЛучшаяСкидка.Ссылка,"СкидкаНаценка");
				Если НоваяСтрока=Неопределено Тогда
					НоваяСтрока = ТабличнаяЧастьСкидок.Добавить();
					НоваяСтрока.Автоматическая	= Истина;
					НоваяСтрока.Актуальность	= Истина;
					Если ЛучшаяСкидка.Условие=Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт
						ИЛИ ЛучшаяСкидка.Условие=Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
						НоваяСтрока.ДисконтнаяКарта	= Истина;
					ИначеЕсли ЛучшаяСкидка.Условие=Перечисления.УсловияСкидкиНаценки.ПоГруппеСобытия Тогда
						НоваяСтрока.Событие	= ЛучшаяСкидка.ДокументСобытия;
						НоваяСтрока.ГруппаСобытия = ЛучшаяСкидка.ЗначениеУсловия;
					КонецЕсли;
					НоваяСтрока.СкидкаНаценка	= ЛучшаяСкидка.Ссылка;
				КонецЕсли; 
				НоваяСтрока.СуммаСкидки		= НоваяСтрока.СуммаСкидки + МаксимумСкидки;
				СтрокаТоваров.СуммаСкидки	= СтрокаТоваров.СуммаСкидки + МаксимумСкидки;
			КонецЕсли; 
			
			Если ЛучшаяНаценка<>Неопределено Тогда
				НоваяСтрока = ТабличнаяЧастьСкидок.Найти(ЛучшаяНаценка.Ссылка,"СкидкаНаценка");
				Если НоваяСтрока=Неопределено Тогда
					НоваяСтрока = ТабличнаяЧастьСкидок.Добавить();
					НоваяСтрока.Автоматическая	= Истина;
					НоваяСтрока.Актуальность	= Истина;
					Если ЛучшаяНаценка.Условие=Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт
						ИЛИ ЛучшаяНаценка.Условие=Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
						НоваяСтрока.ДисконтнаяКарта	= Истина;
					ИначеЕсли ЛучшаяНаценка.Условие=Перечисления.УсловияСкидкиНаценки.ПоГруппеСобытия Тогда
						НоваяСтрока.Событие	= ЛучшаяНаценка.ДокументСобытия;
						НоваяСтрока.ГруппаСобытия = ЛучшаяНаценка.ЗначениеУсловия;
					КонецЕсли;
					НоваяСтрока.СкидкаНаценка	= ЛучшаяНаценка.Ссылка;
				КонецЕсли; 
				НоваяСтрока.СуммаНаценки	= НоваяСтрока.СуммаСкидки + МаксимумНаценки;
				СтрокаТоваров.СуммаНаценки	= СтрокаТоваров.СуммаНаценки + МаксимумНаценки;
			КонецЕсли; 
			
			//Костенюк Александр-Старт 15.08.2012
			// Депозиты
			Если ЛучшийДепозит <> Неопределено Тогда
				НоваяСтрока = ТабличнаяЧастьСкидок.Найти(ЛучшийДепозит.Ссылка,"СкидкаНаценка");
				Если НоваяСтрока = Неопределено Тогда
					НоваяСтрока = ТабличнаяЧастьСкидок.Добавить();
					НоваяСтрока.Автоматическая	= Истина;
					НоваяСтрока.Актуальность	= Истина;
					Если ЛучшийДепозит.Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт
						ИЛИ ЛучшийДепозит.Условие = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
						НоваяСтрока.ДисконтнаяКарта	= Истина;
					ИначеЕсли ЛучшийДепозит.Условие = Перечисления.УсловияСкидкиНаценки.ПоГруппеСобытия Тогда
						НоваяСтрока.Событие			= ЛучшийДепозит.ДокументСобытия;
						НоваяСтрока.ГруппаСобытия 	= ЛучшийДепозит.ЗначениеУсловия;
					КонецЕсли;
					НоваяСтрока.СкидкаНаценка 		= ЛучшийДепозит.Ссылка;
				КонецЕсли; 
				НоваяСтрока.СуммаДепозита			= НоваяСтрока.СуммаДепозита + МаксимумДепозита;
				СтрокаТоваров.СуммаДепозита			= СтрокаТоваров.СуммаДепозита + МаксимумДепозита;
			КонецЕсли; 
			//Костенюк Александр-Финиш 15.08.2012
			
		КонецЦикла;
		
		Для каждого Строка Из ТабличнаяЧастьСкидок Цикл
			Если НЕ Строка.Актуальность Тогда
				Строка.СуммаСкидки	= 0;
				Строка.СуммаНаценки	= 0;
				Строка.СуммаДепозита = 0; //Костенюк Александр 15.08.2012
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	Для каждого Строка Из ТаблицаТоваровУслуг Цикл
		Если ЕстьТаблицаСкидок Тогда
			Строка.Сумма	= Строка.СуммаБезСкидок - Строка.СуммаСкидки + Строка.СуммаНаценки;
		Иначе
			Строка.Сумма	= Строка.Цена*Строка.Количество;
		КонецЕсли;
		Строка.СуммаНДС	= Ценообразование.РассчитатьСуммуНДС(Строка.Сумма,Истина,Истина,Ценообразование.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	КонецЦикла;
	
КонецПроцедуры

// Проверяет дублирование скидок табличной части документа
//
// Параметры
//  ТабличнаяЧасть       – Тип: ТаблицаЗначений, ТабличнаяЧасть – Табличная часть документа. 
//                                             
//  ИмяКолонки           – Тип: Строка – Имя колонки
//                 
//  ПредставлениеКолонки – Тип: Строка – Представление колонки, в которой содержится скидка
//                                       Для сообщений об ошибках
//                 
//  Отказ                – Тип: Булево – признак отказа
//                 
//  Заголовок            – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//                 
Функция ПроверитьДублированиеСкидкиТабличнойЧасти(ТабличнаяЧасть, ИмяКолонки, ПредставлениеКолонки, Отказ, Заголовок) Экспорт
	
	Если ТабличнаяЧасть.Количество() <= 1 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Сообщение = "Дублируется " + ПредставлениеКолонки + """";
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		
		ТЗ = ТабличнаяЧасть.Скопировать();
		
	Иначе
		
		ТЗ = ТабличнаяЧасть.Выгрузить();
		
	КонецЕсли;
	
	Пока ТЗ.Количество() > 0 Цикл
		
		Элемент         = ТЗ[0][ИмяКолонки];
		СтруктураОтбора = Новый Структура(ИмяКолонки, Элемент);
		МассивСтрок     = ТЗ.НайтиСтроки(СтруктураОтбора);
		ЕстьДубли       = (МассивСтрок.Количество() > 1);
		НомераСтрок     = "";
		Разделитель     = "";
		
		Для каждого СтрокаТЧ Из МассивСтрок Цикл
			
			НомераСтрок = НомераСтрок + Разделитель + СтрокаТЧ.НомерСтроки;
			Разделитель = ", ";
			ТЗ.Удалить(СтрокаТЧ);
			
		КонецЦикла;
		
		Если ЕстьДубли Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(Сообщение);
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции // ПроверитьДублированиеСкидкиТабличнойЧасти()

Функция ПолучитьИмяТабличнойЧастиРеализацииПоСсылкеНаСтроку(СтрокаТабличнойЧасти) Экспорт
	
	Если СтрокаТабличнойЧасти.Услуга Тогда
		Возврат "Услуги";
	Иначе
		Возврат "Товары";
	КонецЕсли;
	
КонецФункции

//Процедура ПеренестиСодержимоеТабЧасти(ИсточникОбъект, ПолучательОбъект, НоменклатураПереноса, НоменклатураУдаления, ДополнительныеРеквизиты = Неопределено) Экспорт
Процедура ПеренестиСодержимоеТабЧасти(ИсточникОбъект, ПолучательОбъект, НоменклатураПереноса, НоменклатураУдаления, ДополнительныеРеквизиты = Неопределено, НоменклатураПереносаУточненная = Неопределено, НоменклатураУдаленияУточненная = Неопределено) Экспорт //Костенюк Александр 01.02.2017
	
	// -- Табличные части.
	ТабличныеЧасти = Новый Соответствие; ТабличныеЧасти.Вставить(ИсточникОбъект.Товары, Неопределено); //Костенюк Александр-Закомментировано 07.05.2013 ТабличныеЧасти.Вставить(ИсточникОбъект.Услуги, Неопределено);
	
	// -- Перенос номенклатуры.
	Если (Не ПолучательОбъект = Неопределено) И (Не НоменклатураПереноса = Неопределено) И Булево(НоменклатураПереноса.Количество()) Тогда
		
		ТабличныеЧасти.Вставить(ИсточникОбъект.Товары, ПолучательОбъект.Товары); //Костенюк Александр-Закомментировано 07.05.2013 ТабличныеЧасти.Вставить(ИсточникОбъект.Услуги,ПолучательОбъект.Услуги);
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			ТабличнаяЧастьОснования = ТабличнаяЧасть.Значение; ТабличнаяЧасть = ТабличнаяЧасть.Ключ; // Наепка - друг Чекиста ;)
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				
				ПереносимоеКоличество = НоменклатураПереноса[СтрокаТабличнойЧасти.Идентификатор];
				//Костенюк Александр-Старт 01.02.2017
				Если НЕ НоменклатураПереносаУточненная = Неопределено Тогда
					ПереносимоеКоличествоУточненное = НоменклатураПереносаУточненная[СтрокаТабличнойЧасти.Идентификатор];
				КонецЕсли;
				//Костенюк Александр-Финиш 01.02.2017
				Если (Не ПереносимоеКоличество = Неопределено) Тогда
					
					СтрокаТабличнойЧастиОснования = ТабличнаяЧастьОснования.Найти(СтрокаТабличнойЧасти.Идентификатор, "Идентификатор"); 
					Если (СтрокаТабличнойЧастиОснования = Неопределено) Тогда
						СтрокаТабличнойЧастиОснования = ТабличнаяЧастьОснования.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиОснования, СтрокаТабличнойЧасти);
						Если (Не ДополнительныеРеквизиты = Неопределено) Тогда
							ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиОснования, ДополнительныеРеквизиты);
						КонецЕсли;
						СтрокаТабличнойЧастиОснования.Количество = ПереносимоеКоличество;
						//Костенюк Александр-Старт 01.02.2017
						Если НЕ ПереносимоеКоличествоУточненное = Неопределено Тогда
							СтрокаТабличнойЧастиОснования.КоличествоУточненное = ПереносимоеКоличествоУточненное;
						КонецЕсли;
						//Костенюк Александр-Финиш 01.02.2017
					Иначе
						СтрокаТабличнойЧастиОснования.Количество = СтрокаТабличнойЧастиОснования.Количество + ПереносимоеКоличество;
						//Костенюк Александр-Старт 01.02.2017
						Если НЕ ПереносимоеКоличествоУточненное = Неопределено Тогда
							СтрокаТабличнойЧастиОснования.КоличествоУточненное = СтрокаТабличнойЧастиОснования.КоличествоУточненное + ПереносимоеКоличествоУточненное;
						КонецЕсли;
						//Костенюк Александр-Финиш 01.02.2017
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		РассчитатьСуммыПриПродаже(ПолучательОбъект);
		
	КонецЕсли;
	
	// -- Удаление номенклатуры.
	Если (Не НоменклатураУдаления = Неопределено) И Булево(НоменклатураУдаления.Количество()) Тогда
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			ТабличнаяЧасть = ТабличнаяЧасть.Ключ; // Наепка - друг Чекиста ;)
			Индекс = 0; Пока (Индекс <= ТабличнаяЧасть.Количество() - 1) Цикл
				
				СтрокаТабличнойЧасти = ТабличнаяЧасть[Индекс]; ПереносимоеКоличество = НоменклатураУдаления[СтрокаТабличнойЧасти.Идентификатор];
				//Костенюк Александр-Старт 01.02.2017
				Если НЕ НоменклатураУдаленияУточненная = Неопределено Тогда
					ПереносимоеКоличествоУточненное = НоменклатураУдаленияУточненная[СтрокаТабличнойЧасти.Идентификатор];
				КонецЕсли;
				//Костенюк Александр-Финиш 01.02.2017
				Если (Не ПереносимоеКоличество = Неопределено) Тогда
					
					Если (СтрокаТабличнойЧасти.Количество <= ПереносимоеКоличество) Тогда
						ТабличнаяЧасть.Удалить(СтрокаТабличнойЧасти);
						Продолжить;
					КонецЕсли;
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - ПереносимоеКоличество;
					//Костенюк Александр-Старт 01.02.2017
					Если НЕ ПереносимоеКоличествоУточненное = Неопределено Тогда
						СтрокаТабличнойЧасти.КоличествоУточненное = СтрокаТабличнойЧасти.КоличествоУточненное - ПереносимоеКоличествоУточненное;
					КонецЕсли;
					//Костенюк Александр-Финиш 01.02.2017
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		
		РассчитатьСуммыПриПродаже(ИсточникОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ПеренестиСодержимоеТабЧасти()

#Если Клиент Тогда
	
	// Процедура формирует дерево позиций по данным табличных частей документа.
	//
	Процедура ПозицииПрочитать(ЭтотОбъект, ЭлементПозиций, СтруктураСтрокДерева = Неопределено ) Экспорт
		
		СтруктураСтрокДерева = Новый Структура; 
		СтруктураСтрокДерева.Очистить();
		
		////Костенюк Александр-Закомментировано 18.05.2013
		//ПредварительнаяТаблица = ЭтотОбъект.Услуги.Выгрузить();
		//ПредварительнаяТаблица.Колонки.Добавить("ЕдиницаИзмерения", Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.ЕдиницаИзмерения.Тип);
		//ПредварительнаяТаблица.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
		////ПредварительнаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.МестаХранения"));
		//ПредварительнаяТаблица.Колонки.Добавить("Родитель", Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.Номенклатура.Тип);	
		//ПредварительнаяТаблица.ЗаполнитьЗначения(Истина, "Услуга");
		////Костенюк Александр-Закомментировано 18.05.2013
		
		//Костенюк Александр-Старт 18.05.2013
		Товары = ЭтотОбъект.Товары.Выгрузить();
		ПредварительнаяТаблица = Новый ТаблицаЗначений;
		ПредварительнаяТаблица = Товары.СкопироватьКолонки();
		//Костенюк Александр-Финиш 18.05.2013
		
		//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЭтотОбъект.Товары.Выгрузить(), ПредварительнаяТаблица);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Товары, ПредварительнаяТаблица);
		Если (Не ПредварительнаяТаблица.Колонки.Найти("Распечатан") = Неопределено) Тогда
			ПредварительнаяТаблица.Колонки.Добавить("ОригиналРаспечатан", Новый ОписаниеТипов("Булево"));
			ПредварительнаяТаблица.ЗагрузитьКолонку(ПредварительнаяТаблица.ВыгрузитьКолонку("Распечатан"), "ОригиналРаспечатан");
		КонецЕсли;
		
		Если (Не ПредварительнаяТаблица.Колонки.Найти("Выполненн") = Неопределено) Тогда
			ПредварительнаяТаблица.Колонки.Добавить("ОригиналВыполненн", Новый ОписаниеТипов("Булево"));
			ПредварительнаяТаблица.ЗагрузитьКолонку(ПредварительнаяТаблица.ВыгрузитьКолонку("Выполненн"), "ОригиналВыполненн");
		КонецЕсли;
		
		ПредварительнаяТаблица.Сортировать("ДатаНачалаПериода,НомерСтроки");
		
		ОбщегоНазначения.ТаблицуЗначенийВДеревоЗначений(ПредварительнаяТаблица, "Идентификатор", "Владелец", ЭлементПозиций.Значение);
		
	КонецПроцедуры
	
	// Процедура актуализирует данные табличных частей документа по данным дерева позиций.
	//
	Процедура ПозицииЗаписать(ЭтотОбъект, ЭлементПозиций) Экспорт
		
		//СтруктураРезультата = ОбщегоНазначения.ТаблицуЗначенийРазделитьПоОтбору(ОбщегоНазначения.ДеревоЗначенийВТаблицуЗначений(ЭлементПозиций.Значение), Новый Структура("Услуга", Истина));
		//
		//ЭтотОбъект.Товары.Загрузить(СтруктураРезультата.ТаблицаНеУдовлетворяетОтбору);
		//ЭтотОбъект.Услуги.Загрузить(СтруктураРезультата.ТаблицаУдовлетворяетОтбору);
		
		ЭтотОбъект.Товары.Загрузить(ОбщегоНазначения.ДеревоЗначенийВТаблицуЗначений(ЭлементПозиций.Значение)); //Костенюк Александр 29.05.2013
		
	КонецПроцедуры // ПозицииЗаписать()
	
	
	// Обработчик события Позиции.Номенклатура.ПриИзменении элемента.
	//
	Процедура ПозицииНоменклатураПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент) Экспорт
		
		// Чистяков Павел 21.07.2011 12:39:53 
		Если ЭлементПозиций.ТекущиеДанные=Неопределено
			ИЛИ ЭтотОбъект.мТекущаяНоменклатура=ЭлементПозиций.ТекущиеДанные.Номенклатура Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.мТекущаяНоменклатура = ЭлементПозиций.ТекущиеДанные.Номенклатура;	
		
		СтрокаТабличнойЧасти = ЭлементПозиций.ТекущиеДанные;
		
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, , "Товары");
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ЭтотОбъект.мВалютаРегламентированногоУчета, ЭтотОбъект.мВалютаРегламентированногоУчета, , Истина, "Товары");
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация", "Товары");
		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементПозиций.Значение);
		
		// Услуга.
		//СтрокаТабличнойЧасти.Услуга = ЗначениеЗаполнено(Элемент.Значение) И (Элемент.Значение.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга); //Костенюк Александр-Закомментировано 31.05.2013
		
	КонецПроцедуры // ПозицииНоменклатураПриИзменении()
	
	Процедура ПозицииНоменклатураНачалоВыбора(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		ТекущаяСтрока = ЭлементПозиций.ТекущаяСтрока;
		
		СписокОтбораТипа = Новый СписокЗначений;
		СписокОтбораТипа.Добавить(Перечисления.ТипыНоменклатуры.Модификатор);
		СписокОтбораТипа.Добавить(Перечисления.ТипыНоменклатуры.Условие);
		
		Если ТипЗнч(ЭтотОбъект) <> Тип("ДокументСсылка.ЧекККМ") Тогда
			
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				
				Если ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор Тогда
					
					// Александр Переверзев 16.03.2012 13:54:15 
					ВыбранныйЭлементСправочника = ОткрытьФормуМодально("Справочник.МодификаторыНоменклатуры.ФормаВыбора",
						Новый Структура("Номенклатура,ТекущаяСтрока,РежимВыбора", ТекущаяСтрока.Родитель.Номенклатура, ТекущаяСтрока.Номенклатура, Истина),
						Элемент);
					
					// Чистяков Павел 21.07.2011 13:18:24
					//ВыбранныйЭлементСправочника = ОткрытьФормуМодально("Справочник.МодификаторыНоменклатуры.Форма.ФормаВыбора",
					//Новый Структура("Номенклатура,НоменклатураМодификатор",ТекущаяСтрока.Родитель.Номенклатура,ТекущаяСтрока.Номенклатура),Элемент);
					Если ЗначениеЗаполнено(ВыбранныйЭлементСправочника) Тогда
						Элемент.Значение = ВыбранныйЭлементСправочника.Номенклатура;
					КонецЕсли; 
					
				ИначеЕсли ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Условие Тогда
					
					// Александр Переверзев 16.03.2012 13:54:15 
					ВыбранныйЭлементСправочника = ОткрытьФормуМодально("Справочник.УсловияНоменклатуры.ФормаВыбора",
						Новый Структура("Номенклатура,ТекущаяСтрока,РежимВыбора", ТекущаяСтрока.Родитель.Номенклатура, ТекущаяСтрока.Номенклатура, Истина),
						Элемент);
					
					// Чистяков Павел 21.07.2011 13:18:24
					//ВыбранныйЭлементСправочника = ОткрытьФормуМодально("Справочник.УсловияНоменклатуры.Форма.ФормаВыбора",
					//Новый Структура("Номенклатура,НоменклатураМодификатор",ТекущаяСтрока.Родитель.Номенклатура,ТекущаяСтрока.Номенклатура),Элемент);
					Если ЗначениеЗаполнено(ВыбранныйЭлементСправочника) Тогда
						Элемент.Значение = ВыбранныйЭлементСправочника.Номенклатура;
					КонецЕсли; 
					
				ИначеЕсли  ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар Тогда	 
					
					
					НоваяФорма = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", Новый Структура("СписокТипыНоменклатуры,ТекущаяСтрока", СписокОтбораТипа, Элемент.Значение),Элемент); 
					ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(НоваяФорма.Список, "Ценовой" , Истина, ВидСравненияКомпоновкиДанных.Равно);	
					НоваяФорма.Открыть();
					//НоваяФорма.Элементы.Список.ТекущаяСтрока = Элемент.Значение; 
					
				КонецЕсли;
				
			иначе 
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.Родитель) Тогда 
					
					Если ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор Тогда
					
						// Александр Переверзев 16.03.2012 13:54:15 
						ВыбранныйЭлементСправочника = ОткрытьФормуМодально("Справочник.МодификаторыНоменклатуры.ФормаВыбора",
							Новый Структура("Номенклатура,ТекущаяСтрока,РежимВыбора", ТекущаяСтрока.Родитель.Номенклатура, ТекущаяСтрока.Номенклатура, Истина),
							Элемент);
					
						// Чистяков Павел 21.07.2011 13:18:24
						// Модально надо для того, чтобы обработать возвращаемое значение
						// Если научится делать это в форме, можно уйти от этого.
						//ВыбранныйЭлементСправочника = ОткрытьФормуМодально("Справочник.МодификаторыНоменклатуры.Форма.ФормаВыбора",
						//Новый Структура("Номенклатура,НоменклатураМодификатор",ТекущаяСтрока.Родитель.Номенклатура,Справочники.Номенклатура.ПустаяСсылка()),Элемент);
						Если ЗначениеЗаполнено(ВыбранныйЭлементСправочника) Тогда
							Элемент.Значение = ВыбранныйЭлементСправочника.Номенклатура;
						КонецЕсли; 
						
					ИначеЕсли ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Условие тогда
						
						// Александр Переверзев 16.03.2012 13:54:15 
						ВыбранныйЭлементСправочника = ОткрытьФормуМодально("Справочник.УсловияНоменклатуры.ФормаВыбора",
							Новый Структура("Номенклатура,ТекущаяСтрока,РежимВыбора", ТекущаяСтрока.Родитель.Номенклатура, ТекущаяСтрока.Номенклатура, Истина),
							Элемент);
						
						// Чистяков Павел 21.07.2011 13:18:24
						// Модально надо для того, чтобы обработать возвращаемое значение
						// Если научится делать это в форме, можно уйти от этого.
						//ВыбранныйЭлементСправочника = ОткрытьФормуМодально("Справочник.УсловияНоменклатуры.Форма.ФормаВыбора",
						//Новый Структура("Номенклатура,НоменклатураМодификатор",ТекущаяСтрока.Родитель.Номенклатура,Справочники.Номенклатура.ПустаяСсылка()),Элемент);
						Если ЗначениеЗаполнено(ВыбранныйЭлементСправочника) Тогда
							Элемент.Значение = ВыбранныйЭлементСправочника.Номенклатура;
						КонецЕсли; 
						
					КонецЕсли;
					
				Иначе
					
					НоваяФорма = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбора",Новый Структура("СписокТипыНоменклатуры", СписокОтбораТипа), Элемент);
					ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(НоваяФорма.Список, "Ценовой" , Истина, ВидСравненияКомпоновкиДанных.Равно);	
					НоваяФорма.Открыть();
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				СтПараметры = Новый Структура;
				СтПараметры.Вставить("Отбор", Новый Структура("Ценовой", ложь ));		 
				НоваяФорма = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбора",СтПараметры, Элемент); 
				ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(НоваяФорма.Список, "ТипНоменклатуры" , Перечисления.ТипыНоменклатуры.Условие, ВидСравненияКомпоновкиДанных.НеРавно);	
				НоваяФорма.Открыть();
				НоваяФорма.Элементы.Список.ТекущаяСтрока = Элемент.Значение; 
			Иначе
				СтПараметры = Новый Структура;
				СтПараметры.Вставить("Отбор", Новый Структура("Ценовой", ложь ));		 
				НоваяФорма = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбора",СтПараметры, Элемент); 
				ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(НоваяФорма.Список, "ТипНоменклатуры" , Перечисления.ТипыНоменклатуры.Условие, ВидСравненияКомпоновкиДанных.НеРавно);	
				НоваяФорма.Открыть();
				
			КонецЕсли;
			
		КонецЕсли; 	
		
		ПозицииНоменклатураПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент);
		
	КонецПроцедуры // ПозицииНоменклатураНачалоВыбора()
	
	Процедура УдалитьПодчиненныеСтроки(ТекущаяСтрока) Экспорт
		
		МассивСтрок = Новый Массив;
		
		Если  ТекущаяСтрока.Строки.Количество() > 0 Тогда 	
			Для каждого СтрокаКоллекции Из ТекущаяСтрока.Строки Цикл
				МассивСтрок.Добавить(СтрокаКоллекции);			
			КонецЦикла;	
		КонецЕсли;
		
		Для НомерСтроки = 0  По МассивСтрок.Количество()-1 Цикл
			ТекущаяСтрока.Строки.Удалить(МассивСтрок[НомерСтроки]);
		КонецЦикла;
		
	КонецПроцедуры	
	
	Процедура ПозицииПриАктивизацииЯчейки(ЭтаФорма, Элемент)Экспорт
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено тогда
			
			Если ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор или
				ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Условие Тогда	
				Элемент.Колонки.Количество.ЭлементУправления.Доступность = Ложь; 
			Иначе
				Элемент.Колонки.Количество.ЭлементУправления.Доступность = Истина; 
			КонецЕсли;
			
			ПроверкаМодификатора =   УправлениеНоменклатуройСервер.ПроверитьНаМодификаторНоменклатуру(ТекущаяСтрока.Номенклатура);
			ЭтаФорма.ЭлементыФормы.КоманднаяПанельПозиции.Кнопки["Позиции"].Кнопки["Модификатор"].Доступность = ПроверкаМодификатора и не ТекущаяСтрока.Распечатан ; //и ТекущаяСтрока.
			ПроверкаУсловия =   УправлениеНоменклатуройСервер.ПроверитьНаУсловиеНоменклатуру(ТекущаяСтрока.Номенклатура);
			ЭтаФорма.ЭлементыФормы.КоманднаяПанельПозиции.Кнопки["Позиции"].Кнопки["Условие"].Доступность = ПроверкаУсловия и не ТекущаяСтрока.Распечатан;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Обработчик события Позиции.Номенклатура.Очистка элемента.
	//
	Процедура ПозицииНоменклатураОчистка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
	КонецПроцедуры // ПозицииНоменклатураОчистка()
	
	// Обработчик события Позиции.Количество.ПриИзменении элемента.
	//
	Процедура ПозицииКоличествоПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент) Экспорт
		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементПозиций.Значение);
		
	КонецПроцедуры // ПозицииКоличествоПриИзменении()
	
	// Обработчик события Позиции.ЕдиницаИзмерения.НачалоВыбораИзСписка элемента.
	//
	Процедура ПозицииЕдиницаИзмеренияНачалоВыбораИзСписка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
		
		РаботаСДиалогами.ВыборСправочникИзСписка(Элемент, ЭтаФорма, СтандартнаяОбработка);
		
	КонецПроцедуры // ПозицииЕдиницаИзмеренияНачалоВыбораИзСписка()
	
	// Обработчик события Позиции.ЕдиницаИзмерения.Очистка элемента.
	//
	Процедура ПозицииЕдиницаИзмеренияОчистка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
	КонецПроцедуры // ПозицииЕдиницаИзмеренияОчистка()
	
	// Обработчик события Позиции.Цена.ПриИзменении элемента.
	//
	Процедура ПозицииЦенаПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент, ЭтаФорма = Неопределено) Экспорт
		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементПозиций.Значение);
		
	КонецПроцедуры // ПозицииЦенаПриИзменении()
	
	// Обработчик события Позиции.СуммаСкидки.ПриИзменении элемента.
	//
	Процедура ПозицииСуммаСкидкиПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент, ЭтаФорма = Неопределено) Экспорт
		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементПозиций.Значение);
		
		
	КонецПроцедуры // ПозицииСуммаСкидкиПриИзменении()
	
	// Обработчик события Позиции.СуммаНаценки.ПриИзменении элемента.
	//
	Процедура ПозицииСуммаНаценкиПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент, ЭтаФорма = Неопределено) Экспорт
		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементПозиций.Значение);
		
	КонецПроцедуры // ПозицииСуммаНаценкиПриИзменении()
	
	// Обработчик события Позиции.СтавкаНДС.ПриИзменении элемента.
	//
	Процедура ПозицииСтавкаНДСПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент) Экспорт
		
		СтрокаТабличнойЧасти = ЭлементПозиций.ТекущиеДанные;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Товары");
		
	КонецПроцедуры // ПозицииСтавкаНДСПриИзменении()
	
	// Обработчик события Позиции.СтавкаНДС.Очистка элемента.
	//
	Процедура ПозицииСтавкаНДСОчистка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
	КонецПроцедуры // ПозицииСтавкаНДСОчистка()
	
	// Обработчик события Позиции.НоменклатурнаяГруппа.ПриИзменении элемента.
	//
	Процедура ПозицииНоменклатурнаяГруппаПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент) Экспорт
		
		СтрокаТабличнойЧасти = ЭлементПозиций.ТекущиеДанные;
		СтрокаТабличнойЧасти.Организация = СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Организация;
		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементПозиций.Значение);
		
	КонецПроцедуры // ПозицииНоменклатурнаяГруппаПриИзменении()
	
	// Обработчик события Позиции.НоменклатурнаяГруппа.НачалоВыбораИзСписка элемента.
	//
	Процедура ПозицииНоменклатурнаяГруппаНачалоВыбораИзСписка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
		
		Если РаботаСДиалогами.ВыборСправочникИзСписка(Элемент, ЭтаФорма, СтандартнаяОбработка) Тогда
			ПозицииНоменклатурнаяГруппаПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент);
		КонецЕсли;
		
	КонецПроцедуры // ПозицииНоменклатурнаяГруппаНачалоВыбораИзСписка()
	
	// Обработчик события Позиции.НоменклатурнаяГруппа.Очистка элемента.
	//
	Процедура ПозицииНоменклатурнаяГруппаОчистка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
	КонецПроцедуры // ПозицииНоменклатурнаяГруппаОчистка()
	
	// Обработчик события Позиции.Организация.НачалоВыбораИзСписка элемента.
	//
	Процедура ПозицииОрганизацияНачалоВыбораИзСписка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
		
		РаботаСДиалогами.ВыборСправочникИзСписка(Элемент, ЭтаФорма, СтандартнаяОбработка);
		
	КонецПроцедуры // ПозицииОрганизацияНачалоВыбораИзСписка()
	
	// Обработчик события Позиции.Организация.Очистка элемента.
	//
	Процедура ПозицииОрганизацияОчистка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
	КонецПроцедуры // ПозицииОрганизацияОчистка()
	
	// Обработчик события Позиции.ПричинаОтказа.НачалоВыбораИзСписка элемента.
	//
	Процедура ПозицииПричинаОтказаНачалоВыбораИзСписка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
		
		РаботаСДиалогами.ВыборСправочникИзСписка(Элемент, ЭтаФорма, СтандартнаяОбработка);
		
	КонецПроцедуры // ПозицииПричинаОтказаНачалоВыбораИзСписка()
	
	// Обработчик события Позиции.ПричинаОтказа.Очистка элемента.
	//
	Процедура ПозицииПричинаОтказаОчистка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
	КонецПроцедуры // ПозицииПричинаОтказаОчистка()
	
	// Обработчик события Позиции.ДатаНачалаПериода.ПриИзменении элемента.
	//
	Процедура ПозицииДатаНачалаПериодаПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент) Экспорт
		
		СтрокаТабличнойЧасти = ЭлементПозиций.ТекущиеДанные;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
			СтрокаТабличнойЧасти.ДатаОкончанияПериода = Макс(СтрокаТабличнойЧасти.ДатаНачалаПериода, СтрокаТабличнойЧасти.ДатаОкончанияПериода);
		КонецЕсли;
		
	КонецПроцедуры // ПозицииДатаНачалаПериодаПриИзменении()
	
	// Обработчик события Позиции.ДатаНачалаПериода.Очистка элемента.
	//
	Процедура ПозицииДатаНачалаПериодаОчистка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
	КонецПроцедуры // ПозицииДатаНачалаПериодаОчистка()
	
	// Обработчик события Позиции.ДатаОкончанияПериода.ПриИзменении элемента.
	//
	Процедура ПозицииДатаОкончанияПериодаПриИзменении(ЭтотОбъект, ЭлементПозиций, Элемент) Экспорт
		
		СтрокаТабличнойЧасти = ЭлементПозиций.ТекущиеДанные;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
			СтрокаТабличнойЧасти.ДатаНачалаПериода = Мин(СтрокаТабличнойЧасти.ДатаНачалаПериода, СтрокаТабличнойЧасти.ДатаОкончанияПериода);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода) Тогда
			Если (Не ЭлементПозиций.Значение.Колонки.Найти("Распечатан") = Неопределено) Тогда
				СтрокаТабличнойЧасти.Распечатан = ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода);
			КонецЕсли;
			Если (Не ЭлементПозиций.Значение.Колонки.Найти("Выполненн") = Неопределено) Тогда
				СтрокаТабличнойЧасти.Выполненн = ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончанияПериода);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры // ПозицииДатаОкончанияПериодаПриИзменении()
	
	// Обработчик события Позиции.ДатаОкончанияПериода.Очистка элемента.
	//
	Процедура ПозицииДатаОкончанияПериодаОчистка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
	КонецПроцедуры // ПозицииДатаОкончанияПериодаОчистка()
	
	// Обработчик события Позиции.Комментарий.НачалоВыбораИзСписка элемента.
	//
	Процедура ПозицииКомментарийНачалоВыбораИзСписка(ЭтотОбъект, ЭлементПозиций, Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 50
		|	КомментарииНоменклатуры.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.КомментарииНоменклатуры КАК КомментарииНоменклатуры
		|ГДЕ
		|	КомментарииНоменклатуры.Комментарий ПОДОБНО &Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Комментарий");
		Запрос.УстановитьПараметр("Комментарий","%" + Элемент.Значение + "%");
		Таблица = Запрос.Выполнить().Выгрузить();
		
		СписокЗначений = Новый СписокЗначений;
		Для Каждого Строка Из Таблица Цикл
			СписокЗначений.Добавить(Строка.Комментарий);
		КонецЦикла; 
		
		Элемент.СписокВыбора = СписокЗначений;
		
	КонецПроцедуры // ПозицииКомментарийНачалоВыбораИзСписка()
	
	// Обработчик события Позиции.Комментарий.АвтоПодборТекста элемента.
	//
	Процедура ПозицииКомментарийАвтоПодборТекста(ЭтотОбъект, ЭлементПозиций, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	КомментарииНоменклатуры.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.КомментарииНоменклатуры КАК КомментарииНоменклатуры
		|ГДЕ
		|	КомментарииНоменклатуры.Комментарий ПОДОБНО &Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Комментарий");
		Запрос.УстановитьПараметр("Комментарий", Текст + "%");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если (Выборка.Количество() = 1) И Выборка.Следующий() Тогда
			ТекстАвтоПодбора = Выборка.Комментарий;
		КонецЕсли; 
		
	КонецПроцедуры // ПозицииКомментарийАвтоПодборТекста()
	
	// Обработчик события Позиции.Комментарий.ОкончаниеВводаТекста элемента.
	//
	Процедура ПозицииКомментарийОкончаниеВводаТекста(ЭтотОбъект, ЭлементПозиций, Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ПустаяСтрока(Текст) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
			|	КомментарииНоменклатуры.Комментарий КАК Комментарий
			|ИЗ
			|	РегистрСведений.КомментарииНоменклатуры КАК КомментарииНоменклатуры
			|ГДЕ
			|	КомментарииНоменклатуры.Комментарий ПОДОБНО &Комментарий
			|
			|УПОРЯДОЧИТЬ ПО
			|	Комментарий");
			Запрос.УстановитьПараметр("Комментарий", Элемент.Значение + "%");
			Таблица = Запрос.Выполнить().Выгрузить();
			
			СписокЗначений = Новый СписокЗначений;
			Для Каждого Строка Из Таблица Цикл
				СписокЗначений.Добавить(Строка.Комментарий);
			КонецЦикла; 
			
			Если (СписокЗначений.Количество() = 1) Тогда
				ЭлементСписка = СписокЗначений[0];
			Иначе
				ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(СписокЗначений, Элемент);
				Если ЭлементСписка = Неопределено Тогда
					Значение = Текст;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Значение = ЭлементСписка.Значение;
			
		КонецЕсли;
		
	КонецПроцедуры // ПозицииКомментарийОкончаниеВводаТекста()
	
	
	// Обработчик события Позиции.ПередНачаломДобавления элемента.
	//
	Процедура ПозицииПередНачаломДобавления(ЭтотОбъект, ЭлементПозиций, Отказ, Копирование, Родитель) Экспорт
		
		Если Не Копирование Тогда
			Отказ = Истина;
			ЭлементПозиций.ТекущаяСтрока = ЭлементПозиций.Значение.Строки.Добавить();
			ЭлементПозиций.ТекущаяКолонка = ЭлементПозиций.Колонки.Номенклатура;
			ЭлементПозиций.ИзменитьСтроку();
		КонецЕсли;	  
		
	КонецПроцедуры // ПозицииПередНачаломДобавления()
	
	// Обработчик события Позиции.ПередУдалением элемента.
	//
	Процедура ПозицииПередУдалением(ЭтотОбъект, ЭлементПозиций, Отказ) Экспорт
		
		// Только просмотр состояния.
		ТолькоПросмотрРаспечатан = (Не ЭлементПозиций.Значение.Колонки.Найти("Распечатан") = Неопределено) И (Не ЭтотОбъект.мМожноМенятьСостояниеНоменклатурыВДокументе) И ЭлементПозиций.ТекущиеДанные.ОригиналРаспечатан;
		ТолькоПросмотрВыполненн = (Не ЭлементПозиций.Значение.Колонки.Найти("Выполненн") = Неопределено) И (Не ЭтотОбъект.мМожноМенятьСостояниеНоменклатурыВДокументе) И ЭлементПозиций.ТекущиеДанные.ОригиналВыполненн;
		
		Отказ = (ТолькоПросмотрРаспечатан Или ТолькоПросмотрВыполненн);
		
	КонецПроцедуры // ПозицииПередУдалением()
	
	// Обработчик события Позиции.ПриНачалеРедактирования элемента.
	//
	Процедура ПозицииПриНачалеРедактирования(ЭтотОбъект, ЭлементПозиций, НоваяСтрока, Копирование) Экспорт
		
		Если  ТипЗнч(ЭтотОбъект) = Тип("ДокументСсылка.СписаниеТоваров") тогда
			// Дополнительно.
			Если НоваяСтрока Тогда
				ЭлементПозиций.ТекущиеДанные.Списание = ЭлементПозиций.ТекущиеДанные.Списание Или (Не Копирование);
				ЭлементПозиций.ТекущиеДанные.Распечатан = Истина;
				ЭлементПозиций.ТекущиеДанные.Выполненн = ЭлементПозиций.ТекущиеДанные.Списание;
			КонецЕсли;
			
			Если Копирование Тогда
				
				ЭлементПозиций.ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор;
				ЭлементПозиций.ТекущиеДанные.НомерСтроки =Неопределено;   
				Если (Не ЭлементПозиций.Значение.Колонки.Найти("Распечатан") = Неопределено) Тогда
					ЭлементПозиций.ТекущиеДанные.Распечатан = Неопределено;
					ЭлементПозиций.ТекущиеДанные.ОригиналРаспечатан = Неопределено;
				КонецЕсли;
				Если (Не ЭлементПозиций.Значение.Колонки.Найти("Выполненн") = Неопределено) Тогда
					ЭлементПозиций.ТекущиеДанные.Выполненн = Неопределено;
					ЭлементПозиций.ТекущиеДанные.ОригиналВыполненн = Неопределено;
				КонецЕсли;
				ОбщегоНазначенияСервер.УстановитьРодителейДляВерхнихСтрок(ЭлементПозиций.Значение, ЭлементПозиций.ТекущиеДанные);
				
			КонецЕсли;
			
		Иначе
			// Удаляем значения некопируемых реквизитов.
			
			Если НоваяСтрока И Копирование Тогда
				ЭлементПозиций.ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор;
				ЭлементПозиций.ТекущиеДанные.НомерСтроки =Неопределено;     	
				ЭлементПозиций.ТекущиеДанные.ДатаНачалаПериода = Неопределено;
				ЭлементПозиций.ТекущиеДанные.ДатаОкончанияПериода = Неопределено;
				Если (Не ЭлементПозиций.Значение.Колонки.Найти("Распечатан") = Неопределено) Тогда
					ЭлементПозиций.ТекущиеДанные.Распечатан = Неопределено;
					ЭлементПозиций.ТекущиеДанные.ОригиналРаспечатан = Неопределено;
				КонецЕсли;
				Если (Не ЭлементПозиций.Значение.Колонки.Найти("Выполненн") = Неопределено) Тогда
					ЭлементПозиций.ТекущиеДанные.Выполненн = Неопределено;
					ЭлементПозиций.ТекущиеДанные.ОригиналВыполненн = Неопределено;
				КонецЕсли;
				ОбщегоНазначенияСервер.УстановитьРодителейДляВерхнихСтрок(ЭлементПозиций.Значение, ЭлементПозиций.ТекущиеДанные);
				
			КонецЕсли;
			
			
			// ВидНоменклатуры.
			Если Не ЗначениеЗаполнено(ЭлементПозиций.ТекущиеДанные.ВидНоменклатуры) Тогда
				Если (ЭлементПозиций.ТекущиеДанные.Родитель = Неопределено) Тогда
					ЭлементПозиций.ТекущиеДанные.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар;
				Иначе 
					Если ЭлементПозиций.ТекущиеДанные.Родитель.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор Тогда 
						ЭлементПозиций.ТекущиеДанные.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Условие;
					КонецЕсли;  		
				КонецЕсли; 
			КонецЕсли; 
			
			ЭтотОбъект.мТекущаяНоменклатура = ЭлементПозиций.ТекущиеДанные.Номенклатура;
			
		КонецЕсли;
		
	КонецПроцедуры // ПозицииПриНачалеРедактирования()
	
	// Обработчик события Позиции.ПриОкончанииРедактирования элемента.
	//
	Процедура ПозицииПриОкончанииРедактирования(ЭтотОбъект, ЭлементПозиций, НоваяСтрока, ОтменаРедактирования, УдалятьПодчененные = Ложь) Экспорт
		
		// Установка идентификатора.
		Если (Не ЭлементПозиций.ТекущаяСтрока = Неопределено) Тогда
			ОбработкаТабличныхЧастей.УстановитьИдентификаторТабЧасти(ЭтотОбъект, ЭлементПозиций.ТекущиеДанные);
		КонецЕсли;
		
		// Проверка.
		Если (Не ЭлементПозиций.ТекущаяСтрока = Неопределено) И ((Не ЗначениеЗаполнено(ЭлементПозиций.ТекущаяСтрока.ВидНоменклатуры)) Или (Не ЗначениеЗаполнено(ЭлементПозиций.ТекущаяСтрока.Номенклатура))) Тогда
			
			Если (ЭлементПозиций.ТекущаяСтрока.Родитель = Неопределено) Тогда
				ЭлементПозиций.Значение.Строки.Удалить(ЭлементПозиций.ТекущаяСтрока);
			Иначе
				ЭлементПозиций.ТекущаяСтрока.Родитель.Строки.Удалить(ЭлементПозиций.ТекущаяСтрока);
			КонецЕсли;
			
			
		КонецЕсли;
		
		ПроверкаУсловияИМодификатора(ЭтотОбъект, ЭлементПозиций, НоваяСтрока, ОтменаРедактирования);
		
		Если не НоваяСтрока Тогда                         
			Если УдалятьПодчененные Тогда
				Если ЗначениеЗаполнено(ЭлементПозиций.ТекущаяСтрока.Номенклатура) Тогда
					Если ЭлементПозиций.ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар Тогда
						УдалитьПодчиненныеСтроки(ЭлементПозиций.ТекущаяСтрока);			
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;		
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементПозиций.Значение);
		
	КонецПроцедуры // ПозицииПриОкончанииРедактирования()
	//
	//
	//
	Процедура ПроверкаУсловияИМодификатора(ЭтотОбъект, ЭлементПозиций, НоваяСтрока, ОтменаРедактирования)
		
		Если  ЭлементПозиций.ТекущаяСтрока <> Неопределено тогда
			
			
			Если  ЭлементПозиций.ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Модификатор
				ИЛИ ЭлементПозиций.ТекущаяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Условие  Тогда 
				//СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
				//ПустойУИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 		
				//Если ЭлементПозиций.ТекущаяСтрока.Владелец <> ПустойУИдентификатор тогда
				Номенклатура = ЭлементПозиций.ТекущаяСтрока.Номенклатура;
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
				Если ЗначениеЗаполнено(ЭлементПозиций.ТекущаяСтрока.Родитель) Тогда 
					СтрокаПоиска = ЭлементПозиций.ТекущаяСтрока.Родитель.Строки.НайтиСтроки(СтруктураПоиска);
					Если СтрокаПоиска.Количество() > 1 и СтрокаПоиска[0].ВидНоменклатуры = СтрокаПоиска[1].ВидНоменклатуры Тогда
						ОбщегоНазначения.СообщитьОбОшибке( "Строка с полем "+ Номенклатура.Наименование + " уже существует." );
						ЭлементПозиций.ТекущаяСтрока.Родитель.Строки.Удалить(СтрокаПоиска[СтрокаПоиска.Количество()-1]) ;
					КонецЕсли;
				КонецЕсли;
				//иначе
				//	ЭлементПозиций.ТекущаяСтрока.Родитель.Строки.Удалить(ЭлементПозиций.ТекущаяСтрока);
				//КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Обработчик события Позиции.ПослеУдаления элемента.
	//
	Процедура ПозицииПослеУдаления(ЭтотОбъект, ЭлементПозиций) Экспорт
		
		ОбработкаТабличныхЧастей.РассчитатьСуммыПриПродаже(ЭтотОбъект, ЭлементПозиций.Значение);
		
	КонецПроцедуры // ПозицииПослеУдаления()
	
	// Обработчик события Позиции.ПриИзмененииФлажка элемента.
	//
	Процедура ПозицииПриИзмененииФлажка(ЭтотОбъект, ЭлементПозиций, Колонка) Экспорт
		
		ТекущиеДанные = ЭлементПозиций.ТекущиеДанные;
		
		// Распечатан.
		Если (Колонка.ДанныеФлажка = "Распечатан") Тогда
			Если Не ТекущиеДанные.Распечатан Тогда
				ТекущиеДанные.Выполненн = Неопределено;
				ТекущиеДанные.ДатаОкончанияПериода = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// Выполнен.
		Если (Колонка.ДанныеФлажка = "Выполненн") Тогда
			Если ТекущиеДанные.Выполненн Тогда
				ТекущиеДанные.Распечатан = Истина;
			Иначе
				ТекущиеДанные.ДатаОкончанияПериода = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры // ПозицииПриИзмененииФлажка()
	
	// Обработчик события Позиции.ПриВыводеСтроки элемента.
	//
	Процедура ПозицииПриВыводеСтроки(ЭтотОбъект, ЭлементПозиций, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		// Только просмотр состояния.
		ТолькоПросмотрРаспечатан = (Не ЭлементПозиций.Значение.Колонки.Найти("Распечатан") = Неопределено) И (Не ЭтотОбъект.мМожноМенятьСостояниеНоменклатурыВДокументе) И ДанныеСтроки.ОригиналРаспечатан;
		ТолькоПросмотрВыполненн = (Не ЭлементПозиций.Значение.Колонки.Найти("Выполненн") = Неопределено) И (Не ЭтотОбъект.мМожноМенятьСостояниеНоменклатурыВДокументе) И ДанныеСтроки.ОригиналВыполненн;
		
		// Чистяков Павел 21.07.2011 13:12:22 
		// Без этого возникает ошибка при отмене удаления
		// ввода новой строки
		Если ДанныеСтроки=Неопределено Тогда
			возврат;
		КонецЕсли;
		
		// НомерСтроки.
		Если ЭлементПозиций.Колонки.НомерСтроки.Видимость Тогда
			Если (ДанныеСтроки.Родитель = Неопределено) Тогда
				СтрокиРодителя = ЭлементПозиций.Значение.Строки;
			Иначе
				СтрокиРодителя = ДанныеСтроки.Родитель.Строки; 
			КонецЕсли; 
			ОформлениеСтроки.Ячейки.НомерСтроки.УстановитьТекст(СтрокиРодителя.Индекс(ДанныеСтроки) + 1);
		КонецЕсли;
		
		// Номенклатура.
		Если ЭлементПозиций.Колонки.Номенклатура.Видимость Тогда
			ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр = (ТолькоПросмотрРаспечатан Или ТолькоПросмотрВыполненн);
		КонецЕсли;
		
		// Количество.
		Если ЭлементПозиций.Колонки.Количество.Видимость Тогда
			ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр = (ТолькоПросмотрРаспечатан Или ТолькоПросмотрВыполненн);
		КонецЕсли;
		
		// ЕдиницаИзмерения.
		Если ЭлементПозиций.Колонки.ЕдиницаИзмерения.Видимость Тогда
			//ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр = ДанныеСтроки.Услуга Или (ТолькоПросмотрРаспечатан Или ТолькоПросмотрВыполненн);
			ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр = (ТолькоПросмотрРаспечатан Или ТолькоПросмотрВыполненн); //Костенюк Александр 18.05.2013
		КонецЕсли;
		
		// Распечатан.
		Если (Не ЭлементПозиций.Значение.Колонки.Найти("Распечатан") = Неопределено) Тогда
			ОформлениеСтроки.Ячейки.Распечатан.ТолькоПросмотр = ОформлениеСтроки.Ячейки.Распечатан.ТолькоПросмотр Или ТолькоПросмотрРаспечатан;
		КонецЕсли;
		
		// Выполнен.
		Если (Не ЭлементПозиций.Значение.Колонки.Найти("Выполненн") = Неопределено) Тогда
			ОформлениеСтроки.Ячейки.Выполненн.ТолькоПросмотр = ОформлениеСтроки.Ячейки.Выполненн.ТолькоПросмотр Или ТолькоПросмотрВыполненн;
		КонецЕсли;
		
	КонецПроцедуры // ПозицииПриВыводеСтроки()
	
	Процедура УстановитьКоличествоРодителя(ТекущаяСтрока) Экспорт 
		
		Если  ТекущаяСтрока.Строки.Количество() > 0 Тогда 
			
			
			Для Каждого СтрокаДерева из ТекущаяСтрока.Строки Цикл
				
				СтрокаGUID = "00000000-0000-0000-0000-000000000000"; 
				ПустойУИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID); 
				
				Если СтрокаДерева.Владелец <> ПустойУИдентификатор тогда	
					СтрокаДерева.Количество = ТекущаяСтрока.Количество;			
				КонецЕсли;
				
				Если  СтрокаДерева.Строки.Количество() > 0 Тогда 
					УстановитьКоличествоРодителя(СтрокаДерева);                       
				КонецЕсли;
				
			КонецЦикла;    	
		КонецЕсли;
		
	КонецПроцедуры
	
#КонецЕсли


//Костенюк Александр-Старт 22.05.2012
// Функция возвращает таблицу акций, которые распространяются на документ
//
// Параметры
//  ДокументОбъект – Тип: ДокументОбъект.РеализацияТоваровУслуг, документ который нужно проверить на попадание под акции 
//
// Возвращаемое значение: 
// ТаблицаАкций - Тип: ТаблицаЗначений, акции, которые необходимо применить к документу 
//
Функция ПолучитьТаблицуАкцийРаспространяющихсяНаДокумент(ДокументОбъект, УсловиеАкции = "") Экспорт
	
	ВидСертификата 		= ?(ЗначениеЗаполнено(ДокументОбъект.Сертификат), ДокументОбъект.Сертификат.ВидСертификата, Справочники.ВидыСертификатов.ПустаяСсылка());
	КоличествоКлиентов 	= ?(ЗначениеЗаполнено(ДокументОбъект.КоличествоКлиентов), ДокументОбъект.КоличествоКлиентов, 0);
	
	Если УсловиеАкции = Перечисления.УсловияАкции.ПриСозданииЗаказа Тогда
		ТекстУсловия = "
						|			КОГДА ТипыАкций.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияАкции.ПриСозданииЗаказа)
						|					И &КоличествоКлиентов >= ТипыАкций.ЗначениеУсловия
						|				ТОГДА ИСТИНА";
	ИначеЕсли УсловиеАкции = Перечисления.УсловияАкции.ПриЗакрытииЗаказа Тогда
		ТекстУсловия = "
						|			КОГДА ТипыАкций.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияАкции.ПриЗакрытииЗаказа)
						|					И &КоличествоКлиентов >= ТипыАкций.ЗначениеУсловия
						|				ТОГДА ИСТИНА";
	ИначеЕсли УсловиеАкции = "" Тогда
		ТекстУсловия = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТипыАкций.Ссылка КАК ТипАкции,
	               |	ТипыАкций.Номенклатура
	               |ИЗ
	               |	Справочник.ТипыАкций КАК ТипыАкций
	               |ГДЕ
	               |	НЕ ТипыАкций.ПометкаУдаления
	               |	И НЕ ТипыАкций.ЭтоГруппа
	               |	И ВЫБОР
	               |			КОГДА ТипыАкций.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияАкции.ПоВидуСертификата)
	               |					И ТипыАкций.ЗначениеУсловия = &ВидСертификата
	               |				ТОГДА ИСТИНА
				   | "+ТекстУсловия+"
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |	И &ПериодДействия";
	Запрос.Текст = ТекстЗапроса;
	РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодДействия", "ТипыАкций");
	
	Запрос.УстановитьПараметр("ВидСертификата", ВидСертификата);
	
	Если НЕ УсловиеАкции = "" Тогда
		Запрос.УстановитьПараметр("КоличествоКлиентов", КоличествоКлиентов);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() Тогда
		// Документ может попасть сразу под несколько видов акций
		// Например по виду сертификата и количеству гостей
		ТаблицаАкций = Результат;
	Иначе
		ТаблицаАкций = Неопределено;
	КонецЕсли;

	Возврат ТаблицаАкций;
	
КонецФункции
//Костенюк Александр-Финиш 22.05.2012

//Костенюк Александр-Старт 22.05.2012
// Процедура добавляет в заказ акционный товар
//
Процедура ЗаполнитьТаблицуАкционнымиТоварами(ДокументОбъект, ТаблицаПозиции = Неопределено, ТаблицаАкций = Неопределено) Экспорт
	
	Если ТипЗнч(ТаблицаПозиции) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ТаблицаПозиции;
	ИначеЕсли ТипЗнч(ТаблицаПозиции) = Тип("ДеревоЗначений") Тогда
		ТаблицаТоваров = Новый Массив;
		Для Каждого СтрокаВладелец Из ТаблицаПозиции.Строки Цикл
			ТаблицаТоваров.Добавить(СтрокаВладелец);
		КонецЦикла;
		Для Каждого СтрокаВладелец Из ТаблицаТоваров Цикл
			Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
				ТаблицаТоваров.Добавить(СтрокаВладельца);
			КонецЦикла;
		КонецЦикла;
	Иначе
		МетаданныеОбъекта = ДокументОбъект.Метаданные();
		ТаблицаТоваров = Новый Массив;
		Для Каждого Строка Из ДокументОбъект.Товары Цикл
			ТаблицаТоваров.Добавить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	СписокНоменклатуры = Новый СписокЗначений;
	
	Для Каждого СтрокаТаблицы Из ТаблицаАкций Цикл
		Если НЕ СтрокаТаблицы.Актуальность Тогда
			Продолжить;
		КонецЕсли;
		СписокНоменклатуры.Добавить(СтрокаТаблицы.Номенклатура);
	КонецЦикла;
	
	ТаблицаПараметров = ПолучитьПараметрыНоменклатуры(СписокНоменклатуры, ДокументОбъект, Истина);
	
	Для Каждого СтрокаТаблицы Из ТаблицаАкций Цикл
		
		Если НЕ СтрокаТаблицы.Актуальность Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицыПараметров = ТаблицаПараметров.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		
		Если НЕ СтрокаТаблицыПараметров = Неопределено Тогда
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПараметров);
			НоваяСтрока.Идентификатор 		= Новый УникальныйИдентификатор;
			Если СтрокаТаблицыПараметров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект Тогда
				НоваяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Комплект;
			Иначе
				НоваяСтрока.ВидНоменклатуры = Перечисления.ТипыСтрокЗаказов.Товар;
			КонецЕсли;
			НоваяСтрока.ЕдиницаИзмерения 	= СтрокаТаблицыПараметров.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Количество 			= СтрокаТаблицы.Количество;
			НоваяСтрока.СуммаБезСкидок 		= НоваяСтрока.Количество * НоваяСтрока.Цена;
			НоваяСтрока.Сумма 				= НоваяСтрока.Количество * НоваяСтрока.Цена;
			НоваяСтрока.ТипАкции			= СтрокаТаблицы.ТипАкции;
			НоваяСтрока.ПорядокПодачи		= 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//Костенюк Александр-Финиш 22.05.2012

#Если Клиент Тогда
//Костенюк Александр-Старт 10.07.2012
//
// Процедура опрашивает открытые заказы на наличие временных позиций
// 
// Параметры:
// Нет.
//
Процедура ОпросВременныхПозиций() Экспорт

	РезультатЗапросаВременныеПозиции 	= ЗапросВременныхПозиций();
	Выборка 							= РезультатЗапросаВременныеПозиции.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Продолжительность 	= Выборка.Количество * (Выборка.Продолжительность - '00010101');
		//РазностьДат 		= ОбщегоНазначения.ПолучитьРазностьДат(ТекущаяДата(), Выборка.ДатаНачалаПериода);
		
		//Если РазностьДат < 0 Тогда
		//	РазностьДат = - РазностьДат;
		//КонецЕсли;
		
		РазностьДат = ОбщегоНазначения.ПолучитьРазностьДат(Выборка.ДатаНачалаПериода, ТекущаяДата()); // 29.09.2013
		
		Если РазностьДат >= Продолжительность Тогда
			
			ДокументОбъект 	= Выборка.ДокументСсылка.ПолучитьОбъект();
			ТабличнаяЧасть 	= ДокументОбъект.Товары;
			НайденнаяСтрока = ТабличнаяЧасть.Найти(Выборка.Идентификатор, "Идентификатор");
			
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока.Выполненн 				= Истина;
			НайденнаяСтрока.ДатаОкончанияПериода 	= Выборка.ДатаНачалаПериода + Продолжительность;
			
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура.Оборудование) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выключение индикатора на УУСН, отвечающего за данный заказ
			Обработка 	= Неопределено;
			Объект    	= Неопределено;
			Результат 	= ПолучитьСерверТО().ПолучитьОбъектДрайвера(НайденнаяСтрока.Номенклатура.Оборудование, Обработка, Объект);
			
			Если ЗначениеЗаполнено(Результат) Тогда
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Возникла ошибка при попытке подключения к устройству!';uk='Виникла помилка при спробі підключення до пристрою!'"));
				Продолжить;
			КонецЕсли;
			
			ОшибкаТО = ПолучитьСерверТО().УстановитьСостояниеКанала(Обработка, Объект, Ложь);
			
			Если ОшибкаТО = Перечисления.ТООшибкиОбщие.ФункцияНеПоддерживается Тогда
				FrontOffice.ВывестиПредупреждение(НСтр("ru='Возникла ошибка при попытке выключения канала № "+Объект.Параметры.Канал+"!';uk='Виникла помилка при спробі виключення каналу № "+Объект.Параметры.Канал+"!'"));
				Продолжить;
			КонецЕсли;
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				Продолжить;
			КонецПопытки;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//Костенюк Александр-Финиш 10.07.2012

//Костенюк Александр-Старт 10.07.2012
//
// Функция получает перечень временных позиций в открытых заказах
// 
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Результат - Тип: РезультатЗапроса
//
Функция ЗапросВременныхПозиций(Документ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслугТовары.Ссылка КАК ДокументСсылка,
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Идентификатор КАК ИдентификаторДокумента,
	               |	РеализацияТоваровУслугТовары.Идентификатор,
	               |	РеализацияТоваровУслугТовары.Номенклатура,
	               |	РеализацияТоваровУслугТовары.Количество,
	               |	РеализацияТоваровУслугТовары.Номенклатура.ПродолжительностьПроизводства КАК Продолжительность,
	               |	РеализацияТоваровУслугТовары.ДатаНачалаПериода,
	               |	РеализацияТоваровУслугТовары.ДатаОкончанияПериода
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеНоменклатурыРеализацийТоваровУслуг КАК СостояниеНоменклатурыРеализацийТоваровУслуг
	               |		ПО РеализацияТоваровУслугТовары.Ссылка = СостояниеНоменклатурыРеализацийТоваровУслуг.Документ
	               |			И РеализацияТоваровУслугТовары.Номенклатура = СостояниеНоменклатурыРеализацийТоваровУслуг.Номенклатура
	               |ГДЕ
	               |	СостояниеНоменклатурыРеализацийТоваровУслуг.Номенклатура.Временной
	               |	И НЕ РеализацияТоваровУслугТовары.Выполненн";
	Если НЕ Документ = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "|	И СостояниеНоменклатурыРеализацийТоваровУслуг.Документ = &Документ";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Документ", Документ);
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;

КонецФункции
//Костенюк Александр-Финиш 10.07.2012
#КонецЕсли

//Костенюк Александр-Старт 18.03.2013
// Процедура производит расчет скидок/наценок в заказе
// 
// Параметры:
// ДокументОбъект - Тип: ДокументОбъект.РеализацияТоваровУслуг
// ТаблицаПозиции - Тит: ДокументОбъект.РеализацияТоваровУслуг.Товары
// ТабличнаяЧастьСкидок - Тит: ДокументОбъект.РеализацияТоваровУслуг.Скидки
//
Процедура РассчитатьСуммыПриПродаже(ДокументОбъект, ТаблицаПозиции = Неопределено, ТабличнаяЧастьСкидок = Неопределено, Номинал = Неопределено) Экспорт
	
	ЕстьТаблицаСкидок = Ложь;
	Если ТипЗнч(ТаблицаПозиции) = Тип("ТаблицаЗначений") Тогда
		ЕстьТаблицаСкидок = (ТаблицаПозиции.Колонки.Найти("СуммаСкидки")<>Неопределено);
		МассивТоваров = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаПозиции Цикл
			МассивТоваров.Добавить(СтрокаТаблицы);
		КонецЦикла;
		ТаблицаТоваров = ТаблицаПозиции;
	ИначеЕсли ТипЗнч(ТаблицаПозиции) = Тип("ДеревоЗначений") Тогда
		ЕстьТаблицаСкидок = (ТаблицаПозиции.Колонки.Найти("СуммаСкидки")<>Неопределено);
		МассивТоваров = Новый Массив;
		Для Каждого СтрокаВладелец Из ТаблицаПозиции.Строки Цикл
			МассивТоваров.Добавить(СтрокаВладелец);
		КонецЦикла;
		Для Каждого СтрокаВладелец Из МассивТоваров Цикл
			Для Каждого СтрокаВладельца Из СтрокаВладелец.Строки Цикл
				МассивТоваров.Добавить(СтрокаВладельца);
			КонецЦикла;
		КонецЦикла;
		ТаблицаТоваров = ДокументОбъект.Товары.Выгрузить().СкопироватьКолонки();
		Для Каждого Строка Из МассивТоваров Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	Иначе
		МетаданныеОбъекта = ДокументОбъект.Метаданные();
		ЕстьТаблицаСкидок = (МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты.Найти("СуммаСкидки")<>Неопределено);
		МассивТоваров = Новый Массив;
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			МассивТоваров.Добавить(СтрокаТабличнойЧасти);
		КонецЦикла;
		ТаблицаТоваров = ДокументОбъект.Товары.Выгрузить().СкопироватьКолонки();
		Для Каждого Строка Из МассивТоваров Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьТаблицаСкидок Тогда
		
		Если ТабличнаяЧастьСкидок = Неопределено Тогда
			ТабличнаяЧастьСкидок = ДокументОбъект.Скидки;
		КонецЕсли;
		
		Если ДокументОбъект.Проведен ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Если ДокументОбъект.РучноеУправлениеСкидками Тогда
			
			Для каждого Строка Из ТабличнаяЧастьСкидок Цикл
				
				Строка.СуммаСкидки				= 0;
				Строка.СуммаНаценки				= 0;
				Строка.СуммаДепозита 			= 0;
				Строка.СуммаСертификата 		= 0;
				Строка.СуммаСкидкиНаСертификат 	= 0;
				
			КонецЦикла;
			
			Для каждого Строка Из МассивТоваров Цикл
				
				Сумма 					= Строка.Количество*Строка.Цена;
				Наценка 				= 0;
				Скидка					= 0;
				СуммаДепозита 			= 0;
				СуммаСертификата 		= 0;
				СуммаСкидкиНаСертификат	= 0;
				
				СуммаДоИзменения = Строка.СуммаБезСкидок;
				
				Если Булево(СуммаДоИзменения) Тогда
					Поправка = Сумма/СуммаДоИзменения;
				Иначе
					Поправка = 1.0;
				КонецЕсли;
				
				Строка.СуммаБезСкидок 			= Сумма;
				Строка.СуммаНаценки 			= Строка.СуммаНаценки*Поправка;
				Наценка							= Строка.СуммаНаценки;
				Строка.СуммаСкидки				= Мин(Строка.СуммаСкидки*Поправка,Макс(Сумма-0.01,0));
				Скидка							= Строка.СуммаСкидки;
				Строка.СуммаДепозита			= Строка.СуммаДепозита*Поправка;
				СуммаДепозита					= Строка.СуммаДепозита;
				Строка.СуммаСертификата			= Строка.СуммаСертификата*Поправка;
				СуммаСертификата				= Строка.СуммаСертификата;
				Строка.СуммаСкидкиНаСертификат	= Строка.СуммаСкидкиНаСертификат*Поправка;
				СуммаСкидкиНаСертификат			= Строка.СуммаСкидкиНаСертификат;
				Строка.Сумма					= Сумма + Наценка - Скидка - СуммаСертификата;
				Строка.СуммаНДС					= Ценообразование.РассчитатьСуммуНДС(Строка.Сумма,Истина,Истина,Ценообразование.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				
			КонецЦикла; 
			
			Возврат;
			
		КонецЕсли; 
		
		// Удаление автоматических актуальных скидок/наценок перед расчетом
		МассивСтрок = ТабличнаяЧастьСкидок.НайтиСтроки(Новый Структура("Актуальность, Автоматическая", Истина, Истина));
		Для Каждого Строка Из МассивСтрок Цикл
			ТабличнаяЧастьСкидок.Удалить(Строка);
		КонецЦикла;
		
		// Перебор таблицы товаров и преобразование поля "Идентификатор" в строку
		// Неоптимально, но дисконтная система все равно будет переписана
		// Это необходимо для того, чтобы корректно применялась динамическая скидка
		ТаблицаПозицийЗапроса = Новый ТаблицаЗначений;
		ТаблицаПозицийЗапроса.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
		ТаблицаПозицийЗапроса.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПозицийЗапроса.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		ТаблицаПозицийЗапроса.Колонки.Добавить("ДатаНачалаПериода", Новый ОписаниеТипов("Дата"));
		ТаблицаПозицийЗапроса.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
		
		Индекс = 0;
		Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
			НоваяСтрока = ТаблицаПозицийЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТоваров);
			НоваяСтрока.Идентификатор = Строка(СтрокаТаблицыТоваров.Идентификатор);
		КонецЦикла;
				
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Формирование таблицы без нулевых цен
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВЫРАЗИТЬ(ТаблицаТоваров.Идентификатор КАК СТРОКА(36)) КАК Идентификатор,
		               |	ТаблицаТоваров.Номенклатура,
		               |	ТаблицаТоваров.НоменклатурнаяГруппа,
		               |	ВЫБОР
		               |		КОГДА ТаблицаТоваров.ДатаНачалаПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |			ТОГДА &ТекДата
		               |		ИНАЧЕ ТаблицаТоваров.ДатаНачалаПериода
		               |	КОНЕЦ КАК ДатаНачалаПериода
		               |ПОМЕСТИТЬ ВТТовары
		               |ИЗ
		               |	&ТаблицаТоваров КАК ТаблицаТоваров
		               |ГДЕ
		               |	ТаблицаТоваров.Цена <> 0";
		Запрос.УстановитьПараметр("ТаблицаТоваров"	, ТаблицаПозицийЗапроса);
		Запрос.УстановитьПараметр("ТекДата"			, ТекущаяДата());
		Запрос.Выполнить();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Товары.Номенклатура КАК Номенклатура,
		               |	Товары.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		               |	ВЫРАЗИТЬ(Товары.Номенклатура.ТипНоменклатуры КАК Перечисление.ТипыНоменклатуры) КАК ТипНоменклатуры,
		               |	ЕСТЬNULL(ПараметрыНоменклатуры.Безнадбавочный, ЛОЖЬ) КАК Безнадбавочный,
		               |	ЕСТЬNULL(ПараметрыНоменклатуры.Безскидочный, ЛОЖЬ) КАК Безскидочный,
		               |	ПараметрыТиповСкидокНаценок.Ссылка КАК ТипСкидкиНаценки,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(ПараметрыТиповСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.Сертификаты)
		               |				ИЛИ ТИПЗНАЧЕНИЯ(ПараметрыТиповСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.ВидыСертификатов)
		               |			ТОГДА ВЫБОР
		               |					КОГДА ПараметрыТиповСкидокНаценок.Ссылка.Уточняемая
		               |						ТОГДА &СуммаПоСертификату
		               |					ИНАЧЕ ПараметрыТиповСкидокНаценок.Ссылка.ПроцентСкидкиНаценки
		               |				КОНЕЦ
		               |		КОГДА ТИПЗНАЧЕНИЯ(ПараметрыТиповСкидокНаценок.ЗначениеУсловия) = ТИП(Справочник.ВидыДисконтныхКарт)
		               |			ТОГДА ВЫБОР
		               |					КОГДА &УсловиеСкидки <> ЗНАЧЕНИЕ(Справочник.УсловияСкидок.ПустаяСсылка)
		               |						ТОГДА ПараметрыТиповСкидокНаценок.Ссылка.ПроцентСкидкиНаценки
		               |					КОГДА ПараметрыТиповСкидокНаценок.Ссылка.Уточняемая
		               |						ТОГДА &ПроцентУточняемый
		               |					ИНАЧЕ ПараметрыТиповСкидокНаценок.Ссылка.ПроцентСкидкиНаценки
		               |				КОНЕЦ
		               |		КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.РучнаяСкидка)
		               |				И ПараметрыТиповСкидокНаценок.Уточняемая
		               |			ТОГДА &Номинал
		               |		ИНАЧЕ ПараметрыТиповСкидокНаценок.ПроцентСкидкиНаценки
		               |	КОНЕЦ КАК Номинал,
		               |	ПараметрыТиповСкидокНаценок.СуммоваяСкидкаНаценка КАК Суммовая,
		               |	ПараметрыТиповСкидокНаценок.ВытесняющаяСкидка КАК Вытесняющая,
		               |	Товары.Идентификатор КАК Идентификатор
		               |ПОМЕСТИТЬ ТоварыСкидки
		               |ИЗ
		               |	ВТТовары КАК Товары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ПараметрыНоменклатуры
		               |		ПО Товары.Номенклатура = ПараметрыНоменклатуры.Ссылка
		               |		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ТипыСкидокНаценок КАК ПараметрыТиповСкидокНаценок
		               |		ПО (НЕ ПараметрыТиповСкидокНаценок.ЭтоГруппа)
		               |			И (ВЫБОР
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.РучнаяСкидка)
		               |						И ПараметрыТиповСкидокНаценок.Ссылка В (&РучныеСкидки)
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.БезУсловий)
		               |						И НЕ ПараметрыТиповСкидокНаценок.Ссылка В
		               |								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |									ЕСТЬNULL(Пользователь.ОбъектДоступа, Группа.ОбъектДоступа) КАК ОбъектДоступа
		               |								ИЗ
		               |									(ВЫБРАТЬ
		               |										НастройкиПравДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа,
		               |										НастройкиПравДоступаПользователей.Актуальность КАК Актуальность
		               |									ИЗ
		               |										РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
		               |									ГДЕ
		               |										НастройкиПравДоступаПользователей.ВладелецПравДоступа = &ГруппаПользователей) КАК Группа
		               |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |											НастройкиПравДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа,
		               |											НастройкиПравДоступаПользователей.Актуальность КАК Актуальность
		               |										ИЗ
		               |											РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
		               |										ГДЕ
		               |											НастройкиПравДоступаПользователей.ВладелецПравДоступа = &Пользователь) КАК Пользователь
		               |										ПО
		               |											Группа.ОбъектДоступа = Пользователь.ОбъектДоступа)
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловия = &ВидДисконтнойКарты
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоУсловиюВидаДисконтнойКарты)
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловия = &ВидДисконтнойКарты
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловияДополнительное = &УсловиеСкидки
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловия = &ДисконтнаяКарта
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСертификату)
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловия = &Сертификат
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуСертификата)
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловия = &ВидСертификата
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоКоличествуТовара)
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловия В (&Номенклатура)
		               |						И &Количество >= ПараметрыТиповСкидокНаценок.ЗначениеУсловияДополнительное
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента)
		               |						И &Сумма >= ПараметрыТиповСкидокНаценок.ЗначениеУсловия
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоКатегорииКонтрагента)
		               |						И &КатегорияКонтрагента = ПараметрыТиповСкидокНаценок.ЗначениеУсловия
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойПрограмме)
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловия = &ВидДисконтнойКарты
		               |						И &ДисконтСумма >= ПараметрыТиповСкидокНаценок.ПорогДисконтнойПрограммы
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоМаршрутуДоставки)
		               |						И ПараметрыТиповСкидокНаценок.ЗначениеУсловия = &МаршрутДоставки
		               |					ТОГДА ИСТИНА
		               |				КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДнюРождения)
		               |					ТОГДА ИСТИНА
		               |				ИНАЧЕ ЛОЖЬ
		               |			КОНЕЦ)
		               |ГДЕ
		               |	НЕ ПараметрыТиповСкидокНаценок.Ссылка ЕСТЬ NULL
		               |	И НЕ ПараметрыТиповСкидокНаценок.ПометкаУдаления
		               |	И ПараметрыТиповСкидокНаценок.Актуальность
		               |	И (ПараметрыТиповСкидокНаценок.ПериодДействия = ЗНАЧЕНИЕ(Справочник.ПериодыДействия.ПустаяСсылка)
		               |			ИЛИ ВЫБОР
		               |				КОГДА ПараметрыТиповСкидокНаценок.Ссылка.РасчетПериодаДействияПриДобавленииБлюда
		               |					ТОГДА ПараметрыТиповСкидокНаценок.Ссылка В
		               |							(ВЫБРАТЬ
		               |								ПериодыДействия.ОбъектПрименения
		               |							ИЗ
		               |								РегистрСведений.ПериодыДействия КАК ПериодыДействия
		               |							ГДЕ
		               |								НАЧАЛОПЕРИОДА(Товары.ДатаНачалаПериода, ДЕНЬ) МЕЖДУ ПериодыДействия.ДатаНачала И ПериодыДействия.ДатаОкончания
		               |								И ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Товары.ДатаНачалаПериода, ДЕНЬ), Товары.ДатаНачалаПериода, СЕКУНДА)) МЕЖДУ ПериодыДействия.ВремяНачала И ПериодыДействия.ВремяОкончания
		               |								И (МЕСЯЦ(Товары.ДатаНачалаПериода) = ПериодыДействия.НомерМесяцаГода
		               |									ИЛИ ПериодыДействия.НомерМесяцаГода = 0)
		               |								И (ДЕНЬНЕДЕЛИ(Товары.ДатаНачалаПериода) = ПериодыДействия.НомерДняНедели
		               |									ИЛИ ПериодыДействия.НомерДняНедели = 0))
		               |				ИНАЧЕ ПараметрыТиповСкидокНаценок.Ссылка В
		               |						(ВЫБРАТЬ
		               |							ПериодыДействия.ОбъектПрименения
		               |						ИЗ
		               |							РегистрСведений.ПериодыДействия КАК ПериодыДействия
		               |						ГДЕ
		               |							НАЧАЛОПЕРИОДА(&ДатаПериодаДействия, ДЕНЬ) МЕЖДУ ПериодыДействия.ДатаНачала И ПериодыДействия.ДатаОкончания
		               |							И &ВремяПериодаДействия МЕЖДУ ПериодыДействия.ВремяНачала И ПериодыДействия.ВремяОкончания
		               |							И (МЕСЯЦ(&ДатаПериодаДействия) = ПериодыДействия.НомерМесяцаГода
		               |								ИЛИ ПериодыДействия.НомерМесяцаГода = 0)
		               |							И (ДЕНЬНЕДЕЛИ(&ДатаПериодаДействия) = ПериодыДействия.НомерДняНедели
		               |								ИЛИ ПериодыДействия.НомерДняНедели = 0))
		               |			КОНЕЦ)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Товары.Номенклатура КАК Номенклатура,
		               |	Товары.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		               |	Товары.Безнадбавочный КАК Безнадбавочный,
		               |	Товары.Безскидочный КАК Безскидочный,
		               |	Товары.ТипСкидкиНаценки КАК ТипСкидкиНаценки,
		               |	ВЫБОР
		               |		КОГДА Товары.Безнадбавочный
		               |				И Товары.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
		               |				И ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатуре.ПроцентСкидкиНаценки, ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе.ПроцентСкидкиНаценки, Товары.Номинал)) < 0
		               |			ТОГДА 0
		               |		КОГДА Товары.Безскидочный
		               |				И Товары.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
		               |				И ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатуре.ПроцентСкидкиНаценки, ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе.ПроцентСкидкиНаценки, Товары.Номинал)) > 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатуре.ПроцентСкидкиНаценки, ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе.ПроцентСкидкиНаценки, Товары.Номинал))
		               |	КОНЕЦ КАК Номинал,
		               |	Товары.Суммовая КАК Суммовая,
		               |	Товары.Вытесняющая КАК Вытесняющая,
		               |	Товары.Идентификатор КАК Идентификатор
		               |ПОМЕСТИТЬ ТоварыСкидкиНоминал
		               |ИЗ
		               |	ТоварыСкидки КАК Товары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкиНаценкиНоменклатуры КАК ПараметрыСкидкиНаценкиПоНоменклатуре
		               |		ПО Товары.Номенклатура = ПараметрыСкидкиНаценкиПоНоменклатуре.Номенклатура
		               |			И Товары.ТипСкидкиНаценки = ПараметрыСкидкиНаценкиПоНоменклатуре.ТипСкидкиНаценки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкиНаценкиНоменклатуры КАК ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе
		               |		ПО Товары.НоменклатурнаяГруппа = ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе.Номенклатура
		               |			И Товары.ТипСкидкиНаценки = ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе.ТипСкидкиНаценки
		               |ГДЕ
		               |	НЕ ВЫБОР
		               |				КОГДА Товары.Безнадбавочный
		               |						И Товары.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
		               |						И ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатуре.ПроцентСкидкиНаценки, ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе.ПроцентСкидкиНаценки, Товары.Номинал)) < 0
		               |					ТОГДА 0
		               |				КОГДА Товары.Безскидочный
		               |						И Товары.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Депозит)
		               |						И ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатуре.ПроцентСкидкиНаценки, ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе.ПроцентСкидкиНаценки, Товары.Номинал)) > 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатуре.ПроцентСкидкиНаценки, ЕСТЬNULL(ПараметрыСкидкиНаценкиПоНоменклатурнойГруппе.ПроцентСкидкиНаценки, Товары.Номинал))
		               |			КОНЕЦ = 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТоварыСкидкиНоминал.Номенклатура КАК Номенклатура,
		               |	ТоварыСкидкиНоминал.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		               |	ТоварыСкидкиНоминал.Суммовая КАК Суммовая,
		               |	ТоварыСкидкиНоминал.Номинал КАК Номинал,
		               |	МАКСИМУМ(ТоварыСкидкиНоминал.ТипСкидкиНаценки) КАК ТипСкидкиНаценки,
		               |	ТоварыСкидкиНоминал.Идентификатор КАК Идентификатор
		               |ПОМЕСТИТЬ РавныйНоминалВытесняемыхСкидокНаценок
		               |ИЗ
		               |	ТоварыСкидкиНоминал КАК ТоварыСкидкиНоминал
		               |ГДЕ
		               |	ТоварыСкидкиНоминал.Вытесняющая
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТоварыСкидкиНоминал.Номенклатура,
		               |	ТоварыСкидкиНоминал.НоменклатурнаяГруппа,
		               |	ТоварыСкидкиНоминал.Номинал,
		               |	ТоварыСкидкиНоминал.Суммовая,
		               |	ТоварыСкидкиНоминал.Идентификатор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТоварыСкидкиНоминал.Номенклатура КАК Номенклатура,
		               |	ТоварыСкидкиНоминал.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		               |	ТоварыСкидкиНоминал.Суммовая КАК Суммовая,
		               |	МИНИМУМ(ВЫБОР
		               |			КОГДА ТоварыСкидкиНоминал.Номинал < 0
		               |				ТОГДА ТоварыСкидкиНоминал.Номинал
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК Минимум,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ТоварыСкидкиНоминал.Номинал > 0
		               |				ТОГДА ТоварыСкидкиНоминал.Номинал
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК Максимум,
		               |	ТоварыСкидкиНоминал.Идентификатор КАК Идентификатор
		               |ПОМЕСТИТЬ КрайнийНоминалВытесняемыхСкидокНаценок
		               |ИЗ
		               |	ТоварыСкидкиНоминал КАК ТоварыСкидкиНоминал
		               |ГДЕ
		               |	ТоварыСкидкиНоминал.Вытесняющая
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТоварыСкидкиНоминал.Номенклатура,
		               |	ТоварыСкидкиНоминал.НоменклатурнаяГруппа,
		               |	ТоварыСкидкиНоминал.Суммовая,
		               |	ТоварыСкидкиНоминал.Идентификатор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	Товары.Номенклатура КАК Номенклатура,
		               |	Товары.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		               |	Товары.ТипСкидкиНаценки КАК ТипСкидкиНаценки,
		               |	Товары.Суммовая КАК Суммовая,
		               |	ВЫБОР
		               |		КОГДА Товары.Номинал > 0
		               |			ТОГДА Товары.Номинал
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК НоминалСкидки,
		               |	ВЫБОР
		               |		КОГДА Товары.Номинал < 0
		               |			ТОГДА Товары.Номинал
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК НоминалНаценки,
		               |	Товары.Идентификатор КАК Идентификатор
		               |ИЗ
		               |	ТоварыСкидкиНоминал КАК Товары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ КрайнийНоминалВытесняемыхСкидокНаценок КАК КрайнийНоминалВытесняемыхСкидокНаценок
		               |		ПО Товары.Номенклатура = КрайнийНоминалВытесняемыхСкидокНаценок.Номенклатура
		               |			И Товары.НоменклатурнаяГруппа = КрайнийНоминалВытесняемыхСкидокНаценок.НоменклатурнаяГруппа
		               |			И (Товары.Номинал = КрайнийНоминалВытесняемыхСкидокНаценок.Минимум
		               |				ИЛИ Товары.Номинал = КрайнийНоминалВытесняемыхСкидокНаценок.Максимум)
		               |			И Товары.Суммовая = КрайнийНоминалВытесняемыхСкидокНаценок.Суммовая
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РавныйНоминалВытесняемыхСкидокНаценок КАК РавныйНоминалВытесняемыхСкидокНаценок
		               |		ПО Товары.Номенклатура = РавныйНоминалВытесняемыхСкидокНаценок.Номенклатура
		               |			И Товары.НоменклатурнаяГруппа = РавныйНоминалВытесняемыхСкидокНаценок.НоменклатурнаяГруппа
		               |			И Товары.Номинал = РавныйНоминалВытесняемыхСкидокНаценок.Номинал
		               |			И Товары.ТипСкидкиНаценки = РавныйНоминалВытесняемыхСкидокНаценок.ТипСкидкиНаценки
		               |			И Товары.Суммовая = РавныйНоминалВытесняемыхСкидокНаценок.Суммовая
		               |ГДЕ
		               |	(НЕ Товары.Вытесняющая
		               |			ИЛИ НЕ РавныйНоминалВытесняемыхСкидокНаценок.Номенклатура ЕСТЬ NULL
		               |				И НЕ КрайнийНоминалВытесняемыхСкидокНаценок.Номенклатура ЕСТЬ NULL)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Товары.Суммовая УБЫВ,
		               |	НоминалНаценки,
		               |	НоминалСкидки УБЫВ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТТовары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ТоварыСкидки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ТоварыСкидкиНоминал
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ РавныйНоминалВытесняемыхСкидокНаценок
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ КрайнийНоминалВытесняемыхСкидокНаценок";
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта.ДатаРождения) Тогда  
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОГДА ПараметрыТиповСкидокНаценок.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДнюРождения) ТОГДА ИСТИНА", "");
		КонецЕсли; 
		
		//РегистрыСведений.ПериодыДействия.ПериодДействияСгенерироватьУсловиеЗапроса(Запрос, "&ПериодыДействия", "ПараметрыТиповСкидокНаценок", ДокументОбъект.ДатаНачалаПериода);
		
		МассивРучныхСкидок = Новый Массив;
		Для Каждого Строка Из ТабличнаяЧастьСкидок Цикл
			
			Если НЕ (Строка.Ручная И Строка.Актуальность) Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.СуммаСкидки 				= 0;
			Строка.СуммаНаценки				= 0;
			Строка.СуммаДепозита 			= 0;
			Строка.СуммаСертификата 		= 0;
			Строка.СуммаСкидкиНаСертификат 	= 0;
			
			МассивРучныхСкидок.Добавить(Строка.СкидкаНаценка);
			
		КонецЦикла;
		
		// Очистка сумм перед расчетом
		Количество		= 0; 
		СуммаБезСкидок	= 0;
		
		Для Каждого Строка Из МассивТоваров Цикл
			
			Строка.СуммаБезСкидок 			= Строка.Количество*Строка.Цена;
			Строка.СуммаСкидки				= 0;
			Строка.СуммаНаценки				= 0;
			Строка.СуммаДепозита 			= 0;
			Строка.СуммаСертификата			= 0;
			Строка.СуммаСкидкиНаСертификат 	= 0;
			
		КонецЦикла;

		Количество 		= ТаблицаТоваров.Итог("Количество");
		СуммаБезСкидок 	= ТаблицаТоваров.Итог("СуммаБезСкидок");

		ТоварыСвернутая = ТаблицаТоваров.Скопировать();
		ТоварыСвернутая.Свернуть("Номенклатура, НоменклатурнаяГруппа");
		
		МассивНоменклатуры = Новый Массив; 
		Для Каждого СтрокаТаблицы Из ТоварыСвернутая Цикл
			МассивНоменклатуры.Добавить(СтрокаТаблицы.Номенклатура);
		КонецЦикла;
		
		ДатаДокумента 	= ?(ЗначениеЗаполнено(ДокументОбъект.ДатаНачалаПериода), ДокументОбъект.ДатаНачалаПериода, ТекущаяДата());
		ТекущаяДата 	= __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустуюДату(ДокументОбъект.ДатаНачалаПериода);
		
		// Установка параметров запроса
		Запрос.УстановитьПараметр("ДатаПериодаДействия"	, ТекущаяДата);						  
		Запрос.УстановитьПараметр("ВремяПериодаДействия", '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата)));						  
		Запрос.УстановитьПараметр("ДатаДокумента"		, ДатаДокумента);		
		Запрос.УстановитьПараметр("Количество"			, Количество);
		Запрос.УстановитьПараметр("Сумма"				, СуммаБезСкидок);
		Запрос.УстановитьПараметр("КатегорияКонтрагента", ДокументОбъект.КатегорияКонтрагента);
		Запрос.УстановитьПараметр("КатегорияДокумента"	, ДокументОбъект.КатегорияДокумента);
		Запрос.УстановитьПараметр("ВидДисконтнойКарты"	, ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты);
		Запрос.УстановитьПараметр("ДисконтнаяКарта"		, ДокументОбъект.ДисконтнаяКарта);
		Запрос.УстановитьПараметр("ВидСертификата"		, ?(ЗначениеЗаполнено(ДокументОбъект.Сертификат), ДокументОбъект.Сертификат.ВидСертификата, Справочники.ВидыСертификатов.ПустаяСсылка()));
		Запрос.УстановитьПараметр("Сертификат"			, ДокументОбъект.Сертификат);
		Запрос.УстановитьПараметр("СуммаПоСертификату"	, ?(ЗначениеЗаполнено(ДокументОбъект.Сертификат), ДокументОбъект.Сертификат.Сумма, 0));
		Запрос.УстановитьПараметр("ПроцентУточняемый"	, ?(ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта.ПроцентУточняемый), ДокументОбъект.ДисконтнаяКарта.ПроцентУточняемый, 0));
		Запрос.УстановитьПараметр("УсловиеСкидки"		, ?(ЗначениеЗаполнено(ДокументОбъект.УсловияСкидок), ДокументОбъект.УсловияСкидок, Справочники.УсловияСкидок.ПустаяСсылка()));
		Запрос.УстановитьПараметр("Номенклатура"		, МассивНоменклатуры);
		Запрос.УстановитьПараметр("Контрагент"			, ДокументОбъект.Контрагент);                
		Запрос.УстановитьПараметр("РучныеСкидки"		, МассивРучныхСкидок);
		Запрос.УстановитьПараметр("МаршрутДоставки"		, ?(ЗначениеЗаполнено(ДокументОбъект.МаршрутДоставки), ДокументОбъект.МаршрутДоставки, Справочники.МаршрутыДоставки.ПустаяСсылка()));
		Запрос.УстановитьПараметр("ГруппаПользователей"	, ПараметрыСеанса.ТекущаяГруппаПользователей);
		Запрос.УстановитьПараметр("Пользователь"		, ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("Номинал"				, ?(ЗначениеЗаполнено(Номинал), Номинал, 0));
		
		// Получение оборотов по ДК
		СуммаОборот = 0;
		Отбор = Новый Структура;
		Отбор.Вставить("ДисконтнаяКарта", ДокументОбъект.ДисконтнаяКарта);
		Обороты = РегистрыНакопления.ПродажиПоДисконтнымКартам.Обороты(, (ДатаДокумента - 1), Отбор);
		Если Обороты.Количество() Тогда
			СуммаОборот = Обороты.Итог("Сумма");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДисконтСумма", СуммаОборот);
		
		РезультатЗапроса 	= Запрос.Выполнить();
		ТаблицаСкидок 		= РезультатЗапроса.Выгрузить();
		МассивСкидок 		= Новый Массив;
		
		Для Каждого СтрокаТаблицы Из ТаблицаСкидок Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если день рождения клиента, указанный в его информационной карте
			// попадает в интервал скидки по случаю дня рождения, то добавим ему эту скидку
			Если ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта) Тогда
				ДлинаСуток = 24*60*60;
				Если СтрокаТаблицы.ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоДнюРождения Тогда
					ДатаРождения = ДокументОбъект.ДисконтнаяКарта.ДатаРождения;
					Если НЕ ЗначениеЗаполнено(ДатаРождения) Тогда
						Продолжить;
					КонецЕсли;
					ДеньРожденияТекущегоГода  	= ДобавитьМесяц((ДобавитьМесяц(НачалоДня(ДатаРождения), -(Год(ДатаРождения) - 1) * 12)) , ((Год(ТекущаяДата()) - 1) * 12));
					НачалоДиапазонаВхождения 	= НачалоДня(ДеньРожденияТекущегоГода - (СтрокаТаблицы.ТипСкидкиНаценки.ЗначениеУсловия*ДлинаСуток));
					КонецДиапазонаВхождения 	= КонецДня(ДеньРожденияТекущегоГода + (СтрокаТаблицы.ТипСкидкиНаценки.ЗначениеУсловияДополнительное*ДлинаСуток));
					// Должно быть так
					// НачалоДиапазонаВхождения <= ТекущаяДата() <= КонецДиапазонаВхождения
					Если (НачалоДня(ТекущаяДата()) < НачалоДиапазонаВхождения) ИЛИ (ТекущаяДата() > КонецДиапазонаВхождения) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Если количество определенного товара превышает количество по условию скидки, то добавим такую скидку
			Если СтрокаТаблицы.ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.ТипСкидкиНаценки.ЗначениеУсловия) Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура", СтрокаТаблицы.ТипСкидкиНаценки.ЗначениеУсловия);
					МассивСтрок = ТаблицаТоваров.НайтиСтроки(ПараметрыОтбора);
					// Подсчитаем количество товара в документе
					Если МассивСтрок.Количество() Тогда
						Кол = 0;
						Для Каждого СтрокаМассива Из МассивСтрок Цикл
							Кол = Кол + СтрокаМассива.Количество;
						КонецЦикла;
					КонецЕсли;
					Если Кол <= СтрокаТаблицы.ТипСкидкиНаценки.ЗначениеУсловияДополнительное Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивСкидок.Добавить(СтрокаТаблицы);
			
		КонецЦикла;
		
		ТипСкидкиСертификат 			= Неопределено;
		СуммаПогашения 					= 0; // сумма погашения общая
		СуммаПогашенияСертификатом 		= 0; // сумма погашаемая сертификатом
		СуммаПогашенияЭмитентом 		= 0; // сумма погашения сертификата эмитентом(по сути скидка на сертификат от эмитента)
		СуммаПогашенияСертификатомИтого = 0;
		СуммаПогашенияЭмитентомИтого 	= 0;
		
		// Вычисление общей суммы погашения сертификатом
		// если в настройках типов скидок по сертификату/виду сертификата не установлен флаг на определенный товар
		// то он не должен учавствовать в распределении суммы погашаемой сертификатом
		// т.е. долю погашения вычисляем не от всей суммы чека, а только по тем позициям, на которые действует сертификат
		Если ЗначениеЗаполнено(ДокументОбъект.Сертификат) Тогда
			МассивТоваровПогашаемыхСертификатом = Новый Массив;
			Для Каждого СтрокаМассиваСкидки Из МассивСкидок Цикл
				ТипСкидкиНаценки = СтрокаМассиваСкидки.ТипСкидкиНаценки;
				Если (ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуСертификата) ИЛИ
					(ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоСертификату) Тогда
					Если МассивТоваровПогашаемыхСертификатом.Найти(СтрокаМассиваСкидки.Номенклатура) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					МассивТоваровПогашаемыхСертификатом.Добавить(СтрокаМассиваСкидки.Номенклатура);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаМассиваТовары Из МассивТоваров Цикл
				Если МассивТоваровПогашаемыхСертификатом.Найти(СтрокаМассиваТовары.Номенклатура) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СуммаПогашения = СуммаПогашения + СтрокаМассиваТовары.СуммаБезСкидок;
			КонецЦикла;
		КонецЕсли;
		
		// Расчет скидки/наценки построчно
		Для Каждого Строка Из МассивСкидок Цикл
			
			Идентификатор 			= Строка.Идентификатор; 
			Номенклатура 			= Строка.Номенклатура;
			НоменклатурнаяГруппа 	= Строка.НоменклатурнаяГруппа;
			ТипСкидкиНаценки 		= Строка.ТипСкидкиНаценки;
			НоминалСкидки 			= Строка.НоминалСкидки;
			НоминалНаценки 			= Строка.НоминалНаценки;
			Суммовая 				= Строка.Суммовая;
			
			Если (НЕ ЗначениеЗаполнено(Номенклатура)) ИЛИ (Номенклатура = NULL) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из МассивТоваров Цикл
				
				Если Идентификатор <> Строка(СтрокаТаблицы.Идентификатор) Тогда
					Продолжить;
				КонецЕсли;
								
				СуммаСкидки				= 0;
				СуммаНаценки			= 0;
				СуммаДепозита 			= 0;
				СуммаСертификата 		= 0;
				СуммаСкидкиНаСертификат = 0;
				
				// Внесение денег на депозит
				Если (СтрокаТаблицы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Депозит) И (ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий) Тогда
					Продолжить;
				КонецЕсли;
				
				// Суммовая скидка/наценка/сертификат
				Если Суммовая Тогда
					
					// Расчет максимальной суммы скидки/наценки
					МаксимумСкидки = 0;
					Для Каждого СтрокаМассива Из МассивТоваров Цикл
						// Бескидочные и Безнадбавочные блюда не учавствуют в рассчете максимальной суммы скидки/наценки
						Если СтрокаМассива.Номенклатура.Безскидочный ИЛИ СтрокаМассива.Номенклатура.Безнадбавочный Тогда
							Продолжить;
						КонецЕсли;
						Сумма = СтрокаМассива.СуммаБезСкидок - 0.01;
						МаксимумСкидки = МаксимумСкидки + Сумма;
					КонецЦикла;
					
					// Депозиты
					Если ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты.Накопительная Тогда
						
						// Скидка
						Если ТипСкидкиНаценки.НеРаспространяетсяНаДепозитнуюКарту Тогда
							СтрокаТаблицы.СуммаСкидки 	= НоминалСкидки;
							СуммаСкидки 				= НоминалСкидки;
						// Депозит
						Иначе
							СтрокаТаблицы.СуммаДепозита = НоминалСкидки;
							СуммаДепозита 				= НоминалСкидки;
						КонецЕсли;
						
						// Наценка
						Если НоминалНаценки <> 0 Тогда
							
							Сумма						= - НоминалНаценки*((СтрокаТаблицы.СуммаБезСкидок - 0.01 - СтрокаТаблицы.СуммаСкидки + СтрокаТаблицы.СуммаНаценки)/МаксимумСкидки);
							СтароеЗначение				= СтрокаТаблицы.СуммаНаценки;
							СтрокаТаблицы.СуммаНаценки 	= СтрокаТаблицы.СуммаНаценки + Сумма;
							СуммаНаценки				= СуммаСкидки + СтрокаТаблицы.СуммаНаценки - СтароеЗначение;
							
						КонецЕсли;
						
					Иначе
						
						// Скидка/Погашение сертификата
						Если НоминалСкидки <> 0 Тогда
							
							// Погашение сертификата
							Если (ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуСертификата) ИЛИ
								(ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоСертификату) Тогда
								
								ТипСкидкиСертификат = ТипСкидкиНаценки;
								НоминалСертификата 	= НоминалСкидки;
								НоминалПогашения 	= ТипСкидкиНаценки.ЗначениеУсловия.НоминалПогашения/100; //% возмещаемый эмитентом
								
								// Полное погашение
								// Сумма счета не превышает номинал сертификата
								Если СуммаБезСкидок <= НоминалСертификата Тогда
									
									СуммаПогашенияСертификатом 				= СуммаБезСкидок;
									//СуммаПогашенияСертификатом 				= СуммаПогашения;
									СуммаПогашенияЭмитентом 				= СуммаПогашенияСертификатом*НоминалПогашения;
									СтрокаТаблицы.СуммаСертификата 			= СтрокаТаблицы.СуммаСертификата + СтрокаТаблицы.СуммаБезСкидок;
									СуммаСертификата 						= СуммаСертификата + СтрокаТаблицы.СуммаСертификата;
									СтрокаТаблицы.СуммаСкидкиНаСертификат 	= СтрокаТаблицы.СуммаСкидкиНаСертификат + (СтрокаТаблицы.СуммаБезСкидок*НоминалПогашения);
									СуммаСкидкиНаСертификат 				= СуммаСкидкиНаСертификат + СтрокаТаблицы.СуммаСкидкиНаСертификат;
									
								// Частичное погашение
								// Сумма счета превышает номинал сертификата
								Иначе
									
									СуммаПогашенияСертификатом 				= НоминалСертификата;
									СуммаПогашенияЭмитентом 				= СуммаПогашенияСертификатом*НоминалПогашения;
									СтрокаТаблицы.СуммаСертификата 			= СтрокаТаблицы.СуммаСертификата + (СтрокаТаблицы.СуммаБезСкидок/СуммаБезСкидок*НоминалСертификата);
									СуммаСертификата 						= СуммаСертификата + СтрокаТаблицы.СуммаСертификата;
									СтрокаТаблицы.СуммаСкидкиНаСертификат 	= СтрокаТаблицы.СуммаСкидкиНаСертификат + (СтрокаТаблицы.СуммаБезСкидок/СуммаБезСкидок*НоминалСертификата*НоминалПогашения);
									СуммаСкидкиНаСертификат 				= СуммаСкидкиНаСертификат + СтрокаТаблицы.СуммаСкидкиНаСертификат;
									
								КонецЕсли;
								
								СуммаПогашенияСертификатомИтого 			= СуммаПогашенияСертификатомИтого + СуммаСертификата;
								СуммаПогашенияЭмитентомИтого 				= СуммаПогашенияЭмитентомИтого + СуммаСкидкиНаСертификат;
								
							// Скидка	
							Иначе
								
								Сумма						= НоминалСкидки*((СтрокаТаблицы.СуммаБезСкидок - 0.01 - СтрокаТаблицы.СуммаСкидки - СтрокаТаблицы.СуммаСертификата)/МаксимумСкидки);
								СтароеЗначение				= СтрокаТаблицы.СуммаСкидки;
								СтрокаТаблицы.СуммаСкидки	= СтрокаТаблицы.СуммаСкидки + Сумма;
								СуммаСкидки					= СуммаСкидки + СтрокаТаблицы.СуммаСкидки - СтароеЗначение;
								
							КонецЕсли;
							
						// Наценка
						ИначеЕсли НоминалНаценки <> 0 Тогда
							
							Сумма						= - НоминалНаценки*((СтрокаТаблицы.СуммаБезСкидок - 0.01 - СтрокаТаблицы.СуммаСкидки + СтрокаТаблицы.СуммаНаценки - СтрокаТаблицы.СуммаСертификата)/МаксимумСкидки);
							СтароеЗначение				= СтрокаТаблицы.СуммаНаценки;
							СтрокаТаблицы.СуммаНаценки 	= СтрокаТаблицы.СуммаНаценки + Сумма;
							СуммаНаценки				= СуммаСкидки + СтрокаТаблицы.СуммаНаценки - СтароеЗначение;
							
						КонецЕсли;	
						
					КонецЕсли;
					
				// Процентная скидка/наценка/сертификат
				Иначе
					
					// Накопительная карта
					Если ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты.Накопительная Тогда
						
						Сумма = СтрокаТаблицы.СуммаБезСкидок;
						
						// Внесение денег на депозит
						Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Депозит Тогда
							
							// Автоматические скидки не действуют на депозит
							Если ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Тогда
								СуммаДепозита = 0; 
							Иначе
								СуммаДепозита = СтрокаТаблицы.СуммаБезСкидок;								
							КонецЕсли;
							
						// Сумма скидки на депозит
						Иначе
							
							Если ТипСкидкиНаценки.НеРаспространяетсяНаДепозитнуюКарту Тогда
								СуммаСкидки = (СтрокаТаблицы.СуммаБезСкидок*НоминалСкидки)/100;
							Иначе
								СуммаДепозита = (СтрокаТаблицы.СуммаБезСкидок*НоминалСкидки)/100;
								Если СуммаДепозита > Сумма Тогда
									СуммаДепозита = Сумма;
								КонецЕсли;
							КонецЕсли;
							
							// Наценка
							Если НоминалНаценки <> 0 Тогда
								
								СуммаНаценки = (СтрокаТаблицы.СуммаБезСкидок*(-НоминалНаценки))/100;
								
							КонецЕсли;

						КонецЕсли;
						
					// Карта не накопительная
					Иначе
						
						Сумма = СтрокаТаблицы.СуммаБезСкидок - 0.01 - СтрокаТаблицы.СуммаСкидки;
						
						// Внесение денег на депозит
						Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Депозит Тогда
							
							// Автоматические скидки не действуют на депозит
							Если ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Тогда
								СуммаДепозита = 0; 
							Иначе
								СуммаДепозита = СтрокаТаблицы.СуммаБезСкидок;								
							КонецЕсли;
						
						Иначе
							
							// Скидка/Погашение сертификата
							Если НоминалСкидки <> 0 Тогда
								
								// Погашение сертификата
								Если (ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуСертификата) ИЛИ
									(ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоСертификату) Тогда
									
									ТипСкидкиСертификат 	= ТипСкидкиНаценки;
									НоминалПогашения 		= ТипСкидкиНаценки.ЗначениеУсловия.НоминалПогашения/100; //% возмещаемый эмитентом
									ОграничениеПогашения 	= ТипСкидкиНаценки.ОграничениеСкидкиНаценки; 			//Σ, суммовое ограничение
									
									// Сумма счета не превышает долю оплаты сертификатом
									// Погашение доли оплаты согласно номинала
									Если СуммаБезСкидок*(НоминалСкидки/100) <= ОграничениеПогашения Тогда
										
										НоминалСертификата 			= НоминалСкидки/100;
										СуммаПогашенияСертификатом 	= СуммаБезСкидок*НоминалСертификата;
										СуммаПогашенияЭмитентом 	= СуммаПогашенияСертификатом*НоминалПогашения;
										СуммаСертификата 			= СтрокаТаблицы.СуммаБезСкидок*НоминалСертификата;
										СуммаСкидкиНаСертификат 	= СуммаСертификата*НоминалПогашения;
										
									// Сумма счета превышает долю оплаты сертификатом
									// Погашение доли оплаты согласно ограничения
									Иначе
										
										НоминалСертификата 			= ОграничениеПогашения;
										СуммаПогашенияСертификатом 	= ОграничениеПогашения;
										СуммаПогашенияЭмитентом 	= СуммаПогашенияСертификатом*НоминалПогашения;
										СуммаСертификата 			= СтрокаТаблицы.СуммаБезСкидок/СуммаБезСкидок*НоминалСертификата;
										СуммаСкидкиНаСертификат 	= СуммаСертификата*НоминалПогашения;
										
									КонецЕсли;
									
									СуммаПогашенияСертификатомИтого = СуммаПогашенияСертификатомИтого + СуммаСертификата;
									СуммаПогашенияЭмитентомИтого 	= СуммаПогашенияЭмитентомИтого + СуммаСкидкиНаСертификат;
									
								// Скидка
								Иначе
									
									СуммаСкидки = (СтрокаТаблицы.СуммаБезСкидок - СтрокаТаблицы.СуммаСертификата)*(НоминалСкидки/100);
									СуммаСкидки = ?(СуммаСкидки > Сумма, Сумма, СуммаСкидки);
									
								КонецЕсли;
								
							// Наценка
							ИначеЕсли НоминалНаценки <> 0 Тогда
								
								СуммаНаценки = (СтрокаТаблицы.СуммаБезСкидок - СтрокаТаблицы.СуммаСертификата)*(-НоминалНаценки/100);
								
							КонецЕсли;
							
						КонецЕсли;

					КонецЕсли;
					
					СтрокаТаблицы.СуммаСкидки				= СтрокаТаблицы.СуммаСкидки + СуммаСкидки;
					СтрокаТаблицы.СуммаНаценки				= СтрокаТаблицы.СуммаНаценки + СуммаНаценки;
					СтрокаТаблицы.СуммаДепозита				= СтрокаТаблицы.СуммаДепозита + СуммаДепозита;
					СтрокаТаблицы.СуммаСертификата 			= СтрокаТаблицы.СуммаСертификата + СуммаСертификата;
					СтрокаТаблицы.СуммаСкидкиНаСертификат 	= СтрокаТаблицы.СуммаСкидкиНаСертификат + СуммаСкидкиНаСертификат;
					
				КонецЕсли;
				
				// Добавляем скидку либо суммируем с существующей
				НоваяСтрока = ТабличнаяЧастьСкидок.Найти(ТипСкидкиНаценки, "СкидкаНаценка");
				
				Если НоваяСтрока = Неопределено Тогда
					
					НоваяСтрока 				= ТабличнаяЧастьСкидок.Добавить();
					НоваяСтрока.Автоматическая	= Истина;
					НоваяСтрока.Актуальность	= Истина;
					
					Если ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт
						ИЛИ ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
						ИЛИ ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойПрограмме Тогда
						НоваяСтрока.ДисконтнаяКарта	= Истина;
					ИначеЕсли ТипСкидкиНаценки.Условие = Перечисления.УсловияСкидкиНаценки.ПоГруппеСобытия Тогда
						НоваяСтрока.Событие			= Строка.ДокументСобытия;
						НоваяСтрока.ГруппаСобытия 	= ТипСкидкиНаценки.ЗначениеУсловия;
					КонецЕсли;
					
					НоваяСтрока.СкидкаНаценка = ТипСкидкиНаценки;
					
				КонецЕсли; 
				
				НоваяСтрока.СуммаСкидки				= НоваяСтрока.СуммаСкидки + СуммаСкидки;
				НоваяСтрока.СуммаНаценки			= НоваяСтрока.СуммаНаценки + СуммаНаценки;
				НоваяСтрока.СуммаДепозита			= НоваяСтрока.СуммаДепозита + СуммаДепозита; 
                НоваяСтрока.СуммаСертификата 		= НоваяСтрока.СуммаСертификата + СуммаСертификата;
				НоваяСтрока.СуммаСкидкиНаСертификат	= НоваяСтрока.СуммаСкидкиНаСертификат + СуммаСкидкиНаСертификат;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Исправление погрешностей округления при расчете
		// Корректировка показателей "СуммаСертификата" и "СуммаСкидкиНаСертификат"
		Если ЗначениеЗаполнено(ДокументОбъект.Сертификат) Тогда
			
			// Товары
			ПогрешностьСертификат = СуммаПогашенияСертификатом - СуммаПогашенияСертификатомИтого;
			ПогрешностьЭмитент = СуммаПогашенияЭмитентом - СуммаПогашенияЭмитентомИтого;
			
			Если ПогрешностьСертификат <> 0 Тогда
				
				// Перебор массива в обратном порядке
				Для Инд = 0 По (МассивТоваров.Количество()-1) Цикл
					
					Индекс = (МассивТоваров.Количество()-1) - Инд;
					
					СтрокаМасива = МассивТоваров.Получить(Индекс);
					
					Если (СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Блюдо) ИЛИ
						(СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект) ИЛИ
						(СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор) ИЛИ
						(СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар) ИЛИ
						(СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
						
						СтрокаМасива.СуммаСертификата = СтрокаМасива.СуммаСертификата + ПогрешностьСертификат;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПогрешностьЭмитент <> 0 Тогда
				
				// Перебор массива в обратном порядке
				Для Инд = 0 По (МассивТоваров.Количество()-1) Цикл
					
					Индекс = (МассивТоваров.Количество()-1) - Инд;
					
					СтрокаМасива = МассивТоваров.Получить(Индекс);
					
					Если (СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Блюдо) ИЛИ
						(СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект) ИЛИ
						(СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор) ИЛИ
						(СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар) ИЛИ
						(СтрокаМасива.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
						
						СтрокаМасива.СуммаСкидкиНаСертификат = СтрокаМасива.СуммаСкидкиНаСертификат + ПогрешностьЭмитент;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Скидки
			// К заказу не может быть применено более одного сертификата
			// Поэтому тип скидки по сертификату в ТЧ Скидки может быть только один
			Если ТипСкидкиСертификат <> Неопределено Тогда
				
				НайденнаяСтрока = ТабличнаяЧастьСкидок.Найти(ТипСкидкиСертификат, "СкидкаНаценка"); 
				
				Если НайденнаяСтрока <> Неопределено Тогда
					
					Если СуммаПогашенияСертификатом <> НайденнаяСтрока.СуммаСертификата Тогда
						НайденнаяСтрока.СуммаСертификата = СуммаПогашенияСертификатом;
					КонецЕсли;
					
					Если СуммаПогашенияЭмитентом <> НайденнаяСтрока.СуммаСкидкиНаСертификат Тогда
						НайденнаяСтрока.СуммаСкидкиНаСертификат = СуммаПогашенияЭмитентом;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧастьСкидок Цикл
			Если НЕ СтрокаТаблицы.Актуальность Тогда
				СтрокаТаблицы.СуммаСкидки				= 0;
				СтрокаТаблицы.СуммаНаценки				= 0;
				СтрокаТаблицы.СуммаДепозита 			= 0;
				СтрокаТаблицы.СуммаСертификата 			= 0;
				СтрокаТаблицы.СуммаСкидкиНаСертификат 	= 0;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из МассивТоваров Цикл
		
		Если ЕстьТаблицаСкидок Тогда
			СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезСкидок + СтрокаТаблицы.СуммаНаценки - СтрокаТаблицы.СуммаСкидки - СтрокаТаблицы.СуммаСертификата;
		Иначе
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество*СтрокаТаблицы.Цена;
		КонецЕсли;
		
		Если СтрокаТаблицы.Номенклатура.АкцизныйНалог Тогда
			СтрокаТаблицы.СуммаАкцизногоНалога = Ценообразование.РассчитатьСуммуАкцизногоНалога(СтрокаТаблицы.Сумма, Ценообразование.ПолучитьСтавкуАкцизногоНалога());
		КонецЕсли;
			
		СтрокаТаблицы.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаАкцизногоНалога, Истина, Истина, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

	КонецЦикла;
	
	МенеджерВременныхТаблиц = Неопределено;
	
КонецПроцедуры
//Костенюк Александр-Финиш 18.03.2013
