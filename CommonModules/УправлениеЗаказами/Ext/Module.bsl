
Функция СостоянияОткрытыхДокументов(ВключаяПроизводствоИПечать = Истина, Массив = Неопределено) Экспорт
	
	Если (Массив = Неопределено) Тогда
		Результат = Новый Массив;
	Иначе
		Результат = Массив;
	КонецЕсли;
	
	Результат.Добавить(Перечисления.СостоянияДокументов.Открытые);
	Если ВключаяПроизводствоИПечать Тогда
		Результат.Добавить(Перечисления.СостоянияДокументов.ВыполняемыеЧастично);
		Результат.Добавить(Перечисления.СостоянияДокументов.ВыполняемыеПолностью);
		Результат.Добавить(Перечисления.СостоянияДокументов.ВыполненныеЧастично);
		Результат.Добавить(Перечисления.СостоянияДокументов.ВыполненныеПолностью);
		Результат.Добавить(Перечисления.СостоянияДокументов.Распределенные);
		Результат.Добавить(Перечисления.СостоянияДокументов.Распечатанные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СостоянияОткрытыхДокументов()

Функция СостоянияВыполняемыхДокументов(ВключаяПолностьюВыполняемые = Истина, Массив = Неопределено) Экспорт
	
	Если (Массив = Неопределено) Тогда
		Результат = Новый Массив;
	Иначе
		Результат = Массив;
	КонецЕсли;
	
	Результат.Добавить(Перечисления.СостоянияДокументов.ВыполняемыеЧастично);
	Если ВключаяПолностьюВыполняемые Тогда
		Результат.Добавить(Перечисления.СостоянияДокументов.ВыполняемыеПолностью);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СостоянияВыполняемыхДокументов()

Функция СостоянияВыполненныхДокументов(ВключаяПолностьюВыполненные = Истина, Массив = Неопределено) Экспорт
	
	Если (Массив = Неопределено) Тогда
		Результат = Новый Массив;
	Иначе
		Результат = Массив;
	КонецЕсли;
	
	Результат.Добавить(Перечисления.СостоянияДокументов.ВыполненныеЧастично);
	Если ВключаяПолностьюВыполненные Тогда
		Результат.Добавить(Перечисления.СостоянияДокументов.ВыполненныеПолностью);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СостоянияВыполняемыхДокументов()

Функция СостоянияЗакрытыхДокументов(ВключаяУдаленные = Ложь, Массив = Неопределено) Экспорт
	
	
	Если (Массив = Неопределено) Тогда
		Результат = Новый Массив;
	Иначе
		Результат = Массив;
	КонецЕсли;
	
	Результат.Добавить(Перечисления.СостоянияДокументов.Закрытые);
	Если ВключаяУдаленные Тогда
		Результат.Добавить(Перечисления.СостоянияДокументов.Удаленные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СостоянияЗакрытыхДокументов()

Функция ПроверитьСостояниеДокумента(Состояние, Массив) Экспорт
	
	// Проверка.
	Если (Состояние = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяемое состояние.
	Если (ТипЗнч(Состояние) = Тип("ПеречислениеСсылка.СостоянияДокументов")) Тогда
		ПроверяемоеСостояние = Состояние;
	Иначе
		ПроверяемоеСостояние = Состояние.Состояние;
	КонецЕсли;
	
	Если (ТипЗнч(Массив) = Тип("Массив")) Тогда
		Возврат (Не Массив.Найти(ПроверяемоеСостояние) = Неопределено);
	КонецЕсли;
	
	Возврат (ПроверяемоеСостояние = Массив);
	
КонецФункции // ПроверитьСостояниеДокумента()

Функция ПолучитьСостояниеДокумента(Документ, РежимЗаписи = Неопределено) Экспорт
	
	Результат = Перечисления.СостоянияДокументов.Открытые;
	// Закрытые.
	Попытка Если ((Документ.Проведен = Истина) Или (РежимЗаписи = РежимЗаписиДокумента.Проведение)) И (Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда Возврат Перечисления.СостоянияДокументов.Закрытые; КонецЕсли; Исключение КонецПопытки;
	// Удаленные.
	Попытка Если (Документ.ПометкаУдаления = Истина) Тогда Возврат Перечисления.СостоянияДокументов.Удаленные; КонецЕсли; Исключение КонецПопытки;
	// Распечатанные.
	Попытка Если (Документ.Распечатан = Истина) Тогда Возврат Перечисления.СостоянияДокументов.Распечатанные; КонецЕсли; Исключение КонецПопытки;
	// Выполняемые (частично).
	Попытка Если (Документ.Ожидает = Истина) И (Документ.Выполняется = Истина) Тогда Возврат Перечисления.СостоянияДокументов.ВыполняемыеЧастично; КонецЕсли; Исключение КонецПопытки;
	// Выполняемые (полностью).
	Попытка Если (Документ.Ожидает = Ложь) И (Документ.Выполняется = Истина) Тогда Возврат Перечисления.СостоянияДокументов.ВыполняемыеПолностью; КонецЕсли; Исключение КонецПопытки;
	// Выполненные (частично).
	Попытка Если (Документ.Ожидает = Истина) И (Документ.Выполняется = Ложь) Тогда Возврат Перечисления.СостоянияДокументов.ВыполненныеЧастично; КонецЕсли; Исключение КонецПопытки;
	// Выполненные (полностью).
	Попытка Если (Документ.Выполненн = Истина) Тогда Возврат Перечисления.СостоянияДокументов.ВыполненныеПолностью; КонецЕсли; Исключение КонецПопытки;
	// Открытые.
	Возврат Перечисления.СостоянияДокументов.Открытые;
	
КонецФункции // ПолучитьСостояниеДокумента()

Функция ПолучитьЗакрепленностьДокумента(Документ) Экспорт
	
	Возврат Документ.Закреплен;
	
КонецФункции // ПолучитьЗакрепленностьДокумента()

Функция ПроверитьКорелляциюЗначений(Документ, ИмяТабличнойЧасти, РеквизитКлюч, РеквизитыПроверки, ОписаниПроверки = Неопределено) Экспорт
	
	ТаблицаПроверяемыхПозиций = Документ[ИмяТабличнойЧасти].Выгрузить( , РеквизитКлюч + "," + РеквизитыПроверки);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗначениеСтепениСортировки() Экспорт
	
	Возврат 1000000000000000000;//10 в 18 степени.	
	
КонецФункции

Функция ПолучитьЗначениеСортировкиПоДате(Дата) Экспорт
	
	Возврат ОбщегоНазначения.ПолучитьЧисло(Дата) * ПолучитьЗначениеСтепениСортировки(); 
	
КонецФункции

Функция ПолучитьЗначениеСортировкиПоСортировкам(Предидущая = Неопределено, Следующая = Неопределено, Смещение = 0) Экспорт
	
	Если (Предидущая = Неопределено) И (Следующая = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если      (Предидущая = Неопределено) Тогда
		Возврат Следующая - ПолучитьЗначениеСвободыСортировки(Следующая);
	ИначеЕсли (Следующая = Неопределено) Тогда
		Возврат Предидущая + ПолучитьЗначениеСвободыСортировки(Предидущая);
	Иначе
		Если (Предидущая <= Следующая) Тогда
			Возврат (Предидущая + Следующая) / 2;
		Иначе
			Если (Смещение < 0) Тогда
				Возврат Следующая - ПолучитьЗначениеСвободыСортировки(Следующая);
			Иначе
				Возврат Предидущая + ПолучитьЗначениеСвободыСортировки(Предидущая);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеСвободыСортировки(Сортировка)
	
	ЗначениеСвободы = ПолучитьЗначениеСтепениСортировки(); 
	
	Пока (ЗначениеСвободы > 1) Цикл
		ПроверочноеЗначение = Сортировка / ЗначениеСвободы;
		Если (Цел(ПроверочноеЗначение) = ПроверочноеЗначение) Тогда
			ЗначениеСвободы = ЗначениеСвободы / 10;
			Прервать;
		Иначе	
			ЗначениеСвободы = ЗначениеСвободы / 10;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеСвободы;
	
КонецФункции

// Заполняет краткий состав документа по требуемому документу.
//
// Параметры:
//
// Возвращаемое значение:
//	Строка. Сформированное значение краткий состава.
//
Функция ЗаполнитьКраткийСоставДокумента(Модуль, ТЧДокумента, ДополнительнаяТЧДокумента = Неопределено, ИмяРеквизита = "НоменклатурнаяГруппа") Экспорт

	Если (ТЧДокумента = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КраткийСоставДокумента = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Строка"));
	ДлинаКраткогоСостава = Метаданные.РегистрыСведений.СостояниеДокументов.Реквизиты.КраткийСоставДокумента.Тип.КвалификаторыСтроки.Длина;
	Если Не Булево(ДлинаКраткогоСостава) Тогда
		ДлинаКраткогоСостава = 2147483648;
	КонецЕсли;
	
	Если (Модуль = Перечисления.МодулиИПодсистемы.Ресторан) Или (Модуль = Перечисления.МодулиИПодсистемы.Доставка) Тогда
		
		Если (ТипЗнч(ТЧДокумента) = Тип("Массив")) Тогда
			
			МассивНоменклатурныхГрупп = ТЧДокумента;
			
		Иначе
			
			МассивНоменклатурныхГрупп = Новый Массив;
			
			Для Каждого СтрокаТЧ Из ТЧДокумента Цикл
				
				НоменклатурнаяГруппа = СтрокаТЧ[ИмяРеквизита];
				
				Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
					Продолжить;
				КонецЕсли;
				
				Если (МассивНоменклатурныхГрупп.Найти(НоменклатурнаяГруппа) = Неопределено) Тогда
					МассивНоменклатурныхГрупп.Добавить(НоменклатурнаяГруппа);
				КонецЕсли;
			
			КонецЦикла;
			
			Если (Не ДополнительнаяТЧДокумента = Неопределено) Тогда

				Для Каждого СтрокаТЧ Из ДополнительнаяТЧДокумента Цикл
					
					НоменклатурнаяГруппа = ДополнительнаяТЧДокумента[ИмяРеквизита];
					
					Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
						Продолжить;
					КонецЕсли;
					
					Если (МассивНоменклатурныхГрупп.Найти(НоменклатурнаяГруппа) = Неопределено) Тогда
						МассивНоменклатурныхГрупп.Добавить(НоменклатурнаяГруппа);
					КонецЕсли;
				
				КонецЦикла;
			 
			КонецЕсли;
		
		КонецЕсли;
		
		Если Булево(МассивНоменклатурныхГрупп.Количество()) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			                      |	НоменклатурныеГруппы.ПроизводственнаяГруппа.Представление КАК ПроизводственнаяГруппа
			                      |ИЗ
			                      |	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
			                      |ГДЕ
			                      |	(НоменклатурныеГруппы.Ссылка В (&НоменклатурныеГруппы)
			                      |			ИЛИ НоменклатурныеГруппы.ПроизводственнаяГруппа В (&НоменклатурныеГруппы))
			                      |	И НоменклатурныеГруппы.ПроизводственнаяГруппа.Актуальность");
			Запрос.УстановитьПараметр("НоменклатурныеГруппы", МассивНоменклатурныхГрупп);					  
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ПроизводственнаяГруппа = Выборка.ПроизводственнаяГруппа;
				
				Если Не Булево(Найти(КраткийСоставДокумента, ПроизводственнаяГруппа)) Тогда
					
					Если (СтрДлина(КраткийСоставДокумента + ПроизводственнаяГруппа) - 2 < ДлинаКраткогоСостава) Тогда
						КраткийСоставДокумента = КраткийСоставДокумента + ", " + ПроизводственнаяГруппа;
					Иначе
						КраткийСоставДокумента = КраткийСоставДокумента + "…";
						Прервать;
					КонецЕсли;
					
				КонецЕсли; 
			
			КонецЦикла;
			
			КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3);
		
		КонецЕсли;
	
	КонецЕсли; 
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

Функция ПолучитьМаршрутДоставки(Ресторан = Неопределено, Улица, Дом) Экспорт
	
	// Проверка.
	Если (Не Ресторан = Неопределено) И Ресторан.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	АдресаМаршрутовДоставки.Ресторан КАК Ресторан,
	                      |	АдресаМаршрутовДоставки.МаршрутДоставки КАК МаршрутДоставки
	                      |ИЗ
	                      |	РегистрСведений.АдресаМаршрутовДоставки КАК АдресаМаршрутовДоставки
	                      |ГДЕ
	                      |	АдресаМаршрутовДоставки.Ресторан = &Ресторан
	                      |	И АдресаМаршрутовДоставки.Улица = &Улица
	                      |	И &Дом МЕЖДУ АдресаМаршрутовДоставки.НачальныйДом И АдресаМаршрутовДоставки.КонечныйДом
	                      |	И АдресаМаршрутовДоставки.Ресторан.Актуальность
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ресторан,
	                      |	МаршрутДоставки");
	Если (Ресторан = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АдресаМаршрутовДоставки.Ресторан = &Ресторан", "ИСТИНА");	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АдресаМаршрутовДоставки.Ресторан.Актуальность", "ИСТИНА");	
	КонецЕсли;
	Запрос.УстановитьПараметр("Ресторан", Ресторан);
	Запрос.УстановитьПараметр("Улица", Улица);
	Запрос.УстановитьПараметр("Дом", УправлениеКонтактнойИнформацией.ПолучитьПредставлениеДомаВнутреннее(Дом));
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выборка данных.
	Если Выборка.Следующий() Тогда
		Если (Ресторан = Неопределено) Тогда
			Ресторан = Выборка.Ресторан;
		КонецЕсли;
		МаршрутДоставки = Выборка.МаршрутДоставки;
	КонецЕсли;
	
	Возврат МаршрутДоставки;
	
КонецФункции // ПолучитьМаршрутДоставки()

Функция КонтрагентВЧерномСписке(Контрагент) Экспорт
	
	Возврат (РегистрыСведений.ЧерныйСписокКонтрагентов.ПолучитьПоследнее( , Новый Структура("Контрагент", Контрагент.Ссылка)).Актуальность = Истина);
	
КонецФункции // КонтрагентВЧерномСписке()


Функция ПолучитьНакладныеНаДоставку(Документ, Проведенные = Истина) Экспорт
	
	// Запрос.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка КАК Документ,
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование,
	                      |	НакладнаяНаДоставкуДокументыОснования.Ресторан,
	                      |	НакладнаяНаДоставкуДокументыОснования.Сотрудник,
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка.ДатаНачалаПериода КАК ДатаНачалаПериода,
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	                      |	НакладнаяНаДоставкуДокументыОснования.Ссылка.Распечатан КАК Распечатан
	                      |ИЗ
	                      |	Документ.НакладнаяНаДоставку.ДокументыОснования КАК НакладнаяНаДоставкуДокументыОснования
	                      |ГДЕ
	                      |	НакладнаяНаДоставкуДокументыОснования.ДокументОснование = &ДокументОснование
	                      |	И НакладнаяНаДоставкуДокументыОснования.Проведен = &Проведенные
	                      |	И (НЕ НакладнаяНаДоставкуДокументыОснования.ПометкаУдаления)");
	Если (Проведенные = Неопределено) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НакладнаяНаДоставкуДокументыОснования.Проведен = &Проведенные", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументОснование", Документ.Ссылка);
	Запрос.УстановитьПараметр("Проведенные", Проведенные);
	
	// Результат.
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНакладныеНаДоставку()
