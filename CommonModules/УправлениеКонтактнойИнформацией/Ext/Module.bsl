
// Процедура считывает контактную информацию и возвращает таблицу значений.
//
// Параметры:
//  Ссылка. Объект, по которому необходимо прочитать контактную информацию.
//
Функция ПрочитатьНаборЗаписейКонтактнойИнформации(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.КонтактнаяИнформация ГДЕ Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Ссылка.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПрочитатьНаборЗаписейКонтактнойИнформации()

Функция ВернутьЗапросПоКонтактнойИнформации(Ссылка)
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Вид КАК Вид,
	|	ВложенныйЗапрос.Тип КАК Тип,
	|	ВложенныйЗапрос.Объект КАК Объект,
	|	МАКСИМУМ(ВложенныйЗапрос.Поиск) КАК Поиск,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле1) КАК Поле1,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле2) КАК Поле2,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле3) КАК Поле3,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле4) КАК Поле4,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле5) КАК Поле5,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле6) КАК Поле6,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле7) КАК Поле7,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле8) КАК Поле8,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле9) КАК Поле9,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле10) КАК Поле10,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле11) КАК Поле11,
	|	МАКСИМУМ(ВложенныйЗапрос.Представление) КАК Представление,
	|	МАКСИМУМ(ВложенныйЗапрос.Комментарий) КАК Комментарий,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗначениеПоУмолчанию) КАК ЗначениеПоУмолчанию
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Объект КАК Объект,
	|		ВидыКонтактнойИнформации.Тип КАК Тип,
	|		ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|		"""" КАК Представление,
	|		"""" КАК Поиск,
	|		"""" КАК Поле1,
	|		"""" КАК Поле2,
	|		"""" КАК Поле3,
	|		"""" КАК Поле4,
	|		"""" КАК Поле5,
	|		"""" КАК Поле6,
	|		"""" КАК Поле7,
	|		"""" КАК Поле8,
	|		"""" КАК Поле9,
	|		"""" КАК Поле10,
	|		"""" КАК Поле11,
	|		"""" КАК Комментарий,
	|		ЛОЖЬ КАК ЗначениеПоУмолчанию
	|	ИЗ
	|		Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|	ГДЕ
	|		(НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|		И ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РегистрСведенийКонтактнаяИнформация.Объект,
	|		РегистрСведенийКонтактнаяИнформация.Тип,
	|		РегистрСведенийКонтактнаяИнформация.Вид,
	|		ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Представление КАК СТРОКА(1000)),
	|		РегистрСведенийКонтактнаяИнформация.Поиск,
	|		РегистрСведенийКонтактнаяИнформация.Поле1,
	|		РегистрСведенийКонтактнаяИнформация.Поле2,
	|		РегистрСведенийКонтактнаяИнформация.Поле3,
	|		РегистрСведенийКонтактнаяИнформация.Поле4,
	|		РегистрСведенийКонтактнаяИнформация.Поле5,
	|		РегистрСведенийКонтактнаяИнформация.Поле6,
	|		РегистрСведенийКонтактнаяИнформация.Поле7,
	|		РегистрСведенийКонтактнаяИнформация.Поле8,
	|		РегистрСведенийКонтактнаяИнформация.Поле9,
	|		РегистрСведенийКонтактнаяИнформация.Поле10,
	|		РегистрСведенийКонтактнаяИнформация.Поле11,
	|		ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Комментарий КАК СТРОКА(1000)),
	|		РегистрСведенийКонтактнаяИнформация.ЗначениеПоУмолчанию
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК РегистрСведенийКонтактнаяИнформация
	|	ГДЕ
	|		РегистрСведенийКонтактнаяИнформация.Объект = &Объект) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Вид,
	|	ВложенныйЗапрос.Тип,
	|	ВложенныйЗапрос.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление УБЫВ,
	|	ВложенныйЗапрос.Тип.Порядок,
	|	Вид";
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ВидОбъектаКИ(Ссылка));
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	Возврат Запрос;
	
КонецФункции

// Процедура считывает контактную информацию в набор записей регистра сведений.
//
// Параметры:
//  НаборЗаписей. Набор записей регистра сведений;
//  Ссылка. Объект, по которому необходимо заполнить контактную информацию;
//  СчитыватьНаборЗаписей. Признак считывания набора записей.
//
Процедура ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка) Экспорт
	
	Если (Не ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация")) Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли; 
	
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка.Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	
	Запрос = ВернутьЗапросПоКонтактнойИнформации(Ссылка);
	
	ТабЗн = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из ТабЗн Цикл
		Стр.Представление = СокрП(Стр.Представление);
		Стр.Комментарий   = СокрП(Стр.Комментарий);
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТабЗн);
	
КонецПроцедуры // ПрочитатьКонтактнуюИнформацию()

// Процедура записывает контактную информацию из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей. Набор записей регистра сведений;
//  Ссылка. Объект, по которому необходимо записать контактную информацию;
//  Отказ - Булево. Истина, в случае неудачной попытки записи.
//
Процедура ЗаписатьКонтактнуюИнформацию(НаборЗаписей, Ссылка, Отказ, Заголовок = Неопределено) Экспорт
	
	Если Не Отказ Тогда
		
		ПервичныйНабор = НаборЗаписей.Выгрузить();
		
		КолвоЭлементовКоллекции = НаборЗаписей.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
			ЭлементКоллекции = НаборЗаписей[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
			Если Не ЗначениеЗаполнено(ЭлементКоллекции.Представление) Тогда 
				НаборЗаписей.Удалить(ЭлементКоллекции); 
			КонецЕсли; 
			ЭлементКоллекции.Объект = Ссылка;
		КонецЦикла;
		
		НаборЗаписей.Отбор.Объект.Значение      = Ссылка.Ссылка;
		НаборЗаписей.Отбор.Объект.Использование = Истина;
		
		Если Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ПрочитатьНаборЗаписейКонтактнойИнформации(Ссылка), НаборЗаписей.Выгрузить()) Тогда
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Отказ, Заголовок, , НаборЗаписей, Ссылка);
				// Возвратим обратно данные набора.
				НаборЗаписей.Загрузить(ПервичныйНабор);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка);
			
		Иначе
			НаборЗаписей.Загрузить(ПервичныйНабор);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаписатьКонтактнуюИнформацию()


// Функция возвращает строку для поиска данных в запросе с использованием условия сравнениея.
//
// Параметры:
//  Строка. Искомая строка.
//
// Возвращаемое значение:
//  Строка. Строка для поиска в запросе.
//
Функция ПолучитьСтрокуДляПоискаПоСравнению(Строка) Экспорт
	
	Приведенная = ОбщегоНазначения.СокрЛСП(Строка);
	
	Поз = Найти(Приведенная, " ");
	Если Булево(Поз) Тогда
		Возврат Лев(Приведенная, Поз - 1);
	КонецЕсли;
	
	Возврат Приведенная;

КонецФункции // ПолучитьСтрокуДляПоискаПоСравнению()

// Функция возвращает строку для поиска данных в запросе с использованием условия "ПОДОБНО".
//
// Параметры:
//  Строка. Искомая строка.
//
// Возвращаемое значение:
//  Строка. Строка для поиска в запросе.
//
Функция ПолучитьСтрокуДляПоискаПоПодобию(Строка) Экспорт
	
	Возврат СтрЗаменить(ОбщегоНазначения.СокрЛСП(Строка), " ", "% %");

КонецФункции // ПолучитьСтрокуДляПоискаПоПодобию()


// Функция проверяет заполнена ли заись контакнтной информации или нет.
//
// Параметры:
//  Запись. Запись контактной информации.
//
// Возвращаемое значение:
//  Булево. Истина, если контактной информации пуста.
//
Функция ПустаяКонтактнаяИнформация(Запись) Экспорт
	
	Возврат ПустаяСтрока(Запись.Представление);
	
КонецФункции // ПустаяКонтактнаяИнформация()


// Функция формирует структуру записи регистра.
//
// Параметры:
//  Запись - РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
// Возвращаемое значение:
//  Структура. Структура содержащая значения записи контактной информации.
//
Функция ПолучитьСтруктуруЗаписиРегистра(Запись) Экспорт

	Если (ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация"))
	 Или (ТипЗнч(Запись) = Тип("РегистрСведенийВыборка.КонтактнаяИнформация")) 
	 Или (ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация")) 
	 Или (ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформацияРеализацииТоваровУслуг"))
	 Или (ТипЗнч(Запись) = Тип("РегистрСведенийВыборка.КонтактнаяИнформацияРеализацииТоваровУслуг")) 
	 Или (ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформацияРеализацииТоваровУслуг")) Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект"       , Запись.Объект);
		СтруктураЗаписи.Вставить("Тип"          , Запись.Тип);
		СтруктураЗаписи.Вставить("Вид"          , Запись.Вид);
		СтруктураЗаписи.Вставить("Представление", Запись.Представление);
		СтруктураЗаписи.Вставить("Комментарий"  , Запись.Комментарий);
		СтруктураЗаписи.Вставить("Поиск"        , Запись.Поиск);
		Для Индекс = 1 По 11 Цикл
			СтруктураЗаписи.Вставить("Поле" + Строка(Индекс), Запись["Поле" + Строка(Индекс)]);
		КонецЦикла;
		Возврат СтруктураЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции // ПолучитьСтруктуруЗаписиРегистра()

// Процедура заполняет запись регистра по структуре.
//
// Параметры:
//  Запись - РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений;
//	Структура - Структура. Структура со значениями которые нужно заполнить в записи контактной информации.
//
Процедура ЗаполнитьЗаписьРегистраПоСтруктуре(Запись, Структура) Экспорт

	Если (ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация"))
	 Или (ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация")) 
	 Или (ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформацияРеализацииТоваровУслуг"))
	 Или (ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформацияРеализацииТоваровУслуг")) Тогда
	 	Если (ТипЗнч(Структура) = Тип("Структура")) Тогда
			Структура.Свойство("Объект"       , Запись.Объект);
			Структура.Свойство("Тип"          , Запись.Тип);
			Структура.Свойство("Вид"          , Запись.Вид);
			Структура.Свойство("Представление", Запись.Представление);
			Структура.Свойство("Комментарий"  , Запись.Комментарий);
			Структура.Свойство("Поиск"        , Запись.Поиск);
			Для Индекс = 1 По 11 Цикл
				Структура.Свойство("Поле" + Строка(Индекс), Запись["Поле" + Строка(Индекс)]);
			КонецЦикла;
		Иначе
		 	Запись.Объект 		 = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Запись.Объект));
		 	Запись.Тип 			 = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Запись.Тип));
		 	Запись.Вид 			 = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Запись.Вид));
		 	Запись.Представление = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Запись.Представление));
		 	Запись.Комментарий 	 = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Запись.Комментарий));
		 	Запись.Поиск 	     = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Запись.Поиск));
			Для Индекс = 1 По 11 Цикл
				Запись["Поле" + Строка(Индекс)] = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Запись["Поле" + Строка(Индекс)]));
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьЗаписьРегистраПоСтруктуре()

// Функция формирует пустую структуру записи соответствующей адресу контактной информации.
//
// Возвращаемое значение:
//  Структура. Структура пустой записи контактной информации соответствующего вида.
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат Новый Структура("Тип,Представление,Поле1,Поле2,Поле3,Поле4,Поле5,Поле6,Поле7,Поле8,Поле9,Поле10,Поле11,Комментарий,Объект,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес,"","",Справочники.КлассификаторГородов.ПустаяСсылка(),Справочники.КлассификаторГородов.ПустаяСсылка(),Справочники.КлассификаторГородов.ПустаяСсылка(),Справочники.КлассификаторГородов.ПустаяСсылка(),Справочники.КлассификаторУлиц.ПустаяСсылка(),"","","","","");

КонецФункции // ПолучитьПустуюСтруктуруАдреса()

// Функция формирует пустую структуру записи соответствующей телефону контактной информации.
//
// Возвращаемое значение:
//  Структура. Структура пустой записи контактной информации соответствующего вида.
//
Функция ПолучитьПустуюСтруктуруТелефона() Экспорт
	
	Возврат Новый Структура("Тип,Представление,Поле1,Поле2,Поле3,Поле4,Поле5,Поле6,Поле7,Поле8,Поле9,Поле10,Поле11,Комментарий,Объект,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон,"","","","","","","","","","","","");

КонецФункции // ПолучитьПустуюСтруктуруТелефона()


// Функция проверяет строку на наличие значимых символов и если таковые имеются возвращает переданную ей дополнительную строку.
//
// Параметры:
//  ВыбСтрока – Строка. Строка для проверки;
//  ПризнакЗапятой – Булево, Строка. Дополнительная строка, возаращаемая в случае если проверяемая строка не пустая.
//	  Если в качестве дополнительной строки передана значение типа Булево Истина, дополнительная строка принимается равной 
//	  запятой и одному пробелу, а если Ложь то только пробелу.
//
// Возвращаемое значение:
//  Строка. Дополнительная строка или пустое значение строки.
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой = Истина) Экспорт
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Если (ТипЗнч(ПризнакЗапятой) = Тип("Булево")) тогда
			Если ПризнакЗапятой Тогда
				Возврат ", ";
			Иначе
				Возврат " ";
			КонецЕсли;
		Иначе
			Возврат Строка(ПризнакЗапятой);
		КонецЕсли;
	КонецЕсли; 
	
КонецФункции // ПроверкаПустойСтроки()

// Функция возвращает только цифры из произвольной строки.
//
// Параметры:
//  ПроизвольнаяСтрока – Строка. Произвольная строка.
//
// Возвращаемое значение:
//  Строка. Строка содержащая только цифры одержащиеся исходной произвольной строки;
//	КоличествоЦифр - Число. Длина возвращаемой строки.
//
Функция ПолучитьТолькоЦифры(ПроизвольнаяСтрока, КоличествоЦифр = Неопределено) Экспорт
	
	ТолькоЦифры = "";
	Для Индекс = 1 По СтрДлина(ПроизвольнаяСтрока) Цикл
		Если Булево(СтрЧислоВхождений("1234567890", Сред(ПроизвольнаяСтрока, Индекс, 1))) Тогда
			ТолькоЦифры = ТолькоЦифры + Сред(ПроизвольнаяСтрока, Индекс, 1);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоЦифр = СтрДлина(ТолькоЦифры);
	Возврат ТолькоЦифры;
	
КонецФункции // ПолучитьТолькоЦифры()

// Функция возвращает первое вхождение любого символа из переданного набора символов в анализируемой строке.
//
// Параметры:
//  Строка – Строка. Анализируемая строка;
//  Символы – Строка. Набор символов.
//
// Возвращаемое значение:
//  Число. Первое вхождение.
//
Функция ПолучитьПервоеВхождениеИзНабораСимволов(Строка, Символы) Экспорт
	
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Если Булево(СтрЧислоВхождений(Символы, Сред(Строка, Индекс, 1))) Тогда
			Возврат Индекс;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции // ПолучитьПервоеВхождение()


// Функция определяет вид объекта контактной информации.
//
// Параметры:
//  ОбъектСсылка. Объект для которого определяется вид контактной информации.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыОбъектовКонтактнойИнформации. Вид соответствующий переданному параметру.
//
Функция ВидОбъектаКИ(ОбъектСсылка) Экспорт

	Если (ОбъектСсылка = Неопределено) Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	Иначе
		Попытка
			Возврат Перечисления.ВидыОбъектовКонтактнойИнформации[ОбъектСсылка.Метаданные().Имя];
		Исключение
			Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
		КонецПопытки;
	КонецЕсли; 
	
КонецФункции // ВидОбъектаКИ()


// Функция приводит код страны телефонного номера к единому формату.
//
// Параметры:
//  КодСтраныНомерТЛФ – Строка. Код страны телефонного номера, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный код страны телефонного номера.
//
Функция ПривестиКодСтраныНомераТелефонаКШаблону(КодСтраныНомерТЛФ) Экспорт
	
	Результат = ПолучитьТолькоЦифры(КодСтраныНомерТЛФ);
	Пока (Лев(Результат, 1) = "0") Цикл
		Результат = Сред(Результат, 2);
	КонецЦикла;
	Результат = Лев(Результат, 3);

	Возврат ПроверкаПустойСтроки(Результат, "+") + Результат;
	
КонецФункции // ПривестиКодСтраныНомераТелефонаКШаблону()

// Функция приводит код города телефонного номера к единому формату.
//
// Параметры:
//  КодГородаНомерТЛФ – Строка. Код города телефонного номера, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный код города телефонного номера.
//
Функция ПривестиКодГородаНомераТелефонаКШаблону(КодГородаНомерТЛФ) Экспорт
	
	Результат = ПолучитьТолькоЦифры(КодГородаНомерТЛФ);
	Пока (Лев(Результат, 1) = "0") Цикл
		Результат = Сред(Результат, 2);
	КонецЦикла;
	Результат = Лев(Результат, 4);

	Возврат Результат;
	
КонецФункции // ПривестиКодГородаНомераТелефонаКШаблону()

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов.
//
// Параметры:
//  НомерТЛФ – Строка. Номер телефона, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный номер телефона.
//
Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	Перем КоличествоЦифрНомера;
	
	ТолькоЦифрыНомера = Лев(ПолучитьТолькоЦифры(НомерТЛФ, КоличествоЦифрНомера), 7); КоличествоЦифрНомера = Мин(КоличествоЦифрНомера, 7);
	
	Если Не Булево(КоличествоЦифрНомера) Тогда
		Возврат ТолькоЦифрыНомера;
	КонецЕсли;
	
	СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	Если (Не ТипЗнч(СтруктураШаблонов) = Тип("Соответствие")) Тогда
		Возврат ТолькоЦифрыНомера;
	КонецЕсли;
	
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	Если (ПолученныйШаблон = Неопределено) Тогда
		Возврат ТолькоЦифрыНомера;
	КонецЕсли;
	
	ПриведенныйНомер = "";
	НомерЦифры = 0;
	
	Для Индекс = 1 По СтрДлина(ПолученныйШаблон) Цикл
		Если (Сред(ПолученныйШаблон, Индекс, 1) = "9") Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера, НомерЦифры, 1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон, Индекс, 1);
		КонецЕсли;
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции // ПривестиНомерТелефонаКШаблону()

// Функция раскладывает номер телефона, по полям для записи в контактную информацию объекта.
//
// Параметры:
//  НомерТелефона - Строка. Номер телефона для преобразования;
//  Запись. Запись контактной информации в которую необходимо поместить разложенное значение.
//
// Возвращаемое значение:
//   Структура. Структура содержащая разложенное значение.
//
Функция РазложитьТелефонПоПолям(НомерТелефона, Запись = Неопределено) Экспорт

	Перем КоличествоЦифр;
	
	// Только допустимые символы, без двойных разделителей "- */=", с учетом мест и количеств вхождений символов "+()".
	ТолькоДопустимые = "";
	Для Индекс = 1 По СтрДлина(НомерТелефона) Цикл
		Символ = Сред(НомерТелефона, Индекс, 1);
		Если Не Булево(СтрЧислоВхождений("1234567890+()- */=", Символ)) Тогда
			Продолжить;
		КонецЕсли;
		Если (Символ = "+") И Булево(СтрДлина(ТолькоДопустимые)) Тогда
			Продолжить;
		КонецЕсли;
		Если (Символ = "(") И Булево(Найти(ТолькоДопустимые, "(")) Тогда
			Продолжить;
		КонецЕсли;
		Если (Символ = ")") И (Булево(Найти(ТолькоДопустимые, ")")) Или (Не Булево(Найти(ТолькоДопустимые, "(")))) Тогда
			Продолжить;
		КонецЕсли;
		Если Булево(СтрЧислоВхождений("- */=", Символ)) И Булево(СтрЧислоВхождений("+()- */=", Прав(ТолькоДопустимые, 1))) Тогда
			Продолжить;
		КонецЕсли;
		ТолькоДопустимые = ТолькоДопустимые + Символ;
	КонецЦикла;
	Если Булево(Найти(ТолькоДопустимые, "(")) И (Не Булево(Найти(ТолькоДопустимые, ")"))) Тогда 
		ТолькоДопустимые = СтрЗаменить(ТолькоДопустимые, "(", "");
	КонецЕсли;
	
	// Код страны. В случаях: +380..., +xxx?... , +...(...)... , ...(...)...
	БылКодСтраны = (Лев(ТолькоДопустимые, 1) = "+") Или Булево(Найти(ТолькоДопустимые, "("));
	Если БылКодСтраны Тогда
		Если Булево(Найти(ТолькоДопустимые, "(")) Тогда
			ДлинаКодаСтраны = Найти(ТолькоДопустимые, "(") - 1; // Для: +...(...)... , ...(...)...
		Иначе
			ДлинаКодаСтраны = ПолучитьПервоеВхождениеИзНабораСимволов(ТолькоДопустимые, "- */=");
			Если Булево(ДлинаКодаСтраны) Тогда
				Если (ДлинаКодаСтраны > 5) Тогда  // Для: +xxx?...
					ДлинаКодаСтраны = 0;
				КонецЕсли;
			Иначе
				Если (ТолькоДопустимые = "+380") Тогда  // Для: +380...
					ДлинаКодаСтраны = 4;
				Иначе
					ДлинаКодаСтраны = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		КодСтраны = ПолучитьТолькоЦифры(ПривестиКодСтраныНомераТелефонаКШаблону(ПолучитьТолькоЦифры(Лев(ТолькоДопустимые, ДлинаКодаСтраны))));
		ТолькоДопустимые = Сред(ТолькоДопустимые, ДлинаКодаСтраны + 1);
		БылКодСтраны = Булево(ДлинаКодаСтраны);
	КонецЕсли;
	
	// Код города. В случаях: +380xx..., +xxx?xxxx?... , +...(...)... , ...(...)... , (...)...
	БылКодГорода = БылКодСтраны Или (Лев(ТолькоДопустимые, 1) = "(");
	Если БылКодГорода Тогда
		Если (Лев(ТолькоДопустимые, 1) = "(") Тогда
			ДлинаКодаГорода = Найти(ТолькоДопустимые, ")"); // Для: +...(...)... , ...(...)... , (...)...
		Иначе
			ДлинаКодаГорода = Макс(ПолучитьПервоеВхождениеИзНабораСимволов(ТолькоДопустимые, "- */=") - 1, 0);
			Если Булево(ДлинаКодаГорода) Тогда
				Если (ДлинаКодаГорода > 5) Тогда  // Для: +xxx?xxxx?...
					ДлинаКодаГорода = 0;
				КонецЕсли;
			Иначе
				ДлинаКодаГорода = 2; // Для: +380xx...
			КонецЕсли;
		КонецЕсли;
		КодГорода = ПривестиКодГородаНомераТелефонаКШаблону(ПолучитьТолькоЦифры(Лев(ТолькоДопустимые, ДлинаКодаГорода)));
		ТолькоДопустимые = Сред(ТолькоДопустимые, ДлинаКодаГорода + 1);
		ДлинаКодаГорода = Булево(ДлинаКодаСтраны);
	КонецЕсли;
	
	// Телефон. В случаях: в международном формате, в региональном формате
	Если БылКодГорода Тогда
		МаксимальнаяДлина = 7;
	Иначе
		Если БылКодСтраны Тогда
			МаксимальнаяДлина = (12 + 1) - Макс(СтрДлина(КодСтраны), 2); // +1 - для поправик на плюс перед кодом страны
		Иначе
			МаксимальнаяДлина = (12);
		КонецЕсли;
	КонецЕсли;
	ТолькоДопустимые = Лев(ПолучитьТолькоЦифры(ТолькоДопустимые), МаксимальнаяДлина);
	СамТелефон = ПривестиНомерТелефонаКШаблону(Прав(ТолькоДопустимые, 7));
	Если Не БылКодГорода Тогда
		ТолькоДопустимые = Лев(ТолькоДопустимые, СтрДлина(ТолькоДопустимые) - 7);
		Если БылКодСтраны Тогда
			КодГорода = ПривестиКодГородаНомераТелефонаКШаблону(ТолькоДопустимые);
		Иначе
			КодГорода = ПривестиКодГородаНомераТелефонаКШаблону(Прав(ТолькоДопустимые, 2));
			КодСтраны = ПолучитьТолькоЦифры(ПривестиКодСтраныНомераТелефонаКШаблону(Лев(ТолькоДопустимые, СтрДлина(ТолькоДопустимые) - СтрДлина(КодГорода))));
		КонецЕсли;
	КонецЕсли;
	
	КодСтраны = ПривестиКодСтраныНомераТелефонаКШаблону(КодСтраны);
	
	// Корректировка кода страны для Украины.
	Если (КодСтраны = "+80") Тогда
		КодСтраны = "+380";
	КонецЕсли;
			
	СтруктураПолейТелефона = Новый Структура("КодСтраны,КодГорода,СамТелефон", КодСтраны, КодГорода, СамТелефон);
	
	Если (Не Запись = Неопределено) Тогда
		Запись.Поле1 = СтруктураПолейТелефона.КодСтраны;
		Запись.Поле2 = СтруктураПолейТелефона.КодГорода;
		Запись.Поле3 = СтруктураПолейТелефона.СамТелефон;
		Запись.Поле4 = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Строка"));
	КонецЕсли;
	
	Возврат СтруктураПолейТелефона;

КонецФункции

// Процедура формирует строковое представление телефона для представления.
//
// Параметры:
//  Запись - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Функция ПолучитьПредставлениеТелефона(Запись) Экспорт

	Представление = Запись.Поле3;
	Если Не ПустаяСтрока(Запись.Поле3) Тогда
		Представление = ПроверкаПустойСтроки(Запись.Поле2, "(") + Запись.Поле2 + ПроверкаПустойСтроки(Запись.Поле2, ") ") + Представление;
		Если Не ПустаяСтрока(Запись.Поле2) Тогда
			Представление = Запись.Поле1 + ПроверкаПустойСтроки(Запись.Поле1, " ") + Представление;
		Иначе
			//Представление = Запись.Поле1 + ПроверкаПустойСтроки(Запись.Поле1, Истина) + Представление;
			//Костенюк Александр-Старт 18.10.2012
			// Не нужно добавлять запятую
			Представление = Запись.Поле1 + ПроверкаПустойСтроки(Запись.Поле1, Ложь) + Представление;
			//Костенюк Александр-Финиш 18.10.2012
		КонецЕсли;
		Представление = Представление + ПроверкаПустойСтроки(Запись.Поле4, ", доб. ") + Запись.Поле4;
	КонецЕсли;
	
	Возврат Представление;

КонецФункции // ПолучитьПредставлениеТелефона()

// Процедура формирует строковое представление телефона для поиска.
//
// Параметры:
//  Запись - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Функция ПолучитьПоискТелефона(Запись) Экспорт

	Поиск = ПолучитьТолькоЦифры(Запись.Поле1) + ПолучитьТолькоЦифры(Запись.Поле2) + ПолучитьТолькоЦифры(Запись.Поле3);
	
	Возврат Поиск;

КонецФункции // ПолучитьПоискТелефона()

// Процедура формирует строковое представление телефона.
//
// Параметры:
//  НаборПолей - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Процедура СформироватьПредставлениеТелефона(НаборПолей) Экспорт

	НаборПолей.Представление = ПолучитьПредставлениеТелефона(НаборПолей);
	НаборПолей.Поиск = ПолучитьПоискТелефона(НаборПолей);

КонецПроцедуры // СформироватьПредставлениеТелефона()


// Процедура дополняет представление адреса строкой с конкатенационным символом, если строка не являетса пустой.
//
// Параметры:
//  ТекущееПредставление - Строка. Дополняемая строка;
//  Дополнение - Строка. Дополняющая строка;
//  СтрокаКонкатенации - Строка. Конкатенирующая строка.
//
Процедура ДополнитьПредставлениеАдреса(ТекущееПредставление, Дополнение, СтрокаКонкатенации)
	
	Если Не ПустаяСтрока(Дополнение) Тогда
		ТекущееПредставление = ТекущееПредставление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
  	
КонецПроцедуры // ДополнитьПредставлениеАдреса()

// Функция приводит индекс адреса к стандартному шаблону.
//
// Параметры:
//  ИндексАДР – Строка. Индекс, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный индекс адреса.
//
Функция ПривестиИндексАдресаКШаблону(ИндексАДР) Экспорт
	
	Результат = ПолучитьТолькоЦифры(ИндексАДР);
	Если Не ПустаяСтрока(Результат) Тогда
		Результат = Прав("00000" + Лев(Результат, 5), 5);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПривестиДомАдресаКШаблону()


// Функция приводит часть номера дома адреса к стандартному шаблону.
//
// Параметры:
//  ДомАДР – Строка. Часть номера дома, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенная часть номера дома адреса.
//
Функция ПривестиЧастьНомераДомАдресаКШаблону(ДомАДР) Экспорт
	
	Дом = СокрЛП(ДомАДР); Результат = ПолучитьТолькоЦифры(Дом);
	Пока (Лев(Результат, 1) = "0") Цикл
		Результат = Сред(Результат, 2);
	КонецЦикла;
	Результат = Лев(Результат, 4);
	Если (Не ПустаяСтрока(Результат)) И (Не Булево(СтрЧислоВхождений("1234567890", Прав(Дом, 1)))) Тогда
		Буква = НРег(Прав(Дом, 1));
		Если Булево(СтрЧислоВхождений("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Буква)) Тогда
			Если (Буква = "ё") Тогда
				Результат = Результат + "е";
			Иначе
				Результат = Результат + Буква;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПривестиЧастьНомераДомАдресаКШаблону()

// Функция приводит дом адреса к стандартному шаблону.
//
// Параметры:
//  ДомАДР – Строка. Дом, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный дом адреса.
//
Функция ПривестиДомАдресаКШаблону(ДомАДР) Экспорт

	// Убираем пробелы.
	Дом = СтрЗаменить(СокрЛП(ДомАДР), " ", "");
	
	// Разделители.
	Пока Булево(Найти(Дом, "/-")) Цикл Дом = СтрЗаменить(Дом, "/-", "/"); конецЦикла;
	Пока Булево(Найти(Дом, "-/")) Цикл Дом = СтрЗаменить(Дом, "-/", "-"); конецЦикла;
	Пока Булево(Найти(Дом, "//")) Цикл Дом = СтрЗаменить(Дом, "//", "/"); конецЦикла;
	Пока Булево(Найти(Дом, "--")) Цикл Дом = СтрЗаменить(Дом, "--", "-"); конецЦикла;
	
	// Разделение на составляющие.
	ПозицияДроби = Найти(Дом, "/"); ПозицияТире = Найти(Дом, "-");
	Если Булево(ПозицияДроби) И Булево(ПозицияТире) Тогда
		Позиция = Мин(ПозицияДроби, ПозицияТире);
	Иначе
		Позиция = Макс(ПозицияДроби, ПозицияТире);
	КонецЕсли;
	Если Булево(Позиция) Тогда
		ПервыйНомер = Лев(Дом, Позиция - 1); 
		ВторойНомер = Сред(Дом, Позиция + 1); 
		Разделитель = Сред(Дом, Позиция, 1); 
	Иначе
		ПервыйНомер = Дом; 
		ВторойНомер = ""; 
		Разделитель = ""; 
	КонецЕсли;
	
	// Приведение к шаблону составляющих.
	ПервыйНомер = ПривестиЧастьНомераДомАдресаКШаблону(ПервыйНомер);	
	ВторойНомер = ПривестиЧастьНомераДомАдресаКШаблону(ВторойНомер);
	
	// Результат.
	Если ПустаяСтрока(ПервыйНомер) Или ПустаяСтрока(ВторойНомер) Тогда
		Результат = ПервыйНомер + ВторойНомер;
	Иначе
		Результат = ПервыйНомер + Разделитель + ВторойНомер;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПривестиДомАдресаКШаблону()

// Функция приводит квартиру адреса к стандартному шаблону.
//
// Параметры:
//  ЭтажАДР – Строка. Квартира, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный квартира адреса.
//
Функция ПривестиКвартируАдресаКШаблону(КвартираАДР) Экспорт
	
	Возврат ПривестиДомАдресаКШаблону(КвартираАДР);
	
КонецФункции // ПривестиКвартируАдресаКШаблону()

// Функция приводит корпус адреса к стандартному шаблону.
//
// Параметры:
//  ЭтажАДР – Строка. Корпус, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный корпус адреса.
//
Функция ПривестиКорпусАдресаКШаблону(КорпусАДР) Экспорт
	
	Возврат ПривестиДомАдресаКШаблону(КорпусАДР);
	
КонецФункции // ПривестиКорпусАдресаКШаблону()

// Функция приводит этаж адреса к стандартному шаблону.
//
// Параметры:
//  ЭтажАДР – Строка. Этаж, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный этаж адреса.
//
Функция ПривестиЭтажАдресаКШаблону(ЭтажАДР) Экспорт
	
	Результат = ПолучитьТолькоЦифры(ЭтажАДР);
	Пока (Лев(Результат, 1) = "0") Цикл
		Результат = Сред(Результат, 2);
	КонецЦикла;
	Результат = Лев(Результат, 2);
	
	Возврат Результат;
	
КонецФункции // ПривестиЭтажАдресаКШаблону()

// Функция приводит подъезд адреса к стандартному шаблону.
//
// Параметры:
//  ПодъездАДР – Строка. Подъезд, который надо преобразовывать.
//
// Возвращаемое значение:
//   Строка. Приведенный подъезд адреса.
//
Функция ПривестиПодъездАдресаКШаблону(ПодъездАДР) Экспорт
	
	Возврат ПривестиДомАдресаКШаблону(ПодъездАДР);
	
КонецФункции // ПривестиПодъездАдресаКШаблону()

// Функция для контактной информации определяет Украинский это адрес или нет.
//
Функция ОпределитьДляОбъектаУкраинскийАдрес(ОбъектРедактирования) Экспорт
	
	Возврат (Не ТипЗнч(ОбъектРедактирования.Поле1) = Тип("СправочникСсылка.КлассификаторСтранМира"));
		
КонецФункции // ОпределитьДляОбъектаУкраинскийАдрес()

// Процедура формирует строковое представление адреса для представления.
//
// Параметры:
//  Запись - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Функция ПолучитьПредставлениеАдреса(Запись, КодЯзыкаИБ = Неопределено) Экспорт

	Если КодЯзыкаИБ = Неопределено Тогда
		КодЯзыкаИБ = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(Константы.РежимФормированияАдресовКонтактнойИнформации.Получить());
	КонецЕсли;

	ТекПредставление = Строка(Неопределено);
	
	КраткийАдрес = Константы.ИспользоватьСокращенноеПредставлениеАдресовКонтактнойИнформации.Получить();
	Если НЕ(КраткийАдрес) Тогда
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле1),  ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле2),  ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле3),  ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле4),  ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле5),  ", ");
	КонецЕсли;
	//ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле6),  ", ");
	//Костенюк Александр-Старт 16.07.2014
	Если Запись.Поле6.Тип = Перечисления.ТипыУлиц.Улица Тогда
		ДополнитьПредставлениеАдреса(ТекПредставление, НСтр("ru='ул. ';uk='вул. '",	КодЯзыкаИБ) + СокрЛП(Запись.Поле6.НаименованиеСокращенное),  ", ");
	Иначе
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле6),  ", ");
	КонецЕсли;
	//Костенюк Александр-Финиш 16.07.2014
	ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле7),  НСтр("ru=', дом № ';uk=', буд. № '",	КодЯзыкаИБ));
	ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле8),  НСтр("ru=', корпус ';uk=', корпус '", 	КодЯзыкаИБ));
	ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле11), НСтр("ru=', подъезд ';uk=', під''їзд  '", КодЯзыкаИБ));
	ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле10), НСтр("ru=', этаж ';uk=', поверх '", КодЯзыкаИБ));
	ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле9),  НСтр("ru=', кв. ';uk=', кв. '", 			КодЯзыкаИБ));
	
	Если (СтрДлина(ТекПредставление) > 2) Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли; 
	
	Возврат ТекПредставление;

КонецФункции // ПолучитьПредставлениеАдреса()

// Процедура формирует строковое представление телефона для поиска.
//
// Параметры:
//  Запись - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Функция ПолучитьПоискАдреса(Запись, КодЯзыкаИБ = Неопределено) Экспорт

	ТекПредставление = Строка(Неопределено);
	
	Если (ТипЗнч(Запись.Поле6) = Тип("Строка")) Тогда
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле6),  " ");
	Иначе
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле6.НаименованиеСокращенное),  " ");
	КонецЕсли;
	ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле7),  " ");
	ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(Запись.Поле9),  " ");
	
	Если (СтрДлина(ТекПредставление) > 1) Тогда
		ТекПредставление = Сред(ТекПредставление, 2);
	КонецЕсли; 
	
	Возврат ТекПредставление;

КонецФункции // ПолучитьПредставлениеАдреса()

// Процедура формирует строковое представление адреса.
//
// Параметры:
//  НаборПолей - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Процедура СформироватьПредставлениеАдреса(НаборПолей) Экспорт

	НаборПолей.Представление = ПолучитьПредставлениеАдреса(НаборПолей);
	НаборПолей.Поиск = ПолучитьПоискАдреса(НаборПолей);

КонецПроцедуры // СформироватьПредставлениеАдреса()


// Процедура формирует строковое представление e-mail для представления.
//
// Параметры:
//  Запись - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Функция ПолучитьПредставлениеEMail(Запись) Экспорт

	Представление = НРег(Запись.Представление);
	
	// Space bar.
	Представление = СтрЗаменить(Представление, " ", "");
		
	Возврат Представление;

КонецФункции // ПолучитьПредставлениеEMail()

// Процедура формирует строковое представление e-mail для поиска.
//
// Параметры:
//  Запись - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Функция ПолучитьПоискEMail(Запись) Экспорт

	Поиск = Запись.Представление;
	
	// Только имя без домена.
	Позиция = Найти(Поиск, "@");
	Если Булево(Позиция) Тогда
		Поиск = Лев(Поиск, Позиция - 1);
	КонецЕсли;
	
	Возврат Поиск;

КонецФункции // ПолучитьПоискEMail()

// Процедура формирует строковое представление e-mail.
//
// Параметры:
//  НаборПолей - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Процедура СформироватьПредставлениеEMail(НаборПолей) Экспорт

	НаборПолей.Представление = ПолучитьПредставлениеEMail(НаборПолей);
	НаборПолей.Поиск = ПолучитьПоискEMail(НаборПолей);

КонецПроцедуры // СформироватьПредставлениеEMail()


// Процедура формирует строковое представление веб-страницы для представления.
//
// Параметры:
//  Запись - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Функция ПолучитьПредставлениеВебСтраницы(Запись) Экспорт

	Представление = НРег(Запись.Представление);
	
	// Space bar.
	Представление = СтрЗаменить(Представление, " ", "");
		
	Возврат Представление;

КонецФункции // ПолучитьПредставлениеВебСтраницы()

// Процедура формирует строковое представление веб-страницы для поиска.
//
// Параметры:
//  Запись - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Функция ПолучитьПоискВебСтраницы(Запись) Экспорт

	Поиск = Запись.Представление;
	
	// http(s)://
	Поиск = СтрЗаменить(Поиск, "http://", ""); Поиск = СтрЗаменить(Поиск, "http:/", "");
	Поиск = СтрЗаменить(Поиск, "https://", ""); Поиск = СтрЗаменить(Поиск, "https:/", "");
	
	// ftp://
	Поиск = СтрЗаменить(Поиск, "ftp://", ""); Поиск = СтрЗаменить(Поиск, "ftp:/", "");
	
	Возврат Поиск;

КонецФункции // ПолучитьПоискВебСтраницы()

// Процедура формирует строковое представление веб-страницы.
//
// Параметры:
//  НаборПолей - Структура, РегистрСведенийЗапись.КонтактнаяИнформация, РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация. Запись набора записей регистра сведений.
//
Процедура СформироватьПредставлениеВебСтраницы(НаборПолей) Экспорт

	НаборПолей.Представление = ПолучитьПредставлениеВебСтраницы(НаборПолей);
	НаборПолей.Поиск = ПолучитьПоискВебСтраницы(НаборПолей);

КонецПроцедуры // СформироватьПредставлениеВебСтраницы()


// Процедура формирует строковое представление дома адреса.
//
// Параметры:
//  ПриведенныйДом - Строка. Приведенный дом адреса.
//
Функция ПолучитьПредставлениеДома(ПриведенныйДом) Экспорт
	
	Значение = ПриведенныйДом;
	
	Если ОбщегоНазначения.ЗначениеНЕЗаполнено(Значение) Тогда
		Возврат "...";
	Иначе
		Возврат Нрег(СокрП(Значение));
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеДома()

// Процедура формирует строковое представление дома адреса во внутреннем формате.
//
// Параметры:
//  ПриведенныйДом - Строка. Приведенный дом адреса.
//
// Описание:
//	Шаблон внутреннего формата дома имеет вид 9999NN9999N.
//
Функция ПолучитьПредставлениеДомаВнутреннее(ПриведенныйДом) Экспорт
	
	// Корректировка.
	Значение = СокрП(ПриведенныйДом);
	
	// Длина номера.
	ДлинаНомера = (Метаданные.РегистрыСведений.АдресаМаршрутовДоставки.Измерения.НачальныйДом.Тип.КвалификаторыСтроки.Длина - 1) / 2 - 1;
	
	// Пустое значение.
	Если ПустаяСтрока(Значение) Тогда
		МасимальныйНомер = Формат(Pow(10, ДлинаНомера) - 1, "ЧЦ=" + ДлинаНомера + "; ЧН=; ЧВН=; ЧГ=0") + "Я";
		Результат = МасимальныйНомер + "/" + МасимальныйНомер;
		Возврат Результат;
	КонецЕсли;
	
	// Разделение на составляющие.
	Позиция = Макс(Найти(Значение, "/"), Найти(Значение, "-"));
	Если Булево(Позиция) Тогда
		ПервыйНомер = Лев(Значение, Позиция - 1); 
		ВторойНомер = Сред(Значение, Позиция + 1); 
		Разделитель = Сред(Значение, Позиция, 1); 
	Иначе
		ПервыйНомер = Строка(Значение); 
		ВторойНомер = "0"; 
		Разделитель = "+"; 
	КонецЕсли;
	
	// Лидирующие нули.
	ЛидирующиеНули = Лев("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", ДлинаНомера);
	
	// Преобразование.
	ПервыйНомер = ПервыйНомер + Лев("_", СтрЧислоВхождений("0123456789", Прав(ПервыйНомер, 1))); ПервыйНомер = Прав(ЛидирующиеНули + ПервыйНомер, ДлинаНомера + 1); 
	ВторойНомер = ВторойНомер + Лев("_", СтрЧислоВхождений("0123456789", Прав(ВторойНомер, 1))); ВторойНомер = Прав(ЛидирующиеНули + ВторойНомер, ДлинаНомера + 1);
	
	// Результат.
	Результат = ВРег(ПервыйНомер + Разделитель + ВторойНомер);
	Возврат Результат;
	
КонецФункции // ПолучитьПредставлениеДомаВнутреннее()

// Процедура формирует дом адреса по стандартному шаблону из внутреннего формата.
//
// Параметры:
//  ПредставлениеВнутреннее - Строка. Дом адреса во внутреннем формате.
//
// Возвращаемое значение:
//  Значение - Строка. Приведенный дом адреса.
//
// Описание:
//	Шаблон внутреннего формата дома имеет вид 9999NN9999N.
//
Процедура ПолучитьДомПоПредставлениюВнутреннему(ПредставлениеВнутреннее, Значение) Экспорт
	
	// Корректировка.
	Представление = СокрП(ПредставлениеВнутреннее);
	
	// Пустое значение.
	Если ПустаяСтрока(Представление) Тогда
		Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Строка"));
		Возврат;
	КонецЕсли;
	
	// Длина номера.
	ДлинаНомера = (Метаданные.РегистрыСведений.АдресаМаршрутовДоставки.Измерения.НачальныйДом.Тип.КвалификаторыСтроки.Длина - 1) / 2 - 1;
	
	// Максимальный номер дома.
	МасимальныйНомер = Формат(Pow(10, ДлинаНомера) - 1, "ЧЦ=" + ДлинаНомера + "; ЧН=; ЧВН=; ЧГ=0") + "Я";
	
	// Номер дома.
	Если (Представление = МасимальныйНомер + "/" + МасимальныйНомер) Тогда
		Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Строка"));
		Возврат;
	КонецЕсли;
	
	// Преобразование.
	Результат = "+" + Представление;
	Результат = СтрЗаменить(Результат, "_", "");
	Результат = СтрЗаменить(Результат, "/", "/+");
	Результат = СтрЗаменить(Результат, "-", "-+");
	Результат = СтрЗаменить(Результат, "+0000", "");
	Результат = СтрЗаменить(Результат, "+000", "");
	Результат = СтрЗаменить(Результат, "+00", "");
	Результат = СтрЗаменить(Результат, "+0", "");
	Результат = СтрЗаменить(Результат, "+", "");
	Результат = НРег(Результат);
	
	Значение = Результат;
	
КонецПроцедуры // ПолучитьДомПоПредставлениюВнутреннему()



#Если Клиент Тогда
	
// Процедура блокировки объект для последующего изменения.
//
Процедура ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма) Экспорт
	
	ЭтотОбъект.Заблокировать();
	ЭтаФорма.Модифицированность = Истина;
		
КонецПроцедуры // ПроизвестиПопыткуЗаблокироватьОбъект()


// Обработчик события "ПриАктивизацииСтрокиТаблицы" табличного поля
// набора записей регистра сведений контактной информации.
//
// Параметры:
//  Элемент - ТабличноеПоле. Табличное поле списка контактной информации.
//  КнопкаУстановитьОсновным - Кнопка. Кнопка командной панели устанавливающая запись контактной информации основной.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, КнопкаУстановитьОсновным) Экспорт

	Если (Не Элемент.ТекущиеДанные = Неопределено) Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
			КнопкаУстановитьОсновным.Пометка     = Истина;
			КнопкаУстановитьОсновным.Доступность = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) Тогда
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Ложь;
		Иначе
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Истина;
		КонецЕсли; 
	Иначе
		КнопкаУстановитьОсновным.Пометка     = Ложь;
		КнопкаУстановитьОсновным.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры // КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы()

// Обработчик события "ПередНачаломДобавления" табличного поля
// набора записей регистра сведений контактной информации.
//
Процедура КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге = Неопределено, ТабличноеПоле, 
														  НаборКонтактнойИнформации, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт
	
	Если Не Копирование Тогда
		Отказ = Истина;
		ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
		ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
		ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации, , Форма);
	Иначе
		Отказ = Истина;
		ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
		ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
		ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации,, Форма, ПолучитьСтруктуруЗаписиРегистра(ТабличноеПоле.ТекущиеДанные));
	КонецЕсли; 

КонецПроцедуры // КонтактнаяИнформацияПередНачаломДобавленияОбщее()

// Обработчик события "ПередНачаломИзменения" табличного поля
// набора записей регистра сведений контактной информации.
//
Процедура КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге = Неопределено, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт
	
	Отказ = Истина;
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
	ОбработкаРедактирования.РедактироватьЗапись(Элемент.ТекущиеДанные, , Форма);

КонецПроцедуры // КонтактнаяИнформацияПередНачаломИзмененияОбщее()
	
// Обработчик события "ПередУдалением" табличного поля
// набора записей регистра сведений контактной информации.
//
Процедура УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ) Экспорт

	Отказ = Истина;
	
	Если (Не Элемент.ТекущиеДанные = Неопределено) И (ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) Или ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка")) Тогда
	
		ОтветНаВопрос = Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет);
		Если (Не ОтветНаВопрос = КодВозвратаДиалога.Да) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка") Тогда
			Элемент.Значение.Удалить(Элемент.ТекущиеДанные);
		Иначе
			Элемент.ТекущиеДанные.Представление       = "";
			Элемент.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры // УдалитьЗаписьКонтактнойИнформации()

// Обработчик события "ПриНачалеРедактирования" табличного поля
// набора записей регистра сведений контактной информации.
//
Процедура КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, ПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ) Экспорт

	Если НоваяСтрока Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Тип) Тогда
			Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Вид) Тогда
			Элемент.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
	
	ПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.ТекущиеДанные.Вид;
	
КонецПроцедуры // КонтактнаяИнформацияПриНачалеРедактированияОбщая()

// Обработчик события "ПередОкончаниемРедактирования" табличного поля
// набора записей регистра сведений контактной информации.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ) Экспорт
	
	Если мОбработкаПоискаПоСтрокеВидаКИ И (Не НоваяСтрока) Тогда
		мОбработкаПоискаПоСтрокеВидаКИ = Ложь;
		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.Вид;
		Элемент.Колонки.Вид.ЭлементУправления.ВыделенныйТекст = мТекстПоискаПоСтрокеВидаКИ;
		мТекстПоискаПоСтрокеВидаКИ = "";
	КонецЕсли; 
	
КонецПроцедуры // КонтактнаяИнформацияПередОкончаниемРедактированияОбщая()

// Обработчик события "ПриВыводеСтроки" табличного поля
// набора записей регистра сведений контактной информации.
//
Процедура КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, Картинка = "Картинка") Экспорт
	
	ДоступностьЗначенияПоУмолчанию = Истина; Попытка Временная = ДанныеСтроки.ЗначениеПоУмолчанию Исключение ДоступностьЗначенияПоУмолчанию = Ложь; КонецПопытки;
	ДоступностьТипа = Истина; Попытка Временная = ДанныеСтроки.Тип Исключение ДоступностьТипа = Ложь; КонецПопытки;
	ДоступностьВида = Истина; Попытка Временная = ДанныеСтроки.Вид Исключение ДоступностьВида = Ложь; КонецПопытки;
	ДоступностьПоля1 = Истина; Попытка Временная = ДанныеСтроки.Поле1 Исключение ДоступностьПоля1 = Ложь; КонецПопытки;
	
	Если ДоступностьЗначенияПоУмолчанию Тогда
		Если ДанныеСтроки.ЗначениеПоУмолчанию Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина); // Жирный.
		КонецЕсли;
	КонецЕсли;
	
	Если Не Элемент.Колонки[Картинка].Видимость Тогда
		Возврат;
	КонецЕсли;
	
	// Если строкам не задана катринка, использовать стандартную.
	Если (Элемент.Колонки[Картинка].КартинкиСтрок.Вид = ВидКартинки.Пустая) Тогда
		Элемент.Колонки[Картинка].ОтображатьСтандартнуюКартинку = Истина;
		Возврат;
	Иначе
		Элемент.Колонки[Картинка].ОтображатьСтандартнуюКартинку = Ложь;
	КонецЕсли;
	
	Если Элемент.Колонки[Картинка].Видимость Тогда
		ОформлениеСтроки.Ячейки[Картинка].ОтображатьКартинку = Истина;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли (ТипЗнч(ДанныеСтроки.Вид) = Тип("Строка")) Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	
	Если ДоступностьТипа Тогда
		Тип = ДанныеСтроки.Тип;
	ИначеЕсли ДоступностьВида Тогда
		Тип = ДанныеСтроки.Вид.Тип;
	Иначе
		Тип = Неопределено;
	КонецЕсли;
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если ДоступностьПоля1 И (Не ОпределитьДляОбъектаУкраинскийАдрес(ДанныеСтроки)) Тогда
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 7;
			Иначе
				ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 1;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 8;
			Иначе
				ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 2;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 9;
		Иначе
			ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 3;
		КонецЕсли;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 10;
		Иначе
			ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 4;
		КонецЕсли;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 11;
		Иначе
			ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 5;
		КонецЕсли;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 6;
		Иначе
			ОформлениеСтроки.Ячейки[Картинка].ИндексКартинки = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КонтактнаяИнформацияСписокПриВыводеСтроки()


// Процедура устанавливает запись контактной информации определенного типа и вида основной
// для объекта в пространстве одного типа.
//
// Обработчик события "Нажатие" кнопки коммандной панели
// набора записей регистра сведений контактной информации.
//
Процедура УстановитьЗаписьОсновной(НаборЗаписей, ТабличноеПоле, Кнопка) Экспорт

	Если (Не ТабличноеПоле.ТекущиеДанные = Неопределено)
	   И ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Представление) Тогда
	
		Если ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
		
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
			Кнопка.Пометка = Ложь;
			
		Иначе
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если (ЗаписьНабора.Тип = ТабличноеПоле.ТекущиеДанные.Тип) Тогда
					ЗаписьНабора.ЗначениеПоУмолчанию = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Истина;
			Кнопка.Пометка = Истина;
		
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаписьОсновной()


// Обработчик события "НачалоВыбора" элемента формы
// набора записей регистра сведений контактной информации.
//
Процедура КонтактнаяИнформацияНачалоВыбораОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге = Неопределено, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт
	
	Отказ = Истина;
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
	ОбработкаРедактирования.РедактироватьЗапись(Элемент, , Форма);

КонецПроцедуры // КонтактнаяИнформацияНачалоВыбораОбщее()


// Процедура открытия формы выбора вида контакнтной информации.
//
Процедура ОткрытьФормуВыбораВидаКИ(РежимВыбора, ВладелецФормы, ЗначениеОтбораПоТипу = Неопределено, ЗначениеОтбораПоВидуОбъектаКИ = Неопределено) Экспорт

	ВыбФорма = Справочники.ВидыКонтактнойИнформации.ПолучитьФормуВыбора(, ВладелецФормы);
	ВыбФорма.РежимВыбора = РежимВыбора;
	
	Если (Не ЗначениеОтбораПоТипу = Неопределено) Тогда
		ВыбФорма.Отбор.Тип.Значение = ЗначениеОтбораПоТипу;
		ВыбФорма.Отбор.Тип.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Тип.Доступность = Ложь;
	КонецЕсли; 
	
	Если (Не ЗначениеОтбораПоВидуОбъектаКИ = Неопределено) Тогда
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Значение = ЗначениеОтбораПоВидуОбъектаКИ;
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ЗначениеЗаполнено(ВладелецФормы.Значение) Тогда
		ВыбФорма.ПараметрТекущаяСтрока = ВладелецФормы.Значение;
	КонецЕсли; 
	
	ВыбФорма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораВидаКИ()


// Обработчик события ПриИзменении элемента адреса.
//
Процедура АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, ПоследнееЗначениеЭлементаПоискаПоСтроке) Экспорт
	
	ПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение;
	
КонецПроцедуры // АдресныйЭлементПриИзменении()


Функция ВыборАдресаИзСписка(Элемент, ЭтаФорма, СтандартнаяОбработка, Запись) Экспорт
	
	Перем ТекущаяСтрока;
	
	СтандартнаяОбработка = Ложь;
	
	// Пустая выборка.
	Если Не ЗначениеЗаполнено(Запись.Объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Выборка данных.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	               |	КонтактнаяИнформация.Объект,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.Поле10,
	               |	КонтактнаяИнформация.Поле11,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление,
	               |	КонтактнаяИнформация.Поиск КАК Поиск
	               |ПОМЕСТИТЬ ВременнаяКонтактнаяИнформация
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               |	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
	               |	И КонтактнаяИнформация.Поиск ПОДОБНО &Значение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	               |	КонтактнаяИнформация.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
	               |	КонтактнаяИнформация.Объект,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.Поле10,
	               |	КонтактнаяИнформация.Поле11,
	               |	КонтактнаяИнформация.Комментарий,
	               |	КонтактнаяИнформация.Представление КАК Представление,
	               |	КонтактнаяИнформация.Поиск КАК Поиск,
	               |	ВЫБОР
	               |		КОГДА КонтактнаяИнформация.Поиск ПОДОБНО &Значение
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Подобие
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЛОЖЬ КАК РеализацияТоваровУслуг,
	               |		КонтактнаяИнформация.Объект КАК Объект,
	               |		КонтактнаяИнформация.Поле1 КАК Поле1,
	               |		КонтактнаяИнформация.Поле2 КАК Поле2,
	               |		КонтактнаяИнформация.Поле3 КАК Поле3,
	               |		КонтактнаяИнформация.Поле4 КАК Поле4,
	               |		КонтактнаяИнформация.Поле5 КАК Поле5,
	               |		КонтактнаяИнформация.Поле6 КАК Поле6,
	               |		КонтактнаяИнформация.Поле7 КАК Поле7,
	               |		КонтактнаяИнформация.Поле8 КАК Поле8,
	               |		КонтактнаяИнформация.Поле9 КАК Поле9,
	               |		КонтактнаяИнформация.Поле10 КАК Поле10,
	               |		КонтактнаяИнформация.Поле11 КАК Поле11,
	               |		КонтактнаяИнформация.Комментарий КАК Комментарий,
	               |		КонтактнаяИнформация.Представление КАК Представление,
	               |		КонтактнаяИнформация.Поиск КАК Поиск
	               |	ИЗ
	               |		ВременнаяКонтактнаяИнформация КАК КонтактнаяИнформация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ИСТИНА,
	               |		КонтактнаяИнформация.Объект,
	               |		КонтактнаяИнформация.Поле1,
	               |		КонтактнаяИнформация.Поле2,
	               |		КонтактнаяИнформация.Поле3,
	               |		КонтактнаяИнформация.Поле4,
	               |		КонтактнаяИнформация.Поле5,
	               |		КонтактнаяИнформация.Поле6,
	               |		КонтактнаяИнформация.Поле7,
	               |		КонтактнаяИнформация.Поле8,
	               |		КонтактнаяИнформация.Поле9,
	               |		КонтактнаяИнформация.Поле10,
	               |		КонтактнаяИнформация.Поле11,
	               |		КонтактнаяИнформация.Комментарий,
	               |		КонтактнаяИнформация.Представление,
	               |		КонтактнаяИнформация.Поиск
	               |	ИЗ
	               |		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Объект КАК Объект,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле1 КАК Поле1,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле2 КАК Поле2,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле3 КАК Поле3,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле4 КАК Поле4,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле5 КАК Поле5,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле6 КАК Поле6,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле7 КАК Поле7,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле8 КАК Поле8,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле9 КАК Поле9,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле10 КАК Поле10,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле11 КАК Поле11,
	               |			ВЫРАЗИТЬ(КонтактнаяИнформацияРеализацииТоваровУслуг.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	               |			ВЫРАЗИТЬ(КонтактнаяИнформацияРеализацииТоваровУслуг.Представление КАК СТРОКА(1000)) КАК Представление,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск КАК Поиск
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КонтактнаяИнформацияРеализацииТоваровУслуг
	               |		ГДЕ
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Объект = &Объект
	               |			И КонтактнаяИнформацияРеализацииТоваровУслуг.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               |			И (НЕ КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск В
	               |						(ВЫБРАТЬ
	               |							КонтактнаяИнформация.Поиск
	               |						ИЗ
	               |							ВременнаяКонтактнаяИнформация КАК КонтактнаяИнформация))) КАК КонтактнаяИнформация) КАК КонтактнаяИнформация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подобие УБЫВ,
	               //|	Представление";
				   //Костенюк Александр-Старт 23.10.2012
				   |	Представление
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ ВременнаяКонтактнаяИнформация";
				   //Костенюк Александр-Финиш 23.10.2012
	Запрос.УстановитьПараметр("Объект", Запись.Объект); 
	Запрос.УстановитьПараметр("Значение", ПолучитьСтрокуДляПоискаПоПодобию(Запись.Поиск) + "%"); 
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Очистка.
	Элемент.СписокВыбора.Очистить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтактнаяИнформация = ОбщегоНазначения.ПолучитьСтруктуруКолонок(РезультатЗапроса.Колонки); ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, Выборка);
		
		Если Выборка.РеализацияТоваровУслуг Тогда
			ЭлементСпискаЗначений = Элемент.СписокВыбора.Добавить(КонтактнаяИнформация, Выборка.Представление, , БиблиотекаКартинок.ДокументОбъект);
		Иначе	
			ЭлементСпискаЗначений = Элемент.СписокВыбора.Добавить(КонтактнаяИнформация, Выборка.Представление, , БиблиотекаКартинок.СправочникОбъект);
		КонецЕсли;
		
		Если (ТекущаяСтрока = Неопределено) И (Запись.Представление = Выборка.Представление) Тогда
			ТекущаяСтрока = ЭлементСпискаЗначений;
		КонецЕсли; 
		
	КонецЦикла;
	
	// Перенос данных.
	ЭлементСпискаЗначений = ЭтаФорма.ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, ТекущаяСтрока);
	
	Если (ЭлементСпискаЗначений = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Перенос данных.
	ЗаполнитьЗначенияСвойств(Запись, ЭлементСпискаЗначений.Значение);
	Запись.Комментарий = СокрП(Запись.Комментарий);
	Запись.Представление = СокрП(Запись.Представление);
	
	Возврат Истина;
	
КонецФункции // ВыборАдресаИзСписка()

Функция ВыборТелефонаИзСписка(Элемент, ЭтаФорма, СтандартнаяОбработка, Запись, Поиск = Ложь) Экспорт
	
	Перем ТекущаяСтрока;
	
	СтандартнаяОбработка = Ложь;
	
	// Поиск.
	Поиск = (Поиск = Истина) Или (Не ЗначениеЗаполнено(Запись.Объект));
	
	// Пустая выборка.
	Если (Поиск = Истина) И ПустаяСтрока(Запись.Поиск) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Выборка данных.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	               |	КонтактнаяИнформация.Объект,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Представление,
	               |	КонтактнаяИнформация.Поиск КАК Поиск
	               |ПОМЕСТИТЬ ВременнаяКонтактнаяИнформация
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	               |	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
	               |	И КонтактнаяИнформация.Поиск ПОДОБНО &Значение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	               |	КонтактнаяИнформация.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
	               |	КонтактнаяИнформация.Объект,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Представление КАК Представление,
	               |	КонтактнаяИнформация.Поиск КАК Поиск,
	               |	ВЫБОР
	               |		КОГДА КонтактнаяИнформация.Поиск ПОДОБНО &Значение
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Подобие
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЛОЖЬ КАК РеализацияТоваровУслуг,
	               |		КонтактнаяИнформация.Объект КАК Объект,
	               |		КонтактнаяИнформация.Поле1 КАК Поле1,
	               |		КонтактнаяИнформация.Поле2 КАК Поле2,
	               |		КонтактнаяИнформация.Поле3 КАК Поле3,
	               |		КонтактнаяИнформация.Поле4 КАК Поле4,
	               |		КонтактнаяИнформация.Представление КАК Представление,
	               |		КонтактнаяИнформация.Поиск КАК Поиск
	               |	ИЗ
	               |		ВременнаяКонтактнаяИнформация КАК КонтактнаяИнформация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ИСТИНА,
	               |		КонтактнаяИнформация.Объект,
	               |		КонтактнаяИнформация.Поле1,
	               |		КонтактнаяИнформация.Поле2,
	               |		КонтактнаяИнформация.Поле3,
	               |		КонтактнаяИнформация.Поле4,
	               |		КонтактнаяИнформация.Представление,
	               |		КонтактнаяИнформация.Поиск
	               |	ИЗ
	               |		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Объект КАК Объект,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле1 КАК Поле1,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле2 КАК Поле2,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле3 КАК Поле3,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поле4 КАК Поле4,
	               |			ВЫРАЗИТЬ(КонтактнаяИнформацияРеализацииТоваровУслуг.Представление КАК СТРОКА(100)) КАК Представление,
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск КАК Поиск
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформацияРеализацииТоваровУслуг КАК КонтактнаяИнформацияРеализацииТоваровУслуг
	               |		ГДЕ
	               |			КонтактнаяИнформацияРеализацииТоваровУслуг.Объект = &Объект
	               |			И КонтактнаяИнформацияРеализацииТоваровУслуг.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	               |			И КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск ПОДОБНО &Значение
	               |			И (НЕ КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск В
	               |						(ВЫБРАТЬ
	               |							КонтактнаяИнформация.Поиск
	               |						ИЗ
	               |							ВременнаяКонтактнаяИнформация КАК КонтактнаяИнформация))) КАК КонтактнаяИнформация) КАК КонтактнаяИнформация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подобие УБЫВ,
	               |	Представление";
	Если (Поиск = Истина) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформацияРеализацииТоваровУслуг.Объект = &Объект", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Объект = &Объект", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформацияРеализацииТоваровУслуг.Поиск ПОДОБНО &Значение", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Поиск ПОДОБНО &Значение", "ИСТИНА");
	КонецЕсли; 
	Запрос.УстановитьПараметр("Объект", Запись.Объект); 
	Запрос.УстановитьПараметр("Значение", Запись.Поиск + "%"); 
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Перенос данных.
	Элемент.СписокВыбора.Очистить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтактнаяИнформация = ОбщегоНазначения.ПолучитьСтруктуруКолонок(РезультатЗапроса.Колонки); ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, Выборка);
		
		Если Выборка.РеализацияТоваровУслуг Тогда
			ЭлементСпискаЗначений = Элемент.СписокВыбора.Добавить(КонтактнаяИнформация, Выборка.Представление, , БиблиотекаКартинок.ДокументОбъект);
		Иначе	
			ЭлементСпискаЗначений = Элемент.СписокВыбора.Добавить(КонтактнаяИнформация, Выборка.Представление, , БиблиотекаКартинок.СправочникОбъект);
		КонецЕсли;
		Если (Поиск = Истина) Тогда
			Если ЗначениеЗаполнено(Выборка.Объект) Тогда
				ЭлементСпискаЗначений.Представление = СокрП(ЭлементСпискаЗначений.Представление) + " — " + Выборка.Объект;
			КонецЕсли; 
		КонецЕсли;
		
		Если (ТекущаяСтрока = Неопределено) И (Запись.Представление = Выборка.Представление) Тогда
			ТекущаяСтрока = ЭлементСпискаЗначений;
		КонецЕсли; 
		
	КонецЦикла;
	
	// Выбор значения.
	ЭлементСпискаЗначений = ЭтаФорма.ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, ТекущаяСтрока);
	
	Если (ЭлементСпискаЗначений = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Перенос данных.
	ЗаполнитьЗначенияСвойств(Запись, ЭлементСпискаЗначений.Значение);
	Запись.Комментарий = СокрП(Запись.Комментарий);
	Запись.Представление = СокрП(Запись.Представление);
	
	Возврат Истина;
	
КонецФункции // ВыборТелефонаИзСписка()

#КонецЕсли


// Функция возвращает представление адреса за пределами Украины без страны.
//
Функция ПолучитьПредставлениеАдресаЗаПределамиУкраиныБезСтраны(Страна, Представление) Экспорт
	
	ТекущееПредставлениеАдреса = Представление;
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.Украина.Наименование Тогда
		
		ИмяСтраны = Страна + ", ";
		ПозицияСтраныВАдресе = Найти(Врег(Представление), Врег(ИмяСтраны));
		// Если только страна в начале, то удаляем ее, иначе не трогаем
		Если ПозицияСтраныВАдресе = 1 Тогда
			ТекущееПредставлениеАдреса = Сред(Представление, СтрДлина(ИмяСтраны) + 1);	
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции // ПолучитьПредставлениеАдресаЗаПределамиУкраиныБезСтраны()

 
//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено, КодЯзыка = "ru") Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоЕДРПОУ, КодПоДРФО, ИНН, НомерСвидетельства, Телефоны, ЮридическийАдрес, ФактическийАдрес, Банк, МФО, КоррСчет, НомерСчета, АдресБанка, ПлательщикНалогаНаПрибыль");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	Иначе		
		Сведения.Вставить("ПолноеНаименование", ЮрФизЛицо.НаименованиеПолное);
	КонецЕсли;

	Запрос = ВернутьЗапросПоКонтактнойИнформации(ЮрФизЛицо.Ссылка);
	
	Данные = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из Данные Цикл
		Стр.Представление = СокрП(Стр.Представление);
		Стр.Комментарий   = СокрП(Стр.Комментарий);
		Если (Стр.Тип=Перечисления.ТипыКонтактнойИнформации.Адрес) Тогда
			Если (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Рестораны")) И (Стр.Вид=Справочники.ВидыКонтактнойИнформации.ФактАдресРесторана) Тогда
				Сведения.Вставить("ФактическийАдрес", Стр.Представление);
			//Костенюк Александр-Старт 29.10.2012
			ИначеЕсли (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")) И (Стр.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации) Тогда
				Сведения.Вставить("ЮридическийАдрес", Стр.Представление);
			//Костенюк Александр-Финиш 29.10.2012
			КонецЕсли;
		ИначеЕсли (Стр.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон) Тогда
			Если (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Рестораны")) И (Стр.Вид=Справочники.ВидыКонтактнойИнформации.ТелефонРесторана) Тогда
				Сведения.Вставить("Телефоны", Стр.Представление);
			ИначеЕсли (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Рестораны")) И (Стр.Вид=Справочники.ВидыКонтактнойИнформации.ФаксРесторана) Тогда
				Сведения.Вставить("Факсы", Стр.Представление);
			//Костенюк Александр-Старт 29.10.2012
			ИначеЕсли (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")) И (Стр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации) Тогда
				Сведения.Вставить("Телефоны", Стр.Представление);
			//Костенюк Александр-Финиш 29.10.2012
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Данные = Запрос.Выполнить().Выбрать();
	//Данные.Следующий();

	//Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
	//	Сведения.Вставить("КодПоЕДРПОУ", Данные.КодПоЕДРПОУ);
	//Иначе
	//	Сведения.Вставить("КодПоДРФО", Данные.КодПоЕДРПОУ);
	//КонецЕсли;

	//Если Данные <> Неопределено Тогда
	//	Сведения.Вставить("Представление",    Данные.Наименование);
	//	Сведения.Вставить("ИНН",              Данные.ИНН);
	//	Сведения.Вставить("НомерСвидетельства", Данные.НомерСвидетельства);
	//	Сведения.Вставить("Телефоны",         ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
	//	Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
	//	Сведения.Вставить("Банк",             Данные.Банк);
	//	Сведения.Вставить("МФО",              Данные.МФО);
	//	Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
	//	Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
	//	Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Юридический"));
	//	Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Фактический"));
	//	Сведения.Вставить("ПлательщикНалогаНаПрибыль", ?(Данные.ПлательщикНалогаНаПрибыль = Истина, ?(КодЯзыка = "ru", "Является ", "Є "), ?(КодЯзыка = "ru", "Не является ", "Не є ")) 
	//													+ ?(КодЯзыка = "ru", "плательщиком налога на прибыль на общих основаниях", "платником податку на прибуток на загальних підставах"));

	//	Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
	//		Сведения.ПолноеНаименование = Сведения.Представление;
	//	КонецЕсли;
	//КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

