
Функция ТекущийПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции // ТекущийПользователь()

Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ТекущийПользователь();
	
КонецФункции // АвторизованныйПользователь()

Функция ПолноправныйПользователь(Пользователь = Неопределено, ПроверятьПраваАдминистрированияСистемы = Ложь, УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежим() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено Или Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверятьПраваАдминистрированияСистемы Тогда
			Возврат ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы())
		Иначе
			Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
			
			Если ПроверятьПраваАдминистрированияСистемы Тогда
				Возврат РольДоступна(РольАдминистратораСистемы())
			Иначе
				Возврат РольДоступна(Метаданные.Роли.ПолныеПрава)
			КонецЕсли;
			
		Иначе
			
			Если Метаданные.ОсновныеРоли = Неопределено ИЛИ
				 Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


Функция РольАдминистратораСистемы() Экспорт
	
	//РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
	//
	//Если СтандартныеПодсистемыПереопределяемый.ЭтоБазоваяВерсияКонфигурации() Тогда
		РольАдминистратораСистемы = Метаданные.Роли.ПолныеПрава;
	//КонецЕсли;
	
	Возврат РольАдминистратораСистемы;
	
КонецФункции // РольАдминистратораСистемы()


Функция ПрочитатьПользователяИБ(Идентификатор, Свойства = Неопределено, Роли = Неопределено, ОписаниеОшибки = Неопределено, ПользовательИБ = Неопределено) Экспорт
	
	Свойства = НовоеОписаниеПользователяИБ();
	
	Роли = Новый Массив;
	Роли.Добавить("Пользователь");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолноеИмяЗначенияРежимЗапуска = ПолучитьПолноеИмяПредопределенногоЗначения(ПользовательИБ.РежимЗапуска);
	
	Свойства.ПользовательИнфБазыУникальныйИдентификатор     = ПользовательИБ.УникальныйИдентификатор;
	Свойства.ПользовательИнфБазыИмя                         = ПользовательИБ.Имя;
	Свойства.ПользовательИнфБазыПолноеИмя                   = ПользовательИБ.ПолноеИмя;
	Свойства.ПользовательИнфБазыАутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
	Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора     = ПользовательИБ.ПоказыватьВСпискеВыбора;
	Свойства.ПользовательИнфБазыСохраняемоеЗначениеПароля   = ПользовательИБ.СохраняемоеЗначениеПароля;
	Свойства.ПользовательИнфБазыПарольУстановлен            = ПользовательИБ.ПарольУстановлен;
	Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль     = ПользовательИБ.ЗапрещеноИзменятьПароль;
	Свойства.ПользовательИнфБазыАутентификацияОС            = ПользовательИБ.АутентификацияОС;
	Свойства.ПользовательИнфБазыПользовательОС              = ПользовательИБ.ПользовательОС;
	Свойства.ПользовательИнфБазыОсновнойИнтерфейс           = "";
	Свойства.ПользовательИнфБазыРежимЗапуска                = Сред(ПолноеИмяЗначенияРежимЗапуска, Найти(ПолноеИмяЗначенияРежимЗапуска, ".") + 1);
	Свойства.ПользовательИнфБазыЯзык                        = "";
	Если (Не ПользовательИБ.ОсновнойИнтерфейс = Неопределено) Тогда
		Свойства.ПользовательИнфБазыОсновнойИнтерфейс       = ПользовательИБ.ОсновнойИнтерфейс.Имя;
	КонецЕсли; 
	Если (Не ПользовательИБ.Язык = Неопределено) Тогда
		Свойства.ПользовательИнфБазыЯзык                    = ПользовательИБ.Язык.Имя;
	КонецЕсли; 
	
	Роли.Очистить();
	Для Каждого Роль Из ПользовательИБ.Роли Цикл
		Роли.Добавить(Роль.Имя);
	КонецЦикла;
	
	// ГруппаПользователя.
	Свойства.ПользовательИнфБазыГруппаПользователя          = ПрочитатьГруппуПользователяИБ(ПользовательИБ);
	
	Возврат Истина;
	
КонецФункции // ПрочитатьПользователяИБ()

Функция ЗаписатьПользователяИБ(Идентификатор, ИзмененныеСвойства, НовыеРоли, СоздатьНового = Ложь, ОписаниеОшибки = Неопределено) Экспорт
	
	ПользовательИБ = Неопределено;
	СтарыеСвойства = Неопределено;
	
	ПредварительноеЧтение = ПрочитатьПользователяИБ(Идентификатор, СтарыеСвойства, , ОписаниеОшибки, ПользовательИБ);
	
	Если Не ПредварительноеЧтение Тогда
		
		Если СоздатьНового = Неопределено ИЛИ СоздатьНового = Истина Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли СоздатьНового = Истина Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Невозможно создать пользователя информационной базы, так как он уже существует'; uk = 'Неможливо створити користувача інформаційної бази, так як він вже існує'");
		Возврат Ложь;
		
	КонецЕсли;
	
	// Подготовка новых значений свойств
	НовыеСвойства = __ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтарыеСвойства);
	
	Для каждого КлючИЗначение Из НовыеСвойства Цикл
		Если ИзмененныеСвойства.Свойство(КлючИЗначение.Ключ) И ИзмененныеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
			НовыеСвойства[КлючИЗначение.Ключ] = ИзмененныеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеРоли <> Неопределено Тогда
		Роли = НовыеРоли;
	КонецЕсли;
	
	// Установка новых значений свойств
	ПользовательИБ.Имя                         = НовыеСвойства.ПользовательИнфБазыИмя;
	ПользовательИБ.ПолноеИмя                   = НовыеСвойства.ПользовательИнфБазыПолноеИмя;
	ПользовательИБ.АутентификацияСтандартная   = НовыеСвойства.ПользовательИнфБазыАутентификацияСтандартная;
	ПользовательИБ.ПоказыватьВСпискеВыбора = НовыеСвойства.ПользовательИнфБазыПоказыватьВСпискеВыбора;
	
	Если НовыеСвойства.ПользовательИнфБазыПароль <> Неопределено Тогда
		ПользовательИБ.Пароль                  = НовыеСвойства.ПользовательИнфБазыПароль;
	ИначеЕсли НовыеСвойства.ПользовательИнфБазыСохраняемоеЗначениеПароля <> Неопределено Тогда
		ПользовательИБ.СохраняемоеЗначениеПароля = НовыеСвойства.ПользовательИнфБазыСохраняемоеЗначениеПароля
	КонецЕсли;
	
	ПользовательИБ.ЗапрещеноИзменятьПароль     = НовыеСвойства.ПользовательИнфБазыЗапрещеноИзменятьПароль;
	ПользовательИБ.АутентификацияОС            = НовыеСвойства.ПользовательИнфБазыАутентификацияОС;
	ПользовательИБ.ПользовательОС              = НовыеСвойства.ПользовательИнфБазыПользовательОС;
	
	Если ЗначениеЗаполнено(НовыеСвойства.ПользовательИнфБазыОсновнойИнтерфейс) Тогда
		ПользовательИБ.ОсновнойИнтерфейс       = Метаданные.Интерфейсы[НовыеСвойства.ПользовательИнфБазыОсновнойИнтерфейс];
	Иначе
		ПользовательИБ.ОсновнойИнтерфейс       = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыеСвойства.ПользовательИнфБазыРежимЗапуска) Тогда
		ПользовательИБ.РежимЗапуска            = РежимЗапускаКлиентскогоПриложения[НовыеСвойства.ПользовательИнфБазыРежимЗапуска];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыеСвойства.ПользовательИнфБазыЯзык) Тогда
		ПользовательИБ.Язык                    = Метаданные.Языки[НовыеСвойства.ПользовательИнфБазыЯзык];
	Иначе
		ПользовательИБ.Язык                    = Неопределено;
	КонецЕсли;
	
	Если НовыеРоли <> Неопределено Тогда
		ПользовательИБ.Роли.Очистить();
		Для каждого Роль Из НовыеРоли Цикл
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[Роль]);
		КонецЦикла;
	КонецЕсли;
	
	// Добавление роли ПолныеПрава, при попытке создать первого пользователя с пустым списком ролей
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		Если НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		КонецЕсли;
		
		Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы()) Тогда
		
			ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы());
		КонецЕсли;
	КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ
	Попытка
		ПользовательИБ.Записать();
	Исключение
		// TODO: Регистрация ошибки.
		ОписаниеОшибки = НСтр("ru = 'Не удалось записать пользователя информационной базы'; uk = 'Не вдалося записати користувача інформаційної бази'");
		Возврат Ложь;
	КонецПопытки;
	
	Идентификатор = ПользовательИБ.УникальныйИдентификатор;
	ИзмененныеСвойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	Возврат Истина;
	
КонецФункции // ПользователиПереопределяемый()

Функция УдалитьПользователяИБ(Идентификатор, ОписаниеОшибки = Неопределено) Экспорт
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	Если ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) Тогда

		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			ПользовательИБ.Удалить();
		Исключение
			// TODO: Регистрация ошибки.
			ОписаниеОшибки = НСтр("ru = 'Не удалось удалить пользователя информационной базы'; uk = 'Не вдалося видалити користувача інформаційної бази'");
			Возврат Ложь;
		КонецПопытки;

		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Возврат Истина;
	
КонецФункции // УдалитьПользователяИБ()


Процедура НайтиНеоднозначныхПользователейИБ(Пользователь = Неопределено, ИдентификаторПользователяИБ = Неопределено, НайденныеИдентификаторы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ,
	|	ИдентификаторыПользователей.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|		Пользователи.Ссылка КАК Пользователь
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи) КАК ИдентификаторыПользователей
	|ГДЕ
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ В
	|			(ВЫБРАТЬ
	|				ИдентификаторыПользователей.ИдентификаторПользователяИБ
	|			ИЗ
	|				(ВЫБРАТЬ
	|					Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|					Пользователи.Ссылка КАК Пользователь
	|				ИЗ
	|					Справочник.Пользователи КАК Пользователи
	|				ГДЕ
	|					Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	|							И Пользователи.Ссылка <> &Пользователь)
	|					И НЕ(&ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|							И Пользователи.ИдентификаторПользователяИБ <> &ИдентификаторПользователяИБ)
	|				) КАК ИдентификаторыПользователей
	|			СГРУППИРОВАТЬ ПО
	|						ИдентификаторыПользователей.ИдентификаторПользователяИБ
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(ИдентификаторыПользователей.Пользователь) > 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = Строка(Неопределено);
	ТекущийНеоднозначныйИдентификатор = Неопределено;
	
	Для каждого Строка Из Выгрузка Цикл
		НовыйИдентификаторПользователяИБ = Ложь;
		Если Строка.ИдентификаторПользователяИБ <> ТекущийНеоднозначныйИдентификатор Тогда
			НовыйИдентификаторПользователяИБ = Истина;
			ТекущийНеоднозначныйИдентификатор = Строка.ИдентификаторПользователяИБ;
			Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
				ТекущиеПользователи = Новый Массив;
				НайденныеИдентификаторы.Вставить(ТекущийНеоднозначныйИдентификатор, ТекущиеПользователи);
			Иначе
				ТекущийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийНеоднозначныйИдентификатор);
				Если ТекущийПользовательИБ = Неопределено Тогда
					ИмяПользователяИБ = НСтр("ru = '<не найден>'");
				Иначе
					ИмяПользователяИБ = ТекущийПользовательИБ.Имя;
				КонецЕсли;
				ОписаниеОшибки = ОписаниеОшибки
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Пользователю ИБ ""%1"" с идентификатором %2
                              |соответствует более одного пользователя базы данных:'; uk = 'Користувачеві ІБ ""%1"" з ідентифікатором %2
                              |відповідає більше одного користувача бази даних:'"),
						ИмяПользователяИБ,
						ТекущийНеоднозначныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
			ТекущиеПользователи.Добавить(Строка.Пользователь);
		Иначе
			Если НЕ НовыйИдентификаторПользователяИБ Тогда
				ОписаниеОшибки = ОписаниеОшибки + ",";
			КонецЕсли;
			ОписаниеОшибки = ОписаниеОшибки
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '
                          |	""%1"" с идентификатором ссылки %2'; uk = '
                          |	""%1"" з ідентифікатором посилання %2'"),
					Строка.Пользователь,
					Строка.Пользователь.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
		ОписаниеОшибки = ОписаниеОшибки + ".";
		__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки, ,, "ПользователиИнфБазы");
	КонецЕсли;
	
КонецПроцедуры // НайтиНеоднозначныхПользователейИБ()


Функция НовоеОписаниеПользователяИБ()
	
	Свойства = Новый Структура;
	Свойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор",   Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Свойства.Вставить("ПользовательИнфБазыИмя",                       "");
	Свойства.Вставить("ПользовательИнфБазыПолноеИмя",                 "");
	Свойства.Вставить("ПользовательИнфБазыАутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПользовательИнфБазыПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыПароль",                    Неопределено);
	Свойства.Вставить("ПользовательИнфБазыСохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПользовательИнфБазыПарольУстановлен",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыПользовательОС",            "");
	Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",         "");
	Свойства.Вставить("ПользовательИнфБазыРежимЗапуска",              "Авто");
	Свойства.Вставить("ПользовательИнфБазыЯзык",                      "");
	Если (Не Метаданные.ОсновнойИнтерфейс = Неопределено) Тогда
		Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",     Метаданные.ОсновнойИнтерфейс.Имя);
	КонецЕсли; 
	Если (Не Метаданные.ОсновнойЯзык = Неопределено) Тогда
		Свойства.Вставить("ПользовательИнфБазыЯзык",                  Метаданные.ОсновнойЯзык.Имя);
	КонецЕсли; 
	
	// ГруппаПользователя.
	Свойства.Вставить("ПользовательИнфБазыГруппаПользователя",        Неопределено);
	
	Возврат Свойства;
	
КонецФункции // НовоеОписаниеПользователяИБ()

Функция ПрочитатьГруппуПользователяИБ(ПользовательИБ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ГруппыПользователей.ГруппаПользователей
	                      |ИЗ
	                      |	РегистрСведений.ГруппыПользователей КАК ГруппыПользователей
	                      |ГДЕ
	                      |	(ГруппыПользователей.Пользователь.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ
	                      |			ИЛИ ГруппыПользователей.Пользователь.Код = &Имя)
	                      |	И ГруппыПользователей.АутентификацияСтандартная");
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Запрос.УстановитьПараметр("Имя", ПользовательИБ.Имя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Выборка.ГруппаПользователей;
	
КонецФункции // ПрочитатьГруппуПользователяИБ()

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного) без учета привилегированного режима.
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(Знач ИменаРолей, Пользователь = Неопределено) Экспорт
	
	//Если ЭтоПолноправныйПользователь(Пользователь, , Ложь) Тогда
	Если ПолноправныйПользователь(Пользователь, , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	Иначе
		// Указан не текущий пользователь.
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			__ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УказанТекущийПользовательИБ = ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивИменРолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРолей);
	Для каждого ИмяРоли Из МассивИменРолей Цикл
		
		Если УказанТекущийПользовательИБ Тогда
			Если РольДоступна(СокрЛП(ИмяРоли)) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(ИмяРоли))) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает полное имя не указанного пользователя для отображения в интерфейсах.
Функция ПолноеИмяНеуказанногоПользователя() Экспорт
	
	Возврат НСтр("ru = '<Не указан>'");
	
КонецФункции

//Дима Обмен данными 2К ЦРС
//

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы:
// - в локальном режиме работы (без разделения данных) имеет роль ПолныеПрава и
//   роль для администрирования системы,
// - в модели сервиса (с разделением данных) имеет роль ПолныеПрава;
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ.
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда
//                 проверяется наличие роли для администрирования системы.
//                 Начальное значение: Ложь.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда
//                 функция возвращает Истина, когда установлен привилегированный режим.
//                 Начальное значение: Истина.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежим() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	ИначеЕсли Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ТекущийПользовательИБ;
	Иначе
		// Задан не текущий пользователь.
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьРольПолныеПрава = Истина;
	ПроверитьРольАдминистратораСистемы = Истина;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Если ПроверятьПраваАдминистрированияСистемы Тогда
			ПроверитьРольПолныеПрава = Ложь;
		Иначе
			ПроверитьРольАдминистратораСистемы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор <> ТекущийПользовательИБ.УникальныйИдентификатор Тогда
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы()) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) И Метаданные.ОсновныеРоли = Неопределено Тогда
			// Когда основная роль не указана, тогда у неуказанного пользователя
			// есть все права (как в привилегированном режиме).
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя)
		   И ПривилегированныйРежим()
		   И ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
			// Когда у неуказанного пользователя есть право Администрирование,
			// тогда привилегированный режим учитывается всегда для поддержки
			// параметра запуска UsePrivilegedMode у не клиентских приложений.
			Возврат Истина;
		КонецЕсли;
		
		// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
		// а роли в текущем сеансе.
		Если ПроверитьРольПолныеПрава
		   И НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ РольДоступна(РольАдминистратораСистемы()) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

