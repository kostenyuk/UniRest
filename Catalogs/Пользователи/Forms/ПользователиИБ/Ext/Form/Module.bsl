
&НаСервере
Функция ПолучитьПользователяПоКоду(Код)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = Справочники.Пользователи.НайтиПоКоду(Код);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Пользователь;
	
КонецФункции // ПолучитьПользователяПоКоду()

&НаСервере
Функция ПолучитьНомерКартинкиПоСостоянию(КодПроблемы, ПометкаУдаления, ЭтоВнешнийПользователь)
	
	НомерКартинки = -1;
	
	Если КодПроблемы = 1 Или КодПроблемы = 0 Тогда
		НомерКартинки = 5;
	КонецЕсли;
		
	Если ПометкаУдаления Тогда
		Если КодПроблемы = 2 Или КодПроблемы = 3 Или КодПроблемы = 4 Тогда
			НомерКартинки = 0;
		КонецЕсли;
	Иначе
		Если КодПроблемы = 4 Тогда
			НомерКартинки = 1;
		ИначеЕсли КодПроблемы = 2 Или КодПроблемы = 3 Тогда
			НомерКартинки = 4;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерКартинки >= 0 И ЭтоВнешнийПользователь Тогда
		НомерКартинки = НомерКартинки + 6;
	КонецЕсли;
	
	Возврат НомерКартинки;
	
КонецФункции // ПолучитьНомерКартинкиПоСостоянию()


&НаСервере
Процедура ЗаполнитьПользователейИБ(ПриСозданииФормы = Ложь)
	
	ПользователиИнфБазы.Очистить(); ЕстьНеправильноЗаписанные = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.Ссылка,
	                      |	Пользователи.Наименование,
	                      |	Пользователи.ИдентификаторПользователяИБ,
	                      |	Пользователи.ПометкаУдаления,
	                      |	ЛОЖЬ КАК ЭтоВнешнийПользователь,
	                      |	ИСТИНА КАК ЭтоПользователь
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	НЕ Пользователи.ЭтоГруппа");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		
		НоваяСтрока = ПользователиИнфБазы.Добавить();
		
		НоваяСтрока.КодПроблемы            = 4;
		НоваяСтрока.Ссылка                 = Выборка.Ссылка;
		НоваяСтрока.ПолноеИмя              = Выборка.Наименование;
		НоваяСтрока.ПометкаУдаления        = Выборка.ПометкаУдаления;
		НоваяСтрока.ЭтоПользователь        = Выборка.ЭтоПользователь;
		НоваяСтрока.ЭтоВнешнийПользователь = Выборка.ЭтоВнешнийПользователь;
		
		Если ПользовательИБ = Неопределено Тогда
			Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
				НоваяСтрока.КодПроблемы = 2;
			Иначе
				НоваяСтрока.КодПроблемы = 3;
			КонецЕсли;
			ЕстьНеправильноЗаписанные = ЕстьНеправильноЗаписанные ИЛИ ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ);
		Иначе
			НоваяСтрока.Имя                         = ПользовательИБ.Имя;
			НоваяСтрока.АутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
			НоваяСтрока.АутентификацияОС            = ПользовательИБ.АутентификацияОС;
			НоваяСтрока.ПользовательОС              = ПользовательИБ.ПользовательОС;
			НоваяСтрока.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			
			Если Не Выборка.Наименование = ПользовательИБ.ПолноеИмя Тогда
				НоваяСтрока.КодПроблемы = 1;
				ЕстьНеправильноЗаписанные = Истина;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Картинка = ПолучитьНомерКартинкиПоСостоянию(НоваяСтрока.КодПроблемы, НоваяСтрока.ПометкаУдаления, Выборка.ЭтоВнешнийПользователь);
		
	КонецЦикла;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		Если ПользователиИнфБазы.НайтиСтроки(Новый Структура("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор)).Количество() = 0 Тогда
			НоваяСтрока = ПользователиИнфБазы.Добавить();
			НоваяСтрока.КодПроблемы                 = 0;
			НоваяСтрока.ПолноеИмя                   = ПользовательИБ.ПолноеИмя;
			НоваяСтрока.Имя                         = ПользовательИБ.Имя;
			НоваяСтрока.АутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
			НоваяСтрока.АутентификацияОС            = ПользовательИБ.АутентификацияОС;
			НоваяСтрока.ПользовательОС              = ПользовательИБ.ПользовательОС;
			НоваяСтрока.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			НоваяСтрока.Картинка                    = ПолучитьНомерКартинкиПоСостоянию(НоваяСтрока.КодПроблемы, НоваяСтрока.ПометкаУдаления, Ложь);
			ЕстьНеправильноЗаписанные  = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПриСозданииФормы И ЕстьНеправильноЗаписанные Тогда
		Отбор = "НеправильноЗаписанные"; ПредставлениеОтбора = Элементы.ПредставлениеОтбора.СписокВыбора.НайтиПоЗначению(Отбор).Представление;
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив;
	Если Отбор = "НеправильноЗаписанные" Тогда
		УдаляемыеСтроки.Добавить(ПользователиИнфБазы.НайтиСтроки(Новый Структура("КодПроблемы", 3)));
		УдаляемыеСтроки.Добавить(ПользователиИнфБазы.НайтиСтроки(Новый Структура("КодПроблемы", 4)));
		
	ИначеЕсли Отбор = "БезПользователяИБ" Тогда
		УдаляемыеСтроки.Добавить(ПользователиИнфБазы.НайтиСтроки(Новый Структура("КодПроблемы", 0)));
		УдаляемыеСтроки.Добавить(ПользователиИнфБазы.НайтиСтроки(Новый Структура("КодПроблемы", 1)));
		УдаляемыеСтроки.Добавить(ПользователиИнфБазы.НайтиСтроки(Новый Структура("КодПроблемы", 4)));
	КонецЕсли;
	
	Для Каждого Строки Из УдаляемыеСтроки Цикл
		Для Каждого Строка Из Строки Цикл
			ПользователиИнфБазы.Удалить(ПользователиИнфБазы.Индекс(Строка));
		КонецЦикла;
	КонецЦикла;
	
	ПользователиИнфБазы.Сортировать("ПометкаУдаления Возр, КодПроблемы Возр");
	
	Элементы.Предупреждение.Видимость = ЕстьНеправильноЗаписанные;
	
КонецПроцедуры // ЗаполнитьПользователейИБ()

&НаСервере
Процедура УдалитьПользователяИБ(ИдентификаторПользователяИБ, Отказ)
	
	Перем ОписаниеОшибки;
	
	Если Не Пользователи.УдалитьПользователяИБ(ИдентификаторПользователяИБ, ОписаниеОшибки) Тогда
		__ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки, ,, "ПользователиИнфБазы", Отказ);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПользователяИБ()


&НаКлиенте
Процедура ОткрытьПользователяПоСсылке()
	
	ТекущиеДанные = Элементы.ПользователиИнфБазы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КодПроблемы = 0 Тогда
		ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Ключ,ИдентификаторПользователяИБ", ПолучитьПользователяПоКоду(ТекущиеДанные.Имя), ТекущиеДанные.ИдентификаторПользователяИБ));
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
	КонецЕсли;
	
КонецПроцедуры // ОткрытьПользователяПоСсылке()

&НаКлиенте
Процедура Изменить(Команда)
	
	ОткрытьПользователяПоСсылке();
	
КонецПроцедуры // Изменить()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьПользователейИБ();
	
КонецПроцедуры // Обновить()


&НаКлиенте
Процедура ПредставлениеОтбораПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПредставлениеОтбора) Тогда
		Отбор = "Все"; ПредставлениеОтбора = Элементы.ПредставлениеОтбора.СписокВыбора.НайтиПоЗначению(Отбор).Представление;
	КонецЕсли;
	
	ЗаполнитьПользователейИБ();
	
КонецПроцедуры // ПредставлениеОтбораПриИзменении()

&НаКлиенте
Процедура ПредставлениеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйЭлемент = ВыбратьИзСписка(Элементы.ПредставлениеОтбора.СписокВыбора, Элемент, Элементы.ПредставлениеОтбора.СписокВыбора.НайтиПоЗначению(Отбор));
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		
		Отбор               = ВыбранныйЭлемент.Значение;
		ПредставлениеОтбора = ВыбранныйЭлемент.Представление;
		
		ПредставлениеОтбораПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры // ПредставлениеОтбораНачалоВыбора()


&НаКлиенте
Процедура ПользователиИнфБазыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьПользователяПоСсылке();
	
КонецПроцедуры // ПользователиИнфБазыВыбор()

&НаКлиенте
Процедура ПользователиИнфБазыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПользователиИнфБазы.ТекущиеДанные;
	
	Если (ТекущиеДанные = Неопределено) Тогда
		МожноИзменять = Ложь;
		МожноУдалить = Ложь;
	Иначе
		МожноИзменять = Истина;
		МожноУдалить = Элементы.ПользователиИнфБазы.ТекущиеДанные.КодПроблемы = 0;
	КонецЕсли; 
	
	Элементы.ПользователиИнфБазыИзменить.Доступность                = МожноИзменять;
	Элементы.КонтекстноеМенюПользователиИнфБазыИзменить.Доступность = МожноИзменять;
	Элементы.ПользователиИнфБазыУдалить.Доступность                 = МожноУдалить;
	Элементы.КонтекстноеМенюПользователиИнфБазыУдалить.Доступность  = МожноУдалить;
	
КонецПроцедуры // ПользователиИнфБазыПриАктивизацииСтроки()

&НаКлиенте
Процедура ПользователиИнфБазыПередУдалением(Элемент, Отказ)
	
	Если Элементы.ПользователиИнфБазы.ТекущиеДанные.КодПроблемы = 0 Тогда
		Ответ = Вопрос(НСтр("ru = 'Удалить пользователя информационной базы?'; uk = 'Видалити користувача інформаційної бази?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			УдалитьПользователяИБ(Элементы.ПользователиИнфБазы.ТекущиеДанные.ИдентификаторПользователяИБ, Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПользователиИнфБазыПередУдалением()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Пользователи.ПолноправныйПользователь() Тогда
		Отказ = Истина; Возврат;
	КонецЕсли;
	
	Пользователи.НайтиНеоднозначныхПользователейИБ();
	
	Отбор = "Все"; ПредставлениеОтбора = Элементы.ПредставлениеОтбора.СписокВыбора.НайтиПоЗначению(Отбор).Представление;
	
	ЗаполнитьПользователейИБ(Истина);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДобавленПользовательИБ" Или
	     ИмяСобытия = "ИзмененПользовательИБ" Или
	     ИмяСобытия = "УдаленПользовательИБ" Или
	     ИмяСобытия = "ОчищенаСвязьСНесуществущимПользователемИБ" Тогда
		
		ЗаполнитьПользователейИБ();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()
