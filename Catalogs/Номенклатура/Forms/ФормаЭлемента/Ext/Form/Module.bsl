
&НаКлиенте
Процедура УстановитьВидимость()
	
	УстановитьВидимостьСервер();
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура УстановитьВидимостьСервер()
	
	ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
	ЭтоЦРС = ПроцедурыОбменаДаннымиFrontOffice_Restoran.ДоступноНесколькоТиповЦен(ЭтотУзел);
	Если ЭтоЦРС Тогда
		Элементы.ГруппаЦены.ТекущаяСтраница = Элементы.ГруппаНесколькоЦен
	Иначе
		Элементы.ГруппаЦены.ТекущаяСтраница = Элементы.ГруппаОднаЦена
	КонецЕсли;
	
	// Страницы.
	Элементы.ГруппаКомплект.Видимость = УправлениеНоменклатуройКлиентСервер.ДоступностьКомплекта(Объект);
	Элементы.ГруппаМодификаторы.Видимость = УправлениеНоменклатуройКлиентСервер.ДоступностьМодификаторов(Объект);
	Элементы.ГруппаУсловия.Видимость = УправлениеНоменклатуройКлиентСервер.ДоступностьУсловий(Объект);
	Элементы.ГруппаСопутствующей.Видимость = УправлениеНоменклатуройКлиентСервер.ДоступностьСопутствующих(Объект);
	
	// Элементы.
	Элементы.Ценовой.Доступность = УправлениеНоменклатуройКлиентСервер.ДоступностьЦенововго(Объект);
	Элементы.Период.Доступность = УправлениеНоменклатуройКлиентСервер.ДоступностьЦены(Объект);
	//Элементы.Цена.Доступность = Элементы.Период.Доступность; //Костенюк Александр-Закомментировано 07.05.2013
	Элементы.Себестоимость.Доступность = Элементы.Период.Доступность;
	
	Элементы.Безскидочный.Доступность = Элементы.Период.Доступность;
	Элементы.Безнадбавочный.Доступность = Элементы.Период.Доступность;
	
	Элементы.Модифицируемый.Доступность = УправлениеНоменклатуройКлиентСервер.ДоступностьМодификаторов(Объект);
	Элементы.МножественныйВыборМодификаторов.Доступность = Элементы.Модифицируемый.Доступность;
	Элементы.МаксимальноеКоличествоМодификаторов.Доступность = Элементы.Модифицируемый.Доступность;
	Элементы.ПовторениеМодификаторов.Доступность = Элементы.МножественныйВыборМодификаторов.Доступность;
											 
	Элементы.Штучный.Доступность = Не УправлениеНоменклатуройКлиентСервер.ТолькоШтучный(Объект) И УправлениеНоменклатуройКлиентСервер.ДоступностьШтучного(Объект);
	Элементы.Весовой.Доступность = УправлениеНоменклатуройКлиентСервер.ДоступностьВесового(Объект);
	Элементы.Временной.Доступность = УправлениеНоменклатуройКлиентСервер.ДоступностьВременного(Объект);
	
	Элементы.Печатаемый.Доступность = УправлениеНоменклатуройКлиентСервер.ДоступностьПечатаемого(Объект);
	
	Элементы.ПредставлениеОборудования.Доступность = Объект.Временной;
	Элементы.МинимальноеВремяЗаказа.Доступность = Объект.Временной; //Костенюк Александр 29.09.2013
	
	Элементы.Связана.Доступность = УправлениеНоменклатуройКлиентСервер.ДоступностьСвязанности(Объект);
	Элементы.Состав.Доступность = УправлениеНоменклатуройКлиентСервер.ДоступностьСоставаВыхода(Объект);
	Элементы.Выход.Доступность = Элементы.Состав.Доступность;
	
	// Отметка незаполненного.
	Элементы.Период.АвтоОтметкаНезаполненного = Элементы.Период.Доступность;
	Элементы.Цена.АвтоОтметкаНезаполненного = Элементы.Период.Доступность;
	
	// Заголовок.
	Если Объект.Временной Тогда
		Элементы.ПродолжительностьПроизводства.Заголовок = НСтр("ru = 't за единицу кол-ва'; uk = 't за одиницю кіл-ті'");
	Иначе
		Элементы.ПродолжительностьПроизводства.Заголовок = НСтр("ru = 't производства'; uk = 't виробництва'");
	КонецЕсли; 
	
	//Костенюк Александр-Старт 07.05.2013
	// При использовании обмена данными с с «2К:Бухгалтерия» 
	// все изменения производятся только в бухгалтерской базе
	Возврат; // механзим уже не используется
	ИспользуетсяОбменСБухгалтерией = Константы.ИспользоватьОбменДаннымиСБухгалтерией.Получить();
	Элементы.Наименование.ТолькоПросмотр = ИспользуетсяОбменСБухгалтерией;
	Элементы.НаименованиеПолное.ТолькоПросмотр = ИспользуетсяОбменСБухгалтерией;
	Элементы.НаименованиеСокращенное.ТолькоПросмотр = ИспользуетсяОбменСБухгалтерией;
	Элементы.БазоваяЕдиницаИзмерения.Доступность = НЕ ИспользуетсяОбменСБухгалтерией;
	Элементы.СтавкаНДС.Доступность = НЕ ИспользуетсяОбменСБухгалтерией;
	Элементы.Цена.Доступность = НЕ ИспользуетсяОбменСБухгалтерией;
	Элементы.Модифицируемый.Доступность = НЕ ИспользуетсяОбменСБухгалтерией;
	Элементы.ПравилаМодификаторов.ТолькоПросмотр = ИспользуетсяОбменСБухгалтерией;
	//Костенюк Александр-Финиш 07.05.2013
		
КонецПроцедуры // УстановитьВидимость()


&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	РодительПриИзмененииСервер();

КонецПроцедуры // РодительПриИзменении()

&НаСервере
Процедура РодительПриИзмененииСервер()
	
	__РаботаСДаннымиКлиентСервер.ПолучитьНаследуемыеРеквизиты(Объект);

	// Модификаторы и условия.
	РегистрыСведений.МодификаторыНоменклатуры.ПолучитьПравилаМодификаторов(Объект, Объект.Родитель, ПравилаМодификаторов);
	РегистрыСведений.УсловияНоменклатуры.ПолучитьПравилаУсловий(Объект, Объект.Родитель, ПравилаУсловий);
	
	// Сопутсвующая.
	РегистрыСведений.СопутствующаяНоменклатура.ПолучитьПравилаСопутствующейНоменклатуры(Объект, Объект.Родитель, ПравилаСопутствующей);
	
КонецПроцедуры // РодительПриИзмененииСервер()


&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// Автоматическое формирование наименования.
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеСформировать(ФормироватьПолноеНаименованиеАвтоматически, Объект.НаименованиеПолное, Объект.Наименование, Элементы.НаименованиеПолное);
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеСформировать(ФормироватьСокращенноеНаименованиеАвтоматически, Объект.НаименованиеСокращенное, УправлениеНоменклатуройКлиентСервер.ПривестиНаименованиеСокращенное(Объект.Наименование), Элементы.НаименованиеСокращенное);
	
КонецПроцедуры // НаименованиеПриИзменении()

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	// Автоматическое формирование наименования.
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеУстановитьПризнак(ФормироватьПолноеНаименованиеАвтоматически, Объект.НаименованиеПолное, Объект.Наименование, Элементы.НаименованиеПолное);
	
КонецПроцедуры // НаименованиеПолноеПриИзменении()

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	Объект.НаименованиеСокращенное = УправлениеНоменклатуройКлиентСервер.ПривестиНаименованиеСокращенное(Объект.НаименованиеСокращенное);
	
	// Автоматическое формирование наименования.
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеУстановитьПризнак(ФормироватьСокращенноеНаименованиеАвтоматически, Объект.НаименованиеСокращенное, УправлениеНоменклатуройКлиентСервер.ПривестиНаименованиеСокращенное(Объект.Наименование), Элементы.НаименованиеСокращенное);
	
КонецПроцедуры // НаименованиеСокращенноеПриИзменении()

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)

	ТипНоменклатурыПриИзмененииСервер();
	
КонецПроцедуры // ТипНоменклатурыПриИзменении()

&НаСервере
Процедура ТипНоменклатурыПриИзмененииСервер()
	
	// Единица измерения по умолчанию.
	Если (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар) Или 
		 (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Или
		 (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор) Или
		 (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект) Или
		 (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Сертификат) Или //Костенюк Александр 10.12.2014
		 (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Депозит) Тогда
		Объект.БазоваяЕдиницаИзмерения = Константы.ЕдиницаИзмеренияШтучк.Получить();
	ИначеЕсли (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Блюдо) Или
		 (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Модификатор) Или
		 (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Условие) Тогда
		Объект.БазоваяЕдиницаИзмерения = Константы.ЕдиницаИзмеренияПорций.Получить();
	КонецЕсли;
	
	Объект.Ценовой = УправлениеНоменклатуройКлиентСервер.ДоступностьЦенововго(Объект);
	
	Объект.Модифицируемый = Объект.Модифицируемый И УправлениеНоменклатуройКлиентСервер.ДоступностьМодификаторов(Объект); 
	Объект.МножественныйВыборМодификаторов = Объект.МножественныйВыборМодификаторов И Объект.Модифицируемый;
	Объект.ПовторениеМодификаторов = Объект.ПовторениеМодификаторов И Объект.МножественныйВыборМодификаторов;
											 
	Объект.Штучный = (Объект.Штучный Или УправлениеНоменклатуройКлиентСервер.ТолькоШтучный(Объект)) И УправлениеНоменклатуройКлиентСервер.ДоступностьШтучного(Объект);
	Объект.Весовой = Объект.Весовой И УправлениеНоменклатуройКлиентСервер.ДоступностьВесового(Объект);
	Объект.Временной = Объект.Временной И УправлениеНоменклатуройКлиентСервер.ДоступностьВременного(Объект);
	
	Объект.Печатаемый = УправлениеНоменклатуройКлиентСервер.ДоступностьПечатаемого(Объект);
	
	ЦеновойПриИзмененииСервер();
	
КонецПроцедуры // ТипНоменклатурыПриИзмененииСервер()

&НаКлиенте
Процедура ТипНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТипНоменклатурыОчистка()

&НаКлиенте
Процедура БазоваяЕдиницаИзмеренияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // БазоваяЕдиницаИзмеренияОчистка()

&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)

КонецПроцедуры  // НоменклатурнаяГруппаПриИзменении()

&НаКлиенте
Процедура НоменклатурнаяГруппаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // НоменклатурнаяГруппаОчистка()

&НаКлиенте
Процедура СтавкаНДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // СтавкаНДСОчистка()

&НаКлиенте
Процедура ОборудованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуМодально("РегистрСведений.ТорговоеОборудование.Форма.ФормаВыбора", Новый Структура("Вид,ТекущаяСтрока", ПредопределенноеЗначение("Перечисление.ВидыТорговогоОборудования.УправленияСиловымиНагрузками"), Объект.Оборудование), Элемент);
	
КонецПроцедуры // ОборудованиеНачалоВыбора()

&НаКлиенте
Процедура ОборудованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; Модифицированность = Истина;
	
	Объект.Оборудование = ВыбранноеЗначение.Идентификатор;
	
	ПредставлениеОборудования = ВыбранноеЗначение.Представление;
	Ненайденное = Ложь;

КонецПроцедуры // ОборудованиеОбработкаВыбора()

&НаКлиенте
Процедура ОборудованиеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Оборудование = Неопределено;
	
	Ненайденное = Ложь;
	
КонецПроцедуры // ОборудованиеОчистка()

&НаКлиенте
Процедура ЦеновойПриИзменении(Элемент)
	
	ЦеновойПриИзмененииСервер();
	
КонецПроцедуры // ЦеновойПриИзменении()

&НаСервере
Процедура ЦеновойПриИзмененииСервер()

	ПериодПриИзмененииСервер();
	
	Объект.Безскидочный = Объект.Безскидочный И Объект.Ценовой;
	Объект.Безнадбавочный = Объект.Безнадбавочный И Объект.Ценовой;
	Объект.Печатаемый = Объект.Ценовой;
	
	// Настройка формы.
	УстановитьВидимостьСервер();
	
КонецПроцедуры // ЦеновойПриИзмененииСервер()

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПриИзмененииСервер();

КонецПроцедуры // ПериодПриИзменении()

&НаСервере
Процедура ПериодПриИзмененииСервер()
	
	Если Объект.Ценовой Тогда
		Если ЗначениеЗаполнено(ПолучитьСвойство(Параметры, "ЗначениеКопирования")) Тогда
			ОбъектЗаполнения = Параметры.ЗначениеКопирования;
		Иначе
			ОбъектЗаполнения = Объект;
		КонецЕсли;
		
		Период = __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустуюДату(Период);
		
		//.. Начало изменения Dim)on  7 октября 2013 г. 0:13:06
		//
		ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
		ЭтоЦРС = ПроцедурыОбменаДаннымиFrontOffice_Restoran.ДоступноНесколькоТиповЦен(ЭтотУзел);
		Если ЭтоЦРС Тогда
			ТаблицаЦенПоТипам = Новый ТаблицаЗначений;
			РегистрыСведений.ЦеныНоменклатуры.ПолучитьЦеновыеПараметрыПоВсемТипамЦен(ОбъектЗаполнения, Период, ТаблицаЦенПоТипам);
			ЦеныНоменклатурыПоТипам.Очистить();
			Для каждого СтрЦены Из ТаблицаЦенПоТипам Цикл
				ЗаполнитьЗначенияСвойств(ЦеныНоменклатурыПоТипам.Добавить(), СтрЦены)
			КонецЦикла;
		Иначе
			РегистрыСведений.ЦеныНоменклатуры.ПриЧтенииНоменклатуры(ОбъектЗаполнения, Период, Цена, Себестоимость);
		КонецЕсли;
		//
		//.. Конец изменения Dim)on  7 октября 2013 г. 0:13:06
		
	Иначе
		//.. Начало изменения Dim)on  7 октября 2013 г. 0:13:06
		//
		ЭтотУзел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
		ЭтоЦРС = ПроцедурыОбменаДаннымиFrontOffice_Restoran.ДоступноНесколькоТиповЦен(ЭтотУзел);
		Если ЭтоЦРС Тогда
			Период = Неопределено;
			Для каждого СтрЦены Из ЦеныНоменклатурыПоТипам Цикл
				СтрЦены.Цена = Неопределено;
				СтрЦены.Себестоимость = Неопределено;
			КонецЦикла;
		Иначе
		//
		//.. Конец изменения Dim)on  7 октября 2013 г. 0:13:06
			Период = Неопределено;
			Цена = Неопределено;
			Себестоимость = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // ПериодПриИзмененииСервер()

&НаКлиенте
Процедура ШтучныйПриИзменении(Элемент)
	
	Объект.Временной = Объект.Временной И (Не Объект.Штучный);
	Объект.Весовой = Объект.Весовой И (Не Объект.Штучный);
	
	// Настройка формы.
	УстановитьВидимость();	
	
КонецПроцедуры // ШтучныйПриИзменении()

&НаКлиенте
Процедура ВесовойПриИзменении(Элемент)
	
	Объект.Штучный = Объект.Штучный И (Не Объект.Весовой);
	Объект.Временной = Объект.Временной И (Не Объект.Весовой);
	
	// Настройка формы.
	УстановитьВидимость();	
	
КонецПроцедуры // ВесовойПриИзменении();

&НаКлиенте
Процедура ВременнойПриИзменении(Элемент)
	
	Объект.Штучный = Объект.Штучный И (Не Объект.Временной);
	Объект.Весовой = Объект.Весовой И (Не Объект.Временной);
	
	// Настройка формы.
	УстановитьВидимость();	
	
КонецПроцедуры // ВременнойПриИзменении()

&НаКлиенте
Процедура МодифицируемыйПриИзменении(Элемент)
	
	Объект.МножественныйВыборМодификаторов = Объект.МножественныйВыборМодификаторов И Объект.Модифицируемый;
	Объект.ПовторениеМодификаторов = Объект.ПовторениеМодификаторов И Объект.МножественныйВыборМодификаторов;
	
КонецПроцедуры // МодифицируемыйПриИзменении()

&НаКлиенте
Процедура МножественныйВыборМодификаторовПриИзменении(Элемент)
	
	Объект.Модифицируемый = Объект.Модифицируемый Или Объект.МножественныйВыборМодификаторов;
	Объект.ПовторениеМодификаторов = Объект.ПовторениеМодификаторов И Объект.МножественныйВыборМодификаторов;
	
КонецПроцедуры // МножественныйВыборМодификаторовПриИзменении()

&НаКлиенте
Процедура ПовторениеМодификаторовПриИзменении(Элемент)
	
	Объект.МножественныйВыборМодификаторов = Объект.МножественныйВыборМодификаторов И Объект.ПовторениеМодификаторов;
	Объект.Модифицируемый = Объект.Модифицируемый Или Объект.МножественныйВыборМодификаторов;
	
КонецПроцедуры // ПовторениеМодификаторовПриИзменении()

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	
	Объект.Состав = УправлениеНоменклатуройКлиентСервер.ПривестиСостав(Объект.Состав);
	
КонецПроцедуры // СоставПриИзменении()

&НаКлиенте
Процедура ВыходПриИзменении(Элемент)
	
	Объект.Выход = УправлениеНоменклатуройКлиентСервер.ПривестиВыход(Объект.Выход);
	
КонецПроцедуры // ВыходПриИзменении()


&НаКлиенте
Процедура ТипШтрихкодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Штрихкод.ТипШтрихкода) Тогда
		Штрихкод.ТипШтрихкода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");
	КонецЕсли; 
	
КонецПроцедуры // ТипШтрихкодаПриИзменении()

&НаКлиенте
Процедура ШтрихкодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ШтрихкодНачалоВыбораСервер();
	
КонецПроцедуры // ШтрихкодНачалоВыбора()

&НаСервере
Процедура ШтрихкодНачалоВыбораСервер()
	
	Штрихкод.Штрихкод = РегистрыСведений.Штрихкоды.СформироватьШтрихКод(Неопределено, Штрихкод.ТипШтрихкода);
	
КонецПроцедуры // ШтрихкодНачалоВыбораСервер()


&НаКлиенте
Процедура ПравилаМодификаторовАктуальностьПриИзменении(Элемент)

	// Актуальность.
	__РаботаСДаннымиКлиентСервер.ИзменитьПравилаМодификаторовУсловийПодчиненных(Элемент, ПравилаМодификаторов);
	
КонецПроцедуры // ПравилаМодификаторовАктуальностьПриИзменении()

&НаКлиенте
Процедура ПравилаУсловийАктуальностьПриИзменении(Элемент)

	// Актуальность.
	__РаботаСДаннымиКлиентСервер.ИзменитьПравилаМодификаторовУсловийПодчиненных(Элемент, ПравилаУсловий);
	
КонецПроцедуры // ПравилаУсловийАктуальностьПриИзменении()

&НаКлиенте
Процедура ПравилаСопутствующейАктуальностьПриИзменении(Элемент)

	// Актуальность.
	__РаботаСДаннымиКлиентСервер.ИзменитьПравилаМодификаторовУсловийПодчиненных(Элемент, ПравилаСопутствующей);
	
КонецПроцедуры // ПравилаСопутствующейАктуальностьПриИзменении()

&НаКлиенте
Процедура КомплектДобавитьГруппу(Команда)
	
	ТекущиеДанные = Комплект.ПолучитьЭлементы().Добавить();
	
	ТекущиеДанные.Номенклатура = Строка(Неопределено);
	ТекущиеДанные.ЭтоГруппа = Истина;
	ТекущиеДанные.ИндексКартинки = 2;
	
	Элементы.Комплект.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	Элементы.Комплект.ИзменитьСтроку();
	
КонецПроцедуры // КомплектДобавитьГруппу()

&НаКлиенте
Процедура КомплектНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Комплект.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ТекущиеДанные.Номенклатура = __ОбщегоНазначенияКлиентСервер.ПолучитьНеПустоеНаименование(ТекущиеДанные.Номенклатура);
	КонецЕсли; 
	
КонецПроцедуры // КомплектНоменклатураПриИзменении()

&НаКлиенте
Процедура КомплектНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // КомплектНоменклатураОчистка()

&НаКлиенте
Процедура КомплектПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.Комплект.ТекущиеДанные;
	
	Если (Не ТекущиеДанные = Неопределено) И (Не ТекущиеДанные.ЭтоГруппа) Тогда
		Отказ = Истина; ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
		Если (ТекущиеДанные.ПолучитьРодителя() = Неопределено) Тогда
			ТекущиеДанные = Комплект.ПолучитьЭлементы().Добавить();
		Иначе
			ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		КонецЕсли; 
		ТекущиеДанные.Номенклатура = ОписаниеТипов.ПривестиЗначение(Неопределено);
		ТекущиеДанные.Обязательный = Копирование И Элементы.Комплект.ТекущиеДанные.Обязательный;
		ТекущиеДанные.Ссылка = Неопределено;
		
		Элементы.Комплект.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		Элементы.Комплект.ИзменитьСтроку();
	КонецЕсли; 	
	
КонецПроцедуры // КомплектПередНачаломДобавления()

&НаКлиенте
Процедура КомплектПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Комплект.ТекущиеДанные;
	
	Если (ТекущиеДанные.Номенклатура = Неопределено) Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ТекущиеДанные.Номенклатура = ОписаниеТипов.ПривестиЗначение(Неопределено);
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		ТекущиеДанные.Ссылка = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // КомплектПриНачалеРедактирования()

&НаКлиенте
Процедура КомплектПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТекущиеДанные = Элементы.Комплект.ТекущиеДанные;

	Если (Не ТекущиеДанные = Неопределено) Тогда
		Если ТекущиеДанные.ЭтоГруппа Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.Номенклатура) Тогда
				Комплект.ПолучитьЭлементы().Удалить(ТекущиеДанные);
			КонецЕсли; 
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				
				// Предотвращение повторений.
				МассивПодчиненных = Новый Массив; МассивПодчиненных.Добавить(Комплект.ПолучитьЭлементы());

				Для Каждого РодительЭлементы Из МассивПодчиненных Цикл
					Для Каждого ПодчиненныеДанные Из РодительЭлементы Цикл
						
						Если (Не ПодчиненныеДанные.ЭтоГруппа) И (Не ПодчиненныеДанные = ТекущиеДанные) Тогда
							Если (ПодчиненныеДанные.Номенклатура = ТекущиеДанные.Номенклатура) Тогда
								РодительЭлементы.Удалить(ПодчиненныеДанные);
								Прервать;
							КонецЕсли; 
						КонецЕсли; 
								
						ЭлементыПодчиненныхДанных = ПодчиненныеДанные.ПолучитьЭлементы(); 
						Если ЭлементыПодчиненныхДанных.Количество() Тогда
							МассивПодчиненных.Добавить(ЭлементыПодчиненныхДанных);
						КонецЕсли; 
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				Если (ТекущиеДанные.ПолучитьРодителя() = Неопределено) Тогда
					Комплект.ПолучитьЭлементы().Удалить(ТекущиеДанные);
				Иначе
					ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // КомплектПриОкончанииРедактирования()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Принадлежность.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииНаСервере(Объект);
	КонецЕсли; 
	
	// Автоматическое формирование наименования.
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеУстановитьПризнак(ФормироватьПолноеНаименованиеАвтоматически, Объект.НаименованиеПолное, Объект.Наименование, Элементы.НаименованиеПолное);
	__РаботаСДиалогамиКлиентСервер.ФормаНаименованиеАвтоматическоеФормированиеУстановитьПризнак(ФормироватьСокращенноеНаименованиеАвтоматически, Объект.НаименованиеСокращенное, УправлениеНоменклатуройКлиентСервер.ПривестиНаименованиеСокращенное(Объект.Наименование), Элементы.НаименованиеСокращенное);
	
	ОбработкаОповещенияСервер();
	
	// Настройка формы.
	УстановитьВидимостьСервер();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// Цена.
	ПериодПриИзмененииСервер();

	// Модификаторы и условия.
	Если ЗначениеЗаполнено(ПолучитьСвойство(Параметры, "ЗначениеКопирования")) Тогда
		ОбъектЗаполнения = Параметры.ЗначениеКопирования;
	Иначе
		ОбъектЗаполнения = ТекущийОбъект;
	КонецЕсли; 
	РегистрыСведений.МодификаторыНоменклатуры.ПолучитьПравилаМодификаторов(ОбъектЗаполнения, ОбъектЗаполнения.Родитель, ПравилаМодификаторов);
	РегистрыСведений.УсловияНоменклатуры.ПолучитьПравилаУсловий(ОбъектЗаполнения, ОбъектЗаполнения.Родитель, ПравилаУсловий);
	
	// Сопутсвующая.
	РегистрыСведений.СопутствующаяНоменклатура.ПолучитьПравилаСопутствующейНоменклатуры(ОбъектЗаполнения, ОбъектЗаполнения.Родитель, ПравилаСопутствующей);
	
	// Комплект.
	Справочники.КомплектыНоменклатуры.ПолучитьКомплектНоменклатуры(ТекущийОбъект, Комплект);
	
	// Штрих код.
	ЗначениеВРеквизитФормы(РегистрыСведений.Штрихкоды.ПолучитьПараметрыШтрихКода(ТекущийОбъект), "Штрихкод");
	
	// Оборудование.
	ПредставлениеОборудования = РегистрыСведений.ТорговоеОборудование.ПолучитьПредставлние(Объект.Оборудование, Ненайденное);

КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	//.. Начало изменения Dim)on  7 октября 2013 г. 3:28:25
	//
	
	// Цена.
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыЦены", Новый Структура("Период, Цена, Себестоимость, ТаблицаЦенПоТипам", Период, Цена, Себестоимость, ЦеныНоменклатурыПоТипам));
	
	//
	//.. Конец изменения Dim)on  7 октября 2013 г. 3:28:25
	
	//Костенюк Александр-Старт 19.09.2012
	// Проверка на актуальность модификаторов для модифицируемого товара
	ПравилаМодификаторовДерево = ДанныеФормыВЗначение(ПравилаМодификаторов, Тип("ДеревоЗначений"));
	Если Объект.Модифицируемый Тогда
		МассивАктуальных = ПравилаМодификаторовДерево.Строки.НайтиСтроки(Новый Структура("Актуальность", Истина), Истина);
		Если НЕ МассивАктуальных.Количество() Тогда
			Сообщить(НСтр("ru='Для товара с признаком ""Модифицируемый"" должен быть отмечен хотя бы один модификатор!';uk='Для номенклатури з ознакою ""Модифікуються"" повинен бути відмічений хоча б один модифікатор!'"), СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	//Костенюк Александр-Финиш 19.09.2012
		
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Модификаторы и условия.
	РегистрыСведений.МодификаторыНоменклатуры.УстановитьПравилаМодификаторов(ТекущийОбъект, ТекущийОбъект.Родитель, ПравилаМодификаторов, Отказ);
	РегистрыСведений.УсловияНоменклатуры.УстановитьПравилаУсловий(ТекущийОбъект, ТекущийОбъект.Родитель, ПравилаУсловий, Отказ);
	
	// Сопутсвующая.
	РегистрыСведений.СопутствующаяНоменклатура.УстановитьПравилаСопутствующейНоменклатуры(ТекущийОбъект, ТекущийОбъект.Родитель, ПравилаСопутствующей, Отказ);
	
	// Комплект.
	Справочники.КомплектыНоменклатуры.УстановитьКомплектНоменклатуры(ТекущийОбъект, Комплект, Отказ);
	
	// Штрих код.
	РегистрыСведений.Штрихкоды.УстановитьШтрихКод(ТекущийОбъект, Штрихкод.ТипШтрихкода, Штрихкод.Штрихкод, Отказ);
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	__УправлениеДаннымиКлиент.ОповеститьИзменениеМодификаторовУсловий();
	__УправлениеДаннымиКлиент.ОповеститьИзменениеАктуализацииМеню();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Объект.Ценовой Тогда
		__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, , "Цена");
	ИначеЕсли Элементы.ГруппаЦены.ТекущаяСтраница = Элементы.ГруппаНесколькоЦен Тогда
		__ОбщегоНазначенияСервер.ИзменитьПроверяемыеРеквизиты(ПроверяемыеРеквизиты, , "Цена");
	КонецЕсли; 

КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если __УправлениеДаннымиКлиентСервер.ОповещениеИзмененияЧерногоБелогоСписка(ИмяСобытия) Тогда
		ОбработкаОповещенияСервер();
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ОбработкаОповещенияСервер()

	Элементы.БелыйСписокНоменклатуры.Картинка = __РаботаСДиалогамиКлиентСервер.ПолучитьКартинкуПометки(РегистрыСведений.БелыйСписокНоменклатуры.ПолучитьВхождениеНоменклатуры(Объект.Ссылка));
	Элементы.ЧерныйСписокНоменклатуры.Картинка = __РаботаСДиалогамиКлиентСервер.ПолучитьКартинкуПометки(РегистрыСведений.ЧерныйСписокНоменклатуры.ПолучитьВхождениеНоменклатуры(Объект.Ссылка));
	
КонецПроцедуры // ОбработкаОповещенияСервер()

// TODO: Блокировка реквизитов при наличии движений.