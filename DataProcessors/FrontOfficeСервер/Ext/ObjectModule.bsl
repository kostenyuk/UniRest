
#Если Клиент Тогда

Перем мИнициализирован;
Перем мОтложенноеВыполнение;
Перем мСтекФорм Экспорт;
Перем мСписокПоддерживаемогоТО;
Перем мТранзакцияБлокировки, мТранзакцияПечати;
Перем мОбработкаАвторизации, мОбработкаСлужебныхСообщений;
Перем мТипСтроки, мТипМассива, мТипСпискаЗначений;
Перем мПроверкаОбработчика;
Перем мКассоваяДатаАктуальна;

// Александр Переверзев 21.03.2012 13:38:41 
Перем мНаправлениеПоследнегоПереходаФормы;

Функция Инициализация(BackOffice = Ложь) Экспорт
	
	// Режим.
	Если (мИнициализирован = Истина) Тогда
		Реинициализация = Истина;
		BackOffice = РежимBackOffice;
	Иначе
		Реинициализация = Ложь;
	КонецЕсли;
	РежимBackOffice = BackOffice;
	Состояние(НСтр("ru='Инициализация Front-office...';uk='Ініціалізація Front-office...'") );
	
	// Проверка критических констант и настроек системы.
	// TODO: Проверка критических констант и настроек системы.
	
	// Время начала работы.
	ВремяНачалаРаботы = ТекущаяДата();
	Если Не Реинициализация И Не BackOffice Тогда
		Сообщить(НСтр("ru=' 	― Время начала работы: ';uk=' 	― Час початку роботи: '") + Формат(ВремяНачалаРаботы, "ДЛФ=DT"), СтатусСообщения.БезСтатуса);
	КонецЕсли;
	
	// Отладочный режим.
	Если FrontOffice.ОтладочныйРежим() Тогда
		Если  Не Реинициализация И Не BackOffice Тогда
			Сообщить(НСтр("ru='	― Отладочный режим: Включен!';uk='	― Режим відлагодження: Увімкнуто!'") , СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
	// Компьютер.
	//Истина - означает что компьютер в случае если не найден будет зарегистрирован в системе
	Компьютер = ПолучитьСерверТО().ПолучитьКомпьютерТО(Истина).ПолучитьОбъект();
	
	Сервер = ПолучитьСерверТО().ПолучитьИмяСервераТерминаловТО();
	Если ПустаяСтрока(Сервер) Тогда
		Если Не Реинициализация И Не BackOffice Тогда
			Сообщить("	― Компьютер: " + СокрЛП(Компьютер) + НСтр("ru=' (сетевое подключение)';uk=' (мережеве підключення)'") , СтатусСообщения.БезСтатуса);
		КонецЕсли;
	Иначе
		Если Не Реинициализация И Не BackOffice Тогда
			Сообщить("	― Компьютер: " + СокрЛП(Компьютер) + НСтр("ru=' (терминальное подключение на ';uk=' (термінальне підключення на '")  + Сервер + ")", СтатусСообщения.БезСтатуса);
		КонецЕсли;
	КонецЕсли;
	
	// Режим работы.
	ТекущийРежимРаботы = ТекущийРежимРаботы();
	Если Не Реинициализация И Не BackOffice Тогда
		Сообщить(НСтр("ru='	― Режим работы: ';uk='	― Режим роботи: '")  + Строка(ТекущийРежимРаботы), СтатусСообщения.БезСтатуса);
	КонецЕсли;
	
	// Авторизация.
	Если Не Реинициализация И Не BackOffice Тогда
		// -- Автоматическая аутентификация.
		ТаблицаНастроек = УправлениеПользователями.ПрочитатьНастройкиПользователя(ТекущийРежимРаботы, Справочники.ГруппыПользователей.ПустаяСсылка());
		ТекущийПользователь = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТаблицыНастроек(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeПользовательАвтоматическойАутентификации, , ТаблицаНастроек);
		ТекущаяГруппаПользователей = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТаблицыНастроек(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeГруппаПользователейАвтоматическойАутентификации, , ТаблицаНастроек);
		АвтоматическаяАутентификация = УправлениеПользователями.ПолучитьЗначениеНастройкиДляТаблицыНастроек(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeАвтоматическаяАутентификация, , ТаблицаНастроек);
		Если (Не АвтоматическаяАутентификация) Или (ТекущийПользователь = Неопределено) Или (ТекущаяГруппаПользователей = Неопределено) Или ТекущийПользователь.Пустая() Или ТекущаяГруппаПользователей.Пустая() Тогда
			ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
			ТекущаяГруппаПользователей = Справочники.ГруппыПользователей.ПустаяСсылка();
		КонецЕсли;
		Если ТекущийПользователь.Пустая() Тогда
			Сообщить(НСтр("ru='	― Аутентификация: Не выполнялась';uk='	― Аутентифікація: Не виконувалась'") , СтатусСообщения.БезСтатуса);
		Иначе
			Сообщить(НСтр("ru='	― Аутентификация: ';uk='	― Аутентифікація: '") + Строка(ТекущийПользователь) + " (" + Строка(ТекущаяГруппаПользователей) + ")", СтатусСообщения.БезСтатуса);
		КонецЕсли;
	Иначе
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		ТекущаяГруппаПользователей = глЗначениеПеременной("глТекущаяГруппаПользователей");
	КонецЕсли;
	ПолныеПрава.УстановитьИзменяемыеПараметрыСеансаПользователя(ТекущийПользователь, ТекущаяГруппаПользователей, ТекущийРежимРаботы);
	Если (Не Реинициализация) И (Не BackOffice) Тогда Сообщить(НСтр("ru='Инициализация прикладной подсистемы...';uk='Ініціалізація прикладної підсистеми'") , СтатусСообщения.БезСтатуса); КонецЕсли; Состояние(НСтр("ru='Инициализация прикладной подсистемы...';uk='Ініціалізація прикладної підсистеми...'") );
	
	// Кеширование данных.
	СоздатьКЭШДанных();
	Если (Не Реинициализация) И (Не BackOffice) Тогда Сообщить(НСтр("ru='Инициализация графической подсистемы...';uk='Ініціалізація графічної підсистеми'") , СтатусСообщения.БезСтатуса); КонецЕсли; Состояние(НСтр("ru='Инициализация графической подсистемы...';uk='Ініціалізація графічної підсистеми'") );
	
	// Рабочее место.
	Если Не Реинициализация Тогда
		// -- Проинформируем систему о начале запуска графичесокй подсистемы.
		глЗначениеПеременнойУстановить("глВключенFrontOffice", Не BackOffice);
		
		// -- Максимизация основного окна.
		Если Не BackOffice Тогда
			// TODO: Максимизация основного окна и перевод его в режим по верх всех окон.
		КонецЕсли;
		
		// -- Инициализаци форм (I).
		//МенеджерУправленияИМониторинга.Инициализация();
		МенеджерАдминистрирования.Инициализация();
		МенеджерДокумента.Инициализация();
		//МенеджерДокументаОтчетПроизводства.Инициализация();
		МенеджерДокументаСписаний.Инициализация();
		МенеджерЖурналаДокументовРесторана.Инициализация();
		//МенеджерЖурналаДокументовCallЦентра.Инициализация();
		//МенеджерЖурналаДокументовДоставки.Инициализация();
		МенеджерЖурналаДокументовСписаний.Инициализация();
		//МенеджерЖурналаДокументовОтчетПроизводства.Инициализация();
		//МенеджерПроизводства.Инициализация();
		МенеджерККМ.Инициализация();
		МенеджерУчетаРабочегоВремени.Инициализация();
		МенеджерУстройств.Инициализация();
		МенеджерРабочегоМеста.Инициализация();
		
		// -- Нормализация основного окна.
		Если Не BackOffice Тогда
			// TODO: Нормализация основного окна и перемещение его на задний план.
		КонецЕсли;
		
		Если Не FrontOffice.ОтладочныйРежим() Тогда
			Если Не BackOffice Тогда
				Индикатор = МенеджерРабочегоМеста.Форма.ЭлементыФормы.ИндикаторЗагрузка; //Индикатор.МаксимальноеЗначение = 9;
				Индикатор.МаксимальноеЗначение = 11; //Костенюк Александр 20.05.2013
				// -- Инициализаци форм (II).
				МенеджерАдминистрирования.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1;
				МенеджерДокумента.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1;
				//МенеджерДокументаОтчетПроизводства.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1; //Костенюк Александр 09.08.2012
				МенеджерДокументаСписаний.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1;
				МенеджерЖурналаДокументовРесторана.Форма.ПриИзмененииРазмера(Истина); Индикатор.Значение = Индикатор.Значение + 1;
				//МенеджерЖурналаДокументовCallЦентра.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1; //Костенюк Александр-Закомментировано 20.05.2013
				МенеджерЖурналаДокументовСписаний.Форма.ПриИзмененииРазмера(Истина); Индикатор.Значение = Индикатор.Значение + 1;
				//МенеджерЖурналаДокументовОтчетПроизводства.Форма.ПриИзмененииРазмера(Истина); Индикатор.Значение = Индикатор.Значение + 1; //Костенюк Александр-Старт 08.08.2012
				//МенеджерЖурналаДокументовДоставки.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1; //Костенюк Александр-Закомментировано 20.05.2013
				//МенеджерПроизводства.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1; //Костенюк Александр-Закомментировано 20.05.2013
				МенеджерККМ.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1;
				МенеджерУчетаРабочегоВремени.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1;
				МенеджерУстройств.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1;
				МенеджерРабочегоМеста.Форма.ПриИзмененииРазмера(); Индикатор.Значение = Индикатор.Значение + 1;
				
                //Костенюк Александр-Старт 21.03.2012
				// Закомментировано
				// Процедура АвтовыходПользователя не объявлена в глобальном модуле, работать не будет
				//// Чистяков Павел 13.12.2011 12:03:28 
				//ИнтервалАвтовыхода = Константы.ВремяПростояОтНачалаРаботы.Получить();     
				//Если ИнтервалАвтовыхода>0 Тогда                                                                   
				//	ПодключитьОбработчикОжидания("АвтовыходПользователя",ИнтервалАвтовыхода,Ложь);
				//КонецЕсли;
				//Костенюк Александр-Финиш 21.03.2012

				//Костенюк Александр-Старт 07.07.2012
				ИнтервалОпросаВременныхПозиций = РегистрыСведений.НастройкаПараметровУчета.ПолучитьНастройки().ИнтервалОпросаВременныхПозиций;
				Если ЗначениеЗаполнено(ИнтервалОпросаВременныхПозиций) Тогда
					ПодключитьОбработчикОжидания("ОбработчикОжиданияОпросВременныхПозиций", ИнтервалОпросаВременныхПозиций);
				КонецЕсли;
				//Костенюк Александр-Финиш 07.07.2012
				
			Иначе
				// -- Инициализаци форм (II).
				//МенеджерУправленияИМониторинга.Форма.ПриИзмененииРазмера(); //Костенюк Александр-Закомментировано 29.05.2013
			КонецЕсли;
		КонецЕсли;
		
		// -- Открытие стартовой формы.
		Если Не BackOffice Тогда
			__ОткрытьФорму(МенеджерРабочегоМеста.Форма);
		Иначе
			//__ОткрытьФорму(МенеджерУправленияИМониторинга.Форма); //Костенюк Александр-Закомментировано 29.05.2013
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация успешно завершена.
	мИнициализирован = Истина;
	
	Возврат Истина;
	
КонецФункции

Процедура СоздатьКЭШДанных()
	
	// Хранилище временных данных.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			// Запрос (I).	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = Запрос.Текст + "
	// Cтолы.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяСтолы ИЗ Справочник.Столы КАК Столы ГДЕ Актуальность И (НЕ ПометкаУдаления);
	|
	// Группы событий.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяГруппыСобытий ИЗ Справочник.ГруппыСобытий КАК ГруппыСобытий;
	|
	// Категории контрагентов.
	//|ВЫБРАТЬ *,Представление, Представление ПОМЕСТИТЬ ВременнаяКатегорииКонтрагентов ИЗ Справочник.КатегорииКонтрагентов КАК КатегорииКонтрагентов;
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяКатегорииКонтрагентов ИЗ Справочник.КатегорииКонтрагентов КАК КатегорииКонтрагентов; //Костенюк Александр 18.02.2013
	|
	// Категории Документов.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяКатегорииДокументов ИЗ Справочник.КатегорииДокументов КАК КатегорииДокументов;
	|
	// Виды меню.
	//|ВЫБРАТЬ Ссылка,ВерсияДанных,ПометкаУдаления,Предопределенный,Родитель,ЭтоГруппа,Код,Наименование,ОбщееВремяНачала,ОбщееВремяОкончания,ПоДнямНедели,Представление, Представление ПОМЕСТИТЬ ВременнаяВидыМеню ИЗ Справочник.ВидыМеню КАК ВидыМеню ГДЕ (НЕ ПометкаУдаления) ;
	|ВЫБРАТЬ Ссылка,ВерсияДанных,ПометкаУдаления,Предопределенный,Родитель,ЭтоГруппа,Код,Наименование,Представление, Представление ПОМЕСТИТЬ ВременнаяВидыМеню ИЗ Справочник.ВидыМеню КАК ВидыМеню ГДЕ (НЕ ПометкаУдаления) ; //Костенюк Александр 08.05.2012
	|
	// Типы скидок.
	|ВЫБРАТЬ Ссылка, Родитель, ЭтоГруппа, ПроцентСкидкиНаценки,	СуммоваяСкидкаНаценка, Представление ПОМЕСТИТЬ ВременнаяТипыСкидокНаценок ИЗ Справочник.ТипыСкидокНаценок КАК ТипыСкидокНаценок ГДЕ Актуальность И (НЕ ПометкаУдаления);
	|
	// Виды оплат.
	|ВЫБРАТЬ  *, Представление ПОМЕСТИТЬ ВременнаяВидыОплатЧекаККМ ИЗ Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ;
	|
	// Сотрудники организаций.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяСотрудникиОрганизаций ИЗ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций;
	|
	// Рестораны.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяРестораны ИЗ Справочник.Рестораны КАК Рестораны;
	|
	// КлассификаторИспользованияРабочегоВремени.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяКлассификаторИспользованияРабочегоВремени ИЗ Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени;
	|
	// Классификатор улиц.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяКлассификаторУлиц ИЗ Справочник.КлассификаторУлиц КАК КлассификаторУлиц;
	|
	// Кассовые даты.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяКассовыеДаты ИЗ Справочник.КассовыеДаты КАК КассовыеДаты;
	|
	// Организации.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяОрганизации ИЗ Справочник.Организации КАК Организации;
	|
	// Кассы ККМ.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяКассыККМ ИЗ Справочник.КассыККМ КАК КассыККМ;
	|
	// Рабочие центры.
	|ВЫБРАТЬ  *, Представление ПОМЕСТИТЬ ВременнаяРабочиеЦентры ИЗ Справочник.РабочиеЦентры КАК РабочиеЦентры ГДЕ Актуальность;
	|
	// Номенклатурные группы.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяНоменклатурныеГруппы ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы;
	|
	// Производственные группы.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяПроизводственныеГруппы ИЗ Справочник.ПроизводственныеГруппы КАК ПроизводственныеГруппы;
	|
	// Торговое оборудование.
	|ВЫБРАТЬ Идентификатор, ТорговоеОборудование.Модель.Представление КАК МодельПредставление, ТорговоеОборудование.Модель.ОбработкаОбслуживания.Вид КАК Вид, КассаККМ, КассаККМ.Владелец КАК Организация, Компьютер ПОМЕСТИТЬ ВременнаяТорговоеОборудование ИЗ РегистрСведений.ТорговоеОборудование КАК ТорговоеОборудование;
	// Типы контрагентов.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяТипыКонтрагентов ИЗ Справочник.ТипыКонтрагентов КАК ТипыКонтрагентов ГДЕ НЕ ПометкаУдаления; //Костенюк Александр 11.06.2012
	|
	// Склады.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяСклады ИЗ Справочник.МестаХранения КАК МестаХранения ГДЕ НЕ ПометкаУдаления; //Костенюк Александр 10.08.2012
	|
	// Причины ручных скидок.
	|ВЫБРАТЬ *, Представление ПОМЕСТИТЬ ВременнаяПричиныРучныхСкидок ИЗ Справочник.ПричиныРучныхСкидок КАК ПричиныРучныхСкидок ГДЕ НЕ ПометкаУдаления; //Костенюк Александр 10.06.2014 
	|
	|";
	
	// Выполнение запроса (I).
	Запрос.ВыполнитьПакет();
	
	// Запрос (II).	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = Запрос.Текст + "
	// -- Номенклатура меню (промежутьочная).
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ *, Номенклатура КАК Ссылка, Номенклатура.Представление КАК Представление, БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения, ПРЕДСТАВЛЕНИЕ(БазоваяЕдиницаИзмерения) КАК ПредставлениеЕдиницыИзмерения ПОМЕСТИТЬ ПромежутьочнаяНоменклатураМеню ИЗ РегистрСведений.НоменклатураМеню КАК НоменклатураМеню;
	|
	// -- Меню (промежутьочная).
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Владелец, Родитель, ЭтоГруппа, Номенклатура, ВЫБОР КОГДА Родитель = ЗНАЧЕНИЕ(Справочник.Меню.ПустаяСсылка) ТОГДА Владелец ИНАЧЕ Родитель КОНЕЦ КАК ВладелецРодитель, ПРЕДСТАВЛЕНИЕ(Номенклатура) КАК Представление ПОМЕСТИТЬ ПромежутьочнаяМеню ИЗ Справочник.Меню КАК Меню ГДЕ Актуальность И (НЕ ПометкаУдаления)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Ссылка, NULL, NULL, ИСТИНА, NULL, NULL, Представление ИЗ Справочник.ВидыМеню КАК ВидыМеню;
	|
	// Проверенная номенклатура меню.
	|ВЫБРАТЬ НоменклатураМеню.Ссылка ПОМЕСТИТЬ ВременнаяПровереннаяНоменклатураМеню ИЗ ПромежутьочнаяНоменклатураМеню КАК НоменклатураМеню
	|ГДЕ
	|	(НоменклатураМеню.ЭтоГруппа
	|			ИЛИ (НЕ НоменклатураМеню.БазоваяЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка))
	|				И (НЕ НоменклатураМеню.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
	|				И (НЕ НоменклатураМеню.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И (НЕ НоменклатураМеню.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка))
	|				И (НЕ НоменклатураМеню.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка))
	|				И (НЕ НоменклатураМеню.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Модификатор))
	|				И (НЕ НоменклатураМеню.Цена = 0)
	|				И НоменклатураМеню.Ценовой);
	|
	// Проверенное меню.
	|ВЫБРАТЬ Меню.Ссылка ПОМЕСТИТЬ ВременнаяПроверенноеМеню ИЗ ПромежутьочнаяМеню КАК Меню
	|ГДЕ
	|	(Меню.ЭтоГруппа
	|			ИЛИ Меню.Номенклатура В (ВЫБРАТЬ Ссылка ИЗ ВременнаяПровереннаяНоменклатураМеню));
	|
	// Номенклатура меню.
	|ВЫБРАТЬ *, ВЫБОР КОГДА (НоменклатураМеню.Ссылка В (ВЫБРАТЬ Ссылка ИЗ ВременнаяПровереннаяНоменклатураМеню)) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Проверенная ПОМЕСТИТЬ ВременнаяНоменклатураМеню ИЗ ПромежутьочнаяНоменклатураМеню КАК НоменклатураМеню;
	|
	// Меню.
	|ВЫБРАТЬ *, ВЫБОР КОГДА (Меню.Ссылка В (ВЫБРАТЬ Ссылка ИЗ ВременнаяПроверенноеМеню)) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Проверенная ПОМЕСТИТЬ ВременнаяМеню ИЗ ПромежутьочнаяМеню КАК Меню;
	|
	// -- Удаление временных таблиц.
	|УНИЧТОЖИТЬ ПромежутьочнаяНоменклатураМеню;
	|УНИЧТОЖИТЬ ПромежутьочнаяМеню;
	|";
	
	// Выполнение запроса (II).
	Запрос.ВыполнитьПакет();
	
	// Запрос (III).	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = Запрос.Текст + "
	// Правила использования.
	|ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяПравилаИспользования ИЗ РегистрСведений.ПравилаИспользования КАК ПравилаИспользования ГДЕ (НЕ ПравилаИспользования.Актуальность);
	|";
	
	// Выполнение запроса (II).
	Запрос.ВыполнитьПакет();
	
КонецПроцедуры

Процедура ВывестиСлужебноеСообщение(ТекстСообщения, Статус = Неопределено, Заголовок = Ложь) Экспорт
	
	// Вывод сообщения.
	мОбработкаСлужебныхСообщений.ВывестиСлужебноеСообщение(ТекстСообщения, Статус, Заголовок);
	
КонецПроцедуры // ВывестиСлужебноеСообщение()

Функция НедостаточноПрав(ТекстСообщения = "") Экспорт
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		FrontOffice.ВывестиОшибку(НСтр("ru='Недостаточно прав доступа!';uk='Недостатньо прав доступу!'") );
	Иначе
		FrontOffice.ВывестиОшибку(НСтр("ru='Недостаточно прав доступа ';uk='Недостатньо прав доступу '")  + ТекстСообщения + "!");
	КонецЕсли;
	
КонецФункции // НедостаточноПрав()

// Функция проверки состояния авторизации пользователя.
//
// Возвращаемое значение:
//  Булево. Истина - есль пользователь авторизирован (пользователь совершил вход в систему).
//
Функция ПользовательАвторизирован(Пользователь = Неопределено) Экспорт
	Пользователь = глЗначениеПеременной("глТекущийПользователь");
	Возврат ЗначениеЗаполнено(Пользователь);		
КонецФункции

// Функция авторизации пользователя.
//
// Параметры:
//	ТребуемыеПолномочия - ПланыВидовХарактеристикСсылка.ПраваПользователей, СписокЗначений. Минимально необходимые полномочия;
//	Неполная - Булево. Истина - если требуется только подтверждение полномочий пользователя без полной его авторизации;
//	ВыбранныйПользователь - СправочникСсылка.Пользователи. Предустановленный отбор по пользователю;
//	ВыбраннаяГруппаПользователей - СправочникСсылка.ГруппыПользователей. Предустановленный отбор по группе пользователей.
//
// Возвращаемое значение:
//  Булево. Истина - в случае успешной авторизации.
//	ВыбранныйПользователь - СправочникСсылка.Пользователи. Пользователь;
//	ВыбраннаяГруппаПользователей - СправочникСсылка.ГруппыПользователей. Группа пользователей пользователя.
//  ЭтоРегистрацияНаСмену - Тип: Булево, признак того что нажата кнопка регистрации сотрудника на смену
//
//Функция Авторизация(ТребуемыеПолномочия = Неопределено, Неполная = Ложь, ВыбранныйПользователь = Неопределено, ВыбраннаяГруппаПользователей = Неопределено, ИнформационнаяКарта = Неопределено,  ДействиеПользователя = Неопределено) Экспорт
//Костенюк Александр-Старт 20.07.2012
Функция Авторизация(ТребуемыеПолномочия = Неопределено, Неполная = Ложь, ВыбранныйПользователь = Неопределено, ВыбраннаяГруппаПользователей = Неопределено, ИнформационнаяКарта = Неопределено,  ДействиеПользователя = Неопределено, ЭтоРегистрацияНаСмену = Ложь) Экспорт
//Костенюк Александр-Финиш 20.07.2012
	
	// По умолчанию проверяются права доступа в систему в Front-office режиме.
	Если (ТребуемыеПолномочия = Неопределено) Тогда
		ТребуемыеПолномочия = ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeРазрешитьИспользованиеРежима;
	КонецЕсли;
	
	// Авторизация.
	
	//Проверка = мОбработкаАвторизации.Авторизация(ТребуемыеПолномочия, Неполная, ВыбранныйПользователь, ВыбраннаяГруппаПользователей, ИнформационнаяКарта,  ДействиеПользователя);
	//Костенюк Александр-Старт 20.07.2012
	Проверка = мОбработкаАвторизации.Авторизация(ТребуемыеПолномочия, Неполная, ВыбранныйПользователь, ВыбраннаяГруппаПользователей, ИнформационнаяКарта,  ДействиеПользователя, ЭтоРегистрацияНаСмену);
	//Костенюк Александр-Финиш 20.07.2012
	
	Если Проверка Тогда
		
		// Режим работы.
		РежимBackOffice = Проверка;
		
		// Реконфигураци рабочего места.
		Если Не Неполная Тогда 
			ОбновитьФормы();                                                   
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура завершает сеанс текущего пользователя.
//
Процедура ЗавершениеСеанса() Экспорт
	
	// Завершение сеанса.
	мОбработкаАвторизации.ЗавершениеСеанса();
	глСостояниеСеанса = Ложь;
	// Переход к основной форме.
	//ЗакрытьВсеФормы();
	ОбновитьФормы();
	
КонецПроцедуры

Функция АктивнаяФорма() Экспорт
	
	// Поиск формы.
	Если мСтекФорм.Количество()>0 Тогда
		// Игорь 17.10.2011 13:10:29
		Форма = мСтекФорм.Получить(мСтекФорм.Количество() -1 );
		
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // АктивизироватьФорму()

Функция ФормаВводДоступен(Знач Форма) Экспорт
	
	Возврат (Форма = АктивнаяФорма());
	
КонецФункции // ФормаВводДоступен()

Функция АктивизироватьФорму(Знач Форма = Неопределено) Экспорт
	
	// Проверка присутсвия основной формы в стеке.
	Если Не Булево(мСтекФорм.Количество()) Тогда
		мСтекФорм.Добавить(МенеджерРабочегоМеста.Форма);
	КонецЕсли;
	
	// Поиск формы.
	Если (Форма = Неопределено) Тогда
		Если Булево(мСтекФорм.Количество()) Тогда
			Форма = мСтекФорм.Получить(мСтекФорм.Количество() - 1);
		КонецЕсли;
	КонецЕсли;
	Если (Форма = Неопределено) Тогда
		Возврат Ложь
	КонецЕсли;
	
	// Активизация формы.
	Форма.Активизировать();
	
	Возврат Истина;
	
КонецФункции // АктивизироватьФорму()

Процедура __ОткрытьФорму(Знач Форма) Экспорт
	
	// Отображение формы.
	Если Не Форма.Открыта() Тогда
		//Форма.РежимРабочегоСтола = Истина;
		Форма.Открыть();
		Возврат;
	КонецЕсли;
	
	// Александр Переверзев 21.03.2012 13:45:03 
	Если (мСтекФорм.Найти(Форма) = Неопределено) Тогда
		мНаправлениеПоследнегоПереходаФормы = "Вперед";
	Иначе
		мНаправлениеПоследнегоПереходаФормы = "Назад";
	КонецЕсли;
	
	// Открытие формы.
	СтандартнаяОбработка = Истина;
	Форма.ПриПовторномОткрытии(СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	Форма.Активизировать();
	
	// Добавление формы в стек.
	Если (мСтекФорм.Найти(Форма) = Неопределено) Тогда
		мСтекФорм.Добавить(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьФорму(Знач Форма) Экспорт
	
	// Проверка присутсвия основной формы в стеке.
	Если Не Булево(мСтекФорм.Количество()) Тогда
		мСтекФорм.Добавить(МенеджерРабочегоМеста.Форма);
	КонецЕсли;
	
	// Предотвращение закрытия основной формы.
	Если (Форма = МенеджерРабочегоМеста.Форма) Тогда
		Форма.Активизировать();
		Возврат;
	КонецЕсли;
	
	// Закрытие формы и корректировака стека. 
	ЗначмСтекФорм  = мСтекФорм.Найти(Форма);
	Если ЗначмСтекФорм <> Неопределено Тогда
		Пока (ЗначмСтекФорм <= мСтекФорм.Количество() - 1) Цикл
			Форма = мСтекФорм.Получить(ЗначмСтекФорм);
			мСтекФорм.Удалить(ЗначмСтекФорм);
			Форма.ПриЗакрытии();	
		КонецЦикла;
	КонецЕсли;
	
	//Активизация последней формы.
	Форма = мСтекФорм.Получить(мСтекФорм.Количество() - 1);
	__ОткрытьФорму(Форма);
	
КонецПроцедуры

Процедура ОбновитьФормы() Экспорт	
	// Проверка прав доступа к открытым формам.
	Если мСтекФорм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Александр Переверзев 21.03.2012 13:47:39 
	мНаправлениеПоследнегоПереходаФормы = "Обновление";
	
	Для Каждого Форма Из мСтекФорм Цикл
		// Закрытие недоступной формы и всех низстоящих форм.
		Если Форма.Доступность() Тогда
			Форма.ПриПовторномОткрытии(Истина);
			Если Форма = АктивнаяФорма() Тогда
				АктивизироватьФорму(Форма);		 
			КонецЕсли;
		Иначе
			ЗакрытьФорму(Форма);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗакрытьВсеФормы() Экспорт
	Для каждого Стек Из мСтекФорм Цикл
		Если ТипЗнч(Стек.ОбработкаОбъект) <> Тип("ОбработкаОбъект.FrontOfficeМенеджерРабочегоМеста") Тогда
			ЗакрытьФорму(Стек);		
		КонецЕсли;
	КонецЦикла;
	ЗавершениеСеанса();
КонецПроцедуры

// Александр Переверзев 21.03.2012 13:38:44 
Функция НаправлениеПоследнегоПереходаФормы() Экспорт
	
	Если ПустаяСтрока(мНаправлениеПоследнегоПереходаФормы) Тогда
		Возврат "Вперед";
	КонецЕсли; 
	
	Возврат мНаправлениеПоследнегоПереходаФормы;
	
КонецФункции // АктивизироватьФорму()


Функция ПолучитьТаблицуОбъектов(Метаданные) Экспорт
	
	// Выборка данных.
	Если (ТипЗнч(Метаданные) = мТипСтроки) Тогда
		Имя = Метаданные;
	Иначе
		Имя = Метаданные.Имя;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ *, Представление ИЗ Временная" + Имя);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Попытка
		Возврат Запрос.Выполнить().Выгрузить();
	Исключение
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление ИЗ Справочник." + Имя);
	КонецПопытки;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуОбъектов()

Функция ПолучитьОбъект(Ссылка, ТаблицаОбъектов = Неопределено) Экспорт
	
	// Выборка данных.
	Если (ТаблицаОбъектов = Неопределено) Или (ТипЗнч(ТаблицаОбъектов) = мТипСтроки) Тогда
		Если (ТипЗнч(Метаданные) = мТипСтроки) Тогда
			Имя = ТаблицаОбъектов;
		Иначе
			Имя = Ссылка.Ссылка.Метаданные().Имя;
		КонецЕсли;
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление ИЗ Временная" + Имя + " ГДЕ Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка.Ссылка);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Попытка
			ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
		Исключение
			Возврат Ссылка.Ссылка;
		КонецПопытки;
	КонецЕсли;
	
	// Поиск ссылки.
	СтрокаТаблицы = ТаблицаОбъектов.Найти(Ссылка.Ссылка, "Ссылка");
	
	// Псевдо объект.
	Если (Не СтрокаТаблицы = Неопределено) Тогда
		Возврат СтрокаТаблицы;
	КонецЕсли;
	
	// Стандартный способ получения объекта.
	Возврат Ссылка.Ссылка;
	
КонецФункции // ПолучитьОбъект()

Функция ПолучитьПредставление(Ссылка, ТаблицаОбъектов = Неопределено) Экспорт
	
	// Выборка данных.
	Если (ТаблицаОбъектов = Неопределено) Или (ТипЗнч(ТаблицаОбъектов) = мТипСтроки) Тогда
		Если (ТипЗнч(Метаданные) = мТипСтроки) Тогда
			Имя = ТаблицаОбъектов;
		Иначе
			Имя = Ссылка.Ссылка.Метаданные().Имя;
		КонецЕсли;
		Запрос = Новый Запрос("ВЫБРАТЬ *, Представление ИЗ Временная" + Имя + " ГДЕ Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка.Ссылка);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Попытка
			ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
		Исключение
			Возврат Строка(Ссылка.Ссылка);
		КонецПопытки;
	КонецЕсли;
	
	// Поиск ссылки.
	СтрокаТаблицы = ТаблицаОбъектов.Найти(Ссылка.Ссылка, "Ссылка");
	
	// Предстваление.
	Если (Не СтрокаТаблицы = Неопределено) Тогда
		Если (Не ТаблицаОбъектов.Колонки.Найти("Представление") = Неопределено) Тогда
			Возврат СтрокаТаблицы.Представление;
		КонецЕсли;
		Если (Не ТаблицаОбъектов.Колонки.Найти("Наименование") = Неопределено) Тогда
			Возврат СтрокаТаблицы.Наименование;
		КонецЕсли;
		Если (Не ТаблицаОбъектов.Колонки.Найти("Код") = Неопределено) Тогда
			Возврат СтрокаТаблицы.Код;
		КонецЕсли;
	КонецЕсли;
	
	// Стандартный способ получения предстваления.
	Возврат Строка(Ссылка.Ссылка);
	
КонецФункции // ПолучитьПредставление()

// Процедура открывает транзакцию.
//
Функция НачатьТранзакциюЗаписи(Блокирующая = Ложь) Экспорт
	
	Возврат ДокументОткрыть(Неопределено);
	
КонецФункции

Функция ЗафиксироватьТранзакциюЗаписи() Экспорт
	
	Возврат ДокументЗаписать(Неопределено);
	
КонецФункции

// Процедура отменяет транзакцию.
//
Функция ОтменитьТранзакциюЗаписи() Экспорт
	
	Возврат ДокументЗакрыть(Неопределено);
	
КонецФункции

Функция НачатьТранзакциюБлокировки() Экспорт
	
	Если (мТранзакцияБлокировки = Неопределено) Тогда
		мТранзакцияБлокировки = Новый Массив;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // НачатьТранзакциюБлокировки()

Функция ДобавитьВТранзакциюБлокировки(Документ) Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьИзТранзакцииБлокировки(Документ) Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ЗафиксироватьТранзакциюБлокировки() Экспорт
	
	Если (мТранзакцияБлокировки = Неопределено) Тогда
		мТранзакцияБлокировки = Новый Массив;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗафиксироватьТранзакциюПечати()

// Процедура отменяет транзакцию печати.
//
Функция ОтменитьТранзакциюБлокировки() Экспорт
	
	// Отмена транзакции печати.
	мТранзакцияПечати.Очистить();
	
	Возврат Истина;
	
КонецФункции // ОтменитьТранзакциюПечати()


// Процедура открывает транзакцию печати.
//
// Описание:
//	После открытия транзакции печати, все распечатываемые ТабличныеДокументы через соответсвующую процедуры,
//	либо булут распечатаны все одновремменно во время фиксации транзакции, либо не будут распечатаны вообще.
//
Процедура НачатьТранзакциюПечати() Экспорт
	
	// Принудительный сброс транзакционных данных.
	мТранзакцияПечати.Очистить();
	
КонецПроцедуры // НачатьТранзакциюПечати()

Процедура ЗафиксироватьТранзакциюПечати() Экспорт
	
КонецПроцедуры // ЗафиксироватьТранзакциюПечати()

// Процедура отменяет транзакцию печати.
//
Процедура ОтменитьТранзакциюПечати() Экспорт
	
	// Отмена транзакции печати.
	мТранзакцияПечати.Очистить();
	
КонецПроцедуры // ОтменитьТранзакциюПечати()


// Функция открывает требуемый документ.
//
// Параметры:
//	Документ - ДокументСсылка. Документ который требуется открыть и заблокировать, если не указан буедт создан новый документ переданного типа.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ОбъектОткрыть(Объект, знач ТолькоПросмотр = Неопределено, Блокировть = Ложь) Экспорт
	
	Возврат Истина;
	
КонецФункции // ДокументОткрыть()

// Функция cчитывает данные из базы данных.
//
// Параметры:
//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать в памяти.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ОбъектПрочитать(Документ) Экспорт
	
	Возврат Истина;
	
КонецФункции // ДокументПрочитать()

// Функция записывает данные в базу данных.
//
// Параметры:
//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать в базе данных.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ОбъектЗаписать(Документ, РежимЗаписи = Неопределено) Экспорт
	
	Возврат Истина;
	
КонецФункции // ДокументЗаписать()

// Функция записывает данные в базу данных.
//
// Параметры:
//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать в базе данных.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ОбъектУдалить(Документ, ПометкаУдаления = Истина) Экспорт
	
	Возврат Истина;
	
КонецФункции // ДокументЗаписать()

// Функция закрывает требуемый документ.
//
// Параметры:
//	Документ - ДокументОбъект. Документ который требуется закрыть и разаблокировать.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ОбъектЗакрыть(Документ) Экспорт
	
	Возврат Истина;
	
КонецФункции // ДокументЗакрыть()


// Функция открывает требуемый документ.
//
// Параметры:
//	Документ - ДокументСсылка. Документ который требуется открыть и заблокировать, если не указан буедт создан новый документ переданного типа.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументОткрыть(Документ, Знач ТолькоПросмотр = Неопределено, Блокировть = Ложь) Экспорт
	
	// Пакет документов.
	Если (ТипЗнч(Документ) = мТипМассива) Тогда
		
		Для Индекс = 0 По Документ.Количество() - 1 Цикл
			ДокументОбъект = Документ.Получить(Индекс);
			Если Не ДокументОткрыть(ДокументОбъект, ТолькоПросмотр, Блокировть) Тогда
				Возврат Ложь;
			КонецЕсли;
			Документ.Установить(Индекс, ДокументОбъект);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	
	// Получение и блокирование объекта.
	Пока Истина Цикл
		Попытка
			Если (Документ = Неопределено) Тогда
				// -- Транзакция.
				НачатьТранзакцию();
				НачатьТранзакциюПечати();
			Иначе
				Если (Документ = Документ.Ссылка) И Документ.Ссылка.Пустая() Тогда
					// -- Создание.
					ДокументОбъект = Документы[Документ.Ссылка.Метаданные().Имя].СоздатьДокумент();
				Иначе
					
					// -- Открытие.
					Если (Документ = Документ.Ссылка) Тогда
						ДокументОбъект = Документ.ПолучитьОбъект();
					Иначе
						ДокументОбъект = Документ;
					КонецЕсли;
					Если (Не ТолькоПросмотр = Истина) И (Блокировть = Истина) Тогда
						Пока Истина Цикл
							
							Попытка
								//ДокументОбъект.Заблокировать(); 
								Прервать;
							Исключение
								Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Невозможно отрыть документ, документ используется другим пользователем.';uk='Неможливо відкрити документ. Документ використовується іншим користувачем.'")  + Символы.ПС + ОписаниеОшибки() + НСтр("ru='Повторить попытку открытия документа?';uk='Повторити спробу відкрити докумен?'") , РежимДиалогаВопрос.ПовторитьОтмена);
								Если (Результат = КодВозвратаДиалога.Повторить) Тогда
									Продолжить;
								Иначе
									Если (Не ТолькоПросмотр = Ложь) И (Результат = КодВозвратаДиалога.Отмена) Тогда
										Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Открыть документ в режиме только просмотра?';uk='Відкрити документ у режимі пререгляду?'") , РежимДиалогаВопрос.ДаНет);
										Если (Результат = КодВозвратаДиалога.Да) Тогда
											ТолькоПросмотр = Истина;
											Прервать;
										КонецЕсли;
									КонецЕсли;
									Возврат Ложь;
								КонецЕсли;
							КонецПопытки;
							
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Прервать;
		Исключение
			Если (Документ = Неопределено) Тогда
				Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Невозможно выполнить запись, не удается записать данные в информационную базу!';uk='Неможливо виконати запис! Не вдається записати дані у інформаційну базу!'")  + Символы.ПС + НСтр("ru='Повторить попытку записи?';uk='Повторити спробу запису?'") , РежимДиалогаВопрос.ПовторитьОтмена);
			Иначе
				Если Документ.Пустая() Тогда
					Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Невозможно создать документ, не удается создать новый документ!';uk='Неможливо створити документ. Не вдається створити новий документ!'")  + Символы.ПС + НСтр("ru='Повторить попытку создания документа?';uk='Повторити спробу створення документа?'") , РежимДиалогаВопрос.ПовторитьОтмена);
				Иначе
					Результат = FrontOffice.ВывестиВопрос(НСтр("ru='Невозможно отрыть документ, документ не найден!';uk='Неможливо відкрити документ. Документ не знайдено?'")  + Символы.ПС + НСтр("ru='Повторить попытку открытия документа?';uk='Повторити спробу відкриття документа?'") , РежимДиалогаВопрос.ПовторитьОтмена);
				КонецЕсли;
			КонецЕсли;
			Если (Не Результат = КодВозвратаДиалога.Повторить) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Документ = ДокументОбъект;
	Возврат Истина;
	
КонецФункции // ДокументОткрыть()	

// Функция cчитывает данные из базы данных.
//
// Параметры:
//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать в памяти.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументПрочитать(Документ) Экспорт
	
	// Пакет документов.
	Если (ТипЗнч(Документ) = мТипМассива) Тогда
		
		Для Индекс = 0 По Документ.Количество() - 1 Цикл
			ДокументОбъект = Документ.Получить(Индекс);
			Если Не ДокументПрочитать(ДокументОбъект) Тогда
				Возврат Ложь;
			КонецЕсли;
			Документ.Установить(Индекс, ДокументОбъект);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Получение объекта.
	ДокументОбъект = Документ;
	
	// Выборка данных.
	Если (ДокументОбъект = Неопределено) Тогда
		// -- Транзакция.
		Возврат ТранзакцияАктивна();
	Иначе
		// -- Документ.
		Попытка
			ДокументОбъект.Прочитать();	
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДокументПрочитать()

// Функция записывает данные в базу данных.
//
// Параметры:
//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать в базе данных.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументЗаписать(Документ, РежимЗаписи = Неопределено, Дата = Неопределено) Экспорт
	
	// Пакет документов.
	Если (ТипЗнч(Документ) = мТипМассива) Тогда
		
		Для Индекс = 0 По Документ.Количество() - 1 Цикл
			ДокументОбъект = Документ.Получить(Индекс);
			Если Не ДокументЗаписать(ДокументОбъект, РежимЗаписи) Тогда
				Возврат Ложь;
			КонецЕсли;
			Документ.Установить(Индекс, ДокументОбъект);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Получение объекта.
	ДокументОбъект = Документ;
	Если (РежимЗаписи = Неопределено) Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	// Запись объекта.
	Пока Истина Цикл
		Попытка
			Если (ДокументОбъект = Неопределено) Тогда
				// -- Транзакция.
				ЗафиксироватьТранзакцию();
				ЗафиксироватьТранзакциюПечати();
			Иначе
				// -- Документ.
				//ДокументОбъект.ИсторияДействие(Дата, Перечисления.ТипыДействий.ДокументЗаписан);
				Если Не ДокументОбъект.Заблокирован() Тогда
					//ДокументОбъект.Заблокировать(); Заблокирован = Истина;
					Заблокирован = Ложь;
				КонецЕсли;
				ДокументОбъект.Записать(РежимЗаписи);
				Если (Заблокирован = Истина) Тогда
					ДокументОбъект.Разблокировать(); Заблокирован = Ложь;
				КонецЕсли;
			КонецЕсли;
			Прервать;
		Исключение
			Если (Заблокирован = Истина) Тогда
				ДокументОбъект.Разблокировать(); Заблокирован = Ложь;
			КонецЕсли;
			FrontOffice.ВывестиОшибку(ОписаниеОшибки());
			//Если (ДокументОбъект = Неопределено) Тогда
			//	Результат = FrontOffice.ВывестиВопрос("Невозможно выполнить запись, не удается записать данные в информационную базу!" + Символы.ПС + "Повторить попытку записи?", РежимДиалогаВопрос.ПовторитьОтмена);
			//Иначе
			//	Если ТранзакцияАктивна() Тогда 
			//		ОтменитьТранзакцию();
			//		Если ДокументОбъект.ЭтоНовый() Тогда
			//			FrontOffice.ВывестиОшибку("Невозможно создать документ, не удается записать новый документ!");
			//		Иначе
			//			FrontOffice.ВывестиОшибку("Невозможно записать документ, не удается записать текущий документ!");
			//		КонецЕсли;
			//		Результат = КодВозвратаДиалога.Отмена;
			//	Иначе
			//		Если ДокументОбъект.ЭтоНовый() Тогда
			//			Результат = FrontOffice.ВывестиВопрос("Невозможно создать документ, не удается записать новый документ!" + Символы.ПС + "Повторить попытку создания документа?", РежимДиалогаВопрос.ПовторитьОтмена);
			//		Иначе
			//			Результат = FrontOffice.ВывестиВопрос("Невозможно записать документ, не удается записать текущий документ!" + Символы.ПС + "Повторить попытку записи документа?", РежимДиалогаВопрос.ПовторитьОтмена);
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			//Если (Не Результат = КодВозвратаДиалога.Повторить) Тогда
			//	Возврат Ложь;
			//КонецЕсли;
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ДокументЗаписать()

// Функция записывает данные в базу данных.
//
// Параметры:
//	Документ - ДокументОбъект. Документ объект который необходимо актуализировать в базе данных.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументУдалить(Документ, ПометкаУдаления = Истина) Экспорт
	
	// Пакет документов.
	Если (ТипЗнч(Документ) = мТипМассива) Тогда
		
		Для Индекс = 0 По Документ.Количество() - 1 Цикл
			ДокументОбъект = Документ.Получить(Индекс);
			Если Не ДокументУдалить(ДокументОбъект, ПометкаУдаления) Тогда
				Возврат Ложь;
			КонецЕсли;
			Документ.Установить(Индекс, ДокументОбъект);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Получение объекта.
	ДокументОбъект = Документ;
	
	// Проверка состояния.
	Если (ДокументОбъект.ПометкаУдаления = ПометкаУдаления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Удаление объекта.
	ДокументОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	
	//Пока Истина Цикл
	//	Попытка
	//		Если (ДокументОбъект = Неопределено) Тогда
	//			// -- Транзакция.
	//			ЗафиксироватьТранзакцию();
	//			ЗафиксироватьТранзакциюПечати();
	//		Иначе
	//			// -- Документ.
	//			ДокументОбъект.ИсторияДействие(Дата, Перечисления.ТипыДействий.ДокументЗаписан);
	//			ДокументОбъект.Записать(РежимЗаписи);
	//		КонецЕсли;
	//		Прервать;
	//	Исключение
	//		FrontOffice.ВывестиОшибку(ОписаниеОшибки());
	//		Если (ДокументОбъект = Неопределено) Тогда
	//			Результат = FrontOffice.ВывестиВопрос("Невозможно выполнить запись, не удается записать данные в информационную базу!" + Символы.ПС + "Повторить попытку записи?", РежимДиалогаВопрос.ПовторитьОтмена);
	//		Иначе
	//			Если ТранзакцияАктивна() Тогда 
	//				ОтменитьТранзакцию();
	//				Если ДокументОбъект.ЭтоНовый() Тогда
	//					FrontOffice.ВывестиОшибку("Невозможно создать документ, не удается записать новый документ!");
	//				Иначе
	//					FrontOffice.ВывестиОшибку("Невозможно записать документ, не удается записать текущий документ!");
	//				КонецЕсли;
	//				Результат = КодВозвратаДиалога.Отмена;
	//			Иначе
	//				Если ДокументОбъект.ЭтоНовый() Тогда
	//					Результат = FrontOffice.ВывестиВопрос("Невозможно создать документ, не удается записать новый документ!" + Символы.ПС + "Повторить попытку создания документа?", РежимДиалогаВопрос.ПовторитьОтмена);
	//				Иначе
	//					Результат = FrontOffice.ВывестиВопрос("Невозможно записать документ, не удается записать текущий документ!" + Символы.ПС + "Повторить попытку записи документа?", РежимДиалогаВопрос.ПовторитьОтмена);
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если (Не Результат = КодВозвратаДиалога.Повторить) Тогда
	//			Возврат Ложь;
	//		КонецЕсли;
	//	КонецПопытки;
	//КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ДокументЗаписать()

// Функция закрывает требуемый документ.
//
// Параметры:
//	Документ - ДокументОбъект. Документ который требуется закрыть и разаблокировать.
//
// Возвращаемое значение:
//	Булево. Истина в случае успешного выполнения операции.
//
Функция ДокументЗакрыть(Документ) Экспорт
	
	// Пакет документов.
	Если (ТипЗнч(Документ) = мТипМассива) Тогда
		
		Для Индекс = 0 По Документ.Количество() - 1 Цикл
			ДокументОбъект = Документ.Получить(Индекс);
			Если Не ДокументЗакрыть(ДокументОбъект) Тогда
				Возврат Ложь;
			КонецЕсли;
			Документ.Установить(Индекс, ДокументОбъект);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Получение объекта.
	ДокументОбъект = Документ;
	
	// Снятие блокировки с объекта.
	Если (ДокументОбъект = Неопределено) Тогда
		// -- Транзакция.
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
			ОтменитьТранзакциюПечати();
		КонецЕсли;
	Иначе
		// -- Документ.
		Если ДокументОбъект.Заблокирован() Тогда
			ДокументОбъект.Разблокировать();
		КонецЕсли;
	КонецЕсли;
	
	// Обнуление.
	Документ = Неопределено;
	Возврат Истина;
	
КонецФункции // ДокументЗакрыть()


// Функция определяет текущий режим работы рабочей станции.
//
// Возвращаемое значение:
//  СправочникСсылка.РежимыРаботы. Текущий режим работы рабочей станции.
//
Функция ТекущийРежимРаботы(РежимРаботы = Неопределено) Экспорт
	
	// Определения режима работы.
	Если (РежимРаботы = Неопределено) Тогда
		Если ЭтотОбъект.РежимРаботы.ДополнительныеСвойства.Свойство("УстановленПользователем") Тогда
			УстанавливаемыйРежимРаботы = ЭтотОбъект.РежимРаботы.Ссылка;
		Иначе
			УстанавливаемыйРежимРаботы = Компьютер.РежимРаботы;
		КонецЕсли;
	Иначе
		УстанавливаемыйРежимРаботы = РежимРаботы.Ссылка;
	КонецЕсли;
	
	// Актуализация режима работы.
	Если (Не ЭтотОбъект.РежимРаботы.Ссылка = УстанавливаемыйРежимРаботы) Тогда
		Если УстанавливаемыйРежимРаботы.Пустая() Тогда
			ЭтотОбъект.РежимРаботы = Неопределено;
		Иначе
			ЭтотОбъект.РежимРаботы = УстанавливаемыйРежимРаботы.ПолучитьОбъект();
		КонецЕсли;
		Если (РежимРаботы = Неопределено) Тогда
			ЭтотОбъект.РежимРаботы.ДополнительныеСвойства.Удалить("УстановленПользователем")
		Иначе
			ЭтотОбъект.РежимРаботы.ДополнительныеСвойства.Вставить("УстановленПользователем")
		КонецЕсли;
	КонецЕсли;
	
	// Определение режима работы в зависимости от времени.
	ТекущийРежимРаботы = ЭтотОбъект.РежимРаботы.Ссылка;
	Если Не РежимBackOffice Тогда
		
		// TODO: Определение режима работы в зависимости от времени.
		
	КонецЕсли;
	
	// Переключение режима работы.
	Если (Не ТекущийРежимРаботы = глЗначениеПеременной("глТекущийРежимРаботы")) Тогда
		
		ПолныеПрава.УстановитьИзменяемыеПараметрыСеансаПользователя(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущаяГруппаПользователей"), ТекущийРежимРаботы);
		
		// -- Оповещение.
		Оповестить("FrontOfficeИзмененРежимРаботы", ТекущийРежимРаботы);
		
	КонецЕсли;
	
	// Режим работы.
	Возврат ТекущийРежимРаботы;
	
КонецФункции // ТекущийРежимРаботы()

// Функция определяет текущуй ресторан рабочей станции.
//
// Возвращаемое значение:
//  СправочникСсылка.Рестораны. Текущий ресторан рабочей станции.
//
Функция ТекущийРесторан() Экспорт
	
	// Проверка режима работы.
	Если РежимРаботы.Ссылка.Пустая() Тогда
		Возврат Справочники.Рестораны.ПустаяСсылка();
	КонецЕсли;
	
	// Ресторан.
	Возврат УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойРесторан);
	
КонецФункции // ТеукущийРесторан()

// Функция определяет текущая ресторанная зона рабочией станции.
//
// Возвращаемое значение:
//  СправочникСсылка.Столы. Текущая ресторанная зона рабочей станции.
//
Функция ТекущаяРестораннаяЗона() Экспорт
	
	// Проверка режима работы.
	Если РежимРаботы.Ссылка.Пустая() Тогда
		Возврат Справочники.Столы.ПустаяСсылка();
	КонецЕсли;
	
	// Ресторан.
	Возврат УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнаяРестораннаяЗона);
	
КонецФункции // ТекущаяРестораннаяЗона()

// Функция определяет текущуй рабочий центр рабочией станции.
//
// Возвращаемое значение:
//  СправочникСсылка.РабочиеЦентры. Текущуй рабочий центр рабочей станции.
//
Функция ТекущийРабочийЦентр() Экспорт
	
	// Проверка режима работы.
	Если РежимРаботы.Ссылка.Пустая() Тогда
		Возврат Справочники.РабочиеЦентры.ПустаяСсылка();
	КонецЕсли;
	
	// Ресторан.
	Возврат УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойРабочийЦентр);
	
КонецФункции // ТеукущийРабочийЦентр()

// Функция определяет текущую кассовую дату рабочей станции.
//
// Возвращаемое значение:
//  Дата. Текущая кассовая дата рабочей станции.
//
Функция ТекущаяКассоваяДата(КассаККМ = Неопределено) Экспорт
	
	// Текущая дата.
	ТекущаяДата = ТекущаяДата();
	
	// Касса ККМ.
	Если (КассаККМ = Неопределено) Или КассаККМ.КассоваяДата.Пустая() Тогда
		КассоваяДата = УправлениеПользователями.ПолучитьЗначениеНастройки(ПланыВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнаяКассоваяДата);
		ПроверятьАктуальность = Истина;
	Иначе
		КассоваяДата = КассаККМ.КассоваяДата;
		ПроверятьАктуальность = Ложь;
	КонецЕсли;
	
	// Параметры кассововй даты.
	СтруктураРесурсов = РегистрыСведений.КассовыеДаты.Получить(Новый Структура("КассоваяДата", КассоваяДата));
	КассоваяДатаДата = СтруктураРесурсов.Дата;	
	АстрономическаяДата = СтруктураРесурсов.АстрономическаяДата;
	
	// Актуальность кассвой даты.
	Если ПроверятьАктуальность Тогда
		мКассоваяДатаАктуальна = (КассоваяДатаДата > НачалоДня(ТекущаяДата) - 86400) И (АстрономическаяДата < ТекущаяДата + 86400);
	КонецЕсли;
	
	// Кассовая дата (дата + время).
	Возврат КассоваяДатаДата + Час(ТекущаяДата) * 3600 + Минута(ТекущаяДата) * 60 + Секунда(ТекущаяДата);
	
КонецФункции // ТекущаяКассоваяДата()



Функция ПечатьВстречки(Документ, ТаблицаПозиций, Реализация = Истина, Повтор = Ложь, Ответ = Неопределено) Экспорт
	
	// Проверка.
	Если Не Булево(ТаблицаПозиций.Количество()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Получение объекта.
	ДокументОбъект = Документ;
	
	Возврат Истина;
	
КонецФункции // ПечатьВстречки()

Функция ПечатьПречека(Документ, ТаблицаПозиций, ТаблицаСкидок, Ответ = Неопределено) Экспорт
	
	// Получение объекта.
	ДокументОбъект = Документ;
	
	Возврат Истина;
	
КонецФункции // ПечатьПречека()

// Функция печати чеков ККМ документа.
//
// Параметры:
//	Документ - ДокументОбъект.РеализацияТоваровУслуг. Распечатываемый документ;
//	ЧекККМ - ДокументОбъект.ЧекККМ. Распечатываемый чек ККМ.
//
// Возвращаемое значение:
//	Булево. Истина в случае если документ распечатан успешно;
//  Ответ - Строка. Описание ошибки в случае неудачи.
//
Функция ПечатьККМ(Документ, ЧекККМ, Ответ = Неопределено, ПечататьНаККМ = Истина) Экспорт
	
	// Получение объекта.
	ДокументОбъект = Документ; ДокументЧекККМ = ЧекККМ;
	Результат = Истина;
	
	// Действие.
	Если (ДокументЧекККМ.ОтражатьВНалоговомУчете)и(ПечататьНаККМ) Тогда
		
		Результат = ДокументЧекККМ.ПровестиИРаспечататьЧек(Ответ, Неопределено, Неопределено);
		
	Иначе
		
		Попытка
			ДокументЧекККМ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Ответ = НСтр("ru='Невозможно записать документ, не удается записать подчиненный документ «';uk='Неможливо записати документ. Невдається записати підлеглий документ «'")  + Метаданные.Документы.ЧекККМ.Синоним + "»!";
			Результат = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Результат Тогда
		Попытка
			ДокументЧекККМ.Прочитать();
			ДокументЧекККМ.Удалить();
		Исключение
			____Сообщение(ОписаниеОшибки());
		КонецПопытки;
		Попытка
			Если Документ.Проведен Тогда
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
			Иначе
				Документ.Записать(РежимЗаписиДокумента.Проведение);	
			КонецЕсли;
		Исключение
			____Сообщение(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	// Операция успешно завершена.
	Возврат Результат;
	
КонецФункции // ПечатьККМ()



Процедура ЗагловокПредставлениеДополнить(ТекущееПредставление, Дополнение, СтрокаКонкатенации)
	
	Если Не ПустаяСтрока(Дополнение) Тогда
		ТекущееПредставление = ТекущееПредставление + Дополнение + СтрокаКонкатенации;
	КонецЕсли;
	
КонецПроцедуры // ЗагловокПредставлениеДополнить()

Функция ЗагловокПредставлениеРесторана() Экспорт
	
	ТекущийРесторан = ТекущийРесторан();
	
	Если ТекущийРесторан.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРесторанам) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строка(ТекущийРесторан);
	КонецЕсли;
	
КонецФункции // ЗагловокПредставлениеРесторана()

Функция ЗагловокПредставлениеРестораннойЗоны() Экспорт
	
	ТекущаяРестораннаяЗона = ТекущаяРестораннаяЗона();
	
	Если ТекущаяРестораннаяЗона.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРестораннымЗонам) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строка(ТекущаяРестораннаяЗона);
	КонецЕсли;
	
КонецФункции // ЗагловокПредставлениеРестораннойЗоны()

Функция ЗагловокПредставлениеРабочийЦентр() Экспорт
	
	ТекущийРабочийЦентр = ТекущийРабочийЦентр();
	
	Если ТекущийРабочийЦентр.Пустая() Или УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeИгнорироватьРазделениеПоРабочимЦентрам) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строка(ТекущийРабочийЦентр);
	КонецЕсли;
	
КонецФункции // ЗагловокПредставлениеРесторана()

Функция ЗагловокПредставлениеРежимаРаботы() Экспорт
	
	ТекущийРежимРаботы = ТекущийРежимРаботы();
	
	Если ТекущийРежимРаботы.Пустая() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строка(ТекущийРежимРаботы);
	КонецЕсли;
	
КонецФункции // ЗагловокПредставлениеРежимаРаботы()

Функция ЗагловокПредставлениеКомпьютера() Экспорт
	
	ТекущийКомпьютер = Компьютер.Ссылка;
	
	Если ТекущийКомпьютер.Пустая() Тогда
		Возврат Неопределено;
	Иначе
		Если ПустаяСтрока(Сервер) Тогда
			Возврат СокрП(Компьютер) + НСтр("ru=' (сетевое подключение)';uk=' (мережеве підключення)'");
		Иначе
			Возврат СокрП(Компьютер) + НСтр("ru=' (терминальное подключение на ';uk=' (термінальне підключення на '")  + Сервер + ")";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ЗагловокПредставлениеКомпьютера()

Функция ЗагловокПредставлениеСформировать(Модуль, Ресторан = Ложь, РестораннаяЗона = Ложь, РабочийЦентр = Ложь, РежимРаботы = Ложь) Экспорт
	
	Результат = Строка(Неопределено);
	
	Если РежимРаботы Тогда
		ЗагловокПредставлениеДополнить(Результат, ЗагловокПредставлениеРежимаРаботы(), " » ");
	КонецЕсли;
	Если Ресторан Тогда
		ЗагловокПредставлениеДополнить(Результат, ЗагловокПредставлениеРесторана(), " » ");
	КонецЕсли;
	Если РестораннаяЗона Тогда
		ЗагловокПредставлениеДополнить(Результат, ЗагловокПредставлениеРестораннойЗоны(), " » ");
	КонецЕсли;
	Если РабочийЦентр Тогда
		ЗагловокПредставлениеДополнить(Результат, ЗагловокПредставлениеРабочийЦентр(), " » ");
	КонецЕсли;
	
	Возврат Результат + Строка(Модуль);
	
КонецФункции // ЗагловокПредставлениеСформировать()

Функция ЗагловокПредставлениеДокументаСформировать(Документ) Экспорт
	
	Результат = Строка(Неопределено);
	
	//ЗагловокПредставлениеДополнить(Результат, Строка(Документ.Сотрудник), " › ");
	//КодЯзыка = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	//ЗагловокПредставлениеДополнить(Результат, ОбщегоНазначения.СформироватьЗаголовокДокумента(Документ, Документ.Метаданные().Синоним,КодЯзыка), " › ");
	//
	//Если Документ.ПометкаУдаления Тогда
	//	Возврат Результат + НСтр("ru='Удаленный';uk='Видалений'") ;
	//Иначе
	//	Если Документ.Проведен Тогда
	//		Возврат Результат + НСтр("ru='Закрытый';uk='Закритий'") ;
	//	Иначе
	//		Возврат Результат + НСтр("ru='Открытый';uk='Відкритий'") ;
	//	КонецЕсли;
	//КонецЕсли;
	
	//Костенюк Александр-Старт 17.04.2012
	// Изменение формата отображения заголовка для РТУ
	КодЯзыка = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Результат = "Заказ № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		
		Если Документ.ПометкаУдаления Тогда
			Результат = Результат +" "+ НСтр("ru='Удаленный';uk='Видалений'") ;
		Иначе
			Если Документ.Проведен Тогда
				Результат = Результат +" "+ НСтр("ru='Закрыт';uk='Закритий'") ;
			Иначе
				Результат = Результат +" "+ НСтр("ru='Открыт';uk='Відкритий'") ;
			КонецЕсли;
		КонецЕсли;
		
		Результат = Результат +" "+ Формат(Документ.Дата, "Л=; ДЛФ=DT");

		Возврат Результат;
		
	Иначе
		ЗагловокПредставлениеДополнить(Результат, Строка(Документ.Сотрудник), " › ");
		ЗагловокПредставлениеДополнить(Результат, ОбщегоНазначения.СформироватьЗаголовокДокумента(Документ, Документ.Метаданные().Синоним,КодЯзыка), " › ");
		Если Документ.ПометкаУдаления Тогда
			Возврат Результат + НСтр("ru='Удаленный';uk='Видалений'") ;
		Иначе
			Если Документ.Проведен Тогда
				Возврат Результат + НСтр("ru='Закрытый';uk='Закритий'") ;
			Иначе
				Возврат Результат + НСтр("ru='Открытый';uk='Відкритий'") ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Костенюк Александр-Финиш 17.04.2012
			
КонецФункции // ЗагловокПредставлениеСформировать()

//Функция ЗагловокПредставлениеСпискаДокументовСформировать(Реализация = Истина, Списание = Истина, Открытые = Истина) Экспорт
//	
//	Результат = Строка(Неопределено);
//	
//	Если Открытые Тогда
//		ПривилигированнаяРеализация = (Не Реализация) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаОткрытыхЗаказов) = Перечисления.ПраваДоступаПользователей.Привилегированные);
//		ПривилигированнаяСписание = (Не Списание) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаОткрытыхСписаний) = Перечисления.ПраваДоступаПользователей.Привилегированные);
//	Иначе
//		ПривилигированнаяРеализация = (Не Реализация) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаЗакрытыхЗаказов) = Перечисления.ПраваДоступаПользователей.Привилегированные);
//		ПривилигированнаяСписание = (Не Списание) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаЗакрытыхСписаний) = Перечисления.ПраваДоступаПользователей.Привилегированные);
//	КонецЕсли;
//	
//	Если Реализация И Списание Тогда
//		ЗагловокПредставлениеДополнить(Результат, Метаданные.Документы.РеализацияТоваровУслуг.Синоним + " + " + НРег(Метаданные.Документы.СписаниеТоваров.Синоним), " › ");
//	ИначеЕсли Реализация Тогда
//		ЗагловокПредставлениеДополнить(Результат, Метаданные.Документы.РеализацияТоваровУслуг.Синоним, " › ");
//	ИначеЕсли Списание Тогда
//		ЗагловокПредставлениеДополнить(Результат, Метаданные.Документы.СписаниеТоваров.Синоним, " › ");
//	Иначе
//		ЗагловокПредставлениеДополнить(Результат, НСтр("ru='Недостаточно прав доступа';uk='Недостатньо прав доступу'") , " › ");
//	КонецЕсли;
//	
//	Если (Не (ПривилигированнаяРеализация И ПривилигированнаяСписание)) Тогда
//		Результат = Строка(УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"))) + " › " + Результат;
//	КонецЕсли;
//	
//	Если Открытые Тогда
//		Возврат Результат + НСтр("ru='Открытые документы';uk='Відкриті документи'") ;
//	Иначе
//		Возврат Результат + НСтр("ru='Закрытые документы';uk='Закриті документи'") ;
//	КонецЕсли;
//	
//КонецФункции // ЗагловокПредставлениеСформировать()

// Процедура размещает стандартный заголовок на требуемой форме.
//
// Параметры:
//	Форма - Форма. Форма на которой необходимо поместить стандартный заголовок;
//	ПоместитьНа - Панель. Определяет, какой панели формы будет принадлежать стандартный заголовок. Если указана панель, то добавляемый элемент размещается на текущей странице панели;
//	ОсновнаяФорма - Булево. Определяет является ли форма основной формой рабочего места.
//
Процедура ЗаголовокПоместить(Форма, ПоместитьНа = Неопределено, ОсновнаяФорма = Ложь) Экспорт
	
	// Стандартные разменры.
	ШиринаКнопки = 44; ВысотаКнопки = 40; ОтступКнопки = 6;
	ШиринаКнопкиАвторизации = 256;
	ВысотаНадписиОсновной = 22; ШрифтНадписиОсновной = ШрифтыСтиля.ШрифтТекстаКнопкиПоУмолчанию;
	ВысотаНадписиВспомогательной = 18;  ШрифтНадписиВспомогательной = ШрифтыСтиля.ШрифтТекста;
	ШиринаНадписиКассвойДаты = 148;
	ШиринаНадписиВремени = 78;
	
	// Форма.
	Форма.Заголовок = НСтр("ru='1С:Предприятие - ';uk='1С:Підприємство - '")  + Метаданные.Синоним;
	Форма.ТекущаяДата = ТекущаяДата();
	Форма.ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверитьВремя",50);
	
	// Панель.
	ПоместитьНа.Видимость = Ложь;
	ПоместитьНа.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	
	// Назад.
	ЭлементФормы = Форма.ЭлементыФормы.Добавить(Тип("Кнопка"), "КнопкаНазад", Ложь, ПоместитьНа);
	ЭлементФормы.Доступность = Ложь;
	ЭлементФормы.Лево = ОтступКнопки;
	ЭлементФормы.Верх = ОтступКнопки;
	ЭлементФормы.Ширина = ШиринаКнопки;
	ЭлементФормы.Высота = ВысотаКнопки;
	Если ОсновнаяФорма Тогда
		ЭлементФормы.Картинка = БиблиотекаКартинок.Пользователь;
	Иначе	
		ЭлементФормы.Картинка = БиблиотекаКартинок.FrontOfficeНазад;
	КонецЕсли;
	ЭлементФормы.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	ЭлементФормы.УстановитьДействие("Нажатие", Новый Действие("КнопкаНазадНажатие"));
	
	// Авторизация.
	ЭлементФормы = Форма.ЭлементыФормы.Добавить(Тип("Кнопка"), "КнопкаАвторизация", Ложь, ПоместитьНа);
	ЭлементФормы.Доступность = Ложь;
	ЭлементФормы.Лево = ОтступКнопки + (ШиринаКнопки - 1);
	ЭлементФормы.Верх = ОтступКнопки;
	ЭлементФормы.Ширина = ШиринаКнопкиАвторизации;
	ЭлементФормы.Высота = ВысотаКнопки;
	ЭлементФормы.Заголовок = НСтр("ru='Авторизация...';uk='Авторизація...'") ;
	ЭлементФормы.МногострочныйРежим = Истина;
	ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ЭлементФормы.УстановитьДействие("Нажатие", Новый Действие("КнопкаАвторизацияНажатие"));
	
	// Информация вспомогательная.
	ЭлементФормы = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьИнформацияВспомогательная", Ложь, ПоместитьНа);
	ЭлементФормы.Лево = ОтступКнопки + (ШиринаКнопки - 1) + ШиринаКнопкиАвторизации + ОтступКнопки;
	ЭлементФормы.Верх = ОтступКнопки + ВысотаКнопки - ВысотаНадписиВспомогательной;
	ЭлементФормы.Ширина = ПоместитьНа.Ширина - ЭлементФормы.Лево - ОтступКнопки - ШиринаНадписиКассвойДаты - ОтступКнопки - ШиринаНадписиВремени - ОтступКнопки - ШиринаКнопки - ОтступКнопки;
	ЭлементФормы.Высота = ВысотаНадписиВспомогательной;
	ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ЭлементФормы.Шрифт = ШрифтНадписиВспомогательной;
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПоместитьНа, ГраницаЭлементаУправления.Право);
	ЭлементФормы.Данные = "ИнформацияВспомогательная";
	
	// Информация основная.
	ЭлементФормы = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьИнформацияОсновная", Ложь, ПоместитьНа);
	ЭлементФормы.Лево = ОтступКнопки + (ШиринаКнопки - 1) + ШиринаКнопкиАвторизации + ОтступКнопки;
	ЭлементФормы.Верх = ОтступКнопки;
	ЭлементФормы.Ширина = ПоместитьНа.Ширина - ЭлементФормы.Лево - ОтступКнопки - ШиринаНадписиВремени - ОтступКнопки - ШиринаКнопки - ОтступКнопки;
	ЭлементФормы.Высота = ВысотаНадписиОсновной;
	ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ЭлементФормы.Шрифт = ШрифтНадписиОсновной;
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПоместитьНа, ГраницаЭлементаУправления.Право);
	ЭлементФормы.Данные = "ИнформацияОсновная";
	
	// Кассовая дата.
	ЭлементФормы = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьТекущаяКассоваяДата", Ложь, ПоместитьНа);
	ЭлементФормы.Лево = ПоместитьНа.Ширина - ШиринаНадписиКассвойДаты - ОтступКнопки - ШиринаНадписиВремени - ОтступКнопки - ШиринаКнопки - ОтступКнопки;
	ЭлементФормы.Верх = ОтступКнопки + ВысотаКнопки - ВысотаНадписиОсновной;
	ЭлементФормы.Ширина = ШиринаНадписиКассвойДаты;
	ЭлементФормы.Высота = ВысотаНадписиОсновной;
	ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	ЭлементФормы.Шрифт = ШрифтНадписиОсновной;
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПоместитьНа, ГраницаЭлементаУправления.Право);
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПоместитьНа, ГраницаЭлементаУправления.Право);
	Если Локализация.КодЯзыкаИнтерфейса() = "uk" Тогда
		ЭлементФормы.Формат = "Л=uk_UA; ДЛФ=DD";
	Иначе	
		ЭлементФормы.Формат = "Л=ru_RU; ДЛФ=DD";
	КонецЕсли;	
	
	// Дата.
	ЭлементФормы = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьТекущаяДата", Ложь, ПоместитьНа);
	ЭлементФормы.Лево = ПоместитьНа.Ширина - ШиринаНадписиВремени - ОтступКнопки - ШиринаКнопки - ОтступКнопки;
	ЭлементФормы.Верх = ОтступКнопки + ВысотаКнопки - ВысотаНадписиВспомогательной;
	ЭлементФормы.Ширина = ШиринаНадписиВремени;
	ЭлементФормы.Высота = ВысотаНадписиВспомогательной;
	ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЭлементФормы.Шрифт = ШрифтНадписиВспомогательной;
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПоместитьНа, ГраницаЭлементаУправления.Право);
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПоместитьНа, ГраницаЭлементаУправления.Право);
	Если Локализация.КодЯзыкаИнтерфейса() = "uk" Тогда
		ЭлементФормы.Формат = "Л=uk_UA; ДЛФ=D";
	Иначе	
		ЭлементФормы.Формат = "Л=ru_RU; ДЛФ=D";
	КонецЕсли;
	
	ЭлементФормы.Данные = "ТекущаяДата";
	
	// Время.
	ЭлементФормы = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьТекущееВремя", Ложь, ПоместитьНа);
	ЭлементФормы.Лево = ПоместитьНа.Ширина - ШиринаНадписиВремени - ОтступКнопки - ШиринаКнопки - ОтступКнопки;
	ЭлементФормы.Верх = ОтступКнопки;
	ЭлементФормы.Ширина = ШиринаНадписиВремени;
	ЭлементФормы.Высота = ВысотаНадписиОсновной;
	ЭлементФормы.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЭлементФормы.Шрифт = ШрифтНадписиОсновной;
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПоместитьНа, ГраницаЭлементаУправления.Право);
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПоместитьНа, ГраницаЭлементаУправления.Право);
	ЭлементФормы.Формат = "ДФ=H:mm";
	ЭлементФормы.Данные = "ТекущаяДата";
	
	// Закрыть.
	ЭлементФормы = Форма.ЭлементыФормы.Добавить(Тип("Кнопка"), "КнопкаЗакрыть", ОсновнаяФорма, ПоместитьНа);
	ЭлементФормы.Доступность = Ложь;
	ЭлементФормы.Лево = ПоместитьНа.Ширина - ШиринаКнопки - ОтступКнопки;
	ЭлементФормы.Верх = ОтступКнопки;
	ЭлементФормы.Ширина = ШиринаКнопки;
	ЭлементФормы.Высота = ВысотаКнопки;
	ЭлементФормы.Заголовок = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Строка"));
	ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЭлементФормы.Картинка = БиблиотекаКартинок.FrontOfficeЗавершениеСеанса;
	ЭлементФормы.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	ЭлементФормы.УстановитьДействие("Нажатие", Новый Действие("КнопкаЗакрытьНажатие"));
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПоместитьНа, ГраницаЭлементаУправления.Право);
	ЭлементФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПоместитьНа, ГраницаЭлементаУправления.Право);
	
	// Панель.
	ПоместитьНа.Видимость = Истина;
	
КонецПроцедуры // ЗаголовокПоместить()

// Процедура обновляет данные стандартного заголовока на требуемой форме.
//
// Параметры:
//	Форма - Форма. Форма на которой необходимо обновить стандартный заголовок.
//
Процедура ЗаголовокОбновить(Форма, ИнформацияОсновная = Неопределено, ИнформацияВспомогательная = Неопределено) Экспорт
	
	// Состояние авторизации.
	Авторизирован = ПользовательАвторизирован();
	
	// Форма.
	Форма.Заголовок = "1С:Предприятие - " + Метаданные.Синоним;
	
	// Пользователь.
	Если Авторизирован Тогда
		Сотрудник = УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"));
		Если (Не Сотрудник = Неопределено) И (Не Сотрудник.Ссылка.Пустая()) Тогда
			Заголовок = Строка(Сотрудник) + Символы.ПС;
		Иначе
			Заголовок = Строка(Неопределено);
		КонецЕсли;
		Заголовок = Заголовок + глЗначениеПеременной("глТекущаяГруппаПользователей");
	Иначе
		Заголовок = НСтр("ru='Авторизация...';uk='Авторизація...'") ;
	КонецЕсли;
	Форма.ЭлементыФормы.КнопкаАвторизация.Заголовок = Заголовок;
	
	// Кассовая дата.
	Форма.ЭлементыФормы.НадписьТекущаяКассоваяДата.Значение = ТекущаяКассоваяДата();
	Если (мКассоваяДатаАктуальна = Истина) Тогда
		Форма.ЭлементыФормы.НадписьТекущаяКассоваяДата.ЦветТекста = ЦветаСтиля.ЦветФонаВыделенияПоля;
	Иначе
		Форма.ЭлементыФормы.НадписьТекущаяКассоваяДата.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	КонецЕсли;
	
	// Авторизирование.
	Форма.ЭлементыФормы.КнопкаЗакрыть.Доступность = Авторизирован;
	
	// Видимость.
	Если (Не Форма.ЭлементыФормы.ПанельЗагрузка.Страницы.Найти("СтраницаЗакгрузка") = Неопределено)  Тогда
		Форма.ЭлементыФормы.КнопкаНазад.Доступность = Истина;
		Форма.ЭлементыФормы.КнопкаНазад.Видимость = Истина;
		Форма.ЭлементыФормы.КнопкаАвторизация.Доступность = Истина;
		Форма.ЭлементыФормы.КнопкаАвторизация.Видимость = Истина;
		Форма.ЭлементыФормы.НадписьИнформацияОсновная.Видимость = Истина;
		Форма.ЭлементыФормы.НадписьИнформацияВспомогательная.Видимость = Истина;
		Форма.ЭлементыФормы.НадписьТекущаяКассоваяДата.Видимость = Истина;
		Форма.ЭлементыФормы.НадписьТекущееВремя.Видимость = Истина;
		Форма.ЭлементыФормы.НадписьТекущаяДата.Видимость = Истина;
		Форма.ЭлементыФормы.КнопкаЗакрыть.Видимость = Истина;
		
		// -- Удаление страницы.
		Форма.ЭлементыФормы.ПанельЗагрузка.Страницы.Удалить(Форма.ЭлементыФормы.ПанельЗагрузка.Страницы.Индекс(Форма.ЭлементыФормы.ПанельЗагрузка.Страницы.СтраницаЗакгрузка));
	КонецЕсли;
	
	// Информация.
	Если (Не ИнформацияОсновная = Неопределено) Тогда
		Форма.ИнформацияОсновная = ИнформацияОсновная;
	КонецЕсли;
	Если (Не ИнформацияВспомогательная = Неопределено) Тогда
		Форма.ИнформацияВспомогательная = ИнформацияВспомогательная;
	КонецЕсли;
	
КонецПроцедуры // ЗаголовокОбновить()

// Размещает элемент управления на форме.
//
// Параметры:
//	Форма - Форма. Форма на которую необходимо поместить элемент управления;
//	ПоместитьНа - Панель. Определяет, какой панели формы принадлежит создаваемый элемент. Если указана панель, то добавляемый элемент размещается на текущей странице панели;
//	Нажатие - Действие, Строка. Содержит действие или имя процедуры модуля котороая будет выполнятся при нажатии на элемент управления;
//	... - Число. Задают отступы размещаемого элемент управления от краев панели формы.
//
Процедура ТабличноеПолеПоместить(ТабличноеПоле, Форма = Неопределено, ПоместитьНа = Неопределено, Нажатие = Неопределено, Страница = Неопределено, НеМенятьРазмер = Ложь) Экспорт
	
	// Настройка элемента.
	ТабличноеПоле.ДополнительныеКнопкиПолосыПрокрутки = Истина;
	ТабличноеПоле.ШиринаКнопокПолосыПрокрутки = Макс(ТабличноеПоле.ШиринаКнопокПолосыПрокрутки, 40);
	ТабличноеПоле.ВысотаКнопокПолосыПрокрутки = Макс(ТабличноеПоле.ВысотаКнопокПолосыПрокрутки, 40);
	ТабличноеПоле.ВысотаПодвала = Макс(ТабличноеПоле.ВысотаПодвала, 20);
	ТабличноеПоле.ВысотаШапки = Макс(ТабличноеПоле.ВысотаШапки, 20);
	Если Не НеМенятьРазмер Тогда
		ТабличноеПоле.МинимальнаяШиринаКолонки = Макс(ТабличноеПоле.МинимальнаяШиринаКолонки, 40);
		ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(ТабличноеПоле.МинимальнаяВысотаСтроки, 40);
	КонецЕсли;
	
	//Костенюк Александр-Старт 05.04.2012
	// Жестко задаем размер
	Если НеМенятьРазмер Тогда
		ТабличноеПоле.МинимальнаяШиринаКолонки = Макс(ТабличноеПоле.МинимальнаяШиринаКолонки, 40);
		ТабличноеПоле.МинимальнаяВысотаСтроки = Макс(ТабличноеПоле.МинимальнаяВысотаСтроки, 25);
	КонецЕсли;
	//Костенюк Александр-Финиш 05.04.2012
	
	// Размещение.
	Если (Не Форма = Неопределено) И (Не ПоместитьНа = Неопределено) И (Не Нажатие = Неопределено) Тогда
		ТабличноеПоле.Поместить(Форма, ПоместитьНа, Нажатие, Страница);
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеПоместить()

// Размещает элемент управления на форме.
//
// Параметры:
//	Форма - Форма. Форма на которую необходимо поместить элемент управления;
//	ПоместитьНа - Панель. Определяет, какой панели формы принадлежит создаваемый элемент. Если указана панель, то добавляемый элемент размещается на текущей странице панели;
//	Нажатие - Действие, Строка. Содержит действие или имя процедуры модуля котороая будет выполнятся при нажатии на элемент управления;
//	... - Число. Задают отступы размещаемого элемент управления от краев панели формы.
//
Процедура КоманднаяПанельПоместить(КоманднаяПанель, Форма = Неопределено, ПоместитьНа = Неопределено, Нажатие = Неопределено, Страница = Неопределено, НеМенятьРазмер = Ложь) Экспорт
	
	// Настройка элемента.
	Если Не НеМенятьРазмер Тогда
		КоманднаяПанель.МинимальнаяШиринаКолонки = Макс(КоманднаяПанель.МинимальнаяШиринаКолонки, 40 + КоманднаяПанель.МежкнопочныйИнтервал);
		КоманднаяПанель.МинимальнаяВысотаСтроки = Макс(КоманднаяПанель.МинимальнаяВысотаСтроки, 40 + КоманднаяПанель.МежкнопочныйИнтервал);
	КонецЕсли;
	
	// Размещение.
	Если (Не Форма = Неопределено) И (Не ПоместитьНа = Неопределено) И (Не Нажатие = Неопределено) Тогда
		КоманднаяПанель.Поместить(Форма, ПоместитьНа, Нажатие, Страница);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПоместить()

Функция ВыполнитьОтложенно(Форма = Неопределено, ПриОтложенномВыполнении = Неопределено, Параметр1 = Null, Параметр2 = Null, Параметр3 = Null, Параметр4 = Null) Экспорт
	
	// Выполнение.
	Если (Форма = Неопределено) Тогда
		Если (мОтложенноеВыполнение = Неопределено) Тогда
			Результат = Ложь;
		Иначе
			мОтложенноеВыполнение.Выполнение = Истина;
			
			Попытка
				Если (мОтложенноеВыполнение.Параметр1 = Null) Тогда
					Выполнить("мОтложенноеВыполнение.Форма." + мОтложенноеВыполнение.ПриОтложенномВыполнении + "();");
				ИначеЕсли (мОтложенноеВыполнение.Параметр2 = Null) Тогда
					Выполнить("мОтложенноеВыполнение.Форма." + мОтложенноеВыполнение.ПриОтложенномВыполнении + "(мОтложенноеВыполнение.Параметр1);");
				ИначеЕсли (мОтложенноеВыполнение.Параметр3 = Null) Тогда
					Выполнить("мОтложенноеВыполнение.Форма." + мОтложенноеВыполнение.ПриОтложенномВыполнении + "(мОтложенноеВыполнение.Параметр1, мОтложенноеВыполнение.Параметр2);");
				ИначеЕсли (мОтложенноеВыполнение.Параметр4 = Null) Тогда
					Выполнить("мОтложенноеВыполнение.Форма." + мОтложенноеВыполнение.ПриОтложенномВыполнении + "(мОтложенноеВыполнение.Параметр1, мОтложенноеВыполнение.Параметр2, мОтложенноеВыполнение.Параметр3);");
				Иначе
					Выполнить("мОтложенноеВыполнение.Форма." + мОтложенноеВыполнение.ПриОтложенномВыполнении + "(мОтложенноеВыполнение.Параметр1, мОтложенноеВыполнение.Параметр2, мОтложенноеВыполнение.Параметр3, мОтложенноеВыполнение.Параметр4);");
				КонецЕсли;
				Результат = Истина;
			Исключение
				Результат = Ложь;
			КонецПопытки;
			
			мОтложенноеВыполнение = Неопределено;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Подключение.
	Если (мОтложенноеВыполнение = Неопределено) Тогда
		Форма.ПодключитьОбработчикОжидания("ОбработчикОжиданияОтложенноеВыполнение", 0.000001, Истина);
		мОтложенноеВыполнение = Новый Структура("Выполнение,Форма,ПриОтложенномВыполнении,Параметр1,Параметр2,Параметр3,Параметр4", Ложь, Форма, ПриОтложенномВыполнении, Параметр1, Параметр2, Параметр3, Параметр4);
	Иначе
		Возврат Не мОтложенноеВыполнение.Выполнение;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВыполнитьОтложенно()

Функция ПериодОбновленияДанных() Экспорт
	
	Возврат 15;
	
КонецФункции // ПериодОбновленияДанных()

// Функция возвращает список поддерживаемых видов ТО, по переданным параметрам.
//
Функция ПолучитьПоддерживаемыеВидыТО(ПоддерживаемыйВид1 = Неопределено, ПоддерживаемыйВид2 = Неопределено, ПоддерживаемыйВид3 = Неопределено, ПоддерживаемыйВид4 = Неопределено, 
	ПоддерживаемыйВид5 = Неопределено, ПоддерживаемыйВид6 = Неопределено, ПоддерживаемыйВид7 = Неопределено, ПоддерживаемыйВид8 = Неопределено) Экспорт
	
	Если (ТипЗнч(ПоддерживаемыйВид1) = мТипСпискаЗначений) Тогда
		СписокПоддерживаемогоТО = ПоддерживаемыйВид1;
	Иначе									 
		СписокПоддерживаемогоТО = Новый СписокЗначений;
		Для Индекс = 1 По 8 Цикл
			ПоддерживаемыйВид = Вычислить("ПоддерживаемыйВид" + Строка(Индекс));
			Если (ПоддерживаемыйВид = Неопределено) Тогда
				Прервать;
			КонецЕсли;
			СписокПоддерживаемогоТО.Добавить(ПоддерживаемыйВид);
		КонецЦикла;
	КонецЕсли;
	Если Не Булево(СписокПоддерживаемогоТО.Количество()) Тогда
		СписокПоддерживаемогоТО = мСписокПоддерживаемогоТО;
	КонецЕсли;
	
	Возврат СписокПоддерживаемогоТО;
	
КонецФункции // ПолучитьПоддерживаемыеВидыТО()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО, переданным в качестве параметра.
//
Функция ПоддерживаетсяВидТО(Вид, 
	ПоддерживаемыйВид1 = Неопределено, ПоддерживаемыйВид2 = Неопределено, ПоддерживаемыйВид3 = Неопределено, ПоддерживаемыйВид4 = Неопределено, 
	ПоддерживаемыйВид5 = Неопределено, ПоддерживаемыйВид6 = Неопределено, ПоддерживаемыйВид7 = Неопределено, ПоддерживаемыйВид8 = Неопределено) Экспорт
	
	СписокПоддерживаемогоТО = ПолучитьПоддерживаемыеВидыТО(ПоддерживаемыйВид1, ПоддерживаемыйВид2, ПоддерживаемыйВид3, ПоддерживаемыйВид4,
	ПоддерживаемыйВид5, ПоддерживаемыйВид6, ПоддерживаемыйВид7, ПоддерживаемыйВид8);
	
	Возврат (Не СписокПоддерживаемогоТО.НайтиПоЗначению(Вид) = Неопределено);
	
КонецФункции // ПоддерживаетсяВидТО()

// Функция осуществляет обработку считывания штрихкода информационной карты.
//
Функция СМКИнформационнаяКарта(Карта) Экспорт
	Перем ВыбранныйПользователь, ВыбраннаяГруппаПользователей;
	
	Результат = РаботаСТорговымОборудованием.ПроверитьТипКарты(Карта, Перечисления.ТипыИнформационныхКарт.Регистрационная);
	
	Если Не Результат Тогда
		Возврат Истина;
	КонецЕсли;
	
	Авторизирован = Авторизация( ,,,, Карта);	
	
	Если Не Авторизирован Тогда 
		НедостаточноПрав = НСтр("ru='или считанная карта №';uk='або считана карта №'")  + Карта.КодКарты + НСтр("ru=' не зарегистрированна';uk=' не зареєстрована'") ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был зарегистрирован.
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт
	
	Текст = НСтр("ru='Считанная карта не распознана или не найдена в системе!';uk='Считану карту не розпізнано або не знайдено у системі!'") ;
	Если Не ПустаяСтрока(Код) Тогда
		Текст = СтрЗаменить(Текст, "карта", "карта №" + Код);
	КонецЕсли;
	____Восклицание(Текст);
	
	Возврат Истина; 
	
КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством для считывания магнитных карт.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт
	
	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	____Ошибка(Текст);
	
КонецПроцедуры // СМКОшибка()

Функция СШКВстречка(Документ, Идентификаторы, СШК) Экспорт
	
	____Предупреждение(НСтр("ru='Работа со встречками в текущей форме не предусмотрена.';uk='Роботу з зустрічками в поточній формі не передбачено.'") );
	
	Возврат Истина;
	
КонецФункции // СШКВстречка()

Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	
	Текст = НСтр("ru='Считанный штрих-код не распознан или не найден в системе!';uk='Зчитаний штрих-код не розпізнано або не знайдено в системі!'") ;
	Если Не ПустаяСтрока(Штрихкод) Тогда
		Текст = СтрЗаменить(Текст, "штрих-код", "штрих-код №" + Штрихкод);
	КонецЕсли;
	____Восклицание(Текст);
	
	Возврат Истина; 
	
КонецФункции // СШКНеизвестныйКод()

Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт
	
	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	____Ошибка(Текст);
	
КонецПроцедуры // СШКОшибка()

// Чистяков Павел 13.12.2011 11:51:42 
Процедура ВыполнитьАвтовыходПользователя() Экспорт
	
	//АктивнаяФормаФронта = АктивнаяФорма();
	//Если АктивнаяФормаФронта=МенеджерЖурналаДокументовРесторана.Форма
	//	ИЛИ АктивнаяФормаФронта=МенеджерЖурналаДокументовДоставки.Форма
	//	ИЛИ АктивнаяФормаФронта=МенеджерЖурналаДокументовCallЦентра.Форма
	//	ИЛИ АктивнаяФормаФронта=МенеджерЖурналаДокументовСписаний.Форма
	//	ИЛИ АктивнаяФормаФронта=МенеджерУчетаРабочегоВремени.Форма Тогда
	//	ЗакрытьФорму(АктивнаяФормаФронта);
	//	ЗавершениеСеанса();
	//ИначеЕсли АктивнаяФормаФронта=МенеджерРабочегоМеста.Форма Тогда
	//	ЗавершениеСеанса();
	//КонецЕсли;
	
КонецПроцедуры

//Костенюк Александр-Старт 13.08.2012
Функция ЗагловокПредставлениеСпискаДокументовСформировать(Реализация = Истина, Списание = Истина, Открытые = Истина, ОтчетПроизводства = Истина, ТекущееСостояние = Ложь) Экспорт
	
	Результат = Строка(Неопределено);
	
	Если Открытые Тогда
		ПривилигированнаяРеализация = (Не Реализация) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаОткрытыхЗаказов) = Перечисления.ПраваДоступаПользователей.Привилегированные);
		ПривилигированнаяСписание = (Не Списание) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаОткрытыхСписаний) = Перечисления.ПраваДоступаПользователей.Привилегированные);
		ПривилигированнаяОтчетПроизводства = (Не ОтчетПроизводства) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаОткрытыхОтчетовПроизводства) = Перечисления.ПраваДоступаПользователей.Привилегированные);
	Иначе
		ПривилигированнаяРеализация = (Не Реализация) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаЗакрытыхЗаказов) = Перечисления.ПраваДоступаПользователей.Привилегированные);
		ПривилигированнаяСписание = (Не Списание) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаЗакрытыхСписаний) = Перечисления.ПраваДоступаПользователей.Привилегированные);
		ПривилигированнаяОтчетПроизводства = (Не ОтчетПроизводства) Или (УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.FrontOfficeПросмотрСпискаЗакрытыхОтчетовПроизводства) = Перечисления.ПраваДоступаПользователей.Привилегированные);
	КонецЕсли;
	
	Если Реализация И Списание И ОтчетПроизводства Тогда
		ЗагловокПредставлениеДополнить(Результат, Метаданные.Документы.РеализацияТоваровУслуг.Синоним + " + " + НРег(Метаданные.Документы.СписаниеТоваров.Синоним) + " + " + НРег(Метаданные.Документы.ОтчетПроизводстваЗаСмену.Синоним), " › ");
	ИначеЕсли Реализация Тогда
		ЗагловокПредставлениеДополнить(Результат, Метаданные.Документы.РеализацияТоваровУслуг.Синоним, " › ");
	ИначеЕсли Списание Тогда
		ЗагловокПредставлениеДополнить(Результат, Метаданные.Документы.СписаниеТоваров.Синоним, " › ");
	ИначеЕсли ОтчетПроизводства Тогда
		ЗагловокПредставлениеДополнить(Результат, Метаданные.Документы.ОтчетПроизводстваЗаСмену.Синоним, " › ");
	Иначе
		ЗагловокПредставлениеДополнить(Результат, НСтр("ru='Недостаточно прав доступа';uk='Недостатньо прав доступу'") , " › ");
	КонецЕсли;
	
	Если (Не (ПривилигированнаяРеализация И ПривилигированнаяСписание И ПривилигированнаяОтчетПроизводства)) Тогда
		Результат = Строка(УправлениеПользователями.ОпределитьСотрудникаПоПользователю(глЗначениеПеременной("глТекущийПользователь"))) + " › " + Результат;
	КонецЕсли;
	
	Если Открытые Тогда
		Возврат Результат + НСтр("ru='Открытые документы';uk='Відкриті документи'");
	ИначеЕсли ТекущееСостояние Тогда
		Возврат Результат + НСтр("ru='Текущее состояние блюд';uk='Поточний стан страв'");
	Иначе
		Возврат Результат + НСтр("ru='Закрытые документы';uk='Закриті документи'");
	КонецЕсли;
	
КонецФункции // ЗагловокПредставлениеСформировать()
//Костенюк Александр-Финиш 13.08.2012


// Инициализация переменных.
мТипСтроки = Тип("Строка");
мТипМассива = Тип("Массив");
мТипСпискаЗначений = Тип("СписокЗначений");

мСтекФорм = Новый Массив;

мСписокПоддерживаемогоТО = Новый СписокЗначений;
мСписокПоддерживаемогоТО.Добавить(Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт);
мСписокПоддерживаемогоТО.Добавить(Перечисления.ВидыТорговогоОборудования.СканерШтрихКода);
мСписокПоддерживаемогоТО.Добавить(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор);
мСписокПоддерживаемогоТО.Добавить(Перечисления.ВидыТорговогоОборудования.Принтеры);
мСписокПоддерживаемогоТО.Добавить(Перечисления.ВидыТорговогоОборудования.ПринтерыВстречек);
мСписокПоддерживаемогоТО.Добавить(Перечисления.ВидыТорговогоОборудования.ПринтерыПречеков);

//Костенюк Александр-Старт 09.07.2012
мСписокПоддерживаемогоТО.Добавить(Перечисления.ВидыТорговогоОборудования.УправленияСиловымиНагрузками);
//Костенюк Александр-Финиш 09.07.2012

мТранзакцияПечати = Новый СписокЗначений;
мПроверкаОбработчика = Истина;
мОбработкаАвторизации = Обработки.FrontOfficeАвторизация.Создать();
мОбработкаСлужебныхСообщений = Обработки.FrontOfficeСлужебныеСообщения.Создать();

#КонецЕсли