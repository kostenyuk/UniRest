#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Выполняет загрузку данных из файла сообщения обмена
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при обработке сообщения обмена
// 
Процедура ВыполнитьЗагрузкуДанных(Отказ, Знач ЗагрузитьТолькоПараметры) Экспорт
	
	Если Не ЭтоУзелРаспределеннойИнформационнойБазы() Тогда
		
		// обмен не по правилам конвертации не поддерживается
		ЗафиксироватьЗавершениеОбмена(Отказ,, ОшибкаВидаОбменаДанными());
		Возврат;
	КонецЕсли;
	
	ЗагрузитьМетаданные = ЗагрузитьТолькоПараметры
		И ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ()
		И ОбменДаннымиВызовСервера.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском()
	;
	
	ОбменДаннымиСервер.УстановитьРежимЗагрузкиПараметровРаботыПрограммы(Ложь);
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщенияОбмена());
	Исключение
		
		// ошибка открытия файла сообщения обмена
		ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаОткрытияФайлаСообщенияОбмена());
		Возврат;
	КонецПопытки;
	
	ПрочитатьФайлСообщенияОбмена(Отказ, ЧтениеXML, ЗагрузитьТолькоПараметры, ЗагрузитьМетаданные);
	
	ЧтениеXML.Закрыть();
КонецПроцедуры

// Выполняет выгрузку данных в файл сообщения обмена
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при обработке сообщения обмена
// 
Процедура ВыполнитьВыгрузкуДанных(Отказ) Экспорт
	
	Если Не ЭтоУзелРаспределеннойИнформационнойБазы() Тогда
		
		// обмен не по правилам конвертации не поддерживается
		ЗафиксироватьЗавершениеОбмена(Отказ,, ОшибкаВидаОбменаДанными());
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Попытка
		ЗаписьXML.ОткрытьФайл(ИмяФайлаСообщенияОбмена());
	Исключение
		
		// ошибка открытия файла сообщения обмена
		ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаОткрытияФайлаСообщенияОбмена());
		Возврат;
	КонецПопытки;
	
	ЗаписатьИзмененияВФайлСообщенияОбмена(Отказ, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

//.. Начало изменения Dim)on  10 августа 2013 г. 20:52:33
//

// Выполняет загрузку данных из файла сообщения обмена
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при обработке сообщения обмена
// 
Процедура ВыполнитьЗагрузкуДанныхЦРС_WS(Отказ, Знач ЗагрузитьТолькоПараметры) Экспорт
	
	Если Не ЭтоУзелРаспределеннойИнформационнойБазы() Тогда
		
		// обмен не по правилам конвертации не поддерживается
		ЗафиксироватьЗавершениеОбмена(Отказ,, ОшибкаВидаОбменаДанными());
		Возврат;
	КонецЕсли;
	
	ЗагрузитьМетаданные = ЗагрузитьТолькоПараметры
		И ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ()
		И ОбменДаннымиВызовСервера.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском()
	;
	
	ОбменДаннымиСервер.УстановитьРежимЗагрузкиПараметровРаботыПрограммы(Ложь);
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		Если ПустаяСтрока(ИмяФайлаСообщенияОбмена()) Тогда
			ЧтениеXML.УстановитьСтроку(СообщениеОбмена);
		Иначе
			ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщенияОбмена());
		КонецЕсли;
	Исключение
		
		// ошибка открытия файла сообщения обмена
		ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаОткрытияФайлаСообщенияОбмена());
		Возврат;
	КонецПопытки;
	
	ПрочитатьФайлСообщенияОбмена(Отказ, ЧтениеXML, ЗагрузитьТолькоПараметры, ЗагрузитьМетаданные);
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при обработке сообщения обмена
// 
Процедура ВыполнитьВыгрузкуДанныхЦРС_WS(Отказ) Экспорт
	
	Если Не ЭтоУзелРаспределеннойИнформационнойБазы() Тогда
		
		// обмен не по правилам конвертации не поддерживается
		ЗафиксироватьЗавершениеОбмена(Отказ,, ОшибкаВидаОбменаДанными());
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	//
	//ПолноеИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");
	//
	//Попытка
	//	ЗаписьXML.ОткрытьФайл(ПолноеИмяФайлаСообщенияОбмена);
	//Исключение
	//	
	//	// ошибка открытия файла сообщения обмена
	//	ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаОткрытияФайлаСообщенияОбмена());
	//	Возврат;
	//КонецПопытки;
	Если ПустаяСтрока(ИмяФайлаСообщенияОбмена()) Тогда
		ЗаписьXML.УстановитьСтроку("UTF-8");
	Иначе
		Попытка
			ЗаписьXML.ОткрытьФайл(ИмяФайлаСообщенияОбмена());
		Исключение
			
			// ошибка открытия файла сообщения обмена
			ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаОткрытияФайлаСообщенияОбмена());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	////Получаем изменеения конфигурации
	//ЦРС_WS_ЗаписатьИзмененияВФайлСообщенияОбмена(Отказ, ЗаписьXML, Ложь, Истина, Истина);
	
	//ЗаписьXML.Закрыть();
	//
	
	//Получаем изменеения Данных
	ЦРС_WS_ЗаписатьИзмененияВФайлСообщенияОбмена(Отказ, ЗаписьXML, Истина, Ложь, Ложь);
	
	Если Не ПустаяСтрока(ИмяФайлаСообщенияОбмена()) Тогда
		ЗаписьXML.Закрыть();
	Иначе
		СообщениеОбмена = ЗаписьXML.Закрыть()
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает локальной переменной ПолеИмяФайлаСообщенияОбмена
// строку с полным именем файла сообщения обмена для загрузки или выгрузки данных.
// Как правило, файл сообщения обмена располагается 
// во временном каталоге пользователя операционной системы.
//
// Параметры:
//  ИмяФайла – Строка – полное имя файла сообщения обмена для выгрузки или загрузки данных
// 
Процедура УстановитьИмяФайлаСообщенияОбмена(Знач ИмяФайла) Экспорт
	
	ПолеИмяФайлаСообщенияОбмена = ИмяФайла;
	
КонецПроцедуры

//.. Начало изменения Dim)on  11 августа 2013 г. 0:52:21
//
Функция ПолучитьСписокОбъектовСоставаПланаОбмена(ИмяПланаОбмена, ПолучитьМетаданные = Истина) Экспорт 

	Состав = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	Если ПолучитьМетаданные Тогда
		СоставПоПолномуИмени = Новый Структура;
		Для каждого ЭлСостава Из Состав Цикл
			МДЭлемента = ЭлСостава.Метаданные;
			СоставПоПолномуИмени.Вставить(МДЭлемента.Имя, МДЭлемента);
		КонецЦикла;
	Иначе	
		СоставПоПолномуИмени = Новый Массив;
		Для каждого ЭлСостава Из Состав Цикл
			СоставПоПолномуИмени.Добавить(ЭлСостава.Метаданные.ПолноеИмя());
		КонецЦикла;
	КонецЕсли;

    Возврат СоставПоПолномуИмени
	
КонецФункции // ПолучитьСписокОбъектовСоставаПланаОбмена()

Функция ВыбратьИзменения(СтрДанных, ВыборкаИзменения, СправочникиДокументы = "Справочники")

	СоставПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокОбъектовСоставаПланаОбмена("ОбменДанными2K_CRS", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", СтрДанных.УзелОбмена);
    Запрос.УстановитьПараметр("НомерСообщения", СтрДанных.НомерСообщения);

	Если СправочникиДокументы = "Справочники" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаСправочники(СоставПланаОбмена);
		Результат = Запрос.Выполнить();
	ИначеЕсли СправочникиДокументы = "Документы" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаДокументы(СоставПланаОбмена);
		Результат = Запрос.Выполнить();
	КонецЕсли;
	
	Если ПустаяСтрока(Запрос.Текст) Или Результат.Пустой() Тогда
		Возврат Ложь
	КонецЕсли;
	
	ВыборкаИзменения = Результат.Выбрать();
	
	Возврат Истина;
	
КонецФункции // 

Функция ВыбратьИзмененияНезависимыхРегистровСведений(СтруктураВозврата)

	СписокСоставПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокОбъектовСоставаПланаОбмена("ОбменДанными2K_CRS", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", СтруктураВозврата.УзелОбмена);

	СтруктураПолученныхОтборов = ПолучитьОтборыДляПолученияИзмененийРегистрыСведений(СписокСоставПланаОбмена);
	Запрос.Текст = СтруктураПолученныхОтборов.ТекстЗапроса;
	мРезультаты = Запрос.ВыполнитьПакет();
	
	Для н = 0 По мРезультаты.ВГраница() Цикл
		
		Результат = мРезультаты[н];
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		ТЗИзменений = Результат.Выгрузить();
		СтруктураВозврата.Вставить("КоличествоОбъектовДанныхКОтправкеРегистрыСведений", СтруктураВозврата.КоличествоОбъектовДанныхКОтправкеРегистрыСведений + ТЗИзменений.Количество());
		СтруктураПолученныхОтборов.мСоответствиеЗапросаРегистру[н].Вставить("ТЗИзменений", ТЗИзменений);
		СтруктураВозврата.ДанныеРегистрыСведений.Добавить(СтруктураПолученныхОтборов.мСоответствиеЗапросаРегистру[н]);	
		
	КонецЦикла;
	
КонецФункции //

Функция ПолучитьТекстЗапросаСправочники(СоставПланаОбмена, ТекстЗапроса = "")

	ТекстШаблон = "ВЫБРАТЬ Изменения.Ссылка, Изменения.Узел, Изменения.НомерСообщения ИЗ ¤1¤ Как Изменения ГДЕ Изменения.Узел = &Узел";
	
	//И Изменения.НомерСообщения = 0
	
	Для каждого ЭлСостава Из СоставПланаОбмена Цикл
		
		МД = ЭлСостава.Значение;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "Справочник.") = 0 Тогда
			Продолжить;		
		КонецЕсли;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "Справочник.ИдентификаторыОбъектовМетаданных") = 1 Тогда
			Продолжить;		
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ПолноеИмяТаблицы = МД.ПолноеИмя()+".Изменения";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.СтрокаШаблон(ТекстШаблон, ПолноеИмяТаблицы);
	
	КонецЦикла;	
	
	Возврат ТекстЗапроса

КонецФункции // ПолучитьТекстЗапросаСправочники()

Функция ПолучитьТекстЗапросаДокументы(СоставПланаОбмена, ТекстЗапроса = "")

	ТекстШаблон = "ВЫБРАТЬ Изменения.Ссылка, Изменения.Узел, Изменения.НомерСообщения ИЗ ¤1¤ Как Изменения ГДЕ Изменения.Узел = &Узел";
	
	Для каждого ЭлСостава Из СоставПланаОбмена Цикл
		
		МД = ЭлСостава.Значение;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "Документ.") = 0 Тогда
			Продолжить;		
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ПолноеИмяТаблицы = МД.ПолноеИмя()+".Изменения";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.СтрокаШаблон(ТекстШаблон, ПолноеИмяТаблицы);
	
	КонецЦикла;	

	Возврат ТекстЗапроса

КонецФункции // ПолучитьТекстЗапросаДокументы()

Функция ПолучитьТекстЗапросаРегистрыСведений(СоставПланаОбмена, ТекстЗапроса = "")

	СвойствоРС_Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	ТекстШаблон = "
	|ВЫБРАТЬ
	|	¤1¤
	|	ТаблицаИзменения.Узел,
	|	ТаблицаИзменения.НомерСообщения
	|ИЗ
	|	¤2¤.Изменения КАК ТаблицаИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ¤2¤ КАК Таблица
	|		ПО ТаблицаИзменения.Узел = &Узел 
	|		¤3¤
	|";
                 
	Для каждого ЭлСостава Из СоставПланаОбмена Цикл
		
		МД = ЭлСостава.Значение;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "РегистрСведений.") = 0 Тогда
			Продолжить;		
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли;
		
		мПолейИзмерений = Новый Массив;
		мПолейРесурсовИРеквизитов = Новый Массив;
		Если Не СвойствоРС_Непериодический = МД.ПериодичностьРегистраСведений Тогда
			мПолейИзмерений.Добавить("Период")
		КонецЕсли;
		Для каждого Измерение Из МД.Измерения Цикл
			Если Измерение.ОсновнойОтбор Тогда
				мПолейИзмерений.Добавить(Измерение.Имя)
			Иначе
				мПолейРесурсовИРеквизитов.Добавить(Измерение.Имя)
			КонецЕсли;
		КонецЦикла;
		Для каждого Ресурс Из МД.Ресурсы Цикл
			мПолейРесурсовИРеквизитов.Добавить(Ресурс.Имя)
		КонецЦикла;
		Для каждого Реквизит Из МД.Реквизиты Цикл
			мПолейРесурсовИРеквизитов.Добавить(Реквизит.Имя)
		КонецЦикла;
		ПоляСтрокой = "";
		УсловияСтрокой = "";
		
		Для каждого ИмяПоля Из мПолейИзмерений Цикл
		
			ПоляСтрокой = ПоляСтрокой + "ТаблицаИзменения."+ИмяПоля+","+Символы.ПС;
		    УсловияСтрокой = УсловияСтрокой + Символы.ПС + 
			" И ТаблицаИзменения."+ИмяПоля+" = Таблица."+ИмяПоля;
		
		КонецЦикла;
		
		Для каждого ИмяПоля Из мПолейРесурсовИРеквизитов Цикл
		
			ПоляСтрокой = ПоляСтрокой + "Таблица."+ИмяПоля+","+Символы.ПС;
		
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.СтрокаШаблон(ТекстШаблон, ПоляСтрокой, МД.ПолноеИмя(), УсловияСтрокой);
	
	КонецЦикла;	

	Возврат ТекстЗапроса

КонецФункции // ПолучитьТекстЗапросаРегистрыСведений()

Функция ПолучитьОтборыДляПолученияИзмененийРегистрыСведений(СоставПланаОбмена, ТекстЗапроса = "")

	СвойствоРС_Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	ТекстШаблон = "
	|ВЫБРАТЬ
	|	¤1¤	ТаблицаИзменения.Узел,
	|	ТаблицаИзменения.НомерСообщения
	|ИЗ
	|	¤2¤.Изменения КАК ТаблицаИзменения
	|ГДЕ ТаблицаИзменения.Узел = &Узел
	|";
	
	мСоответствиеЗапросаРегистру = Новый Массив;
	
	Для каждого ЭлСостава Из СоставПланаОбмена Цикл
		
		МД = ЭлСостава.Значение;
		Если СтрЧислоВхождений(МД.ПолноеИмя(), "РегистрСведений.") = 0 Тогда
			Продолжить;		
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли;
		
		мПолейИзмерений = Новый Массив;
		
		Если Не СвойствоРС_Непериодический = МД.ПериодичностьРегистраСведений Тогда
			мПолейИзмерений.Добавить("Период")
		КонецЕсли;
		Для каждого Измерение Из МД.Измерения Цикл
			Если Измерение.ОсновнойОтбор Тогда
				мПолейИзмерений.Добавить(Измерение.Имя)
			КонецЕсли;
		КонецЦикла;
		
		ПоляСтрокой = "";
		мОтборы = Новый Массив;
		
		Для каждого ИмяПоля Из мПолейИзмерений Цикл
		
			ПоляСтрокой = ПоляСтрокой + "ТаблицаИзменения."+ИмяПоля+","+Символы.ПС;
		    мОтборы.Добавить(ИмяПоля);
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.СтрокаШаблон(ТекстШаблон, ПоляСтрокой, МД.ПолноеИмя());
	    мСоответствиеЗапросаРегистру.Добавить(Новый Структура("ИмяРегистра, мОтборы", МД.Имя, мОтборы));
		
	КонецЦикла;	

	Возврат Новый Структура("ТекстЗапроса, мСоответствиеЗапросаРегистру", ТекстЗапроса, мСоответствиеЗапросаРегистру)

КонецФункции // ПолучитьОтборыДляПолученияИзмененийРегистрыСведений()

Процедура ЗаполнитьСтруктуруИзмененийДляУзла(СтруктураВозврата)
	
	Перем ВыборкаИзменения;
	
	Если НЕ ЗначениеЗаполнено(СтруктураВозврата.УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбратьИзменения(СтруктураВозврата, ВыборкаИзменения, "Справочники") Тогда	
	
		Пока ВыборкаИзменения.Следующий() Цикл
			
			СтруктураВозврата.ДанныеСправочники.Добавить(ВыборкаИзменения.Ссылка);
			
		КонецЦикла;	
		
	ИначеЕсли ВыбратьИзменения(СтруктураВозврата, ВыборкаИзменения, "Документы") Тогда	
	    СтруктураВозврата.ДанныеСправочники.Очистить();
		Пока ВыборкаИзменения.Следующий() Цикл
			
			СтруктураВозврата.ДанныеДокументы.Добавить(ВыборкаИзменения.Ссылка);
			
		КонецЦикла;	
		
	Иначе
		СтруктураВозврата.ДанныеСправочники.Очистить();
		СтруктураВозврата.ДанныеДокументы.Очистить();
		//Проверим регистры сведений
		КоличествоОбъектов = 0;
		ВыбратьИзмененияНезависимыхРегистровСведений(СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИзмененияПоследовательно(УзелОбмена, НомерСообщения) Экспорт
	
	СтруктураВозврата = Новый Структура("УзелОбмена, НомерСообщения, ДанныеСправочники, ДанныеДокументы, ДанныеРегистрыСведений, КоличествоОбъектовДанныхКОтправкеРегистрыСведений", УзелОбмена, НомерСообщения, Новый Массив(), Новый Массив(), Новый Массив(), 0);
		
	ЗаполнитьСтруктуруИзмененийДляУзла(СтруктураВозврата);
		
	Возврат СтруктураВозврата; 
	
КонецФункции
//
//.. Конец изменения Dim)on  11 августа 2013 г. 0:52:21

//.. Начало изменения Dim)on  10 августа 2013 г. 21:04:47
//
Процедура ЦРС_WS_ЗаписатьИзмененияДвиженийДокументов(ЗаписьСообщения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугИзменения.Узел,
		|	РеализацияТоваровУслугИзменения.НомерСообщения,
		|	РеализацияТоваровУслугИзменения.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Изменения КАК РеализацияТоваровУслугИзменения
		|ГДЕ
		|	РеализацияТоваровУслугИзменения.Узел = &Узел
		|	И РеализацияТоваровУслугИзменения.НомерСообщения = &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписаниеТоваровИзменения.Узел,
		|	СписаниеТоваровИзменения.НомерСообщения,
		|	СписаниеТоваровИзменения.Ссылка
		|ИЗ
		|	Документ.СписаниеТоваров.Изменения КАК СписаниеТоваровИзменения
		|ГДЕ
		|	СписаниеТоваровИзменения.Узел = &Узел
		|	И СписаниеТоваровИзменения.НомерСообщения = &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремениОрганизацииИзменения.Узел,
		|	ТабельУчетаРабочегоВремениОрганизацииИзменения.НомерСообщения,
		|	ТабельУчетаРабочегоВремениОрганизацииИзменения.Ссылка
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремениОрганизации.Изменения КАК ТабельУчетаРабочегоВремениОрганизацииИзменения
		|ГДЕ
		|	ТабельУчетаРабочегоВремениОрганизацииИзменения.Узел = &Узел
		|	И ТабельУчетаРабочегоВремениОрганизацииИзменения.НомерСообщения = &НомерСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМИзменения.Узел,
		|	ЧекККМИзменения.НомерСообщения,
		|	ЧекККМИзменения.Ссылка
		|ИЗ
		|	Документ.ЧекККМ.Изменения КАК ЧекККМИзменения
		|ГДЕ
		|	ЧекККМИзменения.Узел = &Узел
		|	И ЧекККМИзменения.НомерСообщения = &НомерСообщения";

	Запрос.УстановитьПараметр("НомерСообщения", ЗаписьСообщения.НомерСообщения);
	Запрос.УстановитьПараметр("Узел", ЗаписьСообщения.Получатель);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	мСсылок = Новый Массив;
	
	// Записываем элемент <RegisterRecords>
	ЗаписьСообщения.ЗаписьXML.ЗаписатьНачалоЭлемента("RegisterRecords");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		мСсылок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		ОбъектКЗаписи = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		// выгрузка движений документа
		Для Каждого Движение Из ОбъектКЗаписи.Движения Цикл
			
			Движение.Прочитать();
			
			ЗаписатьXML(ЗаписьСообщения.ЗаписьXML, Движение);	
			
		КонецЦикла;
		
	КонецЦикла;

	ЗаписьСообщения.ЗаписьXML.ЗаписатьКонецЭлемента(); // RegisterRecords
	
КонецПроцедуры

Процедура ЦРС_WS_ПрочитатьИзмененияДвиженийДокументов(Знач ЧтениеСообщения)
	
	ЧтениеСообщения.ЧтениеXML.Прочитать(); // <RegisterRecords>
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВозможностьЧтенияXML(ЧтениеСообщения.ЧтениеXML) Цикл
			
			Данные = ПрочитатьXML(ЧтениеСообщения.ЧтениеXML);
			Данные.ОбменДанными.Загрузка = Истина;
			//Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			//Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			
			Данные.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеСообщения.ЧтениеXML.Прочитать(); // </RegisterRecords>
	
КонецПроцедуры

Процедура ЦРС_WS_ЗаписатьИзмененияXML(ЗаписьСообщения) 
	                                                                                  
	СтруктураИзменений = ПолучитьИзмененияПоследовательно(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
	СтруктураИзменений.Вставить("ЭтотУзел", ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел());
	
	//Для поочередной отправки данных фиксированными пакетами
	СтруктураИзменений.Вставить("КоличествоОбъектовДанныхКОтправке", СтруктураИзменений.ДанныеСправочники.Количество()
	+ СтруктураИзменений.ДанныеДокументы.Количество()
	+ СтруктураИзменений.КоличествоОбъектовДанныхКОтправкеРегистрыСведений);
	СтруктураИзменений.Вставить("КоличесвтоУжеОтправленные", 0);
	
	Если СтруктураИзменений.КоличествоОбъектовДанныхКОтправке = 0 Тогда
		//Отсутствуют объекты для передачи
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = "";
	
	мФильтр = Новый Массив;
	
	Для ИндексДанных = 0 По СтруктураИзменений.ДанныеСправочники.Количество()
		+ СтруктураИзменений.ДанныеДокументы.Количество() - 1 Цикл
		
		ИндексДанных2 = ИндексДанных - СтруктураИзменений.ДанныеСправочники.Количество();
		Если ИндексДанных < СтруктураИзменений.ДанныеСправочники.Количество() Тогда
			СсылкаНаИзменение = СтруктураИзменений.ДанныеСправочники[ИндексДанных];
		ИначеЕсли ИндексДанных2 < СтруктураИзменений.ДанныеДокументы.Количество() Тогда
			СсылкаНаИзменение = СтруктураИзменений.ДанныеДокументы[ИндексДанных2];
		КонецЕсли;
		
		мФильтр.Добавить(СсылкаНаИзменение);
		
	КонецЦикла;
	
	Для ИндексДанных = 0 По СтруктураИзменений.КоличествоОбъектовДанныхКОтправкеРегистрыСведений - 1 Цикл
		
		ИндексСтроки = ИндексДанных;
		КоличествоВТекущемРегистре = 0;
		н = -1;
		Пока ИндексСтроки >= КоличествоВТекущемРегистре Цикл
			ИндексСтроки = ИндексСтроки - КоличествоВТекущемРегистре;
			н = н + 1;
			Изменение = СтруктураИзменений.ДанныеРегистрыСведений[н];
			КоличествоВТекущемРегистре = Изменение.ТЗИзменений.Количество();
		КонецЦикла;
		
		НЗ = РегистрыСведений[Изменение.ИмяРегистра].СоздатьНаборЗаписей();
		
		СтрокаИзменений = Изменение.ТЗИзменений[ИндексСтроки];
		
		Для каждого КолонкаОтбора Из Изменение.мОтборы Цикл
			
			НЗ.Отбор[КолонкаОтбора].Установить(СтрокаИзменений[КолонкаОтбора]);
			
		КонецЦикла;
		
		мФильтр.Добавить(НЗ);				
		
	КонецЦикла;	
	
	// Выгружаем справочник идентификаторов объектов метаданных
	ВыборкаИзменений = ОбменДаннымиСервер.ВыбратьИзменения(
											ЗаписьСообщения.Получатель,
											ЗаписьСообщения.НомерСообщения,
											мФильтр);
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			ОбъектКЗаписи = ВыборкаИзменений.Получить();
			ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(ОбъектКЗаписи.Метаданные());
			
			ЗаписатьXML(ЗаписьСообщения.ЗаписьXML, ОбъектКЗаписи);
			
			Если ЭтоДокумент Тогда
				
				// выгрузка движений документа
				Для Каждого Движение Из ОбъектКЗаписи.Движения Цикл
					
					Движение.Прочитать();
					
					ЗаписатьXML(ЗаписьСообщения.ЗаписьXML, Движение);	
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

			
КонецПроцедуры

Процедура ЦРС_WS_ЗаписатьИзмененияВФайлСообщенияОбмена(Отказ, ЗаписьXML, Знач ЗаписатьДанные, Знач ЗаписатьПараметры, Знач ЗаписатьМетаданные)
	
	Если Не (ЗаписатьДанные Или ЗаписатьПараметры Или ЗаписатьМетаданные) Тогда
		ЗафиксироватьЗавершениеОбмена(Отказ, "Программные параметры для выполнения записи изменений заданы неверно", "Выполнение операции, которая не поддерживается");
		Возврат;
	КонецЕсли;
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	Попытка
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелИнформационнойБазы);
	Исключение
		ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаНачалаЗаписиФайлаСообщенияОбмена());
		Возврат;
	КонецПопытки;
	
	Попытка
		
		ОбменДаннымиВызовСервера.ОчиститьПриоритетныеДанныеОбмена();
			
		Если ЗаписатьМетаданные Тогда
			
			// Записываем изменения конфигурации и изменения данных в сообщение обмена
			ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, КоличествоЭлементовВТранзакции); 
			
		КонецЕсли;
		
		Если ЗаписатьДанные Тогда
			
			ЦРС_WS_ЗаписатьИзмененияXML(ЗаписьСообщения);
			
		КонецЕсли;
		
		Если ЗаписатьПараметры Тогда
			// Записываем идентификаторы объектов метаданных в конец сообщения обмена
			ЗаписатьИдентификаторыОбъектовМетаданных(ЗаписьСообщения);
		КонецЕсли;
		
		ЗаписьСообщения.ЗакончитьЗапись();
		
	Исключение
		ЗаписьСообщения.ПрерватьЗапись();
		ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаЗаписиФайлаСообщенияОбмена());
		Возврат;
	КонецПопытки;
		
КонецПроцедуры

Функция ЦРС_WS_ПрочитатьФайлСообщенияОбмена(ЧтениеСообщения)
	
	НачатьТранзакцию();
	Попытка
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
		Пока ВозможностьЧтенияXML(ЧтениеСообщения.ЧтениеXML) Цикл
			
			Данные = ПрочитатьXML(ЧтениеСообщения.ЧтениеXML);
			Данные.ОбменДанными.Загрузка = Истина;
			
			//Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			//Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			
				//Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			
			Данные.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

//
//.. Конец изменения Dim)on  10 августа 2013 г. 21:04:47
//

Функция СоздатьФайлСхемы(ВидСхемы = "Узел")
	
    ФайлСхемы = Новый Файл(КаталогВременныхФайлов() + "schema.xsd");
    Если ФайлСхемы.Существует() Тогда
        УдалитьФайлы(ФайлСхемы.ПолноеИмя);
    КонецЕсли;

	Если ВидСхемы = "Узел" Тогда
	ТекстСхемы = "<xs:schema xmlns:tns=""CRS_Node"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" targetNamespace=""CRS_Node"" attributeFormDefault=""unqualified"" elementFormDefault=""qualified"">
	|<xs:complexType name=""НастройкаСвязиМеждуБазамиРС"">
	|		<xs:sequence>
	|			<xs:element name=""ИдентификаторОбъектаНастройки"" type=""xs:string""/>
	|			<xs:element name=""ИсточникДанныхОбъекта"" type=""xs:string""/>
	|		</xs:sequence>
	|	</xs:complexType>
	|	<xs:complexType name=""НастройкиСвязейМеждуБазамиРС"">
	|		<xs:sequence>
	|			<xs:element name=""НастройкаСвязиМеждуБазамиРС"" type=""tns:НастройкаСвязиМеждуБазамиРС"" maxOccurs=""unbounded""/>
	|		</xs:sequence>
	|	</xs:complexType>
	|	<xs:complexType name=""УзелПланаОбмена"">
	|		<xs:sequence>
	|			<xs:element name=""Код"" type=""xs:string""/>
	|			<xs:element name=""Наименование"" type=""xs:string""/>
	|			<xs:element name=""НастройкиСвязейМеждуБазамиРС"" type=""tns:НастройкиСвязейМеждуБазамиРС""/>
	|		</xs:sequence>
	|	</xs:complexType>
	|</xs:schema>";
	Иначе
	ТекстСхемы = "<xs:schema xmlns:ns1=""http://v8.1c.ru/8.1/data/enterprise"" xmlns:tns=""CRS_NodeS"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" targetNamespace=""CRS_NodeS"" attributeFormDefault=""unqualified"" elementFormDefault=""qualified"">
	|	<xs:import namespace=""http://v8.1c.ru/8.1/data/enterprise""/>
	|	<xs:complexType name=""НастройкаСценарияОбмена"">
	|		<xs:sequence>
	|			<xs:element name=""УзелИнформационнойБазы"" type=""xs:string""/>
	|			<xs:element name=""ВидТранспортаОбмена"" type=""xs:string""/>
	|			<xs:element name=""ВыполняемоеДействие"" type=""xs:string""/>
	|			<xs:element name=""КоличествоЭлементовВТранзакции"" type=""xs:string""/>
	|		</xs:sequence>
	|	</xs:complexType>
	|	<xs:complexType name=""Сценарии"">
	|		<xs:sequence>
	|			<xs:element name=""ИспользоватьРегламентноеЗадание"" type=""xs:boolean""/>
	|			<xs:element name=""Комментарий"" type=""xs:string""/>
	|			<xs:element name=""Расписание"" type=""ns1:JobSchedule""/>
	|			<xs:element name=""НастройкиОбмена"" type=""tns:НастройкаСценарияОбмена"" maxOccurs=""unbounded""/>
	|		</xs:sequence>
	|	</xs:complexType>
	|	<xs:complexType name=""СценарийУзлаОбмена"">
	|		<xs:sequence>
	|			<xs:element name=""Код"" type=""xs:string""/>
	|			<xs:element name=""Сценарий"" type=""tns:Сценарии""/>
	|		</xs:sequence>
	|	</xs:complexType>
	|</xs:schema>";	
	КонецЕсли;
	
	ТекстовыйДокСхемы = Новый ТекстовыйДокумент;
	ТекстовыйДокСхемы.УстановитьТекст(ТекстСхемы);
	ТекстовыйДокСхемы.Записать(ФайлСхемы.ПолноеИмя);

    Возврат ФайлСхемы.ПолноеИмя;

КонецФункции

Процедура ПрочитатьФайлСообщенияОбмена(Отказ, ЧтениеXML, Знач ЗагрузитьТолькоПараметры, Знач ЗагрузитьМетаданные)
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	
	Попытка
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Больший);
	Исключение
		// задан неизвестный план обмена;
		// указан узел, не входящий в план обмена;
		// номер сообщения не соответствует ожидаемому
		ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаНачалаЧтенияФайлаСообщенияОбмена());
		Возврат;
	КонецПопытки;
	
	Если ЗагрузитьТолькоПараметры Тогда
		
		Если ЗагрузитьМетаданные Тогда
			
			Попытка
				
				ОбменДаннымиСервер.УстановитьРежимЗагрузкиПараметровРаботыПрограммы(Истина);
				
				// Получаем изменения конфигурации, изменения данных игнорируем.
				ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения, КоличествоЭлементовВТранзакции);
				
				// Получаем идентификаторы объектов метаданных
				ПрочитатьИдентификаторыОбъектовМетаданных(ЧтениеСообщения);
				
				ПрочитатьДанныеУзловПланаОбмена(ЧтениеСообщения);
			
				// Сообщение считаем не принятым, для этого прерываем чтение.
				ЧтениеСообщения.ПрерватьЧтение();
				
				ОбменДаннымиСервер.УстановитьРежимЗагрузкиПараметровРаботыПрограммы(Ложь);
				
				ОбменДаннымиВызовСервера.ОтключитьПовторениеЗагрузкиСообщенияОбменаДаннымиПередЗапуском();
				
			Исключение
				ЧтениеСообщения.ПрерватьЧтение();
				ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаЧтенияФайлаСообщенияОбмена());
				Возврат
			КонецПопытки;
			
		Иначе
			
			Попытка
				
				// Пропускаем изменения конфигурации и изменения данных в сообщении обмена
				ЧтениеСообщения.ЧтениеXML.Пропустить(); // <Changes>...</Changes>
				
				ЧтениеСообщения.ЧтениеXML.Прочитать(); // </Changes>
				
				// Получаем идентификаторы объектов метаданных
				ПрочитатьИдентификаторыОбъектовМетаданных(ЧтениеСообщения);
				
				ПрочитатьДанныеУзловПланаОбмена(ЧтениеСообщения);
			
				// Сообщение считаем не принятым, для этого прерываем чтение.
				ЧтениеСообщения.ПрерватьЧтение();
			Исключение
				ЧтениеСообщения.ПрерватьЧтение();
				ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаЧтенияФайлаСообщенияОбмена());
				Возврат
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		Попытка
			
			// Получаем изменения конфигурации и изменения данных из сообщения обмена
			ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения, КоличествоЭлементовВТранзакции);
			
			//ЦРС_WS_ПрочитатьФайлСообщенияОбмена(ЧтениеСообщения);
			
			// Получаем идентификаторы объектов метаданных
			ПрочитатьИдентификаторыОбъектовМетаданных(ЧтениеСообщения);
			
			мУзловКЗаписи = Новый Массив;
			ПрочитатьДанныеУзловПланаОбмена(ЧтениеСообщения, мУзловКЗаписи);
			
			//Читаем движения документов
			ЦРС_WS_ПрочитатьИзмененияДвиженийДокументов(ЧтениеСообщения);
			
			// Сообщение считаем принятым
			ЧтениеСообщения.ЗакончитьЧтение();
			
			Для каждого Узел Из мУзловКЗаписи Цикл
				УзелОбъект = ПланыОбмена.ОбменДанными2K_CRS.НайтиПоКоду(Узел.Код).ПолучитьОбъект();
				УзелОбъект.Наименование = Узел.Наименование;
				УзелОбъект.НастройкиСвязейМеждуБазамиРС.Загрузить(Узел.НастройкиСвязейМеждуБазамиРС);
				УзелОбъект.Записать();
			КонецЦикла;
			
		Исключение
			ЧтениеСообщения.ПрерватьЧтение();
			ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаЧтенияФайлаСообщенияОбмена());
			Возврат
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИзмененияВФайлСообщенияОбмена(Отказ, ЗаписьXML)
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	Попытка
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелИнформационнойБазы);
	Исключение
		ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаНачалаЗаписиФайлаСообщенияОбмена());
		Возврат;
	КонецПопытки;
	
	Попытка
		
		ОбменДаннымиВызовСервера.ОчиститьПриоритетныеДанныеОбмена();
		
		// Записываем изменения конфигурации и изменения данных в сообщение обмена
		ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, КоличествоЭлементовВТранзакции);
		
		// Записываем идентификаторы объектов метаданных в конец сообщения обмена
		ЗаписатьИдентификаторыОбъектовМетаданных(ЗаписьСообщения);
		
		ЗаписатьДанныеУзловПланаОбмена(ЗаписьСообщения, Истина);
		
		//Добавим Движения Документов
		ЦРС_WS_ЗаписатьИзмененияДвиженийДокументов(ЗаписьСообщения);
		
		ЗаписьСообщения.ЗакончитьЗапись();
	Исключение
		ЗаписьСообщения.ПрерватьЗапись();
		ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки(), ОшибкаЗаписиФайлаСообщенияОбмена());
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторыОбъектовМетаданных(Знач ЗаписьСообщения)
	
	// Записываем элемент <Parameters>
	ЗаписьСообщения.ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	Если ЗаписьСообщения.Получатель <> ПланыОбмена.ГлавныйУзел() Тогда
		
		// Выгружаем приоритетные данные обмена (предопределенные элементы)
		ПриоритетныеДанныеОбмена = ОбменДаннымиВызовСервера.ПриоритетныеДанныеОбмена();
		
		Если ПриоритетныеДанныеОбмена.Количество() > 0 Тогда
			
			ВыборкаИзменений = ОбменДаннымиСервер.ВыбратьИзменения(
				ЗаписьСообщения.Получатель,
				ЗаписьСообщения.НомерСообщения,
				ПриоритетныеДанныеОбмена);
			
			НачатьТранзакцию();
			Попытка
				
				Пока ВыборкаИзменений.Следующий() Цикл
					
					ЗаписатьXML(ЗаписьСообщения.ЗаписьXML, ВыборкаИзменений.Получить());
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		Если Не СтандартныеПодсистемыПовтИсп.ОтключитьСправочникИдентификаторыОбъектовМетаданных() Тогда
			
			// Выгружаем справочник идентификаторов объектов метаданных
			ВыборкаИзменений = ОбменДаннымиСервер.ВыбратьИзменения(
				ЗаписьСообщения.Получатель,
				ЗаписьСообщения.НомерСообщения,
				Метаданные.Справочники["ИдентификаторыОбъектовМетаданных"]);
			
			НачатьТранзакцию();
			Попытка
				
				Пока ВыборкаИзменений.Следующий() Цикл
					
					ЗаписатьXML(ЗаписьСообщения.ЗаписьXML, ВыборкаИзменений.Получить());
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьСообщения.ЗаписьXML.ЗаписатьКонецЭлемента(); // Parameters
	
КонецПроцедуры

Процедура ЗаписатьДанныеУзловПланаОбмена(Знач ЗаписьСообщения, ЭтоЗапросПараметровУзла = Ложь)
	
	// Записываем элемент <NodesData>
	ЗаписьСообщения.ЗаписьXML.ЗаписатьНачалоЭлемента("NodesData");
	
	мУзлов = Новый Массив;
	мУзлов.Добавить(ЗаписьСообщения.Получатель);
	мУзлов.Добавить(ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел());
	
	Если ЭтоЗапросПараметровУзла И ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		
		Фабрика = СоздатьФабрикуXDTO(СоздатьФайлСхемы());

		Для каждого Узел Из мУзлов Цикл
			структурныйТип = Фабрика.Тип("CRS_Node", "УзелПланаОбмена"); 
			УзелПланаОбмена = Фабрика.Создать(структурныйТип); 
			УзелПланаОбмена.Наименование = Узел.Наименование; 
			УзелПланаОбмена.Код = Узел.Код; 
			
			УзелПланаОбмена.НастройкиСвязейМеждуБазамиРС = Фабрика.Создать(Фабрика.Тип("CRS_Node", "НастройкиСвязейМеждуБазамиРС"));
			Для каждого СтроНастр Из Узел.НастройкиСвязейМеждуБазамиРС Цикл
				ЭлСтроНастр = Фабрика.Создать(Фабрика.Тип("CRS_Node", "НастройкаСвязиМеждуБазамиРС"));
				ЭлСтроНастр.ИдентификаторОбъектаНастройки = СтроНастр.ИдентификаторОбъектаНастройки.ПолноеИмя;
				ЭлСтроНастр.ИсточникДанныхОбъекта = XMLСтрока(СтроНастр.ИсточникДанныхОбъекта);
				УзелПланаОбмена.НастройкиСвязейМеждуБазамиРС.НастройкаСвязиМеждуБазамиРС.Добавить(ЭлСтроНастр);
			КонецЦикла;
			
			Фабрика.ЗаписатьXML(ЗаписьСообщения.ЗаписьXML, УзелПланаОбмена);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьСообщения.ЗаписьXML.ЗаписатьКонецЭлемента(); // NodesData
	
	ЗаписьСообщения.ЗаписьXML.ЗаписатьНачалоЭлемента("ScenarioData"); // <ScenarioData>
	
	Если Ложь Тогда 
	СценарийСинхронизации = СценарийСинхронизацииПоУзлу(ЗаписьСообщения.Получатель);
	
	Если СценарийСинхронизации = Неопределено Тогда
	Иначе
		
		Фабрика = СоздатьФабрикуXDTO(СоздатьФайлСхемы("Сценарий"));
		
		Узел = ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел();
		
		структурныйТип = Фабрика.Тип("CRS_NodeS", "СценарийУзлаОбмена"); 
		УзелПланаОбмена = Фабрика.Создать(структурныйТип); 
		УзелПланаОбмена.Код = Узел.Код; 
		УзелПланаОбмена.Сценарий = Фабрика.Создать(Фабрика.Тип("CRS_NodeS", "Сценарии"));
		//УзелПланаОбмена.Сценарий.Комментарий = "101";
		
		УзелПланаОбмена.Сценарий.ИспользоватьРегламентноеЗадание = СценарийСинхронизации.ИспользоватьРегламентноеЗадание; 
		УзелПланаОбмена.Сценарий.Расписание = СериализаторXDTO.ЗаписатьXDTO(РасписаниеУзлаИнформационнойБазы(ЗаписьСообщения.Получатель, СценарийСинхронизации)); 
		УзелПланаОбмена.Сценарий.Комментарий = СценарийСинхронизации.Комментарий; 
		Для каждого СтрокаНастр Из СценарийСинхронизации.НастройкиОбмена Цикл
			ЭлСтроНастр = Фабрика.Создать(Фабрика.Тип("CRS_NodeS", "НастройкаСценарияОбмена"));
			ЭлСтроНастр.УзелИнформационнойБазы = Узел.Код;
			ЭлСтроНастр.ВидТранспортаОбмена = XMLСтрока(СтрокаНастр.ВидТранспортаОбмена);
			ЭлСтроНастр.ВыполняемоеДействие = XMLСтрока(СтрокаНастр.ВыполняемоеДействие);
			ЭлСтроНастр.КоличествоЭлементовВТранзакции = XMLСтрока(СтрокаНастр.КоличествоЭлементовВТранзакции);
			УзелПланаОбмена.Сценарий.НастройкиОбмена.Добавить(ЭлСтроНастр);
		КонецЦикла;
		Фабрика.ЗаписатьXML(ЗаписьСообщения.ЗаписьXML, УзелПланаОбмена);
	КонецЕсли;
	КонецЕсли;
	ЗаписьСообщения.ЗаписьXML.ЗаписатьКонецЭлемента(); // <ScenarioData>
	
КонецПроцедуры

Процедура ПрочитатьИдентификаторыОбъектовМетаданных(Знач ЧтениеСообщения)
	
	Если ЧтениеСообщения.Отправитель = ПланыОбмена.ГлавныйУзел() Тогда
		
		ЧтениеСообщения.ЧтениеXML.Прочитать(); // <Parameters>
		
		НачатьТранзакцию();
		Попытка
			
			Пока ВозможностьЧтенияXML(ЧтениеСообщения.ЧтениеXML) Цикл
				
				Данные = ПрочитатьXML(ЧтениеСообщения.ЧтениеXML);
				Данные.ОбменДанными.Загрузка = Истина;
				Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
				Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				
				Если ТипЗнч(Данные) <> Тип("УдалениеОбъекта") Тогда
					Данные.ДополнительныеСвойства.Вставить("ЗагрузкаПараметровРаботыПрограммы");
					Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				КонецЕсли;
				
				Данные.Записать();
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		ЧтениеСообщения.ЧтениеXML.Прочитать(); // </Parameters>
		
	Иначе
		
		// Пропускаем параметры работы программы
		ЧтениеСообщения.ЧтениеXML.Пропустить(); // <Parameters>...</Parameters>
		
		ЧтениеСообщения.ЧтениеXML.Прочитать(); // </Parameters>
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеУзловПланаОбмена(Знач ЧтениеСообщения, мУзловКЗаписи = Неопределено)
	
	ИзменятьРасписанияСценариев = Ложь;
	
	Если ЧтениеСообщения.Отправитель = ПланыОбмена.ГлавныйУзел() Тогда
		
		ЧтениеСообщения.ЧтениеXML.Прочитать(); // <NodesData>
		
		Если ЧтениеСообщения.ЧтениеXML.Имя = "УзелПланаОбмена" Тогда
			НачатьТранзакцию();
			Попытка
				
				Фабрика = СоздатьФабрикуXDTO(СоздатьФайлСхемы());
				
				ИдентификаторыОбъектовМетаданных = Новый Соответствие;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИдентификаторыОбъектовМетаданных.Ссылка,
				|	ИдентификаторыОбъектовМетаданных.ПолноеИмя
				|ИЗ
				|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных";
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ИдентификаторыОбъектовМетаданных.Вставить(ВыборкаДетальныеЗаписи.ПолноеИмя, ВыборкаДетальныеЗаписи.Ссылка);
				КонецЦикла;
				
				НастройкиСвязейМеждуБазамиРС = ПланыОбмена.ОбменДанными2K_CRS.ПустаяСсылка().НастройкиСвязейМеждуБазамиРС.ВыгрузитьКолонки();
				
				Для н = 1 По 2 Цикл
					
					ФайлОбмена = Фабрика.ПрочитатьXML(ЧтениеСообщения.ЧтениеXML, Фабрика.Тип("CRS_Node", "УзелПланаОбмена"));
					СтруктураУзла = Новый Структура("Код, Наименование, НастройкиСвязейМеждуБазамиРС");
					//Узел = ПланыОбмена.ОбменДанными2K_CRS.НайтиПоКоду(ФайлОбмена.Код).ПолучитьОбъект();
					
					СтруктураУзла.Код = ФайлОбмена.Код;
					
					СтруктураУзла.Наименование = ФайлОбмена.Наименование;
					СтруктураУзла.НастройкиСвязейМеждуБазамиРС = НастройкиСвязейМеждуБазамиРС.Скопировать();
					
					Для каждого Настройка Из ФайлОбмена.НастройкиСвязейМеждуБазамиРС.НастройкаСвязиМеждуБазамиРС Цикл
						ИдентификаторОбъектаНастройки = ИдентификаторыОбъектовМетаданных.Получить(Настройка.ИдентификаторОбъектаНастройки);
						Если ИдентификаторОбъектаНастройки = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Стр = СтруктураУзла.НастройкиСвязейМеждуБазамиРС.Добавить(); 	
						Стр.ИдентификаторОбъектаНастройки = ИдентификаторОбъектаНастройки;
						Стр.ИсточникДанныхОбъекта = Перечисления.ВидыБазИсточниковПриОбменеЦРС[Настройка.ИсточникДанныхОбъекта];
					КонецЦикла;
					
					Если мУзловКЗаписи = Неопределено Тогда
						УзелОбъект = ПланыОбмена.ОбменДанными2K_CRS.НайтиПоКоду(СтруктураУзла.Код).ПолучитьОбъект();
						УзелОбъект.Наименование = СтруктураУзла.Наименование;
						УзелОбъект.НастройкиСвязейМеждуБазамиРС.Загрузить(СтруктураУзла.НастройкиСвязейМеждуБазамиРС);
						УзелОбъект.Записать();
					Иначе	
						мУзловКЗаписи.Добавить(СтруктураУзла);
					КонецЕсли;
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		
		ЧтениеСообщения.ЧтениеXML.Прочитать(); // </NodesData>
		
		ИзменятьРасписанияСценариев = Истина;
		
	Иначе
		
		// Пропускаем параметры работы программы
		ЧтениеСообщения.ЧтениеXML.Пропустить(); // <NodesData>...</NodesData>
		
		ЧтениеСообщения.ЧтениеXML.Прочитать(); // </NodesData>
		
		Если ПроцедурыОбменаДаннымиFrontOffice_Restoran.ЭтоЦентральнаяБаза(ПланыОбмена.ОбменДанными2K_CRS.ЭтотУзел()) Тогда
		
			СценарийСинхронизации = СценарийСинхронизацииПоУзлу(ЧтениеСообщения.Отправитель);
			ИзменятьРасписанияСценариев = ?(СценарийСинхронизации = Неопределено, Ложь, Не СценарийСинхронизации.ИспользоватьРегламентноеЗадание);
		
		Иначе
			ИзменятьРасписанияСценариев = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеСообщения.ЧтениеXML.Прочитать(); // <ScenarioData>
	
	//Получаем сценарий
	Если Ложь И ИзменятьРасписанияСценариев И ЧтениеСообщения.ЧтениеXML.Имя = "СценарийУзлаОбмена" Тогда
		Попытка                   
			
			Фабрика = СоздатьФабрикуXDTO(СоздатьФайлСхемы("Сценарий"));
			
			ФайлОбмена = Фабрика.ПрочитатьXML(ЧтениеСообщения.ЧтениеXML, Фабрика.Тип("CRS_NodeS", "СценарийУзлаОбмена"));
			                                     
			Если СценарийСинхронизации = Неопределено Тогда
				СценарийСинхронизации = СценарийСинхронизацииПоУзлу(ЧтениеСообщения.Отправитель);
			КонецЕсли;
			
			ЗаполненСценарийВФайле = Не ФайлОбмена.Сценарий.Расписание = Неопределено;
			
			ОбработатьДанныеСценария = Ложь;
			Если ЗначениеЗаполнено(СценарийСинхронизации) И ЗаполненСценарийВФайле Тогда
				ОбработатьДанныеСценария = ФайлОбмена.Сценарий.ИспользоватьРегламентноеЗадание = Истина;
				СценарийСинхронизацииОбъект = СценарийСинхронизации.ПолучитьОбъект();
			ИначеЕсли Не ЗначениеЗаполнено(СценарийСинхронизации) И Не ЗаполненСценарийВФайле Тогда
				ОбработатьДанныеСценария = Ложь;
			ИначеЕсли ЗначениеЗаполнено(СценарийСинхронизации) И Не ЗаполненСценарийВФайле Тогда
				//Сценарий нужно удалить
				СценарийСинхронизацииОбъект = СценарийСинхронизации.ПолучитьОбъект();
				СценарийСинхронизацииОбъект.Удалить();
				ОбработатьДанныеСценария = Ложь;
			ИначеЕсли Не ЗначениеЗаполнено(СценарийСинхронизации) И ЗаполненСценарийВФайле Тогда
				//Нет сценария его нужно добавить	
				ОбработатьДанныеСценария = Истина;
			Иначе
				ОбработатьДанныеСценария = Ложь;
			КонецЕсли;
			
			Если ОбработатьДанныеСценария Тогда
				
				Отказ = Ложь;                                
				РасписаниеРегламентногоЗадания = СериализаторXDTO.ПрочитатьXDTO(ФайлОбмена.Сценарий.Расписание);
				Если Не ЗначениеЗаполнено(СценарийСинхронизации) Тогда
					Справочники.СценарииОбменовДанными.СоздатьСценарий(ЧтениеСообщения.Отправитель, РасписаниеРегламентногоЗадания);
					СценарийСинхронизации = СценарийСинхронизацииПоУзлу(ЧтениеСообщения.Отправитель);
					СценарийСинхронизацииОбъект = СценарийСинхронизации.ПолучитьОбъект();
				Иначе
					Справочники.СценарииОбменовДанными.ОбновитьДанныеРегламентногоЗадания(Отказ, РасписаниеРегламентногоЗадания, СценарийСинхронизацииОбъект);
					СценарийСинхронизацииОбъект.НастройкиОбмена.Очистить();
				КонецЕсли;
				
				СценарийСинхронизацииОбъект.ИспользоватьРегламентноеЗадание = ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ();
				СценарийСинхронизацииОбъект.Комментарий = ФайлОбмена.Сценарий.Комментарий;
				
				Для каждого Настройка Из ФайлОбмена.Сценарий.НастройкиОбмена Цикл
					Стр = СценарийСинхронизацииОбъект.НастройкиОбмена.Добавить(); 	
					Стр.УзелИнформационнойБазы = ЧтениеСообщения.Отправитель;
					Стр.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена[Настройка.ВидТранспортаОбмена];
					Стр.ВыполняемоеДействие = Перечисления.ДействияПриОбмене[Настройка.ВыполняемоеДействие];
					Стр.КоличествоЭлементовВТранзакции = Число(Настройка.КоличествоЭлементовВТранзакции);
				КонецЦикла;	
				
				СценарийСинхронизацииОбъект.Записать();
				
			КонецЕсли;
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ЧтениеСообщения.ЧтениеXML.Прочитать(); // <ScenarioData>
		
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеОбмена(Отказ, ОписаниеОшибки = "", ОписаниеОшибкиКонтекста = "")
	
	Отказ = Истина;
	
	Комментарий = "[ОписаниеОшибкиКонтекста]: [ОписаниеОшибки]";
	
	Комментарий = СтрЗаменить(Комментарий, "[ОписаниеОшибкиКонтекста]", ОписаниеОшибкиКонтекста);
	Комментарий = СтрЗаменить(Комментарий, "[ОписаниеОшибки]", ОписаниеОшибки);
	
	ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
		УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, Комментарий);
	
КонецПроцедуры

Функция ЭтоУзелРаспределеннойИнформационнойБазы()
	
	Возврат ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные функции-свойства

Функция ИмяФайлаСообщенияОбмена()
	
	Если Не ЗначениеЗаполнено(ПолеИмяФайлаСообщенияОбмена) Тогда
		
		ПолеИмяФайлаСообщенияОбмена = "";
		
	КонецЕсли;
	
	Возврат ПолеИмяФайлаСообщенияОбмена;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Описания ошибок контекста выполнения

Функция ОшибкаОткрытияФайлаСообщенияОбмена()
	
	Возврат НСтр("ru = 'Ошибка открытия файла сообщения обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ОшибкаНачалаЧтенияФайлаСообщенияОбмена()
	
	Возврат НСтр("ru = 'Ошибка при начале чтения файла сообщения обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ОшибкаНачалаЗаписиФайлаСообщенияОбмена()
	
	Возврат НСтр("ru = 'Ошибка при начале записи файла сообщения обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ОшибкаЧтенияФайлаСообщенияОбмена()
	
	Возврат НСтр("ru = 'Ошибка чтения файла сообщения обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ОшибкаЗаписиФайлаСообщенияОбмена()
	
	Возврат НСтр("ru = 'Ошибка записи данных в файл сообщения обмена'");
	
КонецФункции

Функция ОшибкаВидаОбменаДанными()
	
	Возврат НСтр("ru = 'Обмен не по правилам конвертации не поддерживается'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

//.. Начало изменения Dim)on  17 октября 2013 г. 15:35:07
//

Функция СценарийСинхронизацииПоУзлу(УзелИнформационнойБазы)
	
	НастроенныйСценарий = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СценарииОбменовДанными.Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|	СценарииОбменовДанными.НастройкиОбмена.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СценарииОбменовДанными.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НастроенныйСценарий = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат НастроенныйСценарий;
	
КонецФункции

Функция РасписаниеУзлаИнформационнойБазы(УзелИнформационнойБазы, Сценарий = Неопределено)
	
	РасписаниеРегламентногоЗадания = Неопределено;
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		РегламентноеЗаданиеОбъект = ОбменДаннымиВызовСервера.НайтиРегламентноеЗаданиеПоПараметру(Сценарий.РегламентноеЗаданиеGUID);
		Если РегламентноеЗаданиеОбъект <> Неопределено Тогда
			РасписаниеРегламентногоЗадания = РегламентноеЗаданиеОбъект.Расписание;
		КонецЕсли;
		
		Возврат РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СценарииОбменовДанными.РегламентноеЗаданиеGUID
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|	СценарииОбменовДанными.ИспользоватьРегламентноеЗадание = ИСТИНА
	|	И СценарииОбменовДанными.НастройкиОбмена.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СценарииОбменовДанными.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		РегламентноеЗаданиеОбъект = ОбменДаннымиВызовСервера.НайтиРегламентноеЗаданиеПоПараметру(Выборка.РегламентноеЗаданиеGUID);
		Если РегламентноеЗаданиеОбъект <> Неопределено Тогда
			РасписаниеРегламентногоЗадания = РегламентноеЗаданиеОбъект.Расписание;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасписаниеРегламентногоЗадания;
	
КонецФункции

//
//.. Конец изменения Dim)on  17 октября 2013 г. 15:35:07

#КонецЕсли

