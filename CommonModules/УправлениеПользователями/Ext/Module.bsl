
// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию
//
// Параметры:
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений)
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю
//
Функция ПолучитьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию = Неопределено, Пользователь = Неопределено) Экспорт

	ВозвращаемыеЗначения = Новый Массив;
	СписокНабораПрав = ПолныеПрава.ПолучитьСписокНабораПрав(Пользователь);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НаборПрав"        , СписокНабораПрав);
	Запрос.УстановитьПараметр("ПравоПользователя", Право);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ПаролиПользователей КАК РегистрПаролей
	|
	|ГДЕ
	|	Право = &ПравоПользователя
	| И НаборПрав В(&НаборПрав)
	|
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() < СписокНабораПрав.Количество() Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		Если ВозвращаемыеЗначения.Найти(Выборка.Значение) = Неопределено Тогда
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ВозвращаемыеЗначения;

КонецФункции // ПолучитьЗначениеПраваПользователя()

// Функция возвращает право печатать непроведенные документы.
//
// Параметры:
//  Проведен     - признак проведен ли документ (если документ не проводной,
//                 то либо параметр опускается, либо равен Истина)
//
// Возвращаемое значение:
//  Истина - если можно печатать, иначе Ложь.
//
Функция РазрешитьПечатьНепроведенныхДокументов(Проведен = Истина) Экспорт

	Если Проведен Тогда
		Возврат Истина;
	КонецЕсли;

	РазрешеноПечатать = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПечатьНепроведенныхДокументов, Ложь);
	Если РазрешеноПечатать.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли РазрешеноПечатать.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПечатать[0];
	КонецЕсли;

КонецФункции // РазрешитьПечатьНепроведенныхДокументов()

// Функция возвращает право закрывать смену в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно закрывать смену в рознице.
//
Функция РазрешитьЗакрытиеСмены(Пользователь = Неопределено) Экспорт

	РазрешеноЗакрытиеСмены = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь, Пользователь);
	Если (РазрешеноЗакрытиеСмены.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноЗакрытиеСмены.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноЗакрытиеСмены[0];
	КонецЕсли;

КонецФункции // РазрешитьЗакрытиеСмены()

// Функция возвращает право аннулировать чеки в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно аннулировать чеки в рознице.
//
Функция РазрешитьАннулированиеЧека(Пользователь = Неопределено) Экспорт

	РазрешеноАннулировать = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьАннулированиеЧека, Ложь, Пользователь);
	Если (РазрешеноАннулировать.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноАннулировать.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноАннулировать[0];
	КонецЕсли;

КонецФункции // РазрешитьАннулированиеЧека()

// Функция возвращает право получать отчет о смене без гашения в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно получать отчет о смене без гашения в рознице.
//
Функция РазрешитьОтчетОСменеБезГашения(Пользователь = Неопределено) Экспорт

	РазрешеноПолучениеОтчетаОСменеБезГашения = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, Ложь, Пользователь);
	Если (РазрешеноПолучениеОтчетаОСменеБезГашения.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноПолучениеОтчетаОСменеБезГашения.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПолучениеОтчетаОСменеБезГашения[0];
	КонецЕсли;

КонецФункции // РазрешитьОтчетОСменеБезГашения()

// Функция возвращает право создания чека возврата в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно создавать чек возврата в рознице.
//
Функция РазрешитьЧекВозврата(Пользователь = Неопределено) Экспорт

	РазрешенЧекВозврата = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата, Ложь, Пользователь);
	Если (РазрешенЧекВозврата.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешенЧекВозврата.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешенЧекВозврата[0];
	КонецЕсли;

КонецФункции // РазрешитьЧекВозврата()

// Функция возвращает право назначения ручных скидок в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно создавать чек возврата в рознице.
//
Функция РазрешитьНазначениеРучныхСкидок(Пользователь = Неопределено) Экспорт

	РазрешеноНазначениеРучныхСкидок = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок, Ложь, Пользователь);
	Если (РазрешеноНазначениеРучныхСкидок.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноНазначениеРучныхСкидок.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноНазначениеРучныхСкидок[0];
	КонецЕсли;

КонецФункции // РазрешитьНазначениеРучныхСкидок()
                                                                            
// Функция возвращает признак защищать таблицу от редактирования или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если таблицу необходимо защитить от редактирования, иначе Ложь.
//
Функция ЗащитаТаблиц() Экспорт

	РазрешеноРедактирование = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеТаблиц, Ложь);

	Если (РазрешеноРедактирование.Количество() = 0)
	   ИЛИ (РазрешеноРедактирование.Количество() > 1) Тогда
		Возврат Ложь;
	Иначе
		Возврат НЕ РазрешеноРедактирование[0];
	КонецЕсли;

КонецФункции // ЗащитаТаблиц()

 // Функция возвращает право изменять пользователя в календаре пользователя
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно изменять пользователя в календаря пользователя
//
Функция РазрешитьИзменениеПользователяВКалендареПользователя(Пользователь = Неопределено) Экспорт

	Возврат Истина;

КонецФункции // РазрешитьИзменениеПользователяВКалендареПользователя()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт

	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);

КонецФункции // ПолучитьЗначениеПоУмолчанию()

// Функция возвращает значение по умолчанию и значения реквизитов данного значения для передаваемого пользователя, настройки и списка реквизитов.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//	СписокПолей  - список значений, содержащий имена реквизитов значения настройки, которые необходимо получить
//
// Возвращаемое значение:
//  Элемент выборки запроса либо структура (в случае пустой выборки).
//
Функция ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(Пользователь, Настройка, СписокПолей) Экспорт
	
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка, СписокПолей);
	
КонецФункции // ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями()

// Общая служебная функция получения значения настроек пользователя
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка, СписокПолей = Неопределено)
	
	Возврат ПолучитьЗначениеНастройкиДляТекущегоПользователя(Настройка, , Пользователь);	
	
КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого записывается значение по умолчанию
//  Значение     - значение по умолчанию
//
// Возвращаемое значение:
//  Нет
//
Процедура УстановитьЗначениеПоУмолчанию(Пользователь, Настройка, Значение) Экспорт
	
	СсылкаНастройки = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
	МенеджерЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Настройка = СсылкаНастройки;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры // ПолучитьЗначениеПоУмолчанию()

// Процедура выполняет установку настроек по умолчанию для нового пользователя
Процедура УстановитьНастройкиПоУмолчанию(Пользователь) Экспорт
	
	ЗначенияПоУмолчанию = Новый Соответствие;	
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии, Истина);	
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный, Пользователь);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ ПланВидовХарактеристик.НастройкиПользователей ГДЕ Не ЭтоГруппа И Не ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Пока Выборка.Следующий() Цикл
		Запись = Набор.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.Настройка = Выборка.Ссылка;
		Запись.Значение = Запись.Настройка.ТипЗначения.ПривестиЗначение(ЗначенияПоУмолчанию[Запись.Настройка]);
	КонецЦикла;
	Набор.Записать();
	
КонецПроцедуры

Функция ПользовательОпределен() Экспорт
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		ОписаниеОшибкиОпределенияПользователя = "Пользователь не был найден в справочнике пользователей.
			|Вход в программу возможен только при наличии роли ""Полные права"" или при наличии пользователя в справочнике.";
		#Если Клиент Тогда
			Предупреждение(ОписаниеОшибкиОпределенияПользователя);
			Возврат Ложь;
		#Иначе
			ВызватьИсключение ОписаниеОшибкиОпределенияПользователя;
		#КонецЕсли
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура инициализирует глобальную переменную глЗначениеПеременной("глТекущийПользователь").
// Переменная содержит ссылку на элемент справочника "Пользователи", 
// соответствующий текущему пользователю информационной базы.
//
// Параметры:
//  Нет.
//
Функция ОпределитьТекущегоПользователя() Экспорт

	Перем ТекущийПользователь;
	
	ИмяПользователя = ИмяПользователя();
	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		// пользователь не авторизовался
		ИмяПользователя = "НеАвторизован";
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		// выполняем запрос по поиску элемента в справочнике пользователей
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Первые 1
		               |	Пользователи.Ссылка КАК ССЫЛКА
		               |ИЗ
		               |	Справочник.Пользователи КАК Пользователи
		               |ГДЕ
		               |	Пользователи.Код = &КодПользователя
					   |
					   |ДЛЯ ИЗМЕНЕНИЯ";
					   
		Запрос.УстановитьПараметр("КодПользователя", ИмяПользователя);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ТекущийПользователь = Выборка.Ссылка;
			
		Иначе	
			
			ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			
			ЗафиксироватьТранзакцию();
			
			Возврат ТекущийПользователь;
			
		КонецЕсли;
			
		// не нашли пользователя
		// попытаемся создать нового пользователя - не авторизован, если есть полные права
		Если НЕ РольДоступна("ПолныеПрава") Тогда
			
			ЗафиксироватьТранзакцию();
			Возврат ТекущийПользователь;
						
		КонецЕсли;		
			
		Если ПустаяСтрока(ИмяПользователя()) Тогда
			ПолноеИмяПользователя = "Не авторизован";
		Иначе
			ПолноеИмяПользователя = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя).ПолноеИмя;
		КонецЕсли;
			
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();

		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;

		ОбъектПользователь.Записать();
		
		ТекущийПользователь = ОбъектПользователь.Ссылка;
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
		Возврат Справочники.Пользователи.ПустаяСсылка();
			
	КонецПопытки;
			
	УстановитьНастройкиПоУмолчанию(ТекущийПользователь);
		
	Возврат ТекущийПользователь;
	
КонецФункции // ОпределитьТекущегоПользователя()

// Процедура инициализирует глобальную переменную глЗначениеПеременной("глТекущаяГруппаПользователей").
//  Переменная содержит ссылку на элемент справочника "ГруппыПользователей", 
//  соответствующий текщей группе пользовтелей текущего пользователя.
//
Функция ОпределитьТекущуюГруппуПользователей() Экспорт
	
	Перем ТекущаяГруппаПользователей;
	
	Если не ОпределитьПользователяПоПаролю(ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Строка")), глЗначениеПеременной("глТекущийПользователь"), ТекущаяГруппаПользователей) Тогда
		 Если Не ОпределитьТекущуюГруппуПоПользователелю(глЗначениеПеременной("глТекущийПользователь"), ТекущаяГруппаПользователей)  Тогда
		 	ТекущаяГруппаПользователей = Справочники.ГруппыПользователей.Администратор;
		 КонецЕсли;				
	КонецЕсли;
		
	Возврат ТекущаяГруппаПользователей;
	
КонецФункции // ОпределитьТекущуюГруппуПользователей()

// Процедура инициализирует глобальную переменную глЗначениеПеременной("глТекущийРежимРаботы").
//  Переменная содержит ссылку на элемент справочника "РежимыРаботы", 
//  соответствующий текщему режиму работы.
//
Функция ОпределитьТекущийРежимРаботы() Экспорт
	
	// В Back-office режиме работы системы ржим работы не имеет смысла.
	Возврат Справочники.РежимыРаботы.ПустаяСсылка();
	
КонецФункции // ОпределитьТекущийРежимРаботы()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОЛЬЗОВАТЕЛЯМИ ИБ

//Функция создает нового пользователя ИБ с настройками по умолчанию и возвращает его
Функция ДобавитьНовогоПользователяИБ(ИмяПользователя, ПолноеИмя = Неопределено, СообщатьОДобавленииПользователя = Истина, ЗаписатьПользователяВИБ = Истина) Экспорт
	
	НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	НовыйПользователь.Имя = ИмяПользователя;
	НовыйПользователь.ПолноеИмя = ?(НЕ ЗначениеЗаполнено(ПолноеИмя), ИмяПользователя, ПолноеИмя);
	
	НовыйПользователь.АутентификацияСтандартная = Истина;
	НовыйПользователь.ПоказыватьВСпискеВыбора = Истина;
	
	Если ЗаписатьПользователяВИБ Тогда
		
		Попытка
			НовыйПользователь.Записать();
			#Если Клиент Тогда
			Если СообщатьОДобавленииПользователя Тогда
				Сообщить("В список пользователей ИБ добавлен пользователь с именем """ + ИмяПользователя + """");
			КонецЕсли;
			#КонецЕсли

		Исключение
		
			#Если Клиент Тогда
			Сообщить("Ошибка при добавлении пользователя в список пользователей ИБ """ + ИмяПользователя + """");
			#КонецЕсли
	
		КонецПопытки;
	
	КонецЕсли;	
	
	Возврат НовыйПользователь;
КонецФункции

// Функция по имени ищет пользователя ИБ, если не находит - создает нового и его возвращает
// Параметры:
//	ИмяПользователя - строка по которой ищется пользователь ИБ
//  ПолноеИмяПользователя - строка, при добавлении пользователя ИБ таким будет установлено полное имя пользователя
//	СообщатьОДобавленииПользователя - Булево, нужно ли сообщать о добавлении нового пользователя ИБ
//	ЗаписатьПользователяВИБ - Нужно ли при добавлении пользователя записывать его
Функция НайтиПользователяИБ(ИмяПользователя) Экспорт
	
	Если (ИмяПользователя = "НеАвторизован") Или ПустаяСтрока(ИмяПользователя) Тогда
		ПользовательИБ = Неопределено
	Иначе
		// Ищем пользователя ИБ по имени.
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Исключение
			ПользовательИБ = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПользовательИБ;
КонецФункции

// Функция дополняет ИМЯ пробелами справа до длины 50
Функция СформироватьИмяПользователяВСправочнике(Имя) Экспорт
	
	ИмяПользователя = Имя;
	Для Счетчик = СтрДлина(ИмяПользователя) + 1 По 50 Цикл
		ИмяПользователя = ИмяПользователя + " ";	
	КонецЦикла;
	
	ИмяПользователя = Лев(ИмяПользователя, 50);
	
	Возврат ИмяПользователя;
	
КонецФункции

// Процедура синхронизирует справочник пользователей с пользователями ИБ
Процедура СинхронизироватьПользователейИПользователейИБ() Экспорт
	
	// при синхронизации списков пользователей и пользователей ИБ приоритетом
	// пользуются пользователи ИБ
	// если нет пользователя ИБ, то такой элемент списка пользователей помечаем на удаление
	// если пользователь ИБ есть а всписке такоео элемента нет, то добавляем его, а если он помечен на удаение, то снимаем пометку
	
	// имена пользователей ИБ могут быть заданы с незначащими символами
	// надо все незначимые символы из имен пользователей ИБ убрать
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		
		ИмяПользователяИБ = СокрЛП(ПользовательИБ.Имя);	
		Если ИмяПользователяИБ <> ПользовательИБ.Имя Тогда
			
			СтароеИмяПользователяИБ = ПользовательИБ.Имя;
			// полное имя тоже изменим если оно совпадает с имененм самого пользователя
			Если ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя Тогда
				ПользовательИБ.ПолноеИмя = ИмяПользователяИБ;	
			КонецЕсли;
			ПользовательИБ.Имя = ИмяПользователяИБ;
			
			Попытка
				ПользовательИБ.Записать();
			Исключение
				// не смогли пользователя еще одного записать, значит есть очень похожие имена
				Сообщить("В списке пользователей базы данных присутсвуют пользователи с именами """ + 
					СтароеИмяПользователяИБ + """ и """ + ИмяПользователяИБ + """", СтатусСообщения.Важное);
					
				Сообщить("Этим пользователям будет сопоставлен единственный элемент справочника ""Пользователи"" с именем  """ + ИмяПользователяИБ + """", СтатусСообщения.Важное);	
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 1 Пробегаем по справочнику пользователей и каких пользователей в ИБ
	// не нашли - тех помечаем на удаление
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	Пользователи.*
	                |ИЗ
	                |	Справочник.Пользователи КАК Пользователи
					|
					| ГДЕ Пользователи.ЭтоГруппа = Ложь 
					|	И Пользователи.ПометкаУдаления = Ложь";
	
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	Для Каждого ПользовательСправочника Из ТаблицаПользователей Цикл

		// Для пользователя с пустым именем не надо пользователя в ИБ создавать
		ИмяПользователя = СокрЛП(ПользовательСправочника.Код);
		Если ИмяПользователя = "" ИЛИ ИмяПользователя = "НеАвторизован" Тогда           
			Продолжить;
		КонецЕсли;
			
		// ищем пользователя ИБ по имени
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Если ПользовательИБ = Неопределено Тогда
			// такого пользователя не нашли в пользователях ИБ - помечаем его на удаление
			
			ПользовательСсылка = Справочники.Пользователи.НайтиПоКоду(ПользовательСправочника.Код);
			// такого быть не может - должны найти всегда
			Если НЕ ЗначениеЗаполнено(ПользовательСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ПользовательОбъект = ПользовательСсылка.ПолучитьОбъект();
			Попытка
				// обходим что бы можно было установить пометку на удаление
				ПользовательОбъект.ОбменДанными.Загрузка = Истина;
				ПользовательОбъект.УстановитьПометкуУдаления(Истина, Ложь);
				#Если Клиент Тогда
				Сообщить("Пользователь """ + СокрЛП(ПользовательОбъект.КОД) + """ помечен на удаление в справочнике пользователей.");
				#КонецЕсли

			Исключение
				
				#Если Клиент Тогда
				Сообщить("Ошибка при пометке на удаления пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """. " + ОписаниеОшибки());
				#КонецЕсли
 			
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// 2 Пробегаем по пользователеям ИБ и тех кого не нашли в справочнике добавляем
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		
		ИмяПользователяВСправочнике = СформироватьИмяПользователяВСправочнике(ПользовательИБ.Имя);
		ПользовательСправочника = Справочники.Пользователи.НайтиПоКоду(ИмяПользователяВСправочнике);
		// пользователя в справочнике нашли
		Если ЗначениеЗаполнено(ПользовательСправочника) Тогда
			
			ПользовательОбъект = ПользовательСправочника.ПолучитьОбъект();
			// нельзя что бы имя пользователя ИБ совпадало с именем группы
			Если ПользовательОбъект.ЭтоГруппа Тогда
				
				#Если Клиент Тогда
				Сообщить("Имя пользователя ИБ """ + СокрЛП(ПользовательОбъект.КОД) + """ совпадает с именем группы в справочнике пользователей!", СтатусСообщения.Важное);
				#КонецЕсли

				Продолжить;
			КонецЕсли;
			
			Если НЕ ПользовательОбъект.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
				
			Попытка
				// обходим что бы можно было установить пометку на удаление
				ПользовательОбъект.ОбменДанными.Загрузка = Истина;
				ПользовательОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
				ПользовательОбъект.мПользовательИБ = ПользовательИБ;
		        ПользовательОбъект.Код          = ИмяПользователяВСправочнике;
				ПользовательОбъект.Наименование = ПользовательИБ.ПолноеИмя;
					
				ПользовательОбъект.Записать();
				#Если Клиент Тогда
				Сообщить("У пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """ снята пометка на удаление в справочнике пользователей.");
				#КонецЕсли

			Исключение
					
				#Если Клиент Тогда
				Сообщить("Ошибка при снятии пометки на удаления у пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """. " + ОписаниеОшибки());
				#КонецЕсли
	 			
			КонецПопытки;
			
		Иначе
			// пользователя в справочнике не нашли
			ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
			ОбъектПользователь.мПользовательИБ = ПользовательИБ;
	        ОбъектПользователь.Код          = ИмяПользователяВСправочнике;
			ОбъектПользователь.Наименование = ПользовательИБ.ПолноеИмя;

			Попытка
				ОбъектПользователь.Записать();
				
				#Если Клиент Тогда
				Сообщить("Пользователь """ + СокрЛП(ПользовательИБ.Имя) + """ зарегистрирован в справочнике пользователей.");
				#КонецЕсли
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Ошибка при добавлении пользователя """ + СокрЛП(ПользовательИБ.Имя) + """ в справочник.");
		    КонецПопытки;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура копирует пользователя ИБ с определенным именем и создает нового с такими же настройками
Функция СкопироватьПользователяИБ(ИмяПользователяИБ) Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		ПолноеИмяПользователяИБ = ИмяПользователяИБ;
	Иначе
		ПолноеИмяПользователяИБ = ПользовательИБ.ПолноеИмя;
	КонецЕсли;
	
	НовыйПользовательИБ = ДобавитьНовогоПользователяИБ(ИмяПользователяИБ, ПользовательИБ.ПолноеИмя, Ложь, Ложь);
	
	Если ПользовательИБ <> Неопределено Тогда
		// Если есть от кого копировать настройки - копируем
		НовыйПользовательИБ.ПользовательОС = ПользовательИБ.ПользовательОС;
		НовыйПользовательИБ.Пароль = "";
		НовыйПользовательИБ.АутентификацияСтандартная = ПользовательИБ.АутентификацияСтандартная;
		НовыйПользовательИБ.ПоказыватьВСпискеВыбора = ПользовательИБ.ПоказыватьВСпискеВыбора;
		НовыйПользовательИБ.АутентификацияОС = ПользовательИБ.АутентификацияОС;
		НовыйПользовательИБ.Язык = ПользовательИБ.Язык;
		НовыйПользовательИБ.ОсновнойИнтерфейс = ПользовательИБ.ОсновнойИнтерфейс;
		
		// Роли сохраняем
		Для Каждого ДоступныеРолиПользователяИБ Из ПользовательИБ.Роли Цикл
			НовыйПользовательИБ.Роли.Добавить(ДоступныеРолиПользователяИБ);
		КонецЦикла; 
	
	КонецЕсли;
  	
	Возврат  НовыйПользовательИБ;
	
КонецФункции

#Если Клиент Тогда

//Функция редактирует или создает нового пользователя ИБ
//Процедура редактирует пользователя ИБ
Функция РедактироватьИлиСоздатьПользователяИБ(ОбъектПользователя, ТекущийПользовательИБ, Знач Модифицированность = Ложь,
	Знач ПользовательДляКопированияНастроек = Неопределено) Экспорт
	
	СозданНовыйЭлемент = Ложь;
	
	Если ТекущийПользовательИБ = Неопределено Тогда
		
		Если ОбъектПользователя = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИмяПользователя = СокрЛП(ОбъектПользователя.Код);
		
		ОтветПользователя = Вопрос("Пользователь ИБ с именем """ + ИмяПользователя + """ не найден. Создать нового пользователя ИБ?", РежимДиалогаВопрос.ДаНет);
		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// создаем нового пользователя ИБ
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ТекущийПользовательИБ.Имя = ИмяПользователя;
		ТекущийПользовательИБ.ПолноеИмя = СокрЛП(ОбъектПользователя.Наименование);
		
		СозданНовыйЭлемент = Истина;		
		
	КонецЕсли;
	
	// надо показать форму редактирования настроек пользователя ИБ
	ФормаРедактированияПользователяИБ = ПолучитьОбщуюФорму("ФормаПользователяИБ");
	ФормаРедактированияПользователяИБ.ПользовательИБ = ТекущийПользовательИБ;
	ФормаРедактированияПользователяИБ.ПользовательДляКопированияНастроек = ПользовательДляКопированияНастроек;
	ФормаРедактированияПользователяИБ.Модифицированность = Модифицированность ИЛИ СозданНовыйЭлемент;
	ФормаРедактированияПользователяИБ.Пользователь = ОбъектПользователя;
	
	РезультатОткрытия = ФормаРедактированияПользователяИБ.ОткрытьМодально();
	
	Возврат РезультатОткрытия;
	
КонецФункции

#КонецЕсли









// Процедура проверяет возможность запуска ИБ с определенными для текущего
// пользователя доступными ролями.
//
Процедура ПроверитьВозможностьРаботыПользователя(Отказ) Экспорт

	Если Не ПолныеПрава.ЕстьДоступныеПраваДляЗапускаКонфигурации() Тогда
		Отказ = Истина;
		#Если Клиент Тогда
		Предупреждение("У текущего пользователя нет доступных ролей, для запуска информационной базы.", 10, "Недостаточно прав доступа");
		#КонецЕсли
	КонецЕсли; 
	
КонецПроцедуры
 
Функция АвторизоватьПользователя(Пользователь, ГруппаПользователей)
	
	// Авторизация пользователя.	
	глЗначениеПеременнойУстановить("глТекущийПользователь", Пользователь);
	глЗначениеПеременнойУстановить("глТекущаяГруппаПользователей", ГруппаПользователей);
	
	// Применение прав доступа.
	
	// Применени настроек.
	
	Возврат Истина;
	
КонецФункции

Функция ЗапросНастроек(ВладелецНастроек)
	Запрос = Новый Запрос;
	Запрос.Текст="
	|Выбрать Ссылка.Наименование как Настройка, ЗначениеНастроек.Значение Из ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|ПО ЗначениеНастроек.Настройка=Настройки.Ссылка
	|И  ЗначениеНастроек.Пользователь=&ВладелецНастроек
	|ГДЕ (НЕ Настройки.ПометкаУдаления)И(НЕ Настройки.ЭтоГруппа)
	//|ГДЕ не ПометкаУдаления
	|УПОРЯДОЧИТЬ По Настройки.Наименование
	|";
	Запрос.УстановитьПараметр("ВладелецНастроек", ВладелецНастроек);
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции
     
Процедура НайтиСтрокиСВремяЖизни (ТПДерево) Экспорт 
	
	СписокВремяЖизни = Новый Массив;                                          
	СписокВремяЖизни.Добавить("Время жизни элементов черного списка");
	СписокВремяЖизни.Добавить("ВремяЖизниЭлементовЧерногоСписка");
	
	Для каждого СтрМассив Из  СписокВремяЖизни Цикл
		
		ТекущаяСтрока = НастройкиПользователейНайтиВремяЖизни(ТПДерево.Значение, СтрМассив);
		Если ЗначениеЗаполнено(ТекущаяСтрока) тогда 
			
			ТПДерево.ТекущаяСтрока = ТекущаяСтрока;
			ТПДерево.ТекущаяКолонка.ЭлементУправления.Формат  = "ДФ=dd.HH:mm";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция  НастройкиПользователейНайтиВремяЖизни(Дерево, ВремяЖизни, ПрерватьЦикл = Ложь , СтрокаДерева = Неопределено)
	
	
	Для каждого стр Из Дерево.Строки Цикл 
		Если Не ПрерватьЦикл тогда
			Если стр.Наименование = ВремяЖизни Тогда
				СтрокаДерева = стр;
				ПрерватьЦикл = истина;
				Прервать;
			КонецЕсли;
			Если стр.Строки.Количество()> 0 тогда
				НастройкиПользователейНайтиВремяЖизни(стр, ВремяЖизни, ПрерватьЦикл, СтрокаДерева);
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаДерева;
	
КонецФункции        
// Функция применяется при необходимости получить сведения об учетной политике организации.
//
// Параметры:
// СписокЗначений - список значений или массив элементов содержащий перечень 
//                  элементов для которых необходимо прочитать настройки
//					(при этом каждый следующий элемент имеет более высокий приоритет)
// Возвращаемое значение - таблица значений. Таблица, каждая строка которой 
//  соответствует записи регистра. 
//
//Функция СоздатьКЭШНастроек(Значение) Экспорт
//	
//	
//	
//	глНастройки = Новый ТаблицаЗначений;
//	//получаем глоб. настройки
//	глНастройки = ЗапросНастроек(Неопределено);
//	//считываем настроки для элементов списка
//	Если ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
//		Для Каждого ЭлементСписка Из Значение Цикл
//			НастройкиЭлемента = Новый ТаблицаЗначений; 
//			НастройкиЭлемента = ЗапросНастроек(ЭлементСписка.Значение);
//			Для Каждого СтрокаНастроек Из НастройкиЭлемента Цикл 
//				НайденнаяСтрока = глНастройки.Найти(СтрокаНастроек.Настройка, "Настройка");
//				Если СтрокаНастроек.Значение<>Null Тогда
//					НайденнаяСтрока.Значение=СтрокаНастроек.Значение;
//				КонецЕсли;				
//			КонецЦикла;	
//		КонецЦикла;
//	Иначе 
//		Возврат "";
//	КонецЕсли;	
//	
//КонецФункции // СоздатьКЭШНастроек()

//Функция ПолучитьНастройкуИзКЭШ(ЧтоИщем) Экспорт
//	
//	НайденнаяСтрока = глНастройки.Найти(ЧтоИщем, "Настройка");
//	Если НайденнаяСтрока = Неопределено Тогда
//		Предупреждение("Настройка не найдена!");
//	Иначе
//		Предупреждение(ЧтоИщем+": "+НайденнаяСтрока.Значение);
//		Возврат НайденнаяСтрока.Значение;
//	КонецЕсли;
//	
//КонецФункции // СоздатьКЭШНастроек()


Процедура СоздатьКЭШНастроекПользователя() Экспорт
	
	глЗначениеПеременнойУстановить("глНастройкиПользователя", ПрочитатьНастройкиПользователя(,, ПланыВидовХарактеристик.НастройкиПользователей), Истина);
	глЗначениеПеременнойУстановить("глДополнительныеПраваПользователя", ПрочитатьНастройкиПользователя(,, ПланыВидовХарактеристик.ПраваПользователей), Истина);
	глЗначениеПеременнойУстановить("глНастройкиСтиля", ПрочитатьТаблицуЦветовФонаСтиля(ПрочитатьТаблицуЦветовСтиля(ПрочитатьТаблицуШрифтовСтиля(Неопределено, Неопределено), Неопределено), Неопределено), Истина);
	
КонецПроцедуры



Функция ПрочитатьНастройкиПользователя(Пользователь = Неопределено, ГруппаПользователей = Неопределено, ПланВидов = Неопределено, Настройка = Неопределено) Экспорт
	
	// Нормализация.
	Если (Пользователь = Неопределено) Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	Если (ГруппаПользователей = Неопределено) Тогда
		ГруппаПользователей = ПараметрыСеанса.ТекущаяГруппаПользователей;
	КонецЕсли;
	Если (ПланВидов = Неопределено) Тогда
		ПланВидов = ПланыВидовХарактеристик.НастройкиПользователей;
	КонецЕсли;
	Если (ПланВидов = ПланыВидовХарактеристик.НастройкиПользователей) Тогда
		ИмяПланаВидовХарактеристик = Метаданные.ПланыВидовХарактеристик.НастройкиПользователей.Имя;
		ИмяРегистраСведений = Метаданные.РегистрыСведений.НастройкиПользователей.Имя;
		ИмяИзмерения = "Настройка";
	КонецЕсли;
	Если (ПланВидов = ПланыВидовХарактеристик.ПраваПользователей) Тогда
		ИмяПланаВидовХарактеристик = Метаданные.ПланыВидовХарактеристик.ПраваПользователей.Имя;
		ИмяРегистраСведений = Метаданные.РегистрыСведений.ЗначенияДополнительныхПравПользователя.Имя;
		ИмяИзмерения = "Право";
	КонецЕсли;
	
	
	// Запрос I - По умолчанию.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Ссылка КАК Настройка,
		|	НастройкиПользователей.ПоУмолчанию КАК Значение,
		|	НастройкиПользователей.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик." + ИмяПланаВидовХарактеристик + " КАК НастройкиПользователей
		|";
	Если (Не Настройка = Неопределено) Тогда
		Запрос.Текст = Запрос.Текст +
			"ГДЕ
			|	НастройкиПользователей.Ссылка В (&Настройка)
			|";
		Запрос.УстановитьПараметр("Настройка", Настройка);	
	КонецЕсли;
	Настройки = Запрос.Выполнить().Выгрузить();
	
	
	// Запрос II - Значения.
	СписокПользователей = Новый СписокЗначений();
	СписокПользователей.Добавить(Неопределено);
	Если Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ГруппаПользователей) Тогда
		СписокПользователей.Добавить(ГруппаПользователей);
	КонецЕсли;
	Если Не ОбщегоНазначения.ЗначениеНЕЗаполнено(Пользователь) Тогда
		СписокПользователей.Добавить(Пользователь);
	КонецЕсли;
	Если Не ОбщегоНазначения.ЗначениеНЕЗаполнено(ПараметрыСеанса.ТекущийРежимРаботы) Тогда
		СписокПользователей.Добавить(ПараметрыСеанса.ТекущийРежимРаботы);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Пользователь КАК Пользователь,
		|	НастройкиПользователей." + ИмяИзмерения + " КАК Настройка,
		|	НастройкиПользователей.Значение КАК Значение
		|ИЗ
		|	РегистрСведений." + ИмяРегистраСведений + " КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Пользователь В (&СписокПользователей)
		|";
	Если (Не Настройка = Неопределено) Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|	И НастройкиПользователей." + ИмяИзмерения + " В (&Настройка)
			|";
		Запрос.УстановитьПараметр("Настройка", Настройка);	
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	РезультатВыполненияЗапроса = Запрос.Выполнить();
	
	Если РезультатВыполненияЗапроса.Пустой() Тогда
		Возврат Настройки;
	КонецЕсли;
	
	// Объединение запросов.
	СтуктураПоиска = Новый Структура("Пользователь");
	Для Каждого ЭлементСпискаПользователей Из СписокПользователей Цикл
		СтуктураПоиска.Пользователь = ЭлементСпискаПользователей.Значение;
		
		Выборка = РезультатВыполненияЗапроса.Выбрать();
		Пока Выборка.НайтиСледующий(СтуктураПоиска) Цикл
			
			НайденнаяСтрока = Настройки.Найти(Выборка.Настройка, "Настройка");
			Если (Не НайденнаяСтрока = Неопределено) Тогда
				НайденнаяСтрока.Значение = НайденнаяСтрока.ТипЗначения.ПривестиЗначение(Выборка.Значение);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	

	Возврат Настройки;
	
КонецФункции

// Функция возвращает значение настройки, установленной для таблицы настроек.
//
Функция ПолучитьЗначениеНастройкиДляТаблицыНастроек(Настройка, ЗначениеПоУмолчанию = Неопределено, ТаблицаНастроек) Экспорт

	// Получение настройки.
	НайденнаяСтрока = ТаблицаНастроек.Найти(Настройка, "Настройка");
	Если (НайденнаяСтрока = Неопределено) Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		Возврат НайденнаяСтрока.ТипЗначения.ПривестиЗначение(НайденнаяСтрока.Значение);
	КонецЕсли;

КонецФункции // ПолучитьЗначениеНастройкиДляТаблицыНастроек

// Функция возвращает значение настройки, установленной для пользователя.
Функция ПолучитьЗначениеНастройкиДляТекущегоПользователя(Настройка, ЗначениеПоУмолчанию = Неопределено, Пользователь = Неопределено, ГруппаПользователей = Неопределено, ПланВидов = Неопределено) Экспорт

	// Нормализация.
	Если (Пользователь = Неопределено) Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	Если (ГруппаПользователей = Неопределено) Тогда
		ГруппаПользователей = ПараметрыСеанса.ТекущаяГруппаПользователей;
	КонецЕсли;
	// -- План видов.
	Если (ПланВидов = Неопределено) Тогда
		ПланВидов = ПланыВидовХарактеристик.НастройкиПользователей;
	КонецЕсли;
	Если (ПланВидов = ПланыВидовХарактеристик.НастройкиПользователей) Тогда
		ИмяПеременнойНастроек = "глНастройкиПользователя";
	КонецЕсли;
	Если (ПланВидов = ПланыВидовХарактеристик.ПраваПользователей) Тогда
		ИмяПеременнойНастроек = "глДополнительныеПраваПользователя";
	КонецЕсли;
	Если (ТипЗнч(Настройка) = Тип("Строка")) Тогда
		Настройка = ПланВидов[Настройка];
	КонецЕсли;
	
	
	// Режим получения настроек.
	Если (Пользователь = ПараметрыСеанса.ТекущийПользователь) И (ГруппаПользователей = ПараметрыСеанса.ТекущаяГруппаПользователей) Тогда
		ТаблицаНастроек = глЗначениеПеременной(ИмяПеременнойНастроек);
	Иначе
		ТаблицаНастроек = ПрочитатьНастройкиПользователя(Пользователь, ГруппаПользователей, ПланВидов, Настройка);
	КонецЕсли;
	
	
	// Получение настройки.
	Возврат ПолучитьЗначениеНастройкиДляТаблицыНастроек(Настройка, ЗначениеПоУмолчанию, ТаблицаНастроек);

КонецФункции // ПолучитьЗначениеНастройкиДляТекущегоПользователя

// Функция возвращает значение настройки, установленной для пользователя.
//
Функция ПолучитьЗначениеНастройки(Настройка, ТаблицаНастроек = Неопределено) Экспорт

	Если (ТаблицаНастроек = Неопределено) Тогда
		Возврат ПолучитьЗначениеНастройкиДляТекущегоПользователя(Настройка);
	Иначе
		Возврат ПолучитьЗначениеНастройкиДляТаблицыНастроек(Настройка, , ТаблицаНастроек);
	КонецЕсли;

КонецФункции // ПолучитьЗначениеНастройки


// Функция возвращает значение права, установленной таблицы прав.
//
Функция ПолучитьЗначениеПраваДляТаблицыПрав(Право, ЗначениеПоУмолчанию = Неопределено, ТаблицаПрав) Экспорт
	
	Если (ТипЗнч(Право) = Тип("СписокЗначений")) Тогда
		
		Для Каждого ТекущееПраво Из Право Цикл
			Если Не ПолучитьЗначениеНастройкиДляТаблицыНастроек(ТекущееПраво.Значение, ЗначениеПоУмолчанию, ТаблицаПрав) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		
		Возврат ПолучитьЗначениеНастройкиДляТаблицыНастроек(Право, ЗначениеПоУмолчанию, ТаблицаПрав);
		
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеПраваДляТаблицыПрав	

// Функция возвращает значение права, установленной для пользователя.
//
Функция ПолучитьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию = Неопределено, Пользователь = Неопределено, ГруппаПользователей = Неопределено) Экспорт
	
	Если (ТипЗнч(Право) = Тип("СписокЗначений")) Тогда
		
		Для Каждого ТекущееПраво Из Право Цикл
			Если Не ПолучитьЗначениеНастройкиДляТекущегоПользователя(ТекущееПраво.Значений, ЗначениеПоУмолчанию, Пользователь, ГруппаПользователей, ПланыВидовХарактеристик.ПраваПользователей) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		
		Возврат ПолучитьЗначениеНастройкиДляТекущегоПользователя(Право, ЗначениеПоУмолчанию, Пользователь, ГруппаПользователей, ПланыВидовХарактеристик.ПраваПользователей);
		
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеПраваДляТекущегоПользователя	

// Функция возвращает значение права, установленной для пользователя.
//
Функция ПолучитьЗначениеПрава(Право, ТаблицаПрав = Неопределено) Экспорт

	Если (ТаблицаПрав = Неопределено) Тогда
		Возврат ПолучитьЗначениеПраваДляТекущегоПользователя(Право);
	Иначе
		Возврат ПолучитьЗначениеПраваДляТаблицыПрав(Право, , ТаблицаПрав);
	КонецЕсли;

КонецФункции // ПолучитьЗначениеПрава


Функция УпроститьЗначениеПрава(Значение = Неопределено) Экспорт

	Если (Значение = Истина) Или (Значение = Перечисления.ПраваДоступаПользователей.Разрешить) Или (Значение = Перечисления.ПраваДоступаПользователей.Привилегированные) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // УпроститьЗначениеПрава()


Функция ПроверитьПолномочияПользователя(ТребуемыеПолномочия, Пользователь = Неопределено, ГруппаПользователей = Неопределено) Экспорт
	
	// Нормализация.
	Если (ТребуемыеПолномочия = Неопределено) Тогда
		Возврат Истина;
	КонецЕсли;
	Если (Пользователь = Неопределено) Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	Если (ГруппаПользователей = Неопределено) Тогда
		ГруппаПользователей = ПараметрыСеанса.ТекущаяГруппаПользователей;
	КонецЕсли;
	
	// Режим получения настроек.
	Если (Пользователь = ПараметрыСеанса.ТекущийПользователь) И (ГруппаПользователей = ПараметрыСеанса.ТекущаяГруппаПользователей) Тогда
		ТаблицаПрав = глЗначениеПеременной("глДополнительныеПраваПользователя");
	Иначе
		ТаблицаПрав = ПрочитатьНастройкиПользователя(Пользователь, ГруппаПользователей, ПланыВидовХарактеристик.ПраваПользователей, ТребуемыеПолномочия);
	КонецЕсли;
	
	// Проверка полномочий
	Если (ТипЗнч(ТребуемыеПолномочия) = Тип("СписокЗначений")) Тогда
		
		Для Каждого Полномочие Из ТребуемыеПолномочия Цикл
			Если Не ПолучитьЗначениеПраваДляТаблицыПрав(Полномочие.Значение, , ТаблицаПрав) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		
		Возврат ПолучитьЗначениеПраваДляТаблицыПрав(ТребуемыеПолномочия, , ТаблицаПрав);
		
	КонецЕсли;
	
КонецФункции



Функция ОпределитьПользователяПоПаролю(Пароль, Пользователь = Неопределено, ГруппаПользователей = Неопределено) Экспорт
	
	// Пустой пароль и пользователь.
	Если ПустаяСтрока(Пароль) И (Пользователь = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Запрос.
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ГруппыПользователей.Пользователь,
			|	ГруппыПользователей.ГруппаПользователей
			|ИЗ
			|	РегистрСведений.ГруппыПользователей КАК ГруппыПользователей
			|ГДЕ
			|	ГруппыПользователей.Пароль = &Пароль";
	Запрос.УстановитьПараметр("Пароль", Пароль);
	Если (Не Пользователь = Неопределено) Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|	И ГруппыПользователей.Пользователь В (&Пользователь)
			|";
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		Если ПустаяСтрока(Пароль) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГруппыПользователей.Пароль = &Пароль", "ГруппыПользователей.Пароль = &Пароль ИЛИ ГруппыПользователей.АутентификацияСтандартная");
		КонецЕсли; 
		
	КонецЕсли;
	Если (Не ГруппаПользователей = Неопределено) Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|	И ГруппыПользователей.ГруппаПользователей В (&ГруппаПользователей)
			|";
		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	// Пользователь не найден.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Пользователь = Выборка.Пользователь;
	ГруппаПользователей = Выборка.ГруппаПользователей;
	Возврат Истина;
	
КонецФункции

Функция ОпределитьТекущуюГруппуПоПользователелю(Пользователь = Неопределено, ГруппаПользователей = Неопределено) 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыПользователей.Пользователь,
	|	ГруппыПользователей.ГруппаПользователей КАК ГруппаПользователей
	|ИЗ
	|	РегистрСведений.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Пользователь = &Пользователь
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса= Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ГруппаПользователей = Выборка.ГруппаПользователей;
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

Функция ОпределитьПользователяПоИнформационнойКарте(Карта, Пользователь = Неопределено, ГруппаПользователей = Неопределено) Экспорт
	
	// Проверка карты.
	ПользовательКарты = Карта.ВладелецКарты;
	ГруппаПользователейКарты = Карта.ГруппаПользователей;
	
	//.. Начало изменения Dim)on  16 октября 2013 г. 16:05:43
	//
	//Если (Не Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная) Или
	//	 (Не ЗначениеЗаполнено(ПользовательКарты)) Или (Не ЗначениеЗаполнено(ГруппаПользователейКарты)) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	Если (Не ТипЗнч(Карта) = Тип("СправочникСсылка.РегистрационныеКарты")) И 
		(Не (ТипЗнч(Карта) = Тип("СправочникСсылка.ИнформационныеКарты") И Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная)) Или
		 (Не ЗначениеЗаполнено(ПользовательКарты)) Или (Не ЗначениеЗаполнено(ГруппаПользователейКарты)) Тогда
		Возврат Ложь;
	КонецЕсли;
	//
	//.. Конец изменения Dim)on  16 октября 2013 г. 16:05:43
	
	// Проверка пользователя.
	Если (Не Пользователь = Неопределено) Тогда
		Если (ТипЗнч(Пользователь) = Тип("СписокЗначений")) Тогда
			Если (Пользователь.НайтиПоЗначению(ПользовательКарты) = Неопределено) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если (Не ПользовательКарты = Пользователь) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если (Не ГруппаПользователей = Неопределено) Тогда
		Если (ТипЗнч(ГруппаПользователей) = Тип("СписокЗначений")) Тогда
			Если (ГруппаПользователей.НайтиПоЗначению(ГруппаПользователейКарты) = Неопределено) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если (Не ПользовательКарты = ГруппаПользователейКарты) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Пользователь = ПользовательКарты;
	ГруппаПользователей = ГруппаПользователейКарты;
	Возврат Истина;
	
КонецФункции // ОпределитьПользователяПоИнформационнойКарте()


Функция ОпределитьСотрудникаПоПользователю(Пользователь) Экспорт
	
	Возврат Пользователь.Сотрудник;
	
КонецФункции

Функция ОпределитьРесторанПоРежимуРаботы(РежимРаботы) Экспорт
	
	// Выборка данных.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	НастройкиПользователей.Значение КАК Ресторан
	                      |ИЗ
	                      |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	                      |ГДЕ
	                      |	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.FrontOfficeОсновнойРесторан)
	                      |	И (НастройкиПользователей.Пользователь = НЕОПРЕДЕЛЕНО
	                      |			ИЛИ НастройкиПользователей.Пользователь = &РежимРаботы)");
	Запрос.УстановитьПараметр("РежимРаботы", РежимРаботы);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Рестораны.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаРезультатаЗапроса.Получить(ТаблицаРезультатаЗапроса.Количество() - 1).Ресторан;
	
КонецФункции // ОпределитьРесторанПоРежимуРаботы()

Функция ЗаголовокСистемы() Экспорт
	
	Если ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		
		Возврат Строка(глЗначениеПеременной("глТекущийПользователь")) + " [" + Строка(глЗначениеПеременной("глТекущаяГруппаПользователей")) + "]";
		
	Иначе
		
		Возврат ""; 
		
	КонецЕсли;
	
КонецФункции


Функция ПроверитьПарольRoot(знач Пароль, Пользователь=0,Доступ=0) Экспорт
	Перем минут,секунд;
	Перем UsrRootПароль;//временно
                
	// нормализация
	Пароль = СокрП(Пароль);
	Если ПустаяСтрока(Пароль) Тогда
		Возврат 0;
	КонецЕсли;

	UsrRootПароль="h23[год]";

	// вычисляемые значения
	// -- подготовка переменных
	тв			= Лев(Формат(ТекущаяДата(), "ДЛФ=T"),5);
	тд			= ТекущаяДата();
	год			= Формат(Год(тд),"ЧГ=0");
	месяц		= Формат(Месяц(тд),"Ч(0)2.0");
	день		= Формат(День(тд),"Ч(0)2.0");
	ндн			= ДеньНедели(тд);
	//версия		= глVerПредставление(Версия);
	комп		= НРег(ИмяКомпьютера());//НРег(глVarКомпьютер);
	компьютер	= ВРег(ИмяКомпьютера());//ВРег(глVarКомпьютер);
	
	// root
	//Если (Пароль = Шаблон("[]"+глUsrRootПароль)) Тогда
	//	Пользователь = глSysПользователь;
	//	Доступ = глSysДоступ;
	//	Возврат 1;
	//КонецЕсли;       	
	симв = Найти(UsrRootПароль, "[");
	ч1 = Лев(UsrRootПароль,симв-1);
	СтрокаПароля = СтрЗаменить(UsrRootПароль, "[", "");
	СтрокаПароля = СтрЗаменить(СтрокаПароля, "]", "");
	ч2 = СокрЛП(Вычислить(Прав(СтрокаПароля,СтрДлина(СтрокаПароля)-(симв-1))));
    Если Пароль = (ч1+ч2) Тогда
		Возврат 1;
	КонецЕсли;	
	// простой пароль
	Возврат 0;
КонецФункции

Функция ПарольЧисловой(Пароль) Экспорт
	Попытка 
		КонтрольноеЧисло=Число(Пароль);
		Возврат Истина;
	Исключение 
		Возврат Ложь;
	КонецПопытки;
КонецФункции	

Функция ПрочитатьТаблицуШрифтовСтиля(ТаблицаСтиля = Неопределено, Подмена = "Шрифт") Экспорт
	
	// Данные.
	Если (ТаблицаСтиля = Неопределено) Тогда
		ТаблицаСтиля = Новый ТаблицаЗначений;
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Имя") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("ЭлементСтиля") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("ЭлементСтиля", Новый ОписаниеТипов("Строка"), "Элемент стиля");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Шрифт") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Шрифт", Новый ОписаниеТипов("Шрифт"), "Шрифт");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Цвет") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Цвет"), "Цвет");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("ЦветФона") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("ЦветФона", Новый ОписаниеТипов("Цвет"), "Цвет фона");
	КонецЕсли;
	
	// Выборка данных.
	НастройкиСтиля = РегистрыСведений.ШрифтыСтиля.Получить();
	
	// Перенос данных.
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.ШрифтыСтиля.Ресурсы Цикл
		Имя = СтрЗаменить(Ресурс.Имя, "Шрифт", Неопределено);
		
		СтрокаТаблицы = ТаблицаСтиля.Найти(Имя, "Имя");
		Если (СтрокаТаблицы = Неопределено) Тогда
			СтрокаТаблицы = ТаблицаСтиля.Добавить();
			СтрокаТаблицы.Имя = Имя;
			СтрокаТаблицы.ЭлементСтиля = СтрЗаменить(Ресурс.Синоним, "Шрифт", Подмена);
			СтрокаТаблицы.Шрифт = ШрифтыСтиля.ШрифтТекста;
			СтрокаТаблицы.Цвет = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
		
		Если (ТипЗнч(НастройкиСтиля[Ресурс.Имя]) = Тип("ХранилищеЗначения")) Тогда
			Настройка = НастройкиСтиля[Ресурс.Имя].Получить();
			Если (Не Настройка = Неопределено) Тогда
				СтрокаТаблицы.Шрифт = ТаблицаСтиля.Колонки.Шрифт.ТипЗначения.ПривестиЗначение(Настройка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСтиля;
	
КонецФункции // ПрочитатьТаблицуШрифтовСтиля()

Функция ЗаписатьТаблицуШрифтовСтиля(ТаблицаСтиля) Экспорт
	
	// Выборка данных.
	Запись = РегистрыСведений.ШрифтыСтиля.СоздатьМенеджерЗаписи(); 
	
	// Перенос данных.
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.ШрифтыСтиля.Ресурсы Цикл
		Имя = СтрЗаменить(Ресурс.Имя, "Шрифт", Неопределено);
		
		СтрокаТаблицы = ТаблицаСтиля.Найти(Имя, "Имя");
		Если (СтрокаТаблицы = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись[Ресурс.Имя] = Новый ХранилищеЗначения(СтрокаТаблицы.Шрифт);
		
	КонецЦикла;
	
	// Запись данных.
	Попытка
		Запись.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Ложь, ,, Запись);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьТаблицуШрифтовСтиля()

Функция ПрочитатьТаблицуЦветовСтиля(ТаблицаСтиля = Неопределено, Подмена = "Цвет") Экспорт
	
	// Данные.
	Если (ТаблицаСтиля = Неопределено) Тогда
		ТаблицаСтиля = Новый ТаблицаЗначений;
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Имя") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("ЭлементСтиля") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("ЭлементСтиля", Новый ОписаниеТипов("Строка"), "Элемент стиля");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Шрифт") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Шрифт", Новый ОписаниеТипов("Шрифт"), "Шрифт");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Цвет") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Цвет"), "Цвет");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("ЦветФона") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("ЦветФона", Новый ОписаниеТипов("Цвет"), "Цвет фона");
	КонецЕсли;
	
	// Выборка данных.
	НастройкиСтиля = РегистрыСведений.ЦветаСтиля.Получить();
	
	// Перенос данных.
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.ЦветаСтиля.Ресурсы Цикл
		Имя = СтрЗаменить(Ресурс.Имя, "Цвет", Неопределено);
		
		СтрокаТаблицы = ТаблицаСтиля.Найти(Имя, "Имя");
		Если (СтрокаТаблицы = Неопределено) Тогда
			СтрокаТаблицы = ТаблицаСтиля.Добавить();
			СтрокаТаблицы.Имя = Имя;
			СтрокаТаблицы.ЭлементСтиля = СтрЗаменить(Ресурс.Синоним, "Цвет", Подмена);
			СтрокаТаблицы.Шрифт = ШрифтыСтиля.ШрифтТекста;
			СтрокаТаблицы.Цвет = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
		
		Если (ТипЗнч(НастройкиСтиля[Ресурс.Имя]) = Тип("ХранилищеЗначения")) Тогда
			Цвет = НастройкиСтиля[Ресурс.Имя].Получить();
			Если (Не Цвет = Неопределено) Тогда
				СтрокаТаблицы.Цвет = ТаблицаСтиля.Колонки.Цвет.ТипЗначения.ПривестиЗначение(Цвет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСтиля;
	
КонецФункции // ПрочитатьТаблицуЦветовСтиля()

Функция ЗаписатьТаблицуЦветовСтиля(ТаблицаСтиля) Экспорт
	
	// Выборка данных.
	Запись = РегистрыСведений.ЦветаСтиля.СоздатьМенеджерЗаписи(); 
	
	// Перенос данных.
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.ЦветаСтиля.Ресурсы Цикл
		Имя = СтрЗаменить(Ресурс.Имя, "Цвет", Неопределено);
		
		СтрокаТаблицы = ТаблицаСтиля.Найти(Имя, "Имя");
		Если (СтрокаТаблицы = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись[Ресурс.Имя] = Новый ХранилищеЗначения(СтрокаТаблицы.Цвет);
		
	КонецЦикла;
	
	// Запись данных.
	Попытка
		Запись.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Ложь, ,, Запись);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ПолучитьТаблицуЦветовСтиля()

Функция ПрочитатьТаблицуЦветовФонаСтиля(ТаблицаСтиля = Неопределено, Подмена = "Цвет фона") Экспорт
	
	// Данные.
	Если (ТаблицаСтиля = Неопределено) Тогда
		ТаблицаСтиля = Новый ТаблицаЗначений;
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Имя") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("ЭлементСтиля") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("ЭлементСтиля", Новый ОписаниеТипов("Строка"), "Элемент стиля");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Шрифт") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Шрифт", Новый ОписаниеТипов("Шрифт"), "Шрифт");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("Цвет") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Цвет"), "Цвет");
	КонецЕсли;
	Если (ТаблицаСтиля.Колонки.Найти("ЦветФона") = Неопределено) Тогда
		ТаблицаСтиля.Колонки.Добавить("ЦветФона", Новый ОписаниеТипов("Цвет"), "Цвет фона");
	КонецЕсли;
	
	// Выборка данных.
	НастройкиСтиля = РегистрыСведений.ЦветаФонаСтиля.Получить();
	
	// Перенос данных.
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.ЦветаФонаСтиля.Ресурсы Цикл
		Имя = СтрЗаменить(Ресурс.Имя, "ЦветФона", Неопределено);
		
		СтрокаТаблицы = ТаблицаСтиля.Найти(Имя, "Имя");
		Если (СтрокаТаблицы = Неопределено) Тогда
			СтрокаТаблицы = ТаблицаСтиля.Добавить();
			СтрокаТаблицы.Имя = Имя;
			СтрокаТаблицы.ЭлементСтиля = СтрЗаменить(Ресурс.Синоним, "ЦветФона", Подмена);
			СтрокаТаблицы.Шрифт = ШрифтыСтиля.ШрифтТекста;
			СтрокаТаблицы.Цвет = ЦветаСтиля.ЦветТекстаПоля;
			СтрокаТаблицы.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Если (ТипЗнч(НастройкиСтиля[Ресурс.Имя]) = Тип("ХранилищеЗначения")) Тогда
			ЦветФона = НастройкиСтиля[Ресурс.Имя].Получить();
			Если (Не ЦветФона = Неопределено) Тогда
				СтрокаТаблицы.ЦветФона = ТаблицаСтиля.Колонки.ЦветФона.ТипЗначения.ПривестиЗначение(ЦветФона);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСтиля;
	
КонецФункции // ПрочитатьТаблицуЦветовФонаСтиля()

Функция ЗаписатьТаблицуЦветовФонаСтиля(ТаблицаСтиля) Экспорт
	
	// Выборка данных.
	Запись = РегистрыСведений.ЦветаФонаСтиля.СоздатьМенеджерЗаписи(); 
	
	// Перенос данных.
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.ЦветаФонаСтиля.Ресурсы Цикл
		Имя = СтрЗаменить(Ресурс.Имя, "ЦветФона", Неопределено);
		
		СтрокаТаблицы = ТаблицаСтиля.Найти(Имя, "Имя");
		Если (СтрокаТаблицы = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись[Ресурс.Имя] = Новый ХранилищеЗначения(СтрокаТаблицы.ЦветФона);
		
	КонецЦикла;
	
	// Запись данных.
	Попытка
		Запись.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибкеЗапеисиРегистра(ОписаниеОшибки(), Ложь, ,, Запись);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ПолучитьТаблицуЦветовСтиля()

// Функция возвращает значение стиля, для требуемого элемента стиля.
//
Функция ПолучитьЗначениеСтиля(ЭлемнтСтиля, Шрифт = Неопределено, Цвет = Неопределено, ЦветФона = Неопределено) Экспорт

	// Нормализация.
	Имя = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлемнтСтиля, "Стиль", Неопределено), "Шрифт", Неопределено), "Цвет", Неопределено);
	
	// По умолчанию.
	Шрифт = ШрифтыСтиля.ШрифтТекста;
	Цвет = ЦветаСтиля.ЦветТекстаПоля;	
	ЦветФона = ЦветаСтиля.ЦветФонаПоля;	
	
	// Настройик стиля.
	ТаблицаСтиля = глЗначениеПеременной("глНастройкиСтиля");
	Если (ТаблицаСтиля = Неопределено) Тогда
		ТаблицаСтиля = ПрочитатьТаблицуЦветовФонаСтиля(ПрочитатьТаблицуЦветовСтиля(ПрочитатьТаблицуШрифтовСтиля(Неопределено, Неопределено), Неопределено), Неопределено);
		глЗначениеПеременнойУстановить("глНастройкиСтиля", ТаблицаСтиля, Истина);
	КонецЕсли;
	
	// Получение настройки.
	СтрокаТаблицы = ТаблицаСтиля.Найти(Имя, "Имя");
	Если (Не СтрокаТаблицы = Неопределено) Тогда
		Шрифт = СтрокаТаблицы.Шрифт;
		Цвет = СтрокаТаблицы.Цвет;	
		ЦветФона = СтрокаТаблицы.ЦветФона;
	КонецЕсли;
	
	// Результат.
	Возврат Новый Структура("Шрифт,Цвет,ЦветФона", Шрифт, Цвет, ЦветФона);

КонецФункции // ПолучитьЗначениеСтиля()

Функция СлужебныеПользователи(ТолькоСкрываемые = Ложь) Экспорт
	
	СписокИсключаемыхПользователей = Новый СписокЗначений;
	СписокИсключаемыхПользователей.Добавить(Справочники.Пользователи.FrontOffice);
	Если Не ТолькоСкрываемые Тогда
		СписокИсключаемыхПользователей.Добавить(Справочники.Пользователи.Администратор);
		СписокИсключаемыхПользователей.Добавить(Справочники.Пользователи.НеАвторизирован);
	КонецЕсли;
	
	Возврат СписокИсключаемыхПользователей;
	
КонецФункции // СлужебныеПользователи()
	
Функция ПолучитьНастрокуРазмера(СтроковоеПредставление = "") Экспорт
	
	// Нормализация размера.
	СтроковоеПредставление = СтрЗаменить(НРег(СтроковоеПредставление), "х", "x"); ТолькоЦифры = "";
	Для Индекс = 1 По СтрДлина(СтроковоеПредставление) Цикл
		Если Булево(СтрЧислоВхождений("1234567890x", Сред(СтроковоеПредставление, Индекс, 1))) Тогда
			ТолькоЦифры = ТолькоЦифры + Сред(СтроковоеПредставление, Индекс, 1);
		КонецЕсли;
	КонецЦикла;
	
	// Тип размера.
	ОписаниеТипов = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(4);
	
	// Получение размера.
	Результат = Новый Структура("Ширина,Высота", 0, 0);
		
	Позиция = Найти(ТолькоЦифры, "x");
	Если Булево(Позиция) Тогда
		Результат.Ширина = ОписаниеТипов.ПривестиЗначение(Лев(ТолькоЦифры, Мин(Позиция - 1, 4)));
		Результат.Высота = ОписаниеТипов.ПривестиЗначение(Сред(ТолькоЦифры, Позиция + 1, 4));
	КонецЕсли;
	
	// Возвращаемые значения.
	СтроковоеПредставление = Строка(Результат.Ширина) + "x" + Строка(Результат.Высота);
	Возврат Результат;
	
КонецФункции // ПолучитьНастрокуРазмера()



