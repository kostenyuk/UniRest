
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ РЕЗУЛЬТАТЫ ДЛЯ КОМАНД ПЕЧАТИ

// Сформировать печатные формы
Процедура СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, КоличествоЭкземпляров = 2) Экспорт
	
	// Получим менеджер печати
	//МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	МенеджерПечати = __ОбщегоНазначенияСервер.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	
	// Подготовим коллекцию для формируемых печатных форм
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов);
	
	// Подготовим структуру параметров вывода
	ПараметрыВывода = ПодготовитьСтруктуруПараметровВывода();
	
	ОбъектыПечати = Новый СписокЗначений;
	
	// Сформируем печатные формы
	Если ИмяМенеджераПечати	= "Документ.ПлатежноеПоручение"	Тогда
		МенеджерПечати.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, КоличествоЭкземпляров);
	Иначе
		МенеджерПечати.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
	// Проверим, все ли макеты были сформированы
	Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
		Если Стр.ТабличныйДокумент = Неопределено Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
										Стр.ИмяМакета);
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
		Стр.ТабличныйДокумент.КоличествоЭкземпляров = Стр.Экземпляров;
	КонецЦикла;
	
КонецПроцедуры

// Сформировать печатные формы для непосредственного вывода на принтер
Процедура СформироватьПечатныеФормыДляБыстройПечати(
		ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
		ТабличныеДокументы, ОбъектыПечати, ПараметрыВывода, Отказ) Экспорт
	
	Если НЕ ПравоДоступа("Вывод", Метаданные) Тогда
		Отказ = Истина;
		Возврат;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
	КоллекцияПечатныхФорм = Неопределено;
	ОбъектыПечати = Новый СписокЗначений;
	
	СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
		КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
		
	ТабличныеДокументы = Новый СписокЗначений;
	
	Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
		Если (ТипЗнч(Стр.ТабличныйДокумент) = Тип("ТабличныйДокумент")) И (Стр.ТабличныйДокумент.ВысотаТаблицы <> 0) Тогда
			ТабличныеДокументы.Добавить(Стр.ТабличныйДокумент, Стр.СинонимМакета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сформировать печатные формы для непосредственного вывода на принтер
// в серверном режиме в обычном приложении
Процедура СформироватьПечатныеФормыДляБыстройПечатиОбычноеПриложение(
				ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
				Адрес, ОбъектыПечати, ПараметрыВывода, Отказ) Экспорт
	
	Перем ОбъектыПечатиСЗ, ТабличныеДокументы;
	
	СформироватьПечатныеФормыДляБыстройПечати(
			ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
			ТабличныеДокументы, ОбъектыПечатиСЗ, ПараметрыВывода, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыПечати = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ОбъектыПечатиСЗ Цикл
		ОбъектыПечати.Вставить(ОбъектПечати.Представление, ОбъектПечати.Значение);
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(ТабличныеДокументы);
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ, ИСПОЛЬЗУЕМЫЕ МОДУЛЯМИ МЕНЕДЖЕРОВ ОБЪЕКТОВ ПРИ ФОРМИРОВАНИИ ТАБЛИЧНЫХ ДОКУМЕНТОВ

// Проверить, нужно ли печатать макет
Функция НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Экспорт
	
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ") <> Неопределено;
	
КонецФункции

// Вывести табличный документ в коллекцию печатных форм
Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент, Картинка = Неопределено, ПолныйПутьКМакету = "") Экспорт
	
	Стр = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	
	Если Стр <> Неопределено Тогда
		Стр.ТабличныйДокумент = ТабличныйДокумент;
		Стр.СинонимМакета = СинонимМакета;
		Стр.Картинка = Картинка;
		Стр.ПолныйПутьКМакету = ПолныйПутьКМакету;
	КонецЕсли;
	
КонецПроцедуры

// Задать область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
// Параметры:
//  ТабличныйДокумент - табличный документ - табличный документ печатной формы
//  НомерСтрокиНачало - число - позиция начала очередной области в документе
//  ОбъектыПечати - СписокЗначений - список объектов печати
//  Ссылка - ссылка на объект ИБ - объект печати
//
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ НЕЭКСПОРТНЫЕ ФУНКЦИИ

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм
//
Функция ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов) Экспорт
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	
	СтрИмен = СтрЗаменить(ИменаМакетов, ",", Символы.ПС);
	Для Сч = 1 По СтрЧислоСтрок(СтрИмен) Цикл
		Имя = СтрПолучитьСтроку(СтрИмен, Сч);
		Стр = Макеты.Найти(Имя, "ИмяМакета");
		Если Стр = Неопределено Тогда
			Стр = Макеты.Добавить();
			Стр.ИмяМакета = Имя;
			Стр.ИмяВРЕГ   = ВРег(Имя);
			Стр.Экземпляров = 1;
		Иначе
			Стр.Экземпляров = Стр.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Подготовить структуру параметров вывода для менеджера объекта формирующего печатные формы
//
Функция ПодготовитьСтруктуруПараметровВывода() Экспорт
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно",		Ложь);
	ПараметрыВывода.Вставить("ПолучательЭлектронногоПисьма",	Неопределено);
	ПараметрыВывода.Вставить("ОтправительЭлектронногоПисьма",	Неопределено);
	
	Возврат ПараметрыВывода;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ ФУНКЦИОНАЛЬНОСТИ ДЛЯ РАБОТЫ С ШАБЛОНАМИ ОФИСНЫХ ДОКУМЕНТОВ

// Добавляет к параметру НаборОбластей новую запись об области
// Параметры
// НаборОбластей - массив - набор областей (массив структур)
// ИмяОбласти - строка - имя добавляемой области
// ТипОбласти - строка - тип области:
//			ВерхнийКолонтитул
//			НижнийКолонтитул
//			Общая
//			СтрокаТаблицы
//			Список
//
Процедура ДобавитьОписаниеОбласти(НаборОбластей, знач ИмяОбласти, знач ТипОбласти) Экспорт
	
	НоваяОбласть = Новый Структура;
	
	НоваяОбласть.Вставить("ИмяОбласти", ИмяОбласти);
	НоваяОбласть.Вставить("ТипОбласти", ТипОбласти);
	
	НаборОбластей.Вставить(ИмяОбласти, НоваяОбласть);
	
КонецПроцедуры

// Интерфейс для вызова из клиентских модулей печати форм по макетам офисных документов.
// Получает за один вызов всю необходимую информацию: данные объектов по макетам, двоичные
// данные макетов, описание областей макетов.
// Параметры:
// ИмяМенеджераПечати - строка - имя для обращения к менеджеру объекта, например "Документ.<Имя документа>"
// ИменаМакетов       - строка - имена макетов, по которым будут формироваться печатные формы
// СоставДокументов   - массив ссылок - ссылки на объекты информационной базы (должны быть одного типа)
//
Функция ПолучитьМакетыИДанныеОбъектов(знач ИмяМенеджераПечати,
									  знач ИменаМакетов,
									  знач СоставДокументов) Экспорт
	
	МассивИменМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ИменаМакетов, " ", ""), ",");
	
	//МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	МенеджерОбъекта = __ОбщегоНазначенияСервер.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	МакетыИДанные = МенеджерОбъекта.ПолучитьДанныеПечати(СоставДокументов, МассивИменМакетов);
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", ПолучитьЛокальныйКаталогФайловПечати());
	
	Возврат МакетыИДанные;
	
КонецФункции

// Возвращает макет по полному пути к макету.
// Параметры:
//  ПолныйПутьКМакету - Строка - формат полного пути:
//								"Документ.<ИмяДокумента>.<ИмяМакета>"
//								"Обработка.<ИмяОбработки>.<ИмяМакета>"
//								"ОбщийМакет.<ИмяМакета>"
// Возвращаемое значение:
//	для макета типа MXL - табличный документ
//	для макетов DOC и ODT - двоичные данные
//
Функция ПолучитьМакет(ПолныйПутьКМакету) Экспорт
	
	ЧастиПути = СтрЗаменить(ПолныйПутьКМакету, ".", Символы.ПС);
	
	Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1) + "." + СтрПолучитьСтроку(ЧастиПути, 2);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 3);
	ИначеЕсли СтрЧислоСтрок(ЧастиПути) = 2 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 2);
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректные параметры функции.'");
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//
	//Запрос.Текст = "Выбрать Макет КАК Макет, Использование КАК Использование
	//				|ИЗ
	//				|	РегистрСведений.ПользовательскиеМакетыПечати
	//				|ГДЕ
	//				|	Объект=&Объект
	//				|	И	ИмяМакета=&ИмяМакета
	//				|	И	Использование";
	//
	//Запрос.Параметры.Вставить("Объект", ПутьКМетаданным);
	//Запрос.Параметры.Вставить("ИмяМакета", ПутьКОбъектуМетаданных);
	//
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	
	//УстановитьПривилегированныйРежим(Ложь);
	
	//Если Выборка.Следующий() Тогда
	//	Результат = Выборка.Макет.Получить();
	//	Если Найти(ПутьКОбъектуМетаданных, "ПФ_MXL") Тогда
	//		Результат = ПолучитьТабличныйДокументПоДвоичнымДанным(Результат);
	//	КонецЕсли;
	//Иначе
		Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
			//Результат = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПутьКМетаданным).ПолучитьМакет(ПутьКОбъектуМетаданных);
			//Результат = __ОбщегоНазначенияСервер.МенеджерОбъектаПоПолномуИмени(ПутьКМетаданным).ПолучитьМакет(ПутьКОбъектуМетаданных);
			Результат = Документы.ОтчетПроизводстваЗаСмену;
		Иначе
			Результат = ПолучитьОбщийМакет(ПутьКОбъектуМетаданных);
		КонецЕсли;
	//КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение "Некорректные данные пользовательского макета";
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТабличныйДокументПоДвоичнымДанным(ДвоичныеДанные) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьЛокальныйКаталогФайловПечати() Экспорт
	
	Значение = ХранилищеОбщихНастроек.Загрузить("ЛокальныйКаталогФайловПечати");
	Возврат ?(Значение = Неопределено, "", Значение);
	
КонецФункции

Процедура СохранитьЛокальныйКаталогФайловПечати(Каталог) Экспорт
	
	ХранилищеОбщихНастроек.Сохранить("ЛокальныйКаталогФайловПечати", , Каталог);
	
КонецПроцедуры
